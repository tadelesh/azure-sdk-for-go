//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsql_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestRecoverableDatabases_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/RecoverableDatabaseGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a recoverable database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewRecoverableDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"recoverabledatabasetest-6852",
		"recoverabledatabasetest-2080",
		"recoverabledatabasetest-9187",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/RecoverableDatabaseGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.RecoverableDatabase{
			Name: to.Ptr("recoverabledatabasetest-9187"),
			Type: to.Ptr("Microsoft.Sql/servers/recoverabledatabases"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/recoverabledatabasetest-6852/providers/Microsoft.Sql/servers/recoverabledatabasetest-2080/recoverabledatabases/recoverabledatabasetest-9187"),
			Properties: &armsql.RecoverableDatabaseProperties{
				Edition:                 to.Ptr("Basic"),
				LastAvailableBackupDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-26T01:06:29.78Z"); return t }()),
				ServiceLevelObjective:   to.Ptr("Basic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoverableDatabase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoverableDatabase)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/RecoverableDatabaseGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoverableDatabases_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/RecoverableDatabaseList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get list of restorable dropped databases"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewRecoverableDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("recoverabledatabasetest-1234",
		"recoverabledatabasetest-7177",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/RecoverableDatabaseList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.RecoverableDatabaseListResult{
			Value: []*armsql.RecoverableDatabase{
				{
					Name: to.Ptr("recoverabledatabasetest-1235"),
					Type: to.Ptr("Microsoft.Sql/servers/recoverabledatabases"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/recoverabledatabasetest-1234/providers/Microsoft.Sql/servers/recoverabledatabasetest-7177/recoverabledatabases/recoverabledatabasetest-1235"),
					Properties: &armsql.RecoverableDatabaseProperties{
						Edition:                 to.Ptr("Standard"),
						LastAvailableBackupDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-26T01:06:29.78Z"); return t }()),
						ServiceLevelObjective:   to.Ptr("S0"),
					},
				},
				{
					Name: to.Ptr("recoverabledatabasetest-9231"),
					Type: to.Ptr("Microsoft.Sql/servers/recoverabledatabases"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/recoverabledatabasetest-1234/providers/Microsoft.Sql/servers/recoverabledatabasetest-7177/recoverabledatabases/recoverabledatabasetest-9231"),
					Properties: &armsql.RecoverableDatabaseProperties{
						Edition:                 to.Ptr("Premium"),
						LastAvailableBackupDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-26T03:20:31.78Z"); return t }()),
						ServiceLevelObjective:   to.Ptr("P1"),
					},
				},
				{
					Name: to.Ptr("recoverabledatabasetest-0342"),
					Type: to.Ptr("Microsoft.Sql/servers/recoverabledatabases"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/recoverabledatabasetest-1234/providers/Microsoft.Sql/servers/recoverabledatabasetest-7177/recoverabledatabases/recoverabledatabasetest-0342"),
					Properties: &armsql.RecoverableDatabaseProperties{
						Edition:                 to.Ptr("Basic"),
						LastAvailableBackupDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T02:06:18.78Z"); return t }()),
						ServiceLevelObjective:   to.Ptr("Basic"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecoverableDatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecoverableDatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/RecoverableDatabaseList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataMaskingPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingPolicyCreateOrUpdateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update data masking policy max"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDataMaskingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		armsql.DataMaskingPolicy{
			Properties: &armsql.DataMaskingPolicyProperties{
				DataMaskingState: to.Ptr(armsql.DataMaskingStateEnabled),
				ExemptPrincipals: to.Ptr("testuser;"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingPolicyCreateOrUpdateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DataMaskingPolicy{
			Name:     to.Ptr("Default"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases/dataMaskingPolicies"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"),
			Location: to.Ptr("Central US"),
			Properties: &armsql.DataMaskingPolicyProperties{
				ApplicationPrincipals: to.Ptr(""),
				DataMaskingState:      to.Ptr(armsql.DataMaskingStateEnabled),
				ExemptPrincipals:      to.Ptr("testuser;"),
				MaskingLevel:          to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingPolicyCreateOrUpdateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingPolicyCreateOrUpdateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update data masking policy min"},
	})
	client = armsql.NewDataMaskingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		armsql.DataMaskingPolicy{
			Properties: &armsql.DataMaskingPolicyProperties{
				DataMaskingState: to.Ptr(armsql.DataMaskingStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingPolicyCreateOrUpdateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DataMaskingPolicy{
			Name:     to.Ptr("Default"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases/dataMaskingPolicies"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"),
			Location: to.Ptr("Central US"),
			Properties: &armsql.DataMaskingPolicyProperties{
				ApplicationPrincipals: to.Ptr(""),
				DataMaskingState:      to.Ptr(armsql.DataMaskingStateEnabled),
				ExemptPrincipals:      to.Ptr(""),
				MaskingLevel:          to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingPolicyCreateOrUpdateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataMaskingPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingPolicyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get data masking policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDataMaskingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingPolicyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DataMaskingPolicy{
			Name:     to.Ptr("Default"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases/dataMaskingPolicies"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"),
			Location: to.Ptr("Central US"),
			Properties: &armsql.DataMaskingPolicyProperties{
				ApplicationPrincipals: to.Ptr(""),
				DataMaskingState:      to.Ptr(armsql.DataMaskingStateEnabled),
				ExemptPrincipals:      to.Ptr(""),
				MaskingLevel:          to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingPolicyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataMaskingRules_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleCreateOrUpdateDefaultMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update data masking rule for default max"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDataMaskingRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		armsql.DataMaskingRule{
			Properties: &armsql.DataMaskingRuleProperties{
				AliasName:       to.Ptr("nickname"),
				ColumnName:      to.Ptr("test1"),
				MaskingFunction: to.Ptr(armsql.DataMaskingFunctionDefault),
				RuleState:       to.Ptr(armsql.DataMaskingRuleStateEnabled),
				SchemaName:      to.Ptr("dbo"),
				TableName:       to.Ptr("Table_1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleCreateOrUpdateDefaultMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DataMaskingRule{
			Type:     to.Ptr("Microsoft.Sql/servers/databases/dataMaskingPolicies/rules"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-6852/databases/sqlcrudtest-331/dataMaskingPolicies/Default/rules/"),
			Location: to.Ptr("Central US"),
			Properties: &armsql.DataMaskingRuleProperties{
				AliasName:       to.Ptr("nickname"),
				ColumnName:      to.Ptr("test1"),
				ID:              to.Ptr("dbo_Table_1_test1"),
				MaskingFunction: to.Ptr(armsql.DataMaskingFunctionDefault),
				RuleState:       to.Ptr(armsql.DataMaskingRuleStateEnabled),
				SchemaName:      to.Ptr("dbo"),
				TableName:       to.Ptr("Table_1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleCreateOrUpdateDefaultMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleCreateOrUpdateDefaultMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update data masking rule for default min"},
	})
	client = armsql.NewDataMaskingRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		armsql.DataMaskingRule{
			Properties: &armsql.DataMaskingRuleProperties{
				ColumnName:      to.Ptr("test1"),
				MaskingFunction: to.Ptr(armsql.DataMaskingFunctionDefault),
				SchemaName:      to.Ptr("dbo"),
				TableName:       to.Ptr("Table_1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleCreateOrUpdateDefaultMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DataMaskingRule{
			Type:     to.Ptr("Microsoft.Sql/servers/databases/dataMaskingPolicies/rules"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-6852/databases/sqlcrudtest-331/dataMaskingPolicies/Default/rules/"),
			Location: to.Ptr("Central US"),
			Properties: &armsql.DataMaskingRuleProperties{
				ColumnName:      to.Ptr("test1"),
				ID:              to.Ptr("dbo_Table_1_test1"),
				MaskingFunction: to.Ptr(armsql.DataMaskingFunctionDefault),
				RuleState:       to.Ptr(armsql.DataMaskingRuleStateEnabled),
				SchemaName:      to.Ptr("dbo"),
				TableName:       to.Ptr("Table_1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleCreateOrUpdateDefaultMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleCreateOrUpdateNumber.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update data masking rule for numbers"},
	})
	client = armsql.NewDataMaskingRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		armsql.DataMaskingRule{
			Properties: &armsql.DataMaskingRuleProperties{
				ColumnName:      to.Ptr("test1"),
				MaskingFunction: to.Ptr(armsql.DataMaskingFunctionNumber),
				NumberFrom:      to.Ptr("0"),
				NumberTo:        to.Ptr("2"),
				SchemaName:      to.Ptr("dbo"),
				TableName:       to.Ptr("Table_1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleCreateOrUpdateNumber.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DataMaskingRule{
			Type:     to.Ptr("Microsoft.Sql/servers/databases/dataMaskingPolicies/rules"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-6852/databases/sqlcrudtest-331/dataMaskingPolicies/Default/rules/"),
			Location: to.Ptr("Central US"),
			Properties: &armsql.DataMaskingRuleProperties{
				ColumnName:      to.Ptr("test1"),
				ID:              to.Ptr("dbo_Table_1_test1"),
				MaskingFunction: to.Ptr(armsql.DataMaskingFunctionNumber),
				NumberFrom:      to.Ptr("0"),
				NumberTo:        to.Ptr("2"),
				RuleState:       to.Ptr(armsql.DataMaskingRuleStateEnabled),
				SchemaName:      to.Ptr("dbo"),
				TableName:       to.Ptr("Table_1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleCreateOrUpdateNumber.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleCreateOrUpdateText.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update data masking rule for text"},
	})
	client = armsql.NewDataMaskingRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		armsql.DataMaskingRule{
			Properties: &armsql.DataMaskingRuleProperties{
				ColumnName:        to.Ptr("test1"),
				MaskingFunction:   to.Ptr(armsql.DataMaskingFunctionText),
				PrefixSize:        to.Ptr("1"),
				ReplacementString: to.Ptr("asdf"),
				SchemaName:        to.Ptr("dbo"),
				SuffixSize:        to.Ptr("0"),
				TableName:         to.Ptr("Table_1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleCreateOrUpdateText.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DataMaskingRule{
			Type:     to.Ptr("Microsoft.Sql/servers/databases/dataMaskingPolicies/rules"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-6852/databases/sqlcrudtest-331/dataMaskingPolicies/Default/rules/"),
			Location: to.Ptr("Central US"),
			Properties: &armsql.DataMaskingRuleProperties{
				ColumnName:        to.Ptr("test1"),
				ID:                to.Ptr("dbo_Table_1_test1"),
				MaskingFunction:   to.Ptr(armsql.DataMaskingFunctionText),
				PrefixSize:        to.Ptr("1"),
				ReplacementString: to.Ptr("asdf"),
				RuleState:         to.Ptr(armsql.DataMaskingRuleStateEnabled),
				SchemaName:        to.Ptr("dbo"),
				SuffixSize:        to.Ptr("0"),
				TableName:         to.Ptr("Table_1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleCreateOrUpdateText.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataMaskingRules_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List data masking rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDataMaskingRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DataMaskingRuleListResult{
			Value: []*armsql.DataMaskingRule{
				{
					Type:     to.Ptr("Microsoft.Sql/servers/databases/dataMaskingPolicies/rules"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-6852/databases/sqlcrudtest-331/dataMaskingPolicies/Default/rules/"),
					Location: to.Ptr("Central US"),
					Properties: &armsql.DataMaskingRuleProperties{
						ColumnName:        to.Ptr("test1"),
						ID:                to.Ptr("dbo_Table_1_test1"),
						MaskingFunction:   to.Ptr(armsql.DataMaskingFunctionText),
						PrefixSize:        to.Ptr("1"),
						ReplacementString: to.Ptr("asdf"),
						RuleState:         to.Ptr(armsql.DataMaskingRuleStateEnabled),
						SchemaName:        to.Ptr("dbo"),
						SuffixSize:        to.Ptr("0"),
						TableName:         to.Ptr("Table_1"),
					},
				},
				{
					Type:     to.Ptr("Microsoft.Sql/servers/databases/dataMaskingPolicies/rules"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-6852/databases/sqlcrudtest-331/dataMaskingPolicies/Default/rules/"),
					Location: to.Ptr("Central US"),
					Properties: &armsql.DataMaskingRuleProperties{
						ColumnName:      to.Ptr("test1"),
						ID:              to.Ptr("dbo_Table_1_test1"),
						MaskingFunction: to.Ptr(armsql.DataMaskingFunctionNumber),
						NumberFrom:      to.Ptr("0"),
						NumberTo:        to.Ptr("2"),
						RuleState:       to.Ptr(armsql.DataMaskingRuleStateEnabled),
						SchemaName:      to.Ptr("dbo"),
						TableName:       to.Ptr("Table_1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataMaskingRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataMaskingRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DataMaskingRuleList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGeoBackupPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/GeoBackupPoliciesCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update geo backup policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewGeoBackupPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-5961",
		"testdw",
		armsql.GeoBackupPolicyNameDefault,
		armsql.GeoBackupPolicy{
			Properties: &armsql.GeoBackupPolicyProperties{
				State: to.Ptr(armsql.GeoBackupPolicyStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/GeoBackupPoliciesCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.GeoBackupPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/geoBackupPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-4799/providers/Microsoft.Sql/servers/sqlcrudtest-5961/databases/testdw/geoBackupPolicies/Default"),
			Properties: &armsql.GeoBackupPolicyProperties{
				State: to.Ptr(armsql.GeoBackupPolicyStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GeoBackupPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GeoBackupPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/GeoBackupPoliciesCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGeoBackupPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/GeoBackupPoliciesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get geo backup policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewGeoBackupPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-5961",
		"testdw",
		armsql.GeoBackupPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/GeoBackupPoliciesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.GeoBackupPolicy{
			Name:     to.Ptr("Default"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases/geoBackupPolicies"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-4799/providers/Microsoft.Sql/servers/sqlcrudtest-5961/databases/testdw/geoBackupPolicies/Default"),
			Location: to.Ptr("Central US"),
			Properties: &armsql.GeoBackupPolicyProperties{
				State:       to.Ptr(armsql.GeoBackupPolicyStateEnabled),
				StorageType: to.Ptr("Premium"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GeoBackupPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GeoBackupPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/GeoBackupPoliciesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGeoBackupPolicies_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/GeoBackupPoliciesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List geo backup policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewGeoBackupPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("sqlcrudtest-4799",
		"sqlcrudtest-5961",
		"testdw",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/GeoBackupPoliciesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.GeoBackupPolicyListResult{
			Value: []*armsql.GeoBackupPolicy{
				{
					Name:     to.Ptr("Default"),
					Type:     to.Ptr("Microsoft.Sql/servers/databases/geoBackupPolicies"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-4799/providers/Microsoft.Sql/servers/sqlcrudtest-5961/databases/testdw/geoBackupPolicies/Default"),
					Location: to.Ptr("Central US"),
					Properties: &armsql.GeoBackupPolicyProperties{
						State:       to.Ptr(armsql.GeoBackupPolicyStateEnabled),
						StorageType: to.Ptr("Premium"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GeoBackupPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GeoBackupPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/GeoBackupPoliciesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_ListMetrics(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DatabaseMetricsListWithFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List database usage metrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListMetrics("sqlcrudtest-6730",
		"sqlcrudtest-9007",
		"3481",
		"name/value eq 'cpu_percent' and timeGrain eq '00:10:00' and startTime eq '2017-06-02T18:35:00Z' and endTime eq '2017-06-02T18:55:00Z'",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DatabaseMetricsListWithFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.MetricListResult{
			Value: []*armsql.Metric{
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("CPU percentage"),
						Value:          to.Ptr("cpu_percent"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T18:55:00Z"); return t }()),
					MetricValues: []*armsql.MetricValue{
						{
							Average:   to.Ptr[float64](0),
							Count:     to.Ptr[int32](1),
							Maximum:   to.Ptr[float64](0),
							Minimum:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T18:30:01Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Average:   to.Ptr[float64](0),
							Count:     to.Ptr[int32](1),
							Maximum:   to.Ptr[float64](0),
							Minimum:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T18:40:01Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Average:   to.Ptr[float64](0),
							Count:     to.Ptr[int32](1),
							Maximum:   to.Ptr[float64](0),
							Minimum:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T18:50:01Z"); return t }()),
							Total:     to.Ptr[float64](0),
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T18:35:00Z"); return t }()),
					TimeGrain: to.Ptr("00:10:00"),
					Unit:      to.Ptr(armsql.UnitTypePercent),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DatabaseMetricsListWithFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_ListMetricDefinitions(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DatabaseMetricsDefinitionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List database usage metrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListMetricDefinitions("sqlcrudtest-6730",
		"sqlcrudtest-9007",
		"3481",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DatabaseMetricsDefinitionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.MetricDefinitionListResult{
			Value: []*armsql.MetricDefinition{
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("CPU percentage"),
						Value:          to.Ptr("cpu_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT15S"),
						},
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT60S"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Data IO percentage"),
						Value:          to.Ptr("physical_data_read_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT15S"),
						},
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT60S"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Log IO percentage"),
						Value:          to.Ptr("log_write_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT15S"),
						},
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT60S"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("DTU percentage"),
						Value:          to.Ptr("dtu_consumption_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT15S"),
						},
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT60S"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Total database size"),
						Value:          to.Ptr("storage"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeMaximum),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypeBytes),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("In-Memory OLTP storage percent"),
						Value:          to.Ptr("xtp_storage_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT15S"),
						},
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT60S"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Workers percentage"),
						Value:          to.Ptr("workers_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Sessions percentage"),
						Value:          to.Ptr("sessions_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("DTU limit"),
						Value:          to.Ptr("dtu_limit"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypeCount),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("DTU used"),
						Value:          to.Ptr("dtu_used"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypeCount),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Successful Connections"),
						Value:          to.Ptr("connection_successful"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeTotal),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypeCount),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Failed Connections"),
						Value:          to.Ptr("connection_failed"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeTotal),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypeCount),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Blocked by Firewall"),
						Value:          to.Ptr("blocked_by_firewall"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeTotal),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypeCount),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Deadlocks"),
						Value:          to.Ptr("deadlock"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeTotal),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypeCount),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Database size percentage"),
						Value:          to.Ptr("storage_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeMaximum),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricDefinitionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricDefinitionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/DatabaseMetricsDefinitionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ListVCoreDatabasesByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a list of databases."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("Default-SQL-SouthEastAsia",
		"testsvr",
		&armsql.DatabasesClientListByServerOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ListVCoreDatabasesByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseListResult{
			Value: []*armsql.Database{
				{
					Name:     to.Ptr("testdb"),
					Type:     to.Ptr("Microsoft.Sql/servers/databases"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
					Location: to.Ptr("southeastasia"),
					Kind:     to.Ptr("v12.0,user,vcore"),
					Properties: &armsql.DatabaseProperties{
						CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
						Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
						CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyZone),
						CurrentServiceObjectiveName:    to.Ptr("BC_Gen4_2"),
						CurrentSKU: &armsql.SKU{
							Name:     to.Ptr("BC_Gen4"),
							Capacity: to.Ptr[int32](2),
							Tier:     to.Ptr("BusinessCritical"),
						},
						DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
						DefaultSecondaryLocation:         to.Ptr("North Europe"),
						EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:51:33.937Z"); return t }()),
						IsInfraEncryptionEnabled:         to.Ptr(false),
						IsLedgerOn:                       to.Ptr(false),
						LicenseType:                      to.Ptr(armsql.DatabaseLicenseTypeLicenseIncluded),
						MaxLogSizeBytes:                  to.Ptr[int64](104857600),
						MaxSizeBytes:                     to.Ptr[int64](268435456000),
						ReadScale:                        to.Ptr(armsql.DatabaseReadScaleEnabled),
						RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyZone),
						RequestedServiceObjectiveName:    to.Ptr("BC_Gen4_2"),
						Status:                           to.Ptr(armsql.DatabaseStatusOnline),
						ZoneRedundant:                    to.Ptr(false),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("BC_Gen4"),
						Capacity: to.Ptr[int32](2),
						Tier:     to.Ptr("BusinessCritical"),
					},
				},
				{
					Name:     to.Ptr("master"),
					Type:     to.Ptr("Microsoft.Sql/servers/databases"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/master"),
					Location: to.Ptr("southeastasia"),
					Kind:     to.Ptr("v12.0,system"),
					Properties: &armsql.DatabaseProperties{
						CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
						Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:23:42.537Z"); return t }()),
						CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyLocal),
						CurrentServiceObjectiveName:    to.Ptr("System0"),
						CurrentSKU: &armsql.SKU{
							Name:     to.Ptr("System0"),
							Capacity: to.Ptr[int32](0),
							Tier:     to.Ptr("System"),
						},
						DatabaseID:                       to.Ptr("e6be351f-2cc9-4604-9e52-b0b28b2710b0"),
						DefaultSecondaryLocation:         to.Ptr("North Europe"),
						IsInfraEncryptionEnabled:         to.Ptr(false),
						IsLedgerOn:                       to.Ptr(false),
						MaxSizeBytes:                     to.Ptr[int64](32212254720),
						ReadScale:                        to.Ptr(armsql.DatabaseReadScaleDisabled),
						RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyLocal),
						RequestedServiceObjectiveName:    to.Ptr("System0"),
						Status:                           to.Ptr(armsql.DatabaseStatusOnline),
						ZoneRedundant:                    to.Ptr(false),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("System0"),
						Capacity: to.Ptr[int32](0),
						Tier:     to.Ptr("System"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ListVCoreDatabasesByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/GetVCoreDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/GetVCoreDatabase.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user,vcore"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CurrentServiceObjectiveName:    to.Ptr("BC_Gen5_2"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("BC_Gen5"),
					Capacity: to.Ptr[int32](2),
					Tier:     to.Ptr("BusinessCritical"),
				},
				DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:         to.Ptr("North Europe"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:51:33.937Z"); return t }()),
				IsInfraEncryptionEnabled:         to.Ptr(false),
				IsLedgerOn:                       to.Ptr(false),
				LicenseType:                      to.Ptr(armsql.DatabaseLicenseTypeLicenseIncluded),
				MaintenanceConfigurationID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1"),
				MaxLogSizeBytes:                  to.Ptr[int64](104857600),
				MaxSizeBytes:                     to.Ptr[int64](268435456000),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleEnabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				RequestedServiceObjectiveName:    to.Ptr("BC_Gen5_2"),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("BC_Gen5"),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr("BusinessCritical"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/GetVCoreDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateVCoreDatabaseByServiceObjective.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a VCore database by specifying service objective name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.Database{
			Location: to.Ptr("southeastasia"),
			SKU: &armsql.SKU{
				Name:     to.Ptr("BC"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen4"),
			},
		},
		&armsql.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateVCoreDatabaseByServiceObjective.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateVCoreDatabaseByServiceObjective.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CurrentServiceObjectiveName:    to.Ptr("BC_Gen4_2"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("BC_Gen4"),
					Capacity: to.Ptr[int32](2),
					Tier:     to.Ptr("BusinessCritical"),
				},
				DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:         to.Ptr("North Europe"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:51:33.937Z"); return t }()),
				IsInfraEncryptionEnabled:         to.Ptr(false),
				IsLedgerOn:                       to.Ptr(false),
				LicenseType:                      to.Ptr(armsql.DatabaseLicenseTypeLicenseIncluded),
				MaxLogSizeBytes:                  to.Ptr[int64](104857600),
				MaxSizeBytes:                     to.Ptr[int64](1073741824),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleEnabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("BC_Gen4"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen4"),
				Tier:     to.Ptr("BusinessCritical"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateVCoreDatabaseByServiceObjective.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateVCoreDatabaseBySkuNameCapacity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a VCore database by specifying sku name and capacity."},
	})
	client = armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.Database{
			Location: to.Ptr("southeastasia"),
			SKU: &armsql.SKU{
				Name:     to.Ptr("BC_Gen4"),
				Capacity: to.Ptr[int32](2),
			},
		},
		&armsql.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateVCoreDatabaseBySkuNameCapacity.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateVCoreDatabaseBySkuNameCapacity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CurrentServiceObjectiveName:    to.Ptr("BC_Gen4_2"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("BC_Gen4"),
					Capacity: to.Ptr[int32](2),
					Tier:     to.Ptr("BusinessCritical"),
				},
				DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:         to.Ptr("North Europe"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:51:33.937Z"); return t }()),
				IsInfraEncryptionEnabled:         to.Ptr(false),
				IsLedgerOn:                       to.Ptr(false),
				LicenseType:                      to.Ptr(armsql.DatabaseLicenseTypeLicenseIncluded),
				MaxLogSizeBytes:                  to.Ptr[int64](104857600),
				MaxSizeBytes:                     to.Ptr[int64](1073741824),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleEnabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("BC_Gen4"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen4"),
				Tier:     to.Ptr("BusinessCritical"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateVCoreDatabaseBySkuNameCapacity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseCopyMode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a database as a copy."},
	})
	client = armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"dbcopy",
		armsql.Database{
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.DatabaseProperties{
				CreateMode:       to.Ptr(armsql.CreateModeCopy),
				SourceDatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			},
			SKU: &armsql.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		},
		&armsql.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseCopyMode.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseCopyMode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("dbcopy"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/dbcopy"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CurrentServiceObjectiveName:    to.Ptr("S0"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("Standard"),
					Capacity: to.Ptr[int32](10),
					Tier:     to.Ptr("Standard"),
				},
				DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:         to.Ptr("North Europe"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:51:33.937Z"); return t }()),
				IsInfraEncryptionEnabled:         to.Ptr(false),
				IsLedgerOn:                       to.Ptr(false),
				MaxSizeBytes:                     to.Ptr[int64](268435456000),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleDisabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				RequestedServiceObjectiveName:    to.Ptr("S0"),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("Standard"),
				Capacity: to.Ptr[int32](10),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseCopyMode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseSecondaryMode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a database as an on-line secondary."},
	})
	client = armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.Database{
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.DatabaseProperties{
				CreateMode:       to.Ptr(armsql.CreateModeSecondary),
				SecondaryType:    to.Ptr(armsql.SecondaryTypeGeo),
				SourceDatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-NorthEurope/providers/Microsoft.Sql/servers/testsvr1/databases/testdb"),
			},
			SKU: &armsql.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		},
		&armsql.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseSecondaryMode.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseSecondaryMode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CurrentServiceObjectiveName:    to.Ptr("S0"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("Standard"),
					Capacity: to.Ptr[int32](10),
					Tier:     to.Ptr("Standard"),
				},
				DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:         to.Ptr("North Europe"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:51:33.937Z"); return t }()),
				IsInfraEncryptionEnabled:         to.Ptr(false),
				IsLedgerOn:                       to.Ptr(false),
				MaxSizeBytes:                     to.Ptr[int64](268435456000),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleDisabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				RequestedServiceObjectiveName:    to.Ptr("S0"),
				SecondaryType:                    to.Ptr(armsql.SecondaryTypeGeo),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("Standard"),
				Capacity: to.Ptr[int32](10),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseSecondaryMode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseNamedReplica.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a database as named replica secondary."},
	})
	client = armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.Database{
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.DatabaseProperties{
				CreateMode:       to.Ptr(armsql.CreateModeSecondary),
				SecondaryType:    to.Ptr(armsql.SecondaryTypeNamed),
				SourceDatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-NorthEurope/providers/Microsoft.Sql/servers/testsvr1/databases/primarydb"),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("HS_Gen4"),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr("Hyperscale"),
			},
		},
		&armsql.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseNamedReplica.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseNamedReplica.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user,vcore,hyperscale"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CurrentServiceObjectiveName:    to.Ptr("HS_Gen4_2"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("HS_Gen4"),
					Capacity: to.Ptr[int32](2),
					Family:   to.Ptr("Gen4"),
					Tier:     to.Ptr("Hyperscale"),
				},
				DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:         to.Ptr("North Europe"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:51:33.937Z"); return t }()),
				HighAvailabilityReplicaCount:     to.Ptr[int32](0),
				IsInfraEncryptionEnabled:         to.Ptr(false),
				IsLedgerOn:                       to.Ptr(false),
				LicenseType:                      to.Ptr(armsql.DatabaseLicenseTypeLicenseIncluded),
				MaxSizeBytes:                     to.Ptr[int64](-1),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleDisabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				RequestedServiceObjectiveName:    to.Ptr("HS_Gen4_2"),
				SecondaryType:                    to.Ptr(armsql.SecondaryTypeNamed),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("HS_Gen4"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen4"),
				Tier:     to.Ptr("Hyperscale"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseNamedReplica.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabasePITRMode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a database from PointInTimeRestore."},
	})
	client = armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"dbpitr",
		armsql.Database{
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.DatabaseProperties{
				CreateMode:         to.Ptr(armsql.CreateModePointInTimeRestore),
				RestorePointInTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-22T05:35:31.503Z"); return t }()),
				SourceDatabaseID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SoutheastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			},
		},
		&armsql.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabasePITRMode.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabasePITRMode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("dbpitr"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SoutheastAsia/providers/Microsoft.Sql/servers/testsvr/databases/dbpitr"),
			Location: to.Ptr("SoutheastAsia"),
			Kind:     to.Ptr("v12.0,user"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-23T20:31:35.807Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CurrentServiceObjectiveName:    to.Ptr("S0"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("Standard"),
					Capacity: to.Ptr[int32](10),
					Tier:     to.Ptr("Standard"),
				},
				DatabaseID:                       to.Ptr("2463ef48-53e2-4c26-9781-2d7138080bfd"),
				DefaultSecondaryLocation:         to.Ptr("SoutheastAsia"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-23T20:47:37Z"); return t }()),
				IsInfraEncryptionEnabled:         to.Ptr(false),
				IsLedgerOn:                       to.Ptr(false),
				MaxSizeBytes:                     to.Ptr[int64](268435456000),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleDisabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				RequestedServiceObjectiveName:    to.Ptr("S0"),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("Standard"),
				Capacity: to.Ptr[int32](10),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabasePITRMode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseDefaultMode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a database with default mode."},
	})
	client = armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.Database{
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.DatabaseProperties{
				Collation:    to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreateMode:   to.Ptr(armsql.CreateModeDefault),
				MaxSizeBytes: to.Ptr[int64](1073741824),
			},
			SKU: &armsql.SKU{
				Name: to.Ptr("S0"),
				Tier: to.Ptr("Standard"),
			},
		},
		&armsql.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseDefaultMode.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseDefaultMode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CurrentServiceObjectiveName:    to.Ptr("S0"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("Standard"),
					Capacity: to.Ptr[int32](10),
					Tier:     to.Ptr("Standard"),
				},
				DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:         to.Ptr("North Europe"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:51:33.937Z"); return t }()),
				IsInfraEncryptionEnabled:         to.Ptr(false),
				IsLedgerOn:                       to.Ptr(false),
				MaxSizeBytes:                     to.Ptr[int64](1073741824),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleDisabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				RequestedServiceObjectiveName:    to.Ptr("S0"),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("S0"),
				Capacity: to.Ptr[int32](10),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseDefaultMode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseLedger.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a database with ledger on."},
	})
	client = armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.Database{
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.DatabaseProperties{
				IsLedgerOn: to.Ptr(true),
			},
		},
		&armsql.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseLedger.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseLedger.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CurrentServiceObjectiveName:    to.Ptr("S0"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("Standard"),
					Capacity: to.Ptr[int32](10),
					Tier:     to.Ptr("Standard"),
				},
				DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:         to.Ptr("North Europe"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:51:33.937Z"); return t }()),
				IsLedgerOn:                       to.Ptr(true),
				MaxSizeBytes:                     to.Ptr[int64](268435456000),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleDisabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				RequestedServiceObjectiveName:    to.Ptr("S0"),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("Standard"),
				Capacity: to.Ptr[int32](10),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseLedger.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a database with minimum number of parameters."},
	})
	client = armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.Database{
			Location: to.Ptr("southeastasia"),
		},
		&armsql.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CurrentServiceObjectiveName:    to.Ptr("S0"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("Standard"),
					Capacity: to.Ptr[int32](10),
					Tier:     to.Ptr("Standard"),
				},
				DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:         to.Ptr("North Europe"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:51:33.937Z"); return t }()),
				IsInfraEncryptionEnabled:         to.Ptr(false),
				IsLedgerOn:                       to.Ptr(false),
				MaxSizeBytes:                     to.Ptr[int64](268435456000),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleDisabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				RequestedServiceObjectiveName:    to.Ptr("S0"),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("Standard"),
				Capacity: to.Ptr[int32](10),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseMaintenanceConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a database with preferred maintenance window."},
	})
	client = armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.Database{
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.DatabaseProperties{
				Collation:                  to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreateMode:                 to.Ptr(armsql.CreateModeDefault),
				MaintenanceConfigurationID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1"),
				MaxSizeBytes:               to.Ptr[int64](1073741824),
			},
			SKU: &armsql.SKU{
				Name: to.Ptr("S2"),
				Tier: to.Ptr("Standard"),
			},
		},
		&armsql.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseMaintenanceConfiguration.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseMaintenanceConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CurrentServiceObjectiveName:    to.Ptr("S2"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("Standard"),
					Capacity: to.Ptr[int32](50),
					Tier:     to.Ptr("Standard"),
				},
				DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:         to.Ptr("North Europe"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-29T06:41:18.283Z"); return t }()),
				IsInfraEncryptionEnabled:         to.Ptr(false),
				IsLedgerOn:                       to.Ptr(false),
				MaintenanceConfigurationID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1"),
				MaxSizeBytes:                     to.Ptr[int64](1073741824),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleDisabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name: to.Ptr("S2"),
				Tier: to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseMaintenanceConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseConfiguredBackupStorageRedundancy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a database with specified backup storage redundancy."},
	})
	client = armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.Database{
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.DatabaseProperties{
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyZone),
			},
		},
		&armsql.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseConfiguredBackupStorageRedundancy.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseConfiguredBackupStorageRedundancy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyZone),
				CurrentServiceObjectiveName:    to.Ptr("S0"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("Standard"),
					Capacity: to.Ptr[int32](10),
					Tier:     to.Ptr("Standard"),
				},
				DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:         to.Ptr("North Europe"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:51:33.937Z"); return t }()),
				IsInfraEncryptionEnabled:         to.Ptr(false),
				IsLedgerOn:                       to.Ptr(false),
				MaxSizeBytes:                     to.Ptr[int64](268435456000),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleDisabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyZone),
				RequestedServiceObjectiveName:    to.Ptr("S0"),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("Standard"),
				Capacity: to.Ptr[int32](10),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/CreateDatabaseConfiguredBackupStorageRedundancy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DeleteDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		&armsql.DatabasesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DeleteDatabase.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DeleteDatabase.json: %v", err)
	}
}

func TestDatabases_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PatchVCoreDatabaseAssignMaintenanceConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assigns maintenance window to a database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.DatabaseUpdate{
			Properties: &armsql.DatabaseProperties{
				MaintenanceConfigurationID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1"),
			},
			SKU: &armsql.SKU{
				Name: to.Ptr("BC_Gen5_4"),
			},
		},
		&armsql.DatabasesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PatchVCoreDatabaseAssignMaintenanceConfiguration.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PatchVCoreDatabaseAssignMaintenanceConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user,vcore"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CurrentServiceObjectiveName:    to.Ptr("BC_Gen5_2"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("BC_Gen5"),
					Capacity: to.Ptr[int32](4),
					Tier:     to.Ptr("BusinessCritical"),
				},
				DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:         to.Ptr("North Europe"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:51:33.937Z"); return t }()),
				IsInfraEncryptionEnabled:         to.Ptr(false),
				IsLedgerOn:                       to.Ptr(false),
				LicenseType:                      to.Ptr(armsql.DatabaseLicenseTypeLicenseIncluded),
				MaintenanceConfigurationID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1"),
				MaxLogSizeBytes:                  to.Ptr[int64](104857600),
				MaxSizeBytes:                     to.Ptr[int64](1073741824),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleEnabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				RequestedServiceObjectiveName:    to.Ptr("BC_Gen5_2"),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("BC_Gen5"),
				Capacity: to.Ptr[int32](4),
				Tier:     to.Ptr("BusinessCritical"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PatchVCoreDatabaseAssignMaintenanceConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PatchVCoreDatabaseResetMaintenanceConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resets maintenance window of a database to default."},
	})
	client = armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.DatabaseUpdate{
			Properties: &armsql.DatabaseProperties{
				MaintenanceConfigurationID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default"),
			},
			SKU: &armsql.SKU{
				Name: to.Ptr("BC_Gen5_4"),
			},
		},
		&armsql.DatabasesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PatchVCoreDatabaseResetMaintenanceConfiguration.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PatchVCoreDatabaseResetMaintenanceConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user,vcore"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CurrentServiceObjectiveName:    to.Ptr("BC_Gen5_4"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("BC_Gen5"),
					Capacity: to.Ptr[int32](4),
					Tier:     to.Ptr("BusinessCritical"),
				},
				DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:         to.Ptr("North Europe"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:51:33.937Z"); return t }()),
				IsInfraEncryptionEnabled:         to.Ptr(false),
				IsLedgerOn:                       to.Ptr(false),
				LicenseType:                      to.Ptr(armsql.DatabaseLicenseTypeLicenseIncluded),
				MaxLogSizeBytes:                  to.Ptr[int64](104857600),
				MaxSizeBytes:                     to.Ptr[int64](1073741824),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleEnabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				RequestedServiceObjectiveName:    to.Ptr("BC_Gen5_4"),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("BC_Gen5"),
				Capacity: to.Ptr[int32](4),
				Tier:     to.Ptr("BusinessCritical"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PatchVCoreDatabaseResetMaintenanceConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PatchVCoreDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates a database."},
	})
	client = armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.DatabaseUpdate{
			Properties: &armsql.DatabaseProperties{
				LicenseType:  to.Ptr(armsql.DatabaseLicenseTypeLicenseIncluded),
				MaxSizeBytes: to.Ptr[int64](1073741824),
			},
			SKU: &armsql.SKU{
				Name: to.Ptr("BC_Gen4_4"),
			},
		},
		&armsql.DatabasesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PatchVCoreDatabase.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PatchVCoreDatabase.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user,vcore"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:               to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                      to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				CurrentBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CurrentServiceObjectiveName:    to.Ptr("BC_Gen4_2"),
				CurrentSKU: &armsql.SKU{
					Name:     to.Ptr("BC_Gen4"),
					Capacity: to.Ptr[int32](4),
					Tier:     to.Ptr("BusinessCritical"),
				},
				DatabaseID:                       to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:         to.Ptr("North Europe"),
				EarliestRestoreDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:51:33.937Z"); return t }()),
				IsInfraEncryptionEnabled:         to.Ptr(false),
				IsLedgerOn:                       to.Ptr(false),
				LicenseType:                      to.Ptr(armsql.DatabaseLicenseTypeLicenseIncluded),
				MaxLogSizeBytes:                  to.Ptr[int64](104857600),
				MaxSizeBytes:                     to.Ptr[int64](1073741824),
				ReadScale:                        to.Ptr(armsql.DatabaseReadScaleEnabled),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyLocal),
				RequestedServiceObjectiveName:    to.Ptr("BC_Gen4_2"),
				Status:                           to.Ptr(armsql.DatabaseStatusOnline),
				ZoneRedundant:                    to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("BC_Gen4"),
				Capacity: to.Ptr[int32](4),
				Tier:     to.Ptr("BusinessCritical"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PatchVCoreDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_ListByElasticPool(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ListDatabasesByElasticPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a list of databases in an elastic pool."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByElasticPool("Default-SQL-SouthEastAsia",
		"testsvr",
		"pool1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ListDatabasesByElasticPool.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseListResult{
			Value: []*armsql.Database{
				{
					Name:     to.Ptr("DB001"),
					Type:     to.Ptr("Microsoft.Sql/servers/databases"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/DB001"),
					Location: to.Ptr("southeastasia"),
					Kind:     to.Ptr("v12.0,user"),
					Properties: &armsql.DatabaseProperties{
						CatalogCollation:            to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
						Collation:                   to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-12T22:08:39.163Z"); return t }()),
						CurrentServiceObjectiveName: to.Ptr("ElasticPool"),
						DatabaseID:                  to.Ptr("bfe0735f-bc87-447f-b2c2-481f4b100614"),
						DefaultSecondaryLocation:    to.Ptr("North Europe"),
						ElasticPoolID:               to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/elasticPools/Pool1"),
						MaxSizeBytes:                to.Ptr[int64](268435456000),
						Status:                      to.Ptr(armsql.DatabaseStatusOnline),
					},
					SKU: &armsql.SKU{
						Name: to.Ptr("ElasticPool"),
						Tier: to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("DB002"),
					Type:     to.Ptr("Microsoft.Sql/servers/databases"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/DB002"),
					Location: to.Ptr("southeastasia"),
					Kind:     to.Ptr("v12.0,user"),
					Properties: &armsql.DatabaseProperties{
						CatalogCollation:            to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
						Collation:                   to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-12T22:10:10.773Z"); return t }()),
						CurrentServiceObjectiveName: to.Ptr("ElasticPool"),
						DatabaseID:                  to.Ptr("82246152-3177-4357-b81c-a16d87ce3593"),
						DefaultSecondaryLocation:    to.Ptr("North Europe"),
						ElasticPoolID:               to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/elasticPools/Pool1"),
						MaxSizeBytes:                to.Ptr[int64](268435456000),
						Status:                      to.Ptr(armsql.DatabaseStatusOnline),
					},
					SKU: &armsql.SKU{
						Name: to.Ptr("ElasticPool"),
						Tier: to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ListDatabasesByElasticPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Failover(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/FailoverDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Failover an database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginFailover(ctx,
		"group1",
		"testServer",
		"testDatabase",
		&armsql.DatabasesClientBeginFailoverOptions{ReplicaType: to.Ptr(armsql.ReplicaTypePrimary),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/FailoverDatabase.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/FailoverDatabase.json: %v", err)
	}
}

func TestDatabases_ListInaccessibleByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ListVCoreInaccessibleDatabasesByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a list of inaccessible databases in a logical server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListInaccessibleByServer("Default-SQL-SouthEastAsia",
		"testsvr",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ListVCoreInaccessibleDatabasesByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseListResult{
			Value: []*armsql.Database{
				{
					Name:     to.Ptr("testdb"),
					Type:     to.Ptr("Microsoft.Sql/servers/databases"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
					Location: to.Ptr("southeastasia"),
					Kind:     to.Ptr("v12.0,user,vcore"),
					Properties: &armsql.DatabaseProperties{
						CatalogCollation:            to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
						Collation:                   to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
						CurrentServiceObjectiveName: to.Ptr("BC_Gen4_2"),
						DatabaseID:                  to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
						DefaultSecondaryLocation:    to.Ptr("North Europe"),
						LicenseType:                 to.Ptr(armsql.DatabaseLicenseTypeLicenseIncluded),
						MaxLogSizeBytes:             to.Ptr[int64](104857600),
						MaxSizeBytes:                to.Ptr[int64](268435456000),
						ReadScale:                   to.Ptr(armsql.DatabaseReadScaleEnabled),
						Status:                      to.Ptr(armsql.DatabaseStatusInaccessible),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("BC_Gen4"),
						Capacity: to.Ptr[int32](2),
						Tier:     to.Ptr("BusinessCritical"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ListVCoreInaccessibleDatabasesByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Pause(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PauseDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Pauses a database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginPause(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdwdb",
		&armsql.DatabasesClientBeginPauseOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PauseDatabase.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PauseDatabase.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdwdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdwdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user,datawarehouse"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:            to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                   to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-13T02:04:26.187Z"); return t }()),
				CurrentServiceObjectiveName: to.Ptr("D1"),
				DatabaseID:                  to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:    to.Ptr("North Europe"),
				MaxSizeBytes:                to.Ptr[int64](10995116277760),
				Status:                      to.Ptr(armsql.DatabaseStatusPaused),
			},
			SKU: &armsql.SKU{
				Name: to.Ptr("DataWarehouse"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/PauseDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Resume(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResumeDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resumes a database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginResume(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdwdb",
		&armsql.DatabasesClientBeginResumeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResumeDatabase.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResumeDatabase.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Database{
			Name:     to.Ptr("testdwdb"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdwdb"),
			Location: to.Ptr("southeastasia"),
			Kind:     to.Ptr("v12.0,user,datawarehouse"),
			Properties: &armsql.DatabaseProperties{
				CatalogCollation:            to.Ptr(armsql.CatalogCollationTypeSQLLatin1GeneralCP1CIAS),
				Collation:                   to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-13T02:04:26.187Z"); return t }()),
				CurrentServiceObjectiveName: to.Ptr("D1"),
				DatabaseID:                  to.Ptr("6c764297-577b-470f-9af4-96d3d41e2ba3"),
				DefaultSecondaryLocation:    to.Ptr("North Europe"),
				MaxSizeBytes:                to.Ptr[int64](10995116277760),
				Status:                      to.Ptr(armsql.DatabaseStatusOnline),
			},
			SKU: &armsql.SKU{
				Name: to.Ptr("DataWarehouse"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResumeDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_UpgradeDataWarehouse(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/UpgradeDataWarehouse.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Upgrades a data warehouse."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpgradeDataWarehouse(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdwdb",
		&armsql.DatabasesClientBeginUpgradeDataWarehouseOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/UpgradeDataWarehouse.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/UpgradeDataWarehouse.json: %v", err)
	}
}

func TestDatabases_Rename(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/RenameDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Renames a database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Rename(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.ResourceMoveDefinition{
			ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/newtestdb"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/RenameDatabase.json: %v", err)
	}
}

func TestDatabases_Import(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ImportDatabaseWithNetworkIsolation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Imports to an existing empty database, using private link to communicate with SQL server and storage account."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginImport(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.ImportExistingDatabaseDefinition{
			AdministratorLogin:         to.Ptr("login"),
			AdministratorLoginPassword: to.Ptr("password"),
			AuthenticationType:         to.Ptr("Sql"),
			NetworkIsolation: &armsql.NetworkIsolationSettings{
				SQLServerResourceID:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr"),
				StorageAccountResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink"),
			},
			StorageKey:     to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=="),
			StorageKeyType: to.Ptr(armsql.StorageKeyTypeStorageAccessKey),
			StorageURI:     to.Ptr("https://test.blob.core.windows.net/test.bacpac"),
		},
		&armsql.DatabasesClientBeginImportOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ImportDatabaseWithNetworkIsolation.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ImportDatabaseWithNetworkIsolation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ImportExportOperationResult{
			Name: to.Ptr("9d9a794a-5cec-4f23-af70-d29511b522a4"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/importExportOperationResults"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/importExportOperationResults/9d9a794a-5cec-4f23-af70-d29511b522a4"),
			Properties: &armsql.ImportExportOperationResultProperties{
				BlobURI:          to.Ptr("https://test.blob.core.windows.net/test.bacpac"),
				DatabaseName:     to.Ptr("testdb"),
				LastModifiedTime: to.Ptr("2/2/2020 8:34:47 PM"),
				QueuedTime:       to.Ptr("2/2/2020 8:33:27 PM"),
				RequestID:        to.Ptr("9d9a794a-5cec-4f23-af70-d29511b522a4"),
				RequestType:      to.Ptr("Import"),
				ServerName:       to.Ptr("testsvr.database.windows.net"),
				Status:           to.Ptr("Completed"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImportExportOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImportExportOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ImportDatabaseWithNetworkIsolation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ImportDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Imports to an existing empty database."},
	})
	client = armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginImport(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.ImportExistingDatabaseDefinition{
			AdministratorLogin:         to.Ptr("login"),
			AdministratorLoginPassword: to.Ptr("password"),
			AuthenticationType:         to.Ptr("Sql"),
			StorageKey:                 to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=="),
			StorageKeyType:             to.Ptr(armsql.StorageKeyTypeStorageAccessKey),
			StorageURI:                 to.Ptr("https://test.blob.core.windows.net/test.bacpac"),
		},
		&armsql.DatabasesClientBeginImportOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ImportDatabase.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ImportDatabase.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ImportExportOperationResult{
			Name: to.Ptr("9d9a794a-5cec-4f23-af70-d29511b522a4"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/importExportOperationResults"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/importExportOperationResults/9d9a794a-5cec-4f23-af70-d29511b522a4"),
			Properties: &armsql.ImportExportOperationResultProperties{
				BlobURI:          to.Ptr("https://test.blob.core.windows.net/test.bacpac"),
				DatabaseName:     to.Ptr("testdb"),
				LastModifiedTime: to.Ptr("2/2/2020 8:34:47 PM"),
				QueuedTime:       to.Ptr("2/2/2020 8:33:27 PM"),
				RequestID:        to.Ptr("9d9a794a-5cec-4f23-af70-d29511b522a4"),
				RequestType:      to.Ptr("Import"),
				ServerName:       to.Ptr("testsvr.database.windows.net"),
				Status:           to.Ptr("Completed"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImportExportOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImportExportOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ImportDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Export(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ExportDatabaseWithNetworkIsolation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Exports a database, using private link to communicate with SQL server and storage account."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginExport(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.ExportDatabaseDefinition{
			AdministratorLogin:         to.Ptr("login"),
			AdministratorLoginPassword: to.Ptr("password"),
			AuthenticationType:         to.Ptr("Sql"),
			NetworkIsolation: &armsql.NetworkIsolationSettings{
				SQLServerResourceID:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr"),
				StorageAccountResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink"),
			},
			StorageKey:     to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=="),
			StorageKeyType: to.Ptr(armsql.StorageKeyTypeStorageAccessKey),
			StorageURI:     to.Ptr("https://test.blob.core.windows.net/test.bacpac"),
		},
		&armsql.DatabasesClientBeginExportOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ExportDatabaseWithNetworkIsolation.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ExportDatabaseWithNetworkIsolation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ImportExportOperationResult{
			Name: to.Ptr("9d9a794a-5cec-4f23-af70-d29511b522a4"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/importExportOperationResults"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/importExportOperationResults/9d9a794a-5cec-4f23-af70-d29511b522a4"),
			Properties: &armsql.ImportExportOperationResultProperties{
				BlobURI:          to.Ptr("https://test.blob.core.windows.net/test.bacpac"),
				DatabaseName:     to.Ptr("testdb"),
				LastModifiedTime: to.Ptr("2/2/2020 8:34:47 PM"),
				QueuedTime:       to.Ptr("2/2/2020 8:33:27 PM"),
				RequestID:        to.Ptr("9d9a794a-5cec-4f23-af70-d29511b522a4"),
				RequestType:      to.Ptr("Export"),
				ServerName:       to.Ptr("testsvr.database.windows.net"),
				Status:           to.Ptr("Completed"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImportExportOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImportExportOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ExportDatabaseWithNetworkIsolation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ExportDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Exports a database."},
	})
	client = armsql.NewDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginExport(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.ExportDatabaseDefinition{
			AdministratorLogin:         to.Ptr("login"),
			AdministratorLoginPassword: to.Ptr("password"),
			AuthenticationType:         to.Ptr("Sql"),
			StorageKey:                 to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=="),
			StorageKeyType:             to.Ptr(armsql.StorageKeyTypeStorageAccessKey),
			StorageURI:                 to.Ptr("https://test.blob.core.windows.net/test.bacpac"),
		},
		&armsql.DatabasesClientBeginExportOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ExportDatabase.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ExportDatabase.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ImportExportOperationResult{
			Name: to.Ptr("9d9a794a-5cec-4f23-af70-d29511b522a4"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/importExportOperationResults"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/importExportOperationResults/9d9a794a-5cec-4f23-af70-d29511b522a4"),
			Properties: &armsql.ImportExportOperationResultProperties{
				BlobURI:          to.Ptr("https://test.blob.core.windows.net/test.bacpac"),
				DatabaseName:     to.Ptr("testdb"),
				LastModifiedTime: to.Ptr("2/2/2020 8:34:47 PM"),
				QueuedTime:       to.Ptr("2/2/2020 8:33:27 PM"),
				RequestID:        to.Ptr("9d9a794a-5cec-4f23-af70-d29511b522a4"),
				RequestType:      to.Ptr("Export"),
				ServerName:       to.Ptr("testsvr.database.windows.net"),
				Status:           to.Ptr("Completed"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImportExportOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImportExportOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ExportDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestElasticPools_ListMetrics(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ElasticPoolMetricsListWithFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List database usage metrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListMetrics("sqlcrudtest-6730",
		"sqlcrudtest-9007",
		"3481",
		"name/value eq 'cpu_percent' and timeGrain eq '00:10:00' and startTime eq '2017-06-02T18:35:00Z' and endTime eq '2017-06-02T18:55:00Z'",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ElasticPoolMetricsListWithFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.MetricListResult{
			Value: []*armsql.Metric{
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("CPU percentage"),
						Value:          to.Ptr("cpu_percent"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T18:55:00Z"); return t }()),
					MetricValues: []*armsql.MetricValue{
						{
							Average:   to.Ptr[float64](0),
							Count:     to.Ptr[int32](1),
							Maximum:   to.Ptr[float64](0),
							Minimum:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T18:30:01Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Average:   to.Ptr[float64](0),
							Count:     to.Ptr[int32](1),
							Maximum:   to.Ptr[float64](0),
							Minimum:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T18:40:01Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Average:   to.Ptr[float64](0),
							Count:     to.Ptr[int32](1),
							Maximum:   to.Ptr[float64](0),
							Minimum:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T18:50:01Z"); return t }()),
							Total:     to.Ptr[float64](0),
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-02T18:35:00Z"); return t }()),
					TimeGrain: to.Ptr("00:10:00"),
					Unit:      to.Ptr(armsql.UnitTypePercent),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ElasticPoolMetricsListWithFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestElasticPools_ListMetricDefinitions(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ElasticPoolMetricsDefinitionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List database usage metrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListMetricDefinitions("sqlcrudtest-6730",
		"sqlcrudtest-9007",
		"3481",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ElasticPoolMetricsDefinitionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.MetricDefinitionListResult{
			Value: []*armsql.MetricDefinition{
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("CPU percentage"),
						Value:          to.Ptr("cpu_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT15S"),
						},
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT60S"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Data IO percentage"),
						Value:          to.Ptr("physical_data_read_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT15S"),
						},
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT60S"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Log IO percentage"),
						Value:          to.Ptr("log_write_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT15S"),
						},
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT60S"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("DTU percentage"),
						Value:          to.Ptr("dtu_consumption_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT15S"),
						},
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT60S"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Total database size"),
						Value:          to.Ptr("storage"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeMaximum),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypeBytes),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("In-Memory OLTP storage percent"),
						Value:          to.Ptr("xtp_storage_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT15S"),
						},
						{
							Retention: to.Ptr("PT1H"),
							TimeGrain: to.Ptr("PT60S"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Workers percentage"),
						Value:          to.Ptr("workers_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Sessions percentage"),
						Value:          to.Ptr("sessions_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("DTU limit"),
						Value:          to.Ptr("dtu_limit"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypeCount),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("DTU used"),
						Value:          to.Ptr("dtu_used"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeAverage),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypeCount),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Successful Connections"),
						Value:          to.Ptr("connection_successful"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeTotal),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypeCount),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Failed Connections"),
						Value:          to.Ptr("connection_failed"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeTotal),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypeCount),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Blocked by Firewall"),
						Value:          to.Ptr("blocked_by_firewall"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeTotal),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypeCount),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Deadlocks"),
						Value:          to.Ptr("deadlock"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeTotal),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypeCount),
				},
				{
					Name: &armsql.MetricName{
						LocalizedValue: to.Ptr("Database size percentage"),
						Value:          to.Ptr("storage_percent"),
					},
					MetricAvailabilities: []*armsql.MetricAvailability{
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armsql.PrimaryAggregationTypeMaximum),
					ResourceURI:            to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/databases/db1"),
					Unit:                   to.Ptr(armsql.UnitDefinitionTypePercent),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricDefinitionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricDefinitionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ElasticPoolMetricsDefinitionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestElasticPools_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all elastic pools in a server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("sqlcrudtest-2369",
		"sqlcrudtest-8069",
		&armsql.ElasticPoolsClientListByServerOptions{Skip: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ElasticPoolListResult{
			Value: []*armsql.ElasticPool{
				{
					Name:     to.Ptr("sqlcrudtest-2729"),
					Type:     to.Ptr("Microsoft.Sql/servers/elasticPools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069/elasticPools/sqlcrudtest-2729"),
					Location: to.Ptr("Japan East"),
					Properties: &armsql.ElasticPoolProperties{
						CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:27:21.32Z"); return t }()),
						LicenseType:  to.Ptr(armsql.ElasticPoolLicenseTypeLicenseIncluded),
						MaxSizeBytes: to.Ptr[int64](5242880000),
						PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
							MaxCapacity: to.Ptr[float64](1),
							MinCapacity: to.Ptr[float64](0.25),
						},
						State:         to.Ptr(armsql.ElasticPoolStateReady),
						ZoneRedundant: to.Ptr(true),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("GP_Gen4_2"),
						Capacity: to.Ptr[int32](2),
						Tier:     to.Ptr("GeneralPurpose"),
					},
				},
				{
					Name:     to.Ptr("sqlcrudtest-3191"),
					Type:     to.Ptr("Microsoft.Sql/servers/elasticPools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069/elasticPools/sqlcrudtest-3191"),
					Location: to.Ptr("Japan East"),
					Properties: &armsql.ElasticPoolProperties{
						CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:26:26.45Z"); return t }()),
						MaxSizeBytes: to.Ptr[int64](5242880000),
						PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
							MaxCapacity: to.Ptr[float64](5),
							MinCapacity: to.Ptr[float64](0),
						},
						State: to.Ptr(armsql.ElasticPoolStateReady),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("BasicPool"),
						Capacity: to.Ptr[int32](50),
						Tier:     to.Ptr("Basic"),
					},
				},
				{
					Name:     to.Ptr("sqlcrudtest-8102"),
					Type:     to.Ptr("Microsoft.Sql/servers/elasticPools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069/elasticPools/sqlcrudtest-8102"),
					Location: to.Ptr("Japan East"),
					Properties: &armsql.ElasticPoolProperties{
						CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:25:25.033Z"); return t }()),
						MaxSizeBytes: to.Ptr[int64](5242880000),
						PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
							MaxCapacity: to.Ptr[float64](5),
							MinCapacity: to.Ptr[float64](0),
						},
						State: to.Ptr(armsql.ElasticPoolStateReady),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("BasicPool"),
						Capacity: to.Ptr[int32](50),
						Tier:     to.Ptr("Basic"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ElasticPoolListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ElasticPoolListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestElasticPools_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/HyperscaleElasticPoolGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Hyperscale elastic pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/HyperscaleElasticPoolGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ElasticPool{
			Name:     to.Ptr("sqlcrudtest-8102"),
			Type:     to.Ptr("Microsoft.Sql/servers/elasticPools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069/elasticPools/sqlcrudtest-8102"),
			Location: to.Ptr("Japan East"),
			Kind:     to.Ptr("vcore,pool"),
			Properties: &armsql.ElasticPoolProperties{
				CreationDate:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-26T03:46:20.57Z"); return t }()),
				HighAvailabilityReplicaCount: to.Ptr[int32](2),
				LicenseType:                  to.Ptr(armsql.ElasticPoolLicenseTypeLicenseIncluded),
				MaintenanceConfigurationID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default"),
				MaxSizeBytes:                 to.Ptr[int64](0),
				PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Ptr[float64](4),
					MinCapacity: to.Ptr[float64](0),
				},
				State:         to.Ptr(armsql.ElasticPoolStateReady),
				ZoneRedundant: to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("HS_Gen5"),
				Capacity: to.Ptr[int32](4),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr("Hyperscale"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ElasticPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ElasticPool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/HyperscaleElasticPoolGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an elastic pool"},
	})
	client = armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.Get(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ElasticPool{
			Name:     to.Ptr("sqlcrudtest-8102"),
			Type:     to.Ptr("Microsoft.Sql/servers/elasticPools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069/elasticPools/sqlcrudtest-8102"),
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ElasticPoolProperties{
				CreationDate:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-10T01:25:25.033Z"); return t }()),
				LicenseType:                to.Ptr(armsql.ElasticPoolLicenseTypeLicenseIncluded),
				MaintenanceConfigurationID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_1"),
				MaxSizeBytes:               to.Ptr[int64](5242880000),
				PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Ptr[float64](1),
					MinCapacity: to.Ptr[float64](0.25),
				},
				State:         to.Ptr(armsql.ElasticPoolStateReady),
				ZoneRedundant: to.Ptr(true),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("GP_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr("GeneralPurpose"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ElasticPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ElasticPool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestElasticPools_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/HyperscaleElasticPoolCreateOrUpdateSetHighAvailabilityReplicaCount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update Hyperscale elastic pool with high availability replica count parameter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		armsql.ElasticPool{
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ElasticPoolProperties{
				HighAvailabilityReplicaCount: to.Ptr[int32](2),
			},
			SKU: &armsql.SKU{
				Name: to.Ptr("HS_Gen5_4"),
			},
		},
		&armsql.ElasticPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/HyperscaleElasticPoolCreateOrUpdateSetHighAvailabilityReplicaCount.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/HyperscaleElasticPoolCreateOrUpdateSetHighAvailabilityReplicaCount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ElasticPool{
			Name:     to.Ptr("sqlcrudtest-8102"),
			Type:     to.Ptr("Microsoft.Sql/servers/elasticPools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069/elasticPools/sqlcrudtest-8102"),
			Location: to.Ptr("Japan East"),
			Kind:     to.Ptr("vcore,pool"),
			Properties: &armsql.ElasticPoolProperties{
				CreationDate:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-26T03:46:20.57Z"); return t }()),
				HighAvailabilityReplicaCount: to.Ptr[int32](2),
				LicenseType:                  to.Ptr(armsql.ElasticPoolLicenseTypeLicenseIncluded),
				MaintenanceConfigurationID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default"),
				MaxSizeBytes:                 to.Ptr[int64](0),
				PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Ptr[float64](4),
					MinCapacity: to.Ptr[float64](0),
				},
				State:         to.Ptr(armsql.ElasticPoolStateReady),
				ZoneRedundant: to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("HS_Gen5"),
				Capacity: to.Ptr[int32](4),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr("Hyperscale"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ElasticPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ElasticPool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/HyperscaleElasticPoolCreateOrUpdateSetHighAvailabilityReplicaCount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolCreateOrUpdateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update elastic pool with all parameter"},
	})
	client = armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		armsql.ElasticPool{
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ElasticPoolProperties{
				PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Ptr[float64](2),
					MinCapacity: to.Ptr[float64](0.25),
				},
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("GP_Gen4_2"),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr("GeneralPurpose"),
			},
		},
		&armsql.ElasticPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolCreateOrUpdateMax.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolCreateOrUpdateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ElasticPool{
			Name:     to.Ptr("sqlcrudtest-8102"),
			Type:     to.Ptr("Microsoft.Sql/servers/elasticPools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069/elasticPools/sqlcrudtest-8102"),
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ElasticPoolProperties{
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:25:25.033Z"); return t }()),
				MaxSizeBytes: to.Ptr[int64](5242880000),
				PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Ptr[float64](2),
					MinCapacity: to.Ptr[float64](0.25),
				},
				State: to.Ptr(armsql.ElasticPoolStateReady),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("GP_Gen4_2"),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr("GeneralPurpose"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ElasticPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ElasticPool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolCreateOrUpdateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolCreateOrUpdateSetMaintenanceConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update elastic pool with maintenance configuration parameter"},
	})
	client = armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		armsql.ElasticPool{
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ElasticPoolProperties{
				MaintenanceConfigurationID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_1"),
			},
		},
		&armsql.ElasticPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolCreateOrUpdateSetMaintenanceConfiguration.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolCreateOrUpdateSetMaintenanceConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ElasticPool{
			Name:     to.Ptr("sqlcrudtest-8102"),
			Type:     to.Ptr("Microsoft.Sql/servers/elasticPools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069/elasticPools/sqlcrudtest-8102"),
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ElasticPoolProperties{
				CreationDate:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:25:25.033Z"); return t }()),
				MaintenanceConfigurationID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_1"),
				MaxSizeBytes:               to.Ptr[int64](102400),
				PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Ptr[float64](100),
					MinCapacity: to.Ptr[float64](0),
				},
				State: to.Ptr(armsql.ElasticPoolStateReady),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("StandardPool"),
				Capacity: to.Ptr[int32](100),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ElasticPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ElasticPool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolCreateOrUpdateSetMaintenanceConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolCreateOrUpdateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update elastic pool with minimum parameters"},
	})
	client = armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		armsql.ElasticPool{
			Location: to.Ptr("Japan East"),
		},
		&armsql.ElasticPoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolCreateOrUpdateMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolCreateOrUpdateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ElasticPool{
			Name:     to.Ptr("sqlcrudtest-8102"),
			Type:     to.Ptr("Microsoft.Sql/servers/elasticPools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069/elasticPools/sqlcrudtest-8102"),
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ElasticPoolProperties{
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:25:25.033Z"); return t }()),
				MaxSizeBytes: to.Ptr[int64](102400),
				PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Ptr[float64](100),
					MinCapacity: to.Ptr[float64](0),
				},
				State: to.Ptr(armsql.ElasticPoolStateReady),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("StandardPool"),
				Capacity: to.Ptr[int32](100),
				Tier:     to.Ptr("Standard"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ElasticPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ElasticPool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolCreateOrUpdateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestElasticPools_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an elastic pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-3129",
		"sqlcrudtest-228",
		"sqlcrudtest-3851",
		&armsql.ElasticPoolsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolDelete.json: %v", err)
	}
}

func TestElasticPools_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateAssignMaintenanceConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assigns maintenance configuration to an elastic pool."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		armsql.ElasticPoolUpdate{
			Properties: &armsql.ElasticPoolUpdateProperties{
				MaintenanceConfigurationID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_1"),
			},
		},
		&armsql.ElasticPoolsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateAssignMaintenanceConfiguration.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateAssignMaintenanceConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ElasticPool{
			Name:     to.Ptr("sqlcrudtest-8102"),
			Type:     to.Ptr("Microsoft.Sql/servers/elasticPools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069/elasticPools/sqlcrudtest-8102"),
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ElasticPoolProperties{
				CreationDate:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:25:25.033Z"); return t }()),
				MaintenanceConfigurationID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_1"),
				MaxSizeBytes:               to.Ptr[int64](5242880000),
				PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Ptr[float64](5),
					MinCapacity: to.Ptr[float64](0),
				},
				State: to.Ptr(armsql.ElasticPoolStateReady),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("BasicPool"),
				Capacity: to.Ptr[int32](50),
				Tier:     to.Ptr("Basic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ElasticPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ElasticPool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateAssignMaintenanceConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateResetMaintenanceConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resets maintenance configuration of an elastic pool to default."},
	})
	client = armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		armsql.ElasticPoolUpdate{
			Properties: &armsql.ElasticPoolUpdateProperties{
				MaintenanceConfigurationID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default"),
			},
		},
		&armsql.ElasticPoolsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateResetMaintenanceConfiguration.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateResetMaintenanceConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ElasticPool{
			Name:     to.Ptr("sqlcrudtest-8102"),
			Type:     to.Ptr("Microsoft.Sql/servers/elasticPools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069/elasticPools/sqlcrudtest-8102"),
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ElasticPoolProperties{
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:25:25.033Z"); return t }()),
				MaxSizeBytes: to.Ptr[int64](5242880000),
				PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Ptr[float64](5),
					MinCapacity: to.Ptr[float64](0),
				},
				State: to.Ptr(armsql.ElasticPoolStateReady),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("BasicPool"),
				Capacity: to.Ptr[int32](50),
				Tier:     to.Ptr("Basic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ElasticPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ElasticPool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateResetMaintenanceConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an elastic pool with all parameter"},
	})
	client = armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		armsql.ElasticPoolUpdate{
			Properties: &armsql.ElasticPoolUpdateProperties{
				LicenseType: to.Ptr(armsql.ElasticPoolLicenseTypeLicenseIncluded),
				PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Ptr[float64](1),
					MinCapacity: to.Ptr[float64](0.25),
				},
				ZoneRedundant: to.Ptr(true),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("BC_Gen4"),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr("BusinessCritical"),
			},
		},
		&armsql.ElasticPoolsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateMax.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ElasticPool{
			Name:     to.Ptr("sqlcrudtest-8102"),
			Type:     to.Ptr("Microsoft.Sql/servers/elasticPools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069/elasticPools/sqlcrudtest-8102"),
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ElasticPoolProperties{
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:27:21.32Z"); return t }()),
				LicenseType:  to.Ptr(armsql.ElasticPoolLicenseTypeLicenseIncluded),
				MaxSizeBytes: to.Ptr[int64](5242880000),
				PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Ptr[float64](1),
					MinCapacity: to.Ptr[float64](0.25),
				},
				State:         to.Ptr(armsql.ElasticPoolStateReady),
				ZoneRedundant: to.Ptr(true),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("BC_Gen4"),
				Capacity: to.Ptr[int32](2),
				Tier:     to.Ptr("BusinessCritical"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ElasticPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ElasticPool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an elastic pool with minimum parameters"},
	})
	client = armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		armsql.ElasticPoolUpdate{},
		&armsql.ElasticPoolsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ElasticPool{
			Name:     to.Ptr("sqlcrudtest-8102"),
			Type:     to.Ptr("Microsoft.Sql/servers/elasticPools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069/elasticPools/sqlcrudtest-8102"),
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ElasticPoolProperties{
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:25:25.033Z"); return t }()),
				MaxSizeBytes: to.Ptr[int64](5242880000),
				PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Ptr[float64](5),
					MinCapacity: to.Ptr[float64](0),
				},
				State: to.Ptr(armsql.ElasticPoolStateReady),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("BasicPool"),
				Capacity: to.Ptr[int32](50),
				Tier:     to.Ptr("Basic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ElasticPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ElasticPool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/ElasticPoolUpdateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/HyperscaleElasticPoolUpdateSetHighAvailabilityReplicaCount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update high availability replica count of a Hyperscale elastic pool."},
	})
	client = armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		armsql.ElasticPoolUpdate{
			Properties: &armsql.ElasticPoolUpdateProperties{
				HighAvailabilityReplicaCount: to.Ptr[int32](2),
			},
		},
		&armsql.ElasticPoolsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/HyperscaleElasticPoolUpdateSetHighAvailabilityReplicaCount.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/HyperscaleElasticPoolUpdateSetHighAvailabilityReplicaCount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ElasticPool{
			Name:     to.Ptr("sqlcrudtest-8102"),
			Type:     to.Ptr("Microsoft.Sql/servers/elasticPools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069/elasticPools/sqlcrudtest-8102"),
			Location: to.Ptr("Japan East"),
			Kind:     to.Ptr("vcore,pool"),
			Properties: &armsql.ElasticPoolProperties{
				CreationDate:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-26T03:46:20.57Z"); return t }()),
				HighAvailabilityReplicaCount: to.Ptr[int32](2),
				LicenseType:                  to.Ptr(armsql.ElasticPoolLicenseTypeLicenseIncluded),
				MaintenanceConfigurationID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default"),
				MaxSizeBytes:                 to.Ptr[int64](0),
				PerDatabaseSettings: &armsql.ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Ptr[float64](4),
					MinCapacity: to.Ptr[float64](0),
				},
				State:         to.Ptr(armsql.ElasticPoolStateReady),
				ZoneRedundant: to.Ptr(false),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("HS_Gen5"),
				Capacity: to.Ptr[int32](4),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr("Hyperscale"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ElasticPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ElasticPool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/HyperscaleElasticPoolUpdateSetHighAvailabilityReplicaCount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestElasticPools_Failover(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/FailoverElasticPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Failover an elastic pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewElasticPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginFailover(ctx,
		"group1",
		"testServer",
		"testElasticPool",
		&armsql.ElasticPoolsClientBeginFailoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/FailoverElasticPool.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/FailoverElasticPool.json: %v", err)
	}
}

func TestReplicationLinks_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ReplicationLinkDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a replication link"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewReplicationLinksClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		"testdb",
		"5b301b68-03f6-4b26-b0f4-73ebb8634238",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ReplicationLinkDelete.json: %v", err)
	}
}

func TestReplicationLinks_Failover(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ReplicationLinkFailover.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Failover a replication link"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewReplicationLinksClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginFailover(ctx,
		"sqlcrudtest-8931",
		"sqlcrudtest-2137",
		"testdb",
		"f0550bf5-07ce-4270-8e4b-71737975973a",
		&armsql.ReplicationLinksClientBeginFailoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ReplicationLinkFailover.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ReplicationLinkFailover.json: %v", err)
	}
}

func TestReplicationLinks_FailoverAllowDataLoss(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ReplicationLinkFailover.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Failover a replication link"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewReplicationLinksClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginFailoverAllowDataLoss(ctx,
		"sqlcrudtest-8931",
		"sqlcrudtest-2137",
		"testdb",
		"f0550bf5-07ce-4270-8e4b-71737975973a",
		&armsql.ReplicationLinksClientBeginFailoverAllowDataLossOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ReplicationLinkFailover.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ReplicationLinkFailover.json: %v", err)
	}
}

func TestReplicationLinks_Unlink(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ReplicationLinkUnlink.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete replication link"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewReplicationLinksClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUnlink(ctx,
		"sqlcrudtest-8931",
		"sqlcrudtest-2137",
		"testdb",
		"f0550bf5-07ce-4270-8e4b-71737975973a",
		armsql.UnlinkParameters{
			ForcedTermination: to.Ptr(true),
		},
		&armsql.ReplicationLinksClientBeginUnlinkOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ReplicationLinkUnlink.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ReplicationLinkUnlink.json: %v", err)
	}
}

func TestReplicationLinks_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ReplicationLinkListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List replication links on server on database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewReplicationLinksClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("Default",
		"sourcesvr",
		"tetha-db",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ReplicationLinkListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ReplicationLinkListResult{
			Value: []*armsql.ReplicationLink{
				{
					Name: to.Ptr("fb92de60-eb87-4a58-b250-3362d0cfdf26"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/sourcesvr/databases/tetha-db/replicationLinks/fb92de60-eb87-4a58-b250-3362d0cfdf26"),
					Properties: &armsql.ReplicationLinkProperties{
						IsTerminationAllowed: to.Ptr(true),
						LinkType:             to.Ptr(armsql.ReplicationLinkTypeGEO),
						PartnerDatabase:      to.Ptr("tetha-db"),
						PartnerLocation:      to.Ptr("Japan East"),
						PartnerRole:          to.Ptr(armsql.ReplicationRoleSecondary),
						PartnerServer:        to.Ptr("testsvr"),
						PercentComplete:      to.Ptr[int32](100),
						ReplicationMode:      to.Ptr("ASYNC"),
						ReplicationState:     to.Ptr(armsql.ReplicationStateCATCHUP),
						Role:                 to.Ptr(armsql.ReplicationRolePrimary),
						StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-21T08:11:46.907Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("6ad1eefc-18a2-4fcb-94f3-4b654ba788d7"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/sourcesvr/databases/tetha-db/replicationLinks/6ad1eefc-18a2-4fcb-94f3-4b654ba788d7"),
					Properties: &armsql.ReplicationLinkProperties{
						IsTerminationAllowed: to.Ptr(true),
						LinkType:             to.Ptr(armsql.ReplicationLinkTypeGEO),
						PartnerDatabase:      to.Ptr("tetha-db"),
						PartnerLocation:      to.Ptr("Japan East"),
						PartnerRole:          to.Ptr(armsql.ReplicationRoleSecondary),
						PartnerServer:        to.Ptr("targetsvr"),
						PercentComplete:      to.Ptr[int32](100),
						ReplicationMode:      to.Ptr("ASYNC"),
						ReplicationState:     to.Ptr(armsql.ReplicationStateCATCHUP),
						Role:                 to.Ptr(armsql.ReplicationRolePrimary),
						StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-21T08:11:34.423Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReplicationLinkListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReplicationLinkListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ReplicationLinkListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationLinks_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ReplicationLinkGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the replication link."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewReplicationLinksClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default",
		"sourcesvr",
		"gamma-db",
		"4891ca10-ebd0-47d7-9182-c722651780fb",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ReplicationLinkGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ReplicationLink{
			Name: to.Ptr("4891ca10-ebd0-47d7-9182-c722651780fb"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/sourcesvr/databases/gamma-db/replicationLinks/4891ca10-ebd0-47d7-9182-c722651780fb"),
			Properties: &armsql.ReplicationLinkProperties{
				IsTerminationAllowed: to.Ptr(true),
				LinkType:             to.Ptr(armsql.ReplicationLinkTypeGEO),
				PartnerDatabase:      to.Ptr("gamma-db"),
				PartnerLocation:      to.Ptr("Japan East"),
				PartnerRole:          to.Ptr(armsql.ReplicationRoleSecondary),
				PartnerServer:        to.Ptr("testsvr"),
				PercentComplete:      to.Ptr[int32](100),
				ReplicationMode:      to.Ptr("ASYNC"),
				ReplicationState:     to.Ptr(armsql.ReplicationStateCATCHUP),
				Role:                 to.Ptr(armsql.ReplicationRolePrimary),
				StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-21T08:12:43.783Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationLink) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationLink)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ReplicationLinkGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplicationLinks_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ReplicationLinkListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List replication links on server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewReplicationLinksClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("Default",
		"sourcesvr",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ReplicationLinkListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ReplicationLinkListResult{
			Value: []*armsql.ReplicationLink{
				{
					Name: to.Ptr("fb92de60-eb87-4a58-b250-3362d0cfdf26"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/sourcesvr/databases/tetha-db/replicationLinks/fb92de60-eb87-4a58-b250-3362d0cfdf26"),
					Properties: &armsql.ReplicationLinkProperties{
						IsTerminationAllowed: to.Ptr(true),
						LinkType:             to.Ptr(armsql.ReplicationLinkTypeGEO),
						PartnerDatabase:      to.Ptr("tetha-db"),
						PartnerLocation:      to.Ptr("Japan East"),
						PartnerRole:          to.Ptr(armsql.ReplicationRoleSecondary),
						PartnerServer:        to.Ptr("testsvr"),
						PercentComplete:      to.Ptr[int32](100),
						ReplicationMode:      to.Ptr("ASYNC"),
						ReplicationState:     to.Ptr(armsql.ReplicationStateCATCHUP),
						Role:                 to.Ptr(armsql.ReplicationRolePrimary),
						StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-21T08:11:46.907Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("6ad1eefc-18a2-4fcb-94f3-4b654ba788d7"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/sourcesvr/databases/tetha-db/replicationLinks/6ad1eefc-18a2-4fcb-94f3-4b654ba788d7"),
					Properties: &armsql.ReplicationLinkProperties{
						IsTerminationAllowed: to.Ptr(true),
						LinkType:             to.Ptr(armsql.ReplicationLinkTypeGEO),
						PartnerDatabase:      to.Ptr("tetha-db"),
						PartnerLocation:      to.Ptr("Japan East"),
						PartnerRole:          to.Ptr(armsql.ReplicationRoleSecondary),
						PartnerServer:        to.Ptr("targetsvr"),
						PercentComplete:      to.Ptr[int32](100),
						ReplicationMode:      to.Ptr("ASYNC"),
						ReplicationState:     to.Ptr(armsql.ReplicationStateCATCHUP),
						Role:                 to.Ptr(armsql.ReplicationRolePrimary),
						StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-21T08:11:34.423Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("4891ca10-ebd0-47d7-9182-c722651780fb"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/sourcesvr/databases/gamma-db/replicationLinks/4891ca10-ebd0-47d7-9182-c722651780fb"),
					Properties: &armsql.ReplicationLinkProperties{
						IsTerminationAllowed: to.Ptr(true),
						LinkType:             to.Ptr(armsql.ReplicationLinkTypeGEO),
						PartnerDatabase:      to.Ptr("gamma-db"),
						PartnerLocation:      to.Ptr("Japan East"),
						PartnerRole:          to.Ptr(armsql.ReplicationRoleSecondary),
						PartnerServer:        to.Ptr("testsvr"),
						PercentComplete:      to.Ptr[int32](100),
						ReplicationMode:      to.Ptr("ASYNC"),
						ReplicationState:     to.Ptr(armsql.ReplicationStateCATCHUP),
						Role:                 to.Ptr(armsql.ReplicationRolePrimary),
						StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-21T08:12:43.783Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReplicationLinkListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReplicationLinkListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ReplicationLinkListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerCommunicationLinks_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServerCommunicationLinkDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a server communication link"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerCommunicationLinksClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"link1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServerCommunicationLinkDelete.json: %v", err)
	}
}

func TestServerCommunicationLinks_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServerCommunicationLinkGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a server communication link"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerCommunicationLinksClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"link1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServerCommunicationLinkGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerCommunicationLink{
			Name:     to.Ptr("link1"),
			Type:     to.Ptr("Microsoft.Sql/servers/communicationLinks"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/communicationLinks/link1"),
			Location: to.Ptr("Central US"),
			Properties: &armsql.ServerCommunicationLinkProperties{
				PartnerServer: to.Ptr("sqlcrudtest-test"),
				State:         to.Ptr("Ready"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerCommunicationLink) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerCommunicationLink)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServerCommunicationLinkGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerCommunicationLinks_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServerCommunicationLinkCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a server communication link"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerCommunicationLinksClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"link1",
		armsql.ServerCommunicationLink{
			Properties: &armsql.ServerCommunicationLinkProperties{
				PartnerServer: to.Ptr("sqldcrudtest-test"),
			},
		},
		&armsql.ServerCommunicationLinksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServerCommunicationLinkCreateOrUpdate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServerCommunicationLinkCreateOrUpdate.json: %v", err)
	}
}

func TestServerCommunicationLinks_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServerCommunicationLinkList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List server communication links"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerCommunicationLinksClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServerCommunicationLinkList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerCommunicationLinkListResult{
			Value: []*armsql.ServerCommunicationLink{
				{
					Name:     to.Ptr("link1"),
					Type:     to.Ptr("Microsoft.Sql/servers/communicationLinks"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/communicationLinks/link1"),
					Location: to.Ptr("Central US"),
					Properties: &armsql.ServerCommunicationLinkProperties{
						PartnerServer: to.Ptr("sqlcrudtest-test"),
						State:         to.Ptr("Ready"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerCommunicationLinkListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerCommunicationLinkListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServerCommunicationLinkList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceObjectives_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServiceObjectiveGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a service objective"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServiceObjectivesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"sqlcrudtest",
		"29dd7459-4a7c-4e56-be22-f0adda49440d",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServiceObjectiveGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServiceObjective{
			Name: to.Ptr("29dd7459-4a7c-4e56-be22-f0adda49440d"),
			Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
			ID:   to.Ptr("/subscriptions/b6a6e0c5-e79c-4c6d-a878-72eafbca4cf2/resourceGroups/QA/providers/Microsoft.Sql/servers/nafantest/serviceObjectives/29dd7459-4a7c-4e56-be22-f0adda49440d"),
			Properties: &armsql.ServiceObjectiveProperties{
				Enabled:              to.Ptr(false),
				IsDefault:            to.Ptr(false),
				IsSystem:             to.Ptr(true),
				ServiceObjectiveName: to.Ptr("System0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceObjective) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceObjective)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServiceObjectiveGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceObjectives_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServiceObjectiveList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List service objectives"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServiceObjectivesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("group1",
		"sqlcrudtest",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServiceObjectiveList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServiceObjectiveListResult{
			Value: []*armsql.ServiceObjective{
				{
					Name: to.Ptr("26e021db-f1f9-4c98-84c6-92af8ef433d7"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/26e021db-f1f9-4c98-84c6-92af8ef433d7"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(false),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(true),
						ServiceObjectiveName: to.Ptr("System"),
					},
				},
				{
					Name: to.Ptr("29dd7459-4a7c-4e56-be22-f0adda49440d"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/29dd7459-4a7c-4e56-be22-f0adda49440d"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(false),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(true),
						ServiceObjectiveName: to.Ptr("System0"),
					},
				},
				{
					Name: to.Ptr("c99ac918-dbea-463f-a475-16ec020fdc12"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/c99ac918-dbea-463f-a475-16ec020fdc12"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(false),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(true),
						ServiceObjectiveName: to.Ptr("System1"),
					},
				},
				{
					Name: to.Ptr("620323bf-2879-4807-b30d-c2e6d7b3b3aa"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/620323bf-2879-4807-b30d-c2e6d7b3b3aa"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(false),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(true),
						ServiceObjectiveName: to.Ptr("System2"),
					},
				},
				{
					Name: to.Ptr("33d0db1f-6893-4210-99f9-463fb9b496a4"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/33d0db1f-6893-4210-99f9-463fb9b496a4"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(false),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(true),
						ServiceObjectiveName: to.Ptr("System3"),
					},
				},
				{
					Name: to.Ptr("da24338c-a6c9-46c2-a4bf-4ac95b496ae4"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/da24338c-a6c9-46c2-a4bf-4ac95b496ae4"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(false),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(true),
						ServiceObjectiveName: to.Ptr("System4"),
					},
				},
				{
					Name: to.Ptr("53f7fa1b-b0d0-43d6-bc29-c5f059fb36e9"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/53f7fa1b-b0d0-43d6-bc29-c5f059fb36e9"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(false),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(true),
						ServiceObjectiveName: to.Ptr("System2L"),
					},
				},
				{
					Name: to.Ptr("e79cd55c-689f-48d9-bffa-0dd12c772248"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/e79cd55c-689f-48d9-bffa-0dd12c772248"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(false),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(true),
						ServiceObjectiveName: to.Ptr("System3L"),
					},
				},
				{
					Name: to.Ptr("4b37bb6d-e004-47ac-8f7a-be56ac9fb490"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/4b37bb6d-e004-47ac-8f7a-be56ac9fb490"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(false),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(true),
						ServiceObjectiveName: to.Ptr("System4L"),
					},
				},
				{
					Name: to.Ptr("6aa3bb3e-7f50-40d6-95ef-5497c30d99d8"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/6aa3bb3e-7f50-40d6-95ef-5497c30d99d8"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(true),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("Free"),
					},
				},
				{
					Name: to.Ptr("dd6d99bb-f193-4ec1-86f2-43d3bccbc49c"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/dd6d99bb-f193-4ec1-86f2-43d3bccbc49c"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(true),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("Basic"),
					},
				},
				{
					Name: to.Ptr("f1173c43-91bd-4aaa-973c-54e79e15235b"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/f1173c43-91bd-4aaa-973c-54e79e15235b"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(true),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("S0"),
					},
				},
				{
					Name: to.Ptr("1b1ebd4d-d903-4baa-97f9-4ea675f5e928"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/1b1ebd4d-d903-4baa-97f9-4ea675f5e928"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("S1"),
					},
				},
				{
					Name: to.Ptr("455330e1-00cd-488b-b5fa-177c226f28b7"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/455330e1-00cd-488b-b5fa-177c226f28b7"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("S2"),
					},
				},
				{
					Name: to.Ptr("789681b8-ca10-4eb0-bdf2-e0b050601b40"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/789681b8-ca10-4eb0-bdf2-e0b050601b40"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("S3"),
					},
				},
				{
					Name: to.Ptr("7203483a-c4fb-4304-9e9f-17c71c904f5d"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/7203483a-c4fb-4304-9e9f-17c71c904f5d"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(true),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("P1"),
					},
				},
				{
					Name: to.Ptr("a7d1b92d-c987-4375-b54d-2b1d0e0f5bb0"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/a7d1b92d-c987-4375-b54d-2b1d0e0f5bb0"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("P2"),
					},
				},
				{
					Name: to.Ptr("afe1eee1-1f12-4e5f-9ad6-2de9c12cb4dc"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/afe1eee1-1f12-4e5f-9ad6-2de9c12cb4dc"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("P4"),
					},
				},
				{
					Name: to.Ptr("43940481-9191-475a-9dba-6b505615b9aa"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/43940481-9191-475a-9dba-6b505615b9aa"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("P6"),
					},
				},
				{
					Name: to.Ptr("dd00d544-bbc0-4f61-ba60-cdce0c410288"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/dd00d544-bbc0-4f61-ba60-cdce0c410288"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("P11"),
					},
				},
				{
					Name: to.Ptr("5bc86cca-9a96-4a94-90ef-bbdfcfbf2d71"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/5bc86cca-9a96-4a94-90ef-bbdfcfbf2d71"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("P15"),
					},
				},
				{
					Name: to.Ptr("dfdc102c-ed02-4349-9756-e227f0e43bb8"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/dfdc102c-ed02-4349-9756-e227f0e43bb8"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(true),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("PRS1"),
					},
				},
				{
					Name: to.Ptr("a089506e-b47a-4f42-8a32-cc19af4c86fb"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/a089506e-b47a-4f42-8a32-cc19af4c86fb"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("PRS2"),
					},
				},
				{
					Name: to.Ptr("39cb8faf-cba8-4b1b-b580-1e1202f2a024"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/39cb8faf-cba8-4b1b-b580-1e1202f2a024"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("PRS4"),
					},
				},
				{
					Name: to.Ptr("1e8da92e-efcd-4682-9140-bf6582120d1f"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/1e8da92e-efcd-4682-9140-bf6582120d1f"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("PRS6"),
					},
				},
				{
					Name: to.Ptr("4e63cb0e-91b9-46fd-b05c-51fdd2367618"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/4e63cb0e-91b9-46fd-b05c-51fdd2367618"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(true),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DW100"),
					},
				},
				{
					Name: to.Ptr("99e78a92-d724-4e1b-857b-2be661f3d153"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/99e78a92-d724-4e1b-857b-2be661f3d153"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DW200"),
					},
				},
				{
					Name: to.Ptr("284f1aff-fee7-4d3b-a211-5b8ebdd28fea"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/284f1aff-fee7-4d3b-a211-5b8ebdd28fea"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DW300"),
					},
				},
				{
					Name: to.Ptr("3bdaeefe-8a9d-41d3-91c4-46ef896b19af"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/3bdaeefe-8a9d-41d3-91c4-46ef896b19af"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DW400"),
					},
				},
				{
					Name: to.Ptr("5f759b78-8ec0-4dfb-97cc-c1455a3b5b4d"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/5f759b78-8ec0-4dfb-97cc-c1455a3b5b4d"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DW500"),
					},
				},
				{
					Name: to.Ptr("efd65c5b-af7b-4389-9109-f6a69d6a3885"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/efd65c5b-af7b-4389-9109-f6a69d6a3885"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DW600"),
					},
				},
				{
					Name: to.Ptr("b89b9c6a-4ec2-4eb8-99db-6d2807e6aabb"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/b89b9c6a-4ec2-4eb8-99db-6d2807e6aabb"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DW1000"),
					},
				},
				{
					Name: to.Ptr("9a7a374e-b95c-4fd5-a68e-131d60796c47"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/9a7a374e-b95c-4fd5-a68e-131d60796c47"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DW1200"),
					},
				},
				{
					Name: to.Ptr("b930f58e-86b5-43e0-a2da-d8bf8769c557"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/b930f58e-86b5-43e0-a2da-d8bf8769c557"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DW1500"),
					},
				},
				{
					Name: to.Ptr("99165ede-a5ab-4b52-b317-e391d92ec370"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/99165ede-a5ab-4b52-b317-e391d92ec370"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DW2000"),
					},
				},
				{
					Name: to.Ptr("8e28c923-5cf2-43cb-bd25-28c8c69b30ff"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/8e28c923-5cf2-43cb-bd25-28c8c69b30ff"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DW3000"),
					},
				},
				{
					Name: to.Ptr("ee1df062-4f3c-42ad-91bf-58b2a7c351e4"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/ee1df062-4f3c-42ad-91bf-58b2a7c351e4"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DW6000"),
					},
				},
				{
					Name: to.Ptr("9cfc850f-d57f-4760-b5a6-bb640d268bf0"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/9cfc850f-d57f-4760-b5a6-bb640d268bf0"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(true),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DS100"),
					},
				},
				{
					Name: to.Ptr("053407ef-f01c-46f4-b829-96e01a14f449"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/053407ef-f01c-46f4-b829-96e01a14f449"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DS200"),
					},
				},
				{
					Name: to.Ptr("013a9e10-cafc-45a8-8fcf-93095655d2ce"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/013a9e10-cafc-45a8-8fcf-93095655d2ce"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DS300"),
					},
				},
				{
					Name: to.Ptr("79f61db4-8c10-46ba-a93a-d7d02dddd61c"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/79f61db4-8c10-46ba-a93a-d7d02dddd61c"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DS400"),
					},
				},
				{
					Name: to.Ptr("44eaac33-df00-4ef4-a2bb-f7ff87899eea"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/44eaac33-df00-4ef4-a2bb-f7ff87899eea"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DS500"),
					},
				},
				{
					Name: to.Ptr("f8e0f3a6-888b-459c-a9dd-d74d8b2b0e72"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/f8e0f3a6-888b-459c-a9dd-d74d8b2b0e72"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DS600"),
					},
				},
				{
					Name: to.Ptr("b9ed8f51-a414-42dc-8348-e4a1de25e12b"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/b9ed8f51-a414-42dc-8348-e4a1de25e12b"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DS1000"),
					},
				},
				{
					Name: to.Ptr("07479569-6d70-47a5-8db6-0af55d34f2c1"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/07479569-6d70-47a5-8db6-0af55d34f2c1"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DS1200"),
					},
				},
				{
					Name: to.Ptr("2d79baec-2879-46d5-9f5d-fb70eb004c4e"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/2d79baec-2879-46d5-9f5d-fb70eb004c4e"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DS1500"),
					},
				},
				{
					Name: to.Ptr("7fb5389f-6d15-4e0b-9540-fe5ecdfdbeee"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/7fb5389f-6d15-4e0b-9540-fe5ecdfdbeee"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("DS2000"),
					},
				},
				{
					Name: to.Ptr("d1737d22-a8ea-4de7-9bd0-33395d2a7419"),
					Type: to.Ptr("Microsoft.Sql/servers/serviceObjectives"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlcrudtest/serviceObjectives/d1737d22-a8ea-4de7-9bd0-33395d2a7419"),
					Properties: &armsql.ServiceObjectiveProperties{
						Enabled:              to.Ptr(true),
						IsDefault:            to.Ptr(false),
						IsSystem:             to.Ptr(false),
						ServiceObjectiveName: to.Ptr("ElasticPool"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceObjectiveListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceObjectiveListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01/examples/ServiceObjectiveList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestElasticPoolActivities_ListByElasticPool(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ElasticPoolActivityList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Elastic pool activity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewElasticPoolActivitiesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByElasticPool("sqlcrudtest-4291",
		"sqlcrudtest-6574",
		"8749",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ElasticPoolActivityList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ElasticPoolActivityListResult{
			Value: []*armsql.ElasticPoolActivity{
				{
					Name:     to.Ptr("851f1672-f7f0-46f6-a262-ee9b51e18e97"),
					Type:     to.Ptr("Microsoft.Sql/servers/elasticPools/elasticPoolActivity"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-4291/providers/Microsoft.Sql/servers/sqlcrudtest-6574/elasticPools/8749/elasticPoolActivity/851f1672-f7f0-46f6-a262-ee9b51e18e97"),
					Location: to.Ptr("Japan East"),
					Properties: &armsql.ElasticPoolActivityProperties{
						OperationID:                   to.Ptr("851f1672-f7f0-46f6-a262-ee9b51e18e97"),
						ElasticPoolName:               to.Ptr("8749"),
						EndTime:                       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T02:03:23.263Z"); return t }()),
						Operation:                     to.Ptr("CREATE"),
						PercentComplete:               to.Ptr[int32](100),
						RequestedDatabaseDtuCap:       to.Ptr[int32](5),
						RequestedDatabaseDtuGuarantee: to.Ptr[int32](0),
						RequestedDtuGuarantee:         to.Ptr[int32](100),
						RequestedStorageLimitInGB:     to.Ptr[int64](9),
						RequestedStorageLimitInMB:     to.Ptr[int32](10000),
						ServerName:                    to.Ptr("sqlcrudtest-6574"),
						StartTime:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T02:03:06.16Z"); return t }()),
						State:                         to.Ptr("COMPLETED"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ElasticPoolActivityListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ElasticPoolActivityListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ElasticPoolActivityList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestElasticPoolDatabaseActivities_ListByElasticPool(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ElasticPoolDatabaseActivityList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List elastic pool database activity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewElasticPoolDatabaseActivitiesClient("9d4e2ad0-e20b-4464-9219-353bded52513", cred, &options)
	pager := client.ListByElasticPool("sqlcrudtest-4673",
		"sqlcrudtest-603",
		"7537",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ElasticPoolDatabaseActivityList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ElasticPoolDatabaseActivityListResult{
			Value: []*armsql.ElasticPoolDatabaseActivity{
				{
					Name:     to.Ptr("3a3272b3-f1fe-423c-9feb-7b843157eda5"),
					Type:     to.Ptr("Microsoft.Sql/servers/elasticPools/elasticPoolDatabaseActivity"),
					ID:       to.Ptr("/subscriptions/9d4e2ad0-e20b-4464-9219-353bded52513/resourceGroups/sqlcrudtest-4673/providers/Microsoft.Sql/servers/sqlcrudtest-603/elasticPools/7537/elasticPoolDatabaseActivity/3a3272b3-f1fe-423c-9feb-7b843157eda5"),
					Location: to.Ptr("Japan East"),
					Properties: &armsql.ElasticPoolDatabaseActivityProperties{
						OperationID:             to.Ptr("3a3272b3-f1fe-423c-9feb-7b843157eda5"),
						CurrentElasticPoolName:  to.Ptr("7537"),
						CurrentServiceObjective: to.Ptr("ElasticPool"),
						DatabaseName:            to.Ptr("2396"),
						EndTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-10-23T03:08:02.95Z"); return t }()),
						Operation:               to.Ptr("UPDATE"),
						PercentComplete:         to.Ptr[int32](100),
						ServerName:              to.Ptr("sqlcrudtest-603"),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-10-23T03:07:12.57Z"); return t }()),
						State:                   to.Ptr("COMPLETED"),
					},
				},
				{
					Name:     to.Ptr("95108a78-384e-48d3-b4de-7bf23b93a26d"),
					Type:     to.Ptr("Microsoft.Sql/servers/elasticPools/elasticPoolDatabaseActivity"),
					ID:       to.Ptr("/subscriptions/9d4e2ad0-e20b-4464-9219-353bded52513/resourceGroups/sqlcrudtest-4673/providers/Microsoft.Sql/servers/sqlcrudtest-603/elasticPools/7537/elasticPoolDatabaseActivity/95108a78-384e-48d3-b4de-7bf23b93a26d"),
					Location: to.Ptr("Japan East"),
					Properties: &armsql.ElasticPoolDatabaseActivityProperties{
						OperationID:             to.Ptr("95108a78-384e-48d3-b4de-7bf23b93a26d"),
						CurrentElasticPoolName:  to.Ptr("7537"),
						CurrentServiceObjective: to.Ptr("ElasticPool"),
						DatabaseName:            to.Ptr("2396"),
						EndTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-10-23T03:06:49.19Z"); return t }()),
						Operation:               to.Ptr("CREATE"),
						PercentComplete:         to.Ptr[int32](100),
						ServerName:              to.Ptr("sqlcrudtest-603"),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-10-23T03:06:11.19Z"); return t }()),
						State:                   to.Ptr("COMPLETED"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ElasticPoolDatabaseActivityListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ElasticPoolDatabaseActivityListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ElasticPoolDatabaseActivityList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerUsages_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ServerUsageMetricsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List servers usages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerUsagesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("sqlcrudtest-6730",
		"sqlcrudtest-9007",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ServerUsageMetricsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerUsageListResult{
			Value: []*armsql.ServerUsage{
				{
					Name:         to.Ptr("server_dtu_quota"),
					CurrentValue: to.Ptr[float64](0),
					DisplayName:  to.Ptr("Database Throughput Unit Quota"),
					Limit:        to.Ptr[float64](45000),
					ResourceName: to.Ptr("sqlcrudtest-9007"),
					Unit:         to.Ptr("DTUs"),
				},
				{
					Name:         to.Ptr("server_dtu_quota_current"),
					CurrentValue: to.Ptr[float64](0),
					DisplayName:  to.Ptr("Database Throughput Unit Quota"),
					Limit:        to.Ptr[float64](45000),
					ResourceName: to.Ptr("sqlcrudtest-9007"),
					Unit:         to.Ptr("DTUs"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerUsageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerUsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/stable/2014-04-01-legacy/examples/ServerUsageMetricsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtendedDatabaseBlobAuditingPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedDatabaseBlobAuditingGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an extended database's blob auditing policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewExtendedDatabaseBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedDatabaseBlobAuditingGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ExtendedDatabaseBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/extendedAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-6852/providers/Microsoft.Sql/servers/blobauditingtest-2080/databases/testdb"),
			Properties: &armsql.ExtendedDatabaseBlobAuditingPolicyProperties{
				AuditActionsAndGroups:        []*string{},
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				PredicateExpression:          to.Ptr("statement = 'select 1'"),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateDisabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				StorageEndpoint:              to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedDatabaseBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedDatabaseBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedDatabaseBlobAuditingGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtendedDatabaseBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedDatabaseAzureMonitorAuditingCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an extended database's azure monitor auditing policy with minimal parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewExtendedDatabaseBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		armsql.ExtendedDatabaseBlobAuditingPolicy{
			Properties: &armsql.ExtendedDatabaseBlobAuditingPolicyProperties{
				IsAzureMonitorTargetEnabled: to.Ptr(true),
				State:                       to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedDatabaseAzureMonitorAuditingCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ExtendedDatabaseBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/extendedAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Sql/servers/blobauditingtest-6440/databases/testdb"),
			Properties: &armsql.ExtendedDatabaseBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedDatabaseBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedDatabaseBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedDatabaseAzureMonitorAuditingCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedDatabaseBlobAuditingCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an extended database's blob auditing policy with all parameters"},
	})
	client = armsql.NewExtendedDatabaseBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		armsql.ExtendedDatabaseBlobAuditingPolicy{
			Properties: &armsql.ExtendedDatabaseBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("DATABASE_LOGOUT_GROUP"),
					to.Ptr("DATABASE_ROLE_MEMBER_CHANGE_GROUP"),
					to.Ptr("UPDATE on database::TestDatabaseName by public")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				PredicateExpression:          to.Ptr("statement = 'select 1'"),
				QueueDelayMs:                 to.Ptr[int32](4000),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey:      to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedDatabaseBlobAuditingCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ExtendedDatabaseBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/extendedAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Sql/servers/blobauditingtest-6440/databases/testdb"),
			Properties: &armsql.ExtendedDatabaseBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("DATABASE_LOGOUT_GROUP"),
					to.Ptr("DATABASE_ROLE_MEMBER_CHANGE_GROUP"),
					to.Ptr("UPDATE on database::TestDatabaseName by public")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				PredicateExpression:          to.Ptr("statement = 'select 1'"),
				QueueDelayMs:                 to.Ptr[int32](4000),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedDatabaseBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedDatabaseBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedDatabaseBlobAuditingCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedDatabaseBlobAuditingCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an extended database's blob auditing policy with minimal parameters"},
	})
	client = armsql.NewExtendedDatabaseBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		armsql.ExtendedDatabaseBlobAuditingPolicy{
			Properties: &armsql.ExtendedDatabaseBlobAuditingPolicyProperties{
				State:                   to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedDatabaseBlobAuditingCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ExtendedDatabaseBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/extendedAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Sql/servers/blobauditingtest-6440/databases/testdb"),
			Properties: &armsql.ExtendedDatabaseBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedDatabaseBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedDatabaseBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedDatabaseBlobAuditingCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtendedDatabaseBlobAuditingPolicies_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseExtendedAuditingSettingsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List extended auditing settings of a database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewExtendedDatabaseBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseExtendedAuditingSettingsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ExtendedDatabaseBlobAuditingPolicyListResult{
			Value: []*armsql.ExtendedDatabaseBlobAuditingPolicy{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/extendedAuditingSettings"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-6852/providers/Microsoft.Sql/servers/blobauditingtest-2080/databases/testdb/extendedAuditingSettings/default"),
					Properties: &armsql.ExtendedDatabaseBlobAuditingPolicyProperties{
						AuditActionsAndGroups:        []*string{},
						IsAzureMonitorTargetEnabled:  to.Ptr(false),
						IsStorageSecondaryKeyInUse:   to.Ptr(false),
						PredicateExpression:          to.Ptr("statement = 'select 1'"),
						RetentionDays:                to.Ptr[int32](0),
						State:                        to.Ptr(armsql.BlobAuditingPolicyStateDisabled),
						StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						StorageEndpoint:              to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExtendedDatabaseBlobAuditingPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExtendedDatabaseBlobAuditingPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseExtendedAuditingSettingsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtendedServerBlobAuditingPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedServerBlobAuditingGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a server's blob extended auditing policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewExtendedServerBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedServerBlobAuditingGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ExtendedServerBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/extendedAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-6852/providers/Microsoft.Sql/servers/blobauditingtest-2080/extendedAuditingSettings/default"),
			Properties: &armsql.ExtendedServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups:        []*string{},
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				PredicateExpression:          to.Ptr("object_name = 'SensitiveData'"),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateDisabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				StorageEndpoint:              to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedServerBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedServerBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedServerBlobAuditingGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtendedServerBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedServerBlobAuditingCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a server's extended blob auditing policy with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewExtendedServerBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		armsql.ExtendedServerBlobAuditingPolicy{
			Properties: &armsql.ExtendedServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				PredicateExpression:          to.Ptr("object_name = 'SensitiveData'"),
				QueueDelayMs:                 to.Ptr[int32](4000),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey:      to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armsql.ExtendedServerBlobAuditingPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedServerBlobAuditingCreateMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedServerBlobAuditingCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ExtendedServerBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/extendedAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Sql/servers/blobauditingtest-6440/extendedAuditingSettings/default"),
			Properties: &armsql.ExtendedServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				PredicateExpression:          to.Ptr("object_name = 'SensitiveData'"),
				QueueDelayMs:                 to.Ptr[int32](4000),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedServerBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedServerBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedServerBlobAuditingCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedServerBlobAuditingCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a server's extended blob auditing policy with minimal parameters"},
	})
	client = armsql.NewExtendedServerBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		armsql.ExtendedServerBlobAuditingPolicy{
			Properties: &armsql.ExtendedServerBlobAuditingPolicyProperties{
				State:                   to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armsql.ExtendedServerBlobAuditingPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedServerBlobAuditingCreateMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedServerBlobAuditingCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ExtendedServerBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/extendedAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Sql/servers/blobauditingtest-6440/extendedAuditingSettings/default"),
			Properties: &armsql.ExtendedServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedServerBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedServerBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ExtendedServerBlobAuditingCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtendedServerBlobAuditingPolicies_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerExtendedAuditingSettingsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List extended auditing settings of a server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewExtendedServerBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("blobauditingtest-4799",
		"blobauditingtest-6440",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerExtendedAuditingSettingsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ExtendedServerBlobAuditingPolicyListResult{
			Value: []*armsql.ExtendedServerBlobAuditingPolicy{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/servers/extendedAuditingSettings"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-6852/providers/Microsoft.Sql/servers/blobauditingtest-2080/extendedAuditingSettings/default"),
					Properties: &armsql.ExtendedServerBlobAuditingPolicyProperties{
						AuditActionsAndGroups:        []*string{},
						IsAzureMonitorTargetEnabled:  to.Ptr(false),
						IsStorageSecondaryKeyInUse:   to.Ptr(false),
						PredicateExpression:          to.Ptr("object_name = 'SensitiveData'"),
						RetentionDays:                to.Ptr[int32](0),
						State:                        to.Ptr(armsql.BlobAuditingPolicyStateDisabled),
						StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						StorageEndpoint:              to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExtendedServerBlobAuditingPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExtendedServerBlobAuditingPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerExtendedAuditingSettingsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerBlobAuditingPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerBlobAuditingGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a server's blob auditing policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerBlobAuditingGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/auditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-6852/providers/Microsoft.Sql/servers/blobauditingtest-2080/auditingSettings/default"),
			Properties: &armsql.ServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups:        []*string{},
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateDisabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				StorageEndpoint:              to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerBlobAuditingGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerBlobAuditingCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a server's blob auditing policy with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		armsql.ServerBlobAuditingPolicy{
			Properties: &armsql.ServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				QueueDelayMs:                 to.Ptr[int32](4000),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey:      to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armsql.ServerBlobAuditingPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerBlobAuditingCreateMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerBlobAuditingCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/auditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Sql/servers/blobauditingtest-6440/auditingSettings/default"),
			Properties: &armsql.ServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				QueueDelayMs:                 to.Ptr[int32](4000),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerBlobAuditingCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerBlobAuditingCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a server's blob auditing policy with minimal parameters"},
	})
	client = armsql.NewServerBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		armsql.ServerBlobAuditingPolicy{
			Properties: &armsql.ServerBlobAuditingPolicyProperties{
				State:                   to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armsql.ServerBlobAuditingPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerBlobAuditingCreateMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerBlobAuditingCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/auditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Sql/servers/blobauditingtest-6440/auditingSettings/default"),
			Properties: &armsql.ServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerBlobAuditingCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerBlobAuditingPolicies_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAuditingSettingsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List auditing settings of a server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("blobauditingtest-4799",
		"blobauditingtest-6440",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAuditingSettingsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerBlobAuditingPolicyListResult{
			Value: []*armsql.ServerBlobAuditingPolicy{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/servers/auditingSettings"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-6852/providers/Microsoft.Sql/servers/blobauditingtest-2080/auditingSettings/default"),
					Properties: &armsql.ServerBlobAuditingPolicyProperties{
						AuditActionsAndGroups:        []*string{},
						IsAzureMonitorTargetEnabled:  to.Ptr(false),
						IsStorageSecondaryKeyInUse:   to.Ptr(false),
						RetentionDays:                to.Ptr[int32](0),
						State:                        to.Ptr(armsql.BlobAuditingPolicyStateDisabled),
						StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						StorageEndpoint:              to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerBlobAuditingPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerBlobAuditingPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAuditingSettingsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseBlobAuditingPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseBlobAuditingGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a database's blob auditing policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseBlobAuditingGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/auditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-6852/providers/Microsoft.Sql/servers/blobauditingtest-2080/databases/testdb"),
			Kind: to.Ptr("V12"),
			Properties: &armsql.DatabaseBlobAuditingPolicyProperties{
				AuditActionsAndGroups:        []*string{},
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateDisabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				StorageEndpoint:              to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseBlobAuditingGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAzureMonitorAuditingCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a database's azure monitor auditing policy with minimal parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		armsql.DatabaseBlobAuditingPolicy{
			Properties: &armsql.DatabaseBlobAuditingPolicyProperties{
				IsAzureMonitorTargetEnabled: to.Ptr(true),
				State:                       to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAzureMonitorAuditingCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/auditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Sql/servers/blobauditingtest-6440/databases/testdb"),
			Kind: to.Ptr("V12"),
			Properties: &armsql.DatabaseBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAzureMonitorAuditingCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseBlobAuditingCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a database's blob auditing policy with all parameters"},
	})
	client = armsql.NewDatabaseBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		armsql.DatabaseBlobAuditingPolicy{
			Properties: &armsql.DatabaseBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("DATABASE_LOGOUT_GROUP"),
					to.Ptr("DATABASE_ROLE_MEMBER_CHANGE_GROUP"),
					to.Ptr("UPDATE on database::TestDatabaseName by public")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				QueueDelayMs:                 to.Ptr[int32](4000),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey:      to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseBlobAuditingCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/auditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Sql/servers/blobauditingtest-6440/databases/testdb"),
			Kind: to.Ptr("V12"),
			Properties: &armsql.DatabaseBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("DATABASE_LOGOUT_GROUP"),
					to.Ptr("DATABASE_ROLE_MEMBER_CHANGE_GROUP"),
					to.Ptr("UPDATE on database::TestDatabaseName by public")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				QueueDelayMs:                 to.Ptr[int32](4000),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseBlobAuditingCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseBlobAuditingCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a database's blob auditing policy with minimal parameters"},
	})
	client = armsql.NewDatabaseBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		armsql.DatabaseBlobAuditingPolicy{
			Properties: &armsql.DatabaseBlobAuditingPolicyProperties{
				State:                   to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseBlobAuditingCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/auditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Sql/servers/blobauditingtest-6440/databases/testdb"),
			Kind: to.Ptr("V12"),
			Properties: &armsql.DatabaseBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseBlobAuditingCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseBlobAuditingPolicies_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAuditingSettingsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List audit settings of a database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAuditingSettingsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseBlobAuditingPolicyListResult{
			Value: []*armsql.DatabaseBlobAuditingPolicy{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/auditingSettings"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-6852/providers/Microsoft.Sql/servers/blobauditingtest-2080/databases/testdb/auditingSettings/default"),
					Kind: to.Ptr("V12"),
					Properties: &armsql.DatabaseBlobAuditingPolicyProperties{
						AuditActionsAndGroups:        []*string{},
						IsAzureMonitorTargetEnabled:  to.Ptr(false),
						IsStorageSecondaryKeyInUse:   to.Ptr(false),
						RetentionDays:                to.Ptr[int32](0),
						State:                        to.Ptr(armsql.BlobAuditingPolicyStateDisabled),
						StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						StorageEndpoint:              to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseBlobAuditingPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseBlobAuditingPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAuditingSettingsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAdvisors_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAdvisorList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of database advisors"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseAdvisorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.ListByDatabase(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"IndexAdvisor_test_3",
		&armsql.DatabaseAdvisorsClientListByDatabaseOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAdvisorList.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armsql.Advisor{
			{
				Name:     to.Ptr("CreateIndex"),
				Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/CreateIndex"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusGA),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDatabase),
					LastChecked:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-20T00:24:39Z"); return t }()),
					RecommendationsStatus:          to.Ptr("Ok"),
				},
			},
			{
				Name:     to.Ptr("DropIndex"),
				Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/DropIndex"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusGA),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDatabase),
					LastChecked:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-19T20:42:43Z"); return t }()),
					RecommendationsStatus:          to.Ptr("DbSeemsTuned"),
				},
			},
			{
				Name:     to.Ptr("DbParameterization"),
				Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/DbParameterization"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusGA),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusEnabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDatabase),
					LastChecked:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-19T19:13:03Z"); return t }()),
					RecommendationsStatus:          to.Ptr("DbParameterizationIssue"),
				},
			},
			{
				Name:     to.Ptr("SchemaIssue"),
				Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/SchemaIssue"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusPublicPreview),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDefault),
					LastChecked:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-20T14:00:32Z"); return t }()),
					RecommendationsStatus:          to.Ptr("SchemaIsNotConsistent"),
				},
			},
			{
				Name:     to.Ptr("ForceLastGoodPlan"),
				Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/ForceLastGoodPlan"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusPrivatePreview),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDefault),
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.AdvisorArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdvisorArray)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAdvisorList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRecommendedActionListExpand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of database recommended actions for all advisors"},
	})
	client = armsql.NewDatabaseAdvisorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.ListByDatabase(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"IndexAdvisor_test_3",
		&armsql.DatabaseAdvisorsClientListByDatabaseOptions{Expand: to.Ptr("recommendedActions")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRecommendedActionListExpand.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armsql.Advisor{
			{
				Name:     to.Ptr("CreateIndex"),
				Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/CreateIndex"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusGA),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDatabase),
					LastChecked:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-20T16:39:16Z"); return t }()),
					RecommendationsStatus:          to.Ptr("Ok"),
					RecommendedActions: []*armsql.RecommendedAction{
						{
							Name:     to.Ptr("IR_[CRM]_[DataPoints]_4821CD2F9510D98184BB"),
							Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/CreateIndex/recommendedActions/IR_[CRM]_[DataPoints]_4821CD2F9510D98184BB"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										AbsoluteValue: to.Ptr[float64](1440),
										DimensionName: to.Ptr("ActionDuration"),
										Unit:          to.Ptr("Seconds"),
									},
									{
										AbsoluteValue: to.Ptr[float64](209.3125),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									}},
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("CREATE NONCLUSTERED INDEX [nci_wi_DataPoints_B892614093BAC56295EF6018BD4CB51B] ON [CRM].[DataPoints] ([Name],[Money],[Power]) INCLUDE ([Hour], [System], [LastChanged]) WITH (ONLINE = ON)"),
								},
								IsArchivedAction:     to.Ptr(false),
								IsExecutableAction:   to.Ptr(true),
								IsRevertableAction:   to.Ptr(true),
								LastRefresh:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:04Z"); return t }()),
								ObservedImpact:       []*armsql.RecommendedActionImpactRecord{},
								RecommendationReason: to.Ptr(""),
								Score:                to.Ptr[int32](1),
								State: &armsql.RecommendedActionStateInfo{
									CurrentValue: to.Ptr(armsql.RecommendedActionCurrentStateActive),
									LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-20T15:15:40Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:04Z"); return t }()),
								Details: map[string]interface{}{
									"schema":          "[CRM]",
									"includedColumns": "[Hour], [System], [LastChanged]",
									"indexColumns":    "[Name],[Money],[Power]",
									"indexName":       "nci_wi_DataPoints_B892614093BAC56295EF6018BD4CB51B",
									"indexType":       "NONCLUSTERED",
									"table":           "[DataPoints]",
								},
							},
						},
						{
							Name:     to.Ptr("IR_[dbo]_[DataPoints]_F5D2F347AA22DB46E4CC"),
							Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/CreateIndex/recommendedActions/IR_[dbo]_[DataPoints]_F5D2F347AA22DB46E4CC"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										AbsoluteValue: to.Ptr[float64](5040),
										DimensionName: to.Ptr("ActionDuration"),
										Unit:          to.Ptr("Seconds"),
									},
									{
										AbsoluteValue: to.Ptr[float64](120),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									}},
								ExecuteActionDuration:      to.Ptr("PT1M"),
								ExecuteActionInitiatedBy:   to.Ptr(armsql.RecommendedActionInitiatedByUser),
								ExecuteActionInitiatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ExecuteActionStartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("DROP INDEX [nci_wi_DataPoints_609E4B7D6A3813990ED44B28B340C8FC] ON [dbo].[DataPoints]"),
								},
								IsArchivedAction:   to.Ptr(false),
								IsExecutableAction: to.Ptr(true),
								IsRevertableAction: to.Ptr(true),
								LastRefresh:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ObservedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										ChangeValueAbsolute: to.Ptr[float64](-12.7),
										ChangeValueRelative: to.Ptr[float64](-0.9),
										DimensionName:       to.Ptr("AffectedQueriesCpuUtilization"),
										Unit:                to.Ptr("CpuCores"),
									},
									{
										ChangeValueAbsolute: to.Ptr[float64](-12.7),
										ChangeValueRelative: to.Ptr[float64](-0.3175),
										DimensionName:       to.Ptr("CpuUtilization"),
										Unit:                to.Ptr("CpuCores"),
									},
									{
										AbsoluteValue: to.Ptr[float64](12),
										DimensionName: to.Ptr("QueriesWithImprovedPerformance"),
										Unit:          to.Ptr("Count"),
									},
									{
										AbsoluteValue: to.Ptr[float64](1),
										DimensionName: to.Ptr("QueriesWithRegressedPerformance"),
										Unit:          to.Ptr("Count"),
									},
									{
										AbsoluteValue: to.Ptr[float64](130.742187),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									},
									{
										AbsoluteValue: to.Ptr[float64](0),
										DimensionName: to.Ptr("VerificationProgress"),
										Unit:          to.Ptr("Percent"),
									}},
								RecommendationReason: to.Ptr(""),
								Score:                to.Ptr[int32](3),
								State: &armsql.RecommendedActionStateInfo{
									ActionInitiatedBy: to.Ptr(armsql.RecommendedActionInitiatedByUser),
									CurrentValue:      to.Ptr(armsql.RecommendedActionCurrentStateSuccess),
									LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								Details: map[string]interface{}{
									"schema":               "[dbo]",
									"includedColumns":      "[Power],[Pineapple]",
									"indexActionDuration":  "00:01:00",
									"indexActionStartTime": "2017-03-01T14:38:05.337",
									"indexColumns":         "[Name],[Money]",
									"indexName":            "nci_wi_DataPoints_609E4B7D6A3813990ED44B28B340C8FC",
									"indexType":            "NONCLUSTERED",
									"table":                "[DataPoints]",
								},
							},
						},
						{
							Name:     to.Ptr("IR_[dbo]_[Employees]_560E15A98D14CA09BDFB"),
							Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/CreateIndex/recommendedActions/IR_[dbo]_[Employees]_560E15A98D14CA09BDFB"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										AbsoluteValue: to.Ptr[float64](17),
										DimensionName: to.Ptr("ActionDuration"),
										Unit:          to.Ptr("Seconds"),
									},
									{
										AbsoluteValue: to.Ptr[float64](128),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									}},
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("CREATE NONCLUSTERED INDEX [nci_wi_Employees_8C18C2AF4267DC77793040782641CCDE] ON [dbo].[Employees] ([City], [State]) INCLUDE ([Postal]) WITH (ONLINE = ON)"),
								},
								IsArchivedAction:     to.Ptr(false),
								IsExecutableAction:   to.Ptr(true),
								IsRevertableAction:   to.Ptr(true),
								LastRefresh:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ObservedImpact:       []*armsql.RecommendedActionImpactRecord{},
								RecommendationReason: to.Ptr(""),
								Score:                to.Ptr[int32](3),
								State: &armsql.RecommendedActionStateInfo{
									CurrentValue: to.Ptr(armsql.RecommendedActionCurrentStateActive),
									LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								Details: map[string]interface{}{
									"schema":          "[dbo]",
									"includedColumns": "[Postal]",
									"indexColumns":    "[City], [State]",
									"indexName":       "nci_wi_Employees_8C18C2AF4267DC77793040782641CCDE",
									"indexType":       "NONCLUSTERED",
									"table":           "[Employees]",
								},
							},
						}},
				},
			},
			{
				Name:     to.Ptr("DropIndex"),
				Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/DropIndex"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusGA),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDatabase),
					LastChecked:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-19T20:42:43Z"); return t }()),
					RecommendationsStatus:          to.Ptr("DbSeemsTuned"),
					RecommendedActions: []*armsql.RecommendedAction{
						{
							Name:     to.Ptr("IR_[CRM]_[DataPoints1]_13ADA5F354E9E14A983B"),
							Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/DropIndex/recommendedActions/IR_[CRM]_[DataPoints1]_13ADA5F354E9E14A983B"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										AbsoluteValue: to.Ptr[float64](645),
										DimensionName: to.Ptr("ActionDuration"),
										Unit:          to.Ptr("Seconds"),
									},
									{
										AbsoluteValue: to.Ptr[float64](342),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									}},
								ExecuteActionInitiatedBy:   to.Ptr(armsql.RecommendedActionInitiatedBySystem),
								ExecuteActionInitiatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-23T14:14:35Z"); return t }()),
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("DROP INDEX [IX_FF] ON [CRM].[DataPoints1]"),
								},
								IsArchivedAction:     to.Ptr(false),
								IsExecutableAction:   to.Ptr(true),
								IsRevertableAction:   to.Ptr(true),
								LastRefresh:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ObservedImpact:       []*armsql.RecommendedActionImpactRecord{},
								RecommendationReason: to.Ptr("Unused"),
								Score:                to.Ptr[int32](1),
								State: &armsql.RecommendedActionStateInfo{
									ActionInitiatedBy: to.Ptr(armsql.RecommendedActionInitiatedBySystem),
									CurrentValue:      to.Ptr(armsql.RecommendedActionCurrentStatePending),
									LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-23T14:14:35Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								Details: map[string]interface{}{
									"schema":            "[CRM]",
									"includedColumns":   "[Apple]",
									"indexColumns":      "[Protocol],[SessionId]",
									"indexName":         "IX_FF",
									"indexType":         "NONCLUSTERED",
									"originalIndexName": "IX_COM_SKU_SKUDepartmentID",
									"table":             "[DataPoints1]",
								},
							},
						},
						{
							Name:     to.Ptr("IR_[CRM]_[DataPoints1]_29AEA82685D24704DE1A"),
							Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/DropIndex/recommendedActions/IR_[CRM]_[DataPoints1]_29AEA82685D24704DE1A"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										AbsoluteValue: to.Ptr[float64](803),
										DimensionName: to.Ptr("ActionDuration"),
										Unit:          to.Ptr("Seconds"),
									},
									{
										AbsoluteValue: to.Ptr[float64](144.6875),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									}},
								ExecuteActionInitiatedBy:   to.Ptr(armsql.RecommendedActionInitiatedBySystem),
								ExecuteActionInitiatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("DROP INDEX [MyIndex123] ON [CRM].[DataPoints1]"),
								},
								IsArchivedAction:     to.Ptr(false),
								IsExecutableAction:   to.Ptr(true),
								IsRevertableAction:   to.Ptr(true),
								LastRefresh:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ObservedImpact:       []*armsql.RecommendedActionImpactRecord{},
								RecommendationReason: to.Ptr("Duplicate"),
								Score:                to.Ptr[int32](1),
								State: &armsql.RecommendedActionStateInfo{
									ActionInitiatedBy: to.Ptr(armsql.RecommendedActionInitiatedBySystem),
									CurrentValue:      to.Ptr(armsql.RecommendedActionCurrentStatePending),
									LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								Details: map[string]interface{}{
									"schema":            "[CRM]",
									"includedColumns":   "[Apple]",
									"indexColumns":      "[Cookies],[SessionId]",
									"indexName":         "MyIndex123",
									"indexType":         "NONCLUSTERED",
									"originalIndexName": "IX_COM_SKU_SKUDepartmentID",
									"table":             "[DataPoints1]",
								},
							},
						},
						{
							Name:     to.Ptr("IR_[CRM]_[DataPoints2]_E4B21F229379807E531A"),
							Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/DropIndex/recommendedActions/IR_[CRM]_[DataPoints2]_E4B21F229379807E531A"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										AbsoluteValue: to.Ptr[float64](705),
										DimensionName: to.Ptr("ActionDuration"),
										Unit:          to.Ptr("Seconds"),
									},
									{
										AbsoluteValue: to.Ptr[float64](342),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									}},
								ExecuteActionDuration:      to.Ptr("PT1M"),
								ExecuteActionInitiatedBy:   to.Ptr(armsql.RecommendedActionInitiatedByUser),
								ExecuteActionInitiatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ExecuteActionStartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("CREATE NONCLUSTERED INDEX [MyIndex321] ON [CRM].[DataPoints2] ([Cookies],[SessionId],[Protocol]) INCLUDE ([Apple]) WITH (ONLINE = ON)"),
								},
								IsArchivedAction:   to.Ptr(false),
								IsExecutableAction: to.Ptr(true),
								IsRevertableAction: to.Ptr(true),
								LastRefresh:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ObservedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										ChangeValueAbsolute: to.Ptr[float64](0),
										ChangeValueRelative: to.Ptr[float64](0),
										DimensionName:       to.Ptr("AffectedQueriesCpuUtilization"),
										Unit:                to.Ptr("CpuCores"),
									},
									{
										ChangeValueAbsolute: to.Ptr[float64](0),
										ChangeValueRelative: to.Ptr[float64](0),
										DimensionName:       to.Ptr("CpuUtilization"),
										Unit:                to.Ptr("CpuCores"),
									},
									{
										AbsoluteValue: to.Ptr[float64](0),
										DimensionName: to.Ptr("QueriesWithImprovedPerformance"),
										Unit:          to.Ptr("Count"),
									},
									{
										AbsoluteValue: to.Ptr[float64](0),
										DimensionName: to.Ptr("QueriesWithRegressedPerformance"),
										Unit:          to.Ptr("Count"),
									},
									{
										AbsoluteValue: to.Ptr[float64](-342),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									},
									{
										AbsoluteValue: to.Ptr[float64](0),
										DimensionName: to.Ptr("VerificationProgress"),
										Unit:          to.Ptr("Percent"),
									}},
								RecommendationReason: to.Ptr("Duplicate"),
								Score:                to.Ptr[int32](1),
								State: &armsql.RecommendedActionStateInfo{
									ActionInitiatedBy: to.Ptr(armsql.RecommendedActionInitiatedByUser),
									CurrentValue:      to.Ptr(armsql.RecommendedActionCurrentStateSuccess),
									LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								Details: map[string]interface{}{
									"schema":               "[CRM]",
									"includedColumns":      "[Apple]",
									"indexActionDuration":  "00:01:00",
									"indexActionStartTime": "2017-03-01T14:38:05.697",
									"indexColumns":         "[Cookies],[SessionId],[Protocol]",
									"indexName":            "MyIndex321",
									"indexType":            "NONCLUSTERED",
									"originalIndexName":    "IX_COM_SKU_SKUDepartmentID",
									"table":                "[DataPoints2]",
								},
							},
						},
						{
							Name:     to.Ptr("IR_[dbo]_[FactFinance]_13ADA5F354E9E14A983B"),
							Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/DropIndex/recommendedActions/IR_[dbo]_[FactFinance]_13ADA5F354E9E14A983B"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										AbsoluteValue: to.Ptr[float64](705),
										DimensionName: to.Ptr("ActionDuration"),
										Unit:          to.Ptr("Seconds"),
									},
									{
										AbsoluteValue: to.Ptr[float64](342),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									}},
								ExecuteActionDuration:      to.Ptr("PT1M"),
								ExecuteActionInitiatedBy:   to.Ptr(armsql.RecommendedActionInitiatedBySystem),
								ExecuteActionInitiatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ExecuteActionStartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("CREATE NONCLUSTERED INDEX [IX_FF] ON [dbo].[FactFinance] ([FinanceKey],[DateKey]) INCLUDE ([OrganizationKey]) WITH (ONLINE = ON)"),
								},
								IsArchivedAction:   to.Ptr(false),
								IsExecutableAction: to.Ptr(true),
								IsRevertableAction: to.Ptr(true),
								LastRefresh:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ObservedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										ChangeValueAbsolute: to.Ptr[float64](0),
										ChangeValueRelative: to.Ptr[float64](0),
										DimensionName:       to.Ptr("AffectedQueriesCpuUtilization"),
										Unit:                to.Ptr("CpuCores"),
									},
									{
										ChangeValueAbsolute: to.Ptr[float64](0),
										ChangeValueRelative: to.Ptr[float64](0),
										DimensionName:       to.Ptr("CpuUtilization"),
										Unit:                to.Ptr("CpuCores"),
									},
									{
										AbsoluteValue: to.Ptr[float64](0),
										DimensionName: to.Ptr("QueriesWithImprovedPerformance"),
										Unit:          to.Ptr("Count"),
									},
									{
										AbsoluteValue: to.Ptr[float64](0),
										DimensionName: to.Ptr("QueriesWithRegressedPerformance"),
										Unit:          to.Ptr("Count"),
									},
									{
										AbsoluteValue: to.Ptr[float64](-342),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									},
									{
										AbsoluteValue: to.Ptr[float64](0),
										DimensionName: to.Ptr("VerificationProgress"),
										Unit:          to.Ptr("Percent"),
									}},
								RecommendationReason: to.Ptr("Duplicate"),
								Score:                to.Ptr[int32](1),
								State: &armsql.RecommendedActionStateInfo{
									ActionInitiatedBy: to.Ptr(armsql.RecommendedActionInitiatedBySystem),
									CurrentValue:      to.Ptr(armsql.RecommendedActionCurrentStateSuccess),
									LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-28T14:38:05Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								Details: map[string]interface{}{
									"schema":               "[dbo]",
									"includedColumns":      "[OrganizationKey]",
									"indexActionDuration":  "00:01:00",
									"indexActionStartTime": "2017-03-01T14:38:05.837",
									"indexColumns":         "[FinanceKey],[DateKey]",
									"indexName":            "IX_FF",
									"indexType":            "NONCLUSTERED",
									"originalIndexName":    "IX_COM_SKU_SKUDepartmentID",
									"table":                "[FactFinance]",
								},
							},
						}},
				},
			},
			{
				Name:     to.Ptr("DbParameterization"),
				Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/DbParameterization"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusGA),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusEnabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDatabase),
					LastChecked:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-19T19:13:03Z"); return t }()),
					RecommendationsStatus:          to.Ptr("DbParameterizationIssue"),
					RecommendedActions: []*armsql.RecommendedAction{
						{
							Name:     to.Ptr("ForceDbParameterization"),
							Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/DbParameterization/recommendedActions/ForceDbParameterization"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										ChangeValueAbsolute: to.Ptr[float64](22.5613696939135),
										DimensionName:       to.Ptr("CpuSavings"),
										Unit:                to.Ptr("Percent"),
									},
									{
										ChangeValueAbsolute: to.Ptr[float64](0.701823681806341),
										DimensionName:       to.Ptr("QueryDurationDecrease"),
										Unit:                to.Ptr("secs"),
									}},
								ExecuteActionInitiatedBy:   to.Ptr(armsql.RecommendedActionInitiatedBySystem),
								ExecuteActionInitiatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T15:08:31Z"); return t }()),
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("ALTER DATABASE [IndexAdvisor_test_3] SET PARAMETERIZATION FORCED"),
								},
								IsArchivedAction:     to.Ptr(false),
								IsExecutableAction:   to.Ptr(true),
								IsRevertableAction:   to.Ptr(true),
								LastRefresh:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:37:44Z"); return t }()),
								ObservedImpact:       []*armsql.RecommendedActionImpactRecord{},
								RecommendationReason: to.Ptr(""),
								Score:                to.Ptr[int32](3),
								State: &armsql.RecommendedActionStateInfo{
									ActionInitiatedBy: to.Ptr(armsql.RecommendedActionInitiatedBySystem),
									CurrentValue:      to.Ptr(armsql.RecommendedActionCurrentStatePending),
									LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T15:08:31Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:37:44Z"); return t }()),
							},
						}},
				},
			},
			{
				Name:     to.Ptr("SchemaIssue"),
				Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/SchemaIssue"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusPublicPreview),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDefault),
					LastChecked:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-20T18:50:21Z"); return t }()),
					RecommendationsStatus:          to.Ptr("SchemaIsNotConsistent"),
					RecommendedActions: []*armsql.RecommendedAction{
						{
							Name:     to.Ptr("SchemaProblem_1A258C5714A7410C9D23"),
							Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/SchemaIssue/recommendedActions/SchemaProblem_1A258C5714A7410C9D23"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails:          &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact:       []*armsql.RecommendedActionImpactRecord{},
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{},
								IsArchivedAction:      to.Ptr(false),
								IsExecutableAction:    to.Ptr(false),
								IsRevertableAction:    to.Ptr(false),
								LastRefresh:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T22:19:53Z"); return t }()),
								ObservedImpact:        []*armsql.RecommendedActionImpactRecord{},
								RecommendationReason:  to.Ptr("SchemaProblem"),
								Score:                 to.Ptr[int32](3),
								State: &armsql.RecommendedActionStateInfo{
									CurrentValue: to.Ptr(armsql.RecommendedActionCurrentStateActive),
									LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:37:48Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:37:48Z"); return t }()),
								Details: map[string]interface{}{
									"sqlErrorCount":   float64(342482),
									"sqlErrorMessage": "Invalid object name 'dbo.Companies'.",
									"sqlErrorNumber":  float64(208),
								},
							},
						}},
				},
			},
			{
				Name:     to.Ptr("ForceLastGoodPlan"),
				Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/ForceLastGoodPlan"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusPrivatePreview),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDefault),
					RecommendedActions:             []*armsql.RecommendedAction{},
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.AdvisorArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdvisorArray)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRecommendedActionListExpand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAdvisors_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAdvisorGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get database advisor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseAdvisorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"IndexAdvisor_test_3",
		"CreateIndex",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAdvisorGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Advisor{
			Name: to.Ptr("CreateIndex"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/advisors"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/CreateIndex"),
			Properties: &armsql.AdvisorProperties{
				AdvisorStatus:         to.Ptr(armsql.AdvisorStatusGA),
				AutoExecuteStatus:     to.Ptr(armsql.AutoExecuteStatusDisabled),
				LastChecked:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-20T00:24:39Z"); return t }()),
				RecommendationsStatus: to.Ptr("Ok"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Advisor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Advisor)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAdvisorGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAdvisors_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAdvisorUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update database advisor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseAdvisorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Update(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"IndexAdvisor_test_3",
		"CreateIndex",
		armsql.Advisor{
			Properties: &armsql.AdvisorProperties{
				AutoExecuteStatus: to.Ptr(armsql.AutoExecuteStatusDisabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAdvisorUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Advisor{
			Name: to.Ptr("CreateIndex"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/advisors"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/CreateIndex"),
			Properties: &armsql.AdvisorProperties{
				AdvisorStatus:         to.Ptr(armsql.AdvisorStatusGA),
				AutoExecuteStatus:     to.Ptr(armsql.AutoExecuteStatusDisabled),
				LastChecked:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-20T00:24:39Z"); return t }()),
				RecommendationsStatus: to.Ptr("Ok"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Advisor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Advisor)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAdvisorUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAutomaticTuning_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAutomaticTuningGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a database's automatic tuning settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseAutomaticTuningClient("c3aa9078-0000-0000-0000-e36f151182d7", cred, &options)
	res, err := client.Get(ctx,
		"default-sql-onebox",
		"testsvr11",
		"db1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAutomaticTuningGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseAutomaticTuning{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/automaticTuning"),
			ID:   to.Ptr("/subscriptions/c3aa9078-0000-0000-0000-e36f151182d7/resourceGroups/default-sql-onebox/providers/Microsoft.Sql/servers/testsvr11/databases/db1/automaticTuning/current"),
			Properties: &armsql.DatabaseAutomaticTuningProperties{
				ActualState:  to.Ptr(armsql.AutomaticTuningModeAuto),
				DesiredState: to.Ptr(armsql.AutomaticTuningModeAuto),
				Options: map[string]*armsql.AutomaticTuningOptions{
					"createIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOn),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningDisabledReasonAutoConfigured),
					},
					"dropIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOff),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningDisabledReasonAutoConfigured),
					},
					"forceLastGoodPlan": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOn),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningDisabledReasonAutoConfigured),
					},
					"maintainIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOff),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningDisabledReasonAutoConfigured),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseAutomaticTuning) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseAutomaticTuning)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAutomaticTuningGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAutomaticTuning_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAutomaticTuningUpdateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates database automatic tuning settings with all properties"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseAutomaticTuningClient("c3aa9078-0000-0000-0000-e36f151182d7", cred, &options)
	res, err := client.Update(ctx,
		"default-sql-onebox",
		"testsvr11",
		"db1",
		armsql.DatabaseAutomaticTuning{
			Properties: &armsql.DatabaseAutomaticTuningProperties{
				DesiredState: to.Ptr(armsql.AutomaticTuningModeAuto),
				Options: map[string]*armsql.AutomaticTuningOptions{
					"createIndex": {
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredOff),
					},
					"dropIndex": {
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredOn),
					},
					"forceLastGoodPlan": {
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAutomaticTuningUpdateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseAutomaticTuning{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/automaticTuning"),
			ID:   to.Ptr("/subscriptions/c3aa9078-0000-0000-0000-e36f151182d7/resourceGroups/default-sql-onebox/providers/Microsoft.Sql/servers/testsvr11/databases/db1/automaticTuning/current"),
			Properties: &armsql.DatabaseAutomaticTuningProperties{
				ActualState:  to.Ptr(armsql.AutomaticTuningModeAuto),
				DesiredState: to.Ptr(armsql.AutomaticTuningModeAuto),
				Options: map[string]*armsql.AutomaticTuningOptions{
					"createIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOff),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredOff),
					},
					"dropIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOn),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredOn),
					},
					"forceLastGoodPlan": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOn),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningDisabledReasonAutoConfigured),
					},
					"maintainIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOff),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningDisabledReasonAutoConfigured),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseAutomaticTuning) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseAutomaticTuning)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAutomaticTuningUpdateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAutomaticTuningUpdateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates database automatic tuning settings with minimal properties"},
	})
	client = armsql.NewDatabaseAutomaticTuningClient("c3aa9078-0000-0000-0000-e36f151182d7", cred, &options)
	res, err = client.Update(ctx,
		"default-sql-onebox",
		"testsvr11",
		"db1",
		armsql.DatabaseAutomaticTuning{
			Properties: &armsql.DatabaseAutomaticTuningProperties{
				DesiredState: to.Ptr(armsql.AutomaticTuningModeAuto),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAutomaticTuningUpdateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseAutomaticTuning{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/automaticTuning"),
			ID:   to.Ptr("/subscriptions/c3aa9078-0000-0000-0000-e36f151182d7/resourceGroups/default-sql-onebox/providers/Microsoft.Sql/servers/testsvr11/databases/db1/automaticTuning/current"),
			Properties: &armsql.DatabaseAutomaticTuningProperties{
				ActualState:  to.Ptr(armsql.AutomaticTuningModeAuto),
				DesiredState: to.Ptr(armsql.AutomaticTuningModeAuto),
				Options: map[string]*armsql.AutomaticTuningOptions{
					"createIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOn),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningDisabledReasonAutoConfigured),
					},
					"dropIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOff),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningDisabledReasonAutoConfigured),
					},
					"forceLastGoodPlan": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOn),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningDisabledReasonAutoConfigured),
					},
					"maintainIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOff),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningDisabledReasonAutoConfigured),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseAutomaticTuning) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseAutomaticTuning)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseAutomaticTuningUpdateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseColumns_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ColumnsListByDatabaseMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Filter database columns"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseColumnsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("myRG",
		"serverName",
		"myDatabase",
		&armsql.DatabaseColumnsClientListByDatabaseOptions{Schema: []string{
			"dbo"},
			Table: []string{
				"customer",
				"address"},
			Column: []string{
				"username"},
			OrderBy: []string{
				"schema asc",
				"table",
				"column desc"},
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ColumnsListByDatabaseMax.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseColumnListResult{
			Value: []*armsql.DatabaseColumn{
				{
					Name: to.Ptr("username"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables/columns"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/dbo/tables/customer/columns/username"),
					Properties: &armsql.DatabaseColumnProperties{
						ColumnType:      to.Ptr(armsql.ColumnDataTypeNvarchar),
						IsComputed:      to.Ptr(false),
						MemoryOptimized: to.Ptr(false),
						TemporalType:    to.Ptr(armsql.TableTemporalTypeNonTemporalTable),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseColumnListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseColumnListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ColumnsListByDatabaseMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ColumnsListByDatabaseMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List database columns"},
	})
	client = armsql.NewDatabaseColumnsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager = client.ListByDatabase("myRG",
		"serverName",
		"myDatabase",
		&armsql.DatabaseColumnsClientListByDatabaseOptions{Schema: []string{},
			Table:     []string{},
			Column:    []string{},
			OrderBy:   []string{},
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ColumnsListByDatabaseMin.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseColumnListResult{
			Value: []*armsql.DatabaseColumn{
				{
					Name: to.Ptr("col1"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables/columns"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/dbo/tables/table1/columns/col1"),
					Properties: &armsql.DatabaseColumnProperties{
						ColumnType:      to.Ptr(armsql.ColumnDataTypeInt),
						IsComputed:      to.Ptr(false),
						MemoryOptimized: to.Ptr(false),
						TemporalType:    to.Ptr(armsql.TableTemporalTypeNonTemporalTable),
					},
				},
				{
					Name: to.Ptr("col2"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables/columns"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/dbo/tables/table1/columns/col2"),
					Properties: &armsql.DatabaseColumnProperties{
						ColumnType:      to.Ptr(armsql.ColumnDataTypeBit),
						IsComputed:      to.Ptr(false),
						MemoryOptimized: to.Ptr(false),
						TemporalType:    to.Ptr(armsql.TableTemporalTypeSystemVersionedTemporalTable),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseColumnListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseColumnListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ColumnsListByDatabaseMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseColumns_ListByTable(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseColumnListByTable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List database columns"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseColumnsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByTable("myRG",
		"serverName",
		"myDatabase",
		"dbo",
		"table1",
		&armsql.DatabaseColumnsClientListByTableOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseColumnListByTable.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseColumnListResult{
			Value: []*armsql.DatabaseColumn{
				{
					Name: to.Ptr("col1"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables/columns"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/dbo/tables/table1/columns/col1"),
					Properties: &armsql.DatabaseColumnProperties{
						ColumnType:      to.Ptr(armsql.ColumnDataTypeNvarchar),
						IsComputed:      to.Ptr(false),
						MemoryOptimized: to.Ptr(false),
						TemporalType:    to.Ptr(armsql.TableTemporalTypeNonTemporalTable),
					},
				},
				{
					Name: to.Ptr("col2"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables/columns"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/dbo/tables/table1/columns/col2"),
					Properties: &armsql.DatabaseColumnProperties{
						ColumnType:      to.Ptr(armsql.ColumnDataTypeBit),
						IsComputed:      to.Ptr(false),
						MemoryOptimized: to.Ptr(false),
						TemporalType:    to.Ptr(armsql.TableTemporalTypeNonTemporalTable),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseColumnListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseColumnListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseColumnListByTable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseColumns_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseColumnGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get database column"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseColumnsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"serverName",
		"myDatabase",
		"dbo",
		"table1",
		"column1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseColumnGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseColumn{
			Name: to.Ptr("column1"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables/columns"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/dbo/tables/table1/columns/column1"),
			Properties: &armsql.DatabaseColumnProperties{
				ColumnType:      to.Ptr(armsql.ColumnDataTypeBit),
				IsComputed:      to.Ptr(false),
				MemoryOptimized: to.Ptr(false),
				TemporalType:    to.Ptr(armsql.TableTemporalTypeSystemVersionedTemporalTable),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseColumn) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseColumn)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseColumnGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseRecommendedActions_ListByDatabaseAdvisor(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRecommendedActionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of database recommended actions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseRecommendedActionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.ListByDatabaseAdvisor(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"IndexAdvisor_test_3",
		"CreateIndex",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRecommendedActionList.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armsql.RecommendedAction{
			{
				Name:     to.Ptr("IR_[CRM]_[DataPoints]_4821CD2F9510D98184BB"),
				Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors/recommendedActions"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/CreateIndex/recommendedActions/IR_[CRM]_[DataPoints]_4821CD2F9510D98184BB"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.RecommendedActionProperties{
					ErrorDetails: &armsql.RecommendedActionErrorInfo{},
					EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
						{
							AbsoluteValue: to.Ptr[float64](1440),
							DimensionName: to.Ptr("ActionDuration"),
							Unit:          to.Ptr("Seconds"),
						},
						{
							AbsoluteValue: to.Ptr[float64](209.3125),
							DimensionName: to.Ptr("SpaceChange"),
							Unit:          to.Ptr("Megabytes"),
						}},
					ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
						Method: to.Ptr(armsql.ImplementationMethodTSQL),
						Script: to.Ptr("CREATE NONCLUSTERED INDEX [nci_wi_DataPoints_B892614093BAC56295EF6018BD4CB51B] ON [CRM].[DataPoints] ([Name],[Money],[Power]) INCLUDE ([Hour], [System], [LastChanged]) WITH (ONLINE = ON)"),
					},
					IsArchivedAction:     to.Ptr(false),
					IsExecutableAction:   to.Ptr(true),
					IsRevertableAction:   to.Ptr(true),
					LastRefresh:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:04Z"); return t }()),
					ObservedImpact:       []*armsql.RecommendedActionImpactRecord{},
					RecommendationReason: to.Ptr(""),
					Score:                to.Ptr[int32](1),
					State: &armsql.RecommendedActionStateInfo{
						CurrentValue: to.Ptr(armsql.RecommendedActionCurrentStateActive),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
					},
					TimeSeries: []*armsql.RecommendedActionMetricInfo{},
					ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:04Z"); return t }()),
					Details: map[string]interface{}{
						"schema":          "[CRM]",
						"includedColumns": "[Hour], [System], [LastChanged]",
						"indexColumns":    "[Name],[Money],[Power]",
						"indexName":       "nci_wi_DataPoints_B892614093BAC56295EF6018BD4CB51B",
						"indexType":       "NONCLUSTERED",
						"table":           "[DataPoints]",
					},
				},
			},
			{
				Name:     to.Ptr("IR_[dbo]_[DataPoints]_F5D2F347AA22DB46E4CC"),
				Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors/recommendedActions"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/CreateIndex/recommendedActions/IR_[dbo]_[DataPoints]_F5D2F347AA22DB46E4CC"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.RecommendedActionProperties{
					ErrorDetails: &armsql.RecommendedActionErrorInfo{},
					EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
						{
							AbsoluteValue: to.Ptr[float64](5040),
							DimensionName: to.Ptr("ActionDuration"),
							Unit:          to.Ptr("Seconds"),
						},
						{
							AbsoluteValue: to.Ptr[float64](120),
							DimensionName: to.Ptr("SpaceChange"),
							Unit:          to.Ptr("Megabytes"),
						}},
					ExecuteActionDuration:      to.Ptr("PT1M"),
					ExecuteActionInitiatedBy:   to.Ptr(armsql.RecommendedActionInitiatedByUser),
					ExecuteActionInitiatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
					ExecuteActionStartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
					ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
						Method: to.Ptr(armsql.ImplementationMethodTSQL),
						Script: to.Ptr("DROP INDEX [nci_wi_DataPoints_609E4B7D6A3813990ED44B28B340C8FC] ON [dbo].[DataPoints]"),
					},
					IsArchivedAction:   to.Ptr(false),
					IsExecutableAction: to.Ptr(true),
					IsRevertableAction: to.Ptr(true),
					LastRefresh:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
					ObservedImpact: []*armsql.RecommendedActionImpactRecord{
						{
							ChangeValueAbsolute: to.Ptr[float64](-12.7),
							ChangeValueRelative: to.Ptr[float64](-0.9),
							DimensionName:       to.Ptr("AffectedQueriesCpuUtilization"),
							Unit:                to.Ptr("CpuCores"),
						},
						{
							ChangeValueAbsolute: to.Ptr[float64](-12.7),
							ChangeValueRelative: to.Ptr[float64](-0.3175),
							DimensionName:       to.Ptr("CpuUtilization"),
							Unit:                to.Ptr("CpuCores"),
						},
						{
							AbsoluteValue: to.Ptr[float64](12),
							DimensionName: to.Ptr("QueriesWithImprovedPerformance"),
							Unit:          to.Ptr("Count"),
						},
						{
							AbsoluteValue: to.Ptr[float64](1),
							DimensionName: to.Ptr("QueriesWithRegressedPerformance"),
							Unit:          to.Ptr("Count"),
						},
						{
							AbsoluteValue: to.Ptr[float64](130.742187),
							DimensionName: to.Ptr("SpaceChange"),
							Unit:          to.Ptr("Megabytes"),
						},
						{
							AbsoluteValue: to.Ptr[float64](0),
							DimensionName: to.Ptr("VerificationProgress"),
							Unit:          to.Ptr("Percent"),
						}},
					RecommendationReason: to.Ptr(""),
					Score:                to.Ptr[int32](3),
					State: &armsql.RecommendedActionStateInfo{
						ActionInitiatedBy: to.Ptr(armsql.RecommendedActionInitiatedByUser),
						CurrentValue:      to.Ptr(armsql.RecommendedActionCurrentStateSuccess),
						LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
					},
					TimeSeries: []*armsql.RecommendedActionMetricInfo{},
					ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
					Details: map[string]interface{}{
						"schema":               "[dbo]",
						"includedColumns":      "[Power],[Pineapple]",
						"indexActionDuration":  "00:01:00",
						"indexActionStartTime": "2017-03-01T14:38:05.337",
						"indexColumns":         "[Name],[Money]",
						"indexName":            "nci_wi_DataPoints_609E4B7D6A3813990ED44B28B340C8FC",
						"indexType":            "NONCLUSTERED",
						"table":                "[DataPoints]",
					},
				},
			},
			{
				Name:     to.Ptr("IR_[dbo]_[Employees]_560E15A98D14CA09BDFB"),
				Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors/recommendedActions"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/CreateIndex/recommendedActions/IR_[dbo]_[Employees]_560E15A98D14CA09BDFB"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.RecommendedActionProperties{
					ErrorDetails: &armsql.RecommendedActionErrorInfo{},
					EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
						{
							AbsoluteValue: to.Ptr[float64](17),
							DimensionName: to.Ptr("ActionDuration"),
							Unit:          to.Ptr("Seconds"),
						},
						{
							AbsoluteValue: to.Ptr[float64](128),
							DimensionName: to.Ptr("SpaceChange"),
							Unit:          to.Ptr("Megabytes"),
						}},
					ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
						Method: to.Ptr(armsql.ImplementationMethodTSQL),
						Script: to.Ptr("CREATE NONCLUSTERED INDEX [nci_wi_Employees_8C18C2AF4267DC77793040782641CCDE] ON [dbo].[Employees] ([City], [State]) INCLUDE ([Postal]) WITH (ONLINE = ON)"),
					},
					IsArchivedAction:     to.Ptr(false),
					IsExecutableAction:   to.Ptr(true),
					IsRevertableAction:   to.Ptr(true),
					LastRefresh:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
					ObservedImpact:       []*armsql.RecommendedActionImpactRecord{},
					RecommendationReason: to.Ptr(""),
					Score:                to.Ptr[int32](3),
					State: &armsql.RecommendedActionStateInfo{
						CurrentValue: to.Ptr(armsql.RecommendedActionCurrentStateActive),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
					},
					TimeSeries: []*armsql.RecommendedActionMetricInfo{},
					ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
					Details: map[string]interface{}{
						"schema":          "[dbo]",
						"includedColumns": "[Postal]",
						"indexColumns":    "[City], [State]",
						"indexName":       "nci_wi_Employees_8C18C2AF4267DC77793040782641CCDE",
						"indexType":       "NONCLUSTERED",
						"table":           "[Employees]",
					},
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.RecommendedActionArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecommendedActionArray)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRecommendedActionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseRecommendedActions_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRecommendedActionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get database recommended action"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseRecommendedActionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"IndexAdvisor_test_3",
		"CreateIndex",
		"IR_[CRM]_[DataPoints]_4821CD2F9510D98184BB",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRecommendedActionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.RecommendedAction{
			Name:     to.Ptr("IR_[CRM]_[DataPoints]_4821CD2F9510D98184BB"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors/recommendedActions"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/CreateIndex/recommendedActions/IR_[CRM]_[DataPoints]_4821CD2F9510D98184BB"),
			Kind:     to.Ptr(""),
			Location: to.Ptr("East Asia"),
			Properties: &armsql.RecommendedActionProperties{
				ErrorDetails: &armsql.RecommendedActionErrorInfo{},
				EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
					{
						AbsoluteValue: to.Ptr[float64](1440),
						DimensionName: to.Ptr("ActionDuration"),
						Unit:          to.Ptr("Seconds"),
					},
					{
						AbsoluteValue: to.Ptr[float64](209.3125),
						DimensionName: to.Ptr("SpaceChange"),
						Unit:          to.Ptr("Megabytes"),
					}},
				ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
					Method: to.Ptr(armsql.ImplementationMethodTSQL),
					Script: to.Ptr("CREATE NONCLUSTERED INDEX [nci_wi_DataPoints_B892614093BAC56295EF6018BD4CB51B] ON [CRM].[DataPoints] ([Name],[Money],[Power]) INCLUDE ([Hour], [System], [LastChanged]) WITH (ONLINE = ON)"),
				},
				IsArchivedAction:     to.Ptr(false),
				IsExecutableAction:   to.Ptr(true),
				IsRevertableAction:   to.Ptr(true),
				LastRefresh:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:04Z"); return t }()),
				ObservedImpact:       []*armsql.RecommendedActionImpactRecord{},
				RecommendationReason: to.Ptr(""),
				Score:                to.Ptr[int32](1),
				State: &armsql.RecommendedActionStateInfo{
					CurrentValue: to.Ptr(armsql.RecommendedActionCurrentStateActive),
					LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
				},
				TimeSeries: []*armsql.RecommendedActionMetricInfo{},
				ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:04Z"); return t }()),
				Details: map[string]interface{}{
					"schema":          "[CRM]",
					"includedColumns": "[Hour], [System], [LastChanged]",
					"indexColumns":    "[Name],[Money],[Power]",
					"indexName":       "nci_wi_DataPoints_B892614093BAC56295EF6018BD4CB51B",
					"indexType":       "NONCLUSTERED",
					"table":           "[DataPoints]",
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecommendedAction) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecommendedAction)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRecommendedActionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseRecommendedActions_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRecommendedActionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update database recommended action"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseRecommendedActionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Update(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"IndexAdvisor_test_3",
		"CreateIndex",
		"IR_[CRM]_[DataPoints]_4821CD2F9510D98184BB",
		armsql.RecommendedAction{
			Properties: &armsql.RecommendedActionProperties{
				State: &armsql.RecommendedActionStateInfo{
					CurrentValue: to.Ptr(armsql.RecommendedActionCurrentStatePending),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRecommendedActionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.RecommendedAction{
			Name:     to.Ptr("IR_[CRM]_[DataPoints]_4821CD2F9510D98184BB"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases/advisors/recommendedActions"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/databases/IndexAdvisor_test_3/advisors/CreateIndex/recommendedActions/IR_[CRM]_[DataPoints]_4821CD2F9510D98184BB"),
			Kind:     to.Ptr(""),
			Location: to.Ptr("East Asia"),
			Properties: &armsql.RecommendedActionProperties{
				ErrorDetails: &armsql.RecommendedActionErrorInfo{},
				EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
					{
						AbsoluteValue: to.Ptr[float64](1440),
						DimensionName: to.Ptr("ActionDuration"),
						Unit:          to.Ptr("Seconds"),
					},
					{
						AbsoluteValue: to.Ptr[float64](209.3125),
						DimensionName: to.Ptr("SpaceChange"),
						Unit:          to.Ptr("Megabytes"),
					}},
				ExecuteActionInitiatedBy:   to.Ptr(armsql.RecommendedActionInitiatedByUser),
				ExecuteActionInitiatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-20T15:11:15Z"); return t }()),
				ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
					Method: to.Ptr(armsql.ImplementationMethodTSQL),
					Script: to.Ptr("CREATE NONCLUSTERED INDEX [nci_wi_DataPoints_B892614093BAC56295EF6018BD4CB51B] ON [CRM].[DataPoints] ([Name],[Money],[Power]) INCLUDE ([Hour], [System], [LastChanged]) WITH (ONLINE = ON)"),
				},
				IsArchivedAction:     to.Ptr(false),
				IsExecutableAction:   to.Ptr(true),
				IsRevertableAction:   to.Ptr(true),
				LastRefresh:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:04Z"); return t }()),
				ObservedImpact:       []*armsql.RecommendedActionImpactRecord{},
				RecommendationReason: to.Ptr(""),
				Score:                to.Ptr[int32](1),
				State: &armsql.RecommendedActionStateInfo{
					ActionInitiatedBy: to.Ptr(armsql.RecommendedActionInitiatedByUser),
					CurrentValue:      to.Ptr(armsql.RecommendedActionCurrentStatePending),
					LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-20T15:11:15Z"); return t }()),
				},
				TimeSeries: []*armsql.RecommendedActionMetricInfo{},
				ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:04Z"); return t }()),
				Details: map[string]interface{}{
					"schema":          "[CRM]",
					"includedColumns": "[Hour], [System], [LastChanged]",
					"indexColumns":    "[Name],[Money],[Power]",
					"indexName":       "nci_wi_DataPoints_B892614093BAC56295EF6018BD4CB51B",
					"indexType":       "NONCLUSTERED",
					"table":           "[DataPoints]",
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecommendedAction) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecommendedAction)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRecommendedActionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseSchemas_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSchemaListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List database schemas"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseSchemasClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("myRG",
		"serverName",
		"myDatabase",
		&armsql.DatabaseSchemasClientListByDatabaseOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSchemaListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseSchemaListResult{
			Value: []*armsql.DatabaseSchema{
				{
					Name: to.Ptr("dbo"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/schemas"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/dbo"),
				},
				{
					Name: to.Ptr("schema2"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/schemas"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/schema2"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseSchemaListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseSchemaListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSchemaListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseSchemas_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSchemaGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get database schema"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseSchemasClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"serverName",
		"myDatabase",
		"dbo",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSchemaGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseSchema{
			Name: to.Ptr("dbo"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/schemas"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/dbo"),
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseSchema) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseSchema)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSchemaGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseSecurityAlertPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSecurityAlertGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a database's threat detection policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"securityalert-6852",
		"securityalert-2080",
		"testdb",
		armsql.SecurityAlertPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSecurityAlertGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-6852/providers/Microsoft.Sql/servers/securityalert-2080/databases/testdb"),
			Properties: &armsql.SecurityAlertsPolicyProperties{
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				DisabledAlerts: []*string{
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("test@consoto.com"),
					to.Ptr("user@consoto.com")},
				RetentionDays:           to.Ptr[int32](0),
				State:                   to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
			},
			SystemData: &armsql.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armsql.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armsql.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSecurityAlertGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseSecurityAlertPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSecurityAlertCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a database's threat detection policy with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		"testdb",
		armsql.SecurityAlertPolicyNameDefault,
		armsql.DatabaseSecurityAlertPolicy{
			Properties: &armsql.SecurityAlertsPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Sql_Injection"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("test@microsoft.com"),
					to.Ptr("user@microsoft.com")},
				RetentionDays:           to.Ptr[int32](6),
				State:                   to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSecurityAlertCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/servers/securityalert-6440/databases/testdb"),
			Properties: &armsql.SecurityAlertsPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Sql_Injection"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("test@microsoft.com"),
					to.Ptr("user@microsoft.com")},
				RetentionDays:           to.Ptr[int32](6),
				State:                   to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
			SystemData: &armsql.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armsql.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armsql.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSecurityAlertCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSecurityAlertCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a database's threat detection policy with minimal parameters"},
	})
	client = armsql.NewDatabaseSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		"testdb",
		armsql.SecurityAlertPolicyNameDefault,
		armsql.DatabaseSecurityAlertPolicy{
			Properties: &armsql.SecurityAlertsPolicyProperties{
				State: to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSecurityAlertCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/servers/securityalert-6440/databases/testdb"),
			Properties: &armsql.SecurityAlertsPolicyProperties{
				DisabledAlerts:          []*string{},
				EmailAccountAdmins:      to.Ptr(true),
				EmailAddresses:          []*string{},
				RetentionDays:           to.Ptr[int32](0),
				State:                   to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr(""),
			},
			SystemData: &armsql.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armsql.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armsql.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSecurityAlertCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseSecurityAlertPolicies_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSecurityAlertListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the database's threat detection policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("securityalert-6852",
		"securityalert-2080",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSecurityAlertListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseSecurityAlertListResult{
			Value: []*armsql.DatabaseSecurityAlertPolicy{
				{
					Name: to.Ptr("Default"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/securityAlertPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-6852/providers/Microsoft.Sql/servers/securityalert-2080/databases/testdb"),
					Properties: &armsql.SecurityAlertsPolicyProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
						DisabledAlerts: []*string{
							to.Ptr("Usage_Anomaly")},
						EmailAccountAdmins: to.Ptr(true),
						EmailAddresses: []*string{
							to.Ptr("test@consoto.com"),
							to.Ptr("user@consoto.com")},
						RetentionDays:           to.Ptr[int32](0),
						State:                   to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
						StorageAccountAccessKey: to.Ptr(""),
						StorageEndpoint:         to.Ptr(""),
					},
					SystemData: &armsql.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsql.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsql.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseSecurityAlertListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseSecurityAlertListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseSecurityAlertListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseTables_ListBySchema(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseTableListBySchema.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List  database tables"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseTablesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListBySchema("myRG",
		"serverName",
		"myDatabase",
		"dbo",
		&armsql.DatabaseTablesClientListBySchemaOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseTableListBySchema.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseTableListResult{
			Value: []*armsql.DatabaseTable{
				{
					Name: to.Ptr("table1"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/dbo/tables/table1"),
				},
				{
					Name: to.Ptr("table2"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/dbo/tables/table2"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseTableListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseTableListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseTableListBySchema.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseTables_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseTableGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get database table"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseTablesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"serverName",
		"myDatabase",
		"dbo",
		"table1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseTableGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseTable{
			Name: to.Ptr("table1"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/dbo/tables/table1"),
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseTable) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseTable)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseTableGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseVulnerabilityAssessmentRuleBaselines_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentRuleBaselineGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a database's vulnerability assessment rule baseline."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseVulnerabilityAssessmentRuleBaselinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4711",
		"vulnerabilityaseessmenttest-6411",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		"VA1001",
		armsql.VulnerabilityAssessmentPolicyBaselineNameMaster,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentRuleBaselineGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseVulnerabilityAssessmentRuleBaseline{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments/rules/baselines"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440/databases/testdb/vulnerabilityAssessments/default/rules/VA1001/baselines/default"),
			Properties: &armsql.DatabaseVulnerabilityAssessmentRuleBaselineProperties{
				BaselineResults: []*armsql.DatabaseVulnerabilityAssessmentRuleBaselineItem{
					{
						Result: []*string{
							to.Ptr("userA"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userB"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userC"),
							to.Ptr("SELECT"),
							to.Ptr("tableId_4")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseVulnerabilityAssessmentRuleBaseline) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseVulnerabilityAssessmentRuleBaseline)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentRuleBaselineGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseVulnerabilityAssessmentRuleBaselines_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentRuleBaselineCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a database's vulnerability assessment rule baseline."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseVulnerabilityAssessmentRuleBaselinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		"VA1001",
		armsql.VulnerabilityAssessmentPolicyBaselineNameDefault,
		armsql.DatabaseVulnerabilityAssessmentRuleBaseline{
			Properties: &armsql.DatabaseVulnerabilityAssessmentRuleBaselineProperties{
				BaselineResults: []*armsql.DatabaseVulnerabilityAssessmentRuleBaselineItem{
					{
						Result: []*string{
							to.Ptr("userA"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userB"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userC"),
							to.Ptr("SELECT"),
							to.Ptr("tableId_4")},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentRuleBaselineCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseVulnerabilityAssessmentRuleBaseline{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments/rules/baselines"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440/databases/testdb/vulnerabilityAssessments/default/rules/VA1001/baselines/default"),
			Properties: &armsql.DatabaseVulnerabilityAssessmentRuleBaselineProperties{
				BaselineResults: []*armsql.DatabaseVulnerabilityAssessmentRuleBaselineItem{
					{
						Result: []*string{
							to.Ptr("userA"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userB"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userC"),
							to.Ptr("SELECT"),
							to.Ptr("tableId_4")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseVulnerabilityAssessmentRuleBaseline) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseVulnerabilityAssessmentRuleBaseline)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentRuleBaselineCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseVulnerabilityAssessmentRuleBaselines_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentRuleBaselineDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Removes a database's vulnerability assessment rule baseline."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseVulnerabilityAssessmentRuleBaselinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		"VA1001",
		armsql.VulnerabilityAssessmentPolicyBaselineNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentRuleBaselineDelete.json: %v", err)
	}
}

func TestDatabaseVulnerabilityAssessments_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a database's vulnerability assessment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440/databases/testdb/vulnerabilityAssessments/default"),
			Properties: &armsql.DatabaseVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseVulnerabilityAssessments_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a database's vulnerability assessment with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		armsql.DatabaseVulnerabilityAssessment{
			Properties: &armsql.DatabaseVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
				StorageAccountAccessKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey:  to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440/databases/testdb/vulnerabilityAssessments/default"),
			Properties: &armsql.DatabaseVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentCreateStorageAccessKeyMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a database's vulnerability assessment with minimal parameters, when storageAccountAccessKey is specified"},
	})
	client = armsql.NewDatabaseVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		armsql.DatabaseVulnerabilityAssessment{
			Properties: &armsql.DatabaseVulnerabilityAssessmentProperties{
				StorageAccountAccessKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentCreateStorageAccessKeyMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440/databases/testdb/vulnerabilityAssessments/default"),
			Properties: &armsql.DatabaseVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(false),
					Emails:                  []*string{},
					IsEnabled:               to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentCreateStorageAccessKeyMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentCreateContainerSasKeyMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a database's vulnerability assessment with minimal parameters, when storageContainerSasKey is specified"},
	})
	client = armsql.NewDatabaseVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		armsql.DatabaseVulnerabilityAssessment{
			Properties: &armsql.DatabaseVulnerabilityAssessmentProperties{
				StorageContainerPath:   to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentCreateContainerSasKeyMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440/databases/testdb/vulnerabilityAssessments/default"),
			Properties: &armsql.DatabaseVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(false),
					Emails:                  []*string{},
					IsEnabled:               to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentCreateContainerSasKeyMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseVulnerabilityAssessments_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Remove a database's vulnerability assessment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentDelete.json: %v", err)
	}
}

func TestDatabaseVulnerabilityAssessments_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the database's vulnerability assessment policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseVulnerabilityAssessmentListResult{
			Value: []*armsql.DatabaseVulnerabilityAssessment{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440/databases/testdb/vulnerabilityAssessments/default"),
					Properties: &armsql.DatabaseVulnerabilityAssessmentProperties{
						RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
							EmailSubscriptionAdmins: to.Ptr(true),
							Emails: []*string{
								to.Ptr("email1@mail.com"),
								to.Ptr("email2@mail.com")},
							IsEnabled: to.Ptr(true),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseVulnerabilityAssessmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseVulnerabilityAssessmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseVulnerabilityAssessmentScans_InitiateScan(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentScansExecute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Executes a database's vulnerability assessment scan."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseVulnerabilityAssessmentScansClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginInitiateScan(ctx,
		"vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		"scan01",
		&armsql.DatabaseVulnerabilityAssessmentScansClientBeginInitiateScanOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentScansExecute.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentScansExecute.json: %v", err)
	}
}

func TestDatabaseVulnerabilityAssessmentScans_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentScanRecordsListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of a database vulnerability assessment scan records"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseVulnerabilityAssessmentScansClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentScanRecordsListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.VulnerabilityAssessmentScanRecordListResult{
			Value: []*armsql.VulnerabilityAssessmentScanRecord{
				{
					Name: to.Ptr("scan001"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments/scans"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityassessmenttest-6440/databases/testdb/vulnerabilityAssessments/default/scans/scan001"),
					Properties: &armsql.VulnerabilityAssessmentScanRecordProperties{
						EndTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:47:06Z"); return t }()),
						Errors:                       []*armsql.VulnerabilityAssessmentScanError{},
						NumberOfFailedSecurityChecks: to.Ptr[int32](9),
						ScanID:                       to.Ptr("scan001"),
						StartTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:45:06Z"); return t }()),
						State:                        to.Ptr(armsql.VulnerabilityAssessmentScanStatePassed),
						StorageContainerPath:         to.Ptr("https://myaccount.blob.core.windows.net/vulnerability-assessment"),
						TriggerType:                  to.Ptr(armsql.VulnerabilityAssessmentScanTriggerTypeOnDemand),
					},
				},
				{
					Name: to.Ptr("scan002"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments/scans"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityassessmenttest-6440/databases/testdb/vulnerabilityAssessments/default/scans/scan002"),
					Properties: &armsql.VulnerabilityAssessmentScanRecordProperties{
						EndTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:47:06Z"); return t }()),
						Errors:                       []*armsql.VulnerabilityAssessmentScanError{},
						NumberOfFailedSecurityChecks: to.Ptr[int32](9),
						ScanID:                       to.Ptr("scan002"),
						StartTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:45:06Z"); return t }()),
						State:                        to.Ptr(armsql.VulnerabilityAssessmentScanStateFailed),
						StorageContainerPath:         to.Ptr("https://myaccount.blob.core.windows.net/vulnerability-assessment"),
						TriggerType:                  to.Ptr(armsql.VulnerabilityAssessmentScanTriggerTypeRecurring),
					},
				},
				{
					Name: to.Ptr("scan003"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments/scans"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityassessmenttest-6440/databases/testdb/vulnerabilityAssessments/default/scans/scan003"),
					Properties: &armsql.VulnerabilityAssessmentScanRecordProperties{
						EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:47:06Z"); return t }()),
						Errors: []*armsql.VulnerabilityAssessmentScanError{
							{
								Code:    to.Ptr("StorageNotFound"),
								Message: to.Ptr("Storage not found"),
							}},
						NumberOfFailedSecurityChecks: to.Ptr[int32](0),
						ScanID:                       to.Ptr("scan003"),
						StartTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:45:06Z"); return t }()),
						State:                        to.Ptr(armsql.VulnerabilityAssessmentScanStateFailedToRun),
						StorageContainerPath:         to.Ptr("https://myaccount.blob.core.windows.net/vulnerability-assessment"),
						TriggerType:                  to.Ptr(armsql.VulnerabilityAssessmentScanTriggerTypeRecurring),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VulnerabilityAssessmentScanRecordListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VulnerabilityAssessmentScanRecordListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentScanRecordsListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseVulnerabilityAssessmentScans_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentScanRecordsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a database vulnerability assessment scan record by scan ID"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseVulnerabilityAssessmentScansClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		"scan001",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentScanRecordsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.VulnerabilityAssessmentScanRecord{
			Name: to.Ptr("scan001"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments/scans"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityassessmenttest-6440/databases/testdb/vulnerabilityAssessments/default/scans/scan001"),
			Properties: &armsql.VulnerabilityAssessmentScanRecordProperties{
				EndTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:47:06Z"); return t }()),
				Errors:                       []*armsql.VulnerabilityAssessmentScanError{},
				NumberOfFailedSecurityChecks: to.Ptr[int32](9),
				ScanID:                       to.Ptr("scan001"),
				StartTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:45:06Z"); return t }()),
				State:                        to.Ptr(armsql.VulnerabilityAssessmentScanStatePassed),
				StorageContainerPath:         to.Ptr("https://myaccount.blob.core.windows.net/vulnerability-assessment"),
				TriggerType:                  to.Ptr(armsql.VulnerabilityAssessmentScanTriggerTypeOnDemand),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VulnerabilityAssessmentScanRecord) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VulnerabilityAssessmentScanRecord)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentScanRecordsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseVulnerabilityAssessmentScans_Export(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentScanExport.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export a database's vulnerability assessment scan results."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseVulnerabilityAssessmentScansClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Export(ctx,
		"vulnerabilityassessmenttest-4799",
		"vulnerabilityassessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		"scan001",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentScanExport.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseVulnerabilityAssessmentScansExport{
			Name: to.Ptr("scan001"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments/scans/export"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityassessmenttest-6440/databases/testdb/vulnerabilityAssessments/default/scans/scan001/export"),
			Properties: &armsql.DatabaseVulnerabilityAssessmentScanExportProperties{
				ExportedReportLocation: to.Ptr("https://myaccount.blob.core.windows.net/vulnerabilityAssessment/vulnerabilityassessmenttest-6440/testdb/scan001.xlsx"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseVulnerabilityAssessmentScansExport) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseVulnerabilityAssessmentScansExport)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentScanExport.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataWarehouseUserActivities_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetDataWarehouseUserActivities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the list of the user activities of a data warehouse"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDataWarehouseUserActivitiesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.DataWarehouseUserActivityNameCurrent,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetDataWarehouseUserActivities.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DataWarehouseUserActivities{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/dataWarehouseUserActivities"),
			ID:   to.Ptr("subscriptions/326affc3-21f4-4471-a545-e37430b70113/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/testsvr/databases/dwdb01/dataWarehouseUserActivities/current"),
			Properties: &armsql.DataWarehouseUserActivitiesProperties{
				ActiveQueriesCount: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataWarehouseUserActivities) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataWarehouseUserActivities)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetDataWarehouseUserActivities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataWarehouseUserActivities_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListDataWarehouseUserActivities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of the user activities of a data warehouse"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDataWarehouseUserActivitiesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListDataWarehouseUserActivities.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DataWarehouseUserActivitiesListResult{
			Value: []*armsql.DataWarehouseUserActivities{
				{
					Type: to.Ptr("Microsoft.Sql/servers/databases/dataWarehouseUserActivities"),
					ID:   to.Ptr("subscriptions/326affc3-21f4-4471-a545-e37430b70113/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/testsvr/databases/dwdb01/dataWarehouseUserActivities/current"),
					Properties: &armsql.DataWarehouseUserActivitiesProperties{
						ActiveQueriesCount: to.Ptr[int32](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataWarehouseUserActivitiesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataWarehouseUserActivitiesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListDataWarehouseUserActivities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeletedServers_List(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeletedServerListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List deleted servers in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDeletedServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeletedServerListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DeletedServerListResult{
			Value: []*armsql.DeletedServer{
				{
					Name: to.Ptr("sqlcrudtest-d-1414"),
					Type: to.Ptr("Microsoft.Sql/deletedServers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/deletedServers/sqlcrudtest-d-1414"),
					Properties: &armsql.DeletedServerProperties{
						DeletionTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-15T20:20:00.345Z"); return t }()),
						FullyQualifiedDomainName: to.Ptr("sqlcrudtest-d-1414.database.windows.net"),
						OriginalID:               to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/sqlcrudtest-d-1414"),
						Version:                  to.Ptr("12.0"),
					},
				},
				{
					Name: to.Ptr("sqlcrudtest-d-2424"),
					Type: to.Ptr("Microsoft.Sql/deletedServers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/deletedServers/sqlcrudtest-d-2424"),
					Properties: &armsql.DeletedServerProperties{
						DeletionTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-13T10:10:00.678Z"); return t }()),
						FullyQualifiedDomainName: to.Ptr("sqlcrudtest-d-2424.database.windows.net"),
						OriginalID:               to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/sqlcrudtest-d-2424"),
						Version:                  to.Ptr("12.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeletedServerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeletedServerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeletedServerListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeletedServers_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeletedServerGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get deleted server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDeletedServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"japaneast",
		"sqlcrudtest-d-1414",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeletedServerGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DeletedServer{
			Name: to.Ptr("sqlcrudtest-d-1414"),
			Type: to.Ptr("Microsoft.Sql/deletedServers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/deletedServers/sqlcrudtest-d-1414"),
			Properties: &armsql.DeletedServerProperties{
				DeletionTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-15T11:20:00.345Z"); return t }()),
				FullyQualifiedDomainName: to.Ptr("sqlcrudtest-d-1414.database.windows.net"),
				OriginalID:               to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/sqlcrudtest-d-1414"),
				Version:                  to.Ptr("12.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeletedServer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeletedServer)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeletedServerGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeletedServers_ListByLocation(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeletedServerList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List deleted servers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDeletedServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByLocation("japaneast",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeletedServerList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DeletedServerListResult{
			Value: []*armsql.DeletedServer{
				{
					Name: to.Ptr("sqlcrudtest-d-1414"),
					Type: to.Ptr("Microsoft.Sql/deletedServers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/deletedServers/sqlcrudtest-d-1414"),
					Properties: &armsql.DeletedServerProperties{
						DeletionTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-15T20:20:00.345Z"); return t }()),
						FullyQualifiedDomainName: to.Ptr("sqlcrudtest-d-1414.database.windows.net"),
						OriginalID:               to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/sqlcrudtest-d-1414"),
						Version:                  to.Ptr("12.0"),
					},
				},
				{
					Name: to.Ptr("sqlcrudtest-d-2424"),
					Type: to.Ptr("Microsoft.Sql/deletedServers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/deletedServers/sqlcrudtest-d-2424"),
					Properties: &armsql.DeletedServerProperties{
						DeletionTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-13T10:10:00.678Z"); return t }()),
						FullyQualifiedDomainName: to.Ptr("sqlcrudtest-d-2424.database.windows.net"),
						OriginalID:               to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/sqlcrudtest-d-2424"),
						Version:                  to.Ptr("12.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeletedServerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeletedServerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeletedServerList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeletedServers_Recover(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeletedServerRecover.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Recover deleted server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDeletedServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginRecover(ctx,
		"japaneast",
		"sqlcrudtest-d-1414",
		&armsql.DeletedServersClientBeginRecoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeletedServerRecover.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeletedServerRecover.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DeletedServer{
			Name: to.Ptr("sqlcrudtest-d-1414"),
			Type: to.Ptr("Microsoft.Sql/deletedServers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/deletedServers/sqlcrudtest-d-1414"),
			Properties: &armsql.DeletedServerProperties{
				DeletionTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-15T11:20:00.345Z"); return t }()),
				FullyQualifiedDomainName: to.Ptr("sqlcrudtest-d-1414.database.windows.net"),
				OriginalID:               to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/sqlcrudtest-d-1414"),
				Version:                  to.Ptr("12.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeletedServer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeletedServer)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeletedServerRecover.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestElasticPoolOperations_Cancel(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CancelElasticPoolOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cancel the elastic pool management operation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewElasticPoolOperationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Cancel(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-6661",
		"testpool",
		"f779414b-e748-4925-8cfe-c8598f7660ae",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CancelElasticPoolOperation.json: %v", err)
	}
}

func TestElasticPoolOperations_ListByElasticPool(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListElasticPoolOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the elastic pool management operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewElasticPoolOperationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByElasticPool("sqlcrudtestgroup",
		"sqlcrudtestserver",
		"testpool",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListElasticPoolOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ElasticPoolOperationListResult{
			Value: []*armsql.ElasticPoolOperation{
				{
					Name: to.Ptr("11111111-1111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.Sql/servers/elasticPools/operations"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtestgroup/providers/Microsoft.Sql/servers/sqlcrudtestserver/elasticPools/testpool/operations/11111111-1111-1111-1111-111111111111"),
					Properties: &armsql.ElasticPoolOperationProperties{
						ElasticPoolName:       to.Ptr("testpool"),
						Operation:             to.Ptr("UPDATE"),
						OperationFriendlyName: to.Ptr("UPDATE"),
						PercentComplete:       to.Ptr[int32](100),
						ServerName:            to.Ptr("sqlcrudtestserver"),
						StartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-30T09:10:08.1Z"); return t }()),
						State:                 to.Ptr("COMPLETED"),
					},
				},
				{
					Name: to.Ptr("55555555-5555-5555-5555-555555555555"),
					Type: to.Ptr("Microsoft.Sql/servers/elasticPools/operations"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtestgroup/providers/Microsoft.Sql/servers/sqlcrudtestserver/elasticPools/testpool/operations/55555555-5555-5555-5555-555555555555"),
					Properties: &armsql.ElasticPoolOperationProperties{
						ElasticPoolName:       to.Ptr("testpool"),
						Operation:             to.Ptr("UPDATE"),
						OperationFriendlyName: to.Ptr("UPDATE"),
						PercentComplete:       to.Ptr[int32](0),
						ServerName:            to.Ptr("sqlcrudtestserver"),
						StartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-30T10:10:08.1Z"); return t }()),
						State:                 to.Ptr("IN_PROGRESS"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ElasticPoolOperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ElasticPoolOperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListElasticPoolOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEncryptionProtectors_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List encryption protectors by server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewEncryptionProtectorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.EncryptionProtectorListResult{
			Value: []*armsql.EncryptionProtector{
				{
					Name:     to.Ptr("current"),
					Type:     to.Ptr("Microsoft.Sql/servers/encryptionProtector"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/encryptionProtector/current"),
					Kind:     to.Ptr("azurekeyvault"),
					Location: to.Ptr("Japan East"),
					Properties: &armsql.EncryptionProtectorProperties{
						ServerKeyName: to.Ptr("someVault_someKey_01234567890123456789012345678901"),
						ServerKeyType: to.Ptr(armsql.ServerKeyTypeAzureKeyVault),
						URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EncryptionProtectorListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EncryptionProtectorListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEncryptionProtectors_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the encryption protector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewEncryptionProtectorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		armsql.EncryptionProtectorNameCurrent,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.EncryptionProtector{
			Name:     to.Ptr("current"),
			Type:     to.Ptr("Microsoft.Sql/servers/encryptionProtector"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/encryptionProtector/current"),
			Kind:     to.Ptr("azurekeyvault"),
			Location: to.Ptr("Japan East"),
			Properties: &armsql.EncryptionProtectorProperties{
				AutoRotationEnabled: to.Ptr(false),
				ServerKeyName:       to.Ptr("someVault_someKey_01234567890123456789012345678901"),
				ServerKeyType:       to.Ptr(armsql.ServerKeyTypeAzureKeyVault),
				URI:                 to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EncryptionProtector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EncryptionProtector)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEncryptionProtectors_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorCreateOrUpdateKeyVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the encryption protector to key vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewEncryptionProtectorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		armsql.EncryptionProtectorNameCurrent,
		armsql.EncryptionProtector{
			Properties: &armsql.EncryptionProtectorProperties{
				AutoRotationEnabled: to.Ptr(false),
				ServerKeyName:       to.Ptr("someVault_someKey_01234567890123456789012345678901"),
				ServerKeyType:       to.Ptr(armsql.ServerKeyTypeAzureKeyVault),
			},
		},
		&armsql.EncryptionProtectorsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorCreateOrUpdateKeyVault.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorCreateOrUpdateKeyVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.EncryptionProtector{
			Name:     to.Ptr("current"),
			Type:     to.Ptr("Microsoft.Sql/servers/encryptionProtector"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/encryptionProtector/current"),
			Kind:     to.Ptr("azurekeyvault"),
			Location: to.Ptr("West US"),
			Properties: &armsql.EncryptionProtectorProperties{
				AutoRotationEnabled: to.Ptr(false),
				ServerKeyName:       to.Ptr("someVault_someKey_01234567890123456789012345678901"),
				ServerKeyType:       to.Ptr(armsql.ServerKeyTypeAzureKeyVault),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EncryptionProtector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EncryptionProtector)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorCreateOrUpdateKeyVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorCreateOrUpdateServiceManaged.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the encryption protector to service managed"},
	})
	client = armsql.NewEncryptionProtectorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		armsql.EncryptionProtectorNameCurrent,
		armsql.EncryptionProtector{
			Properties: &armsql.EncryptionProtectorProperties{
				ServerKeyName: to.Ptr("ServiceManaged"),
				ServerKeyType: to.Ptr(armsql.ServerKeyTypeServiceManaged),
			},
		},
		&armsql.EncryptionProtectorsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorCreateOrUpdateServiceManaged.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorCreateOrUpdateServiceManaged.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.EncryptionProtector{
			Name:     to.Ptr("current"),
			Type:     to.Ptr("Microsoft.Sql/servers/encryptionProtector"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/encryptionProtector/current"),
			Kind:     to.Ptr("servicemanaged"),
			Location: to.Ptr("West US"),
			Properties: &armsql.EncryptionProtectorProperties{
				ServerKeyName: to.Ptr("ServiceManaged"),
				ServerKeyType: to.Ptr(armsql.ServerKeyTypeServiceManaged),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EncryptionProtector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EncryptionProtector)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorCreateOrUpdateServiceManaged.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEncryptionProtectors_Revalidate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorRevalidate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Revalidates the encryption protector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewEncryptionProtectorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginRevalidate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		armsql.EncryptionProtectorNameCurrent,
		&armsql.EncryptionProtectorsClientBeginRevalidateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorRevalidate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/EncryptionProtectorRevalidate.json: %v", err)
	}
}

func TestFailoverGroups_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get failover group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewFailoverGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default",
		"failover-group-primary-server",
		"failover-group-test",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.FailoverGroup{
			Name:     to.Ptr("failover-group-test"),
			Type:     to.Ptr("Microsoft.Sql/servers/failoverGroups"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server/failoverGroups/failover-group-test"),
			Location: to.Ptr("Japan East"),
			Properties: &armsql.FailoverGroupProperties{
				Databases: []*string{},
				PartnerServers: []*armsql.PartnerInfo{
					{
						ID:              to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-secondary-server"),
						Location:        to.Ptr("Japan West"),
						ReplicationRole: to.Ptr(armsql.FailoverGroupReplicationRoleSecondary),
					}},
				ReadOnlyEndpoint: &armsql.FailoverGroupReadOnlyEndpoint{
					FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
				},
				ReadWriteEndpoint: &armsql.FailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
					FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](480),
				},
				ReplicationRole:  to.Ptr(armsql.FailoverGroupReplicationRolePrimary),
				ReplicationState: to.Ptr("CATCH_UP"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FailoverGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FailoverGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFailoverGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create failover group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewFailoverGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"failover-group-primary-server",
		"failover-group-test-3",
		armsql.FailoverGroup{
			Properties: &armsql.FailoverGroupProperties{
				Databases: []*string{
					to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server/databases/testdb-1"),
					to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server/databases/testdb-2")},
				PartnerServers: []*armsql.PartnerInfo{
					{
						ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-secondary-server"),
					}},
				ReadOnlyEndpoint: &armsql.FailoverGroupReadOnlyEndpoint{
					FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
				},
				ReadWriteEndpoint: &armsql.FailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
					FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](480),
				},
			},
		},
		&armsql.FailoverGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.FailoverGroup{
			Name:     to.Ptr("failover-group-test-3"),
			Type:     to.Ptr("Microsoft.Sql/servers/failoverGroups"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server/failoverGroups/failover-group-test-3"),
			Location: to.Ptr("Japan East"),
			Properties: &armsql.FailoverGroupProperties{
				Databases: []*string{
					to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server/databases/testdb-1"),
					to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server/databases/testdb-2")},
				PartnerServers: []*armsql.PartnerInfo{
					{
						ID:              to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-secondary-server"),
						Location:        to.Ptr("Japan West"),
						ReplicationRole: to.Ptr(armsql.FailoverGroupReplicationRoleSecondary),
					}},
				ReadOnlyEndpoint: &armsql.FailoverGroupReadOnlyEndpoint{
					FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
				},
				ReadWriteEndpoint: &armsql.FailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
					FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](480),
				},
				ReplicationRole:  to.Ptr(armsql.FailoverGroupReplicationRolePrimary),
				ReplicationState: to.Ptr("CATCH_UP"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FailoverGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FailoverGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFailoverGroups_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete failover group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewFailoverGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default",
		"failover-group-primary-server",
		"failover-group-test-1",
		&armsql.FailoverGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupDelete.json: %v", err)
	}
}

func TestFailoverGroups_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update failover group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewFailoverGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"Default",
		"failover-group-primary-server",
		"failover-group-test-1",
		armsql.FailoverGroupUpdate{
			Properties: &armsql.FailoverGroupUpdateProperties{
				Databases: []*string{
					to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server/databases/testdb-1")},
				ReadWriteEndpoint: &armsql.FailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
					FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](120),
				},
			},
		},
		&armsql.FailoverGroupsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.FailoverGroup{
			Name:     to.Ptr("failover-group-test-3"),
			Type:     to.Ptr("Microsoft.Sql/servers/failoverGroups"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server/failoverGroups/failover-group-test-3"),
			Location: to.Ptr("Japan East"),
			Properties: &armsql.FailoverGroupProperties{
				Databases: []*string{
					to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server/databases/testdb-1")},
				PartnerServers: []*armsql.PartnerInfo{
					{
						ID:              to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-secondary-server"),
						Location:        to.Ptr("Japan West"),
						ReplicationRole: to.Ptr(armsql.FailoverGroupReplicationRoleSecondary),
					}},
				ReadOnlyEndpoint: &armsql.FailoverGroupReadOnlyEndpoint{
					FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
				},
				ReadWriteEndpoint: &armsql.FailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
					FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](120),
				},
				ReplicationRole:  to.Ptr(armsql.FailoverGroupReplicationRolePrimary),
				ReplicationState: to.Ptr("CATCH_UP"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FailoverGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FailoverGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFailoverGroups_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List failover group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewFailoverGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("Default",
		"failover-group-primary-server",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.FailoverGroupListResult{
			Value: []*armsql.FailoverGroup{
				{
					Name:     to.Ptr("failover-group-test"),
					Type:     to.Ptr("Microsoft.Sql/servers/failoverGroups"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server/failoverGroups/failover-group-test"),
					Location: to.Ptr("Japan East"),
					Properties: &armsql.FailoverGroupProperties{
						Databases: []*string{},
						PartnerServers: []*armsql.PartnerInfo{
							{
								ID:              to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-secondary-server"),
								Location:        to.Ptr("Japan West"),
								ReplicationRole: to.Ptr(armsql.FailoverGroupReplicationRoleSecondary),
							}},
						ReadOnlyEndpoint: &armsql.FailoverGroupReadOnlyEndpoint{
							FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
						},
						ReadWriteEndpoint: &armsql.FailoverGroupReadWriteEndpoint{
							FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
							FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](480),
						},
						ReplicationRole:  to.Ptr(armsql.FailoverGroupReplicationRolePrimary),
						ReplicationState: to.Ptr("CATCH_UP"),
					},
				},
				{
					Name:     to.Ptr("failover-group-test-2"),
					Type:     to.Ptr("Microsoft.Sql/servers/failoverGroups"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server/failoverGroups/failover-group-test-2"),
					Location: to.Ptr("Japan East"),
					Properties: &armsql.FailoverGroupProperties{
						Databases: []*string{},
						PartnerServers: []*armsql.PartnerInfo{
							{
								ID:              to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-secondary-server"),
								Location:        to.Ptr("Japan West"),
								ReplicationRole: to.Ptr(armsql.FailoverGroupReplicationRoleSecondary),
							}},
						ReadOnlyEndpoint: &armsql.FailoverGroupReadOnlyEndpoint{
							FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
						},
						ReadWriteEndpoint: &armsql.FailoverGroupReadWriteEndpoint{
							FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
							FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](480),
						},
						ReplicationRole:  to.Ptr(armsql.FailoverGroupReplicationRolePrimary),
						ReplicationState: to.Ptr("CATCH_UP"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FailoverGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FailoverGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFailoverGroups_Failover(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupFailover.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Planned failover of a failover group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewFailoverGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginFailover(ctx,
		"Default",
		"failover-group-secondary-server",
		"failover-group-test-3",
		&armsql.FailoverGroupsClientBeginFailoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupFailover.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupFailover.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.FailoverGroup{
			Name:     to.Ptr("failover-group-test-3"),
			Type:     to.Ptr("Microsoft.Sql/servers/failoverGroups"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-secondary-server/failoverGroups/failover-group-test-3"),
			Location: to.Ptr("Japan West"),
			Properties: &armsql.FailoverGroupProperties{
				Databases: []*string{
					to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-secondary-server/databases/testdb-1"),
					to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-secondary-server/databases/testdb-2")},
				PartnerServers: []*armsql.PartnerInfo{
					{
						ID:              to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server"),
						Location:        to.Ptr("Japan East"),
						ReplicationRole: to.Ptr(armsql.FailoverGroupReplicationRoleSecondary),
					}},
				ReadOnlyEndpoint: &armsql.FailoverGroupReadOnlyEndpoint{
					FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
				},
				ReadWriteEndpoint: &armsql.FailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
					FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](120),
				},
				ReplicationRole:  to.Ptr(armsql.FailoverGroupReplicationRolePrimary),
				ReplicationState: to.Ptr("CATCH_UP"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FailoverGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FailoverGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupFailover.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFailoverGroups_ForceFailoverAllowDataLoss(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupForceFailoverAllowDataLoss.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Forced failover of a failover group allowing data loss"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewFailoverGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginForceFailoverAllowDataLoss(ctx,
		"Default",
		"failover-group-secondary-server",
		"failover-group-test-3",
		&armsql.FailoverGroupsClientBeginForceFailoverAllowDataLossOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupForceFailoverAllowDataLoss.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupForceFailoverAllowDataLoss.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.FailoverGroup{
			Name:     to.Ptr("failover-group-test-3"),
			Type:     to.Ptr("Microsoft.Sql/servers/failoverGroups"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-secondary-server/failoverGroups/failover-group-test-3"),
			Location: to.Ptr("Japan West"),
			Properties: &armsql.FailoverGroupProperties{
				Databases: []*string{
					to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-secondary-server/databases/testdb-1"),
					to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-secondary-server/databases/testdb-2")},
				PartnerServers: []*armsql.PartnerInfo{
					{
						ID:              to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server"),
						Location:        to.Ptr("Japan East"),
						ReplicationRole: to.Ptr(armsql.FailoverGroupReplicationRoleSecondary),
					}},
				ReadOnlyEndpoint: &armsql.FailoverGroupReadOnlyEndpoint{
					FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
				},
				ReadWriteEndpoint: &armsql.FailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
					FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](120),
				},
				ReplicationRole:  to.Ptr(armsql.FailoverGroupReplicationRolePrimary),
				ReplicationState: to.Ptr("CATCH_UP"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FailoverGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FailoverGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FailoverGroupForceFailoverAllowDataLoss.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Firewall Rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewFirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"firewallrulecrudtest-12",
		"firewallrulecrudtest-6285",
		"firewallrulecrudtest-2304",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.FirewallRule{
			Name: to.Ptr("firewallrulecrudtest-2304"),
			Type: to.Ptr("Microsoft.Sql/servers/firewallRules"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/firewallRules/firewallrulecrudtest-2304"),
			Properties: &armsql.ServerFirewallRuleProperties{
				EndIPAddress:   to.Ptr("0.0.0.0"),
				StartIPAddress: to.Ptr("0.0.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a firewall rule max/min"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewFirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"firewallrulecrudtest-12",
		"firewallrulecrudtest-6285",
		"firewallrulecrudtest-5370",
		armsql.FirewallRule{
			Properties: &armsql.ServerFirewallRuleProperties{
				EndIPAddress:   to.Ptr("0.0.0.3"),
				StartIPAddress: to.Ptr("0.0.0.3"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.FirewallRule{
			Name: to.Ptr("firewallrulecrudtest-5370"),
			Type: to.Ptr("Microsoft.Sql/servers/firewallRules"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/firewallRules/firewallrulecrudtest-5370"),
			Properties: &armsql.ServerFirewallRuleProperties{
				EndIPAddress:   to.Ptr("0.0.0.3"),
				StartIPAddress: to.Ptr("0.0.0.3"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a firewall rule max/min"},
	})
	client = armsql.NewFirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"firewallrulecrudtest-12",
		"firewallrulecrudtest-6285",
		"firewallrulecrudtest-3927",
		armsql.FirewallRule{
			Properties: &armsql.ServerFirewallRuleProperties{
				EndIPAddress:   to.Ptr("0.0.0.1"),
				StartIPAddress: to.Ptr("0.0.0.1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.FirewallRule{
			Name: to.Ptr("firewallrulecrudtest-3927"),
			Type: to.Ptr("Microsoft.Sql/servers/firewallRules"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/firewallRules/firewallrulecrudtest-3927"),
			Properties: &armsql.ServerFirewallRuleProperties{
				EndIPAddress:   to.Ptr("0.0.0.1"),
				StartIPAddress: to.Ptr("0.0.0.1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a firewall rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewFirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"firewallrulecrudtest-9886",
		"firewallrulecrudtest-2368",
		"firewallrulecrudtest-7011",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleDelete.json: %v", err)
	}
}

func TestFirewallRules_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Firewall Rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewFirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("firewallrulecrudtest-12",
		"firewallrulecrudtest-6285",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.FirewallRuleListResult{
			Value: []*armsql.FirewallRule{
				{
					Name: to.Ptr("firewallrulecrudtest-2304"),
					Type: to.Ptr("Microsoft.Sql/servers/firewallRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/firewallRules/firewallrulecrudtest-2304"),
					Properties: &armsql.ServerFirewallRuleProperties{
						EndIPAddress:   to.Ptr("0.0.0.0"),
						StartIPAddress: to.Ptr("0.0.0.0"),
					},
				},
				{
					Name: to.Ptr("firewallrulecrudtest-3927"),
					Type: to.Ptr("Microsoft.Sql/servers/firewallRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/firewallRules/firewallrulecrudtest-3927"),
					Properties: &armsql.ServerFirewallRuleProperties{
						EndIPAddress:   to.Ptr("0.0.0.1"),
						StartIPAddress: to.Ptr("0.0.0.1"),
					},
				},
				{
					Name: to.Ptr("firewallrulecrudtest-5370"),
					Type: to.Ptr("Microsoft.Sql/servers/firewallRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/firewallRules/firewallrulecrudtest-5370"),
					Properties: &armsql.ServerFirewallRuleProperties{
						EndIPAddress:   to.Ptr("0.0.0.3"),
						StartIPAddress: to.Ptr("0.0.0.3"),
					},
				},
				{
					Name: to.Ptr("firewallrulecrudtest-5767"),
					Type: to.Ptr("Microsoft.Sql/servers/firewallRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/firewallRules/firewallrulecrudtest-5767"),
					Properties: &armsql.ServerFirewallRuleProperties{
						EndIPAddress:   to.Ptr("0.0.0.2"),
						StartIPAddress: to.Ptr("0.0.0.2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FirewallRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FirewallRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_Replace(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleReplace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Replace firewall rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewFirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Replace(ctx,
		"firewallrulecrudtest-12",
		"firewallrulecrudtest-6285",
		armsql.FirewallRuleList{
			Values: []*armsql.FirewallRule{
				{
					Name: to.Ptr("firewallrulecrudtest-5370 "),
					Properties: &armsql.ServerFirewallRuleProperties{
						EndIPAddress:   to.Ptr("100.0.0.0"),
						StartIPAddress: to.Ptr("0.0.0.0"),
					},
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleReplace.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.FirewallRule{
			Name: to.Ptr("firewallrulecrudtest-5370"),
			Type: to.Ptr("Microsoft.Sql/servers/firewallRules"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/firewallRules/firewallrulecrudtest-5370"),
			Properties: &armsql.ServerFirewallRuleProperties{
				EndIPAddress:   to.Ptr("0.0.0.3"),
				StartIPAddress: to.Ptr("0.0.0.3"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/FirewallRuleReplace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstanceFailoverGroups_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get failover group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewInstanceFailoverGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default",
		"Japan East",
		"failover-group-test",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.InstanceFailoverGroup{
			Name: to.Ptr("failover-group-test-3"),
			Type: to.Ptr("Microsoft.Sql/locations/failoverGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/locations/JapanEast/instanceFailoverGroups/failover-group-test-3"),
			Properties: &armsql.InstanceFailoverGroupProperties{
				ManagedInstancePairs: []*armsql.ManagedInstancePairInfo{
					{
						PartnerManagedInstanceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-secondary-mngdInstance"),
						PrimaryManagedInstanceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-primary-mngdInstance"),
					}},
				PartnerRegions: []*armsql.PartnerRegionInfo{
					{
						Location:        to.Ptr("Japan West"),
						ReplicationRole: to.Ptr(armsql.InstanceFailoverGroupReplicationRoleSecondary),
					}},
				ReadOnlyEndpoint: &armsql.InstanceFailoverGroupReadOnlyEndpoint{
					FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
				},
				ReadWriteEndpoint: &armsql.InstanceFailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
					FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](480),
				},
				ReplicationRole:  to.Ptr(armsql.InstanceFailoverGroupReplicationRolePrimary),
				ReplicationState: to.Ptr("CATCH_UP"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InstanceFailoverGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InstanceFailoverGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstanceFailoverGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create failover group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewInstanceFailoverGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"Japan East",
		"failover-group-test-3",
		armsql.InstanceFailoverGroup{
			Properties: &armsql.InstanceFailoverGroupProperties{
				ManagedInstancePairs: []*armsql.ManagedInstancePairInfo{
					{
						PartnerManagedInstanceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-secondary-mngdInstance"),
						PrimaryManagedInstanceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-primary-mngdInstance"),
					}},
				PartnerRegions: []*armsql.PartnerRegionInfo{
					{
						Location: to.Ptr("Japan West"),
					}},
				ReadOnlyEndpoint: &armsql.InstanceFailoverGroupReadOnlyEndpoint{
					FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
				},
				ReadWriteEndpoint: &armsql.InstanceFailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
					FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](480),
				},
			},
		},
		&armsql.InstanceFailoverGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.InstanceFailoverGroup{
			Name: to.Ptr("failover-group-test-3"),
			Type: to.Ptr("Microsoft.Sql/locations/failoverGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/locations/JapanEast/instanceFailoverGroups/failover-group-test-3"),
			Properties: &armsql.InstanceFailoverGroupProperties{
				ManagedInstancePairs: []*armsql.ManagedInstancePairInfo{
					{
						PartnerManagedInstanceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-secondary-mngdInstance"),
						PrimaryManagedInstanceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-primary-mngdInstance"),
					}},
				PartnerRegions: []*armsql.PartnerRegionInfo{
					{
						Location:        to.Ptr("Japan West"),
						ReplicationRole: to.Ptr(armsql.InstanceFailoverGroupReplicationRoleSecondary),
					}},
				ReadOnlyEndpoint: &armsql.InstanceFailoverGroupReadOnlyEndpoint{
					FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
				},
				ReadWriteEndpoint: &armsql.InstanceFailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
					FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](480),
				},
				ReplicationRole:  to.Ptr(armsql.InstanceFailoverGroupReplicationRolePrimary),
				ReplicationState: to.Ptr("CATCH_UP"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InstanceFailoverGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InstanceFailoverGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstanceFailoverGroups_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete failover group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewInstanceFailoverGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default",
		"Japan East",
		"failover-group-test-1",
		&armsql.InstanceFailoverGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupDelete.json: %v", err)
	}
}

func TestInstanceFailoverGroups_ListByLocation(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List failover group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewInstanceFailoverGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByLocation("Default",
		"Japan East",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.InstanceFailoverGroupListResult{
			Value: []*armsql.InstanceFailoverGroup{
				{
					Name: to.Ptr("failover-group-test"),
					Type: to.Ptr("Microsoft.Sql/locations/failoverGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/locations/JapanEast/instanceFailoverGroups/failover-group-test"),
					Properties: &armsql.InstanceFailoverGroupProperties{
						ManagedInstancePairs: []*armsql.ManagedInstancePairInfo{
							{
								PartnerManagedInstanceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-secondary-mngdInstance"),
								PrimaryManagedInstanceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-primary-mngdInstance"),
							}},
						PartnerRegions: []*armsql.PartnerRegionInfo{
							{
								Location:        to.Ptr("Japan West"),
								ReplicationRole: to.Ptr(armsql.InstanceFailoverGroupReplicationRoleSecondary),
							}},
						ReadOnlyEndpoint: &armsql.InstanceFailoverGroupReadOnlyEndpoint{
							FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
						},
						ReadWriteEndpoint: &armsql.InstanceFailoverGroupReadWriteEndpoint{
							FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
							FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](480),
						},
						ReplicationRole:  to.Ptr(armsql.InstanceFailoverGroupReplicationRolePrimary),
						ReplicationState: to.Ptr("CATCH_UP"),
					},
				},
				{
					Name: to.Ptr("failover-group-test-1"),
					Type: to.Ptr("Microsoft.Sql/locations/failoverGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/locations/JapanEast/instanceFailoverGroups/failover-group-test-1"),
					Properties: &armsql.InstanceFailoverGroupProperties{
						ManagedInstancePairs: []*armsql.ManagedInstancePairInfo{
							{
								PartnerManagedInstanceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-secondary-mngdInstance-1"),
								PrimaryManagedInstanceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-primary-mngdInstance-1"),
							}},
						PartnerRegions: []*armsql.PartnerRegionInfo{
							{
								Location:        to.Ptr("Japan West"),
								ReplicationRole: to.Ptr(armsql.InstanceFailoverGroupReplicationRoleSecondary),
							}},
						ReadOnlyEndpoint: &armsql.InstanceFailoverGroupReadOnlyEndpoint{
							FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
						},
						ReadWriteEndpoint: &armsql.InstanceFailoverGroupReadWriteEndpoint{
							FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
							FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](480),
						},
						ReplicationRole:  to.Ptr(armsql.InstanceFailoverGroupReplicationRolePrimary),
						ReplicationState: to.Ptr("CATCH_UP"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InstanceFailoverGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InstanceFailoverGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstanceFailoverGroups_Failover(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupFailover.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Planned failover of a failover group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewInstanceFailoverGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginFailover(ctx,
		"Default",
		"Japan West",
		"failover-group-test-3",
		&armsql.InstanceFailoverGroupsClientBeginFailoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupFailover.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupFailover.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.InstanceFailoverGroup{
			Name: to.Ptr("failover-group-test-3"),
			Type: to.Ptr("Microsoft.Sql/locations/failoverGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/locations/JapanWest/instanceFailoverGroups/failover-group-test-3"),
			Properties: &armsql.InstanceFailoverGroupProperties{
				ManagedInstancePairs: []*armsql.ManagedInstancePairInfo{
					{
						PartnerManagedInstanceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-primary-mngdInstance"),
						PrimaryManagedInstanceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-secondary-mngdInstance"),
					}},
				PartnerRegions: []*armsql.PartnerRegionInfo{
					{
						Location:        to.Ptr("Japan East"),
						ReplicationRole: to.Ptr(armsql.InstanceFailoverGroupReplicationRoleSecondary),
					}},
				ReadOnlyEndpoint: &armsql.InstanceFailoverGroupReadOnlyEndpoint{
					FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
				},
				ReadWriteEndpoint: &armsql.InstanceFailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
					FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](480),
				},
				ReplicationRole:  to.Ptr(armsql.InstanceFailoverGroupReplicationRolePrimary),
				ReplicationState: to.Ptr("CATCH_UP"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InstanceFailoverGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InstanceFailoverGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupFailover.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstanceFailoverGroups_ForceFailoverAllowDataLoss(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupForceFailoverAllowDataLoss.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Forced failover of a failover group allowing data loss"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewInstanceFailoverGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginForceFailoverAllowDataLoss(ctx,
		"Default",
		"Japan West",
		"failover-group-test-3",
		&armsql.InstanceFailoverGroupsClientBeginForceFailoverAllowDataLossOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupForceFailoverAllowDataLoss.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupForceFailoverAllowDataLoss.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.InstanceFailoverGroup{
			Name: to.Ptr("failover-group-test-3"),
			Type: to.Ptr("Microsoft.Sql/locations/failoverGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/locations/JapanWest/instanceFailoverGroups/failover-group-test-3"),
			Properties: &armsql.InstanceFailoverGroupProperties{
				ManagedInstancePairs: []*armsql.ManagedInstancePairInfo{
					{
						PartnerManagedInstanceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-primary-mngdInstance"),
						PrimaryManagedInstanceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-secondary-mngdInstance"),
					}},
				PartnerRegions: []*armsql.PartnerRegionInfo{
					{
						Location:        to.Ptr("Japan East"),
						ReplicationRole: to.Ptr(armsql.InstanceFailoverGroupReplicationRoleSecondary),
					}},
				ReadOnlyEndpoint: &armsql.InstanceFailoverGroupReadOnlyEndpoint{
					FailoverPolicy: to.Ptr(armsql.ReadOnlyEndpointFailoverPolicyDisabled),
				},
				ReadWriteEndpoint: &armsql.InstanceFailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         to.Ptr(armsql.ReadWriteEndpointFailoverPolicyAutomatic),
					FailoverWithDataLossGracePeriodMinutes: to.Ptr[int32](480),
				},
				ReplicationRole:  to.Ptr(armsql.InstanceFailoverGroupReplicationRolePrimary),
				ReplicationState: to.Ptr("CATCH_UP"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InstanceFailoverGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InstanceFailoverGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InstanceFailoverGroupForceFailoverAllowDataLoss.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstancePools_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetInstancePool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an instance pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewInstancePoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"testIP",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetInstancePool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.InstancePool{
			Name:     to.Ptr("testIP"),
			Type:     to.Ptr("Microsoft.Sql/instancePools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP"),
			Location: to.Ptr("japaneast"),
			Tags: map[string]*string{
				"a": to.Ptr("b"),
			},
			Properties: &armsql.InstancePoolProperties{
				LicenseType: to.Ptr(armsql.InstancePoolLicenseTypeLicenseIncluded),
				SubnetID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Network/virtualNetwork/myvnet/subnets/mysubnet1"),
				VCores:      to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name:   to.Ptr("GP_Gen5"),
				Family: to.Ptr("Gen5"),
				Tier:   to.Ptr("GeneralPurpose"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InstancePool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InstancePool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetInstancePool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstancePools_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateInstancePoolMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an instance pool with all properties."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewInstancePoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"testIP",
		armsql.InstancePool{
			Location: to.Ptr("japaneast"),
			Tags: map[string]*string{
				"a": to.Ptr("b"),
			},
			Properties: &armsql.InstancePoolProperties{
				LicenseType: to.Ptr(armsql.InstancePoolLicenseTypeLicenseIncluded),
				SubnetID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet1"),
				VCores:      to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name:   to.Ptr("GP_Gen5"),
				Family: to.Ptr("Gen5"),
				Tier:   to.Ptr("GeneralPurpose"),
			},
		},
		&armsql.InstancePoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateInstancePoolMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateInstancePoolMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.InstancePool{
			Name:     to.Ptr("testIP"),
			Type:     to.Ptr("Microsoft.Sql/instancePools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP"),
			Location: to.Ptr("japaneast"),
			Tags: map[string]*string{
				"a": to.Ptr("b"),
			},
			Properties: &armsql.InstancePoolProperties{
				LicenseType: to.Ptr(armsql.InstancePoolLicenseTypeLicenseIncluded),
				SubnetID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet1"),
				VCores:      to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name:   to.Ptr("GP_Gen5"),
				Family: to.Ptr("Gen5"),
				Tier:   to.Ptr("GeneralPurpose"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InstancePool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InstancePool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateInstancePoolMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateInstancePoolMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an instance pool with min properties."},
	})
	client = armsql.NewInstancePoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"group1",
		"testIP",
		armsql.InstancePool{
			Location: to.Ptr("japaneast"),
			Properties: &armsql.InstancePoolProperties{
				LicenseType: to.Ptr(armsql.InstancePoolLicenseTypeLicenseIncluded),
				SubnetID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet1"),
				VCores:      to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name:   to.Ptr("GP_Gen5"),
				Family: to.Ptr("Gen5"),
				Tier:   to.Ptr("GeneralPurpose"),
			},
		},
		&armsql.InstancePoolsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateInstancePoolMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateInstancePoolMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.InstancePool{
			Name:     to.Ptr("testIP"),
			Type:     to.Ptr("Microsoft.Sql/instancePools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP"),
			Location: to.Ptr("japaneast"),
			Tags:     map[string]*string{},
			Properties: &armsql.InstancePoolProperties{
				LicenseType: to.Ptr(armsql.InstancePoolLicenseTypeLicenseIncluded),
				SubnetID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet1"),
				VCores:      to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name:   to.Ptr("GP_Gen5"),
				Family: to.Ptr("Gen5"),
				Tier:   to.Ptr("GeneralPurpose"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InstancePool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InstancePool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateInstancePoolMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstancePools_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteInstancePool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an instance pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewInstancePoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"group1",
		"testIP",
		&armsql.InstancePoolsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteInstancePool.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteInstancePool.json: %v", err)
	}
}

func TestInstancePools_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PatchInstancePool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch an instance pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewInstancePoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"group1",
		"testIP",
		armsql.InstancePoolUpdate{
			Tags: map[string]*string{
				"x": to.Ptr("y"),
			},
		},
		&armsql.InstancePoolsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PatchInstancePool.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PatchInstancePool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.InstancePool{
			Name:     to.Ptr("testIP"),
			Type:     to.Ptr("Microsoft.Sql/instancePools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP"),
			Location: to.Ptr("japaneast"),
			Tags: map[string]*string{
				"x": to.Ptr("y"),
			},
			Properties: &armsql.InstancePoolProperties{
				LicenseType: to.Ptr(armsql.InstancePoolLicenseTypeLicenseIncluded),
				SubnetID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Network/virtualNetwork/myvnet/subnets/mysubnet1"),
				VCores:      to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name:   to.Ptr("GP_Gen5"),
				Family: to.Ptr("Gen5"),
				Tier:   to.Ptr("GeneralPurpose"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InstancePool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InstancePool)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PatchInstancePool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstancePools_ListByResourceGroup(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListInstancePoolsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List instance pools by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewInstancePoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroup("group1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListInstancePoolsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.InstancePoolListResult{
			Value: []*armsql.InstancePool{
				{
					Name:     to.Ptr("testIP"),
					Type:     to.Ptr("Microsoft.Sql/instancePools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP"),
					Location: to.Ptr("japaneast"),
					Tags: map[string]*string{
						"a": to.Ptr("b"),
					},
					Properties: &armsql.InstancePoolProperties{
						LicenseType: to.Ptr(armsql.InstancePoolLicenseTypeLicenseIncluded),
						SubnetID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Network/virtualNetwork/myvnet/subnets/mysubnet1"),
						VCores:      to.Ptr[int32](8),
					},
					SKU: &armsql.SKU{
						Name:   to.Ptr("GP_Gen5"),
						Family: to.Ptr("Gen5"),
						Tier:   to.Ptr("GeneralPurpose"),
					},
				},
				{
					Name:     to.Ptr("testIP2"),
					Type:     to.Ptr("Microsoft.Sql/instancePools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP2"),
					Location: to.Ptr("japaneast"),
					Tags: map[string]*string{
						"a": to.Ptr("b"),
					},
					Properties: &armsql.InstancePoolProperties{
						LicenseType: to.Ptr(armsql.InstancePoolLicenseTypeLicenseIncluded),
						SubnetID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Network/virtualNetwork/myvnet/subnets/mysubnet1"),
						VCores:      to.Ptr[int32](8),
					},
					SKU: &armsql.SKU{
						Name:   to.Ptr("GP_Gen5"),
						Family: to.Ptr("Gen5"),
						Tier:   to.Ptr("GeneralPurpose"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InstancePoolListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InstancePoolListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListInstancePoolsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstancePools_List(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListInstancePoolsBySubscriptionId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List instance pools in the subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewInstancePoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListInstancePoolsBySubscriptionId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.InstancePoolListResult{
			Value: []*armsql.InstancePool{
				{
					Name:     to.Ptr("testIP"),
					Type:     to.Ptr("Microsoft.Sql/instancePools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP"),
					Location: to.Ptr("japaneast"),
					Tags: map[string]*string{
						"a": to.Ptr("b"),
					},
					Properties: &armsql.InstancePoolProperties{
						LicenseType: to.Ptr(armsql.InstancePoolLicenseTypeLicenseIncluded),
						SubnetID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Network/virtualNetwork/myvnet/subnets/mysubnet1"),
						VCores:      to.Ptr[int32](8),
					},
					SKU: &armsql.SKU{
						Name:   to.Ptr("GP_Gen5"),
						Family: to.Ptr("Gen5"),
						Tier:   to.Ptr("GeneralPurpose"),
					},
				},
				{
					Name:     to.Ptr("testIP2"),
					Type:     to.Ptr("Microsoft.Sql/instancePools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group2/providers/Microsoft.Sql/instancePools/testIP2"),
					Location: to.Ptr("japaneast"),
					Tags: map[string]*string{
						"a": to.Ptr("b"),
					},
					Properties: &armsql.InstancePoolProperties{
						LicenseType: to.Ptr(armsql.InstancePoolLicenseTypeLicenseIncluded),
						SubnetID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group2/providers/Microsoft.Network/virtualNetwork/myvnet/subnets/mysubnet1"),
						VCores:      to.Ptr[int32](8),
					},
					SKU: &armsql.SKU{
						Name:   to.Ptr("GP_Gen5"),
						Family: to.Ptr("Gen5"),
						Tier:   to.Ptr("GeneralPurpose"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InstancePoolListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InstancePoolListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListInstancePoolsBySubscriptionId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobAgents_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobAgentsByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List job agents in a server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobAgentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("group1",
		"server1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobAgentsByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.JobAgentListResult{
			Value: []*armsql.JobAgent{
				{
					Name:     to.Ptr("agent1"),
					Type:     to.Ptr("Microsoft.Sql/servers/jobAgents"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1"),
					Location: to.Ptr("southeastasia"),
					Properties: &armsql.JobAgentProperties{
						DatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/databases/db1"),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("Agent"),
						Capacity: to.Ptr[int32](200),
					},
				},
				{
					Name:     to.Ptr("jobAgent2"),
					Type:     to.Ptr("Microsoft.Sql/servers/jobAgents"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/jobAgent2"),
					Location: to.Ptr("southeastasia"),
					Properties: &armsql.JobAgentProperties{
						DatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/databases/db12"),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("Agent"),
						Capacity: to.Ptr[int32](400),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobAgentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobAgentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobAgentsByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobAgents_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobAgent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a job agent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobAgentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobAgent.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobAgent{
			Name:     to.Ptr("agent1"),
			Type:     to.Ptr("Microsoft.Sql/servers/jobAgents"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1"),
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.JobAgentProperties{
				DatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/databases/db1"),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("Agent"),
				Capacity: to.Ptr[int32](400),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobAgent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobAgent)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobAgent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobAgents_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobAgent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a job agent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobAgentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		armsql.JobAgent{
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.JobAgentProperties{
				DatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/databases/db1"),
			},
		},
		&armsql.JobAgentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobAgent.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobAgent.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobAgent{
			Name:     to.Ptr("agent1"),
			Type:     to.Ptr("Microsoft.Sql/servers/jobAgents"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1"),
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.JobAgentProperties{
				DatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/databases/db1"),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("Agent"),
				Capacity: to.Ptr[int32](100),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobAgent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobAgent)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobAgent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobAgents_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteJobAgent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a job agent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobAgentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"group1",
		"server1",
		"agent1",
		&armsql.JobAgentsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteJobAgent.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteJobAgent.json: %v", err)
	}
}

func TestJobAgents_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateJobAgent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a job agent's tags."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobAgentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		armsql.JobAgentUpdate{
			Tags: map[string]*string{
				"mytag1": to.Ptr("myvalue1"),
			},
		},
		&armsql.JobAgentsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateJobAgent.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateJobAgent.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobAgent{
			Name:     to.Ptr("agent1"),
			Type:     to.Ptr("Microsoft.Sql/servers/jobAgents"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1"),
			Location: to.Ptr("southeastasia"),
			Tags: map[string]*string{
				"mytag1": to.Ptr("myvalue1"),
			},
			Properties: &armsql.JobAgentProperties{
				DatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/databases/db1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobAgent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobAgent)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateJobAgent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobCredentials_ListByAgent(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobCredentialsByAgent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List credentials in a job agent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobCredentialsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByAgent("group1",
		"server1",
		"agent1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobCredentialsByAgent.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.JobCredentialListResult{
			Value: []*armsql.JobCredential{
				{
					Name: to.Ptr("cred1"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAccounts/credentials"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred1"),
					Properties: &armsql.JobCredentialProperties{
						Username: to.Ptr("myuser"),
					},
				},
				{
					Name: to.Ptr("cred2"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAccounts/credentials"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred2"),
					Properties: &armsql.JobCredentialProperties{
						Username: to.Ptr("anotherUser"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobCredentialListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobCredentialListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobCredentialsByAgent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobCredentials_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobCredential.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a credential"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobCredentialsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"cred1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobCredential.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobCredential{
			Name: to.Ptr("cred1"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAccounts/credentials"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred1"),
			Properties: &armsql.JobCredentialProperties{
				Username: to.Ptr("myuser"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobCredential) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobCredential)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobCredential.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobCredentials_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobCredential.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a credential"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobCredentialsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"cred1",
		armsql.JobCredential{
			Properties: &armsql.JobCredentialProperties{
				Password: to.Ptr("<password>"),
				Username: to.Ptr("myuser"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobCredential.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobCredential{
			Name: to.Ptr("cred1"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAccounts/credentials"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred1"),
			Properties: &armsql.JobCredentialProperties{
				Username: to.Ptr("myuser"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobCredential) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobCredential)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobCredential.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobCredentials_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteJobCredential.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a credential"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobCredentialsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"group1",
		"server1",
		"agent1",
		"cred1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteJobCredential.json: %v", err)
	}
}

func TestJobExecutions_ListByAgent(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionsByAgentWithFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all job executions in a job agent with filtering."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobExecutionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByAgent("group1",
		"server1",
		"agent1",
		&armsql.JobExecutionsClientListByAgentOptions{CreateTimeMin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:00:00Z"); return t }()),
			CreateTimeMax: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:05:00Z"); return t }()),
			EndTimeMin:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:20:00Z"); return t }()),
			EndTimeMax:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:25:00Z"); return t }()),
			IsActive:      to.Ptr(false),
			Skip:          nil,
			Top:           nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionsByAgentWithFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.JobExecutionListResult{
			Value: []*armsql.JobExecution{
				{
					Name: to.Ptr("5555-6666-7777-8888-999999999999"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/executions"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/executions/5555-6666-7777-8888-999999999999"),
					Properties: &armsql.JobExecutionProperties{
						CreateTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:02:00.8707045Z"); return t }()),
						CurrentAttemptStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:12:00.8707045Z"); return t }()),
						CurrentAttempts:         to.Ptr[int32](0),
						EndTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:22:00.8707045Z"); return t }()),
						JobExecutionID:          to.Ptr("5A86BF65-43AC-F258-2524-9E92992F97CA"),
						JobVersion:              to.Ptr[int32](1),
						LastMessage:             to.Ptr("Job execution created."),
						Lifecycle:               to.Ptr(armsql.JobExecutionLifecycleCreated),
						ProvisioningState:       to.Ptr(armsql.ProvisioningStateSucceeded),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:12:00.8707045Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/executions"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job2/executions/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
					Properties: &armsql.JobExecutionProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-15T19:02:00.8707045Z"); return t }()),
						CurrentAttempts:   to.Ptr[int32](1),
						EndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-15T19:22:00.8707045Z"); return t }()),
						JobExecutionID:    to.Ptr("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
						JobVersion:        to.Ptr[int32](1),
						LastMessage:       to.Ptr("Job execution succeeded."),
						Lifecycle:         to.Ptr(armsql.JobExecutionLifecycleSucceeded),
						ProvisioningState: to.Ptr(armsql.ProvisioningStateSucceeded),
						StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-15T19:12:00.8707045Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobExecutionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobExecutionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionsByAgentWithFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionsByAgent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all job executions in a job agent."},
	})
	client = armsql.NewJobExecutionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager = client.ListByAgent("group1",
		"server1",
		"agent1",
		&armsql.JobExecutionsClientListByAgentOptions{CreateTimeMin: nil,
			CreateTimeMax: nil,
			EndTimeMin:    nil,
			EndTimeMax:    nil,
			IsActive:      nil,
			Skip:          nil,
			Top:           nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionsByAgent.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.JobExecutionListResult{
			Value: []*armsql.JobExecution{
				{
					Name: to.Ptr("5555-6666-7777-8888-999999999999"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/executions"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/executions/5555-6666-7777-8888-999999999999"),
					Properties: &armsql.JobExecutionProperties{
						CreateTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:02:00.8707045Z"); return t }()),
						CurrentAttemptStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:12:00.8707045Z"); return t }()),
						CurrentAttempts:         to.Ptr[int32](0),
						EndTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:22:00.8707045Z"); return t }()),
						JobExecutionID:          to.Ptr("5A86BF65-43AC-F258-2524-9E92992F97CA"),
						JobVersion:              to.Ptr[int32](1),
						LastMessage:             to.Ptr("Job execution created."),
						Lifecycle:               to.Ptr(armsql.JobExecutionLifecycleCreated),
						ProvisioningState:       to.Ptr(armsql.ProvisioningStateSucceeded),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:12:00.8707045Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/executions"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job2/executions/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
					Properties: &armsql.JobExecutionProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-15T19:02:00.8707045Z"); return t }()),
						CurrentAttempts:   to.Ptr[int32](1),
						EndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-15T19:22:00.8707045Z"); return t }()),
						JobExecutionID:    to.Ptr("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
						JobVersion:        to.Ptr[int32](1),
						LastMessage:       to.Ptr("Job execution succeeded."),
						Lifecycle:         to.Ptr(armsql.JobExecutionLifecycleSucceeded),
						ProvisioningState: to.Ptr(armsql.ProvisioningStateSucceeded),
						StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-15T19:12:00.8707045Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobExecutionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobExecutionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionsByAgent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobExecutions_Cancel(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CancelJobExecution.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cancel a job execution."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobExecutionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Cancel(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"5A86BF65-43AC-F258-2524-9E92992F97CA",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CancelJobExecution.json: %v", err)
	}
}

func TestJobExecutions_Create(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateJobExecution.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start a job execution."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobExecutionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		&armsql.JobExecutionsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateJobExecution.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateJobExecution.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobExecution{
			Name: to.Ptr("5555-6666-7777-8888-999999999999"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAgents/executions"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/executions/5555-6666-7777-8888-999999999999"),
			Properties: &armsql.JobExecutionProperties{
				CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-23T01:00:00Z"); return t }()),
				CurrentAttempts:   to.Ptr[int32](0),
				JobExecutionID:    to.Ptr("5A86BF65-43AC-F258-2524-9E92992F97CA"),
				JobVersion:        to.Ptr[int32](1),
				LastMessage:       to.Ptr("Job execution created."),
				Lifecycle:         to.Ptr(armsql.JobExecutionLifecycleCreated),
				ProvisioningState: to.Ptr(armsql.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobExecution) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobExecution)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateJobExecution.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobExecutions_ListByJob(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionsByJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List a job's executions."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobExecutionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByJob("group1",
		"server1",
		"agent1",
		"job1",
		&armsql.JobExecutionsClientListByJobOptions{CreateTimeMin: nil,
			CreateTimeMax: nil,
			EndTimeMin:    nil,
			EndTimeMax:    nil,
			IsActive:      nil,
			Skip:          nil,
			Top:           nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionsByJob.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.JobExecutionListResult{
			Value: []*armsql.JobExecution{
				{
					Name: to.Ptr("5555-6666-7777-8888-999999999999"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/executions"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/executions/5555-6666-7777-8888-999999999999"),
					Properties: &armsql.JobExecutionProperties{
						CreateTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:02:00.8707045Z"); return t }()),
						CurrentAttemptStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:12:00.8707045Z"); return t }()),
						CurrentAttempts:         to.Ptr[int32](0),
						EndTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:22:00.8707045Z"); return t }()),
						JobExecutionID:          to.Ptr("5A86BF65-43AC-F258-2524-9E92992F97CA"),
						JobVersion:              to.Ptr[int32](1),
						LastMessage:             to.Ptr("Job execution created."),
						Lifecycle:               to.Ptr(armsql.JobExecutionLifecycleCreated),
						ProvisioningState:       to.Ptr(armsql.ProvisioningStateSucceeded),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:12:00.8707045Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/executions"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/executions/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
					Properties: &armsql.JobExecutionProperties{
						CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-15T19:02:00.8707045Z"); return t }()),
						CurrentAttempts:   to.Ptr[int32](1),
						EndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-15T19:22:00.8707045Z"); return t }()),
						JobExecutionID:    to.Ptr("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
						JobVersion:        to.Ptr[int32](1),
						LastMessage:       to.Ptr("Job execution succeeded."),
						Lifecycle:         to.Ptr(armsql.JobExecutionLifecycleSucceeded),
						ProvisioningState: to.Ptr(armsql.ProvisioningStateSucceeded),
						StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-15T19:12:00.8707045Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobExecutionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobExecutionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionsByJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobExecutions_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobExecution.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a job execution."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobExecutionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"5A86BF65-43AC-F258-2524-9E92992F97CA",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobExecution.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobExecution{
			Name: to.Ptr("5555-6666-7777-8888-999999999999"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAgents/executions"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/executions/5555-6666-7777-8888-999999999999"),
			Properties: &armsql.JobExecutionProperties{
				CreateTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-21T19:02:00.8707045Z"); return t }()),
				CurrentAttemptStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-13T19:12:00.8707045Z"); return t }()),
				CurrentAttempts:         to.Ptr[int32](0),
				EndTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-21T19:22:00.8707045Z"); return t }()),
				JobExecutionID:          to.Ptr("5A86BF65-43AC-F258-2524-9E92992F97CA"),
				JobVersion:              to.Ptr[int32](1),
				LastMessage:             to.Ptr("Job execution created."),
				Lifecycle:               to.Ptr(armsql.JobExecutionLifecycleCreated),
				ProvisioningState:       to.Ptr(armsql.ProvisioningStateSucceeded),
				StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-21T19:12:00.8707045Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobExecution) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobExecution)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobExecution.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobExecutions_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobExecution.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create job execution."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobExecutionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"5A86BF65-43AC-F258-2524-9E92992F97CA",
		&armsql.JobExecutionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobExecution.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobExecution.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobExecution{
			Name: to.Ptr("5555-6666-7777-8888-999999999999"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAgents/executions"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/executions/5555-6666-7777-8888-999999999999"),
			Properties: &armsql.JobExecutionProperties{
				CreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-18T19:02:00.8707045Z"); return t }()),
				CurrentAttempts:   to.Ptr[int32](0),
				JobExecutionID:    to.Ptr("5A86BF65-43AC-F258-2524-9E92992F97CA"),
				JobVersion:        to.Ptr[int32](1),
				LastMessage:       to.Ptr("Job execution created."),
				Lifecycle:         to.Ptr(armsql.JobExecutionLifecycleCreated),
				ProvisioningState: to.Ptr(armsql.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobExecution) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobExecution)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobExecution.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_ListByAgent(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobsByAgent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List jobs in a job agent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByAgent("group1",
		"server1",
		"agent1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobsByAgent.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.JobListResult{
			Value: []*armsql.Job{
				{
					Name: to.Ptr("job1"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAccounts/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1"),
					Properties: &armsql.JobProperties{
						Description: to.Ptr("my favourite job"),
						Schedule: &armsql.JobSchedule{
							Type:      to.Ptr(armsql.JobScheduleTypeRecurring),
							Enabled:   to.Ptr(true),
							EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-24T23:59:59Z"); return t }()),
							Interval:  to.Ptr("PT5M"),
							StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-24T18:30:01Z"); return t }()),
						},
						Version: to.Ptr[int32](0),
					},
				},
				{
					Name: to.Ptr("job3"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAccounts/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job3"),
					Properties: &armsql.JobProperties{
						Description: to.Ptr("this job will be scheduled once"),
						Schedule: &armsql.JobSchedule{
							Type:      to.Ptr(armsql.JobScheduleTypeOnce),
							Enabled:   to.Ptr(true),
							EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-27T06:00:00Z"); return t }()),
							StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-01T03:45:00Z"); return t }()),
						},
						Version: to.Ptr[int32](1),
					},
				},
				{
					Name: to.Ptr("job2"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAccounts/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job2"),
					Properties: &armsql.JobProperties{
						Description: to.Ptr("this job will never be automatically scheduled"),
						Schedule: &armsql.JobSchedule{
							Type:      to.Ptr(armsql.JobScheduleTypeOnce),
							Enabled:   to.Ptr(false),
							EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-27T06:00:00Z"); return t }()),
							StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-01T03:45:00Z"); return t }()),
						},
						Version: to.Ptr[int32](1),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobsByAgent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Job{
			Name: to.Ptr("job1"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAccounts/jobs"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1"),
			Properties: &armsql.JobProperties{
				Description: to.Ptr("my favourite job"),
				Schedule: &armsql.JobSchedule{
					Type:      to.Ptr(armsql.JobScheduleTypeOnce),
					Enabled:   to.Ptr(true),
					EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-24T23:59:59Z"); return t }()),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-24T18:30:01Z"); return t }()),
				},
				Version: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Job) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Job)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a job with all properties specified"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		armsql.Job{
			Properties: &armsql.JobProperties{
				Description: to.Ptr("my favourite job"),
				Schedule: &armsql.JobSchedule{
					Type:      to.Ptr(armsql.JobScheduleTypeRecurring),
					Enabled:   to.Ptr(true),
					EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-24T23:59:59Z"); return t }()),
					Interval:  to.Ptr("PT5M"),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-24T18:30:01Z"); return t }()),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Job{
			Name: to.Ptr("job1"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAccounts/jobs"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1"),
			Properties: &armsql.JobProperties{
				Description: to.Ptr("my favourite job"),
				Schedule: &armsql.JobSchedule{
					Type:      to.Ptr(armsql.JobScheduleTypeRecurring),
					Enabled:   to.Ptr(true),
					EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-24T23:59:59Z"); return t }()),
					Interval:  to.Ptr("PT5M"),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-24T18:30:01Z"); return t }()),
				},
				Version: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Job) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Job)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a job with default properties"},
	})
	client = armsql.NewJobsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		armsql.Job{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Job{
			Name: to.Ptr("job1"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAccounts/jobs"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1"),
			Properties: &armsql.JobProperties{
				Description: to.Ptr(""),
				Schedule: &armsql.JobSchedule{
					Type:      to.Ptr(armsql.JobScheduleTypeOnce),
					Enabled:   to.Ptr(false),
					EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "9999-12-31T11:59:59Z"); return t }()),
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00Z"); return t }()),
				},
				Version: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Job) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Job)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteJob.json: %v", err)
	}
}

func TestJobStepExecutions_ListByJobExecution(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionSteps.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List job step executions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobStepExecutionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByJobExecution("group1",
		"server1",
		"agent1",
		"job1",
		"5A86BF65-43AC-F258-2524-9E92992F97CA",
		&armsql.JobStepExecutionsClientListByJobExecutionOptions{CreateTimeMin: nil,
			CreateTimeMax: nil,
			EndTimeMin:    nil,
			EndTimeMax:    nil,
			IsActive:      nil,
			Skip:          nil,
			Top:           nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionSteps.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.JobExecutionListResult{
			Value: []*armsql.JobExecution{
				{
					Name: to.Ptr("step1"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/executions/steps"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/executions/5555-6666-7777-8888-999999999999/steps/step1"),
					Properties: &armsql.JobExecutionProperties{
						CreateTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-03T04:33:15.7189151Z"); return t }()),
						CurrentAttemptStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-03T04:33:17.4840068Z"); return t }()),
						CurrentAttempts:         to.Ptr[int32](1),
						EndTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-03T04:33:19.0600862Z"); return t }()),
						JobExecutionID:          to.Ptr("5A86BF65-43AC-F258-2524-9E92992F97CA"),
						JobVersion:              to.Ptr[int32](1),
						LastMessage:             to.Ptr("Step 1 succeeded."),
						Lifecycle:               to.Ptr(armsql.JobExecutionLifecycleSucceeded),
						ProvisioningState:       to.Ptr(armsql.ProvisioningStateSucceeded),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-03T04:33:16.176937Z"); return t }()),
						StepID:                  to.Ptr[int32](1),
						StepName:                to.Ptr("step1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobExecutionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobExecutionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionSteps.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobStepExecutions_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobExecutionStep.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a job step execution"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobStepExecutionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"5A86BF65-43AC-F258-2524-9E92992F97CA",
		"step1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobExecutionStep.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobExecution{
			Name: to.Ptr("step1"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/executions/steps"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/executions/5555-6666-7777-8888-999999999999/steps/step1"),
			Properties: &armsql.JobExecutionProperties{
				CreateTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-27T04:33:15.7189151Z"); return t }()),
				CurrentAttemptStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-27T04:33:17.4840068Z"); return t }()),
				CurrentAttempts:         to.Ptr[int32](1),
				EndTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-27T04:33:19.0600862Z"); return t }()),
				JobExecutionID:          to.Ptr("5A86BF65-43AC-F258-2524-9E92992F97CA"),
				JobVersion:              to.Ptr[int32](1),
				LastMessage:             to.Ptr("Step 1 succeeded."),
				Lifecycle:               to.Ptr(armsql.JobExecutionLifecycleSucceeded),
				ProvisioningState:       to.Ptr(armsql.ProvisioningStateSucceeded),
				StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-27T04:33:16.176937Z"); return t }()),
				StepID:                  to.Ptr[int32](1),
				StepName:                to.Ptr("step1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobExecution) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobExecution)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobExecutionStep.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobSteps_ListByVersion(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobStepsByVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List job steps for the specified version of a job."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobStepsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByVersion("group1",
		"server1",
		"agent1",
		"job1",
		1,
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobStepsByVersion.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.JobStepListResult{
			Value: []*armsql.JobStep{
				{
					Name: to.Ptr("step1"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/versions/steps"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/versions/1/steps/step1"),
					Properties: &armsql.JobStepProperties{
						Action: &armsql.JobStepAction{
							Type:   to.Ptr(armsql.JobStepActionTypeTSQL),
							Source: to.Ptr(armsql.JobStepActionSourceInline),
							Value:  to.Ptr("select 2"),
						},
						Credential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred1"),
						ExecutionOptions: &armsql.JobStepExecutionOptions{
							InitialRetryIntervalSeconds:    to.Ptr[int32](11),
							MaximumRetryIntervalSeconds:    to.Ptr[int32](222),
							RetryAttempts:                  to.Ptr[int32](42),
							RetryIntervalBackoffMultiplier: to.Ptr[float32](3),
							TimeoutSeconds:                 to.Ptr[int32](1234),
						},
						Output: &armsql.JobStepOutput{
							Type:              to.Ptr(armsql.JobStepOutputTypeSQLDatabase),
							Credential:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred0"),
							DatabaseName:      to.Ptr("database3"),
							ResourceGroupName: to.Ptr("group3"),
							SchemaName:        to.Ptr("myschema1234"),
							ServerName:        to.Ptr("server3"),
							SubscriptionID:    to.Ptr("3501b905-a848-4b5d-96e8-b253f62d735a"),
							TableName:         to.Ptr("mytable5678"),
						},
						StepID:      to.Ptr[int32](1),
						TargetGroup: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup1"),
					},
				},
				{
					Name: to.Ptr("step2"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/versions/steps"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/versions/1/steps/step2"),
					Properties: &armsql.JobStepProperties{
						Action: &armsql.JobStepAction{
							Type:   to.Ptr(armsql.JobStepActionTypeTSQL),
							Source: to.Ptr(armsql.JobStepActionSourceInline),
							Value:  to.Ptr("select 2"),
						},
						Credential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred1"),
						ExecutionOptions: &armsql.JobStepExecutionOptions{
							InitialRetryIntervalSeconds:    to.Ptr[int32](11),
							MaximumRetryIntervalSeconds:    to.Ptr[int32](222),
							RetryAttempts:                  to.Ptr[int32](42),
							RetryIntervalBackoffMultiplier: to.Ptr[float32](3),
							TimeoutSeconds:                 to.Ptr[int32](1234),
						},
						Output: &armsql.JobStepOutput{
							Type:              to.Ptr(armsql.JobStepOutputTypeSQLDatabase),
							Credential:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred0"),
							DatabaseName:      to.Ptr("database3"),
							ResourceGroupName: to.Ptr("group3"),
							SchemaName:        to.Ptr("myschema1234"),
							ServerName:        to.Ptr("server3"),
							SubscriptionID:    to.Ptr("3501b905-a848-4b5d-96e8-b253f62d735a"),
							TableName:         to.Ptr("mytable5678"),
						},
						StepID:      to.Ptr[int32](2),
						TargetGroup: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobStepListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobStepListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobStepsByVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobSteps_GetByVersion(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobStepByVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the specified version of a job step."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobStepsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.GetByVersion(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		1,
		"step1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobStepByVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobStep{
			Name: to.Ptr("step1"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/versions/steps"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/versions/1/steps/step1"),
			Properties: &armsql.JobStepProperties{
				Action: &armsql.JobStepAction{
					Type:   to.Ptr(armsql.JobStepActionTypeTSQL),
					Source: to.Ptr(armsql.JobStepActionSourceInline),
					Value:  to.Ptr("select 2"),
				},
				Credential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred1"),
				ExecutionOptions: &armsql.JobStepExecutionOptions{
					InitialRetryIntervalSeconds:    to.Ptr[int32](11),
					MaximumRetryIntervalSeconds:    to.Ptr[int32](222),
					RetryAttempts:                  to.Ptr[int32](42),
					RetryIntervalBackoffMultiplier: to.Ptr[float32](3),
					TimeoutSeconds:                 to.Ptr[int32](1234),
				},
				Output: &armsql.JobStepOutput{
					Type:              to.Ptr(armsql.JobStepOutputTypeSQLDatabase),
					Credential:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred0"),
					DatabaseName:      to.Ptr("database3"),
					ResourceGroupName: to.Ptr("group3"),
					SchemaName:        to.Ptr("myschema1234"),
					ServerName:        to.Ptr("server3"),
					SubscriptionID:    to.Ptr("3501b905-a848-4b5d-96e8-b253f62d735a"),
					TableName:         to.Ptr("mytable5678"),
				},
				StepID:      to.Ptr[int32](1),
				TargetGroup: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobStep) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobStep)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobStepByVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobSteps_ListByJob(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobStepsByJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List job steps for the latest version of a job."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobStepsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByJob("group1",
		"server1",
		"agent1",
		"job1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobStepsByJob.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.JobStepListResult{
			Value: []*armsql.JobStep{
				{
					Name: to.Ptr("step1"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/steps"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/steps/step1"),
					Properties: &armsql.JobStepProperties{
						Action: &armsql.JobStepAction{
							Type:   to.Ptr(armsql.JobStepActionTypeTSQL),
							Source: to.Ptr(armsql.JobStepActionSourceInline),
							Value:  to.Ptr("select 2"),
						},
						Credential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred1"),
						ExecutionOptions: &armsql.JobStepExecutionOptions{
							InitialRetryIntervalSeconds:    to.Ptr[int32](11),
							MaximumRetryIntervalSeconds:    to.Ptr[int32](222),
							RetryAttempts:                  to.Ptr[int32](42),
							RetryIntervalBackoffMultiplier: to.Ptr[float32](3),
							TimeoutSeconds:                 to.Ptr[int32](1234),
						},
						Output: &armsql.JobStepOutput{
							Type:              to.Ptr(armsql.JobStepOutputTypeSQLDatabase),
							Credential:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred0"),
							DatabaseName:      to.Ptr("database3"),
							ResourceGroupName: to.Ptr("group3"),
							SchemaName:        to.Ptr("myschema1234"),
							ServerName:        to.Ptr("server3"),
							SubscriptionID:    to.Ptr("3501b905-a848-4b5d-96e8-b253f62d735a"),
							TableName:         to.Ptr("mytable5678"),
						},
						StepID:      to.Ptr[int32](1),
						TargetGroup: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup1"),
					},
				},
				{
					Name: to.Ptr("step2"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/steps"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/steps/step2"),
					Properties: &armsql.JobStepProperties{
						Action: &armsql.JobStepAction{
							Type:   to.Ptr(armsql.JobStepActionTypeTSQL),
							Source: to.Ptr(armsql.JobStepActionSourceInline),
							Value:  to.Ptr("select 2"),
						},
						Credential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred1"),
						ExecutionOptions: &armsql.JobStepExecutionOptions{
							InitialRetryIntervalSeconds:    to.Ptr[int32](11),
							MaximumRetryIntervalSeconds:    to.Ptr[int32](222),
							RetryAttempts:                  to.Ptr[int32](42),
							RetryIntervalBackoffMultiplier: to.Ptr[float32](3),
							TimeoutSeconds:                 to.Ptr[int32](1234),
						},
						Output: &armsql.JobStepOutput{
							Type:              to.Ptr(armsql.JobStepOutputTypeSQLDatabase),
							Credential:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred0"),
							DatabaseName:      to.Ptr("database3"),
							ResourceGroupName: to.Ptr("group3"),
							SchemaName:        to.Ptr("myschema1234"),
							ServerName:        to.Ptr("server3"),
							SubscriptionID:    to.Ptr("3501b905-a848-4b5d-96e8-b253f62d735a"),
							TableName:         to.Ptr("mytable5678"),
						},
						StepID:      to.Ptr[int32](2),
						TargetGroup: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobStepListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobStepListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobStepsByJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobSteps_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobStepByJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the latest version of a job step."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobStepsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"step1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobStepByJob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobStep{
			Name: to.Ptr("step1"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/steps"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/steps/step1"),
			Properties: &armsql.JobStepProperties{
				Action: &armsql.JobStepAction{
					Type:   to.Ptr(armsql.JobStepActionTypeTSQL),
					Source: to.Ptr(armsql.JobStepActionSourceInline),
					Value:  to.Ptr("select 2"),
				},
				Credential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred1"),
				ExecutionOptions: &armsql.JobStepExecutionOptions{
					InitialRetryIntervalSeconds:    to.Ptr[int32](11),
					MaximumRetryIntervalSeconds:    to.Ptr[int32](222),
					RetryAttempts:                  to.Ptr[int32](42),
					RetryIntervalBackoffMultiplier: to.Ptr[float32](3),
					TimeoutSeconds:                 to.Ptr[int32](1234),
				},
				Output: &armsql.JobStepOutput{
					Type:              to.Ptr(armsql.JobStepOutputTypeSQLDatabase),
					Credential:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred0"),
					DatabaseName:      to.Ptr("database3"),
					ResourceGroupName: to.Ptr("group3"),
					SchemaName:        to.Ptr("myschema1234"),
					ServerName:        to.Ptr("server3"),
					SubscriptionID:    to.Ptr("3501b905-a848-4b5d-96e8-b253f62d735a"),
					TableName:         to.Ptr("mytable5678"),
				},
				StepID:      to.Ptr[int32](1),
				TargetGroup: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobStep) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobStep)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobStepByJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobSteps_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobStepMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a job step with all properties specified."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobStepsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"step1",
		armsql.JobStep{
			Properties: &armsql.JobStepProperties{
				Action: &armsql.JobStepAction{
					Type:   to.Ptr(armsql.JobStepActionTypeTSQL),
					Source: to.Ptr(armsql.JobStepActionSourceInline),
					Value:  to.Ptr("select 2"),
				},
				Credential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred1"),
				ExecutionOptions: &armsql.JobStepExecutionOptions{
					InitialRetryIntervalSeconds:    to.Ptr[int32](11),
					MaximumRetryIntervalSeconds:    to.Ptr[int32](222),
					RetryAttempts:                  to.Ptr[int32](42),
					RetryIntervalBackoffMultiplier: to.Ptr[float32](3),
					TimeoutSeconds:                 to.Ptr[int32](1234),
				},
				Output: &armsql.JobStepOutput{
					Type:              to.Ptr(armsql.JobStepOutputTypeSQLDatabase),
					Credential:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred0"),
					DatabaseName:      to.Ptr("database3"),
					ResourceGroupName: to.Ptr("group3"),
					SchemaName:        to.Ptr("myschema1234"),
					ServerName:        to.Ptr("server3"),
					SubscriptionID:    to.Ptr("3501b905-a848-4b5d-96e8-b253f62d735a"),
					TableName:         to.Ptr("mytable5678"),
				},
				StepID:      to.Ptr[int32](1),
				TargetGroup: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobStepMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobStep{
			Name: to.Ptr("step1"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/steps"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/steps/step1"),
			Properties: &armsql.JobStepProperties{
				Action: &armsql.JobStepAction{
					Type:   to.Ptr(armsql.JobStepActionTypeTSQL),
					Source: to.Ptr(armsql.JobStepActionSourceInline),
					Value:  to.Ptr("select 2"),
				},
				Credential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred1"),
				ExecutionOptions: &armsql.JobStepExecutionOptions{
					InitialRetryIntervalSeconds:    to.Ptr[int32](11),
					MaximumRetryIntervalSeconds:    to.Ptr[int32](222),
					RetryAttempts:                  to.Ptr[int32](42),
					RetryIntervalBackoffMultiplier: to.Ptr[float32](3),
					TimeoutSeconds:                 to.Ptr[int32](1234),
				},
				Output: &armsql.JobStepOutput{
					Type:              to.Ptr(armsql.JobStepOutputTypeSQLDatabase),
					Credential:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred0"),
					DatabaseName:      to.Ptr("database3"),
					ResourceGroupName: to.Ptr("group3"),
					SchemaName:        to.Ptr("myschema1234"),
					ServerName:        to.Ptr("server3"),
					SubscriptionID:    to.Ptr("3501b905-a848-4b5d-96e8-b253f62d735a"),
					TableName:         to.Ptr("mytable5678"),
				},
				StepID:      to.Ptr[int32](1),
				TargetGroup: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobStep) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobStep)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobStepMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobStepMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a job step with minimal properties specified."},
	})
	client = armsql.NewJobStepsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"step1",
		armsql.JobStep{
			Properties: &armsql.JobStepProperties{
				Action: &armsql.JobStepAction{
					Value: to.Ptr("select 1"),
				},
				Credential:  to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred0"),
				TargetGroup: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup0"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobStepMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobStep{
			Name: to.Ptr("step1"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/steps"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/steps/step1"),
			Properties: &armsql.JobStepProperties{
				Action: &armsql.JobStepAction{
					Type:   to.Ptr(armsql.JobStepActionTypeTSQL),
					Source: to.Ptr(armsql.JobStepActionSourceInline),
					Value:  to.Ptr("select 1"),
				},
				Credential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred0"),
				ExecutionOptions: &armsql.JobStepExecutionOptions{
					InitialRetryIntervalSeconds:    to.Ptr[int32](1),
					MaximumRetryIntervalSeconds:    to.Ptr[int32](120),
					RetryAttempts:                  to.Ptr[int32](10),
					RetryIntervalBackoffMultiplier: to.Ptr[float32](2),
					TimeoutSeconds:                 to.Ptr[int32](43200),
				},
				StepID:      to.Ptr[int32](1),
				TargetGroup: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobStep) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobStep)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobStepMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobSteps_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteJobStep.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a job step."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobStepsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"step1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteJobStep.json: %v", err)
	}
}

func TestJobTargetExecutions_ListByJobExecution(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionTargetsByExecution.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List job step target executions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobTargetExecutionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByJobExecution("group1",
		"server1",
		"agent1",
		"job1",
		"5A86BF65-43AC-F258-2524-9E92992F97CA",
		&armsql.JobTargetExecutionsClientListByJobExecutionOptions{CreateTimeMin: nil,
			CreateTimeMax: nil,
			EndTimeMin:    nil,
			EndTimeMax:    nil,
			IsActive:      nil,
			Skip:          nil,
			Top:           nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionTargetsByExecution.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.JobExecutionListResult{
			Value: []*armsql.JobExecution{
				{
					Name: to.Ptr("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/executions/steps/targets"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/executions/5555-6666-7777-8888-999999999999/steps/step1/targets/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
					Properties: &armsql.JobExecutionProperties{
						CreateTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-01T04:33:17.5133333Z"); return t }()),
						CurrentAttemptStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-01T04:33:18.2391013Z"); return t }()),
						CurrentAttempts:         to.Ptr[int32](1),
						EndTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-01T04:33:18.7031029Z"); return t }()),
						JobExecutionID:          to.Ptr("5A86BF65-43AC-F258-2524-9E92992F97CA"),
						JobVersion:              to.Ptr[int32](1),
						LastMessage:             to.Ptr("Step 1 succeeded execution on target (server 'server1', database 'database1')."),
						Lifecycle:               to.Ptr(armsql.JobExecutionLifecycleSucceeded),
						ProvisioningState:       to.Ptr(armsql.ProvisioningStateSucceeded),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-01T04:33:18.1230403Z"); return t }()),
						StepID:                  to.Ptr[int32](1),
						StepName:                to.Ptr("step1"),
						Target: &armsql.JobExecutionTarget{
							Type:         to.Ptr(armsql.JobTargetTypeSQLDatabase),
							DatabaseName: to.Ptr("database1"),
							ServerName:   to.Ptr("server1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobExecutionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobExecutionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionTargetsByExecution.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobTargetExecutions_ListByStep(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionTargetsByStep.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List job step target executions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobTargetExecutionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByStep("group1",
		"server1",
		"agent1",
		"job1",
		"5A86BF65-43AC-F258-2524-9E92992F97CA",
		"step1",
		&armsql.JobTargetExecutionsClientListByStepOptions{CreateTimeMin: nil,
			CreateTimeMax: nil,
			EndTimeMin:    nil,
			EndTimeMax:    nil,
			IsActive:      nil,
			Skip:          nil,
			Top:           nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionTargetsByStep.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.JobExecutionListResult{
			Value: []*armsql.JobExecution{
				{
					Name: to.Ptr("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/executions/steps/targets"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/executions/5555-6666-7777-8888-999999999999/steps/step1/targets/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
					Properties: &armsql.JobExecutionProperties{
						CreateTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-01T04:33:17.5133333Z"); return t }()),
						CurrentAttemptStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-01T04:33:18.2391013Z"); return t }()),
						CurrentAttempts:         to.Ptr[int32](1),
						EndTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-01T04:33:18.7031029Z"); return t }()),
						JobExecutionID:          to.Ptr("5A86BF65-43AC-F258-2524-9E92992F97CA"),
						JobVersion:              to.Ptr[int32](1),
						LastMessage:             to.Ptr("Step 1 succeeded execution on target (server 'server1', database 'database1')."),
						Lifecycle:               to.Ptr(armsql.JobExecutionLifecycleSucceeded),
						ProvisioningState:       to.Ptr(armsql.ProvisioningStateSucceeded),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-01T04:33:18.1230403Z"); return t }()),
						StepID:                  to.Ptr[int32](1),
						StepName:                to.Ptr("step1"),
						Target: &armsql.JobExecutionTarget{
							Type:         to.Ptr(armsql.JobTargetTypeSQLDatabase),
							DatabaseName: to.Ptr("database1"),
							ServerName:   to.Ptr("server1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobExecutionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobExecutionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobExecutionTargetsByStep.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobTargetExecutions_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobExecutionTarget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a job step target execution"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobTargetExecutionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"5A86BF65-43AC-F258-2524-9E92992F97CA",
		"step1",
		"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobExecutionTarget.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobExecution{
			Name: to.Ptr("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/executions/steps/targets"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/executions/5555-6666-7777-8888-999999999999/steps/step1/targets/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
			Properties: &armsql.JobExecutionProperties{
				CreateTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T04:33:17.5133333Z"); return t }()),
				CurrentAttemptStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T04:33:18.2391013Z"); return t }()),
				CurrentAttempts:         to.Ptr[int32](1),
				EndTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T04:33:18.7031029Z"); return t }()),
				JobExecutionID:          to.Ptr("5A86BF65-43AC-F258-2524-9E92992F97CA"),
				JobVersion:              to.Ptr[int32](1),
				LastMessage:             to.Ptr("Step 1 succeeded execution on target (server 'server1', database 'database1')."),
				Lifecycle:               to.Ptr(armsql.JobExecutionLifecycleSucceeded),
				ProvisioningState:       to.Ptr(armsql.ProvisioningStateSucceeded),
				StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-05T04:33:18.1230403Z"); return t }()),
				StepID:                  to.Ptr[int32](1),
				StepName:                to.Ptr("step1"),
				Target: &armsql.JobExecutionTarget{
					Type:         to.Ptr(armsql.JobTargetTypeSQLDatabase),
					DatabaseName: to.Ptr("database1"),
					ServerName:   to.Ptr("server1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobExecution) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobExecution)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobExecutionTarget.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobTargetGroups_ListByAgent(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobTargetGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all target groups in an agent."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobTargetGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByAgent("group1",
		"server1",
		"agent1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobTargetGroups.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.JobTargetGroupListResult{
			Value: []*armsql.JobTargetGroup{
				{
					Name: to.Ptr("targetGroup1"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/targetGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup1"),
					Properties: &armsql.JobTargetGroupProperties{
						Members: []*armsql.JobTarget{
							{
								Type:           to.Ptr(armsql.JobTargetTypeSQLDatabase),
								DatabaseName:   to.Ptr("database1"),
								MembershipType: to.Ptr(armsql.JobTargetGroupMembershipTypeExclude),
								ServerName:     to.Ptr("server1"),
							},
							{
								Type:              to.Ptr(armsql.JobTargetTypeSQLServer),
								MembershipType:    to.Ptr(armsql.JobTargetGroupMembershipTypeInclude),
								RefreshCredential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
								ServerName:        to.Ptr("server1"),
							},
							{
								Type:              to.Ptr(armsql.JobTargetTypeSQLElasticPool),
								ElasticPoolName:   to.Ptr("pool1"),
								MembershipType:    to.Ptr(armsql.JobTargetGroupMembershipTypeInclude),
								RefreshCredential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
								ServerName:        to.Ptr("server2"),
							},
							{
								Type:              to.Ptr(armsql.JobTargetTypeSQLShardMap),
								MembershipType:    to.Ptr(armsql.JobTargetGroupMembershipTypeInclude),
								RefreshCredential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
								ServerName:        to.Ptr("server3"),
								ShardMapName:      to.Ptr("shardMap1"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobTargetGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobTargetGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobTargetGroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobTargetGroups_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobTargetGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a target group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobTargetGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"targetGroup1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobTargetGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobTargetGroup{
			Name: to.Ptr("targetGroup1"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAgents/targetGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup1"),
			Properties: &armsql.JobTargetGroupProperties{
				Members: []*armsql.JobTarget{
					{
						Type:           to.Ptr(armsql.JobTargetTypeSQLDatabase),
						DatabaseName:   to.Ptr("database1"),
						MembershipType: to.Ptr(armsql.JobTargetGroupMembershipTypeExclude),
						ServerName:     to.Ptr("server1"),
					},
					{
						Type:              to.Ptr(armsql.JobTargetTypeSQLServer),
						MembershipType:    to.Ptr(armsql.JobTargetGroupMembershipTypeInclude),
						RefreshCredential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
						ServerName:        to.Ptr("server1"),
					},
					{
						Type:              to.Ptr(armsql.JobTargetTypeSQLElasticPool),
						ElasticPoolName:   to.Ptr("pool1"),
						MembershipType:    to.Ptr(armsql.JobTargetGroupMembershipTypeInclude),
						RefreshCredential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
						ServerName:        to.Ptr("server2"),
					},
					{
						Type:              to.Ptr(armsql.JobTargetTypeSQLShardMap),
						MembershipType:    to.Ptr(armsql.JobTargetGroupMembershipTypeInclude),
						RefreshCredential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
						ServerName:        to.Ptr("server3"),
						ShardMapName:      to.Ptr("shardMap1"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobTargetGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobTargetGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobTargetGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobTargetGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobTargetGroupMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a target group with all properties."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobTargetGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"targetGroup1",
		armsql.JobTargetGroup{
			Properties: &armsql.JobTargetGroupProperties{
				Members: []*armsql.JobTarget{
					{
						Type:           to.Ptr(armsql.JobTargetTypeSQLDatabase),
						DatabaseName:   to.Ptr("database1"),
						MembershipType: to.Ptr(armsql.JobTargetGroupMembershipTypeExclude),
						ServerName:     to.Ptr("server1"),
					},
					{
						Type:              to.Ptr(armsql.JobTargetTypeSQLServer),
						MembershipType:    to.Ptr(armsql.JobTargetGroupMembershipTypeInclude),
						RefreshCredential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
						ServerName:        to.Ptr("server1"),
					},
					{
						Type:              to.Ptr(armsql.JobTargetTypeSQLElasticPool),
						ElasticPoolName:   to.Ptr("pool1"),
						MembershipType:    to.Ptr(armsql.JobTargetGroupMembershipTypeInclude),
						RefreshCredential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
						ServerName:        to.Ptr("server2"),
					},
					{
						Type:              to.Ptr(armsql.JobTargetTypeSQLShardMap),
						MembershipType:    to.Ptr(armsql.JobTargetGroupMembershipTypeInclude),
						RefreshCredential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
						ServerName:        to.Ptr("server3"),
						ShardMapName:      to.Ptr("shardMap1"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobTargetGroupMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobTargetGroup{
			Name: to.Ptr("targetGroup1"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAgents/targetGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup1"),
			Properties: &armsql.JobTargetGroupProperties{
				Members: []*armsql.JobTarget{
					{
						Type:           to.Ptr(armsql.JobTargetTypeSQLDatabase),
						DatabaseName:   to.Ptr("database1"),
						MembershipType: to.Ptr(armsql.JobTargetGroupMembershipTypeExclude),
						ServerName:     to.Ptr("server1"),
					},
					{
						Type:              to.Ptr(armsql.JobTargetTypeSQLServer),
						MembershipType:    to.Ptr(armsql.JobTargetGroupMembershipTypeInclude),
						RefreshCredential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
						ServerName:        to.Ptr("server1"),
					},
					{
						Type:              to.Ptr(armsql.JobTargetTypeSQLElasticPool),
						ElasticPoolName:   to.Ptr("pool1"),
						MembershipType:    to.Ptr(armsql.JobTargetGroupMembershipTypeInclude),
						RefreshCredential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
						ServerName:        to.Ptr("server2"),
					},
					{
						Type:              to.Ptr(armsql.JobTargetTypeSQLShardMap),
						MembershipType:    to.Ptr(armsql.JobTargetGroupMembershipTypeInclude),
						RefreshCredential: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
						ServerName:        to.Ptr("server3"),
						ShardMapName:      to.Ptr("shardMap1"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobTargetGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobTargetGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobTargetGroupMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobTargetGroupMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a target group with minimal properties."},
	})
	client = armsql.NewJobTargetGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"targetGroup1",
		armsql.JobTargetGroup{
			Properties: &armsql.JobTargetGroupProperties{
				Members: []*armsql.JobTarget{},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobTargetGroupMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobTargetGroup{
			Name: to.Ptr("targetGroup1"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAgents/targetGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup1"),
			Properties: &armsql.JobTargetGroupProperties{
				Members: []*armsql.JobTarget{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobTargetGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobTargetGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobTargetGroupMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobTargetGroups_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteJobTargetGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a target group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobTargetGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"group1",
		"server1",
		"agent1",
		"targetGroup1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteJobTargetGroup.json: %v", err)
	}
}

func TestJobVersions_ListByJob(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all versions of a job."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobVersionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByJob("group1",
		"server1",
		"agent1",
		"job1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobVersions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.JobVersionListResult{
			Value: []*armsql.JobVersion{
				{
					Name: to.Ptr("1"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/versions"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/versions/1"),
				},
				{
					Name: to.Ptr("2"),
					Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/versions"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/versions/2"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobVersionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobVersionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListJobVersions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobVersions_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a version of a job."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewJobVersionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		1,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.JobVersion{
			Name: to.Ptr("1"),
			Type: to.Ptr("Microsoft.Sql/servers/jobAgents/jobs/versions"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/versions/1"),
		}
		if !reflect.DeepEqual(exampleRes, res.JobVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetJobVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCapabilities_ListByLocation(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/LocationCapabilityListByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List subscription capabilities in the given location."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewCapabilitiesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.ListByLocation(ctx,
		"eastus",
		&armsql.CapabilitiesClientListByLocationOptions{Include: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/LocationCapabilityListByLocation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.LocationCapabilities{
			Name:   to.Ptr("East US"),
			Status: to.Ptr(armsql.CapabilityStatusAvailable),
			SupportedManagedInstanceVersions: []*armsql.ManagedInstanceVersionCapability{
				{
					Name:   to.Ptr("12.0"),
					Status: to.Ptr(armsql.CapabilityStatusDefault),
					SupportedEditions: []*armsql.ManagedInstanceEditionCapability{
						{
							Name:   to.Ptr("GeneralPurpose"),
							Status: to.Ptr(armsql.CapabilityStatusDefault),
							SupportedFamilies: []*armsql.ManagedInstanceFamilyCapability{
								{
									Name:   to.Ptr("Gen4"),
									SKU:    to.Ptr("GP_Gen4"),
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedVcoresValues: []*armsql.ManagedInstanceVcoresCapability{
										{
											Name: to.Ptr("8"),
											IncludedMaxSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](262144),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusDefault),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												},
												{
													Name:   to.Ptr("SQL_EastUS_MI_1"),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												},
												{
													Name:   to.Ptr("SQL_EastUS_MI_2"),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												}},
											SupportedStorageSizes: []*armsql.MaxSizeRangeCapability{
												{
													MaxValue: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](8),
														Unit:  to.Ptr(armsql.MaxSizeUnitTerabytes),
													},
													MinValue: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](32),
														Unit:  to.Ptr(armsql.MaxSizeUnitGigabytes),
													},
													ScaleSize: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](32),
														Unit:  to.Ptr(armsql.MaxSizeUnitGigabytes),
													},
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												}},
											Value: to.Ptr[int32](8),
										},
										{
											Name: to.Ptr("16"),
											IncludedMaxSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](262144),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												},
												{
													Name:   to.Ptr("SQL_EastUS_MI_1"),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												},
												{
													Name:   to.Ptr("SQL_EastUS_MI_2"),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												}},
											SupportedStorageSizes: []*armsql.MaxSizeRangeCapability{
												{
													MaxValue: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](8),
														Unit:  to.Ptr(armsql.MaxSizeUnitTerabytes),
													},
													MinValue: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](32),
														Unit:  to.Ptr(armsql.MaxSizeUnitGigabytes),
													},
													ScaleSize: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](32),
														Unit:  to.Ptr(armsql.MaxSizeUnitGigabytes),
													},
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												}},
											Value: to.Ptr[int32](16),
										},
										{
											Name: to.Ptr("24"),
											IncludedMaxSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](262144),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												},
												{
													Name:   to.Ptr("SQL_EastUS_MI_1"),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												},
												{
													Name:   to.Ptr("SQL_EastUS_MI_2"),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												}},
											SupportedStorageSizes: []*armsql.MaxSizeRangeCapability{
												{
													MaxValue: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](8),
														Unit:  to.Ptr(armsql.MaxSizeUnitTerabytes),
													},
													MinValue: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](32),
														Unit:  to.Ptr(armsql.MaxSizeUnitGigabytes),
													},
													ScaleSize: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](32),
														Unit:  to.Ptr(armsql.MaxSizeUnitGigabytes),
													},
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												}},
											Value: to.Ptr[int32](24),
										}},
								},
								{
									Name:   to.Ptr("Gen5"),
									SKU:    to.Ptr("GP_Gen5"),
									Status: to.Ptr(armsql.CapabilityStatusDefault),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedVcoresValues: []*armsql.ManagedInstanceVcoresCapability{
										{
											Name: to.Ptr("8"),
											IncludedMaxSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](262144),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusDefault),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												},
												{
													Name:   to.Ptr("SQL_EastUS_MI_1"),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												},
												{
													Name:   to.Ptr("SQL_EastUS_MI_2"),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												}},
											SupportedStorageSizes: []*armsql.MaxSizeRangeCapability{
												{
													MaxValue: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](8),
														Unit:  to.Ptr(armsql.MaxSizeUnitTerabytes),
													},
													MinValue: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](32),
														Unit:  to.Ptr(armsql.MaxSizeUnitGigabytes),
													},
													ScaleSize: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](32),
														Unit:  to.Ptr(armsql.MaxSizeUnitGigabytes),
													},
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												}},
											Value: to.Ptr[int32](8),
										},
										{
											Name: to.Ptr("16"),
											IncludedMaxSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](262144),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												},
												{
													Name:   to.Ptr("SQL_EastUS_MI_1"),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												},
												{
													Name:   to.Ptr("SQL_EastUS_MI_2"),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												}},
											SupportedStorageSizes: []*armsql.MaxSizeRangeCapability{
												{
													MaxValue: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](8),
														Unit:  to.Ptr(armsql.MaxSizeUnitTerabytes),
													},
													MinValue: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](32),
														Unit:  to.Ptr(armsql.MaxSizeUnitGigabytes),
													},
													ScaleSize: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](32),
														Unit:  to.Ptr(armsql.MaxSizeUnitGigabytes),
													},
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												}},
											Value: to.Ptr[int32](16),
										},
										{
											Name: to.Ptr("24"),
											IncludedMaxSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](262144),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												},
												{
													Name:   to.Ptr("SQL_EastUS_MI_1"),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												},
												{
													Name:   to.Ptr("SQL_EastUS_MI_2"),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												}},
											SupportedStorageSizes: []*armsql.MaxSizeRangeCapability{
												{
													MaxValue: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](8),
														Unit:  to.Ptr(armsql.MaxSizeUnitTerabytes),
													},
													MinValue: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](32),
														Unit:  to.Ptr(armsql.MaxSizeUnitGigabytes),
													},
													ScaleSize: &armsql.MaxSizeCapability{
														Limit: to.Ptr[int32](32),
														Unit:  to.Ptr(armsql.MaxSizeUnitGigabytes),
													},
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
												}},
											Value: to.Ptr[int32](24),
										}},
								}},
							SupportedStorageCapabilities: []*armsql.StorageCapability{
								{
									Status:             to.Ptr(armsql.CapabilityStatusDefault),
									StorageAccountType: to.Ptr(armsql.StorageCapabilityStorageAccountTypeGRS),
								},
								{
									Status:             to.Ptr(armsql.CapabilityStatusAvailable),
									StorageAccountType: to.Ptr(armsql.StorageCapabilityStorageAccountTypeLRS),
								},
								{
									Reason:             to.Ptr("ZRS is available in multi-az regions"),
									Status:             to.Ptr(armsql.CapabilityStatusVisible),
									StorageAccountType: to.Ptr(armsql.StorageCapabilityStorageAccountTypeZRS),
								}},
						},
						{
							Name:   to.Ptr("Hyperscale"),
							Status: to.Ptr(armsql.CapabilityStatusAvailable),
							SupportedFamilies: []*armsql.ManagedInstanceFamilyCapability{
								{
									Name:   to.Ptr("Gen4"),
									SKU:    to.Ptr("HS_Gen4"),
									Status: to.Ptr(armsql.CapabilityStatusDefault),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedVcoresValues: []*armsql.ManagedInstanceVcoresCapability{
										{
											Name:                  to.Ptr("4"),
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												}},
											Value: to.Ptr[int32](4),
										},
										{
											Name:                  to.Ptr("8"),
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusDefault),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												}},
											Value: to.Ptr[int32](8),
										},
										{
											Name:                  to.Ptr("16"),
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												}},
											Value: to.Ptr[int32](16),
										},
										{
											Name:                  to.Ptr("24"),
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												}},
											Value: to.Ptr[int32](24),
										}},
								},
								{
									Name:   to.Ptr("Gen5"),
									SKU:    to.Ptr("HS_Gen5"),
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedVcoresValues: []*armsql.ManagedInstanceVcoresCapability{
										{
											Name:                  to.Ptr("4"),
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												}},
											Value: to.Ptr[int32](4),
										},
										{
											Name:                  to.Ptr("8"),
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusDefault),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												}},
											Value: to.Ptr[int32](8),
										},
										{
											Name:                  to.Ptr("16"),
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												}},
											Value: to.Ptr[int32](16),
										},
										{
											Name:                  to.Ptr("24"),
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												}},
											Value: to.Ptr[int32](24),
										},
										{
											Name:                  to.Ptr("32"),
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												}},
											Value: to.Ptr[int32](32),
										},
										{
											Name:                  to.Ptr("40"),
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												}},
											Value: to.Ptr[int32](40),
										},
										{
											Name:                  to.Ptr("48"),
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												}},
											Value: to.Ptr[int32](48),
										},
										{
											Name:                  to.Ptr("64"),
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												}},
											Value: to.Ptr[int32](64),
										},
										{
											Name:                  to.Ptr("80"),
											InstancePoolSupported: to.Ptr(true),
											StandaloneSupported:   to.Ptr(true),
											Status:                to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedMaintenanceConfigurations: []*armsql.ManagedInstanceMaintenanceConfigurationCapability{
												{
													Name:   to.Ptr("SQL_Default"),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
												}},
											Value: to.Ptr[int32](80),
										}},
								}},
							SupportedStorageCapabilities: []*armsql.StorageCapability{
								{
									Status:             to.Ptr(armsql.CapabilityStatusDefault),
									StorageAccountType: to.Ptr(armsql.StorageCapabilityStorageAccountTypeGRS),
								},
								{
									Status:             to.Ptr(armsql.CapabilityStatusAvailable),
									StorageAccountType: to.Ptr(armsql.StorageCapabilityStorageAccountTypeLRS),
								},
								{
									Reason:             to.Ptr("ZRS is available in multi-az regions"),
									Status:             to.Ptr(armsql.CapabilityStatusAvailable),
									StorageAccountType: to.Ptr(armsql.StorageCapabilityStorageAccountTypeZRS),
								}},
						}},
					SupportedInstancePoolEditions: []*armsql.InstancePoolEditionCapability{
						{
							Name:   to.Ptr("GeneralPurpose"),
							Status: to.Ptr(armsql.CapabilityStatusDefault),
							SupportedFamilies: []*armsql.InstancePoolFamilyCapability{
								{
									Name:   to.Ptr("Gen5"),
									Status: to.Ptr(armsql.CapabilityStatusDefault),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedVcoresValues: []*armsql.InstancePoolVcoresCapability{
										{
											Name:   to.Ptr("GP_Gen5_8"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
											StorageLimit: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](8388608),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Value: to.Ptr[int32](8),
										},
										{
											Name:   to.Ptr("GP_Gen5_16"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											StorageLimit: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](8388608),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Value: to.Ptr[int32](16),
										},
										{
											Name:   to.Ptr("GP_Gen5_24"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											StorageLimit: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](8388608),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Value: to.Ptr[int32](24),
										},
										{
											Name:   to.Ptr("GP_Gen5_32"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											StorageLimit: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](8388608),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Value: to.Ptr[int32](32),
										},
										{
											Name:   to.Ptr("GP_Gen5_40"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											StorageLimit: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](8388608),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Value: to.Ptr[int32](40),
										},
										{
											Name:   to.Ptr("GP_Gen5_64"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											StorageLimit: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](8388608),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Value: to.Ptr[int32](64),
										},
										{
											Name:   to.Ptr("GP_Gen5_80"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											StorageLimit: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](8388608),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Value: to.Ptr[int32](80),
										}},
								}},
						}},
				}},
			SupportedServerVersions: []*armsql.ServerVersionCapability{
				{
					Name:   to.Ptr("12.0"),
					Status: to.Ptr(armsql.CapabilityStatusDefault),
					SupportedEditions: []*armsql.EditionCapability{
						{
							Name: to.Ptr("Hyperscale"),
							ReadScale: &armsql.ReadScaleCapability{
								MaxNumberOfReplicas: to.Ptr[int32](4),
							},
							Status: to.Ptr(armsql.CapabilityStatusAvailable),
							SupportedServiceLevelObjectives: []*armsql.ServiceObjectiveCapability{
								{
									Name:         to.Ptr("HS_Gen4_1"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("9380cd0e-b025-4e9d-829c-c1918c1614bb"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](1),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen4"),
										Capacity: to.Ptr[int32](1),
										Family:   to.Ptr("Gen4"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen4_2"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("34497c3f-24b9-4cee-968d-6e5e854670fe"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](2),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen4"),
										Capacity: to.Ptr[int32](2),
										Family:   to.Ptr("Gen4"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen5_2"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("a420d2b2-ca32-4152-b1c6-dd8d4d9fd734"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](2),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen5"),
										Capacity: to.Ptr[int32](2),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusDefault),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen4_3"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("5de845d2-2055-428c-b507-94131358cdd7"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](3),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen4"),
										Capacity: to.Ptr[int32](3),
										Family:   to.Ptr("Gen4"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen4_4"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("d060b874-21f3-47b0-a9bd-a1a737cfcc6e"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](4),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen4"),
										Capacity: to.Ptr[int32](4),
										Family:   to.Ptr("Gen4"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen5_4"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("60dba88b-2dfa-4123-be57-bd0dbfd92a72"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](4),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen5"),
										Capacity: to.Ptr[int32](4),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen4_5"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("925a0916-15fb-4764-aa76-533d97f2d782"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](5),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen4"),
										Capacity: to.Ptr[int32](5),
										Family:   to.Ptr("Gen4"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen4_6"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("d7aa11c2-e4c7-442a-962e-308b371f5ec1"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](6),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen4"),
										Capacity: to.Ptr[int32](6),
										Family:   to.Ptr("Gen4"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen5_6"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("b9c594ec-a3fe-4bfe-808d-a595410d0a07"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](6),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen5"),
										Capacity: to.Ptr[int32](6),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen4_7"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("d77eef57-6c00-4003-b140-822509b8736a"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](7),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen4"),
										Capacity: to.Ptr[int32](7),
										Family:   to.Ptr("Gen4"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen4_8"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("694bf389-7cb2-4461-8fa2-0b06d8438315"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](8),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen4"),
										Capacity: to.Ptr[int32](8),
										Family:   to.Ptr("Gen4"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen5_8"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("efdfac5f-3f8e-4500-95b1-684c07349860"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](8),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen5"),
										Capacity: to.Ptr[int32](8),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen4_9"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("554ea52a-9ecc-4d87-bbc7-1e257705da3f"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](9),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen4"),
										Capacity: to.Ptr[int32](9),
										Family:   to.Ptr("Gen4"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen4_10"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("576f3f38-b950-4eaa-b74e-33d831193441"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](10),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen4"),
										Capacity: to.Ptr[int32](10),
										Family:   to.Ptr("Gen4"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen5_10"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("69697c3a-1946-4eb8-a5a4-a269168dde27"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](10),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen5"),
										Capacity: to.Ptr[int32](10),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen5_12"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("1bee9dc8-68b4-44df-b870-8ab0e4d71e94"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](12),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen5"),
										Capacity: to.Ptr[int32](12),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen5_14"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("07a8341d-c0b2-4000-bc7a-5b4dae2ad210"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](14),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen5"),
										Capacity: to.Ptr[int32](14),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen4_16"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("7fc1f700-a45d-499e-901f-2a00645c54db"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](16),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen4"),
										Capacity: to.Ptr[int32](16),
										Family:   to.Ptr("Gen4"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen5_16"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("6b56f70b-52e5-44ba-8cd5-4f63d224b206"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](16),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen5"),
										Capacity: to.Ptr[int32](16),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen5_18"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("ba0029f2-3ff4-4ef6-9e65-e8f77b5dd1e2"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](18),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen5"),
										Capacity: to.Ptr[int32](18),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen5_20"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("f1b2a082-f622-4fb8-bbef-e74deac3ec89"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](20),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen5"),
										Capacity: to.Ptr[int32](20),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen4_24"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("f016d419-a031-4b93-ab62-7f3d2a789376"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](24),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen4"),
										Capacity: to.Ptr[int32](24),
										Family:   to.Ptr("Gen4"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen5_24"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("222bc0ee-e195-4bbc-be05-3b849c3a8195"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](24),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen5"),
										Capacity: to.Ptr[int32](24),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen5_32"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("05366cca-cc70-486e-a697-bb3fab877f75"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](32),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen5"),
										Capacity: to.Ptr[int32](32),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen5_40"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("32542ef7-124d-4e66-8b41-9c6c0ab963c2"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](40),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen5"),
										Capacity: to.Ptr[int32](40),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									Name:         to.Ptr("HS_Gen5_80"),
									ComputeModel: to.Ptr("Provisioned"),
									ID:           to.Ptr("6509db45-febe-44dd-a079-35f11d477984"),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](80),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("HS_Gen5"),
										Capacity: to.Ptr[int32](80),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("Hyperscale"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										}},
									ZoneRedundant: to.Ptr(false),
								}},
							SupportedStorageCapabilities: []*armsql.StorageCapability{
								{
									Status:             to.Ptr(armsql.CapabilityStatusDefault),
									StorageAccountType: to.Ptr(armsql.StorageCapabilityStorageAccountTypeGRS),
								},
								{
									Status:             to.Ptr(armsql.CapabilityStatusAvailable),
									StorageAccountType: to.Ptr(armsql.StorageCapabilityStorageAccountTypeLRS),
								},
								{
									Reason:             to.Ptr("ZRS is available in multi-az regions"),
									Status:             to.Ptr(armsql.CapabilityStatusAvailable),
									StorageAccountType: to.Ptr(armsql.StorageCapabilityStorageAccountTypeZRS),
								}},
							ZoneRedundant: to.Ptr(false),
						}},
					SupportedElasticPoolEditions: []*armsql.ElasticPoolEditionCapability{
						{
							Name:   to.Ptr("BusinessCritical"),
							Status: to.Ptr(armsql.CapabilityStatusAvailable),
							SupportedElasticPoolPerformanceLevels: []*armsql.ElasticPoolPerformanceLevelCapability{
								{
									MaxDatabaseCount: to.Ptr[int32](100),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](3),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("BC_Gen4"),
										Capacity: to.Ptr[int32](3),
										Family:   to.Ptr("Gen4"),
										Tier:     to.Ptr("BusinessCritical"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										},
										{
											Name:          to.Ptr("SQL_EastUS_DB_1"),
											Status:        to.Ptr(armsql.CapabilityStatusAvailable),
											ZoneRedundant: to.Ptr(false),
										},
										{
											Name:          to.Ptr("SQL_EastUS_DB_2"),
											Status:        to.Ptr(armsql.CapabilityStatusAvailable),
											ZoneRedundant: to.Ptr(false),
										}},
									SupportedMaxSizes: []*armsql.MaxSizeRangeCapability{
										{
											LogSize: &armsql.LogSizeCapability{
												Limit: to.Ptr[int32](30),
												Unit:  to.Ptr(armsql.LogSizeUnitPercent),
											},
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](31744),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										},
										{
											LogSize: &armsql.LogSizeCapability{
												Limit: to.Ptr[int32](30),
												Unit:  to.Ptr(armsql.LogSizeUnitPercent),
											},
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](32768),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](32768),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](0),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											LogSize: &armsql.LogSizeCapability{
												Limit: to.Ptr[int32](30),
												Unit:  to.Ptr(armsql.LogSizeUnitPercent),
											},
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1048576),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](33792),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedPerDatabaseMaxPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMaxPerformanceLevelCapability{
										{
											Limit:  to.Ptr[float64](0.25),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.25),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](0.5),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.25),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.5),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](1),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.25),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.5),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](1),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](2),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.25),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.5),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](1),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](2),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](3),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.25),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.5),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](1),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](2),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](3),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										}},
									SupportedPerDatabaseMaxSizes: []*armsql.MaxSizeRangeCapability{
										{
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](31744),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										},
										{
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](32768),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](32768),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](0),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1048576),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](33792),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									ZoneRedundant: to.Ptr(false),
								},
								{
									MaxDatabaseCount: to.Ptr[int32](100),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](12),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("BC_Gen5"),
										Capacity: to.Ptr[int32](12),
										Family:   to.Ptr("Gen5"),
										Tier:     to.Ptr("BusinessCritical"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										},
										{
											Name:          to.Ptr("SQL_EastUS_DB_1"),
											Status:        to.Ptr(armsql.CapabilityStatusAvailable),
											ZoneRedundant: to.Ptr(false),
										},
										{
											Name:          to.Ptr("SQL_EastUS_DB_2"),
											Status:        to.Ptr(armsql.CapabilityStatusAvailable),
											ZoneRedundant: to.Ptr(false),
										}},
									SupportedMaxSizes: []*armsql.MaxSizeRangeCapability{
										{
											LogSize: &armsql.LogSizeCapability{
												Limit: to.Ptr[int32](30),
												Unit:  to.Ptr(armsql.LogSizeUnitPercent),
											},
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](31744),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										},
										{
											LogSize: &armsql.LogSizeCapability{
												Limit: to.Ptr[int32](30),
												Unit:  to.Ptr(armsql.LogSizeUnitPercent),
											},
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](32768),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](32768),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](0),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											LogSize: &armsql.LogSizeCapability{
												Limit: to.Ptr[int32](30),
												Unit:  to.Ptr(armsql.LogSizeUnitPercent),
											},
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](3144704),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](33792),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										},
										{
											LogSize: &armsql.LogSizeCapability{
												Limit: to.Ptr[int32](1048576),
												Unit:  to.Ptr(armsql.LogSizeUnitMegabytes),
											},
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](3145728),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](3145728),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](0),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedPerDatabaseMaxPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMaxPerformanceLevelCapability{
										{
											Limit:  to.Ptr[float64](0.25),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.25),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](0.5),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.25),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.5),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](1),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.25),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.5),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](1),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](2),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.25),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.5),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](1),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](2),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](4),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.25),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.5),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](1),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](2),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](4),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](6),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.25),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.5),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](1),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](2),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](4),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](6),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](8),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.25),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.5),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](1),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](2),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](4),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](6),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](10),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.25),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.5),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](1),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](2),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](4),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](6),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](10),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](12),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.25),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](0.5),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](1),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](2),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](4),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](6),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](10),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](12),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										}},
									SupportedPerDatabaseMaxSizes: []*armsql.MaxSizeRangeCapability{
										{
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](31744),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										},
										{
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](32768),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](32768),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](0),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](3144704),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](33792),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										},
										{
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](3145728),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](3145728),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](0),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									ZoneRedundant: to.Ptr(true),
								},
								{
									MaxDatabaseCount: to.Ptr[int32](100),
									PerformanceLevel: &armsql.PerformanceLevelCapability{
										Unit:  to.Ptr(armsql.PerformanceLevelUnitVCores),
										Value: to.Ptr[float64](128),
									},
									SKU: &armsql.SKU{
										Name:     to.Ptr("BC_M"),
										Capacity: to.Ptr[int32](128),
										Family:   to.Ptr("M"),
										Tier:     to.Ptr("BusinessCritical"),
									},
									Status: to.Ptr(armsql.CapabilityStatusAvailable),
									SupportedLicenseTypes: []*armsql.LicenseTypeCapability{
										{
											Name:   to.Ptr("LicenseIncluded"),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											Name:   to.Ptr("BasePrice"),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedMaintenanceConfigurations: []*armsql.MaintenanceConfigurationCapability{
										{
											Name:          to.Ptr("SQL_Default"),
											Status:        to.Ptr(armsql.CapabilityStatusDefault),
											ZoneRedundant: to.Ptr(false),
										},
										{
											Name:          to.Ptr("SQL_EastUS_DB_1"),
											Status:        to.Ptr(armsql.CapabilityStatusAvailable),
											ZoneRedundant: to.Ptr(false),
										},
										{
											Name:          to.Ptr("SQL_EastUS_DB_2"),
											Status:        to.Ptr(armsql.CapabilityStatusAvailable),
											ZoneRedundant: to.Ptr(false),
										}},
									SupportedMaxSizes: []*armsql.MaxSizeRangeCapability{
										{
											LogSize: &armsql.LogSizeCapability{
												Limit: to.Ptr[int32](30),
												Unit:  to.Ptr(armsql.LogSizeUnitPercent),
											},
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](31744),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										},
										{
											LogSize: &armsql.LogSizeCapability{
												Limit: to.Ptr[int32](30),
												Unit:  to.Ptr(armsql.LogSizeUnitPercent),
											},
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](32768),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](32768),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](0),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											LogSize: &armsql.LogSizeCapability{
												Limit: to.Ptr[int32](30),
												Unit:  to.Ptr(armsql.LogSizeUnitPercent),
											},
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](3144704),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](33792),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										},
										{
											LogSize: &armsql.LogSizeCapability{
												Limit: to.Ptr[int32](1048576),
												Unit:  to.Ptr(armsql.LogSizeUnitMegabytes),
											},
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](4194304),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](3145728),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									SupportedPerDatabaseMaxPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMaxPerformanceLevelCapability{
										{
											Limit:  to.Ptr[float64](8),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](10),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](10),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](12),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](10),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](12),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](14),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](10),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](12),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](14),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](16),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](10),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](12),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](14),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](16),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](18),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](10),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](12),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](14),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](16),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](18),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](20),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](10),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](12),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](14),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](16),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](18),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](20),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](24),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](10),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](12),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](14),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](16),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](18),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](20),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](24),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](32),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](10),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](12),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](14),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](16),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](18),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](20),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](24),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](32),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](40),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](10),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](12),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](14),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](16),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](18),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](20),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](24),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](32),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](40),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](64),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](10),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](12),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](14),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](16),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](18),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](20),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](24),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](32),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](40),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](64),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](80),
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](10),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](12),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](14),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](16),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](18),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](20),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](24),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](32),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](40),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](64),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](80),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										},
										{
											Limit:  to.Ptr[float64](128),
											Status: to.Ptr(armsql.CapabilityStatusDefault),
											SupportedPerDatabaseMinPerformanceLevels: []*armsql.ElasticPoolPerDatabaseMinPerformanceLevelCapability{
												{
													Limit:  to.Ptr[float64](0),
													Status: to.Ptr(armsql.CapabilityStatusDefault),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](8),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](10),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](12),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](14),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](16),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](18),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](20),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](24),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](32),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](40),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](64),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](80),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												},
												{
													Limit:  to.Ptr[float64](128),
													Status: to.Ptr(armsql.CapabilityStatusAvailable),
													Unit:   to.Ptr(armsql.PerformanceLevelUnitVCores),
												}},
											Unit: to.Ptr(armsql.PerformanceLevelUnitVCores),
										}},
									SupportedPerDatabaseMaxSizes: []*armsql.MaxSizeRangeCapability{
										{
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](31744),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										},
										{
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](32768),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](32768),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](0),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusDefault),
										},
										{
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](3144704),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](33792),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										},
										{
											MaxValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](4194304),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											MinValue: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](3145728),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											ScaleSize: &armsql.MaxSizeCapability{
												Limit: to.Ptr[int32](1024),
												Unit:  to.Ptr(armsql.MaxSizeUnitMegabytes),
											},
											Status: to.Ptr(armsql.CapabilityStatusAvailable),
										}},
									ZoneRedundant: to.Ptr(false),
								}},
							ZoneRedundant: to.Ptr(false),
						}},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.LocationCapabilities) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LocationCapabilities)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/LocationCapabilityListByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/LongTermRetentionPolicyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the long term retention policy for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup",
		"testserver",
		"testDatabase",
		armsql.LongTermRetentionPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/LongTermRetentionPolicyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.LongTermRetentionPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/resourceGroups/servers/databases/backupLongTermRetentionPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/resourceGroups/resourceGroup/servers/testserver/databases/testDatabase/backupLongTermRetentionPolicies/default"),
			Properties: &armsql.BaseLongTermRetentionPolicyProperties{
				MonthlyRetention: to.Ptr("P1Y"),
				WeekOfYear:       to.Ptr[int32](5),
				WeeklyRetention:  to.Ptr("P1M"),
				YearlyRetention:  to.Ptr("P5Y"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LongTermRetentionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LongTermRetentionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/LongTermRetentionPolicyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/LongTermRetentionPolicyCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update the long term retention policy for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup",
		"testserver",
		"testDatabase",
		armsql.LongTermRetentionPolicyNameDefault,
		armsql.LongTermRetentionPolicy{
			Properties: &armsql.BaseLongTermRetentionPolicyProperties{
				MonthlyRetention: to.Ptr("P1Y"),
				WeekOfYear:       to.Ptr[int32](5),
				WeeklyRetention:  to.Ptr("P1M"),
				YearlyRetention:  to.Ptr("P5Y"),
			},
		},
		&armsql.LongTermRetentionPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/LongTermRetentionPolicyCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/LongTermRetentionPolicyCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.LongTermRetentionPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/resourceGroups/servers/databases/backupLongTermRetentionPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/resourceGroups/resourceGroup/servers/testserver/databases/testDatabase/backupLongTermRetentionPolicies/default"),
			Properties: &armsql.BaseLongTermRetentionPolicyProperties{
				MonthlyRetention: to.Ptr("P1Y"),
				WeekOfYear:       to.Ptr[int32](5),
				WeeklyRetention:  to.Ptr("P1M"),
				YearlyRetention:  to.Ptr("P5Y"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LongTermRetentionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LongTermRetentionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/LongTermRetentionPolicyCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionPolicies_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/LongTermRetentionPolicyListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the long term retention policy for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("resourceGroup",
		"testserver",
		"testDatabase",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/LongTermRetentionPolicyListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.LongTermRetentionPolicyListResult{
			Value: []*armsql.LongTermRetentionPolicy{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/resourceGroups/servers/databases/backupLongTermRetentionPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/resourceGroups/resourceGroup/servers/testserver/databases/testDatabase/backupLongTermRetentionPolicies/default"),
					Properties: &armsql.BaseLongTermRetentionPolicyProperties{
						MonthlyRetention: to.Ptr("P1Y"),
						WeekOfYear:       to.Ptr[int32](5),
						WeeklyRetention:  to.Ptr("P1M"),
						YearlyRetention:  to.Ptr("P5Y"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LongTermRetentionPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LongTermRetentionPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/LongTermRetentionPolicyListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMaintenanceWindowOptions_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetMaintenanceWindowOptions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a list of available maintenance windows for a selected database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewMaintenanceWindowOptionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"current",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetMaintenanceWindowOptions.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.MaintenanceWindowOptions{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/maintenancewindows"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/maintenancewindowoptions/current"),
			Properties: &armsql.MaintenanceWindowOptionsProperties{
				AllowMultipleMaintenanceWindowsPerCycle: to.Ptr(true),
				DefaultDurationInMinutes:                to.Ptr[int32](120),
				IsEnabled:                               to.Ptr(true),
				MaintenanceWindowCycles: []*armsql.MaintenanceWindowTimeRange{
					{
						DayOfWeek: to.Ptr(armsql.DayOfWeekSaturday),
						Duration:  to.Ptr("PT60M"),
						StartTime: to.Ptr("00:00:00"),
					}},
				MinCycles:                to.Ptr[int32](2),
				MinDurationInMinutes:     to.Ptr[int32](60),
				TimeGranularityInMinutes: to.Ptr[int32](5),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MaintenanceWindowOptions) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MaintenanceWindowOptions)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetMaintenanceWindowOptions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMaintenanceWindows_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetMaintenanceWindows.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets maintenance window settings for a selected database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewMaintenanceWindowsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"current",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetMaintenanceWindows.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.MaintenanceWindows{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/maintenancewindows"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/maintenancewindows/current"),
			Properties: &armsql.MaintenanceWindowsProperties{
				TimeRanges: []*armsql.MaintenanceWindowTimeRange{
					{
						DayOfWeek: to.Ptr(armsql.DayOfWeekSaturday),
						Duration:  to.Ptr("PT60M"),
						StartTime: to.Ptr("00:00:00"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MaintenanceWindows) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MaintenanceWindows)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetMaintenanceWindows.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMaintenanceWindows_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateMaintenanceWindows.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sets maintenance window settings for a selected database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewMaintenanceWindowsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.CreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdwdb",
		"current",
		armsql.MaintenanceWindows{
			Properties: &armsql.MaintenanceWindowsProperties{
				TimeRanges: []*armsql.MaintenanceWindowTimeRange{
					{
						DayOfWeek: to.Ptr(armsql.DayOfWeekSaturday),
						Duration:  to.Ptr("PT60M"),
						StartTime: to.Ptr("00:00:00"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateMaintenanceWindows.json: %v", err)
	}
}

func TestManagedBackupShortTermRetentionPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetManagedShortTermRetentionPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the short term retention policy for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedBackupShortTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.ManagedShortTermRetentionPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetManagedShortTermRetentionPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedBackupShortTermRetentionPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/databases/backupShortTermRetentionPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/databases/testdb/backupShortTermRetentionPolicies/default"),
			Properties: &armsql.ManagedBackupShortTermRetentionPolicyProperties{
				RetentionDays: to.Ptr[int32](14),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedBackupShortTermRetentionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedBackupShortTermRetentionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetManagedShortTermRetentionPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedBackupShortTermRetentionPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the short term retention policy for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedBackupShortTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup",
		"testsvr",
		"testdb",
		armsql.ManagedShortTermRetentionPolicyNameDefault,
		armsql.ManagedBackupShortTermRetentionPolicy{
			Properties: &armsql.ManagedBackupShortTermRetentionPolicyProperties{
				RetentionDays: to.Ptr[int32](14),
			},
		},
		&armsql.ManagedBackupShortTermRetentionPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicy.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedBackupShortTermRetentionPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/databases/backupShortTermRetentionPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup/providers/Microsoft.Sql/managedInstances/testsvr/databases/testdb/backupShortTermRetentionPolicies/default"),
			Properties: &armsql.ManagedBackupShortTermRetentionPolicyProperties{
				RetentionDays: to.Ptr[int32](14),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedBackupShortTermRetentionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedBackupShortTermRetentionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedBackupShortTermRetentionPolicies_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the short term retention policy for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedBackupShortTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"resourceGroup",
		"testsvr",
		"testdb",
		armsql.ManagedShortTermRetentionPolicyNameDefault,
		armsql.ManagedBackupShortTermRetentionPolicy{
			Properties: &armsql.ManagedBackupShortTermRetentionPolicyProperties{
				RetentionDays: to.Ptr[int32](14),
			},
		},
		&armsql.ManagedBackupShortTermRetentionPoliciesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicy.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedBackupShortTermRetentionPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/databases/backupShortTermRetentionPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup/providers/Microsoft.Sql/managedInstances/testsvr/databases/testdb/backupShortTermRetentionPolicies/default"),
			Properties: &armsql.ManagedBackupShortTermRetentionPolicyProperties{
				RetentionDays: to.Ptr[int32](14),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedBackupShortTermRetentionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedBackupShortTermRetentionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedBackupShortTermRetentionPolicies_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetListManagedShortTermRetentionPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the short term retention policy list for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedBackupShortTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetListManagedShortTermRetentionPolicy.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedBackupShortTermRetentionPolicyListResult{
			Value: []*armsql.ManagedBackupShortTermRetentionPolicy{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/restorableDroppedDatabases/backupShortTermRetentionPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/databases/testdb,131403269876900000/backupShortTermRetentionPolicies/default"),
					Properties: &armsql.ManagedBackupShortTermRetentionPolicyProperties{
						RetentionDays: to.Ptr[int32](14),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedBackupShortTermRetentionPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedBackupShortTermRetentionPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetListManagedShortTermRetentionPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseColumns_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedColumnsListByDatabaseMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Filter managed database columns"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseColumnsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("myRG",
		"serverName",
		"myDatabase",
		&armsql.ManagedDatabaseColumnsClientListByDatabaseOptions{Schema: []string{
			"dbo"},
			Table: []string{
				"customer",
				"address"},
			Column: []string{
				"username"},
			OrderBy: []string{
				"schema asc",
				"table",
				"column desc"},
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedColumnsListByDatabaseMax.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseColumnListResult{
			Value: []*armsql.DatabaseColumn{
				{
					Name: to.Ptr("username"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables/columns"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/serverName/databases/myDatabase/schemas/dbo/tables/customer/columns/username"),
					Properties: &armsql.DatabaseColumnProperties{
						ColumnType:      to.Ptr(armsql.ColumnDataTypeNvarchar),
						IsComputed:      to.Ptr(false),
						MemoryOptimized: to.Ptr(false),
						TemporalType:    to.Ptr(armsql.TableTemporalTypeNonTemporalTable),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseColumnListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseColumnListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedColumnsListByDatabaseMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedColumnsListByDatabaseMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed database columns"},
	})
	client = armsql.NewManagedDatabaseColumnsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager = client.ListByDatabase("myRG",
		"serverName",
		"myDatabase",
		&armsql.ManagedDatabaseColumnsClientListByDatabaseOptions{Schema: []string{},
			Table:     []string{},
			Column:    []string{},
			OrderBy:   []string{},
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedColumnsListByDatabaseMin.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseColumnListResult{
			Value: []*armsql.DatabaseColumn{
				{
					Name: to.Ptr("col1"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables/columns"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/serverName/databases/myDatabase/schemas/dbo/tables/table1/columns/col1"),
					Properties: &armsql.DatabaseColumnProperties{
						ColumnType:      to.Ptr(armsql.ColumnDataTypeInt),
						IsComputed:      to.Ptr(false),
						MemoryOptimized: to.Ptr(false),
						TemporalType:    to.Ptr(armsql.TableTemporalTypeNonTemporalTable),
					},
				},
				{
					Name: to.Ptr("col2"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables/columns"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/serverName/databases/myDatabase/schemas/dbo/tables/table1/columns/col2"),
					Properties: &armsql.DatabaseColumnProperties{
						ColumnType:      to.Ptr(armsql.ColumnDataTypeBit),
						IsComputed:      to.Ptr(false),
						MemoryOptimized: to.Ptr(false),
						TemporalType:    to.Ptr(armsql.TableTemporalTypeSystemVersionedTemporalTable),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseColumnListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseColumnListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedColumnsListByDatabaseMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseColumns_ListByTable(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseColumnListByTable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed database columns"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseColumnsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByTable("myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"table1",
		&armsql.ManagedDatabaseColumnsClientListByTableOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseColumnListByTable.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseColumnListResult{
			Value: []*armsql.DatabaseColumn{
				{
					Name: to.Ptr("col1"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables/columns"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/dbo/tables/table1/columns/col1"),
					Properties: &armsql.DatabaseColumnProperties{
						ColumnType: to.Ptr(armsql.ColumnDataTypeNvarchar),
					},
				},
				{
					Name: to.Ptr("col2"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables/columns"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/dbo/tables/table1/columns/col2"),
					Properties: &armsql.DatabaseColumnProperties{
						ColumnType: to.Ptr(armsql.ColumnDataTypeBit),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseColumnListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseColumnListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseColumnListByTable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseColumns_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseColumnGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get managed database column"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseColumnsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"table1",
		"column1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseColumnGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseColumn{
			Name: to.Ptr("column1"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables/columns"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/dbo/tables/table1/columns/column1"),
			Properties: &armsql.DatabaseColumnProperties{
				ColumnType: to.Ptr(armsql.ColumnDataTypeBit),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseColumn) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseColumn)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseColumnGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseQueries_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceQueryGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Obtain query properties"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseQueriesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"database_1",
		"42",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceQueryGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceQuery{
			Type: to.Ptr("Microsoft.Sql/managedInstances/databases/queries"),
			ID:   to.Ptr("42"),
			Properties: &armsql.QueryProperties{
				QueryText: to.Ptr("select * from DUMMY_TABLE"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceQuery) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceQuery)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceQueryGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseQueries_ListByQuery(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceQueryStatisticsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Obtain query execution statistics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseQueriesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByQuery("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"database_1",
		"42",
		&armsql.ManagedDatabaseQueriesClientListByQueryOptions{StartTime: nil,
			EndTime:  nil,
			Interval: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceQueryStatisticsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceQueryStatistics{
			Value: []*armsql.QueryStatistics{
				{
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/queries/statistics"),
					ID:   to.Ptr("35"),
					Properties: &armsql.QueryStatisticsProperties{
						DatabaseName: to.Ptr("db1"),
						EndTime:      to.Ptr("03/02/2020 18:34:58"),
						Intervals: []*armsql.QueryMetricInterval{
							{
								ExecutionCount:    to.Ptr[int64](160),
								IntervalStartTime: to.Ptr("03/02/2020 08:00:00"),
								IntervalType:      to.Ptr(armsql.QueryTimeGrainTypePT1H),
								Metrics: []*armsql.QueryMetricProperties{
									{
										Name:        to.Ptr("cpu"),
										Avg:         to.Ptr[float64](0.00001665347222222222),
										DisplayName: to.Ptr("Cpu"),
										Max:         to.Ptr[float64](0.000025243055555555557),
										Min:         to.Ptr[float64](0.00001507638888888889),
										Stdev:       to.Ptr[float64](0.0000014894345929850385),
										Sum:         to.Ptr[float64](0.0026645555555555554),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("io"),
										Avg:         to.Ptr[float64](0),
										DisplayName: to.Ptr("Physical Io Reads"),
										Max:         to.Ptr[float64](0),
										Min:         to.Ptr[float64](0),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("logIo"),
										Avg:         to.Ptr[float64](0),
										DisplayName: to.Ptr("Log Writes"),
										Max:         to.Ptr[float64](0),
										Min:         to.Ptr[float64](0),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("memory"),
										Avg:         to.Ptr[float64](0),
										DisplayName: to.Ptr("Memory consumption"),
										Max:         to.Ptr[float64](0),
										Min:         to.Ptr[float64](0),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("duration"),
										Avg:         to.Ptr[float64](5026.625),
										DisplayName: to.Ptr("Query duration"),
										Max:         to.Ptr[float64](18490),
										Min:         to.Ptr[float64](4373),
										Stdev:       to.Ptr[float64](1487.3520882343225),
										Sum:         to.Ptr[float64](804260),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
										Value:       to.Ptr[float64](0),
									}},
							},
							{
								ExecutionCount:    to.Ptr[int64](20),
								IntervalStartTime: to.Ptr("03/02/2020 09:00:00"),
								IntervalType:      to.Ptr(armsql.QueryTimeGrainTypePT1H),
								Metrics: []*armsql.QueryMetricProperties{
									{
										Name:        to.Ptr("cpu"),
										Avg:         to.Ptr[float64](0.00004479774305555555),
										DisplayName: to.Ptr("Cpu"),
										Max:         to.Ptr[float64](0.00014645833333333332),
										Min:         to.Ptr[float64](0.000023430555555555557),
										Stdev:       to.Ptr[float64](0.00003830118344204395),
										Sum:         to.Ptr[float64](0.0008959548611111111),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("io"),
										Avg:         to.Ptr[float64](0),
										DisplayName: to.Ptr("Physical Io Reads"),
										Max:         to.Ptr[float64](0),
										Min:         to.Ptr[float64](0),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("logIo"),
										Avg:         to.Ptr[float64](0),
										DisplayName: to.Ptr("Log Writes"),
										Max:         to.Ptr[float64](0),
										Min:         to.Ptr[float64](0),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("memory"),
										Avg:         to.Ptr[float64](0),
										DisplayName: to.Ptr("Memory consumption"),
										Max:         to.Ptr[float64](0),
										Min:         to.Ptr[float64](0),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("duration"),
										Avg:         to.Ptr[float64](12963.2),
										DisplayName: to.Ptr("Query duration"),
										Max:         to.Ptr[float64](42289),
										Min:         to.Ptr[float64](6813),
										Stdev:       to.Ptr[float64](11040.140794392071),
										Sum:         to.Ptr[float64](259264),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
										Value:       to.Ptr[float64](0),
									}},
							},
							{
								ExecutionCount:    to.Ptr[int64](80),
								IntervalStartTime: to.Ptr("03/02/2020 15:00:00"),
								IntervalType:      to.Ptr(armsql.QueryTimeGrainTypePT1H),
								Metrics: []*armsql.QueryMetricProperties{
									{
										Name:        to.Ptr("cpu"),
										Avg:         to.Ptr[float64](0.000019315538194444445),
										DisplayName: to.Ptr("Cpu"),
										Max:         to.Ptr[float64](0.00002764236111111111),
										Min:         to.Ptr[float64](0.000018215277777777777),
										Stdev:       to.Ptr[float64](0.0000010716305801875179),
										Sum:         to.Ptr[float64](0.0015452430555555556),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("io"),
										Avg:         to.Ptr[float64](0),
										DisplayName: to.Ptr("Physical Io Reads"),
										Max:         to.Ptr[float64](0),
										Min:         to.Ptr[float64](0),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("logIo"),
										Avg:         to.Ptr[float64](0),
										DisplayName: to.Ptr("Log Writes"),
										Max:         to.Ptr[float64](0),
										Min:         to.Ptr[float64](0),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("memory"),
										Avg:         to.Ptr[float64](0),
										DisplayName: to.Ptr("Memory consumption"),
										Max:         to.Ptr[float64](0),
										Min:         to.Ptr[float64](0),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("duration"),
										Avg:         to.Ptr[float64](5586.2625),
										DisplayName: to.Ptr("Query duration"),
										Max:         to.Ptr[float64](7982),
										Min:         to.Ptr[float64](5264),
										Stdev:       to.Ptr[float64](310.4915757210727),
										Sum:         to.Ptr[float64](446901),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
										Value:       to.Ptr[float64](0),
									}},
							},
							{
								ExecutionCount:    to.Ptr[int64](80),
								IntervalStartTime: to.Ptr("03/02/2020 17:00:00"),
								IntervalType:      to.Ptr(armsql.QueryTimeGrainTypePT1H),
								Metrics: []*armsql.QueryMetricProperties{
									{
										Name:        to.Ptr("cpu"),
										Avg:         to.Ptr[float64](0.000019085373263888888),
										DisplayName: to.Ptr("Cpu"),
										Max:         to.Ptr[float64](0.00002782638888888889),
										Min:         to.Ptr[float64](0.000017819444444444443),
										Stdev:       to.Ptr[float64](0.0000012309244108727927),
										Sum:         to.Ptr[float64](0.0015268298611111112),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("io"),
										Avg:         to.Ptr[float64](0),
										DisplayName: to.Ptr("Physical Io Reads"),
										Max:         to.Ptr[float64](0),
										Min:         to.Ptr[float64](0),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("logIo"),
										Avg:         to.Ptr[float64](0),
										DisplayName: to.Ptr("Log Writes"),
										Max:         to.Ptr[float64](0),
										Min:         to.Ptr[float64](0),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("memory"),
										Avg:         to.Ptr[float64](0),
										DisplayName: to.Ptr("Memory consumption"),
										Max:         to.Ptr[float64](0),
										Min:         to.Ptr[float64](0),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("duration"),
										Avg:         to.Ptr[float64](5517.2),
										DisplayName: to.Ptr("Query duration"),
										Max:         to.Ptr[float64](8052),
										Min:         to.Ptr[float64](5147),
										Stdev:       to.Ptr[float64](356.8763581410226),
										Sum:         to.Ptr[float64](441376),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
										Value:       to.Ptr[float64](0),
									}},
							}},
						QueryID:   to.Ptr("35"),
						StartTime: to.Ptr("03/01/2020 18:34:58"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceQueryStatistics) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceQueryStatistics)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceQueryStatisticsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceQueryStatisticsListMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Obtain query execution statistics. Example with all request parameters."},
	})
	client = armsql.NewManagedDatabaseQueriesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager = client.ListByQuery("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"database_1",
		"42",
		&armsql.ManagedDatabaseQueriesClientListByQueryOptions{StartTime: to.Ptr("03/01/2020 16:23:09"),
			EndTime:  to.Ptr("03/11/2020 14:00:00"),
			Interval: to.Ptr(armsql.QueryTimeGrainTypeP1D),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceQueryStatisticsListMax.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceQueryStatistics{
			Value: []*armsql.QueryStatistics{
				{
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/queries/statistics"),
					ID:   to.Ptr("28"),
					Properties: &armsql.QueryStatisticsProperties{
						DatabaseName: to.Ptr("db1"),
						EndTime:      to.Ptr("03/11/2020 14:00:00"),
						Intervals: []*armsql.QueryMetricInterval{
							{
								ExecutionCount:    to.Ptr[int64](1),
								IntervalStartTime: to.Ptr("03/11/2020 00:00:00"),
								IntervalType:      to.Ptr(armsql.QueryTimeGrainTypeP1D),
								Metrics: []*armsql.QueryMetricProperties{
									{
										Name:        to.Ptr("cpu"),
										Avg:         to.Ptr[float64](0.0015934667245370371),
										DisplayName: to.Ptr("Cpu"),
										Max:         to.Ptr[float64](0.0015934667245370371),
										Min:         to.Ptr[float64](0.0015934667245370371),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0.0015934667245370371),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("io"),
										Avg:         to.Ptr[float64](0.000004224537037037037),
										DisplayName: to.Ptr("Physical Io Reads"),
										Max:         to.Ptr[float64](0.000004224537037037037),
										Min:         to.Ptr[float64](0.000004224537037037037),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0.000004224537037037037),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("logIo"),
										Avg:         to.Ptr[float64](0),
										DisplayName: to.Ptr("Log Writes"),
										Max:         to.Ptr[float64](0),
										Min:         to.Ptr[float64](0),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("memory"),
										Avg:         to.Ptr[float64](8336),
										DisplayName: to.Ptr("Memory consumption"),
										Max:         to.Ptr[float64](8336),
										Min:         to.Ptr[float64](8336),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](8336),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("duration"),
										Avg:         to.Ptr[float64](11091296),
										DisplayName: to.Ptr("Query duration"),
										Max:         to.Ptr[float64](11091296),
										Min:         to.Ptr[float64](11091296),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](11091296),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
										Value:       to.Ptr[float64](0),
									}},
							}},
						QueryID:   to.Ptr("28"),
						StartTime: to.Ptr("03/01/2020 16:23:09"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceQueryStatistics) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceQueryStatistics)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceQueryStatisticsListMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceQueryStatisticsListMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Obtain query execution statistics. Minimal example with only mandatory request parameters."},
	})
	client = armsql.NewManagedDatabaseQueriesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager = client.ListByQuery("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"database_1",
		"42",
		&armsql.ManagedDatabaseQueriesClientListByQueryOptions{StartTime: nil,
			EndTime:  nil,
			Interval: to.Ptr(armsql.QueryTimeGrainTypePT1H),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceQueryStatisticsListMin.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceQueryStatistics{
			Value: []*armsql.QueryStatistics{
				{
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/queries/statistics"),
					ID:   to.Ptr("28"),
					Properties: &armsql.QueryStatisticsProperties{
						DatabaseName: to.Ptr("db1"),
						EndTime:      to.Ptr("03/11/2020 14:00:30"),
						Intervals: []*armsql.QueryMetricInterval{
							{
								ExecutionCount:    to.Ptr[int64](1),
								IntervalStartTime: to.Ptr("03/11/2020 11:00:00"),
								IntervalType:      to.Ptr(armsql.QueryTimeGrainTypePT1H),
								Metrics: []*armsql.QueryMetricProperties{
									{
										Name:        to.Ptr("cpu"),
										Avg:         to.Ptr[float64](0.03824320138888889),
										DisplayName: to.Ptr("Cpu"),
										Max:         to.Ptr[float64](0.03824320138888889),
										Min:         to.Ptr[float64](0.03824320138888889),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0.03824320138888889),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("io"),
										Avg:         to.Ptr[float64](0.0001013888888888889),
										DisplayName: to.Ptr("Physical Io Reads"),
										Max:         to.Ptr[float64](0.0001013888888888889),
										Min:         to.Ptr[float64](0.0001013888888888889),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0.0001013888888888889),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("logIo"),
										Avg:         to.Ptr[float64](0),
										DisplayName: to.Ptr("Log Writes"),
										Max:         to.Ptr[float64](0),
										Min:         to.Ptr[float64](0),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](0),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("memory"),
										Avg:         to.Ptr[float64](8336),
										DisplayName: to.Ptr("Memory consumption"),
										Max:         to.Ptr[float64](8336),
										Min:         to.Ptr[float64](8336),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](8336),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
										Value:       to.Ptr[float64](0),
									},
									{
										Name:        to.Ptr("duration"),
										Avg:         to.Ptr[float64](11091296),
										DisplayName: to.Ptr("Query duration"),
										Max:         to.Ptr[float64](11091296),
										Min:         to.Ptr[float64](11091296),
										Stdev:       to.Ptr[float64](0),
										Sum:         to.Ptr[float64](11091296),
										Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
										Value:       to.Ptr[float64](0),
									}},
							}},
						QueryID:   to.Ptr("28"),
						StartTime: to.Ptr("03/10/2020 14:00:30"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceQueryStatistics) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceQueryStatistics)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceQueryStatisticsListMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseRestoreDetails_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseRestoreDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Managed database restore details."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseRestoreDetailsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"testdb",
		armsql.RestoreDetailsNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseRestoreDetails.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedDatabaseRestoreDetailsResult{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/databases/restoreDetails"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/managedInstance/databases/testdb/restoreDetails/current"),
			Properties: &armsql.ManagedDatabaseRestoreDetailsProperties{
				CurrentRestoringFileName: to.Ptr("full_0"),
				LastUploadedFileName:     to.Ptr("log2_3"),
				LastUploadedFileTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-15T11:38:33Z"); return t }()),
				NumberOfFilesDetected:    to.Ptr[int64](26),
				PercentCompleted:         to.Ptr[float64](0),
				Status:                   to.Ptr("Restoring"),
				UnrestorableFiles:        []*string{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedDatabaseRestoreDetailsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedDatabaseRestoreDetailsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseRestoreDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabases_ListByInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseListByManagedInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List databases by managed instances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByInstance("Test1",
		"managedInstance",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseListByManagedInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedDatabaseListResult{
			Value: []*armsql.ManagedDatabase{
				{
					Name:     to.Ptr("testdb1"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances/databases"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/databases/testdb1"),
					Location: to.Ptr("southeastasia"),
					Properties: &armsql.ManagedDatabaseProperties{
						Collation:                to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-04T15:00:17.73Z"); return t }()),
						DefaultSecondaryLocation: to.Ptr("North Europe"),
						Status:                   to.Ptr(armsql.ManagedDatabaseStatusOnline),
					},
				},
				{
					Name:     to.Ptr("testdb2"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances/databases"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/databases/testdb2"),
					Location: to.Ptr("southeastasia"),
					Properties: &armsql.ManagedDatabaseProperties{
						Collation:                to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-04T15:00:17.73Z"); return t }()),
						DefaultSecondaryLocation: to.Ptr("North Europe"),
						Status:                   to.Ptr(armsql.ManagedDatabaseStatusOnline),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedDatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedDatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseListByManagedInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabases_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a managed database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Test1",
		"managedInstance",
		"managedDatabase",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedDatabase{
			Name:     to.Ptr("testdb1"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/databases/testdb1"),
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.ManagedDatabaseProperties{
				Collation:                to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-04T15:00:17.73Z"); return t }()),
				DefaultSecondaryLocation: to.Ptr("North Europe"),
				Status:                   to.Ptr(armsql.ManagedDatabaseStatusOnline),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedDatabase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedDatabase)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabases_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRestoreExternalBackup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a new managed database by restoring from an external backup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"managedDatabase",
		armsql.ManagedDatabase{
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.ManagedDatabaseProperties{
				AutoCompleteRestore:      to.Ptr(true),
				Collation:                to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreateMode:               to.Ptr(armsql.ManagedDatabaseCreateModeRestoreExternalBackup),
				LastBackupName:           to.Ptr("last_backup_name"),
				StorageContainerSasToken: to.Ptr("sv=2015-12-11&sr=c&sp=rl&sig=1234"),
				StorageContainerURI:      to.Ptr("https://myaccountname.blob.core.windows.net/backups"),
			},
		},
		&armsql.ManagedDatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRestoreExternalBackup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRestoreExternalBackup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedDatabase{
			Name:     to.Ptr("testdb1"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/databases/testdb1"),
			Location: to.Ptr("southeastasia"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armsql.ManagedDatabaseProperties{
				Collation:                to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				DefaultSecondaryLocation: to.Ptr("North Europe"),
				Status:                   to.Ptr(armsql.ManagedDatabaseStatusOnline),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedDatabase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedDatabase)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRestoreExternalBackup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRecovery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a new managed database from restoring a geo-replicated backup"},
	})
	client = armsql.NewManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"server1",
		"testdb_recovered",
		armsql.ManagedDatabase{
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.ManagedDatabaseProperties{
				CreateMode:            to.Ptr(armsql.ManagedDatabaseCreateModeRecovery),
				RecoverableDatabaseID: to.Ptr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/Default-SQL-WestEurope/providers/Microsoft.Sql/managedInstances/testsvr/recoverableDatabases/testdb"),
			},
		},
		&armsql.ManagedDatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRecovery.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRecovery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedDatabase{
			Name:     to.Ptr("testdb_recovered"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/server1/recoverableDatabases/testdb_recovered"),
			Location: to.Ptr("southeastasia"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armsql.ManagedDatabaseProperties{
				Collation:    to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-07T04:41:33.937Z"); return t }()),
				Status:       to.Ptr(armsql.ManagedDatabaseStatusOnline),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedDatabase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedDatabase)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRecovery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRestoreLtrBackup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a new managed database from restoring a long term retention backup"},
	})
	client = armsql.NewManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"managedDatabase",
		armsql.ManagedDatabase{
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.ManagedDatabaseProperties{
				Collation:                to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreateMode:               to.Ptr(armsql.ManagedDatabaseCreateModeRestoreExternalBackup),
				StorageContainerSasToken: to.Ptr("sv=2015-12-11&sr=c&sp=rl&sig=1234"),
				StorageContainerURI:      to.Ptr("https://myaccountname.blob.core.windows.net/backups"),
			},
		},
		&armsql.ManagedDatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRestoreLtrBackup.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRestoreLtrBackup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedDatabase{
			Name:     to.Ptr("testdb1"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/databases/testdb1"),
			Location: to.Ptr("southeastasia"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armsql.ManagedDatabaseProperties{
				Collation:                to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				DefaultSecondaryLocation: to.Ptr("North Europe"),
				Status:                   to.Ptr(armsql.ManagedDatabaseStatusOnline),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedDatabase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedDatabase)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateRestoreLtrBackup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreatePointInTimeRestore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a new managed database using point in time restore"},
	})
	client = armsql.NewManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"managedDatabase",
		armsql.ManagedDatabase{
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.ManagedDatabaseProperties{
				CreateMode:         to.Ptr(armsql.ManagedDatabaseCreateModePointInTimeRestore),
				RestorePointInTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-14T05:35:31.503Z"); return t }()),
				SourceDatabaseID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/databases/testdb"),
			},
		},
		&armsql.ManagedDatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreatePointInTimeRestore.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreatePointInTimeRestore.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedDatabase{
			Name:     to.Ptr("testdb1"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/databases/testdb1"),
			Location: to.Ptr("southeastasia"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armsql.ManagedDatabaseProperties{
				Collation:                to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				DefaultSecondaryLocation: to.Ptr("North Europe"),
				Status:                   to.Ptr(armsql.ManagedDatabaseStatusOnline),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedDatabase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedDatabase)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreatePointInTimeRestore.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a new managed database with maximal properties"},
	})
	client = armsql.NewManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"managedDatabase",
		armsql.ManagedDatabase{
			Location: to.Ptr("southeastasia"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
		},
		&armsql.ManagedDatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateMax.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedDatabase{
			Name:     to.Ptr("testdb1"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/databases/testdb1"),
			Location: to.Ptr("southeastasia"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armsql.ManagedDatabaseProperties{
				Collation:                to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				DefaultSecondaryLocation: to.Ptr("North Europe"),
				Status:                   to.Ptr(armsql.ManagedDatabaseStatusOnline),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedDatabase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedDatabase)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a new managed database with minimal properties"},
	})
	client = armsql.NewManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"managedDatabase",
		armsql.ManagedDatabase{
			Location: to.Ptr("southeastasia"),
		},
		&armsql.ManagedDatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedDatabase{
			Name:     to.Ptr("testdb1"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances/databases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/databases/testdb1"),
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.ManagedDatabaseProperties{
				Collation:                to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
				DefaultSecondaryLocation: to.Ptr("North Europe"),
				Status:                   to.Ptr(armsql.ManagedDatabaseStatusOnline),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedDatabase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedDatabase)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabases_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete managed database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"testdb",
		&armsql.ManagedDatabasesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseDelete.json: %v", err)
	}
}

func TestManagedDatabases_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseUpdateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates a managed database with maximal properties"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"testdb",
		armsql.ManagedDatabaseUpdate{
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
		},
		&armsql.ManagedDatabasesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseUpdateMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseUpdateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedDatabase{
			Name:     to.Ptr("testdb"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedDatabase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedDatabase)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseUpdateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseUpdateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates a managed database with minimal properties"},
	})
	client = armsql.NewManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"testdb",
		armsql.ManagedDatabaseUpdate{
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
		},
		&armsql.ManagedDatabasesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseUpdateMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseUpdateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedDatabase{
			Name:     to.Ptr("testdb"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			Location: to.Ptr("southeastasia"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedDatabase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedDatabase)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseUpdateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabases_CompleteRestore(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCompleteExternalRestore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Completes a managed database external backup restore."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCompleteRestore(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		armsql.CompleteDatabaseRestoreDefinition{
			LastBackupName: to.Ptr("testdb1_log4"),
		},
		&armsql.ManagedDatabasesClientBeginCompleteRestoreOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCompleteExternalRestore.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseCompleteExternalRestore.json: %v", err)
	}
}

func TestManagedDatabases_ListInaccessibleByInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InaccessibleManagedDatabaseListByManagedInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List inaccessible managed databases by managed instances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListInaccessibleByInstance("testrg",
		"testcl",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InaccessibleManagedDatabaseListByManagedInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedDatabaseListResult{
			Value: []*armsql.ManagedDatabase{
				{
					Name:     to.Ptr("testdb1"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances/databases"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/databases/testdb1"),
					Location: to.Ptr("southeastasia"),
					Properties: &armsql.ManagedDatabaseProperties{
						Collation:                to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-04T15:00:17.73Z"); return t }()),
						DefaultSecondaryLocation: to.Ptr("North Europe"),
						Status:                   to.Ptr(armsql.ManagedDatabaseStatusInaccessible),
					},
				},
				{
					Name:     to.Ptr("testdb2"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances/databases"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/databases/testdb2"),
					Location: to.Ptr("southeastasia"),
					Properties: &armsql.ManagedDatabaseProperties{
						Collation:                to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-04T15:00:17.73Z"); return t }()),
						DefaultSecondaryLocation: to.Ptr("North Europe"),
						Status:                   to.Ptr(armsql.ManagedDatabaseStatusInaccessible),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedDatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedDatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/InaccessibleManagedDatabaseListByManagedInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseSchemas_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSchemaListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed database schemas"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseSchemasClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("myRG",
		"myManagedInstanceName",
		"myDatabase",
		&armsql.ManagedDatabaseSchemasClientListByDatabaseOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSchemaListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseSchemaListResult{
			Value: []*armsql.DatabaseSchema{
				{
					Name: to.Ptr("dbo"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/dbo"),
				},
				{
					Name: to.Ptr("schema2"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/schema2"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseSchemaListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseSchemaListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSchemaListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseSchemas_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSchemaGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get managed database schema"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseSchemasClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSchemaGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseSchema{
			Name: to.Ptr("dbo"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/dbo"),
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseSchema) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseSchema)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSchemaGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseSecurityAlertPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityAlertGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a database's threat detection policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"securityalert-6852",
		"securityalert-2080",
		"testdb",
		armsql.SecurityAlertPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityAlertGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedDatabaseSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/databases/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-6852/providers/Microsoft.Sql/managedInstances/securityalert-2080/databases/testdb"),
			Properties: &armsql.SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("test@contoso.com"),
					to.Ptr("user@contoso.com")},
				RetentionDays:           to.Ptr[int32](0),
				State:                   to.Ptr(armsql.SecurityAlertPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedDatabaseSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedDatabaseSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityAlertGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseSecurityAlertPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityAlertCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a database's threat detection policy with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		"testdb",
		armsql.SecurityAlertPolicyNameDefault,
		armsql.ManagedDatabaseSecurityAlertPolicy{
			Properties: &armsql.SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Sql_Injection"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("test@contoso.com"),
					to.Ptr("user@contoso.com")},
				RetentionDays:           to.Ptr[int32](6),
				State:                   to.Ptr(armsql.SecurityAlertPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityAlertCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedDatabaseSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/databases/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/managedInstances/securityalert-6440/databases/testdb"),
			Properties: &armsql.SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Sql_Injection"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("test@contoso.com"),
					to.Ptr("user@contoso.com")},
				RetentionDays:           to.Ptr[int32](6),
				State:                   to.Ptr(armsql.SecurityAlertPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedDatabaseSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedDatabaseSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityAlertCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityAlertCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a database's threat detection policy with minimal parameters"},
	})
	client = armsql.NewManagedDatabaseSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		"testdb",
		armsql.SecurityAlertPolicyNameDefault,
		armsql.ManagedDatabaseSecurityAlertPolicy{
			Properties: &armsql.SecurityAlertPolicyProperties{
				State: to.Ptr(armsql.SecurityAlertPolicyStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityAlertCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedDatabaseSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/managedInstance/databases/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/managedInstances/securityalert-6440/databases/testdb"),
			Properties: &armsql.SecurityAlertPolicyProperties{
				DisabledAlerts:          []*string{},
				EmailAccountAdmins:      to.Ptr(true),
				EmailAddresses:          []*string{},
				RetentionDays:           to.Ptr[int32](0),
				State:                   to.Ptr(armsql.SecurityAlertPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedDatabaseSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedDatabaseSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityAlertCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseSecurityAlertPolicies_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityAlertListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of the database's threat detection policies."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("securityalert-6852",
		"securityalert-2080",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityAlertListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedDatabaseSecurityAlertPolicyListResult{
			Value: []*armsql.ManagedDatabaseSecurityAlertPolicy{
				{
					Name: to.Ptr("Default"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/securityAlertPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-6852/providers/Microsoft.Sql/managedInstances/securityalert-2080/databases/testdb"),
					Properties: &armsql.SecurityAlertPolicyProperties{
						DisabledAlerts: []*string{
							to.Ptr("Usage_Anomaly")},
						EmailAccountAdmins: to.Ptr(true),
						EmailAddresses: []*string{
							to.Ptr("test@contoso.com"),
							to.Ptr("user@contoso.com")},
						RetentionDays:           to.Ptr[int32](0),
						State:                   to.Ptr(armsql.SecurityAlertPolicyStateEnabled),
						StorageAccountAccessKey: to.Ptr(""),
						StorageEndpoint:         to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedDatabaseSecurityAlertPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedDatabaseSecurityAlertPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityAlertListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseSecurityEvents_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityEventsGetMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the managed database's security events with maximal parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseSecurityEventsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("testrg",
		"testcl",
		"database1",
		&armsql.ManagedDatabaseSecurityEventsClientListByDatabaseOptions{Filter: to.Ptr("ShowServerRecords eq true"),
			Skip:      to.Ptr[int32](0),
			Top:       to.Ptr[int32](1),
			Skiptoken: to.Ptr("eyJCbG9iTmFtZURhdGVUaW1lIjoiXC9EYXRlKDE1MTIyODg4MTIwMTArMDIwMClcLyIsIkJsb2JOYW1lUm9sbG92ZXJJbmRleCI6IjAiLCJFbmREYXRlIjoiXC9EYXRlKDE1MTI0NjYyMDA1MjkpXC8iLCJJc1NraXBUb2tlblNldCI6ZmFsc2UsIklzVjJCbG9iVGltZUZvcm1hdCI6dHJ1ZSwiU2hvd1NlcnZlclJlY29yZHMiOmZhbHNlLCJTa2lwVmFsdWUiOjAsIlRha2VWYWx1ZSI6MTB9"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityEventsGetMax.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.SecurityEventCollection{
			Value: []*armsql.SecurityEvent{
				{
					Name: to.Ptr("06364798761800000000000000001"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/securityEvents"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/databases/database1/securityEvents/06364798761800000000000000001"),
					Properties: &armsql.SecurityEventProperties{
						ApplicationName: to.Ptr("myApp"),
						ClientIP:        to.Ptr("10.166.113.220"),
						Database:        to.Ptr("database1"),
						EventTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-24T10:13:24.729Z"); return t }()),
						PrincipalName:   to.Ptr("maliciousUser"),
						SecurityEventSQLInjectionAdditionalProperties: &armsql.SecurityEventSQLInjectionAdditionalProperties{
							ErrorCode:                to.Ptr[int32](0),
							ErrorMessage:             to.Ptr(""),
							ErrorSeverity:            to.Ptr[int32](0),
							Statement:                to.Ptr("select * from sys.databases where database_id like '' or 1 = 1 --' and family = 'test11'"),
							StatementHighlightLength: to.Ptr[int32](13),
							StatementHighlightOffset: to.Ptr[int32](52),
							ThreatID:                 to.Ptr("1"),
						},
						SecurityEventType: to.Ptr(armsql.SecurityEventTypeSQLInjectionExploit),
						Server:            to.Ptr("testcl"),
						Subscription:      to.Ptr("00000000-1111-2222-3333-444444444444"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecurityEventCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecurityEventCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityEventsGetMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityEventsGetMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the managed database's security events with minimal parameters"},
	})
	client = armsql.NewManagedDatabaseSecurityEventsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager = client.ListByDatabase("testrg",
		"testcl",
		"database1",
		&armsql.ManagedDatabaseSecurityEventsClientListByDatabaseOptions{Filter: nil,
			Skip:      nil,
			Top:       nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityEventsGetMin.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.SecurityEventCollection{
			Value: []*armsql.SecurityEvent{
				{
					Name: to.Ptr("06364798761800000000000000001"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/securityEvents"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/databases/database1/securityEvents/06364798761800000000000000001"),
					Properties: &armsql.SecurityEventProperties{
						ApplicationName: to.Ptr("myApp"),
						ClientIP:        to.Ptr("10.166.113.220"),
						Database:        to.Ptr("database1"),
						EventTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-24T10:13:24.729Z"); return t }()),
						PrincipalName:   to.Ptr("maliciousUser"),
						SecurityEventSQLInjectionAdditionalProperties: &armsql.SecurityEventSQLInjectionAdditionalProperties{
							ErrorCode:                to.Ptr[int32](0),
							ErrorMessage:             to.Ptr(""),
							ErrorSeverity:            to.Ptr[int32](0),
							Statement:                to.Ptr("select * from sys.databases where database_id like '' or 1 = 1 --' and family = 'test11'"),
							StatementHighlightLength: to.Ptr[int32](13),
							StatementHighlightOffset: to.Ptr[int32](52),
							ThreatID:                 to.Ptr("1"),
						},
						SecurityEventType: to.Ptr(armsql.SecurityEventTypeSQLInjectionExploit),
						Server:            to.Ptr("testcl"),
						Subscription:      to.Ptr("00000000-1111-2222-3333-444444444444"),
					},
				},
				{
					Name: to.Ptr("06364798761800000000000000002"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/securityEvents"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/databases/database1/securityEvents/06364798761800000000000000002"),
					Properties: &armsql.SecurityEventProperties{
						ApplicationName: to.Ptr("myApp"),
						ClientIP:        to.Ptr("10.166.113.220"),
						Database:        to.Ptr("database1"),
						EventTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-24T10:11:14.121Z"); return t }()),
						PrincipalName:   to.Ptr("maliciousUser"),
						SecurityEventSQLInjectionAdditionalProperties: &armsql.SecurityEventSQLInjectionAdditionalProperties{
							ErrorCode:                to.Ptr[int32](0),
							ErrorMessage:             to.Ptr(""),
							ErrorSeverity:            to.Ptr[int32](0),
							Statement:                to.Ptr("select * from sys.databases where database_id like '' or 1 = 1 --' and family = 'test10'"),
							StatementHighlightLength: to.Ptr[int32](13),
							StatementHighlightOffset: to.Ptr[int32](52),
							ThreatID:                 to.Ptr("1"),
						},
						SecurityEventType: to.Ptr(armsql.SecurityEventTypeSQLInjectionExploit),
						Server:            to.Ptr("testcl"),
						Subscription:      to.Ptr("00000000-1111-2222-3333-444444444444"),
					},
				},
				{
					Name: to.Ptr("06364798761800000000000000003"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/securityEvents"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/databases/database1/securityEvents/06364798761800000000000000003"),
					Properties: &armsql.SecurityEventProperties{
						ApplicationName: to.Ptr("myApp"),
						ClientIP:        to.Ptr("10.166.113.220"),
						Database:        to.Ptr("database1"),
						EventTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-24T10:03:17.066Z"); return t }()),
						PrincipalName:   to.Ptr("maliciousUser"),
						SecurityEventSQLInjectionAdditionalProperties: &armsql.SecurityEventSQLInjectionAdditionalProperties{
							ErrorCode:                to.Ptr[int32](0),
							ErrorMessage:             to.Ptr(""),
							ErrorSeverity:            to.Ptr[int32](0),
							Statement:                to.Ptr("select * from sys.databases where database_id like '' or 1 = 1 --' and family = 'test9'"),
							StatementHighlightLength: to.Ptr[int32](13),
							StatementHighlightOffset: to.Ptr[int32](52),
							ThreatID:                 to.Ptr("1"),
						},
						SecurityEventType: to.Ptr(armsql.SecurityEventTypeSQLInjectionExploit),
						Server:            to.Ptr("testcl"),
						Subscription:      to.Ptr("00000000-1111-2222-3333-444444444444"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecurityEventCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecurityEventCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSecurityEventsGetMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseSensitivityLabels_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseColumnSensitivityLabelGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the sensitivity label of a given column in a managed database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		armsql.SensitivityLabelSourceCurrent,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseColumnSensitivityLabelGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SensitivityLabel{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables/columns/sensitivityLabels"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/dbo/tables/myTable/columns/myColumn/sensitivityLabels/current"),
			Properties: &armsql.SensitivityLabelProperties{
				ColumnName:        to.Ptr("myColumn"),
				InformationType:   to.Ptr("PhoneNumber"),
				InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
				LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
				LabelName:         to.Ptr("PII"),
				Rank:              to.Ptr(armsql.SensitivityLabelRankLow),
				SchemaName:        to.Ptr("dbo"),
				TableName:         to.Ptr("myTable"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SensitivityLabel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SensitivityLabel)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseColumnSensitivityLabelGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseSensitivityLabels_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseColumnSensitivityLabelCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates or creates a sensitivity label of a given column with all parameters in a managed database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		armsql.SensitivityLabel{
			Properties: &armsql.SensitivityLabelProperties{
				InformationType:   to.Ptr("PhoneNumber"),
				InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
				LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
				LabelName:         to.Ptr("PII"),
				Rank:              to.Ptr(armsql.SensitivityLabelRankHigh),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseColumnSensitivityLabelCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SensitivityLabel{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables/columns/sensitivityLabels"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/dbo/tables/myTable/columns/myColumn/sensitivityLabels/current"),
			Properties: &armsql.SensitivityLabelProperties{
				ColumnName:        to.Ptr("myColumn"),
				InformationType:   to.Ptr("PhoneNumber"),
				InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
				LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
				LabelName:         to.Ptr("PII"),
				Rank:              to.Ptr(armsql.SensitivityLabelRankHigh),
				SchemaName:        to.Ptr("dbo"),
				TableName:         to.Ptr("myTable"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SensitivityLabel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SensitivityLabel)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseColumnSensitivityLabelCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseSensitivityLabels_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseColumnSensitivityLabelDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the sensitivity label of a given column in a managed database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseColumnSensitivityLabelDelete.json: %v", err)
	}
}

func TestManagedDatabaseSensitivityLabels_DisableRecommendation(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseRecommendedColumnSensitivityLabelDisable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disables the sensitivity recommendations on a given column"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.DisableRecommendation(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseRecommendedColumnSensitivityLabelDisable.json: %v", err)
	}
}

func TestManagedDatabaseSensitivityLabels_EnableRecommendation(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseRecommendedColumnSensitivityLabelEnable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enables the sensitivity recommendations on a given column"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.EnableRecommendation(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseRecommendedColumnSensitivityLabelEnable.json: %v", err)
	}
}

func TestManagedDatabaseSensitivityLabels_ListCurrentByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSensitivityLabelsListByDatabaseCurrent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the current sensitivity labels of a given database in a managed database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListCurrentByDatabase("myRG",
		"myManagedInstanceName",
		"myDatabase",
		&armsql.ManagedDatabaseSensitivityLabelsClientListCurrentByDatabaseOptions{SkipToken: nil,
			Count:  nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSensitivityLabelsListByDatabaseCurrent.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.SensitivityLabelListResult{
			Value: []*armsql.SensitivityLabel{
				{
					Name: to.Ptr("current"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables/columns/sensitivityLabels"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/dbo/tables/myTable/columns/myColumn/sensitivityLabels/current"),
					Properties: &armsql.SensitivityLabelProperties{
						ColumnName:        to.Ptr("myColumn"),
						InformationType:   to.Ptr("Financial"),
						InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
						LabelID:           to.Ptr("05e6eaa1-075a-4fb4-a732-a92215a2444a"),
						LabelName:         to.Ptr("Sensitive"),
						Rank:              to.Ptr(armsql.SensitivityLabelRankCritical),
						SchemaName:        to.Ptr("dbo"),
						TableName:         to.Ptr("myTable"),
					},
				},
				{
					Name: to.Ptr("current"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables/columns/sensitivityLabels"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/dbo/tables/myTable/columns/myColumn3/sensitivityLabels/current"),
					Properties: &armsql.SensitivityLabelProperties{
						ColumnName:        to.Ptr("myColumn3"),
						InformationType:   to.Ptr("Email"),
						InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
						LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
						LabelName:         to.Ptr("PII"),
						Rank:              to.Ptr(armsql.SensitivityLabelRankHigh),
						SchemaName:        to.Ptr("dbo"),
						TableName:         to.Ptr("myTable"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SensitivityLabelListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SensitivityLabelListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSensitivityLabelsListByDatabaseCurrent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseSensitivityLabels_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSensitivityLabelsCurrentUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update sensitivity labels of a given database using an operations batch."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Update(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		armsql.SensitivityLabelUpdateList{
			Operations: []*armsql.SensitivityLabelUpdate{
				{
					Properties: &armsql.SensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("column1"),
						Op:     to.Ptr(armsql.SensitivityLabelUpdateKindSet),
						SensitivityLabel: &armsql.SensitivityLabel{
							Properties: &armsql.SensitivityLabelProperties{
								InformationType:   to.Ptr("Financial"),
								InformationTypeID: to.Ptr("1D3652D6-422C-4115-82F1-65DAEBC665C8"),
								LabelID:           to.Ptr("3A477B16-9423-432B-AA97-6069B481CEC3"),
								LabelName:         to.Ptr("Highly Confidential"),
							},
						},
						Table: to.Ptr("table1"),
					},
				},
				{
					Properties: &armsql.SensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("column2"),
						Op:     to.Ptr(armsql.SensitivityLabelUpdateKindSet),
						SensitivityLabel: &armsql.SensitivityLabel{
							Properties: &armsql.SensitivityLabelProperties{
								InformationType:   to.Ptr("PhoneNumber"),
								InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
								LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
								LabelName:         to.Ptr("PII"),
							},
						},
						Table: to.Ptr("table2"),
					},
				},
				{
					Properties: &armsql.SensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("Column3"),
						Op:     to.Ptr(armsql.SensitivityLabelUpdateKindRemove),
						Table:  to.Ptr("Table1"),
					},
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSensitivityLabelsCurrentUpdate.json: %v", err)
	}
}

func TestManagedDatabaseSensitivityLabels_ListRecommendedByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSensitivityLabelsListByDatabaseRecommended.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the recommended sensitivity labels of a given database in a managed database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListRecommendedByDatabase("myRG",
		"myManagedInstanceName",
		"myDatabase",
		&armsql.ManagedDatabaseSensitivityLabelsClientListRecommendedByDatabaseOptions{SkipToken: nil,
			IncludeDisabledRecommendations: nil,
			Filter:                         nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSensitivityLabelsListByDatabaseRecommended.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.SensitivityLabelListResult{
			Value: []*armsql.SensitivityLabel{
				{
					Name: to.Ptr("recommended"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables/columns/sensitivityLabels"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/dbo/tables/myTable/columns/myColumn2/sensitivityLabels/recommended"),
					Properties: &armsql.SensitivityLabelProperties{
						ColumnName:        to.Ptr("myColumn2"),
						InformationType:   to.Ptr("Financial"),
						InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
						LabelID:           to.Ptr("05e6eaa1-075a-4fb4-a732-a92215a2444a"),
						LabelName:         to.Ptr("Sensitive"),
						SchemaName:        to.Ptr("dbo"),
						TableName:         to.Ptr("myTable"),
					},
				},
				{
					Name: to.Ptr("recommended"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables/columns/sensitivityLabels"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/dbo/tables/myTable/columns/myColumn4/sensitivityLabels/recommended"),
					Properties: &armsql.SensitivityLabelProperties{
						ColumnName:        to.Ptr("myColumn4"),
						InformationType:   to.Ptr("Email"),
						InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
						LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
						LabelName:         to.Ptr("PII"),
						SchemaName:        to.Ptr("dbo"),
						TableName:         to.Ptr("myTable"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SensitivityLabelListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SensitivityLabelListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSensitivityLabelsListByDatabaseRecommended.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseRecommendedSensitivityLabels_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSensitivityLabelsRecommendedUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update recommended sensitivity labels of a given database using an operations batch."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseRecommendedSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Update(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		armsql.RecommendedSensitivityLabelUpdateList{
			Operations: []*armsql.RecommendedSensitivityLabelUpdate{
				{
					Properties: &armsql.RecommendedSensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("column1"),
						Op:     to.Ptr(armsql.RecommendedSensitivityLabelUpdateKindEnable),
						Table:  to.Ptr("table1"),
					},
				},
				{
					Properties: &armsql.RecommendedSensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("column2"),
						Op:     to.Ptr(armsql.RecommendedSensitivityLabelUpdateKindDisable),
						Table:  to.Ptr("table2"),
					},
				},
				{
					Properties: &armsql.RecommendedSensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("Column3"),
						Op:     to.Ptr(armsql.RecommendedSensitivityLabelUpdateKindDisable),
						Table:  to.Ptr("Table1"),
					},
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseSensitivityLabelsRecommendedUpdate.json: %v", err)
	}
}

func TestManagedDatabaseTables_ListBySchema(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseTableListBySchema.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed database tables"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseTablesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListBySchema("myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		&armsql.ManagedDatabaseTablesClientListBySchemaOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseTableListBySchema.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseTableListResult{
			Value: []*armsql.DatabaseTable{
				{
					Name: to.Ptr("table1"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/dbo/tables/table1"),
				},
				{
					Name: to.Ptr("table2"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/dbo/tables/table2"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseTableListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseTableListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseTableListBySchema.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseTables_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseTableGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get managed database table"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseTablesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"table1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseTableGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseTable{
			Name: to.Ptr("table1"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/databases/schemas/tables"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/managedInstances/myManagedInstanceName/databases/myDatabase/schemas/dbo/tables/table1"),
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseTable) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseTable)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseTableGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseTransparentDataEncryption_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedTransparentDataEncryptionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a database's transparent data encryption"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseTransparentDataEncryptionClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"security-tde-resourcegroup",
		"securitytde",
		"testdb",
		armsql.TransparentDataEncryptionNameCurrent,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedTransparentDataEncryptionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedTransparentDataEncryption{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/databases/transparentDataEncryption"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/security-tde-resourcegroup/providers/Microsoft.Sql/managedInstances/securitytde/databases/testdb"),
			Properties: &armsql.ManagedTransparentDataEncryptionProperties{
				State: to.Ptr(armsql.TransparentDataEncryptionStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedTransparentDataEncryption) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedTransparentDataEncryption)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedTransparentDataEncryptionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseTransparentDataEncryption_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedTransparentDataEncryptionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a database's Transparent Data Encryption state with minimal parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseTransparentDataEncryptionClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"securitytde-42-rg",
		"securitytde-42",
		"testdb",
		armsql.TransparentDataEncryptionNameCurrent,
		armsql.ManagedTransparentDataEncryption{
			Properties: &armsql.ManagedTransparentDataEncryptionProperties{
				State: to.Ptr(armsql.TransparentDataEncryptionStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedTransparentDataEncryptionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedTransparentDataEncryption{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/managedInstance/databases/transparentDataEncryption"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securitytde-42-rg/providers/Microsoft.Sql/managedInstances/securitytde-42/databases/testdb/transparentDataEncryption"),
			Properties: &armsql.ManagedTransparentDataEncryptionProperties{
				State: to.Ptr(armsql.TransparentDataEncryptionStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedTransparentDataEncryption) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedTransparentDataEncryption)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedTransparentDataEncryptionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseTransparentDataEncryption_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedTransparentDataEncryptionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of the database's transparent data encryptions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseTransparentDataEncryptionClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("security-tde-resourcegroup",
		"securitytde",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedTransparentDataEncryptionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedTransparentDataEncryptionListResult{
			Value: []*armsql.ManagedTransparentDataEncryption{
				{
					Name: to.Ptr("current"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/databases/transparentDataEncryption"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/security-tde-resourcegroup/providers/Microsoft.Sql/managedInstances/securitytde/databases/testdb"),
					Properties: &armsql.ManagedTransparentDataEncryptionProperties{
						State: to.Ptr(armsql.TransparentDataEncryptionStateEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedTransparentDataEncryptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedTransparentDataEncryptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedTransparentDataEncryptionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseVulnerabilityAssessmentRuleBaselines_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentRuleBaselineGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a database's vulnerability assessment rule baseline."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4711",
		"vulnerabilityaseessmenttest-6411",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		"VA1001",
		armsql.VulnerabilityAssessmentPolicyBaselineNameMaster,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentRuleBaselineGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseVulnerabilityAssessmentRuleBaseline{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments/rules/baselines"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityaseessmenttest-6440/databases/testdb/vulnerabilityAssessments/default/rules/VA1001/baselines/default"),
			Properties: &armsql.DatabaseVulnerabilityAssessmentRuleBaselineProperties{
				BaselineResults: []*armsql.DatabaseVulnerabilityAssessmentRuleBaselineItem{
					{
						Result: []*string{
							to.Ptr("userA"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userB"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userC"),
							to.Ptr("SELECT"),
							to.Ptr("tableId_4")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseVulnerabilityAssessmentRuleBaseline) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseVulnerabilityAssessmentRuleBaseline)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentRuleBaselineGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseVulnerabilityAssessmentRuleBaselines_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentRuleBaselineCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a database's vulnerability assessment rule baseline."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		"VA1001",
		armsql.VulnerabilityAssessmentPolicyBaselineNameDefault,
		armsql.DatabaseVulnerabilityAssessmentRuleBaseline{
			Properties: &armsql.DatabaseVulnerabilityAssessmentRuleBaselineProperties{
				BaselineResults: []*armsql.DatabaseVulnerabilityAssessmentRuleBaselineItem{
					{
						Result: []*string{
							to.Ptr("userA"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userB"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userC"),
							to.Ptr("SELECT"),
							to.Ptr("tableId_4")},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentRuleBaselineCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseVulnerabilityAssessmentRuleBaseline{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments/rules/baselines"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityaseessmenttest-6440/databases/testdb/vulnerabilityAssessments/default/rules/VA1001/baselines/default"),
			Properties: &armsql.DatabaseVulnerabilityAssessmentRuleBaselineProperties{
				BaselineResults: []*armsql.DatabaseVulnerabilityAssessmentRuleBaselineItem{
					{
						Result: []*string{
							to.Ptr("userA"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userB"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userC"),
							to.Ptr("SELECT"),
							to.Ptr("tableId_4")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseVulnerabilityAssessmentRuleBaseline) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseVulnerabilityAssessmentRuleBaseline)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentRuleBaselineCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseVulnerabilityAssessmentRuleBaselines_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentRuleBaselineDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Removes a database's vulnerability assessment rule baseline."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		"VA1001",
		armsql.VulnerabilityAssessmentPolicyBaselineNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentRuleBaselineDelete.json: %v", err)
	}
}

func TestManagedDatabaseVulnerabilityAssessments_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a database's vulnerability assessment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityaseessmenttest-6440/databases/testdb/vulnerabilityAssessments/default"),
			Properties: &armsql.DatabaseVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseVulnerabilityAssessments_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a database's vulnerability assessment with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		armsql.DatabaseVulnerabilityAssessment{
			Properties: &armsql.DatabaseVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
				StorageContainerPath:   to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityaseessmenttest-6440/databases/testdb/vulnerabilityAssessments/default"),
			Properties: &armsql.DatabaseVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a database's vulnerability assessment with minimal parameters"},
	})
	client = armsql.NewManagedDatabaseVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		armsql.DatabaseVulnerabilityAssessment{
			Properties: &armsql.DatabaseVulnerabilityAssessmentProperties{
				StorageContainerPath:   to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityaseessmenttest-6440/databases/testdb/vulnerabilityAssessments/default"),
			Properties: &armsql.DatabaseVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(false),
					Emails:                  []*string{},
					IsEnabled:               to.Ptr(false),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseVulnerabilityAssessments_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Remove a database's vulnerability assessment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentDelete.json: %v", err)
	}
}

func TestManagedDatabaseVulnerabilityAssessments_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a database's vulnerability assessments list"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseVulnerabilityAssessmentListResult{
			Value: []*armsql.DatabaseVulnerabilityAssessment{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityaseessmenttest-6440/databases/testdb/vulnerabilityAssessments/default"),
					Properties: &armsql.DatabaseVulnerabilityAssessmentProperties{
						RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
							EmailSubscriptionAdmins: to.Ptr(true),
							Emails: []*string{
								to.Ptr("email1@mail.com"),
								to.Ptr("email2@mail.com")},
							IsEnabled: to.Ptr(true),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseVulnerabilityAssessmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseVulnerabilityAssessmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseVulnerabilityAssessmentScans_InitiateScan(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentScansExecute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Executes a database's vulnerability assessment scan."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseVulnerabilityAssessmentScansClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginInitiateScan(ctx,
		"vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		"scan01",
		&armsql.ManagedDatabaseVulnerabilityAssessmentScansClientBeginInitiateScanOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentScansExecute.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentScansExecute.json: %v", err)
	}
}

func TestManagedDatabaseVulnerabilityAssessmentScans_Export(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentScanExport.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export a database's vulnerability assessment scan results."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseVulnerabilityAssessmentScansClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Export(ctx,
		"vulnerabilityassessmenttest-4799",
		"vulnerabilityassessmenttest-6440",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		"scan001",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentScanExport.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DatabaseVulnerabilityAssessmentScansExport{
			Name: to.Ptr("scan001"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments/scans/export"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityassessmenttest-6440/databases/testdb/vulnerabilityAssessments/default/scans/scan001/export"),
			Properties: &armsql.DatabaseVulnerabilityAssessmentScanExportProperties{
				ExportedReportLocation: to.Ptr("https://myaccount.blob.core.windows.net/vulnerabilityAssessment/vulnerabilityassessmenttest-6440/testdb/scan001.xlsx"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseVulnerabilityAssessmentScansExport) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseVulnerabilityAssessmentScansExport)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentScanExport.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseVulnerabilityAssessmentScans_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentScanRecordsListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of a database vulnerability assessment scan records"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseVulnerabilityAssessmentScansClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentScanRecordsListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.VulnerabilityAssessmentScanRecordListResult{
			Value: []*armsql.VulnerabilityAssessmentScanRecord{
				{
					Name: to.Ptr("scan001"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments/scans"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityassessmenttest-6440/databases/testdb/vulnerabilityAssessments/default/scans/scan001"),
					Properties: &armsql.VulnerabilityAssessmentScanRecordProperties{
						EndTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:47:06Z"); return t }()),
						Errors:                       []*armsql.VulnerabilityAssessmentScanError{},
						NumberOfFailedSecurityChecks: to.Ptr[int32](9),
						ScanID:                       to.Ptr("scan001"),
						StartTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:45:06Z"); return t }()),
						State:                        to.Ptr(armsql.VulnerabilityAssessmentScanStatePassed),
						StorageContainerPath:         to.Ptr("https://myaccount.blob.core.windows.net/vulnerability-assessment"),
						TriggerType:                  to.Ptr(armsql.VulnerabilityAssessmentScanTriggerTypeOnDemand),
					},
				},
				{
					Name: to.Ptr("scan002"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments/scans"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityassessmenttest-6440/databases/testdb/vulnerabilityAssessments/default/scans/scan002"),
					Properties: &armsql.VulnerabilityAssessmentScanRecordProperties{
						EndTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:47:06Z"); return t }()),
						Errors:                       []*armsql.VulnerabilityAssessmentScanError{},
						NumberOfFailedSecurityChecks: to.Ptr[int32](9),
						ScanID:                       to.Ptr("scan002"),
						StartTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:45:06Z"); return t }()),
						State:                        to.Ptr(armsql.VulnerabilityAssessmentScanStateFailed),
						StorageContainerPath:         to.Ptr("https://myaccount.blob.core.windows.net/vulnerability-assessment"),
						TriggerType:                  to.Ptr(armsql.VulnerabilityAssessmentScanTriggerTypeRecurring),
					},
				},
				{
					Name: to.Ptr("scan003"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments/scans"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityassessmenttest-6440/databases/testdb/vulnerabilityAssessments/default/scans/scan003"),
					Properties: &armsql.VulnerabilityAssessmentScanRecordProperties{
						EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:47:06Z"); return t }()),
						Errors: []*armsql.VulnerabilityAssessmentScanError{
							{
								Code:    to.Ptr("StorageNotFound"),
								Message: to.Ptr("Storage not found"),
							}},
						NumberOfFailedSecurityChecks: to.Ptr[int32](0),
						ScanID:                       to.Ptr("scan003"),
						StartTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:45:06Z"); return t }()),
						State:                        to.Ptr(armsql.VulnerabilityAssessmentScanStateFailedToRun),
						StorageContainerPath:         to.Ptr("https://myaccount.blob.core.windows.net/vulnerability-assessment"),
						TriggerType:                  to.Ptr(armsql.VulnerabilityAssessmentScanTriggerTypeRecurring),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VulnerabilityAssessmentScanRecordListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VulnerabilityAssessmentScanRecordListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentScanRecordsListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedDatabaseVulnerabilityAssessmentScans_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentScanRecordsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a database vulnerability assessment scan record by scan ID"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedDatabaseVulnerabilityAssessmentScansClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		armsql.VulnerabilityAssessmentNameDefault,
		"scan001",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentScanRecordsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.VulnerabilityAssessmentScanRecord{
			Name: to.Ptr("scan001"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/vulnerabilityAssessments/scans"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityassessmenttest-6440/databases/testdb/vulnerabilityAssessments/default/scans/scan001"),
			Properties: &armsql.VulnerabilityAssessmentScanRecordProperties{
				EndTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:47:06Z"); return t }()),
				Errors:                       []*armsql.VulnerabilityAssessmentScanError{},
				NumberOfFailedSecurityChecks: to.Ptr[int32](9),
				ScanID:                       to.Ptr("scan001"),
				StartTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:45:06Z"); return t }()),
				State:                        to.Ptr(armsql.VulnerabilityAssessmentScanStatePassed),
				StorageContainerPath:         to.Ptr("https://myaccount.blob.core.windows.net/vulnerability-assessment"),
				TriggerType:                  to.Ptr(armsql.VulnerabilityAssessmentScanTriggerTypeOnDemand),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VulnerabilityAssessmentScanRecord) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VulnerabilityAssessmentScanRecord)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentScanRecordsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceAdministrators_ListByInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorListByInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List administrators of managed instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceAdministratorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByInstance("Default-SQL-SouthEastAsia",
		"managedInstance",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorListByInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceAdministratorListResult{
			Value: []*armsql.ManagedInstanceAdministrator{
				{
					Name: to.Ptr("ActiveDirectory"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/administrators"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/managedInstance/administrators/ActiveDirectory"),
					Properties: &armsql.ManagedInstanceAdministratorProperties{
						AdministratorType: to.Ptr(armsql.ManagedInstanceAdministratorTypeActiveDirectory),
						Login:             to.Ptr("bob@contoso.com"),
						Sid:               to.Ptr("44444444-3333-2222-1111-000000000000"),
						TenantID:          to.Ptr("55555555-4444-3333-2222-111111111111"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceAdministratorListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceAdministratorListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorListByInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceAdministrators_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get administrator of managed instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceAdministratorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		armsql.AdministratorNameActiveDirectory,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceAdministrator{
			Name: to.Ptr("ActiveDirectory"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/administrators"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/managedInstance/administrators/ActiveDirectory"),
			Properties: &armsql.ManagedInstanceAdministratorProperties{
				AdministratorType: to.Ptr(armsql.ManagedInstanceAdministratorTypeActiveDirectory),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("44444444-3333-2222-1111-000000000000"),
				TenantID:          to.Ptr("55555555-4444-3333-2222-111111111111"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceAdministrator) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceAdministrator)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceAdministrators_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create administrator of managed instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceAdministratorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		armsql.AdministratorNameActiveDirectory,
		armsql.ManagedInstanceAdministrator{
			Properties: &armsql.ManagedInstanceAdministratorProperties{
				AdministratorType: to.Ptr(armsql.ManagedInstanceAdministratorTypeActiveDirectory),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("44444444-3333-2222-1111-000000000000"),
				TenantID:          to.Ptr("55555555-4444-3333-2222-111111111111"),
			},
		},
		&armsql.ManagedInstanceAdministratorsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceAdministrator{
			Name: to.Ptr("ActiveDirectory"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/administrators"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/managedInstance/administrators/ActiveDirectory"),
			Properties: &armsql.ManagedInstanceAdministratorProperties{
				AdministratorType: to.Ptr(armsql.ManagedInstanceAdministratorTypeActiveDirectory),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("44444444-3333-2222-1111-000000000000"),
				TenantID:          to.Ptr("55555555-4444-3333-2222-111111111111"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceAdministrator) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceAdministrator)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update administrator of managed instance"},
	})
	client = armsql.NewManagedInstanceAdministratorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		armsql.AdministratorNameActiveDirectory,
		armsql.ManagedInstanceAdministrator{
			Properties: &armsql.ManagedInstanceAdministratorProperties{
				AdministratorType: to.Ptr(armsql.ManagedInstanceAdministratorTypeActiveDirectory),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("44444444-3333-2222-1111-000000000000"),
				TenantID:          to.Ptr("55555555-4444-3333-2222-111111111111"),
			},
		},
		&armsql.ManagedInstanceAdministratorsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorUpdate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceAdministrator{
			Name: to.Ptr("ActiveDirectory"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/administrators"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/managedInstance/administrators/ActiveDirectory"),
			Properties: &armsql.ManagedInstanceAdministratorProperties{
				AdministratorType: to.Ptr(armsql.ManagedInstanceAdministratorTypeActiveDirectory),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("44444444-3333-2222-1111-000000000000"),
				TenantID:          to.Ptr("55555555-4444-3333-2222-111111111111"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceAdministrator) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceAdministrator)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceAdministrators_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete administrator of managed instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceAdministratorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		armsql.AdministratorNameActiveDirectory,
		&armsql.ManagedInstanceAdministratorsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAdministratorDelete.json: %v", err)
	}
}

func TestManagedInstanceAzureADOnlyAuthentications_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAzureADOnlyAuthGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a Azure Active Directory only authentication property."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceAzureADOnlyAuthenticationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		armsql.AuthenticationNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAzureADOnlyAuthGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceAzureADOnlyAuthentication{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/azureadonlyauthentications"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/azureADOnlyAuthentications/providers/Microsoft.Sql/managedInstances/managedInstance/azureadonlyauthentications/default"),
			Properties: &armsql.ManagedInstanceAzureADOnlyAuthProperties{
				AzureADOnlyAuthentication: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceAzureADOnlyAuthentication) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceAzureADOnlyAuthentication)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAzureADOnlyAuthGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceAzureADOnlyAuthentications_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAzureADOnlyAuthCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates Azure Active Directory only authentication object."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceAzureADOnlyAuthenticationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		armsql.AuthenticationNameDefault,
		armsql.ManagedInstanceAzureADOnlyAuthentication{
			Properties: &armsql.ManagedInstanceAzureADOnlyAuthProperties{
				AzureADOnlyAuthentication: to.Ptr(false),
			},
		},
		&armsql.ManagedInstanceAzureADOnlyAuthenticationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAzureADOnlyAuthCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAzureADOnlyAuthCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceAzureADOnlyAuthentication{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/azureadonlyauthentications"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/azureADOnlyAuthentications/providers/Microsoft.Sql/managedInstances/managedInstance/azureadonlyauthentications/default"),
			Properties: &armsql.ManagedInstanceAzureADOnlyAuthProperties{
				AzureADOnlyAuthentication: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceAzureADOnlyAuthentication) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceAzureADOnlyAuthentication)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAzureADOnlyAuthCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceAzureADOnlyAuthentications_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAzureADOnlyAuthDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes Azure Active Directory only authentication object."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceAzureADOnlyAuthenticationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		armsql.AuthenticationNameDefault,
		&armsql.ManagedInstanceAzureADOnlyAuthenticationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAzureADOnlyAuthDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAzureADOnlyAuthDelete.json: %v", err)
	}
}

func TestManagedInstanceAzureADOnlyAuthentications_ListByInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAzureADOnlyAuthListByInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a list of Azure Active Directory only authentication object."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceAzureADOnlyAuthenticationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByInstance("Default-SQL-SouthEastAsia",
		"managedInstance",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAzureADOnlyAuthListByInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceAzureADOnlyAuthListResult{
			Value: []*armsql.ManagedInstanceAzureADOnlyAuthentication{
				{
					Name: to.Ptr("Default"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/azureadonlyauthentications"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/azureADOnlyAuthentications/providers/Microsoft.Sql/managedInstances/managedInstance/azureadonlyauthentications/default"),
					Properties: &armsql.ManagedInstanceAzureADOnlyAuthProperties{
						AzureADOnlyAuthentication: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceAzureADOnlyAuthListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceAzureADOnlyAuthListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceAzureADOnlyAuthListByInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceEncryptionProtectors_Revalidate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorRevalidate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Revalidates the encryption protector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceEncryptionProtectorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginRevalidate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		armsql.EncryptionProtectorNameCurrent,
		&armsql.ManagedInstanceEncryptionProtectorsClientBeginRevalidateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorRevalidate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorRevalidate.json: %v", err)
	}
}

func TestManagedInstanceEncryptionProtectors_ListByInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List encryption protectors by managed instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceEncryptionProtectorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByInstance("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceEncryptionProtectorListResult{
			Value: []*armsql.ManagedInstanceEncryptionProtector{
				{
					Name: to.Ptr("current"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/encryptionProtector"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/encryptionProtector/current"),
					Kind: to.Ptr("azurekeyvault"),
					Properties: &armsql.ManagedInstanceEncryptionProtectorProperties{
						ServerKeyName: to.Ptr("someVault_someKey_01234567890123456789012345678901"),
						ServerKeyType: to.Ptr(armsql.ServerKeyTypeAzureKeyVault),
						URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceEncryptionProtectorListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceEncryptionProtectorListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceEncryptionProtectors_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the encryption protector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceEncryptionProtectorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		armsql.EncryptionProtectorNameCurrent,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceEncryptionProtector{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/encryptionProtector"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/encryptionProtector/current"),
			Kind: to.Ptr("azurekeyvault"),
			Properties: &armsql.ManagedInstanceEncryptionProtectorProperties{
				ServerKeyName: to.Ptr("someVault_someKey_01234567890123456789012345678901"),
				ServerKeyType: to.Ptr(armsql.ServerKeyTypeAzureKeyVault),
				URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceEncryptionProtector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceEncryptionProtector)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceEncryptionProtectors_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorCreateOrUpdateKeyVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the encryption protector to key vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceEncryptionProtectorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		armsql.EncryptionProtectorNameCurrent,
		armsql.ManagedInstanceEncryptionProtector{
			Properties: &armsql.ManagedInstanceEncryptionProtectorProperties{
				AutoRotationEnabled: to.Ptr(false),
				ServerKeyName:       to.Ptr("someVault_someKey_01234567890123456789012345678901"),
				ServerKeyType:       to.Ptr(armsql.ServerKeyTypeAzureKeyVault),
			},
		},
		&armsql.ManagedInstanceEncryptionProtectorsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorCreateOrUpdateKeyVault.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorCreateOrUpdateKeyVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceEncryptionProtector{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/encryptionProtector"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/encryptionProtector/current"),
			Kind: to.Ptr("azurekeyvault"),
			Properties: &armsql.ManagedInstanceEncryptionProtectorProperties{
				AutoRotationEnabled: to.Ptr(false),
				ServerKeyName:       to.Ptr("someVault_someKey_01234567890123456789012345678901"),
				ServerKeyType:       to.Ptr(armsql.ServerKeyTypeAzureKeyVault),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceEncryptionProtector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceEncryptionProtector)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorCreateOrUpdateKeyVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorCreateOrUpdateServiceManaged.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the encryption protector to service managed"},
	})
	client = armsql.NewManagedInstanceEncryptionProtectorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		armsql.EncryptionProtectorNameCurrent,
		armsql.ManagedInstanceEncryptionProtector{
			Properties: &armsql.ManagedInstanceEncryptionProtectorProperties{
				ServerKeyName: to.Ptr("ServiceManaged"),
				ServerKeyType: to.Ptr(armsql.ServerKeyTypeServiceManaged),
			},
		},
		&armsql.ManagedInstanceEncryptionProtectorsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorCreateOrUpdateServiceManaged.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorCreateOrUpdateServiceManaged.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceEncryptionProtector{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/encryptionProtector"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/encryptionProtector/current"),
			Kind: to.Ptr("servicemanaged"),
			Properties: &armsql.ManagedInstanceEncryptionProtectorProperties{
				ServerKeyName: to.Ptr("ServiceManaged"),
				ServerKeyType: to.Ptr(armsql.ServerKeyTypeServiceManaged),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceEncryptionProtector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceEncryptionProtector)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceEncryptionProtectorCreateOrUpdateServiceManaged.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceKeys_ListByInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceKeyList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the keys for a managed instance."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceKeysClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByInstance("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&armsql.ManagedInstanceKeysClientListByInstanceOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceKeyList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceKeyListResult{
			Value: []*armsql.ManagedInstanceKey{
				{
					Name: to.Ptr("someVault_someKey_01234567890123456789012345678901"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/keys"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/keys/someVault_someKey_01234567890123456789012345678901"),
					Kind: to.Ptr("azurekeyvault"),
					Properties: &armsql.ManagedInstanceKeyProperties{
						AutoRotationEnabled: to.Ptr(false),
						CreationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-15T00:00:00Z"); return t }()),
						Thumbprint:          to.Ptr("00112233445566778899AABBCCDDEEFFAABBCCDD"),
					},
				},
				{
					Name: to.Ptr("myVault_myKey_11111111111111111111111111111111"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/keys"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/keys/myVault_myKey_11111111111111111111111111111111"),
					Kind: to.Ptr("azurekeyvault"),
					Properties: &armsql.ManagedInstanceKeyProperties{
						AutoRotationEnabled: to.Ptr(false),
						CreationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-15T00:00:00Z"); return t }()),
						Thumbprint:          to.Ptr("AAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBB"),
					},
				},
				{
					Name:       to.Ptr("ServiceManaged"),
					Type:       to.Ptr("Microsoft.Sql/managedInstances/keys"),
					ID:         to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/keys/ServiceManaged"),
					Kind:       to.Ptr("servicemanaged"),
					Properties: &armsql.ManagedInstanceKeyProperties{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceKeyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceKeyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceKeyList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceKeys_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceKeyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the managed instance key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceKeysClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"someVault_someKey_01234567890123456789012345678901",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceKeyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceKey{
			Name: to.Ptr("sqlcrudtest-4645"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/keys"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/keys/someVault_someKey_01234567890123456789012345678901"),
			Kind: to.Ptr("azurekeyvault"),
			Properties: &armsql.ManagedInstanceKeyProperties{
				AutoRotationEnabled: to.Ptr(false),
				CreationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-01T00:00:00Z"); return t }()),
				Thumbprint:          to.Ptr("00112233445566778899AABBCCDDEEFFAABBCCDD"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceKey)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceKeyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceKeys_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceKeyCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a managed instance key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceKeysClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"someVault_someKey_01234567890123456789012345678901",
		armsql.ManagedInstanceKey{
			Properties: &armsql.ManagedInstanceKeyProperties{
				ServerKeyType: to.Ptr(armsql.ServerKeyTypeAzureKeyVault),
				URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
			},
		},
		&armsql.ManagedInstanceKeysClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceKeyCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceKeyCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceKey{
			Name: to.Ptr("sqlcrudtest-4645"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/keys"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/keys/someVault_someKey_01234567890123456789012345678901"),
			Kind: to.Ptr("azurekeyvault"),
			Properties: &armsql.ManagedInstanceKeyProperties{
				AutoRotationEnabled: to.Ptr(false),
				CreationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-01T00:00:00Z"); return t }()),
				Thumbprint:          to.Ptr("00112233445566778899AABBCCDDEEFFAABBCCDD"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceKey)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceKeyCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceKeys_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceKeyDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the managed instance key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceKeysClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"someVault_someKey_01234567890123456789012345678901",
		&armsql.ManagedInstanceKeysClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceKeyDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceKeyDelete.json: %v", err)
	}
}

func TestManagedInstanceLongTermRetentionPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceLongTermRetentionPolicyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the long term retention policy for the managed database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceLongTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testInstance",
		"testDatabase",
		armsql.ManagedInstanceLongTermRetentionPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceLongTermRetentionPolicyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceLongTermRetentionPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/resourceGroups/managedInstances/databases/backupLongTermRetentionPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/resourceGroups/testResourceGroup/managedInstances/testInstance/databases/testDatabase/backupLongTermRetentionPolicies/default"),
			Properties: &armsql.BaseLongTermRetentionPolicyProperties{
				MonthlyRetention: to.Ptr("P1Y"),
				WeekOfYear:       to.Ptr[int32](5),
				WeeklyRetention:  to.Ptr("P1M"),
				YearlyRetention:  to.Ptr("P5Y"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceLongTermRetentionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceLongTermRetentionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceLongTermRetentionPolicyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceLongTermRetentionPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceLongTermRetentionPolicyCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update the LTR policy for the managed database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceLongTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testResourceGroup",
		"testInstance",
		"testDatabase",
		armsql.ManagedInstanceLongTermRetentionPolicyNameDefault,
		armsql.ManagedInstanceLongTermRetentionPolicy{
			Properties: &armsql.BaseLongTermRetentionPolicyProperties{
				MonthlyRetention: to.Ptr("P1Y"),
				WeekOfYear:       to.Ptr[int32](5),
				WeeklyRetention:  to.Ptr("P1M"),
				YearlyRetention:  to.Ptr("P5Y"),
			},
		},
		&armsql.ManagedInstanceLongTermRetentionPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceLongTermRetentionPolicyCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceLongTermRetentionPolicyCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceLongTermRetentionPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/resourceGroups/managedInstances/databases/backupLongTermRetentionPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/managedInstances/testInstance/databases/testDatabase/backupLongTermRetentionPolicies/default"),
			Properties: &armsql.BaseLongTermRetentionPolicyProperties{
				MonthlyRetention: to.Ptr("P1Y"),
				WeekOfYear:       to.Ptr[int32](5),
				WeeklyRetention:  to.Ptr("P1M"),
				YearlyRetention:  to.Ptr("P5Y"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceLongTermRetentionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceLongTermRetentionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceLongTermRetentionPolicyCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceLongTermRetentionPolicies_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceLongTermRetentionPolicyListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the long term retention policies for the managed database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceLongTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("testResourceGroup",
		"testInstance",
		"testDatabase",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceLongTermRetentionPolicyListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceLongTermRetentionPolicyListResult{
			Value: []*armsql.ManagedInstanceLongTermRetentionPolicy{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/resourceGroups/managedInstances/databases/backupLongTermRetentionPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/managedInstances/testInstance/databases/testDatabase/backupLongTermRetentionPolicies/default"),
					Properties: &armsql.BaseLongTermRetentionPolicyProperties{
						MonthlyRetention: to.Ptr("P1Y"),
						WeekOfYear:       to.Ptr[int32](5),
						WeeklyRetention:  to.Ptr("P1M"),
						YearlyRetention:  to.Ptr("P5Y"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceLongTermRetentionPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceLongTermRetentionPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceLongTermRetentionPolicyListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceOperations_ListByManagedInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListManagedInstanceOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the managed instance management operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceOperationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByManagedInstance("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListManagedInstanceOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceOperationListResult{
			Value: []*armsql.ManagedInstanceOperation{
				{
					Name: to.Ptr("11111111-1111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/operations"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/operations/11111111-1111-1111-1111-111111111111"),
					Properties: &armsql.ManagedInstanceOperationProperties{
						IsCancellable:         to.Ptr(false),
						ManagedInstanceName:   to.Ptr("sqlcrudtest-4645"),
						Operation:             to.Ptr("UpsertManagedServer"),
						OperationFriendlyName: to.Ptr("UPDATE MANAGED SERVER"),
						PercentComplete:       to.Ptr[int32](100),
						StartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T11:08:44.49Z"); return t }()),
						State:                 to.Ptr(armsql.ManagementOperationStateCancelled),
					},
				},
				{
					Name: to.Ptr("22222222-2222-2222-2222-222222222222"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/operations"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/operations/22222222-2222-2222-2222-222222222222"),
					Properties: &armsql.ManagedInstanceOperationProperties{
						IsCancellable:         to.Ptr(true),
						ManagedInstanceName:   to.Ptr("sqlcrudtest-4645"),
						Operation:             to.Ptr("UpsertManagedServer"),
						OperationFriendlyName: to.Ptr("UPDATE MANAGED SERVER"),
						OperationParameters: &armsql.ManagedInstanceOperationParametersPair{
							CurrentParameters: &armsql.UpsertManagedServerOperationParameters{
								Family:          to.Ptr("Gen4"),
								StorageSizeInGB: to.Ptr[int32](32),
								Tier:            to.Ptr("GeneralPurpose"),
								VCores:          to.Ptr[int32](8),
							},
							RequestedParameters: &armsql.UpsertManagedServerOperationParameters{
								Family:          to.Ptr("Gen4"),
								StorageSizeInGB: to.Ptr[int32](128),
								Tier:            to.Ptr("BusinessCritical"),
								VCores:          to.Ptr[int32](8),
							},
						},
						OperationSteps: &armsql.ManagedInstanceOperationSteps{
							CurrentStep: to.Ptr[int32](3),
							StepsList: []*armsql.UpsertManagedServerOperationStep{
								{
									Name:   to.Ptr("Request validation"),
									Order:  to.Ptr[int32](1),
									Status: to.Ptr(armsql.UpsertManagedServerOperationStepStatusCompleted),
								},
								{
									Name:   to.Ptr("Virtual Cluster resize/creation"),
									Order:  to.Ptr[int32](2),
									Status: to.Ptr(armsql.UpsertManagedServerOperationStepStatusCompleted),
								},
								{
									Name:   to.Ptr("New SQL Instance Startup"),
									Order:  to.Ptr[int32](3),
									Status: to.Ptr(armsql.UpsertManagedServerOperationStepStatusInProgress),
								}},
							TotalSteps: to.Ptr("3"),
						},
						PercentComplete: to.Ptr[int32](50),
						StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T11:08:44.49Z"); return t }()),
						State:           to.Ptr(armsql.ManagementOperationStateInProgress),
					},
				},
				{
					Name: to.Ptr("33333333-3333-3333-3333-333333333333"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/operations"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/operations/33333333-3333-3333-3333-333333333333"),
					Properties: &armsql.ManagedInstanceOperationProperties{
						ErrorCode:             to.Ptr[int32](45157),
						ErrorDescription:      to.Ptr("Server 'sqlcrudtest-4645' is busy with another operation. Please try your operation later."),
						ErrorSeverity:         to.Ptr[int32](16),
						IsCancellable:         to.Ptr(false),
						IsUserError:           to.Ptr(true),
						ManagedInstanceName:   to.Ptr("sqlcrudtest-4645"),
						Operation:             to.Ptr("UpsertManagedServer"),
						OperationFriendlyName: to.Ptr("UPDATE MANAGED SERVER"),
						PercentComplete:       to.Ptr[int32](100),
						StartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T14:48:34.583Z"); return t }()),
						State:                 to.Ptr(armsql.ManagementOperationStateFailed),
					},
				},
				{
					Name: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/operations"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/operations/44444444-4444-4444-4444-444444444444"),
					Properties: &armsql.ManagedInstanceOperationProperties{
						ManagedInstanceName:   to.Ptr("sqlcrudtest-4645"),
						Operation:             to.Ptr("MakeAllManagedDatabasesAccessible"),
						OperationFriendlyName: to.Ptr("MAKE ALL MANAGED DBS ACCESSIBLE"),
						OperationSteps: &armsql.ManagedInstanceOperationSteps{
							CurrentStep: to.Ptr[int32](1),
							StepsList: []*armsql.UpsertManagedServerOperationStep{
								{
									Name:   to.Ptr("Request validation"),
									Order:  to.Ptr[int32](1),
									Status: to.Ptr(armsql.UpsertManagedServerOperationStepStatusFailed),
								}},
							TotalSteps: to.Ptr("1"),
						},
						PercentComplete: to.Ptr[int32](100),
						StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T09:00:08.1Z"); return t }()),
						State:           to.Ptr(armsql.ManagementOperationStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceOperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceOperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListManagedInstanceOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceOperations_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetManagedInstanceOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the managed instance management operation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceOperationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"00000000-1111-2222-3333-444444444444",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetManagedInstanceOperation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceOperation{
			Name: to.Ptr("11111111-1111-1111-1111-111111111111"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/operations"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/operations/11111111-1111-1111-1111-111111111111"),
			Properties: &armsql.ManagedInstanceOperationProperties{
				IsCancellable:         to.Ptr(false),
				ManagedInstanceName:   to.Ptr("sqlcrudtest-4645"),
				Operation:             to.Ptr("UpsertManagedServer"),
				OperationFriendlyName: to.Ptr("UPDATE MANAGED SERVER"),
				OperationSteps: &armsql.ManagedInstanceOperationSteps{
					CurrentStep: to.Ptr[int32](2),
					StepsList: []*armsql.UpsertManagedServerOperationStep{
						{
							Name:   to.Ptr("Request validation"),
							Order:  to.Ptr[int32](1),
							Status: to.Ptr(armsql.UpsertManagedServerOperationStepStatusCompleted),
						},
						{
							Name:   to.Ptr("New SQL Instance Startup"),
							Order:  to.Ptr[int32](2),
							Status: to.Ptr(armsql.UpsertManagedServerOperationStepStatusCanceled),
						},
						{
							Name:   to.Ptr("Seeding database files"),
							Order:  to.Ptr[int32](3),
							Status: to.Ptr(armsql.UpsertManagedServerOperationStepStatusNotStarted),
						},
						{
							Name:   to.Ptr("Preparing Failover and Failover"),
							Order:  to.Ptr[int32](4),
							Status: to.Ptr(armsql.UpsertManagedServerOperationStepStatusNotStarted),
						},
						{
							Name:   to.Ptr("Old SQL Instance cleanup"),
							Order:  to.Ptr[int32](5),
							Status: to.Ptr(armsql.UpsertManagedServerOperationStepStatusNotStarted),
						}},
					TotalSteps: to.Ptr("5"),
				},
				PercentComplete: to.Ptr[int32](100),
				StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-06T11:08:44.49Z"); return t }()),
				State:           to.Ptr(armsql.ManagementOperationStateCancelled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceOperation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceOperation)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetManagedInstanceOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceOperations_Cancel(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CancelManagedInstanceOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cancel the managed instance management operation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceOperationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Cancel(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"11111111-1111-1111-1111-111111111111",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CancelManagedInstanceOperation.json: %v", err)
	}
}

func TestManagedInstancePrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateEndpointConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancePrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default",
		"test-cl",
		"private-endpoint-connection-name",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateEndpointConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstancePrivateEndpointConnection{
			Name: to.Ptr("private-endpoint-connection-name"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/test-cl/privateEndpointConnections/private-endpoint-connection-name"),
			Properties: &armsql.ManagedInstancePrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsql.ManagedInstancePrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
				},
				PrivateLinkServiceConnectionState: &armsql.ManagedInstancePrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Auto-approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstancePrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstancePrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateEndpointConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstancePrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateEndpointConnectionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve or reject a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancePrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"test-cl",
		"private-endpoint-connection-name",
		armsql.ManagedInstancePrivateEndpointConnection{
			Properties: &armsql.ManagedInstancePrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armsql.ManagedInstancePrivateLinkServiceConnectionStateProperty{
					Description: to.Ptr("Approved by johndoe@contoso.com"),
					Status:      to.Ptr("Approved"),
				},
			},
		},
		&armsql.ManagedInstancePrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateEndpointConnectionUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateEndpointConnectionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstancePrivateEndpointConnection{
			Name: to.Ptr("private-endpoint-connection-name"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/test-cl/privateEndpointConnections/private-endpoint-connection-name"),
			Properties: &armsql.ManagedInstancePrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsql.ManagedInstancePrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
				},
				PrivateLinkServiceConnectionState: &armsql.ManagedInstancePrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Approved by johndoe@contoso.com"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstancePrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstancePrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateEndpointConnectionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstancePrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateEndpointConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancePrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default",
		"test-cl",
		"private-endpoint-connection-name",
		&armsql.ManagedInstancePrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateEndpointConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateEndpointConnectionDelete.json: %v", err)
	}
}

func TestManagedInstancePrivateEndpointConnections_ListByManagedInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateEndpointConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of private endpoint connections on a server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancePrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByManagedInstance("Default",
		"test-cl",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateEndpointConnectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstancePrivateEndpointConnectionListResult{
			Value: []*armsql.ManagedInstancePrivateEndpointConnection{
				{
					Name: to.Ptr("private-endpoint-connection-name"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/test-cl/privateEndpointConnections/private-endpoint-connection-name"),
					Properties: &armsql.ManagedInstancePrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsql.ManagedInstancePrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
						},
						PrivateLinkServiceConnectionState: &armsql.ManagedInstancePrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name: to.Ptr("private-endpoint-connection-name-2"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/test-cl/privateEndpointConnections/private-endpoint-connection-name-2"),
					Properties: &armsql.ManagedInstancePrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsql.ManagedInstancePrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name-2"),
						},
						PrivateLinkServiceConnectionState: &armsql.ManagedInstancePrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstancePrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstancePrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateEndpointConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstancePrivateLinkResources_ListByManagedInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateLinkResourcesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private link resources for SQL."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancePrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByManagedInstance("Default",
		"test-cl",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateLinkResourcesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstancePrivateLinkListResult{
			Value: []*armsql.ManagedInstancePrivateLink{
				{
					Name: to.Ptr("plr"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/privateLinkResources"),
					ID:   to.Ptr("subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/test-cl/privateLinkResources/plr"),
					Properties: &armsql.ManagedInstancePrivateLinkProperties{
						GroupID: to.Ptr("managedInstance"),
						RequiredMembers: []*string{
							to.Ptr("managedInstance")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstancePrivateLinkListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstancePrivateLinkListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateLinkResourcesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstancePrivateLinkResources_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateLinkResourcesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a private link resource for SQL."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancePrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default",
		"test-cl",
		"plr",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateLinkResourcesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstancePrivateLink{
			Name: to.Ptr("plr"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/privateLinkResources"),
			ID:   to.Ptr("subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/test-cl/privateLinkResources/plr"),
			Properties: &armsql.ManagedInstancePrivateLinkProperties{
				GroupID: to.Ptr("managedInstance"),
				RequiredMembers: []*string{
					to.Ptr("managedInstance")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstancePrivateLink) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstancePrivateLink)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstancePrivateLinkResourcesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceTdeCertificates_Create(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceTdeCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Upload a TDE certificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceTdeCertificatesClient("00000000-0000-0000-0000-000000000001", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"testtdecert",
		"testtdecert",
		armsql.TdeCertificate{
			Properties: &armsql.TdeCertificateProperties{
				PrivateBlob: to.Ptr("MIIXXXXXXXX"),
			},
		},
		&armsql.ManagedInstanceTdeCertificatesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceTdeCertificate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceTdeCertificate.json: %v", err)
	}
}

func TestManagedInstanceVulnerabilityAssessments_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a managed instance's vulnerability assessment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		armsql.VulnerabilityAssessmentNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityaseessmenttest-6440/vulnerabilityAssessments/default"),
			Properties: &armsql.ManagedInstanceVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceVulnerabilityAssessments_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed instance's vulnerability assessment with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		armsql.VulnerabilityAssessmentNameDefault,
		armsql.ManagedInstanceVulnerabilityAssessment{
			Properties: &armsql.ManagedInstanceVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
				StorageAccountAccessKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey:  to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityaseessmenttest-6440/vulnerabilityAssessments/default"),
			Properties: &armsql.ManagedInstanceVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentCreateStorageAccessKeyMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed instance's vulnerability assessment with minimal parameters, when storageAccountAccessKey is specified"},
	})
	client = armsql.NewManagedInstanceVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		armsql.VulnerabilityAssessmentNameDefault,
		armsql.ManagedInstanceVulnerabilityAssessment{
			Properties: &armsql.ManagedInstanceVulnerabilityAssessmentProperties{
				StorageAccountAccessKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentCreateStorageAccessKeyMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityaseessmenttest-6440/vulnerabilityAssessments/default"),
			Properties: &armsql.ManagedInstanceVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(false),
					Emails:                  []*string{},
					IsEnabled:               to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentCreateStorageAccessKeyMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentCreateContainerSasKeyMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed instance's vulnerability assessment with minimal parameters, when storageContainerSasKey is specified"},
	})
	client = armsql.NewManagedInstanceVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		armsql.VulnerabilityAssessmentNameDefault,
		armsql.ManagedInstanceVulnerabilityAssessment{
			Properties: &armsql.ManagedInstanceVulnerabilityAssessmentProperties{
				StorageContainerPath:   to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentCreateContainerSasKeyMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityaseessmenttest-6440/vulnerabilityAssessments/default"),
			Properties: &armsql.ManagedInstanceVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(false),
					Emails:                  []*string{},
					IsEnabled:               to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentCreateContainerSasKeyMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstanceVulnerabilityAssessments_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Remove a managed instance's vulnerability assessment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		armsql.VulnerabilityAssessmentNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentDelete.json: %v", err)
	}
}

func TestManagedInstanceVulnerabilityAssessments_ListByInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentListByInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a managed instance's vulnerability assessment policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstanceVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByInstance("vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentListByInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceVulnerabilityAssessmentListResult{
			Value: []*armsql.ManagedInstanceVulnerabilityAssessment{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/vulnerabilityAssessments"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/managedInstances/vulnerabilityaseessmenttest-6440/vulnerabilityAssessments/default"),
					Properties: &armsql.ManagedInstanceVulnerabilityAssessmentProperties{
						RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
							EmailSubscriptionAdmins: to.Ptr(true),
							Emails: []*string{
								to.Ptr("email1@mail.com"),
								to.Ptr("email2@mail.com")},
							IsEnabled: to.Ptr(true),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceVulnerabilityAssessmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceVulnerabilityAssessmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceVulnerabilityAssessmentListByInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetManagedShortTermRetentionPolicyRestorableDropped.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the short term retention policy for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb,131403269876900000",
		armsql.ManagedShortTermRetentionPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetManagedShortTermRetentionPolicyRestorableDropped.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedBackupShortTermRetentionPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/restorableDroppedDatabases/backupShortTermRetentionPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstance/testsvr/restorableDroppedDatabases/testdb,131403269876900000/backupShortTermRetentionPolicies/default"),
			Properties: &armsql.ManagedBackupShortTermRetentionPolicyProperties{
				RetentionDays: to.Ptr[int32](14),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedBackupShortTermRetentionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedBackupShortTermRetentionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetManagedShortTermRetentionPolicyRestorableDropped.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicyRestorableDropped.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the short term retention policy for the restorable dropped database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup",
		"testsvr",
		"testdb,131403269876900000",
		armsql.ManagedShortTermRetentionPolicyNameDefault,
		armsql.ManagedBackupShortTermRetentionPolicy{
			Properties: &armsql.ManagedBackupShortTermRetentionPolicyProperties{
				RetentionDays: to.Ptr[int32](14),
			},
		},
		&armsql.ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicyRestorableDropped.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicyRestorableDropped.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedBackupShortTermRetentionPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/restorableDroppedDatabases/backupShortTermRetentionPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup/providers/Microsoft.Sql/managedInstances/testsvr/restorableDroppedDatabases/testdb,131403269876900000/backupShortTermRetentionPolicies/default"),
			Properties: &armsql.ManagedBackupShortTermRetentionPolicyProperties{
				RetentionDays: to.Ptr[int32](14),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedBackupShortTermRetentionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedBackupShortTermRetentionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicyRestorableDropped.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicyRestorableDropped.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the short term retention policy for the restorable dropped database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"resourceGroup",
		"testsvr",
		"testdb,131403269876900000",
		armsql.ManagedShortTermRetentionPolicyNameDefault,
		armsql.ManagedBackupShortTermRetentionPolicy{
			Properties: &armsql.ManagedBackupShortTermRetentionPolicyProperties{
				RetentionDays: to.Ptr[int32](14),
			},
		},
		&armsql.ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicyRestorableDropped.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicyRestorableDropped.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedBackupShortTermRetentionPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/restorableDroppedDatabases/backupShortTermRetentionPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup/providers/Microsoft.Sql/managedInstances/testsvr/restorableDroppedDatabases/testdb,131403269876900000/backupShortTermRetentionPolicies/default"),
			Properties: &armsql.ManagedBackupShortTermRetentionPolicyProperties{
				RetentionDays: to.Ptr[int32](14),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedBackupShortTermRetentionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedBackupShortTermRetentionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/UpdateManagedShortTermRetentionPolicyRestorableDropped.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_ListByRestorableDroppedDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetListManagedShortTermRetentionPolicyRestorableDropped.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the short term retention policy list for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByRestorableDroppedDatabase("Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb,131403269876900000",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetListManagedShortTermRetentionPolicyRestorableDropped.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedBackupShortTermRetentionPolicyListResult{
			Value: []*armsql.ManagedBackupShortTermRetentionPolicy{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/restorableDroppedDatabases/backupShortTermRetentionPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/restorableDroppedDatabases/testdb,131403269876900000/backupShortTermRetentionPolicies/default"),
					Properties: &armsql.ManagedBackupShortTermRetentionPolicyProperties{
						RetentionDays: to.Ptr[int32](14),
					},
				},
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/restorableDroppedDatabases/backupShortTermRetentionPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/restorableDroppedDatabases/testdb,131403269876900000/backupShortTermRetentionPolicies/default"),
					Properties: &armsql.ManagedBackupShortTermRetentionPolicyProperties{
						RetentionDays: to.Ptr[int32](14),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedBackupShortTermRetentionPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedBackupShortTermRetentionPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetListManagedShortTermRetentionPolicyRestorableDropped.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedServerSecurityAlertPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedServerSecurityAlertGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a managed server's threat detection policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"securityalert-4799",
		"securityalert-6440",
		armsql.SecurityAlertPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedServerSecurityAlertGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/managedInstances/securityalert-6440"),
			Properties: &armsql.SecurityAlertsPolicyProperties{
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("test@consoto.com;user@consoto.com")},
				RetentionDays:           to.Ptr[int32](0),
				State:                   to.Ptr(armsql.SecurityAlertsPolicyStateDisabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr(""),
			},
			SystemData: &armsql.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armsql.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armsql.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedServerSecurityAlertGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedServerSecurityAlertPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedServerSecurityAlertCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed server's threat detection policy with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		armsql.SecurityAlertPolicyNameDefault,
		armsql.ManagedServerSecurityAlertPolicy{
			Properties: &armsql.SecurityAlertsPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("testSecurityAlert@microsoft.com")},
				RetentionDays:           to.Ptr[int32](5),
				State:                   to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armsql.ManagedServerSecurityAlertPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedServerSecurityAlertCreateMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedServerSecurityAlertCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/managedInstances/securityalert-6440"),
			Properties: &armsql.SecurityAlertsPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("testSecurityAlert@microsoft.com")},
				RetentionDays:           to.Ptr[int32](5),
				State:                   to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
			SystemData: &armsql.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armsql.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armsql.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedServerSecurityAlertCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedServerSecurityAlertCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed server's threat detection policy with minimal parameters"},
	})
	client = armsql.NewManagedServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		armsql.SecurityAlertPolicyNameDefault,
		armsql.ManagedServerSecurityAlertPolicy{
			Properties: &armsql.SecurityAlertsPolicyProperties{
				State: to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
			},
		},
		&armsql.ManagedServerSecurityAlertPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedServerSecurityAlertCreateMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedServerSecurityAlertCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/managedInstances/securityalert-6440"),
			Properties: &armsql.SecurityAlertsPolicyProperties{
				DisabledAlerts:          []*string{},
				EmailAccountAdmins:      to.Ptr(true),
				EmailAddresses:          []*string{},
				RetentionDays:           to.Ptr[int32](0),
				State:                   to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr(""),
			},
			SystemData: &armsql.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armsql.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armsql.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedServerSecurityAlertCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedServerSecurityAlertPolicies_ListByInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedServerSecurityAlertListByInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the managed server's threat detection policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByInstance("securityalert-4799",
		"securityalert-6440",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedServerSecurityAlertListByInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedServerSecurityAlertPolicyListResult{
			Value: []*armsql.ManagedServerSecurityAlertPolicy{
				{
					Name: to.Ptr("Default"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/securityAlertPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/managedInstances/securityalert-6440"),
					Properties: &armsql.SecurityAlertsPolicyProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
						DisabledAlerts: []*string{
							to.Ptr("Access_Anomaly")},
						EmailAccountAdmins: to.Ptr(true),
						EmailAddresses: []*string{
							to.Ptr("test@consoto.com;user@consoto.com")},
						RetentionDays:           to.Ptr[int32](0),
						State:                   to.Ptr(armsql.SecurityAlertsPolicyStateDisabled),
						StorageAccountAccessKey: to.Ptr(""),
						StorageEndpoint:         to.Ptr(""),
					},
					SystemData: &armsql.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsql.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsql.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedServerSecurityAlertPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedServerSecurityAlertPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedServerSecurityAlertListByInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.PrivateEndpointConnection{
			Name: to.Ptr("private-endpoint-connection-name"),
			Type: to.Ptr("Microsoft.Sql/servers/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name"),
			Properties: &armsql.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsql.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
				},
				PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Auto-approved"),
					ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
					Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
				},
				ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve or reject a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		armsql.PrivateEndpointConnection{
			Properties: &armsql.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
					Description: to.Ptr("Approved by johndoe@contoso.com"),
					Status:      to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
				},
			},
		},
		&armsql.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.PrivateEndpointConnection{
			Name: to.Ptr("private-endpoint-connection-name"),
			Type: to.Ptr("Microsoft.Sql/servers/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name"),
			Properties: &armsql.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsql.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
				},
				PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Approved by johndoe@contoso.com"),
					ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
					Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
				},
				ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		&armsql.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
}

func TestPrivateEndpointConnections_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of private endpoint connections on a server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("Default",
		"test-svr",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.PrivateEndpointConnectionListResult{
			Value: []*armsql.PrivateEndpointConnection{
				{
					Name: to.Ptr("private-endpoint-connection-name"),
					Type: to.Ptr("Microsoft.Sql/servers/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name-2"),
					Properties: &armsql.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsql.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
						},
						PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
							Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
						},
						ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
					},
				},
				{
					Name: to.Ptr("private-endpoint-connection-name-2"),
					Type: to.Ptr("Microsoft.Sql/servers/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name-2"),
					Properties: &armsql.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsql.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name-2"),
						},
						PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
							Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
						},
						ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateLinkResourcesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private link resources for SQL."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("Default",
		"test-svr",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateLinkResourcesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.PrivateLinkResourceListResult{
			Value: []*armsql.PrivateLinkResource{
				{
					Name: to.Ptr("plr"),
					Type: to.Ptr("Microsoft.Sql/servers/privateLinkResources"),
					ID:   to.Ptr("subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/test-svr/privateLinkResources/plr"),
					Properties: &armsql.PrivateLinkResourceProperties{
						GroupID: to.Ptr("sqlServer"),
						RequiredMembers: []*string{
							to.Ptr("sqlServer")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateLinkResourcesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateLinkResourcesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a private link resource for SQL."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default",
		"test-svr",
		"plr",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateLinkResourcesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.PrivateLinkResource{
			Name: to.Ptr("plr"),
			Type: to.Ptr("Microsoft.Sql/servers/privateLinkResources"),
			ID:   to.Ptr("subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/test-svr/privateLinkResources/plr"),
			Properties: &armsql.PrivateLinkResourceProperties{
				GroupID: to.Ptr("sqlServer"),
				RequiredMembers: []*string{
					to.Ptr("sqlServer")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateLinkResourcesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoverableManagedDatabases_ListByInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListRecoverableManagedDatabasesByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List recoverable databases by managed instances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewRecoverableManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByInstance("Test1",
		"managedInstance",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListRecoverableManagedDatabasesByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.RecoverableManagedDatabaseListResult{
			Value: []*armsql.RecoverableManagedDatabase{
				{
					Name: to.Ptr("testdb"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/recoverableDaatabases"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/recoverableDaatabases/testdb"),
					Properties: &armsql.RecoverableManagedDatabaseProperties{
						LastAvailableBackupDate: to.Ptr("2017-05-26T01:06:29.78Z"),
					},
				},
				{
					Name: to.Ptr("testdb2"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/recoverableDaatabases"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/recoverableDaatabases/testdb2"),
					Properties: &armsql.RecoverableManagedDatabaseProperties{
						LastAvailableBackupDate: to.Ptr("2018-04-26T02:17:23.44Z"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecoverableManagedDatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecoverableManagedDatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListRecoverableManagedDatabasesByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoverableManagedDatabases_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetRecoverableManagedDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a recoverable databases by managed instances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewRecoverableManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Test1",
		"managedInstance",
		"testdb",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetRecoverableManagedDatabase.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.RecoverableManagedDatabase{
			Name: to.Ptr("testdb"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/recoverableDatabases"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/recoverableDatabases/testdb"),
			Properties: &armsql.RecoverableManagedDatabaseProperties{
				LastAvailableBackupDate: to.Ptr("2017-05-26T01:06:29.78Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoverableManagedDatabase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoverableManagedDatabase)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetRecoverableManagedDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorePoints_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRestorePointsListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List database restore points."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewRestorePointsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("sqlcrudtest-6730",
		"sqlcrudtest-9007",
		"3481",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRestorePointsListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.RestorePointListResult{
			Value: []*armsql.RestorePoint{
				{
					Name:     to.Ptr("ContinuousRestorePoint"),
					Type:     to.Ptr("Microsoft.Sql/servers/databases/restorePoints"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6730/providers/Microsoft.Sql/servers/sqlcrudtest-9007/databases/3481/restorepoints/ContinuousRestorePoint"),
					Location: to.Ptr("West US"),
					Properties: &armsql.RestorePointProperties{
						EarliestRestoreDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-12T00:00:00Z"); return t }()),
						RestorePointType:    to.Ptr(armsql.RestorePointTypeCONTINUOUS),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorePointListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorePointListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRestorePointsListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DataWarehouseRestorePointsListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List datawarehouse database restore points."},
	})
	client = armsql.NewRestorePointsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager = client.ListByDatabase("Default-SQL-SouthEastAsia",
		"testserver",
		"testDatabase",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DataWarehouseRestorePointsListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.RestorePointListResult{
			Value: []*armsql.RestorePoint{
				{
					Name:     to.Ptr("131546477590000000"),
					Type:     to.Ptr("Microsoft.Sql/servers/databases/restorePoints"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/servers/testserver/databases/testDatabase/restorePoints/131546477590000000"),
					Location: to.Ptr("japaneast"),
					Properties: &armsql.RestorePointProperties{
						RestorePointCreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						RestorePointLabel:        to.Ptr("mylabel1"),
						RestorePointType:         to.Ptr(armsql.RestorePointTypeDISCRETE),
					},
				},
				{
					Name:     to.Ptr("131553636140000000"),
					Type:     to.Ptr("Microsoft.Sql/servers/databases/restorePoints"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/servers/testserver/databases/testDatabase/restorePoints/131553636140000000"),
					Location: to.Ptr("japaneast"),
					Properties: &armsql.RestorePointProperties{
						RestorePointCreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-17T03:40:14Z"); return t }()),
						RestorePointLabel:        to.Ptr("mylabel2"),
						RestorePointType:         to.Ptr(armsql.RestorePointTypeDISCRETE),
					},
				},
				{
					Name:     to.Ptr("131553619750000000"),
					Type:     to.Ptr("Microsoft.Sql/servers/databases/restorePoints"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/servers/testserver/databases/testDatabase/restorePoints/131553619750000000"),
					Location: to.Ptr("japaneast"),
					Properties: &armsql.RestorePointProperties{
						RestorePointCreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-17T03:12:55Z"); return t }()),
						RestorePointType:         to.Ptr(armsql.RestorePointTypeDISCRETE),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorePointListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorePointListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DataWarehouseRestorePointsListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorePoints_Create(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRestorePointsPost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates datawarehouse database restore point."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewRestorePointsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"Default-SQL-SouthEastAsia",
		"testserver",
		"testDatabase",
		armsql.CreateDatabaseRestorePointDefinition{
			RestorePointLabel: to.Ptr("mylabel"),
		},
		&armsql.RestorePointsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRestorePointsPost.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRestorePointsPost.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.RestorePoint{
			Name:     to.Ptr("131546477590000000"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases/restorePoints"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/servers/testserver/databases/testDatabase/restorePoints/131546477590000000"),
			Location: to.Ptr("japaneast"),
			Properties: &armsql.RestorePointProperties{
				RestorePointCreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
				RestorePointLabel:        to.Ptr("mylabel"),
				RestorePointType:         to.Ptr(armsql.RestorePointTypeDISCRETE),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RestorePoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RestorePoint)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRestorePointsPost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorePoints_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRestorePointsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a database restore point."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewRestorePointsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testserver",
		"testDatabase",
		"131546477590000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRestorePointsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.RestorePoint{
			Name:     to.Ptr("ContinuousRestorePoint"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases/restorePoints"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/servers/testserver/databases/testDatabase/restorePoints/ContinuousRestorePoint"),
			Location: to.Ptr("japaneast"),
			Properties: &armsql.RestorePointProperties{
				EarliestRestoreDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
				RestorePointType:    to.Ptr(armsql.RestorePointTypeCONTINUOUS),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RestorePoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RestorePoint)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRestorePointsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DataWarehouseRestorePointsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a datawarehouse database restore point."},
	})
	client = armsql.NewRestorePointsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testserver",
		"testDatabase",
		"131546477590000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DataWarehouseRestorePointsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.RestorePoint{
			Name:     to.Ptr("131546477590000000"),
			Type:     to.Ptr("Microsoft.Sql/servers/databases/restorePoints"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/servers/testserver/databases/testDatabase/restorePoints/131546477590000000"),
			Location: to.Ptr("japaneast"),
			Properties: &armsql.RestorePointProperties{
				RestorePointCreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
				RestorePointLabel:        to.Ptr("mylabel"),
				RestorePointType:         to.Ptr(armsql.RestorePointTypeDISCRETE),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RestorePoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RestorePoint)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DataWarehouseRestorePointsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorePoints_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRestorePointsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a restore point."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewRestorePointsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"Default-SQL-SouthEastAsia",
		"testserver",
		"testDatabase",
		"131546477590000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseRestorePointsDelete.json: %v", err)
	}
}

func TestSensitivityLabels_ListCurrentByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SensitivityLabelsListByDatabaseWithSourceCurrent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the current sensitivity labels of a given database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListCurrentByDatabase("myRG",
		"myServer",
		"myDatabase",
		&armsql.SensitivityLabelsClientListCurrentByDatabaseOptions{SkipToken: nil,
			Count:  nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SensitivityLabelsListByDatabaseWithSourceCurrent.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.SensitivityLabelListResult{
			Value: []*armsql.SensitivityLabel{
				{
					Name: to.Ptr("current"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables/columns/sensitivityLabels"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/myServer/databases/myDatabase/schemas/dbo/tables/myTable/columns/myColumn3/sensitivityLabels/current"),
					Properties: &armsql.SensitivityLabelProperties{
						ColumnName:        to.Ptr("myColumn3"),
						InformationType:   to.Ptr("Financial"),
						InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
						LabelID:           to.Ptr("05e6eaa1-075a-4fb4-a732-a92215a2444a"),
						LabelName:         to.Ptr("Sensitive"),
						Rank:              to.Ptr(armsql.SensitivityLabelRankLow),
						SchemaName:        to.Ptr("dbo"),
						TableName:         to.Ptr("myTable"),
					},
				},
				{
					Name: to.Ptr("current"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables/columns/sensitivityLabels"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/myServer/databases/myDatabase/schemas/dbo/tables/myTable/columns/myColumn4/sensitivityLabels/current"),
					Properties: &armsql.SensitivityLabelProperties{
						ColumnName:        to.Ptr("myColumn4"),
						InformationType:   to.Ptr("Email"),
						InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
						LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
						LabelName:         to.Ptr("PII"),
						Rank:              to.Ptr(armsql.SensitivityLabelRankNone),
						SchemaName:        to.Ptr("dbo"),
						TableName:         to.Ptr("myTable"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SensitivityLabelListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SensitivityLabelListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SensitivityLabelsListByDatabaseWithSourceCurrent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSensitivityLabels_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SensitivityLabelsCurrentUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update sensitivity labels of a given database using an operations batch."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Update(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		armsql.SensitivityLabelUpdateList{
			Operations: []*armsql.SensitivityLabelUpdate{
				{
					Properties: &armsql.SensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("column1"),
						Op:     to.Ptr(armsql.SensitivityLabelUpdateKindSet),
						SensitivityLabel: &armsql.SensitivityLabel{
							Properties: &armsql.SensitivityLabelProperties{
								InformationType:   to.Ptr("Financial"),
								InformationTypeID: to.Ptr("1D3652D6-422C-4115-82F1-65DAEBC665C8"),
								LabelID:           to.Ptr("3A477B16-9423-432B-AA97-6069B481CEC3"),
								LabelName:         to.Ptr("Highly Confidential"),
								Rank:              to.Ptr(armsql.SensitivityLabelRankLow),
							},
						},
						Table: to.Ptr("table1"),
					},
				},
				{
					Properties: &armsql.SensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("column2"),
						Op:     to.Ptr(armsql.SensitivityLabelUpdateKindSet),
						SensitivityLabel: &armsql.SensitivityLabel{
							Properties: &armsql.SensitivityLabelProperties{
								InformationType:   to.Ptr("PhoneNumber"),
								InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
								LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
								LabelName:         to.Ptr("PII"),
								Rank:              to.Ptr(armsql.SensitivityLabelRankCritical),
							},
						},
						Table: to.Ptr("table2"),
					},
				},
				{
					Properties: &armsql.SensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("Column3"),
						Op:     to.Ptr(armsql.SensitivityLabelUpdateKindRemove),
						Table:  to.Ptr("Table1"),
					},
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SensitivityLabelsCurrentUpdate.json: %v", err)
	}
}

func TestSensitivityLabels_ListRecommendedByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SensitivityLabelsListByDatabaseWithSourceRecommended.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the recommended sensitivity labels of a given database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListRecommendedByDatabase("myRG",
		"myServer",
		"myDatabase",
		&armsql.SensitivityLabelsClientListRecommendedByDatabaseOptions{SkipToken: nil,
			IncludeDisabledRecommendations: nil,
			Filter:                         nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SensitivityLabelsListByDatabaseWithSourceRecommended.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.SensitivityLabelListResult{
			Value: []*armsql.SensitivityLabel{
				{
					Name: to.Ptr("recommended"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables/columns/sensitivityLabels"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/myServer/databases/myDatabase/schemas/dbo/tables/myTable/columns/myColumn/sensitivityLabels/recommended"),
					Properties: &armsql.SensitivityLabelProperties{
						ColumnName:        to.Ptr("myColumn"),
						InformationType:   to.Ptr("Financial"),
						InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
						LabelID:           to.Ptr("05e6eaa1-075a-4fb4-a732-a92215a2444a"),
						LabelName:         to.Ptr("Sensitive"),
						SchemaName:        to.Ptr("dbo"),
						TableName:         to.Ptr("myTable"),
					},
				},
				{
					Name: to.Ptr("recommended"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables/columns/sensitivityLabels"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/myServer/databases/myDatabase/schemas/dbo/tables/myTable/columns/myColumn2/sensitivityLabels/recommended"),
					Properties: &armsql.SensitivityLabelProperties{
						ColumnName:        to.Ptr("myColumn2"),
						InformationType:   to.Ptr("Email"),
						InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
						LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
						LabelName:         to.Ptr("PII"),
						SchemaName:        to.Ptr("dbo"),
						TableName:         to.Ptr("myTable"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SensitivityLabelListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SensitivityLabelListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SensitivityLabelsListByDatabaseWithSourceRecommended.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSensitivityLabels_EnableRecommendation(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/RecommendedColumnSensitivityLabelEnable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enables sensitivity recommendations on a given column"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.EnableRecommendation(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/RecommendedColumnSensitivityLabelEnable.json: %v", err)
	}
}

func TestSensitivityLabels_DisableRecommendation(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/RecommendedColumnSensitivityLabelDisable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disables sensitivity recommendations on a given column"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.DisableRecommendation(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/RecommendedColumnSensitivityLabelDisable.json: %v", err)
	}
}

func TestSensitivityLabels_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ColumnSensitivityLabelGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the sensitivity label of a given column"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		armsql.SensitivityLabelSourceCurrent,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ColumnSensitivityLabelGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SensitivityLabel{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables/columns/sensitivityLabels"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/myServer/databases/myDatabase/schemas/dbo/tables/myTable/columns/myColumn/sensitivityLabels/current"),
			Properties: &armsql.SensitivityLabelProperties{
				ColumnName:        to.Ptr("myColumn"),
				InformationType:   to.Ptr("PhoneNumber"),
				InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
				LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
				LabelName:         to.Ptr("PII"),
				Rank:              to.Ptr(armsql.SensitivityLabelRankHigh),
				SchemaName:        to.Ptr("dbo"),
				TableName:         to.Ptr("myTable"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SensitivityLabel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SensitivityLabel)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ColumnSensitivityLabelGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSensitivityLabels_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ColumnSensitivityLabelCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates the sensitivity label of a given column with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		armsql.SensitivityLabel{
			Properties: &armsql.SensitivityLabelProperties{
				InformationType:   to.Ptr("PhoneNumber"),
				InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
				LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
				LabelName:         to.Ptr("PII"),
				Rank:              to.Ptr(armsql.SensitivityLabelRankLow),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ColumnSensitivityLabelCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SensitivityLabel{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/schemas/tables/columns/sensitivityLabels"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/myServer/databases/myDatabase/schemas/dbo/tables/myTable/columns/myColumn/sensitivityLabels/current"),
			Properties: &armsql.SensitivityLabelProperties{
				ColumnName:        to.Ptr("myColumn"),
				InformationType:   to.Ptr("PhoneNumber"),
				InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
				LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
				LabelName:         to.Ptr("PII"),
				Rank:              to.Ptr(armsql.SensitivityLabelRankMedium),
				SchemaName:        to.Ptr("dbo"),
				TableName:         to.Ptr("myTable"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SensitivityLabel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SensitivityLabel)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ColumnSensitivityLabelCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSensitivityLabels_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ColumnSensitivityLabelDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the sensitivity label of a given column"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ColumnSensitivityLabelDelete.json: %v", err)
	}
}

func TestRecommendedSensitivityLabels_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SensitivityLabelsRecommendedUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update recommended sensitivity labels of a given database using an operations batch."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewRecommendedSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Update(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		armsql.RecommendedSensitivityLabelUpdateList{
			Operations: []*armsql.RecommendedSensitivityLabelUpdate{
				{
					Properties: &armsql.RecommendedSensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("column1"),
						Op:     to.Ptr(armsql.RecommendedSensitivityLabelUpdateKindEnable),
						Table:  to.Ptr("table1"),
					},
				},
				{
					Properties: &armsql.RecommendedSensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("column2"),
						Op:     to.Ptr(armsql.RecommendedSensitivityLabelUpdateKindEnable),
						Table:  to.Ptr("table2"),
					},
				},
				{
					Properties: &armsql.RecommendedSensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("column3"),
						Op:     to.Ptr(armsql.RecommendedSensitivityLabelUpdateKindDisable),
						Table:  to.Ptr("table1"),
					},
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SensitivityLabelsRecommendedUpdate.json: %v", err)
	}
}

func TestServerAdvisors_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAdvisorList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of server advisors"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerAdvisorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.ListByServer(ctx,
		"workloadinsight-demos",
		"misosisvr",
		&armsql.ServerAdvisorsClientListByServerOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAdvisorList.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armsql.Advisor{
			{
				Name:     to.Ptr("CreateIndex"),
				Type:     to.Ptr("Microsoft.Sql/servers/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/CreateIndex"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusGA),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDefault),
				},
			},
			{
				Name:     to.Ptr("DropIndex"),
				Type:     to.Ptr("Microsoft.Sql/servers/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/DropIndex"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusGA),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDefault),
				},
			},
			{
				Name:     to.Ptr("DbParameterization"),
				Type:     to.Ptr("Microsoft.Sql/servers/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/DbParameterization"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusGA),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDefault),
				},
			},
			{
				Name:     to.Ptr("SchemaIssue"),
				Type:     to.Ptr("Microsoft.Sql/servers/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/SchemaIssue"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusPublicPreview),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDefault),
				},
			},
			{
				Name:     to.Ptr("ForceLastGoodPlan"),
				Type:     to.Ptr("Microsoft.Sql/servers/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/ForceLastGoodPlan"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusPrivatePreview),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDefault),
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.AdvisorArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdvisorArray)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAdvisorList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerRecommendedActionListExpand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List of server recommended actions for all advisors"},
	})
	client = armsql.NewServerAdvisorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.ListByServer(ctx,
		"workloadinsight-demos",
		"misosisvr",
		&armsql.ServerAdvisorsClientListByServerOptions{Expand: to.Ptr("recommendedActions")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerRecommendedActionListExpand.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armsql.Advisor{
			{
				Name:     to.Ptr("CreateIndex"),
				Type:     to.Ptr("Microsoft.Sql/servers/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/CreateIndex"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusGA),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromServer),
					RecommendedActions: []*armsql.RecommendedAction{
						{
							Name:     to.Ptr("IR_[CRM]_[DataPoints]_4821CD2F9510D98184BB"),
							Type:     to.Ptr("Microsoft.Sql/servers/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/CreateIndex/recommendedActions/IR_[CRM]_[DataPoints]_4821CD2F9510D98184BB"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										AbsoluteValue: to.Ptr[float64](1440),
										DimensionName: to.Ptr("ActionDuration"),
										Unit:          to.Ptr("Seconds"),
									},
									{
										AbsoluteValue: to.Ptr[float64](209.3125),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									}},
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("CREATE NONCLUSTERED INDEX [nci_wi_DataPoints_B892614093BAC56295EF6018BD4CB51B] ON [CRM].[DataPoints] ([Name],[Money],[Power]) INCLUDE ([Hour], [System], [LastChanged]) WITH (ONLINE = ON)"),
								},
								IsArchivedAction:     to.Ptr(false),
								IsExecutableAction:   to.Ptr(true),
								IsRevertableAction:   to.Ptr(true),
								LastRefresh:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:04Z"); return t }()),
								ObservedImpact:       []*armsql.RecommendedActionImpactRecord{},
								RecommendationReason: to.Ptr(""),
								Score:                to.Ptr[int32](1),
								State: &armsql.RecommendedActionStateInfo{
									CurrentValue: to.Ptr(armsql.RecommendedActionCurrentStateActive),
									LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-20T15:15:40Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:04Z"); return t }()),
								Details: map[string]interface{}{
									"schema":          "[CRM]",
									"databaseName":    "IndexAdvisor_test_3",
									"includedColumns": "[Hour], [System], [LastChanged]",
									"indexColumns":    "[Name],[Money],[Power]",
									"indexName":       "nci_wi_DataPoints_B892614093BAC56295EF6018BD4CB51B",
									"indexType":       "NONCLUSTERED",
									"table":           "[DataPoints]",
								},
							},
						},
						{
							Name:     to.Ptr("IR_[dbo]_[Employees]_560E15A98D14CA09BDFB"),
							Type:     to.Ptr("Microsoft.Sql/servers/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/CreateIndex/recommendedActions/IR_[dbo]_[Employees]_560E15A98D14CA09BDFB"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										AbsoluteValue: to.Ptr[float64](17),
										DimensionName: to.Ptr("ActionDuration"),
										Unit:          to.Ptr("Seconds"),
									},
									{
										AbsoluteValue: to.Ptr[float64](128),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									}},
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("CREATE NONCLUSTERED INDEX [nci_wi_Employees_8C18C2AF4267DC77793040782641CCDE] ON [dbo].[Employees] ([City], [State]) INCLUDE ([Postal]) WITH (ONLINE = ON)"),
								},
								IsArchivedAction:     to.Ptr(false),
								IsExecutableAction:   to.Ptr(true),
								IsRevertableAction:   to.Ptr(true),
								LastRefresh:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ObservedImpact:       []*armsql.RecommendedActionImpactRecord{},
								RecommendationReason: to.Ptr(""),
								Score:                to.Ptr[int32](3),
								State: &armsql.RecommendedActionStateInfo{
									CurrentValue: to.Ptr(armsql.RecommendedActionCurrentStateActive),
									LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								Details: map[string]interface{}{
									"schema":          "[dbo]",
									"databaseName":    "IndexAdvisor_test_3",
									"includedColumns": "[Postal]",
									"indexColumns":    "[City], [State]",
									"indexName":       "nci_wi_Employees_8C18C2AF4267DC77793040782641CCDE",
									"indexType":       "NONCLUSTERED",
									"table":           "[Employees]",
								},
							},
						},
						{
							Name:     to.Ptr("IR_[dbo]_[DataPoints]_F5D2F347AA22DB46E4CC"),
							Type:     to.Ptr("Microsoft.Sql/servers/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/CreateIndex/recommendedActions/IR_[dbo]_[DataPoints]_F5D2F347AA22DB46E4CC"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										AbsoluteValue: to.Ptr[float64](5040),
										DimensionName: to.Ptr("ActionDuration"),
										Unit:          to.Ptr("Seconds"),
									},
									{
										AbsoluteValue: to.Ptr[float64](120),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									}},
								ExecuteActionDuration:      to.Ptr("PT1M"),
								ExecuteActionInitiatedBy:   to.Ptr(armsql.RecommendedActionInitiatedByUser),
								ExecuteActionInitiatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ExecuteActionStartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("DROP INDEX [nci_wi_DataPoints_609E4B7D6A3813990ED44B28B340C8FC] ON [dbo].[DataPoints]"),
								},
								IsArchivedAction:   to.Ptr(false),
								IsExecutableAction: to.Ptr(true),
								IsRevertableAction: to.Ptr(true),
								LastRefresh:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ObservedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										ChangeValueAbsolute: to.Ptr[float64](-12.7),
										ChangeValueRelative: to.Ptr[float64](-0.9),
										DimensionName:       to.Ptr("AffectedQueriesCpuUtilization"),
										Unit:                to.Ptr("CpuCores"),
									},
									{
										ChangeValueAbsolute: to.Ptr[float64](-12.7),
										ChangeValueRelative: to.Ptr[float64](-0.3175),
										DimensionName:       to.Ptr("CpuUtilization"),
										Unit:                to.Ptr("CpuCores"),
									},
									{
										AbsoluteValue: to.Ptr[float64](12),
										DimensionName: to.Ptr("QueriesWithImprovedPerformance"),
										Unit:          to.Ptr("Count"),
									},
									{
										AbsoluteValue: to.Ptr[float64](1),
										DimensionName: to.Ptr("QueriesWithRegressedPerformance"),
										Unit:          to.Ptr("Count"),
									},
									{
										AbsoluteValue: to.Ptr[float64](130.742187),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									},
									{
										AbsoluteValue: to.Ptr[float64](0),
										DimensionName: to.Ptr("VerificationProgress"),
										Unit:          to.Ptr("Percent"),
									}},
								RecommendationReason: to.Ptr(""),
								Score:                to.Ptr[int32](3),
								State: &armsql.RecommendedActionStateInfo{
									ActionInitiatedBy: to.Ptr(armsql.RecommendedActionInitiatedByUser),
									CurrentValue:      to.Ptr(armsql.RecommendedActionCurrentStateSuccess),
									LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								Details: map[string]interface{}{
									"schema":               "[dbo]",
									"databaseName":         "IndexAdvisor_test_3",
									"includedColumns":      "[Power],[Pineapple]",
									"indexActionDuration":  "00:01:00",
									"indexActionStartTime": "2017-03-01T14:38:05.337",
									"indexColumns":         "[Name],[Money]",
									"indexName":            "nci_wi_DataPoints_609E4B7D6A3813990ED44B28B340C8FC",
									"indexType":            "NONCLUSTERED",
									"table":                "[DataPoints]",
								},
							},
						}},
				},
			},
			{
				Name:     to.Ptr("DropIndex"),
				Type:     to.Ptr("Microsoft.Sql/servers/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/DropIndex"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusGA),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDefault),
					RecommendedActions: []*armsql.RecommendedAction{
						{
							Name:     to.Ptr("IR_[CRM]_[DataPoints1]_29AEA82685D24704DE1A"),
							Type:     to.Ptr("Microsoft.Sql/servers/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/DropIndex/recommendedActions/IR_[CRM]_[DataPoints1]_29AEA82685D24704DE1A"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										AbsoluteValue: to.Ptr[float64](803),
										DimensionName: to.Ptr("ActionDuration"),
										Unit:          to.Ptr("Seconds"),
									},
									{
										AbsoluteValue: to.Ptr[float64](144.6875),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									}},
								ExecuteActionInitiatedBy:   to.Ptr(armsql.RecommendedActionInitiatedBySystem),
								ExecuteActionInitiatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("DROP INDEX [MyIndex123] ON [CRM].[DataPoints1]"),
								},
								IsArchivedAction:     to.Ptr(false),
								IsExecutableAction:   to.Ptr(true),
								IsRevertableAction:   to.Ptr(true),
								LastRefresh:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ObservedImpact:       []*armsql.RecommendedActionImpactRecord{},
								RecommendationReason: to.Ptr("Duplicate"),
								Score:                to.Ptr[int32](1),
								State: &armsql.RecommendedActionStateInfo{
									ActionInitiatedBy: to.Ptr(armsql.RecommendedActionInitiatedBySystem),
									CurrentValue:      to.Ptr(armsql.RecommendedActionCurrentStatePending),
									LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								Details: map[string]interface{}{
									"schema":            "[CRM]",
									"databaseName":      "IndexAdvisor_test_3",
									"includedColumns":   "[Apple]",
									"indexColumns":      "[Cookies],[SessionId]",
									"indexName":         "MyIndex123",
									"indexType":         "NONCLUSTERED",
									"originalIndexName": "IX_COM_SKU_SKUDepartmentID",
									"table":             "[DataPoints1]",
								},
							},
						},
						{
							Name:     to.Ptr("IR_[CRM]_[DataPoints2]_E4B21F229379807E531A"),
							Type:     to.Ptr("Microsoft.Sql/servers/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/DropIndex/recommendedActions/IR_[CRM]_[DataPoints2]_E4B21F229379807E531A"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										AbsoluteValue: to.Ptr[float64](705),
										DimensionName: to.Ptr("ActionDuration"),
										Unit:          to.Ptr("Seconds"),
									},
									{
										AbsoluteValue: to.Ptr[float64](342),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									}},
								ExecuteActionDuration:      to.Ptr("PT1M"),
								ExecuteActionInitiatedBy:   to.Ptr(armsql.RecommendedActionInitiatedByUser),
								ExecuteActionInitiatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ExecuteActionStartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("CREATE NONCLUSTERED INDEX [MyIndex321] ON [CRM].[DataPoints2] ([Cookies],[SessionId],[Protocol]) INCLUDE ([Apple]) WITH (ONLINE = ON)"),
								},
								IsArchivedAction:   to.Ptr(false),
								IsExecutableAction: to.Ptr(true),
								IsRevertableAction: to.Ptr(true),
								LastRefresh:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ObservedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										ChangeValueAbsolute: to.Ptr[float64](0),
										ChangeValueRelative: to.Ptr[float64](0),
										DimensionName:       to.Ptr("AffectedQueriesCpuUtilization"),
										Unit:                to.Ptr("CpuCores"),
									},
									{
										ChangeValueAbsolute: to.Ptr[float64](0),
										ChangeValueRelative: to.Ptr[float64](0),
										DimensionName:       to.Ptr("CpuUtilization"),
										Unit:                to.Ptr("CpuCores"),
									},
									{
										AbsoluteValue: to.Ptr[float64](0),
										DimensionName: to.Ptr("QueriesWithImprovedPerformance"),
										Unit:          to.Ptr("Count"),
									},
									{
										AbsoluteValue: to.Ptr[float64](0),
										DimensionName: to.Ptr("QueriesWithRegressedPerformance"),
										Unit:          to.Ptr("Count"),
									},
									{
										AbsoluteValue: to.Ptr[float64](-342),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									},
									{
										AbsoluteValue: to.Ptr[float64](0),
										DimensionName: to.Ptr("VerificationProgress"),
										Unit:          to.Ptr("Percent"),
									}},
								RecommendationReason: to.Ptr("Duplicate"),
								Score:                to.Ptr[int32](1),
								State: &armsql.RecommendedActionStateInfo{
									ActionInitiatedBy: to.Ptr(armsql.RecommendedActionInitiatedByUser),
									CurrentValue:      to.Ptr(armsql.RecommendedActionCurrentStateSuccess),
									LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								Details: map[string]interface{}{
									"schema":               "[CRM]",
									"databaseName":         "IndexAdvisor_test_3",
									"includedColumns":      "[Apple]",
									"indexActionDuration":  "00:01:00",
									"indexActionStartTime": "2017-03-01T14:38:05.697",
									"indexColumns":         "[Cookies],[SessionId],[Protocol]",
									"indexName":            "MyIndex321",
									"indexType":            "NONCLUSTERED",
									"originalIndexName":    "IX_COM_SKU_SKUDepartmentID",
									"table":                "[DataPoints2]",
								},
							},
						},
						{
							Name:     to.Ptr("IR_[dbo]_[FactFinance]_13ADA5F354E9E14A983B"),
							Type:     to.Ptr("Microsoft.Sql/servers/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/DropIndex/recommendedActions/IR_[dbo]_[FactFinance]_13ADA5F354E9E14A983B"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										AbsoluteValue: to.Ptr[float64](705),
										DimensionName: to.Ptr("ActionDuration"),
										Unit:          to.Ptr("Seconds"),
									},
									{
										AbsoluteValue: to.Ptr[float64](342),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									}},
								ExecuteActionDuration:      to.Ptr("PT1M"),
								ExecuteActionInitiatedBy:   to.Ptr(armsql.RecommendedActionInitiatedBySystem),
								ExecuteActionInitiatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ExecuteActionStartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("CREATE NONCLUSTERED INDEX [IX_FF] ON [dbo].[FactFinance] ([FinanceKey],[DateKey]) INCLUDE ([OrganizationKey]) WITH (ONLINE = ON)"),
								},
								IsArchivedAction:   to.Ptr(false),
								IsExecutableAction: to.Ptr(true),
								IsRevertableAction: to.Ptr(true),
								LastRefresh:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ObservedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										ChangeValueAbsolute: to.Ptr[float64](0),
										ChangeValueRelative: to.Ptr[float64](0),
										DimensionName:       to.Ptr("AffectedQueriesCpuUtilization"),
										Unit:                to.Ptr("CpuCores"),
									},
									{
										ChangeValueAbsolute: to.Ptr[float64](0),
										ChangeValueRelative: to.Ptr[float64](0),
										DimensionName:       to.Ptr("CpuUtilization"),
										Unit:                to.Ptr("CpuCores"),
									},
									{
										AbsoluteValue: to.Ptr[float64](0),
										DimensionName: to.Ptr("QueriesWithImprovedPerformance"),
										Unit:          to.Ptr("Count"),
									},
									{
										AbsoluteValue: to.Ptr[float64](0),
										DimensionName: to.Ptr("QueriesWithRegressedPerformance"),
										Unit:          to.Ptr("Count"),
									},
									{
										AbsoluteValue: to.Ptr[float64](-342),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									},
									{
										AbsoluteValue: to.Ptr[float64](0),
										DimensionName: to.Ptr("VerificationProgress"),
										Unit:          to.Ptr("Percent"),
									}},
								RecommendationReason: to.Ptr("Duplicate"),
								Score:                to.Ptr[int32](1),
								State: &armsql.RecommendedActionStateInfo{
									ActionInitiatedBy: to.Ptr(armsql.RecommendedActionInitiatedBySystem),
									CurrentValue:      to.Ptr(armsql.RecommendedActionCurrentStateSuccess),
									LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-28T14:38:05Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								Details: map[string]interface{}{
									"schema":               "[dbo]",
									"databaseName":         "IndexAdvisor_test_3",
									"includedColumns":      "[OrganizationKey]",
									"indexActionDuration":  "00:01:00",
									"indexActionStartTime": "2017-03-01T14:38:05.837",
									"indexColumns":         "[FinanceKey],[DateKey]",
									"indexName":            "IX_FF",
									"indexType":            "NONCLUSTERED",
									"originalIndexName":    "IX_COM_SKU_SKUDepartmentID",
									"table":                "[FactFinance]",
								},
							},
						},
						{
							Name:     to.Ptr("IR_[CRM]_[DataPoints1]_13ADA5F354E9E14A983B"),
							Type:     to.Ptr("Microsoft.Sql/servers/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/DropIndex/recommendedActions/IR_[CRM]_[DataPoints1]_13ADA5F354E9E14A983B"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										AbsoluteValue: to.Ptr[float64](645),
										DimensionName: to.Ptr("ActionDuration"),
										Unit:          to.Ptr("Seconds"),
									},
									{
										AbsoluteValue: to.Ptr[float64](342),
										DimensionName: to.Ptr("SpaceChange"),
										Unit:          to.Ptr("Megabytes"),
									}},
								ExecuteActionInitiatedBy:   to.Ptr(armsql.RecommendedActionInitiatedBySystem),
								ExecuteActionInitiatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-23T14:14:35Z"); return t }()),
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("DROP INDEX [IX_FF] ON [CRM].[DataPoints1]"),
								},
								IsArchivedAction:     to.Ptr(false),
								IsExecutableAction:   to.Ptr(true),
								IsRevertableAction:   to.Ptr(true),
								LastRefresh:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								ObservedImpact:       []*armsql.RecommendedActionImpactRecord{},
								RecommendationReason: to.Ptr("Unused"),
								Score:                to.Ptr[int32](1),
								State: &armsql.RecommendedActionStateInfo{
									ActionInitiatedBy: to.Ptr(armsql.RecommendedActionInitiatedBySystem),
									CurrentValue:      to.Ptr(armsql.RecommendedActionCurrentStatePending),
									LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-23T14:14:35Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:38:05Z"); return t }()),
								Details: map[string]interface{}{
									"schema":            "[CRM]",
									"databaseName":      "IndexAdvisor_test_3",
									"includedColumns":   "[Apple]",
									"indexColumns":      "[Protocol],[SessionId]",
									"indexName":         "IX_FF",
									"indexType":         "NONCLUSTERED",
									"originalIndexName": "IX_COM_SKU_SKUDepartmentID",
									"table":             "[DataPoints1]",
								},
							},
						}},
				},
			},
			{
				Name:     to.Ptr("DbParameterization"),
				Type:     to.Ptr("Microsoft.Sql/servers/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/DbParameterization"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusGA),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDefault),
					RecommendedActions: []*armsql.RecommendedAction{
						{
							Name:     to.Ptr("ForceDbParameterization"),
							Type:     to.Ptr("Microsoft.Sql/servers/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/DbParameterization/recommendedActions/ForceDbParameterization"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails: &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact: []*armsql.RecommendedActionImpactRecord{
									{
										ChangeValueAbsolute: to.Ptr[float64](22.5613696939135),
										DimensionName:       to.Ptr("CpuSavings"),
										Unit:                to.Ptr("Percent"),
									},
									{
										ChangeValueAbsolute: to.Ptr[float64](0.701823681806341),
										DimensionName:       to.Ptr("QueryDurationDecrease"),
										Unit:                to.Ptr("secs"),
									}},
								ExecuteActionInitiatedBy:   to.Ptr(armsql.RecommendedActionInitiatedBySystem),
								ExecuteActionInitiatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T15:08:31Z"); return t }()),
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{
									Method: to.Ptr(armsql.ImplementationMethodTSQL),
									Script: to.Ptr("ALTER DATABASE [IndexAdvisor_test_3] SET PARAMETERIZATION FORCED"),
								},
								IsArchivedAction:     to.Ptr(false),
								IsExecutableAction:   to.Ptr(true),
								IsRevertableAction:   to.Ptr(true),
								LastRefresh:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:37:44Z"); return t }()),
								ObservedImpact:       []*armsql.RecommendedActionImpactRecord{},
								RecommendationReason: to.Ptr(""),
								Score:                to.Ptr[int32](3),
								State: &armsql.RecommendedActionStateInfo{
									ActionInitiatedBy: to.Ptr(armsql.RecommendedActionInitiatedBySystem),
									CurrentValue:      to.Ptr(armsql.RecommendedActionCurrentStatePending),
									LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T15:08:31Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:37:44Z"); return t }()),
								Details: map[string]interface{}{
									"databaseName": "IndexAdvisor_test_3",
								},
							},
						}},
				},
			},
			{
				Name:     to.Ptr("SchemaIssue"),
				Type:     to.Ptr("Microsoft.Sql/servers/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/SchemaIssue"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusPublicPreview),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDefault),
					RecommendedActions: []*armsql.RecommendedAction{
						{
							Name:     to.Ptr("SchemaProblem_1A258C5714A7410C9D23"),
							Type:     to.Ptr("Microsoft.Sql/servers/advisors/recommendedActions"),
							ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/SchemaIssue/recommendedActions/SchemaProblem_1A258C5714A7410C9D23"),
							Kind:     to.Ptr(""),
							Location: to.Ptr("East Asia"),
							Properties: &armsql.RecommendedActionProperties{
								ErrorDetails:          &armsql.RecommendedActionErrorInfo{},
								EstimatedImpact:       []*armsql.RecommendedActionImpactRecord{},
								ImplementationDetails: &armsql.RecommendedActionImplementationInfo{},
								IsArchivedAction:      to.Ptr(false),
								IsExecutableAction:    to.Ptr(false),
								IsRevertableAction:    to.Ptr(false),
								LastRefresh:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T22:19:53Z"); return t }()),
								ObservedImpact:        []*armsql.RecommendedActionImpactRecord{},
								RecommendationReason:  to.Ptr("SchemaProblem"),
								Score:                 to.Ptr[int32](3),
								State: &armsql.RecommendedActionStateInfo{
									CurrentValue: to.Ptr(armsql.RecommendedActionCurrentStateActive),
									LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:37:48Z"); return t }()),
								},
								TimeSeries: []*armsql.RecommendedActionMetricInfo{},
								ValidSince: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T14:37:48Z"); return t }()),
								Details: map[string]interface{}{
									"databaseName":    "IndexAdvisor_test_3",
									"sqlErrorCount":   float64(342482),
									"sqlErrorMessage": "Invalid object name 'dbo.Companies'.",
									"sqlErrorNumber":  float64(208),
								},
							},
						}},
				},
			},
			{
				Name:     to.Ptr("ForceLastGoodPlan"),
				Type:     to.Ptr("Microsoft.Sql/servers/advisors"),
				ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/ForceLastGoodPlan"),
				Kind:     to.Ptr(""),
				Location: to.Ptr("East Asia"),
				Properties: &armsql.AdvisorProperties{
					AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusPrivatePreview),
					AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
					AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDefault),
					RecommendedActions:             []*armsql.RecommendedAction{},
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.AdvisorArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdvisorArray)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerRecommendedActionListExpand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAdvisors_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAdvisorGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get server advisor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerAdvisorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"CreateIndex",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAdvisorGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Advisor{
			Name:     to.Ptr("CreateIndex"),
			Type:     to.Ptr("Microsoft.Sql/servers/advisors"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/CreateIndex"),
			Kind:     to.Ptr(""),
			Location: to.Ptr("East Asia"),
			Properties: &armsql.AdvisorProperties{
				AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusGA),
				AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
				AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromDefault),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Advisor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Advisor)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAdvisorGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAdvisors_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAdvisorUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update server advisor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerAdvisorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Update(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"CreateIndex",
		armsql.Advisor{
			Properties: &armsql.AdvisorProperties{
				AutoExecuteStatus: to.Ptr(armsql.AutoExecuteStatusDisabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAdvisorUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Advisor{
			Name:     to.Ptr("CreateIndex"),
			Type:     to.Ptr("Microsoft.Sql/servers/advisors"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workloadinsight-demos/providers/Microsoft.Sql/servers/misosisvr/advisors/CreateIndex"),
			Kind:     to.Ptr(""),
			Location: to.Ptr("East Asia"),
			Properties: &armsql.AdvisorProperties{
				AdvisorStatus:                  to.Ptr(armsql.AdvisorStatusGA),
				AutoExecuteStatus:              to.Ptr(armsql.AutoExecuteStatusDisabled),
				AutoExecuteStatusInheritedFrom: to.Ptr(armsql.AutoExecuteStatusInheritedFromServer),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Advisor) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Advisor)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAdvisorUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAutomaticTuning_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAutomaticTuningGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a server's automatic tuning settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerAutomaticTuningClient("c3aa9078-0000-0000-0000-e36f151182d7", cred, &options)
	res, err := client.Get(ctx,
		"default-sql-onebox",
		"testsvr11",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAutomaticTuningGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerAutomaticTuning{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/automaticTuning"),
			ID:   to.Ptr("/subscriptions/c3aa9078-0000-0000-0000-e36f151182d7/resourceGroups/default-sql-onebox/providers/Microsoft.Sql/servers/testsvr11/automaticTuning/current"),
			Properties: &armsql.AutomaticTuningServerProperties{
				ActualState:  to.Ptr(armsql.AutomaticTuningServerModeAuto),
				DesiredState: to.Ptr(armsql.AutomaticTuningServerModeAuto),
				Options: map[string]*armsql.AutomaticTuningServerOptions{
					"createIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOn),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningServerReasonAutoConfigured),
					},
					"dropIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOff),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningServerReasonAutoConfigured),
					},
					"forceLastGoodPlan": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOn),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningServerReasonAutoConfigured),
					},
					"maintainIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOff),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningServerReasonAutoConfigured),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerAutomaticTuning) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerAutomaticTuning)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAutomaticTuningGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAutomaticTuning_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAutomaticTuningUpdateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates server automatic tuning settings with all properties"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerAutomaticTuningClient("c3aa9078-0000-0000-0000-e36f151182d7", cred, &options)
	res, err := client.Update(ctx,
		"default-sql-onebox",
		"testsvr11",
		armsql.ServerAutomaticTuning{
			Properties: &armsql.AutomaticTuningServerProperties{
				DesiredState: to.Ptr(armsql.AutomaticTuningServerModeAuto),
				Options: map[string]*armsql.AutomaticTuningServerOptions{
					"createIndex": {
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredOff),
					},
					"dropIndex": {
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredOn),
					},
					"forceLastGoodPlan": {
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAutomaticTuningUpdateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerAutomaticTuning{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/automaticTuning"),
			ID:   to.Ptr("/subscriptions/c3aa9078-0000-0000-0000-e36f151182d7/resourceGroups/default-sql-onebox/providers/Microsoft.Sql/servers/testsvr11/automaticTuning/current"),
			Properties: &armsql.AutomaticTuningServerProperties{
				ActualState:  to.Ptr(armsql.AutomaticTuningServerModeAuto),
				DesiredState: to.Ptr(armsql.AutomaticTuningServerModeAuto),
				Options: map[string]*armsql.AutomaticTuningServerOptions{
					"createIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOff),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredOff),
					},
					"dropIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOn),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredOn),
					},
					"forceLastGoodPlan": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOn),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningServerReasonAutoConfigured),
					},
					"maintainIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOff),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningServerReasonAutoConfigured),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerAutomaticTuning) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerAutomaticTuning)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAutomaticTuningUpdateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAutomaticTuningUpdateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates server automatic tuning settings with minimal properties"},
	})
	client = armsql.NewServerAutomaticTuningClient("c3aa9078-0000-0000-0000-e36f151182d7", cred, &options)
	res, err = client.Update(ctx,
		"default-sql-onebox",
		"testsvr11",
		armsql.ServerAutomaticTuning{
			Properties: &armsql.AutomaticTuningServerProperties{
				DesiredState: to.Ptr(armsql.AutomaticTuningServerModeAuto),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAutomaticTuningUpdateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerAutomaticTuning{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/automaticTuning"),
			ID:   to.Ptr("/subscriptions/c3aa9078-0000-0000-0000-e36f151182d7/resourceGroups/default-sql-onebox/providers/Microsoft.Sql/servers/testsvr11/automaticTuning/current"),
			Properties: &armsql.AutomaticTuningServerProperties{
				ActualState:  to.Ptr(armsql.AutomaticTuningServerModeAuto),
				DesiredState: to.Ptr(armsql.AutomaticTuningServerModeAuto),
				Options: map[string]*armsql.AutomaticTuningServerOptions{
					"createIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOn),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningServerReasonAutoConfigured),
					},
					"dropIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOff),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningServerReasonAutoConfigured),
					},
					"forceLastGoodPlan": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOn),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningServerReasonAutoConfigured),
					},
					"maintainIndex": {
						ActualState:  to.Ptr(armsql.AutomaticTuningOptionModeActualOff),
						DesiredState: to.Ptr(armsql.AutomaticTuningOptionModeDesiredDefault),
						ReasonCode:   to.Ptr[int32](2),
						ReasonDesc:   to.Ptr(armsql.AutomaticTuningServerReasonAutoConfigured),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerAutomaticTuning) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerAutomaticTuning)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerAutomaticTuningUpdateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAzureADAdministrators_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AdministratorGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a Azure Active Directory administrator."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerAzureADAdministratorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		armsql.AdministratorNameActiveDirectory,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AdministratorGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerAzureADAdministrator{
			Name: to.Ptr("ActiveDirectory"),
			Type: to.Ptr("Microsoft.Sql/servers/administrators"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-4799/providers/Microsoft.Sql/servers/sqlcrudtest-6440/administrators/ActiveDirectory"),
			Properties: &armsql.AdministratorProperties{
				AdministratorType:         to.Ptr(armsql.AdministratorTypeActiveDirectory),
				AzureADOnlyAuthentication: to.Ptr(true),
				Login:                     to.Ptr("bob@contoso.com"),
				Sid:                       to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:                  to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerAzureADAdministrator) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerAzureADAdministrator)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AdministratorGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAzureADAdministrators_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AdministratorCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates an existing Azure Active Directory administrator."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerAzureADAdministratorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		armsql.AdministratorNameActiveDirectory,
		armsql.ServerAzureADAdministrator{
			Properties: &armsql.AdministratorProperties{
				AdministratorType: to.Ptr(armsql.AdministratorTypeActiveDirectory),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		},
		&armsql.ServerAzureADAdministratorsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AdministratorCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AdministratorCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerAzureADAdministrator{
			Name: to.Ptr("ActiveDirectory"),
			Type: to.Ptr("Microsoft.Sql/servers/administrators"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-4799/providers/Microsoft.Sql/servers/sqlcrudtest-6440/administrators/ActiveDirectory"),
			Properties: &armsql.AdministratorProperties{
				AdministratorType:         to.Ptr(armsql.AdministratorTypeActiveDirectory),
				AzureADOnlyAuthentication: to.Ptr(true),
				Login:                     to.Ptr("bob@contoso.com"),
				Sid:                       to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:                  to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerAzureADAdministrator) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerAzureADAdministrator)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AdministratorCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAzureADAdministrators_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AdministratorDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Azure Active Directory administrator."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerAzureADAdministratorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		armsql.AdministratorNameActiveDirectory,
		&armsql.ServerAzureADAdministratorsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AdministratorDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AdministratorDelete.json: %v", err)
	}
}

func TestServerAzureADAdministrators_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AdministratorList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a list of Azure Active Directory administrator."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerAzureADAdministratorsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("sqlcrudtest-4799",
		"sqlcrudtest-6440",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AdministratorList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.AdministratorListResult{
			Value: []*armsql.ServerAzureADAdministrator{
				{
					Name: to.Ptr("ActiveDirectory"),
					Type: to.Ptr("Microsoft.Sql/servers/administrators"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-4799/providers/Microsoft.Sql/servers/sqlcrudtest-6440/administrators/ActiveDirectory"),
					Properties: &armsql.AdministratorProperties{
						AdministratorType:         to.Ptr(armsql.AdministratorTypeActiveDirectory),
						AzureADOnlyAuthentication: to.Ptr(true),
						Login:                     to.Ptr("bob@contoso.com"),
						Sid:                       to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
						TenantID:                  to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AdministratorListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AdministratorListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AdministratorList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAzureADOnlyAuthentications_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AzureADOnlyAuthGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a Azure Active Directory only authentication property."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerAzureADOnlyAuthenticationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		armsql.AuthenticationNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AzureADOnlyAuthGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerAzureADOnlyAuthentication{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/servers/azureadonlyauthentications"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-4799/providers/Microsoft.Sql/servers/sqlcrudtest-6440/azureadonlyauthentications/default"),
			Properties: &armsql.AzureADOnlyAuthProperties{
				AzureADOnlyAuthentication: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerAzureADOnlyAuthentication) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerAzureADOnlyAuthentication)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AzureADOnlyAuthGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAzureADOnlyAuthentications_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AzureADOnlyAuthCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates Azure Active Directory only authentication object."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerAzureADOnlyAuthenticationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		armsql.AuthenticationNameDefault,
		armsql.ServerAzureADOnlyAuthentication{
			Properties: &armsql.AzureADOnlyAuthProperties{
				AzureADOnlyAuthentication: to.Ptr(false),
			},
		},
		&armsql.ServerAzureADOnlyAuthenticationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AzureADOnlyAuthCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AzureADOnlyAuthCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerAzureADOnlyAuthentication{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/servers/azureadonlyauthentications"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-4799/providers/Microsoft.Sql/servers/sqlcrudtest-6440/azureadonlyauthentications/default"),
			Properties: &armsql.AzureADOnlyAuthProperties{
				AzureADOnlyAuthentication: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerAzureADOnlyAuthentication) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerAzureADOnlyAuthentication)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AzureADOnlyAuthCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAzureADOnlyAuthentications_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AzureADOnlyAuthDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes Azure Active Directory only authentication object."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerAzureADOnlyAuthenticationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		armsql.AuthenticationNameDefault,
		&armsql.ServerAzureADOnlyAuthenticationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AzureADOnlyAuthDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AzureADOnlyAuthDelete.json: %v", err)
	}
}

func TestServerAzureADOnlyAuthentications_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AzureADOnlyAuthList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a list of Azure Active Directory only authentication object."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerAzureADOnlyAuthenticationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("sqlcrudtest-4799",
		"sqlcrudtest-6440",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AzureADOnlyAuthList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.AzureADOnlyAuthListResult{
			Value: []*armsql.ServerAzureADOnlyAuthentication{
				{
					Name: to.Ptr("Default"),
					Type: to.Ptr("Microsoft.Sql/servers/azureadonlyauthentications"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-4799/providers/Microsoft.Sql/servers/sqlcrudtest-6440/azureadonlyauthentications/default"),
					Properties: &armsql.AzureADOnlyAuthProperties{
						AzureADOnlyAuthentication: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AzureADOnlyAuthListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AzureADOnlyAuthListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/AzureADOnlyAuthList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerDevOpsAuditSettings_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDevOpsAuditGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a server's DevOps audit settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerDevOpsAuditSettingsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"devAuditTestRG",
		"devOpsAuditTestSvr",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDevOpsAuditGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerDevOpsAuditingSettings{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/devOpsAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/devAuditTestRG/providers/Microsoft.Sql/servers/devOpsAuditTestSvr/devOpsAuditingSettings/default"),
			Properties: &armsql.ServerDevOpsAuditSettingsProperties{
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateDisabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				StorageEndpoint:              to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerDevOpsAuditingSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerDevOpsAuditingSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDevOpsAuditGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerDevOpsAuditSettings_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDevOpsAuditCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a server's DevOps audit settings with all params"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerDevOpsAuditSettingsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"devAuditTestRG",
		"devOpsAuditTestSvr",
		"default",
		armsql.ServerDevOpsAuditingSettings{
			Properties: &armsql.ServerDevOpsAuditSettingsProperties{
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey:      to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armsql.ServerDevOpsAuditSettingsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDevOpsAuditCreateMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDevOpsAuditCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerDevOpsAuditingSettings{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/devOpsAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/devAuditTestRG/providers/Microsoft.Sql/servers/devOpsAuditTestSvr/devOpsAuditingSettings/default"),
			Properties: &armsql.ServerDevOpsAuditSettingsProperties{
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerDevOpsAuditingSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerDevOpsAuditingSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDevOpsAuditCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDevOpsAuditCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a server's DevOps audit settings with minimal input"},
	})
	client = armsql.NewServerDevOpsAuditSettingsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"devAuditTestRG",
		"devOpsAuditTestSvr",
		"default",
		armsql.ServerDevOpsAuditingSettings{
			Properties: &armsql.ServerDevOpsAuditSettingsProperties{
				State:                   to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armsql.ServerDevOpsAuditSettingsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDevOpsAuditCreateMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDevOpsAuditCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerDevOpsAuditingSettings{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/devOpsAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/devAuditTestRG/providers/Microsoft.Sql/servers/devOpsAuditTestSvr/devOpsAuditingSettings/default"),
			Properties: &armsql.ServerDevOpsAuditSettingsProperties{
				State:                        to.Ptr(armsql.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerDevOpsAuditingSettings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerDevOpsAuditingSettings)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDevOpsAuditCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerDevOpsAuditSettings_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDevOpsAuditSettingsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List DevOps audit settings of a server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerDevOpsAuditSettingsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("devAuditTestRG",
		"devOpsAuditTestSvr",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDevOpsAuditSettingsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerDevOpsAuditSettingsListResult{
			Value: []*armsql.ServerDevOpsAuditingSettings{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/servers/devOpsAuditingSettings"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/devAuditTestRG/providers/Microsoft.Sql/servers/devOpsAuditTestSvr/devOpsAuditingSettings/default"),
					Properties: &armsql.ServerDevOpsAuditSettingsProperties{
						IsAzureMonitorTargetEnabled:  to.Ptr(false),
						State:                        to.Ptr(armsql.BlobAuditingPolicyStateDisabled),
						StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						StorageEndpoint:              to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerDevOpsAuditSettingsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerDevOpsAuditSettingsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDevOpsAuditSettingsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerDNSAliases_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get server DNS alias"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerDNSAliasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default",
		"dns-alias-server",
		"dns-alias-name-1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerDNSAlias{
			Name: to.Ptr("dns-alias-name-1"),
			Type: to.Ptr("Microsoft.Sql/servers/dnsAliases"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-server/dnsAliases/dns-alias-name-1"),
			Properties: &armsql.ServerDNSAliasProperties{
				AzureDNSRecord: to.Ptr("dns-alias-name-1.database.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerDNSAlias) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerDNSAlias)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerDNSAliases_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create server DNS alias"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerDNSAliasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"dns-alias-server",
		"dns-alias-name-1",
		&armsql.ServerDNSAliasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerDNSAlias{
			Name: to.Ptr("dns-alias-name-1"),
			Type: to.Ptr("Microsoft.Sql/servers/dnsAliases"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-server/dnsAliases/dns-alias-name-1"),
			Properties: &armsql.ServerDNSAliasProperties{
				AzureDNSRecord: to.Ptr("dns-alias-name-1.database.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerDNSAlias) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerDNSAlias)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerDNSAliases_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete server DNS alias"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerDNSAliasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default",
		"dns-alias-server",
		"dns-alias-name-1",
		&armsql.ServerDNSAliasesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasDelete.json: %v", err)
	}
}

func TestServerDNSAliases_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List server DNS aliases"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerDNSAliasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("Default",
		"dns-alias-server",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerDNSAliasListResult{
			Value: []*armsql.ServerDNSAlias{
				{
					Name: to.Ptr("server-dns-alias-1"),
					Type: to.Ptr("Microsoft.Sql/servers/dnsAliases"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-server/dnsAliases/dns-alias-1"),
					Properties: &armsql.ServerDNSAliasProperties{
						AzureDNSRecord: to.Ptr("dns-alias-1.database.windows.net"),
					},
				},
				{
					Name: to.Ptr("server-dns-alias-2"),
					Type: to.Ptr("Microsoft.Sql/servers/dnsAliases"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-server/dnsAliases/dns-alias-2"),
					Properties: &armsql.ServerDNSAliasProperties{
						AzureDNSRecord: to.Ptr("dns-alias-2.database.windows.net"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerDNSAliasListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerDNSAliasListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerDNSAliases_Acquire(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasAcquire.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Acquire server DNS alias"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerDNSAliasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginAcquire(ctx,
		"Default",
		"dns-alias-new-server",
		"dns-alias-name-1",
		armsql.ServerDNSAliasAcquisition{
			OldServerDNSAliasID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-old-server/dnsAliases/dns-alias-name-1"),
		},
		&armsql.ServerDNSAliasesClientBeginAcquireOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasAcquire.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasAcquire.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerDNSAlias{
			Name: to.Ptr("server-dns-alias-name-1"),
			Type: to.Ptr("Microsoft.Sql/servers/dnsAliases"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-new-server/dnsAliases/dns-alias-name-1"),
			Properties: &armsql.ServerDNSAliasProperties{
				AzureDNSRecord: to.Ptr("dns-alias-name-1.database.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerDNSAlias) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerDNSAlias)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerDnsAliasAcquire.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerKeys_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerKeyList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the server keys by server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerKeysClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerKeyList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerKeyListResult{
			Value: []*armsql.ServerKey{
				{
					Name:     to.Ptr("someVault_someKey_01234567890123456789012345678901"),
					Type:     to.Ptr("Microsoft.Sql/servers/keys"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/keys/someVault_someKey_01234567890123456789012345678901"),
					Kind:     to.Ptr("azurekeyvault"),
					Location: to.Ptr("Japan East"),
					Properties: &armsql.ServerKeyProperties{
						AutoRotationEnabled: to.Ptr(false),
						CreationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-15T00:00:00Z"); return t }()),
						Thumbprint:          to.Ptr("00112233445566778899AABBCCDDEEFFAABBCCDD"),
					},
				},
				{
					Name:     to.Ptr("myVault_myKey_11111111111111111111111111111111"),
					Type:     to.Ptr("Microsoft.Sql/servers/keys"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/keys/myVault_myKey_11111111111111111111111111111111"),
					Kind:     to.Ptr("azurekeyvault"),
					Location: to.Ptr("Japan East"),
					Properties: &armsql.ServerKeyProperties{
						AutoRotationEnabled: to.Ptr(false),
						CreationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-15T00:00:00Z"); return t }()),
						Thumbprint:          to.Ptr("AAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBB"),
					},
				},
				{
					Name:       to.Ptr("ServiceManaged"),
					Type:       to.Ptr("Microsoft.Sql/servers/keys"),
					ID:         to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/keys/ServiceManaged"),
					Kind:       to.Ptr("servicemanaged"),
					Location:   to.Ptr("Japan East"),
					Properties: &armsql.ServerKeyProperties{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerKeyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerKeyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerKeyList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerKeys_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerKeyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the server key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerKeysClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"someVault_someKey_01234567890123456789012345678901",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerKeyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerKey{
			Name:     to.Ptr("sqlcrudtest-4645"),
			Type:     to.Ptr("Microsoft.Sql/servers/keys"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/keys/someVault_someKey_01234567890123456789012345678901"),
			Kind:     to.Ptr("azurekeyvault"),
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ServerKeyProperties{
				AutoRotationEnabled: to.Ptr(false),
				CreationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-15T00:00:00Z"); return t }()),
				Thumbprint:          to.Ptr("00112233445566778899AABBCCDDEEFFAABBCCDD"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerKey)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerKeyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerKeys_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerKeyCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a server key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerKeysClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"someVault_someKey_01234567890123456789012345678901",
		armsql.ServerKey{
			Properties: &armsql.ServerKeyProperties{
				ServerKeyType: to.Ptr(armsql.ServerKeyTypeAzureKeyVault),
				URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
			},
		},
		&armsql.ServerKeysClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerKeyCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerKeyCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerKey{
			Name:     to.Ptr("sqlcrudtest-4645"),
			Type:     to.Ptr("Microsoft.Sql/servers/keys"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/keys/someVault_someKey_01234567890123456789012345678901"),
			Kind:     to.Ptr("azurekeyvault"),
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ServerKeyProperties{
				AutoRotationEnabled: to.Ptr(false),
				CreationDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-15T00:00:00Z"); return t }()),
				Thumbprint:          to.Ptr("00112233445566778899AABBCCDDEEFFAABBCCDD"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerKey)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerKeyCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerKeys_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerKeyDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the server key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerKeysClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"someVault_someKey_01234567890123456789012345678901",
		&armsql.ServerKeysClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerKeyDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerKeyDelete.json: %v", err)
	}
}

func TestServerOperations_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListServerOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the server management operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerOperationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListServerOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerOperationListResult{
			Value: []*armsql.ServerOperation{
				{
					Name: to.Ptr("11111111-1111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.Sql/servers/operations"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/operations/11111111-1111-1111-1111-111111111111"),
					Properties: &armsql.ServerOperationProperties{
						Operation:             to.Ptr("MakeAllLogicalDatabasesAccessible"),
						OperationFriendlyName: to.Ptr("MAKE ALL DBS ACCESSIBLE"),
						PercentComplete:       to.Ptr[int32](0),
						ServerName:            to.Ptr("sqlcrudtest-4645"),
						StartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T09:10:08.1Z"); return t }()),
						State:                 to.Ptr(armsql.ManagementOperationStateInProgress),
					},
				},
				{
					Name: to.Ptr("22222222-2222-2222-2222-222222222222"),
					Type: to.Ptr("Microsoft.Sql/servers/operations"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/operations/22222222-2222-2222-2222-222222222222"),
					Properties: &armsql.ServerOperationProperties{
						Operation:             to.Ptr("MakeAllLogicalDatabasesAccessible"),
						OperationFriendlyName: to.Ptr("MAKE ALL DBS ACCESSIBLE"),
						PercentComplete:       to.Ptr[int32](100),
						ServerName:            to.Ptr("sqlcrudtest-4645"),
						StartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T09:00:08.1Z"); return t }()),
						State:                 to.Ptr(armsql.ManagementOperationStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerOperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerOperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ListServerOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerSecurityAlertPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a server's threat detection policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"securityalert-4799",
		"securityalert-6440",
		armsql.SecurityAlertPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/servers/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/servers/securityalert-6440/securityAlertPolicies/default"),
			Properties: &armsql.SecurityAlertsPolicyProperties{
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("test@consoto.com;user@consoto.com")},
				RetentionDays:           to.Ptr[int32](0),
				State:                   to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
			SystemData: &armsql.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armsql.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armsql.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerSecurityAlertPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a server's threat detection policy with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		armsql.SecurityAlertPolicyNameDefault,
		armsql.ServerSecurityAlertPolicy{
			Properties: &armsql.SecurityAlertsPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("testSecurityAlert@microsoft.com")},
				RetentionDays:           to.Ptr[int32](5),
				State:                   to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armsql.ServerSecurityAlertPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsCreateMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/servers/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/servers/securityalert-6440/securityAlertPolicies/default"),
			Properties: &armsql.SecurityAlertsPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("testSecurityAlert@microsoft.com")},
				RetentionDays:           to.Ptr[int32](5),
				State:                   to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
			SystemData: &armsql.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armsql.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armsql.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a server's threat detection policy with minimal parameters"},
	})
	client = armsql.NewServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		armsql.SecurityAlertPolicyNameDefault,
		armsql.ServerSecurityAlertPolicy{
			Properties: &armsql.SecurityAlertsPolicyProperties{
				State: to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
			},
		},
		&armsql.ServerSecurityAlertPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsCreateMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Sql/servers/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/servers/securityalert-6440/securityAlertPolicies/default"),
			Properties: &armsql.SecurityAlertsPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("")},
				EmailAccountAdmins: to.Ptr(false),
				EmailAddresses: []*string{
					to.Ptr("")},
				RetentionDays:           to.Ptr[int32](0),
				State:                   to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
			SystemData: &armsql.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armsql.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armsql.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerSecurityAlertPolicies_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the server's threat detection policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("securityalert-4799",
		"securityalert-6440",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.LogicalServerSecurityAlertPolicyListResult{
			Value: []*armsql.ServerSecurityAlertPolicy{
				{
					Name: to.Ptr("Default"),
					Type: to.Ptr("Microsoft.Sql/servers/securityAlertPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/servers/securityalert-6440/securityAlertPolicies"),
					Properties: &armsql.SecurityAlertsPolicyProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
						DisabledAlerts: []*string{
							to.Ptr("Access_Anomaly")},
						EmailAccountAdmins: to.Ptr(true),
						EmailAddresses: []*string{
							to.Ptr("test@consoto.com;user@consoto.com")},
						RetentionDays:           to.Ptr[int32](0),
						State:                   to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
						StorageAccountAccessKey: to.Ptr(""),
						StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
					},
					SystemData: &armsql.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsql.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-03T04:41:33.937Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsql.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LogicalServerSecurityAlertPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LogicalServerSecurityAlertPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerTrustGroups_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get server trust group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerTrustGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default",
		"Japan East",
		"server-trust-group-test",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerTrustGroup{
			Name: to.Ptr("server-trust-group-test"),
			Type: to.Ptr("Microsoft.Sql/locations/serverTrustGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/locations/Japan East/serverTrustGroups/server-trust-group-test"),
			Properties: &armsql.ServerTrustGroupProperties{
				GroupMembers: []*armsql.ServerInfo{
					{
						ServerID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-1"),
					},
					{
						ServerID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-2"),
					}},
				TrustScopes: []*armsql.ServerTrustGroupPropertiesTrustScopesItem{
					to.Ptr(armsql.ServerTrustGroupPropertiesTrustScopesItemGlobalTransactions),
					to.Ptr(armsql.ServerTrustGroupPropertiesTrustScopesItemServiceBroker)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerTrustGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerTrustGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerTrustGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create server trust group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerTrustGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"Japan East",
		"server-trust-group-test",
		armsql.ServerTrustGroup{
			Properties: &armsql.ServerTrustGroupProperties{
				GroupMembers: []*armsql.ServerInfo{
					{
						ServerID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-1"),
					},
					{
						ServerID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-2"),
					}},
				TrustScopes: []*armsql.ServerTrustGroupPropertiesTrustScopesItem{
					to.Ptr(armsql.ServerTrustGroupPropertiesTrustScopesItemGlobalTransactions),
					to.Ptr(armsql.ServerTrustGroupPropertiesTrustScopesItemServiceBroker)},
			},
		},
		&armsql.ServerTrustGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerTrustGroup{
			Name: to.Ptr("server-trust-group-test"),
			Type: to.Ptr("Microsoft.Sql/locations/serverTrustGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/locations/Japan East/serverTrustGroups/server-trust-group-test"),
			Properties: &armsql.ServerTrustGroupProperties{
				GroupMembers: []*armsql.ServerInfo{
					{
						ServerID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-1"),
					},
					{
						ServerID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-2"),
					}},
				TrustScopes: []*armsql.ServerTrustGroupPropertiesTrustScopesItem{
					to.Ptr(armsql.ServerTrustGroupPropertiesTrustScopesItemGlobalTransactions),
					to.Ptr(armsql.ServerTrustGroupPropertiesTrustScopesItemServiceBroker)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerTrustGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerTrustGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerTrustGroups_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Drop server trust group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerTrustGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default",
		"Japan East",
		"server-trust-group-test",
		&armsql.ServerTrustGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupDelete.json: %v", err)
	}
}

func TestServerTrustGroups_ListByLocation(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List server trust groups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerTrustGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByLocation("Default",
		"Japan East",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerTrustGroupListResult{
			Value: []*armsql.ServerTrustGroup{
				{
					Name: to.Ptr("server-trust-group-test"),
					Type: to.Ptr("Microsoft.Sql/locations/serverTrustGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/locations/Japan East/serverTrustGroups/server-trust-group-test"),
					Properties: &armsql.ServerTrustGroupProperties{
						GroupMembers: []*armsql.ServerInfo{
							{
								ServerID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-1"),
							},
							{
								ServerID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-2"),
							}},
						TrustScopes: []*armsql.ServerTrustGroupPropertiesTrustScopesItem{
							to.Ptr(armsql.ServerTrustGroupPropertiesTrustScopesItemGlobalTransactions),
							to.Ptr(armsql.ServerTrustGroupPropertiesTrustScopesItemServiceBroker)},
					},
				},
				{
					Name: to.Ptr("server-trust-group-test-2"),
					Type: to.Ptr("Microsoft.Sql/locations/serverTrustGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/locations/Japan East/serverTrustGroups/server-trust-group-test-2"),
					Properties: &armsql.ServerTrustGroupProperties{
						GroupMembers: []*armsql.ServerInfo{
							{
								ServerID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-1"),
							},
							{
								ServerID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-3"),
							}},
						TrustScopes: []*armsql.ServerTrustGroupPropertiesTrustScopesItem{
							to.Ptr(armsql.ServerTrustGroupPropertiesTrustScopesItemGlobalTransactions),
							to.Ptr(armsql.ServerTrustGroupPropertiesTrustScopesItemServiceBroker)},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerTrustGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerTrustGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerTrustGroups_ListByInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupListByManagedInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List server trust groups by managed instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerTrustGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByInstance("Default-SQL-SouthEastAsia",
		"managedInstance-1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupListByManagedInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerTrustGroupListResult{
			Value: []*armsql.ServerTrustGroup{
				{
					Name: to.Ptr("server-trust-group-test"),
					Type: to.Ptr("Microsoft.Sql/locations/serverTrustGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/locations/Japan East/serverTrustGroups/server-trust-group-test"),
					Properties: &armsql.ServerTrustGroupProperties{
						GroupMembers: []*armsql.ServerInfo{
							{
								ServerID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-1"),
							},
							{
								ServerID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-2"),
							}},
						TrustScopes: []*armsql.ServerTrustGroupPropertiesTrustScopesItem{
							to.Ptr(armsql.ServerTrustGroupPropertiesTrustScopesItemGlobalTransactions),
							to.Ptr(armsql.ServerTrustGroupPropertiesTrustScopesItemServiceBroker)},
					},
				},
				{
					Name: to.Ptr("server-trust-group-test-2"),
					Type: to.Ptr("Microsoft.Sql/locations/serverTrustGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/locations/Japan East/serverTrustGroups/server-trust-group-test-2"),
					Properties: &armsql.ServerTrustGroupProperties{
						GroupMembers: []*armsql.ServerInfo{
							{
								ServerID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-1"),
							},
							{
								ServerID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-3"),
							}},
						TrustScopes: []*armsql.ServerTrustGroupPropertiesTrustScopesItem{
							to.Ptr(armsql.ServerTrustGroupPropertiesTrustScopesItemGlobalTransactions),
							to.Ptr(armsql.ServerTrustGroupPropertiesTrustScopesItemServiceBroker)},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerTrustGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerTrustGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerTrustGroupListByManagedInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerVulnerabilityAssessments_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a server's vulnerability assessment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		armsql.VulnerabilityAssessmentNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440/vulnerabilityAssessments/default"),
			Properties: &armsql.ServerVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerVulnerabilityAssessments_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a server's vulnerability assessment with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		armsql.VulnerabilityAssessmentNameDefault,
		armsql.ServerVulnerabilityAssessment{
			Properties: &armsql.ServerVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
				StorageAccountAccessKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey:  to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440/vulnerabilityAssessments/default"),
			Properties: &armsql.ServerVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentCreateStorageAccessKeyMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a server's vulnerability assessment with minimal parameters, when storageAccountAccessKey is specified"},
	})
	client = armsql.NewServerVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		armsql.VulnerabilityAssessmentNameDefault,
		armsql.ServerVulnerabilityAssessment{
			Properties: &armsql.ServerVulnerabilityAssessmentProperties{
				StorageAccountAccessKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentCreateStorageAccessKeyMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440/vulnerabilityAssessments/default"),
			Properties: &armsql.ServerVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(false),
					Emails:                  []*string{},
					IsEnabled:               to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentCreateStorageAccessKeyMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentCreateContainerSasKeyMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a server's vulnerability assessment with minimal parameters, when storageContainerSasKey is specified"},
	})
	client = armsql.NewServerVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		armsql.VulnerabilityAssessmentNameDefault,
		armsql.ServerVulnerabilityAssessment{
			Properties: &armsql.ServerVulnerabilityAssessmentProperties{
				StorageContainerPath:   to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentCreateContainerSasKeyMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440/vulnerabilityAssessments/default"),
			Properties: &armsql.ServerVulnerabilityAssessmentProperties{
				RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(false),
					Emails:                  []*string{},
					IsEnabled:               to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentCreateContainerSasKeyMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerVulnerabilityAssessments_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Remove a server's vulnerability assessment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		armsql.VulnerabilityAssessmentNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentDelete.json: %v", err)
	}
}

func TestServerVulnerabilityAssessments_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a server's vulnerability assessment policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerVulnerabilityAssessmentListResult{
			Value: []*armsql.ServerVulnerabilityAssessment{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/servers/vulnerabilityAssessments"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440/vulnerabilityAssessments/"),
					Properties: &armsql.ServerVulnerabilityAssessmentProperties{
						RecurringScans: &armsql.VulnerabilityAssessmentRecurringScansProperties{
							EmailSubscriptionAdmins: to.Ptr(true),
							Emails: []*string{
								to.Ptr("email1@mail.com"),
								to.Ptr("email2@mail.com")},
							IsEnabled: to.Ptr(true),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerVulnerabilityAssessmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerVulnerabilityAssessmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLAgent_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SqlAgentConfigurationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets current instance sql agent configuration."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewAgentClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SqlAgentConfigurationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.AgentConfiguration{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/sqlAgent"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/sqlAgent/current"),
			Properties: &armsql.AgentConfigurationProperties{
				State: to.Ptr(armsql.SQLAgentConfigurationPropertiesStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SqlAgentConfigurationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLAgent_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SqlAgentConfigurationPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Puts new sql agent configuration to instance."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewAgentClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		armsql.AgentConfiguration{
			Properties: &armsql.AgentConfigurationProperties{
				State: to.Ptr(armsql.SQLAgentConfigurationPropertiesStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SqlAgentConfigurationPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.AgentConfiguration{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/sqlAgent"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/managedInstances/sqlcrudtest-4645/sqlAgent/current"),
			Properties: &armsql.AgentConfigurationProperties{
				State: to.Ptr(armsql.SQLAgentConfigurationPropertiesStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SqlAgentConfigurationPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscriptionUsages_ListByLocation(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SubscriptionUsageListByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List subscription usages in the given location."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSubscriptionUsagesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByLocation("WestUS",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SubscriptionUsageListByLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.SubscriptionUsageListResult{
			Value: []*armsql.SubscriptionUsage{
				{
					Name: to.Ptr("ServerQuota"),
					Type: to.Ptr("Microsoft.Sql/locations/usages"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/Onebox/usages/ServerQuota"),
					Properties: &armsql.SubscriptionUsageProperties{
						CurrentValue: to.Ptr[float64](1),
						DisplayName:  to.Ptr("Regional Server Quota for West US"),
						Limit:        to.Ptr[float64](20),
						Unit:         to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("SubscriptionFreeDatabaseCount"),
					Type: to.Ptr("Microsoft.Sql/locations/usages"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/Onebox/usages/SubscriptionFreeDatabaseCount"),
					Properties: &armsql.SubscriptionUsageProperties{
						CurrentValue: to.Ptr[float64](0),
						DisplayName:  to.Ptr("Free Database Count per Subscription for West US"),
						Limit:        to.Ptr[float64](1),
						Unit:         to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("SubscriptionFreeDatabaseDaysLeft"),
					Type: to.Ptr("Microsoft.Sql/locations/usages"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/Onebox/usages/SubscriptionFreeDatabaseDaysLeft"),
					Properties: &armsql.SubscriptionUsageProperties{
						CurrentValue: to.Ptr[float64](365),
						DisplayName:  to.Ptr("Free to Basic Database Upgrade count-down in West US"),
						Limit:        to.Ptr[float64](365),
						Unit:         to.Ptr("Count"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SubscriptionUsageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SubscriptionUsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SubscriptionUsageListByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscriptionUsages_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SubscriptionUsageGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get specific subscription usage in the given location."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSubscriptionUsagesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"WestUS",
		"ServerQuota",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SubscriptionUsageGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SubscriptionUsage{
			Name: to.Ptr("ServerQuota"),
			Type: to.Ptr("Microsoft.Sql/locations/usages"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/Onebox/usages/ServerQuota"),
			Properties: &armsql.SubscriptionUsageProperties{
				CurrentValue: to.Ptr[float64](1),
				DisplayName:  to.Ptr("Regional Server Quota for West US"),
				Limit:        to.Ptr[float64](20),
				Unit:         to.Ptr("Count"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SubscriptionUsage) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SubscriptionUsage)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SubscriptionUsageGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncAgents_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a sync agent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncAgentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"syncagentcrud-65440",
		"syncagentcrud-8475",
		"syncagentcrud-3187",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SyncAgent{
			Name: to.Ptr("syncagent"),
			Type: to.Ptr("Microsoft.Sql/servers/syncAgents"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/syncagentcrud-8475/syncAgents/syncagentcrud-3187"),
			Properties: &armsql.SyncAgentProperties{
				ExpiryTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "9999-12-31T23:59:59.9999999Z"); return t }()),
				IsUpToDate:     to.Ptr(true),
				State:          to.Ptr(armsql.SyncAgentStateNeverConnected),
				SyncDatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/syncagentcrud-8475/databases/sync"),
				Version:        to.Ptr("4.2.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SyncAgent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SyncAgent)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncAgents_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new sync agent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncAgentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"syncagentcrud-65440",
		"syncagentcrud-8475",
		"syncagentcrud-3187",
		armsql.SyncAgent{
			Properties: &armsql.SyncAgentProperties{
				SyncDatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/syncagentcrud-8475/databases/sync"),
			},
		},
		&armsql.SyncAgentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SyncAgent{
			Name: to.Ptr("syncagent"),
			Type: to.Ptr("Microsoft.Sql/servers/syncAgents"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/syncagentcrud-8475/syncAgents/syncagentcrud-3187"),
			Properties: &armsql.SyncAgentProperties{
				ExpiryTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "9999-12-31T23:59:59.9999999Z"); return t }()),
				IsUpToDate:     to.Ptr(true),
				State:          to.Ptr(armsql.SyncAgentStateNeverConnected),
				SyncDatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/syncagentcrud-8475/databases/sync"),
				Version:        to.Ptr("4.2.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SyncAgent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SyncAgent)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a sync agent"},
	})
	client = armsql.NewSyncAgentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"syncagentcrud-65440",
		"syncagentcrud-8475",
		"syncagentcrud-3187",
		armsql.SyncAgent{
			Properties: &armsql.SyncAgentProperties{
				SyncDatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/syncagentcrud-8475/databases/sync"),
			},
		},
		&armsql.SyncAgentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentUpdate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SyncAgent{
			Name: to.Ptr("syncagent"),
			Type: to.Ptr("Microsoft.Sql/servers/syncAgents"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/syncagentcrud-8475/syncAgents/syncagentcrud-3187"),
			Properties: &armsql.SyncAgentProperties{
				ExpiryTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "9999-12-31T23:59:59.9999999Z"); return t }()),
				IsUpToDate:     to.Ptr(true),
				State:          to.Ptr(armsql.SyncAgentStateNeverConnected),
				SyncDatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/syncagentcrud-8475/databases/sync"),
				Version:        to.Ptr("4.2.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SyncAgent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SyncAgent)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncAgents_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a sync agent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncAgentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"syncagentcrud-65440",
		"syncagentcrud-8475",
		"syncagentcrud-3187",
		&armsql.SyncAgentsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentDelete.json: %v", err)
	}
}

func TestSyncAgents_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get sync agents under a server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncAgentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("syncagentcrud-65440",
		"syncagentcrud-8475",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.SyncAgentListResult{
			Value: []*armsql.SyncAgent{
				{
					Name: to.Ptr("syncagent"),
					Type: to.Ptr("Microsoft.Sql/servers/syncAgents"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/syncagentcrud-8475/syncAgents/syncagentcrud-3187"),
					Properties: &armsql.SyncAgentProperties{
						ExpiryTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "9999-12-31T23:59:59.9999999Z"); return t }()),
						IsUpToDate:     to.Ptr(true),
						State:          to.Ptr(armsql.SyncAgentStateNeverConnected),
						SyncDatabaseID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/syncagentcrud-8475/databases/sync"),
						Version:        to.Ptr("4.2.0.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SyncAgentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SyncAgentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncAgents_GenerateKey(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentGenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate a sync agent key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncAgentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.GenerateKey(ctx,
		"syncagentcrud-65440",
		"syncagentcrud-8475",
		"syncagentcrud-3187",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentGenerateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SyncAgentKeyProperties{
			SyncAgentKey: to.Ptr("865f9998-6dae-4214-bbb1-4796b7c76ca0:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX=:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX="),
		}
		if !reflect.DeepEqual(exampleRes, res.SyncAgentKeyProperties) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SyncAgentKeyProperties)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentGenerateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncAgents_ListLinkedDatabases(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentGetLinkedDatabases.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get sync agent linked databases"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncAgentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListLinkedDatabases("syncagentcrud-65440",
		"syncagentcrud-8475",
		"syncagentcrud-3187",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentGetLinkedDatabases.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.SyncAgentLinkedDatabaseListResult{
			Value: []*armsql.SyncAgentLinkedDatabase{
				{
					ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/syncagentcrud-8475/syncAgents/syncagentcrud-3187/linkedDatabases/55555555-6666-7777-8888-999999999999"),
					Properties: &armsql.SyncAgentLinkedDatabaseProperties{
						Description:  to.Ptr(""),
						DatabaseID:   to.Ptr("55555555-6666-7777-8888-999999999999"),
						DatabaseName: to.Ptr("DummySqlServerDb"),
						DatabaseType: to.Ptr(armsql.SyncMemberDbTypeSQLServerDatabase),
						ServerName:   to.Ptr("DummySqlServer"),
						UserName:     to.Ptr("DummyUser"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SyncAgentLinkedDatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SyncAgentLinkedDatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncAgentGetLinkedDatabases.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncGroups_RefreshHubSchema(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupRefreshHubSchema.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Refresh a hub database schema."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginRefreshHubSchema(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		&armsql.SyncGroupsClientBeginRefreshHubSchemaOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupRefreshHubSchema.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupRefreshHubSchema.json: %v", err)
	}
}

func TestSyncGroups_ListHubSchemas(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupGetHubSchema.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a hub database schema."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListHubSchemas("syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupGetHubSchema.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.SyncFullSchemaPropertiesListResult{
			Value: []*armsql.SyncFullSchemaProperties{
				{
					LastUpdateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-30T07:16:08.21Z"); return t }()),
					Tables: []*armsql.SyncFullSchemaTable{
						{
							Name: to.Ptr("dbo.myTable"),
							Columns: []*armsql.SyncFullSchemaTableColumn{
								{
									Name:         to.Ptr("intField"),
									DataSize:     to.Ptr("4"),
									DataType:     to.Ptr("int"),
									HasError:     to.Ptr(false),
									IsPrimaryKey: to.Ptr(false),
									QuotedName:   to.Ptr("[intField]"),
								},
								{
									Name:         to.Ptr("charField"),
									DataSize:     to.Ptr("100"),
									DataType:     to.Ptr("nvarchar"),
									HasError:     to.Ptr(false),
									IsPrimaryKey: to.Ptr(false),
									QuotedName:   to.Ptr("[charField]"),
								}},
							ErrorID:    to.Ptr("Schema_TableHasNoPrimaryKey"),
							HasError:   to.Ptr(true),
							QuotedName: to.Ptr("[dbo].[myTable]"),
						}},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SyncFullSchemaPropertiesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SyncFullSchemaPropertiesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupGetHubSchema.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncGroups_ListLogs(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupGetLog.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get sync group logs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListLogs("syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"2017-01-01T00:00:00",
		"2017-12-31T00:00:00",
		armsql.SyncGroupsTypeAll,
		&armsql.SyncGroupsClientListLogsOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupGetLog.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.SyncGroupLogListResult{
			Value: []*armsql.SyncGroupLogProperties{
				{
					Type:            to.Ptr(armsql.SyncGroupLogTypeSuccess),
					OperationStatus: to.Ptr("SchemaRefreshSuccess"),
					Source:          to.Ptr("syncgroupcrud-8475.database.windows.net/hub"),
					Timestamp:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-30T07:16:08.25Z"); return t }()),
					TracingID:       to.Ptr("c0480c8e-6269-424e-9404-b00efce0ebae"),
					Details:         to.Ptr("Schema information obtained successfully."),
				},
				{
					Type:            to.Ptr(armsql.SyncGroupLogTypeError),
					OperationStatus: to.Ptr("SchemaRefreshFailure"),
					Source:          to.Ptr("syncgroupcrud-8475.database.windows.net/member"),
					Timestamp:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-30T07:03:37.5733333Z"); return t }()),
					TracingID:       to.Ptr("cd3aa28c-0c31-471f-8a77-f1b21c908cbd"),
					Details:         to.Ptr("Getting schema information for the database failed with the exception \"Failed to connect to server .\nInner exception: SqlException Error Code: -2146232060 - SqlError Number:53, Message: A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: Named Pipes Provider, error: 40 - Could not open a connection to SQL Server) \nInner exception: The network path was not found\n For more information, provide tracing ID ‘cd3aa28c-0c31-471f-8a77-f1b21c908cbd’ to customer support.\""),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SyncGroupLogListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SyncGroupLogListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupGetLog.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncGroups_CancelSync(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupCancelSync.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cancel a sync group synchronization"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.CancelSync(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupCancelSync.json: %v", err)
	}
}

func TestSyncGroups_TriggerSync(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupTriggerSync.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Trigger a sync group synchronization."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.TriggerSync(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupTriggerSync.json: %v", err)
	}
}

func TestSyncGroups_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a sync group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SyncGroup{
			Name: to.Ptr("syncgroupcrud-3187"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/syncGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328/syncGroups/syncgroupcrud-3187"),
			Properties: &armsql.SyncGroupProperties{
				ConflictResolutionPolicy: to.Ptr(armsql.SyncConflictResolutionPolicyHubWin),
				HubDatabaseUserName:      to.Ptr("hubUser"),
				Interval:                 to.Ptr[int32](-1),
				LastSyncTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				PrivateEndpointName:      to.Ptr("PE_67FDBBD6-B2D8-4014-9CC6-C68ABBCFD481_syncgroupcrud-3187"),
				SyncDatabaseID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				SyncState:                to.Ptr(armsql.SyncGroupStateNotReady),
				UsePrivateLinkConnection: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SyncGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SyncGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a sync group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		armsql.SyncGroup{
			Properties: &armsql.SyncGroupProperties{
				ConflictResolutionPolicy: to.Ptr(armsql.SyncConflictResolutionPolicyHubWin),
				HubDatabaseUserName:      to.Ptr("hubUser"),
				Interval:                 to.Ptr[int32](-1),
				SyncDatabaseID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				UsePrivateLinkConnection: to.Ptr(true),
			},
		},
		&armsql.SyncGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SyncGroup{
			Name: to.Ptr("syncgroupcrud-3187"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/syncGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328/syncGroups/syncgroupcrud-3187"),
			Properties: &armsql.SyncGroupProperties{
				ConflictResolutionPolicy: to.Ptr(armsql.SyncConflictResolutionPolicyHubWin),
				HubDatabaseUserName:      to.Ptr("hubUser"),
				Interval:                 to.Ptr[int32](-1),
				LastSyncTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				PrivateEndpointName:      to.Ptr("PE_67FDBBD6-B2D8-4014-9CC6-C68ABBCFD481_syncgroupcrud-8475"),
				SyncDatabaseID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				SyncState:                to.Ptr(armsql.SyncGroupStateNotReady),
				UsePrivateLinkConnection: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SyncGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SyncGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a sync group"},
	})
	client = armsql.NewSyncGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		armsql.SyncGroup{
			Properties: &armsql.SyncGroupProperties{
				ConflictResolutionPolicy: to.Ptr(armsql.SyncConflictResolutionPolicyHubWin),
				HubDatabaseUserName:      to.Ptr("hubUser"),
				Interval:                 to.Ptr[int32](-1),
				SyncDatabaseID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				UsePrivateLinkConnection: to.Ptr(true),
			},
		},
		&armsql.SyncGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupUpdate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SyncGroup{
			Name: to.Ptr("syncgroupcrud-3187"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/syncGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328/syncGroups/syncgroupcrud-3187"),
			Properties: &armsql.SyncGroupProperties{
				ConflictResolutionPolicy: to.Ptr(armsql.SyncConflictResolutionPolicyHubWin),
				HubDatabaseUserName:      to.Ptr("hubUser"),
				Interval:                 to.Ptr[int32](-1),
				LastSyncTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				PrivateEndpointName:      to.Ptr("PE_67FDBBD6-B2D8-4014-9CC6-C68ABBCFD481_syncgroupcrud-3187"),
				SyncDatabaseID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				SyncState:                to.Ptr(armsql.SyncGroupStateNotReady),
				UsePrivateLinkConnection: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SyncGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SyncGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncGroups_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a sync group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		&armsql.SyncGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupDelete.json: %v", err)
	}
}

func TestSyncGroups_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a sync group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		armsql.SyncGroup{
			Properties: &armsql.SyncGroupProperties{
				ConflictResolutionPolicy: to.Ptr(armsql.SyncConflictResolutionPolicyHubWin),
				HubDatabasePassword:      to.Ptr("hubPassword"),
				HubDatabaseUserName:      to.Ptr("hubUser"),
				Interval:                 to.Ptr[int32](-1),
				SyncDatabaseID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				UsePrivateLinkConnection: to.Ptr(true),
			},
		},
		&armsql.SyncGroupsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupPatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SyncGroup{
			Name: to.Ptr("syncgroup"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/syncGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328/syncGroups/syncgroupcrud-3187"),
			Properties: &armsql.SyncGroupProperties{
				ConflictResolutionPolicy: to.Ptr(armsql.SyncConflictResolutionPolicyHubWin),
				HubDatabaseUserName:      to.Ptr("hubUser"),
				Interval:                 to.Ptr[int32](-1),
				LastSyncTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				PrivateEndpointName:      to.Ptr("PE_67FDBBD6-B2D8-4014-9CC6-C68ABBCFD481_syncgroupcrud-3187"),
				SyncDatabaseID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				SyncState:                to.Ptr(armsql.SyncGroupStateNotReady),
				UsePrivateLinkConnection: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SyncGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SyncGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncGroups_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List sync groups under a given database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.SyncGroupListResult{
			Value: []*armsql.SyncGroup{
				{
					Name: to.Ptr("syncgroupcrud-3187"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/syncGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328/syncGroups/syncgroupcrud-3187"),
					Properties: &armsql.SyncGroupProperties{
						ConflictResolutionPolicy: to.Ptr(armsql.SyncConflictResolutionPolicyHubWin),
						HubDatabaseUserName:      to.Ptr("hubUser"),
						Interval:                 to.Ptr[int32](-1),
						LastSyncTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
						PrivateEndpointName:      to.Ptr("PE_67FDBBD6-B2D8-4014-9CC6-C68ABBCFD481_syncgroupcrud-3187"),
						SyncDatabaseID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
						SyncState:                to.Ptr(armsql.SyncGroupStateNotReady),
						UsePrivateLinkConnection: to.Ptr(true),
					},
				},
				{
					Name: to.Ptr("syncgroupcrud-5374"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/syncGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328/syncGroups/syncgroupcrud-5374"),
					Properties: &armsql.SyncGroupProperties{
						ConflictResolutionPolicy: to.Ptr(armsql.SyncConflictResolutionPolicyHubWin),
						HubDatabaseUserName:      to.Ptr("hubUser"),
						Interval:                 to.Ptr[int32](-1),
						LastSyncTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
						PrivateEndpointName:      to.Ptr("PE_67FDBBD6-B2D8-4014-9CC6-C68ABBCFD481_syncgroupcrud-5374"),
						SyncDatabaseID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
						SyncState:                to.Ptr(armsql.SyncGroupStateNotReady),
						UsePrivateLinkConnection: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SyncGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SyncGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncGroupListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncMembers_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a sync member"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncMembersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"syncmembercrud-4879",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SyncMember{
			Name: to.Ptr("syncmembercrud-4879"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/syncGroups/syncMembers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328/syncGroups/syncgroupcrud-3187/syncMembers/syncmembercrud-4879"),
			Properties: &armsql.SyncMemberProperties{
				DatabaseName:                      to.Ptr("syncgroupcrud-7421"),
				DatabaseType:                      to.Ptr(armsql.SyncMemberDbTypeAzureSQLDatabase),
				PrivateEndpointName:               to.Ptr("PE_67FDBBD6-B2D8-4014-9CC6-C68ABBCFD481_syncmembercrud-4879"),
				ServerName:                        to.Ptr("syncgroupcrud-3379.database.windows.net"),
				SyncDirection:                     to.Ptr(armsql.SyncDirectionBidirectional),
				SyncMemberAzureDatabaseResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				SyncState:                         to.Ptr(armsql.SyncMemberStateUnProvisioned),
				UsePrivateLinkConnection:          to.Ptr(true),
				UserName:                          to.Ptr("myUser"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SyncMember) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SyncMember)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncMembers_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new sync member"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncMembersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"syncmembercrud-4879",
		armsql.SyncMember{
			Properties: &armsql.SyncMemberProperties{
				DatabaseName:                      to.Ptr("syncgroupcrud-7421"),
				DatabaseType:                      to.Ptr(armsql.SyncMemberDbTypeAzureSQLDatabase),
				ServerName:                        to.Ptr("syncgroupcrud-3379.database.windows.net"),
				SyncDirection:                     to.Ptr(armsql.SyncDirectionBidirectional),
				SyncMemberAzureDatabaseResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				UsePrivateLinkConnection:          to.Ptr(true),
				UserName:                          to.Ptr("myUser"),
			},
		},
		&armsql.SyncMembersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SyncMember{
			Name: to.Ptr("syncmembercrud-4879"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/syncGroups/syncMembers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328/syncGroups/syncgroupcrud-3187/syncMembers/syncmembercrud-4879"),
			Properties: &armsql.SyncMemberProperties{
				DatabaseName:                      to.Ptr("syncgroupcrud-7421"),
				DatabaseType:                      to.Ptr(armsql.SyncMemberDbTypeAzureSQLDatabase),
				PrivateEndpointName:               to.Ptr("PE_67FDBBD6-B2D8-4014-9CC6-C68ABBCFD481_syncmembercrud-4879"),
				ServerName:                        to.Ptr("syncgroupcrud-3379.database.windows.net"),
				SyncDirection:                     to.Ptr(armsql.SyncDirectionBidirectional),
				SyncMemberAzureDatabaseResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				SyncState:                         to.Ptr(armsql.SyncMemberStateUnProvisioned),
				UsePrivateLinkConnection:          to.Ptr(true),
				UserName:                          to.Ptr("myUser"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SyncMember) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SyncMember)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a sync member"},
	})
	client = armsql.NewSyncMembersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"syncmembercrud-4879",
		armsql.SyncMember{
			Properties: &armsql.SyncMemberProperties{
				DatabaseName:                      to.Ptr("syncgroupcrud-7421"),
				DatabaseType:                      to.Ptr(armsql.SyncMemberDbTypeAzureSQLDatabase),
				ServerName:                        to.Ptr("syncgroupcrud-3379.database.windows.net"),
				SyncDirection:                     to.Ptr(armsql.SyncDirectionBidirectional),
				SyncMemberAzureDatabaseResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				UsePrivateLinkConnection:          to.Ptr(true),
				UserName:                          to.Ptr("myUser"),
			},
		},
		&armsql.SyncMembersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberUpdate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SyncMember{
			Name: to.Ptr("syncmembercrud-4879"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/syncGroups/syncMembers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328/syncGroups/syncgroupcrud-3187/syncMembers/syncmembercrud-4879"),
			Properties: &armsql.SyncMemberProperties{
				DatabaseName:                      to.Ptr("syncgroupcrud-7421"),
				DatabaseType:                      to.Ptr(armsql.SyncMemberDbTypeAzureSQLDatabase),
				PrivateEndpointName:               to.Ptr("PE_67FDBBD6-B2D8-4014-9CC6-C68ABBCFD481_syncmembercrud-4879"),
				ServerName:                        to.Ptr("syncgroupcrud-3379.database.windows.net"),
				SyncDirection:                     to.Ptr(armsql.SyncDirectionBidirectional),
				SyncMemberAzureDatabaseResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				SyncState:                         to.Ptr(armsql.SyncMemberStateUnProvisioned),
				UsePrivateLinkConnection:          to.Ptr(true),
				UserName:                          to.Ptr("myUser"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SyncMember) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SyncMember)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncMembers_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a sync member"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncMembersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"syncgroupcrud-4879",
		&armsql.SyncMembersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberDelete.json: %v", err)
	}
}

func TestSyncMembers_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an existing sync member"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncMembersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"syncmembercrud-4879",
		armsql.SyncMember{
			Properties: &armsql.SyncMemberProperties{
				DatabaseName:                      to.Ptr("syncgroupcrud-7421"),
				DatabaseType:                      to.Ptr(armsql.SyncMemberDbTypeAzureSQLDatabase),
				ServerName:                        to.Ptr("syncgroupcrud-3379.database.windows.net"),
				SyncDirection:                     to.Ptr(armsql.SyncDirectionBidirectional),
				SyncMemberAzureDatabaseResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				UsePrivateLinkConnection:          to.Ptr(true),
				UserName:                          to.Ptr("myUser"),
			},
		},
		&armsql.SyncMembersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberPatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.SyncMember{
			Name: to.Ptr("syncmembercrud-4879"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/syncGroups/syncMembers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328/syncGroups/syncgroupcrud-3187/syncMembers/syncmembercrud-4879"),
			Properties: &armsql.SyncMemberProperties{
				DatabaseName:                      to.Ptr("syncgroupcrud-7421"),
				DatabaseType:                      to.Ptr(armsql.SyncMemberDbTypeAzureSQLDatabase),
				PrivateEndpointName:               to.Ptr("PE_67FDBBD6-B2D8-4014-9CC6-C68ABBCFD481_syncmembercrud-4879"),
				ServerName:                        to.Ptr("syncgroupcrud-3379.database.windows.net"),
				SyncDirection:                     to.Ptr(armsql.SyncDirectionBidirectional),
				SyncMemberAzureDatabaseResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				SyncState:                         to.Ptr(armsql.SyncMemberStateUnProvisioned),
				UsePrivateLinkConnection:          to.Ptr(true),
				UserName:                          to.Ptr("myUser"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SyncMember) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SyncMember)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncMembers_ListBySyncGroup(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberListBySyncGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List sync members under a sync group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncMembersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListBySyncGroup("syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberListBySyncGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.SyncMemberListResult{
			Value: []*armsql.SyncMember{
				{
					Name: to.Ptr("syncmembercrud-4879"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/syncGroups/syncMembers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328/syncGroups/syncgroupcrud-3187/syncMembers/syncmembercrud-4879"),
					Properties: &armsql.SyncMemberProperties{
						DatabaseName:                      to.Ptr("syncgroupcrud-7421"),
						DatabaseType:                      to.Ptr(armsql.SyncMemberDbTypeAzureSQLDatabase),
						PrivateEndpointName:               to.Ptr("PE_67FDBBD6-B2D8-4014-9CC6-C68ABBCFD481_syncmembercrud-4879"),
						ServerName:                        to.Ptr("syncgroupcrud-3379.database.windows.net"),
						SyncDirection:                     to.Ptr(armsql.SyncDirectionBidirectional),
						SyncMemberAzureDatabaseResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
						SyncState:                         to.Ptr(armsql.SyncMemberStateUnProvisioned),
						UsePrivateLinkConnection:          to.Ptr(true),
						UserName:                          to.Ptr("myUser"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SyncMemberListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SyncMemberListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberListBySyncGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncMembers_ListMemberSchemas(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberGetSchema.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a sync member schema"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncMembersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListMemberSchemas("syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"syncgroupcrud-4879",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberGetSchema.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.SyncFullSchemaPropertiesListResult{
			Value: []*armsql.SyncFullSchemaProperties{
				{
					LastUpdateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-30T07:16:08.21Z"); return t }()),
					Tables: []*armsql.SyncFullSchemaTable{
						{
							Name: to.Ptr("dbo.myTable"),
							Columns: []*armsql.SyncFullSchemaTableColumn{
								{
									Name:         to.Ptr("intField"),
									DataSize:     to.Ptr("4"),
									DataType:     to.Ptr("int"),
									HasError:     to.Ptr(false),
									IsPrimaryKey: to.Ptr(false),
									QuotedName:   to.Ptr("[intField]"),
								},
								{
									Name:         to.Ptr("charField"),
									DataSize:     to.Ptr("100"),
									DataType:     to.Ptr("nvarchar"),
									HasError:     to.Ptr(false),
									IsPrimaryKey: to.Ptr(false),
									QuotedName:   to.Ptr("[charField]"),
								}},
							ErrorID:    to.Ptr("Schema_TableHasNoPrimaryKey"),
							HasError:   to.Ptr(true),
							QuotedName: to.Ptr("[dbo].[myTable]"),
						}},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SyncFullSchemaPropertiesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SyncFullSchemaPropertiesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberGetSchema.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncMembers_RefreshMemberSchema(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberRefreshSchema.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Refresh a sync member database schema"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewSyncMembersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginRefreshMemberSchema(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"syncgroupcrud-4879",
		&armsql.SyncMembersClientBeginRefreshMemberSchemaOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberRefreshSchema.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SyncMemberRefreshSchema.json: %v", err)
	}
}

func TestTdeCertificates_Create(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SqlTdeCertificateCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Upload a TDE certificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewTdeCertificatesClient("00000000-0000-0000-0000-000000000001", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"testtdecert",
		"testtdecert",
		armsql.TdeCertificate{
			Properties: &armsql.TdeCertificateProperties{
				PrivateBlob: to.Ptr("MIIXXXXXXXX"),
			},
		},
		&armsql.TdeCertificatesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SqlTdeCertificateCreate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/SqlTdeCertificateCreate.json: %v", err)
	}
}

func TestTimeZones_ListByLocation(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceTimeZoneListByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed instance time zones by location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewTimeZonesClient("37d5e605-6142-4d79-b564-28b6dbfeec0f", cred, &options)
	pager := client.ListByLocation("canadaeast",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceTimeZoneListByLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.TimeZoneListResult{
			Value: []*armsql.TimeZone{
				{
					Name: to.Ptr("Afghanistan Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Afghanistan Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+04:30) Kabul"),
						TimeZoneID:  to.Ptr("Afghanistan Standard Time"),
					},
				},
				{
					Name: to.Ptr("Alaskan Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Alaskan Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-09:00) Alaska"),
						TimeZoneID:  to.Ptr("Alaskan Standard Time"),
					},
				},
				{
					Name: to.Ptr("Aleutian Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Aleutian Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-10:00) Aleutian Islands"),
						TimeZoneID:  to.Ptr("Aleutian Standard Time"),
					},
				},
				{
					Name: to.Ptr("Altai Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Altai Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+07:00) Barnaul, Gorno-Altaysk"),
						TimeZoneID:  to.Ptr("Altai Standard Time"),
					},
				},
				{
					Name: to.Ptr("Arab Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Arab Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+03:00) Kuwait, Riyadh"),
						TimeZoneID:  to.Ptr("Arab Standard Time"),
					},
				},
				{
					Name: to.Ptr("Arabian Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Arabian Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+04:00) Abu Dhabi, Muscat"),
						TimeZoneID:  to.Ptr("Arabian Standard Time"),
					},
				},
				{
					Name: to.Ptr("Arabic Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Arabic Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+03:00) Baghdad"),
						TimeZoneID:  to.Ptr("Arabic Standard Time"),
					},
				},
				{
					Name: to.Ptr("Argentina Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Argentina Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-03:00) City of Buenos Aires"),
						TimeZoneID:  to.Ptr("Argentina Standard Time"),
					},
				},
				{
					Name: to.Ptr("Astrakhan Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Astrakhan Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+04:00) Astrakhan, Ulyanovsk"),
						TimeZoneID:  to.Ptr("Astrakhan Standard Time"),
					},
				},
				{
					Name: to.Ptr("Atlantic Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Atlantic Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-04:00) Atlantic Time (Canada)"),
						TimeZoneID:  to.Ptr("Atlantic Standard Time"),
					},
				},
				{
					Name: to.Ptr("AUS Central Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/AUS Central Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+09:30) Darwin"),
						TimeZoneID:  to.Ptr("AUS Central Standard Time"),
					},
				},
				{
					Name: to.Ptr("Aus Central W. Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Aus Central W. Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+08:45) Eucla"),
						TimeZoneID:  to.Ptr("Aus Central W. Standard Time"),
					},
				},
				{
					Name: to.Ptr("AUS Eastern Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/AUS Eastern Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+10:00) Canberra, Melbourne, Sydney"),
						TimeZoneID:  to.Ptr("AUS Eastern Standard Time"),
					},
				},
				{
					Name: to.Ptr("Azerbaijan Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Azerbaijan Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+04:00) Baku"),
						TimeZoneID:  to.Ptr("Azerbaijan Standard Time"),
					},
				},
				{
					Name: to.Ptr("Azores Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Azores Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-01:00) Azores"),
						TimeZoneID:  to.Ptr("Azores Standard Time"),
					},
				},
				{
					Name: to.Ptr("Bahia Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Bahia Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-03:00) Salvador"),
						TimeZoneID:  to.Ptr("Bahia Standard Time"),
					},
				},
				{
					Name: to.Ptr("Bangladesh Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Bangladesh Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+06:00) Dhaka"),
						TimeZoneID:  to.Ptr("Bangladesh Standard Time"),
					},
				},
				{
					Name: to.Ptr("Belarus Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Belarus Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+03:00) Minsk"),
						TimeZoneID:  to.Ptr("Belarus Standard Time"),
					},
				},
				{
					Name: to.Ptr("Bougainville Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Bougainville Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+11:00) Bougainville Island"),
						TimeZoneID:  to.Ptr("Bougainville Standard Time"),
					},
				},
				{
					Name: to.Ptr("Canada Central Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Canada Central Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-06:00) Saskatchewan"),
						TimeZoneID:  to.Ptr("Canada Central Standard Time"),
					},
				},
				{
					Name: to.Ptr("Cape Verde Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Cape Verde Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-01:00) Cabo Verde Is."),
						TimeZoneID:  to.Ptr("Cape Verde Standard Time"),
					},
				},
				{
					Name: to.Ptr("Caucasus Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Caucasus Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+04:00) Yerevan"),
						TimeZoneID:  to.Ptr("Caucasus Standard Time"),
					},
				},
				{
					Name: to.Ptr("Cen. Australia Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Cen. Australia Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+09:30) Adelaide"),
						TimeZoneID:  to.Ptr("Cen. Australia Standard Time"),
					},
				},
				{
					Name: to.Ptr("Central America Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Central America Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-06:00) Central America"),
						TimeZoneID:  to.Ptr("Central America Standard Time"),
					},
				},
				{
					Name: to.Ptr("Central Asia Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Central Asia Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+06:00) Astana"),
						TimeZoneID:  to.Ptr("Central Asia Standard Time"),
					},
				},
				{
					Name: to.Ptr("Central Brazilian Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Central Brazilian Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-04:00) Cuiaba"),
						TimeZoneID:  to.Ptr("Central Brazilian Standard Time"),
					},
				},
				{
					Name: to.Ptr("Central Europe Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Central Europe Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague"),
						TimeZoneID:  to.Ptr("Central Europe Standard Time"),
					},
				},
				{
					Name: to.Ptr("Central European Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Central European Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb"),
						TimeZoneID:  to.Ptr("Central European Standard Time"),
					},
				},
				{
					Name: to.Ptr("Central Pacific Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Central Pacific Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+11:00) Solomon Is., New Caledonia"),
						TimeZoneID:  to.Ptr("Central Pacific Standard Time"),
					},
				},
				{
					Name: to.Ptr("Central Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Central Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-06:00) Central Time (US & Canada)"),
						TimeZoneID:  to.Ptr("Central Standard Time"),
					},
				},
				{
					Name: to.Ptr("Central Standard Time (Mexico)"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Central Standard Time (Mexico)"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-06:00) Guadalajara, Mexico City, Monterrey"),
						TimeZoneID:  to.Ptr("Central Standard Time (Mexico)"),
					},
				},
				{
					Name: to.Ptr("Chatham Islands Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Chatham Islands Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+12:45) Chatham Islands"),
						TimeZoneID:  to.Ptr("Chatham Islands Standard Time"),
					},
				},
				{
					Name: to.Ptr("China Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/China Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi"),
						TimeZoneID:  to.Ptr("China Standard Time"),
					},
				},
				{
					Name: to.Ptr("Cuba Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Cuba Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-05:00) Havana"),
						TimeZoneID:  to.Ptr("Cuba Standard Time"),
					},
				},
				{
					Name: to.Ptr("Dateline Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Dateline Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-12:00) International Date Line West"),
						TimeZoneID:  to.Ptr("Dateline Standard Time"),
					},
				},
				{
					Name: to.Ptr("E. Africa Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/E. Africa Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+03:00) Nairobi"),
						TimeZoneID:  to.Ptr("E. Africa Standard Time"),
					},
				},
				{
					Name: to.Ptr("E. Australia Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/E. Australia Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+10:00) Brisbane"),
						TimeZoneID:  to.Ptr("E. Australia Standard Time"),
					},
				},
				{
					Name: to.Ptr("E. Europe Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/E. Europe Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+02:00) Chisinau"),
						TimeZoneID:  to.Ptr("E. Europe Standard Time"),
					},
				},
				{
					Name: to.Ptr("E. South America Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/E. South America Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-03:00) Brasilia"),
						TimeZoneID:  to.Ptr("E. South America Standard Time"),
					},
				},
				{
					Name: to.Ptr("Easter Island Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Easter Island Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-06:00) Easter Island"),
						TimeZoneID:  to.Ptr("Easter Island Standard Time"),
					},
				},
				{
					Name: to.Ptr("Eastern Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Eastern Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-05:00) Eastern Time (US & Canada)"),
						TimeZoneID:  to.Ptr("Eastern Standard Time"),
					},
				},
				{
					Name: to.Ptr("Eastern Standard Time (Mexico)"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Eastern Standard Time (Mexico)"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-05:00) Chetumal"),
						TimeZoneID:  to.Ptr("Eastern Standard Time (Mexico)"),
					},
				},
				{
					Name: to.Ptr("Egypt Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Egypt Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+02:00) Cairo"),
						TimeZoneID:  to.Ptr("Egypt Standard Time"),
					},
				},
				{
					Name: to.Ptr("Ekaterinburg Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Ekaterinburg Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+05:00) Ekaterinburg"),
						TimeZoneID:  to.Ptr("Ekaterinburg Standard Time"),
					},
				},
				{
					Name: to.Ptr("Fiji Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Fiji Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+12:00) Fiji"),
						TimeZoneID:  to.Ptr("Fiji Standard Time"),
					},
				},
				{
					Name: to.Ptr("FLE Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/FLE Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius"),
						TimeZoneID:  to.Ptr("FLE Standard Time"),
					},
				},
				{
					Name: to.Ptr("Georgian Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Georgian Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+04:00) Tbilisi"),
						TimeZoneID:  to.Ptr("Georgian Standard Time"),
					},
				},
				{
					Name: to.Ptr("GMT Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/GMT Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+00:00) Dublin, Edinburgh, Lisbon, London"),
						TimeZoneID:  to.Ptr("GMT Standard Time"),
					},
				},
				{
					Name: to.Ptr("Greenland Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Greenland Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-03:00) Greenland"),
						TimeZoneID:  to.Ptr("Greenland Standard Time"),
					},
				},
				{
					Name: to.Ptr("Greenwich Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Greenwich Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+00:00) Monrovia, Reykjavik"),
						TimeZoneID:  to.Ptr("Greenwich Standard Time"),
					},
				},
				{
					Name: to.Ptr("GTB Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/GTB Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+02:00) Athens, Bucharest"),
						TimeZoneID:  to.Ptr("GTB Standard Time"),
					},
				},
				{
					Name: to.Ptr("Haiti Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Haiti Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-05:00) Haiti"),
						TimeZoneID:  to.Ptr("Haiti Standard Time"),
					},
				},
				{
					Name: to.Ptr("Hawaiian Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Hawaiian Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-10:00) Hawaii"),
						TimeZoneID:  to.Ptr("Hawaiian Standard Time"),
					},
				},
				{
					Name: to.Ptr("India Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/India Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi"),
						TimeZoneID:  to.Ptr("India Standard Time"),
					},
				},
				{
					Name: to.Ptr("Iran Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Iran Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+03:30) Tehran"),
						TimeZoneID:  to.Ptr("Iran Standard Time"),
					},
				},
				{
					Name: to.Ptr("Israel Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Israel Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+02:00) Jerusalem"),
						TimeZoneID:  to.Ptr("Israel Standard Time"),
					},
				},
				{
					Name: to.Ptr("Jordan Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Jordan Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+02:00) Amman"),
						TimeZoneID:  to.Ptr("Jordan Standard Time"),
					},
				},
				{
					Name: to.Ptr("Kaliningrad Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Kaliningrad Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+02:00) Kaliningrad"),
						TimeZoneID:  to.Ptr("Kaliningrad Standard Time"),
					},
				},
				{
					Name: to.Ptr("Kamchatka Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Kamchatka Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+12:00) Petropavlovsk-Kamchatsky - Old"),
						TimeZoneID:  to.Ptr("Kamchatka Standard Time"),
					},
				},
				{
					Name: to.Ptr("Korea Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Korea Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+09:00) Seoul"),
						TimeZoneID:  to.Ptr("Korea Standard Time"),
					},
				},
				{
					Name: to.Ptr("Libya Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Libya Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+02:00) Tripoli"),
						TimeZoneID:  to.Ptr("Libya Standard Time"),
					},
				},
				{
					Name: to.Ptr("Line Islands Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Line Islands Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+14:00) Kiritimati Island"),
						TimeZoneID:  to.Ptr("Line Islands Standard Time"),
					},
				},
				{
					Name: to.Ptr("Lord Howe Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Lord Howe Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+10:30) Lord Howe Island"),
						TimeZoneID:  to.Ptr("Lord Howe Standard Time"),
					},
				},
				{
					Name: to.Ptr("Magadan Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Magadan Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+11:00) Magadan"),
						TimeZoneID:  to.Ptr("Magadan Standard Time"),
					},
				},
				{
					Name: to.Ptr("Magallanes Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Magallanes Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-03:00) Punta Arenas"),
						TimeZoneID:  to.Ptr("Magallanes Standard Time"),
					},
				},
				{
					Name: to.Ptr("Marquesas Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Marquesas Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-09:30) Marquesas Islands"),
						TimeZoneID:  to.Ptr("Marquesas Standard Time"),
					},
				},
				{
					Name: to.Ptr("Mauritius Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Mauritius Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+04:00) Port Louis"),
						TimeZoneID:  to.Ptr("Mauritius Standard Time"),
					},
				},
				{
					Name: to.Ptr("Mid-Atlantic Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Mid-Atlantic Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-02:00) Mid-Atlantic - Old"),
						TimeZoneID:  to.Ptr("Mid-Atlantic Standard Time"),
					},
				},
				{
					Name: to.Ptr("Middle East Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Middle East Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+02:00) Beirut"),
						TimeZoneID:  to.Ptr("Middle East Standard Time"),
					},
				},
				{
					Name: to.Ptr("Montevideo Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Montevideo Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-03:00) Montevideo"),
						TimeZoneID:  to.Ptr("Montevideo Standard Time"),
					},
				},
				{
					Name: to.Ptr("Morocco Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Morocco Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+01:00) Casablanca"),
						TimeZoneID:  to.Ptr("Morocco Standard Time"),
					},
				},
				{
					Name: to.Ptr("Mountain Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Mountain Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-07:00) Mountain Time (US & Canada)"),
						TimeZoneID:  to.Ptr("Mountain Standard Time"),
					},
				},
				{
					Name: to.Ptr("Mountain Standard Time (Mexico)"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Mountain Standard Time (Mexico)"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-07:00) Chihuahua, La Paz, Mazatlan"),
						TimeZoneID:  to.Ptr("Mountain Standard Time (Mexico)"),
					},
				},
				{
					Name: to.Ptr("Myanmar Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Myanmar Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+06:30) Yangon (Rangoon)"),
						TimeZoneID:  to.Ptr("Myanmar Standard Time"),
					},
				},
				{
					Name: to.Ptr("N. Central Asia Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/N. Central Asia Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+07:00) Novosibirsk"),
						TimeZoneID:  to.Ptr("N. Central Asia Standard Time"),
					},
				},
				{
					Name: to.Ptr("Namibia Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Namibia Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+02:00) Windhoek"),
						TimeZoneID:  to.Ptr("Namibia Standard Time"),
					},
				},
				{
					Name: to.Ptr("Nepal Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Nepal Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+05:45) Kathmandu"),
						TimeZoneID:  to.Ptr("Nepal Standard Time"),
					},
				},
				{
					Name: to.Ptr("New Zealand Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/New Zealand Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+12:00) Auckland, Wellington"),
						TimeZoneID:  to.Ptr("New Zealand Standard Time"),
					},
				},
				{
					Name: to.Ptr("Newfoundland Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Newfoundland Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-03:30) Newfoundland"),
						TimeZoneID:  to.Ptr("Newfoundland Standard Time"),
					},
				},
				{
					Name: to.Ptr("Norfolk Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Norfolk Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+11:00) Norfolk Island"),
						TimeZoneID:  to.Ptr("Norfolk Standard Time"),
					},
				},
				{
					Name: to.Ptr("North Asia East Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/North Asia East Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+08:00) Irkutsk"),
						TimeZoneID:  to.Ptr("North Asia East Standard Time"),
					},
				},
				{
					Name: to.Ptr("North Asia Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/North Asia Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+07:00) Krasnoyarsk"),
						TimeZoneID:  to.Ptr("North Asia Standard Time"),
					},
				},
				{
					Name: to.Ptr("North Korea Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/North Korea Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+09:00) Pyongyang"),
						TimeZoneID:  to.Ptr("North Korea Standard Time"),
					},
				},
				{
					Name: to.Ptr("Omsk Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Omsk Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+06:00) Omsk"),
						TimeZoneID:  to.Ptr("Omsk Standard Time"),
					},
				},
				{
					Name: to.Ptr("Pacific SA Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Pacific SA Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-04:00) Santiago"),
						TimeZoneID:  to.Ptr("Pacific SA Standard Time"),
					},
				},
				{
					Name: to.Ptr("Pacific Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Pacific Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-08:00) Pacific Time (US & Canada)"),
						TimeZoneID:  to.Ptr("Pacific Standard Time"),
					},
				},
				{
					Name: to.Ptr("Pacific Standard Time (Mexico)"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Pacific Standard Time (Mexico)"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-08:00) Baja California"),
						TimeZoneID:  to.Ptr("Pacific Standard Time (Mexico)"),
					},
				},
				{
					Name: to.Ptr("Pakistan Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Pakistan Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+05:00) Islamabad, Karachi"),
						TimeZoneID:  to.Ptr("Pakistan Standard Time"),
					},
				},
				{
					Name: to.Ptr("Paraguay Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Paraguay Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-04:00) Asuncion"),
						TimeZoneID:  to.Ptr("Paraguay Standard Time"),
					},
				},
				{
					Name: to.Ptr("Qyzylorda Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Qyzylorda Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+05:00) Qyzylorda"),
						TimeZoneID:  to.Ptr("Qyzylorda Standard Time"),
					},
				},
				{
					Name: to.Ptr("Romance Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Romance Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+01:00) Brussels, Copenhagen, Madrid, Paris"),
						TimeZoneID:  to.Ptr("Romance Standard Time"),
					},
				},
				{
					Name: to.Ptr("Russia Time Zone 10"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Russia Time Zone 10"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+11:00) Chokurdakh"),
						TimeZoneID:  to.Ptr("Russia Time Zone 10"),
					},
				},
				{
					Name: to.Ptr("Russia Time Zone 11"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Russia Time Zone 11"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky"),
						TimeZoneID:  to.Ptr("Russia Time Zone 11"),
					},
				},
				{
					Name: to.Ptr("Russia Time Zone 3"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Russia Time Zone 3"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+04:00) Izhevsk, Samara"),
						TimeZoneID:  to.Ptr("Russia Time Zone 3"),
					},
				},
				{
					Name: to.Ptr("Russian Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Russian Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+03:00) Moscow, St. Petersburg"),
						TimeZoneID:  to.Ptr("Russian Standard Time"),
					},
				},
				{
					Name: to.Ptr("SA Eastern Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/SA Eastern Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-03:00) Cayenne, Fortaleza"),
						TimeZoneID:  to.Ptr("SA Eastern Standard Time"),
					},
				},
				{
					Name: to.Ptr("SA Pacific Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/SA Pacific Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-05:00) Bogota, Lima, Quito, Rio Branco"),
						TimeZoneID:  to.Ptr("SA Pacific Standard Time"),
					},
				},
				{
					Name: to.Ptr("SA Western Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/SA Western Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-04:00) Georgetown, La Paz, Manaus, San Juan"),
						TimeZoneID:  to.Ptr("SA Western Standard Time"),
					},
				},
				{
					Name: to.Ptr("Saint Pierre Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Saint Pierre Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-03:00) Saint Pierre and Miquelon"),
						TimeZoneID:  to.Ptr("Saint Pierre Standard Time"),
					},
				},
				{
					Name: to.Ptr("Sakhalin Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Sakhalin Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+11:00) Sakhalin"),
						TimeZoneID:  to.Ptr("Sakhalin Standard Time"),
					},
				},
				{
					Name: to.Ptr("Samoa Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Samoa Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+13:00) Samoa"),
						TimeZoneID:  to.Ptr("Samoa Standard Time"),
					},
				},
				{
					Name: to.Ptr("Sao Tome Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Sao Tome Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+00:00) Sao Tome"),
						TimeZoneID:  to.Ptr("Sao Tome Standard Time"),
					},
				},
				{
					Name: to.Ptr("Saratov Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Saratov Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+04:00) Saratov"),
						TimeZoneID:  to.Ptr("Saratov Standard Time"),
					},
				},
				{
					Name: to.Ptr("SE Asia Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/SE Asia Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+07:00) Bangkok, Hanoi, Jakarta"),
						TimeZoneID:  to.Ptr("SE Asia Standard Time"),
					},
				},
				{
					Name: to.Ptr("Singapore Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Singapore Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+08:00) Kuala Lumpur, Singapore"),
						TimeZoneID:  to.Ptr("Singapore Standard Time"),
					},
				},
				{
					Name: to.Ptr("South Africa Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/South Africa Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+02:00) Harare, Pretoria"),
						TimeZoneID:  to.Ptr("South Africa Standard Time"),
					},
				},
				{
					Name: to.Ptr("Sri Lanka Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Sri Lanka Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+05:30) Sri Jayawardenepura"),
						TimeZoneID:  to.Ptr("Sri Lanka Standard Time"),
					},
				},
				{
					Name: to.Ptr("Sudan Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Sudan Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+02:00) Khartoum"),
						TimeZoneID:  to.Ptr("Sudan Standard Time"),
					},
				},
				{
					Name: to.Ptr("Syria Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Syria Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+02:00) Damascus"),
						TimeZoneID:  to.Ptr("Syria Standard Time"),
					},
				},
				{
					Name: to.Ptr("Taipei Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Taipei Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+08:00) Taipei"),
						TimeZoneID:  to.Ptr("Taipei Standard Time"),
					},
				},
				{
					Name: to.Ptr("Tasmania Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Tasmania Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+10:00) Hobart"),
						TimeZoneID:  to.Ptr("Tasmania Standard Time"),
					},
				},
				{
					Name: to.Ptr("Tocantins Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Tocantins Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-03:00) Araguaina"),
						TimeZoneID:  to.Ptr("Tocantins Standard Time"),
					},
				},
				{
					Name: to.Ptr("Tokyo Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Tokyo Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+09:00) Osaka, Sapporo, Tokyo"),
						TimeZoneID:  to.Ptr("Tokyo Standard Time"),
					},
				},
				{
					Name: to.Ptr("Tomsk Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Tomsk Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+07:00) Tomsk"),
						TimeZoneID:  to.Ptr("Tomsk Standard Time"),
					},
				},
				{
					Name: to.Ptr("Tonga Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Tonga Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+13:00) Nuku'alofa"),
						TimeZoneID:  to.Ptr("Tonga Standard Time"),
					},
				},
				{
					Name: to.Ptr("Transbaikal Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Transbaikal Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+09:00) Chita"),
						TimeZoneID:  to.Ptr("Transbaikal Standard Time"),
					},
				},
				{
					Name: to.Ptr("Turkey Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Turkey Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+03:00) Istanbul"),
						TimeZoneID:  to.Ptr("Turkey Standard Time"),
					},
				},
				{
					Name: to.Ptr("Turks And Caicos Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Turks And Caicos Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-05:00) Turks and Caicos"),
						TimeZoneID:  to.Ptr("Turks And Caicos Standard Time"),
					},
				},
				{
					Name: to.Ptr("Ulaanbaatar Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Ulaanbaatar Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+08:00) Ulaanbaatar"),
						TimeZoneID:  to.Ptr("Ulaanbaatar Standard Time"),
					},
				},
				{
					Name: to.Ptr("US Eastern Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/US Eastern Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-05:00) Indiana (East)"),
						TimeZoneID:  to.Ptr("US Eastern Standard Time"),
					},
				},
				{
					Name: to.Ptr("US Mountain Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/US Mountain Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-07:00) Arizona"),
						TimeZoneID:  to.Ptr("US Mountain Standard Time"),
					},
				},
				{
					Name: to.Ptr("UTC"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/UTC"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC) Coordinated Universal Time"),
						TimeZoneID:  to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("UTC+12"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/UTC+12"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+12:00) Coordinated Universal Time+12"),
						TimeZoneID:  to.Ptr("UTC+12"),
					},
				},
				{
					Name: to.Ptr("UTC+13"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/UTC+13"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+13:00) Coordinated Universal Time+13"),
						TimeZoneID:  to.Ptr("UTC+13"),
					},
				},
				{
					Name: to.Ptr("UTC-02"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/UTC-02"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-02:00) Coordinated Universal Time-02"),
						TimeZoneID:  to.Ptr("UTC-02"),
					},
				},
				{
					Name: to.Ptr("UTC-08"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/UTC-08"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-08:00) Coordinated Universal Time-08"),
						TimeZoneID:  to.Ptr("UTC-08"),
					},
				},
				{
					Name: to.Ptr("UTC-09"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/UTC-09"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-09:00) Coordinated Universal Time-09"),
						TimeZoneID:  to.Ptr("UTC-09"),
					},
				},
				{
					Name: to.Ptr("UTC-11"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/UTC-11"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-11:00) Coordinated Universal Time-11"),
						TimeZoneID:  to.Ptr("UTC-11"),
					},
				},
				{
					Name: to.Ptr("Venezuela Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Venezuela Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC-04:00) Caracas"),
						TimeZoneID:  to.Ptr("Venezuela Standard Time"),
					},
				},
				{
					Name: to.Ptr("Vladivostok Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Vladivostok Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+10:00) Vladivostok"),
						TimeZoneID:  to.Ptr("Vladivostok Standard Time"),
					},
				},
				{
					Name: to.Ptr("Volgograd Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Volgograd Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+04:00) Volgograd"),
						TimeZoneID:  to.Ptr("Volgograd Standard Time"),
					},
				},
				{
					Name: to.Ptr("W. Australia Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/W. Australia Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+08:00) Perth"),
						TimeZoneID:  to.Ptr("W. Australia Standard Time"),
					},
				},
				{
					Name: to.Ptr("W. Central Africa Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/W. Central Africa Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+01:00) West Central Africa"),
						TimeZoneID:  to.Ptr("W. Central Africa Standard Time"),
					},
				},
				{
					Name: to.Ptr("W. Europe Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/W. Europe Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna"),
						TimeZoneID:  to.Ptr("W. Europe Standard Time"),
					},
				},
				{
					Name: to.Ptr("W. Mongolia Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/W. Mongolia Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+07:00) Hovd"),
						TimeZoneID:  to.Ptr("W. Mongolia Standard Time"),
					},
				},
				{
					Name: to.Ptr("West Asia Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/West Asia Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+05:00) Ashgabat, Tashkent"),
						TimeZoneID:  to.Ptr("West Asia Standard Time"),
					},
				},
				{
					Name: to.Ptr("West Bank Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/West Bank Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+02:00) Gaza, Hebron"),
						TimeZoneID:  to.Ptr("West Bank Standard Time"),
					},
				},
				{
					Name: to.Ptr("West Pacific Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/West Pacific Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+10:00) Guam, Port Moresby"),
						TimeZoneID:  to.Ptr("West Pacific Standard Time"),
					},
				},
				{
					Name: to.Ptr("Yakutsk Standard Time"),
					Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
					ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Yakutsk Standard Time"),
					Properties: &armsql.TimeZoneProperties{
						DisplayName: to.Ptr("(UTC+09:00) Yakutsk"),
						TimeZoneID:  to.Ptr("Yakutsk Standard Time"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TimeZoneListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TimeZoneListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceTimeZoneListByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTimeZones_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceTimeZoneGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get managed instance time zone"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewTimeZonesClient("37d5e605-6142-4d79-b564-28b6dbfeec0f", cred, &options)
	res, err := client.Get(ctx,
		"canadaeast",
		"Haiti Standard Time",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceTimeZoneGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.TimeZone{
			Name: to.Ptr("Haiti Standard Time"),
			Type: to.Ptr("Microsoft.Sql/locations/timeZones"),
			ID:   to.Ptr("/subscriptions/37d5e605-6142-4d79-b564-28b6dbfeec0f/providers/Microsoft.Sql/locations/onebox/timeZones/Haiti Standard Time"),
			Properties: &armsql.TimeZoneProperties{
				DisplayName: to.Ptr("(UTC-05:00) Haiti"),
				TimeZoneID:  to.Ptr("Haiti Standard Time"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TimeZone) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TimeZone)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedInstanceTimeZoneGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualClusters_List(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List virtualClusters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewVirtualClustersClient("20d7082a-0fc7-4468-82bd-542694d5042b", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.VirtualClusterListResult{
			Value: []*armsql.VirtualCluster{
				{
					Name:     to.Ptr("vc-subnet1-f769ed71-b3ad-491a-a9d5-26eeceaa6be2"),
					Type:     to.Ptr("Microsoft.Sql/virtualClusters"),
					ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/virtualClusters/vc-subnet1-f769ed71-b3ad-491a-a9d5-26eeceaa6be2"),
					Location: to.Ptr("onebox"),
					Properties: &armsql.VirtualClusterProperties{
						ChildResources: []*string{
							to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance1"),
							to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance2")},
						Family:                     to.Ptr("Gen4"),
						MaintenanceConfigurationID: to.Ptr("/subscriptions/ab0e51c0-83c0-4380-8ae9-025516df392f/resourceGroups/Federation/providers/Microsoft.Maintenance/maintenanceConfigurations/MiPolicy1"),
						SubnetID:                   to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
					},
				},
				{
					Name:     to.Ptr("vc-subnet1-14b795bd-9c8f-46ec-adb8-2b8eff56ac16"),
					Type:     to.Ptr("Microsoft.Sql/virtualClusters"),
					ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/virtualClusters/vc-subnet2-14b795bd-9c8f-46ec-adb8-2b8eff56ac16"),
					Location: to.Ptr("onebox"),
					Properties: &armsql.VirtualClusterProperties{
						ChildResources: []*string{
							to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance3"),
							to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance4")},
						Family:                     to.Ptr("Gen5"),
						MaintenanceConfigurationID: to.Ptr("/subscriptions/ab0e51c0-83c0-4380-8ae9-025516df392f/resourceGroups/Federation/providers/Microsoft.Maintenance/maintenanceConfigurations/MiPolicy1"),
						SubnetID:                   to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/subnet2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualClusterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualClusterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualClusters_ListByResourceGroup(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List virtual clusters by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewVirtualClustersClient("20d7082a-0fc7-4468-82bd-542694d5042b", cred, &options)
	pager := client.ListByResourceGroup("testrg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.VirtualClusterListResult{
			Value: []*armsql.VirtualCluster{
				{
					Name:     to.Ptr("vc-subnet1-f769ed71-b3ad-491a-a9d5-26eeceaa6be2"),
					Type:     to.Ptr("Microsoft.Sql/virtualClusters"),
					ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/virtualClusters/vc-subnet1-f769ed71-b3ad-491a-a9d5-26eeceaa6be2"),
					Location: to.Ptr("onebox"),
					Properties: &armsql.VirtualClusterProperties{
						ChildResources: []*string{
							to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance1"),
							to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance2")},
						Family:                     to.Ptr("Gen4"),
						MaintenanceConfigurationID: to.Ptr("/subscriptions/ab0e51c0-83c0-4380-8ae9-025516df392f/resourceGroups/Federation/providers/Microsoft.Maintenance/maintenanceConfigurations/MiPolicy1"),
						SubnetID:                   to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
					},
				},
				{
					Name:     to.Ptr("vc-subnet1-14b795bd-9c8f-46ec-adb8-2b8eff56ac16"),
					Type:     to.Ptr("Microsoft.Sql/virtualClusters"),
					ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/virtualClusters/vc-subnet2-14b795bd-9c8f-46ec-adb8-2b8eff56ac16"),
					Location: to.Ptr("onebox"),
					Properties: &armsql.VirtualClusterProperties{
						ChildResources: []*string{
							to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance3"),
							to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance4")},
						Family:                     to.Ptr("Gen4"),
						MaintenanceConfigurationID: to.Ptr("/subscriptions/ab0e51c0-83c0-4380-8ae9-025516df392f/resourceGroups/Federation/providers/Microsoft.Maintenance/maintenanceConfigurations/MiPolicy1"),
						SubnetID:                   to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/subnet2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualClusterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualClusterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualClusters_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get virtual cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewVirtualClustersClient("20d7082a-0fc7-4468-82bd-542694d5042b", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"vc-subnet1-f769ed71-b3ad-491a-a9d5-26eeceaa6be2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.VirtualCluster{
			Name:     to.Ptr("vc-subnet1-f769ed71-b3ad-491a-a9d5-26eeceaa6be2"),
			Type:     to.Ptr("Microsoft.Sql/virtualClusters"),
			ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/virtualClusters/vc-subnet1-f769ed71-b3ad-491a-a9d5-26eeceaa6be2"),
			Location: to.Ptr("onebox"),
			Properties: &armsql.VirtualClusterProperties{
				ChildResources: []*string{
					to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance1"),
					to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance2")},
				Family:                     to.Ptr("Gen4"),
				MaintenanceConfigurationID: to.Ptr("/subscriptions/ab0e51c0-83c0-4380-8ae9-025516df392f/resourceGroups/Federation/providers/Microsoft.Maintenance/maintenanceConfigurations/MiPolicy1"),
				SubnetID:                   to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualClusters_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete virtual cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewVirtualClustersClient("20d7082a-0fc7-4468-82bd-542694d5042b", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"vc-subnet1-f769ed71-b3ad-491a-a9d5-26eeceaa6be2",
		&armsql.VirtualClustersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterDelete.json: %v", err)
	}
}

func TestVirtualClusters_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update virtual cluster with tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewVirtualClustersClient("20d7082a-0fc7-4468-82bd-542694d5042b", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testrg",
		"vc-subnet1-f769ed71-b3ad-491a-a9d5-26eeceaa6be2",
		armsql.VirtualClusterUpdate{
			Properties: &armsql.VirtualClusterProperties{
				MaintenanceConfigurationID: to.Ptr("/subscriptions/ab0e51c0-83c0-4380-8ae9-025516df392f/resourceGroups/Federation/providers/Microsoft.Maintenance/maintenanceConfigurations/MiPolicy1"),
			},
		},
		&armsql.VirtualClustersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.VirtualCluster{
			Name:     to.Ptr("vc-subnet1-f769ed71-b3ad-491a-a9d5-26eeceaa6be2"),
			Type:     to.Ptr("Microsoft.Sql/virtualClusters"),
			ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/virtualClusters/vc-subnet1-f769ed71-b3ad-491a-a9d5-26eeceaa6be2"),
			Location: to.Ptr("onebox"),
			Properties: &armsql.VirtualClusterProperties{
				ChildResources: []*string{
					to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance1"),
					to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance2")},
				MaintenanceConfigurationID: to.Ptr("/subscriptions/ab0e51c0-83c0-4380-8ae9-025516df392f/resourceGroups/Federation/providers/Microsoft.Maintenance/maintenanceConfigurations/MiPolicy1"),
				SubnetID:                   to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualClusterUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkRules_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualNetworkRulesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a virtual network rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewVirtualNetworkRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default",
		"vnet-test-svr",
		"vnet-firewall-rule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualNetworkRulesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.VirtualNetworkRule{
			Name: to.Ptr("vnet-firewall-rule"),
			Type: to.Ptr("Microsoft.Sql/servers/virtualNetworkRules"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/vnet-test-svr/virtualNetworkRules/vnet-firewall-rule"),
			Properties: &armsql.VirtualNetworkRuleProperties{
				IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
				State:                            to.Ptr(armsql.VirtualNetworkRuleStateReady),
				VirtualNetworkSubnetID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualNetworkRulesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkRules_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualNetworkRulesCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a virtual network rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewVirtualNetworkRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"vnet-test-svr",
		"vnet-firewall-rule",
		armsql.VirtualNetworkRule{
			Properties: &armsql.VirtualNetworkRuleProperties{
				IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
				VirtualNetworkSubnetID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
			},
		},
		&armsql.VirtualNetworkRulesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualNetworkRulesCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualNetworkRulesCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.VirtualNetworkRule{
			Name: to.Ptr("vnet-firewall-rule"),
			Type: to.Ptr("Microsoft.Sql/servers/virtualNetworkRules"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/vnet-test-svr/virtualNetworkRules/vnet-firewall-rule"),
			Properties: &armsql.VirtualNetworkRuleProperties{
				IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
				VirtualNetworkSubnetID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualNetworkRulesCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkRules_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualNetworkRulesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a virtual network rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewVirtualNetworkRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default",
		"vnet-test-svr",
		"vnet-firewall-rule",
		&armsql.VirtualNetworkRulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualNetworkRulesDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualNetworkRulesDelete.json: %v", err)
	}
}

func TestVirtualNetworkRules_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualNetworkRulesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List virtual network rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewVirtualNetworkRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("Default",
		"vnet-test-svr",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualNetworkRulesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.VirtualNetworkRuleListResult{
			Value: []*armsql.VirtualNetworkRule{
				{
					Name: to.Ptr("vnet-firewall-rule"),
					Type: to.Ptr("Microsoft.Sql/servers/virtualNetworkRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/vnet-test-svr/virtualNetworkRules/vnet-firewall-rule"),
					Properties: &armsql.VirtualNetworkRuleProperties{
						IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
						State:                            to.Ptr(armsql.VirtualNetworkRuleStateReady),
						VirtualNetworkSubnetID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
					},
				},
				{
					Name: to.Ptr("vnet-firewall-rule"),
					Type: to.Ptr("Microsoft.Sql/servers/virtualNetworkRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/vnet-test-svr/virtualNetworkRules/vnet-firewall-rule"),
					Properties: &armsql.VirtualNetworkRuleProperties{
						IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
						State:                            to.Ptr(armsql.VirtualNetworkRuleStateReady),
						VirtualNetworkSubnetID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/VirtualNetworkRulesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadClassifiers_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetWorkloadClassifier.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a workload classifier for a data warehouse"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewWorkloadClassifiersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"wlm_workloadgroup",
		"wlm_classifier",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetWorkloadClassifier.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.WorkloadClassifier{
			Name: to.Ptr("wlm_classifier"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/workloadGroups/workloadClassifiers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/workloadGroups/wlm_workloadgroup/workloadClassifiers/wlm_classifier"),
			Properties: &armsql.WorkloadClassifierProperties{
				Context:    to.Ptr("test_context"),
				EndTime:    to.Ptr("14:00"),
				Importance: to.Ptr("high"),
				Label:      to.Ptr("test_label"),
				MemberName: to.Ptr("dbo"),
				StartTime:  to.Ptr("12:00"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadClassifier) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadClassifier)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetWorkloadClassifier.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadClassifiers_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadClassifierMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a workload group with all properties specified."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewWorkloadClassifiersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"wlm_workloadgroup",
		"wlm_workloadclassifier",
		armsql.WorkloadClassifier{
			Properties: &armsql.WorkloadClassifierProperties{
				Context:    to.Ptr("test_context"),
				EndTime:    to.Ptr("14:00"),
				Importance: to.Ptr("high"),
				Label:      to.Ptr("test_label"),
				MemberName: to.Ptr("dbo"),
				StartTime:  to.Ptr("12:00"),
			},
		},
		&armsql.WorkloadClassifiersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadClassifierMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadClassifierMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.WorkloadClassifier{
			Name: to.Ptr("wlm_workloadclassifier"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/workloadGroups/workloadClassifiers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/workloadGroups/wlm_workloadgroup/workloadClassifiers/wlm_workloadclassifier"),
			Properties: &armsql.WorkloadClassifierProperties{
				Context:    to.Ptr("test_context"),
				EndTime:    to.Ptr("14:00"),
				Importance: to.Ptr("high"),
				Label:      to.Ptr("test_label"),
				MemberName: to.Ptr("dbo"),
				StartTime:  to.Ptr("12:00"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadClassifier) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadClassifier)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadClassifierMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadClassifierMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a workload group with the required properties specified."},
	})
	client = armsql.NewWorkloadClassifiersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"wlm_workloadgroup",
		"wlm_workloadclassifier",
		armsql.WorkloadClassifier{
			Properties: &armsql.WorkloadClassifierProperties{
				MemberName: to.Ptr("dbo"),
			},
		},
		&armsql.WorkloadClassifiersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadClassifierMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadClassifierMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.WorkloadClassifier{
			Name: to.Ptr("wlm_workloadclassifier"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/workloadGroups/workloadClassifiers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/workloadGroups/wlm_workloadgroup/workloadClassifiers/wlm_workloadclassifier"),
			Properties: &armsql.WorkloadClassifierProperties{
				Context:    to.Ptr(""),
				EndTime:    to.Ptr(""),
				Importance: to.Ptr(""),
				Label:      to.Ptr(""),
				MemberName: to.Ptr("dbo"),
				StartTime:  to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadClassifier) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadClassifier)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadClassifierMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadClassifiers_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteWorkloadClassifier.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a workload classifier"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewWorkloadClassifiersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"wlm_workloadgroup",
		"wlm_workloadclassifier",
		&armsql.WorkloadClassifiersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteWorkloadClassifier.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteWorkloadClassifier.json: %v", err)
	}
}

func TestWorkloadClassifiers_ListByWorkloadGroup(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetWorkloadClassifierList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the list of workload classifiers for a workload group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewWorkloadClassifiersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByWorkloadGroup("Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"wlm_workloadgroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetWorkloadClassifierList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.WorkloadClassifierListResult{
			Value: []*armsql.WorkloadClassifier{
				{
					Name: to.Ptr("classifier3"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/workloadGroups/workloadClassifiers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/workloadGroups/wlm_workloadgroup/workloadClassifiers/classifier3"),
					Properties: &armsql.WorkloadClassifierProperties{
						Context:    to.Ptr(""),
						EndTime:    to.Ptr(""),
						Importance: to.Ptr("high"),
						Label:      to.Ptr(""),
						MemberName: to.Ptr("dbo"),
						StartTime:  to.Ptr(""),
					},
				},
				{
					Name: to.Ptr("classifier1"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/workloadGroups/workloadClassifiers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/workloadGroups/wlm_workloadgroup/workloadClassifiers/classifier1"),
					Properties: &armsql.WorkloadClassifierProperties{
						Context:    to.Ptr("test_context"),
						EndTime:    to.Ptr("14:00"),
						Importance: to.Ptr("high"),
						Label:      to.Ptr("test_label"),
						MemberName: to.Ptr("dbo"),
						StartTime:  to.Ptr("12:00"),
					},
				},
				{
					Name: to.Ptr("classifier2"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/workloadGroups/workloadClassifiers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/workloadGroups/wlm_workloadgroup/workloadClassifiers/classifier2"),
					Properties: &armsql.WorkloadClassifierProperties{
						Context:    to.Ptr(""),
						EndTime:    to.Ptr("17:00"),
						Importance: to.Ptr("high"),
						Label:      to.Ptr(""),
						MemberName: to.Ptr("dbo"),
						StartTime:  to.Ptr("11:00"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkloadClassifierListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkloadClassifierListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetWorkloadClassifierList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadGroups_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetWorkloadGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a workload group for a data warehouse"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewWorkloadGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"smallrc",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetWorkloadGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.WorkloadGroup{
			Name: to.Ptr("smallrc"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/workloadGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/workloadGroups/smallrc"),
			Properties: &armsql.WorkloadGroupProperties{
				Importance:                   to.Ptr("normal"),
				MaxResourcePercent:           to.Ptr[int32](100),
				MaxResourcePercentPerRequest: to.Ptr[float64](3),
				MinResourcePercent:           to.Ptr[int32](0),
				MinResourcePercentPerRequest: to.Ptr[float64](3),
				QueryExecutionTimeout:        to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetWorkloadGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadGroupMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a workload group with all properties specified."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewWorkloadGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"smallrc",
		armsql.WorkloadGroup{
			Properties: &armsql.WorkloadGroupProperties{
				Importance:                   to.Ptr("normal"),
				MaxResourcePercent:           to.Ptr[int32](100),
				MaxResourcePercentPerRequest: to.Ptr[float64](3),
				MinResourcePercent:           to.Ptr[int32](0),
				MinResourcePercentPerRequest: to.Ptr[float64](3),
				QueryExecutionTimeout:        to.Ptr[int32](0),
			},
		},
		&armsql.WorkloadGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadGroupMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadGroupMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.WorkloadGroup{
			Name: to.Ptr("smallrc"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/workloadGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/workloadGroups/smallrc"),
			Properties: &armsql.WorkloadGroupProperties{
				Importance:                   to.Ptr("normal"),
				MaxResourcePercent:           to.Ptr[int32](100),
				MaxResourcePercentPerRequest: to.Ptr[float64](3),
				MinResourcePercent:           to.Ptr[int32](0),
				MinResourcePercentPerRequest: to.Ptr[float64](3),
				QueryExecutionTimeout:        to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadGroupMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadGroupMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a workload group with the required properties specified."},
	})
	client = armsql.NewWorkloadGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"smallrc",
		armsql.WorkloadGroup{
			Properties: &armsql.WorkloadGroupProperties{
				MaxResourcePercent:           to.Ptr[int32](100),
				MinResourcePercent:           to.Ptr[int32](0),
				MinResourcePercentPerRequest: to.Ptr[float64](3),
			},
		},
		&armsql.WorkloadGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadGroupMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadGroupMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.WorkloadGroup{
			Name: to.Ptr("smallrc"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/workloadGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/workloadGroups/smallrc"),
			Properties: &armsql.WorkloadGroupProperties{
				Importance:                   to.Ptr("normal"),
				MaxResourcePercent:           to.Ptr[int32](100),
				MaxResourcePercentPerRequest: to.Ptr[float64](3),
				MinResourcePercent:           to.Ptr[int32](0),
				MinResourcePercentPerRequest: to.Ptr[float64](3),
				QueryExecutionTimeout:        to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateWorkloadGroupMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkloadGroups_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteWorkloadGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a workload group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewWorkloadGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"wlm_workloadgroup",
		&armsql.WorkloadGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteWorkloadGroup.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DeleteWorkloadGroup.json: %v", err)
	}
}

func TestWorkloadGroups_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetWorkloadGroupList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the list of workload groups for a data warehouse"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewWorkloadGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetWorkloadGroupList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.WorkloadGroupListResult{
			Value: []*armsql.WorkloadGroup{
				{
					Name: to.Ptr("smallrc"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/workloadGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/workloadGroups/smallrc"),
					Properties: &armsql.WorkloadGroupProperties{
						Importance:                   to.Ptr("normal"),
						MaxResourcePercent:           to.Ptr[int32](100),
						MaxResourcePercentPerRequest: to.Ptr[float64](5),
						MinResourcePercent:           to.Ptr[int32](0),
						MinResourcePercentPerRequest: to.Ptr[float64](5),
						QueryExecutionTimeout:        to.Ptr[int32](0),
					},
				},
				{
					Name: to.Ptr("mediumrc"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/workloadGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/workloadGroups/mediumrc"),
					Properties: &armsql.WorkloadGroupProperties{
						Importance:                   to.Ptr("normal"),
						MaxResourcePercent:           to.Ptr[int32](100),
						MaxResourcePercentPerRequest: to.Ptr[float64](10),
						MinResourcePercent:           to.Ptr[int32](0),
						MinResourcePercentPerRequest: to.Ptr[float64](10),
						QueryExecutionTimeout:        to.Ptr[int32](0),
					},
				},
				{
					Name: to.Ptr("largerc"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/workloadGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/workloadGroups/largerc"),
					Properties: &armsql.WorkloadGroupProperties{
						Importance:                   to.Ptr("high"),
						MaxResourcePercent:           to.Ptr[int32](100),
						MaxResourcePercentPerRequest: to.Ptr[float64](20),
						MinResourcePercent:           to.Ptr[int32](0),
						MinResourcePercentPerRequest: to.Ptr[float64](20),
						QueryExecutionTimeout:        to.Ptr[int32](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkloadGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkloadGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/GetWorkloadGroupList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransparentDataEncryptions_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/TransparentDataEncryptionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a database's transparent data encryption"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewTransparentDataEncryptionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"security-tde-resourcegroup",
		"securitytde",
		"testdb",
		armsql.TransparentDataEncryptionNameCurrent,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/TransparentDataEncryptionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.LogicalDatabaseTransparentDataEncryption{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/transparentDataEncryption"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/security-tde-resourcegroup/providers/Microsoft.Sql/servers/securitytde/databases/testdb"),
			Properties: &armsql.TransparentDataEncryptionProperties{
				State: to.Ptr(armsql.TransparentDataEncryptionStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LogicalDatabaseTransparentDataEncryption) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LogicalDatabaseTransparentDataEncryption)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/TransparentDataEncryptionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransparentDataEncryptions_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/TransparentDataEncryptionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a database's Transparent Data Encryption state with minimal parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewTransparentDataEncryptionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"securitytde-42-rg",
		"securitytde-42",
		"testdb",
		armsql.TransparentDataEncryptionNameCurrent,
		armsql.LogicalDatabaseTransparentDataEncryption{
			Properties: &armsql.TransparentDataEncryptionProperties{
				State: to.Ptr(armsql.TransparentDataEncryptionStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/TransparentDataEncryptionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.LogicalDatabaseTransparentDataEncryption{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/transparentDataEncryption"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securitytde-42-rg/providers/Microsoft.Sql/servers/securitytde-42/databases/testdb/transparentDataEncryption"),
			Properties: &armsql.TransparentDataEncryptionProperties{
				State: to.Ptr(armsql.TransparentDataEncryptionStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LogicalDatabaseTransparentDataEncryption) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LogicalDatabaseTransparentDataEncryption)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/TransparentDataEncryptionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransparentDataEncryptions_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/TransparentDataEncryptionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of the database's transparent data encryption"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewTransparentDataEncryptionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("security-tde-resourcegroup",
		"securitytde",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/TransparentDataEncryptionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.LogicalDatabaseTransparentDataEncryptionListResult{
			Value: []*armsql.LogicalDatabaseTransparentDataEncryption{
				{
					Name: to.Ptr("current"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/transparentDataEncryption"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/security-tde-resourcegroup/providers/Microsoft.Sql/servers/securitytde/databases/testdb"),
					Properties: &armsql.TransparentDataEncryptionProperties{
						State: to.Ptr(armsql.TransparentDataEncryptionStateEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LogicalDatabaseTransparentDataEncryptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LogicalDatabaseTransparentDataEncryptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/TransparentDataEncryptionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupShortTermRetentionPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/GetShortTermRetentionPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the short term retention policy for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewBackupShortTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsql.ShortTermRetentionPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/GetShortTermRetentionPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.BackupShortTermRetentionPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/backupShortTermRetentionPolicies/default"),
			Properties: &armsql.BackupShortTermRetentionPolicyProperties{
				DiffBackupIntervalInHours: to.Ptr(armsql.DiffBackupIntervalInHours(24)),
				RetentionDays:             to.Ptr[int32](7),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupShortTermRetentionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupShortTermRetentionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/GetShortTermRetentionPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupShortTermRetentionPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/UpdateShortTermRetentionPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the short term retention policy for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewBackupShortTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup",
		"testsvr",
		"testdb",
		armsql.ShortTermRetentionPolicyNameDefault,
		armsql.BackupShortTermRetentionPolicy{
			Properties: &armsql.BackupShortTermRetentionPolicyProperties{
				DiffBackupIntervalInHours: to.Ptr(armsql.DiffBackupIntervalInHours(24)),
				RetentionDays:             to.Ptr[int32](7),
			},
		},
		&armsql.BackupShortTermRetentionPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/UpdateShortTermRetentionPolicy.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/UpdateShortTermRetentionPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.BackupShortTermRetentionPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/resourceGroups/resourceGroup/servers/testsvr/databases/testdb/backupShortTermRetentionPolicies/default"),
			Properties: &armsql.BackupShortTermRetentionPolicyProperties{
				DiffBackupIntervalInHours: to.Ptr(armsql.DiffBackupIntervalInHours(24)),
				RetentionDays:             to.Ptr[int32](7),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupShortTermRetentionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupShortTermRetentionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/UpdateShortTermRetentionPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupShortTermRetentionPolicies_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/UpdateShortTermRetentionPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the short term retention policy for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewBackupShortTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"resourceGroup",
		"testsvr",
		"testdb",
		armsql.ShortTermRetentionPolicyNameDefault,
		armsql.BackupShortTermRetentionPolicy{
			Properties: &armsql.BackupShortTermRetentionPolicyProperties{
				DiffBackupIntervalInHours: to.Ptr(armsql.DiffBackupIntervalInHours(24)),
				RetentionDays:             to.Ptr[int32](7),
			},
		},
		&armsql.BackupShortTermRetentionPoliciesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/UpdateShortTermRetentionPolicy.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/UpdateShortTermRetentionPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.BackupShortTermRetentionPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/resourceGroups/resourceGroup/servers/testsvr/databases/testdb/backupShortTermRetentionPolicies/default"),
			Properties: &armsql.BackupShortTermRetentionPolicyProperties{
				DiffBackupIntervalInHours: to.Ptr(armsql.DiffBackupIntervalInHours(24)),
				RetentionDays:             to.Ptr[int32](7),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupShortTermRetentionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupShortTermRetentionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/UpdateShortTermRetentionPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupShortTermRetentionPolicies_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListShortTermRetentionPoliciesByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the short term retention policy for the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewBackupShortTermRetentionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListShortTermRetentionPoliciesByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.BackupShortTermRetentionPolicyListResult{
			Value: []*armsql.BackupShortTermRetentionPolicy{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/backupShortTermRetentionPolicies/default"),
					Properties: &armsql.BackupShortTermRetentionPolicyProperties{
						DiffBackupIntervalInHours: to.Ptr(armsql.DiffBackupIntervalInHours(24)),
						RetentionDays:             to.Ptr[int32](7),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BackupShortTermRetentionPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BackupShortTermRetentionPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListShortTermRetentionPoliciesByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseExtensions_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/GetDatabaseExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get database extensions."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseExtensionsClient("a3473687-7581-41e1-ac24-6bcca5843f07", cred, &options)
	_, err := client.Get(ctx,
		"rg_a1f9d6f8-30d5-4228-9504-8a364361bca3",
		"srv_65858e0f-b1d1-4bdc-8351-a7da86ca4939",
		"11aa6c5e-58ed-4693-b303-3b8e3131deaa",
		"polybaseimport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/GetDatabaseExtensions.json: %v", err)
	}
}

func TestDatabaseExtensions_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CreateOrUpdateDatabaseExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update database extensions."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseExtensionsClient("a1c0814d-3c18-4e1e-a247-c128c12b1677", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg_20cbe0f0-c2d9-4522-9177-5469aad53029",
		"srv_1ffd1cf8-9951-47fb-807d-a9c384763849",
		"878e303f-1ea0-4f17-aa3d-a22ac5e9da08",
		"polybaseimport",
		armsql.DatabaseExtensions{
			Properties: &armsql.DatabaseExtensionsProperties{
				OperationMode:  to.Ptr(armsql.OperationModePolybaseImport),
				StorageKey:     to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
				StorageKeyType: to.Ptr(armsql.StorageKeyTypeStorageAccessKey),
				StorageURI:     to.Ptr("https://teststorage.blob.core.windows.net/testcontainer/Manifest.xml"),
			},
		},
		&armsql.DatabaseExtensionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CreateOrUpdateDatabaseExtensions.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CreateOrUpdateDatabaseExtensions.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ImportExportExtensionsOperationResult{
			Name: to.Ptr("10000000-0000-0000-0000-000000000002"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/extensions"),
			ID:   to.Ptr("10000000-0000-0000-0000-000000000002"),
			Properties: &armsql.ImportExportExtensionsOperationResultProperties{
				DatabaseName:     to.Ptr("878e303f-1ea0-4f17-aa3d-a22ac5e9da08"),
				LastModifiedTime: to.Ptr("lastModifiedTime"),
				RequestID:        to.Ptr("10000000-0000-0000-0000-000000000002"),
				RequestType:      to.Ptr("PolybaseImport"),
				ServerName:       to.Ptr("srv_1ffd1cf8-9951-47fb-807d-a9c384763849"),
				Status:           to.Ptr("succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImportExportExtensionsOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImportExportExtensionsOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CreateOrUpdateDatabaseExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseExtensions_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListDatabaseExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List database extensions."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseExtensionsClient("7b2515fe-f230-4017-8cf0-695163acab85", cred, &options)
	pager := client.ListByDatabase("rg_4007c5a9-b3b0-41e1-bd46-9eef38768a4a",
		"srv_3b67ec2a-519b-43a7-8533-fb62dce3431e",
		"719d8fa4-bf0f-48fc-8cd3-ef40fe6ba1fe",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListDatabaseExtensions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ImportExportExtensionsOperationListResult{
			Value: []*armsql.ImportExportExtensionsOperationResult{},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ImportExportExtensionsOperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ImportExportExtensionsOperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListDatabaseExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseOperations_Cancel(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CancelDatabaseOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cancel the database management operation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseOperationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Cancel(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-6661",
		"testdb",
		"f779414b-e748-4925-8cfe-c8598f7660ae",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CancelDatabaseOperation.json: %v", err)
	}
}

func TestDatabaseOperations_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListDatabaseOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the database management operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseOperationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListDatabaseOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseOperationListResult{
			Value: []*armsql.DatabaseOperation{
				{
					Name: to.Ptr("11111111-1111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/operations"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/databases/testdb/operations/11111111-1111-1111-1111-111111111111"),
					Properties: &armsql.DatabaseOperationProperties{
						DatabaseName:          to.Ptr("testdb"),
						Operation:             to.Ptr("UpdateLogicalDatabase"),
						OperationFriendlyName: to.Ptr("ALTER DATABASE"),
						PercentComplete:       to.Ptr[int32](100),
						ServerName:            to.Ptr("sqlcrudtest-4645"),
						StartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T09:10:08.1Z"); return t }()),
						State:                 to.Ptr(armsql.ManagementOperationStateSucceeded),
					},
				},
				{
					Name: to.Ptr("55555555-5555-5555-5555-555555555555"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/operations"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/databases/testdb/operations/55555555-5555-5555-5555-555555555555"),
					Properties: &armsql.DatabaseOperationProperties{
						DatabaseName:          to.Ptr("testdb"),
						Operation:             to.Ptr("UpdateLogicalDatabase"),
						OperationFriendlyName: to.Ptr("ALTER DATABASE"),
						PercentComplete:       to.Ptr[int32](19),
						ServerName:            to.Ptr("sqlcrudtest-4645"),
						StartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T10:10:08.1Z"); return t }()),
						State:                 to.Ptr(armsql.ManagementOperationStateInProgress),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseOperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseOperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListDatabaseOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseUsages_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/GetDatabaseUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets database usages."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDatabaseUsagesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/GetDatabaseUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DatabaseUsageListResult{
			Value: []*armsql.DatabaseUsage{
				{
					Name: to.Ptr("database_size"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/usages"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/usages/database_size"),
					Properties: &armsql.DatabaseUsageProperties{
						CurrentValue: to.Ptr[float64](4194304),
						DisplayName:  to.Ptr("Database Size"),
						Limit:        to.Ptr[float64](268435456000),
						Unit:         to.Ptr("Bytes"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseUsageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseUsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/GetDatabaseUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLedgerDigestUploads_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/LedgerDigestUploadsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the current ledger digest upload configuration for a database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLedgerDigestUploadsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"ledgertestrg",
		"ledgertestserver",
		"testdb",
		armsql.LedgerDigestUploadsNameCurrent,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/LedgerDigestUploadsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.LedgerDigestUploads{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/ledgerDigestUploads"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/ledgertestrg/providers/Microsoft.Sql/servers/ledgertestserver/databases/testdb/current"),
			Properties: &armsql.LedgerDigestUploadsProperties{
				DigestStorageEndpoint: to.Ptr("https://mystorage.blob.core.windows.net"),
				State:                 to.Ptr(armsql.LedgerDigestUploadsStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LedgerDigestUploads) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LedgerDigestUploads)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/LedgerDigestUploadsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLedgerDigestUploads_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/LedgerDigestUploadsEnable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enables ledger digest upload configuration for a database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLedgerDigestUploadsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"ledgertestrg",
		"ledgertestserver",
		"testdb",
		armsql.LedgerDigestUploadsNameCurrent,
		armsql.LedgerDigestUploads{
			Properties: &armsql.LedgerDigestUploadsProperties{
				DigestStorageEndpoint: to.Ptr("https://MyAccount.blob.core.windows.net"),
			},
		},
		&armsql.LedgerDigestUploadsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/LedgerDigestUploadsEnable.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/LedgerDigestUploadsEnable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.LedgerDigestUploads{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/ledgerDigestUploads"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/ledgertestrg/providers/Microsoft.Sql/servers/ledgertestserver/databases/testdb/ledgerDigestUpload/current"),
			Properties: &armsql.LedgerDigestUploadsProperties{
				DigestStorageEndpoint: to.Ptr("https://mystorage.blob.core.windows.net"),
				State:                 to.Ptr(armsql.LedgerDigestUploadsStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LedgerDigestUploads) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LedgerDigestUploads)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/LedgerDigestUploadsEnable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLedgerDigestUploads_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/LedgerDigestUploadsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of ledger digest upload settings on a database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLedgerDigestUploadsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("ledgertestrg",
		"ledgertestserver",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/LedgerDigestUploadsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.LedgerDigestUploadsListResult{
			Value: []*armsql.LedgerDigestUploads{
				{
					Name: to.Ptr("current"),
					Type: to.Ptr("Microsoft.Sql/servers/databases/ledgerDigestUploads"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/ledgertestrg/providers/Microsoft.Sql/servers/ledgertestserver/databases/testdb/current"),
					Properties: &armsql.LedgerDigestUploadsProperties{
						DigestStorageEndpoint: to.Ptr("https://mystorage.blob.core.windows.net"),
						State:                 to.Ptr(armsql.LedgerDigestUploadsStateEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LedgerDigestUploadsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LedgerDigestUploadsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/LedgerDigestUploadsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLedgerDigestUploads_Disable(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/LedgerDigestUploadsDisable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disables uploading ledger digests for a database"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLedgerDigestUploadsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDisable(ctx,
		"ledgertestrg",
		"ledgertestserver",
		"testdb",
		armsql.LedgerDigestUploadsNameCurrent,
		&armsql.LedgerDigestUploadsClientBeginDisableOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/LedgerDigestUploadsDisable.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/LedgerDigestUploadsDisable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.LedgerDigestUploads{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/ledgerDigestUploads"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/ledgertestrg/providers/Microsoft.Sql/servers/ledgertestserver/databases/testdb/ledgerDigestUpload/current/disable"),
			Properties: &armsql.LedgerDigestUploadsProperties{
				State: to.Ptr(armsql.LedgerDigestUploadsStateDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LedgerDigestUploads) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LedgerDigestUploads)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/LedgerDigestUploadsDisable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOutboundFirewallRules_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/OutboundFirewallRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets outbound firewall rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewOutboundFirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"server.database.windows.net",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/OutboundFirewallRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.OutboundFirewallRule{
			Name: to.Ptr("server.database.windows.net"),
			Type: to.Ptr("Microsoft.Sql/servers/outboundFirewallRules"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/outboundFirewallRules/server.datbase.windows.net"),
			Properties: &armsql.OutboundFirewallRuleProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OutboundFirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OutboundFirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/OutboundFirewallRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOutboundFirewallRules_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/OutboundFirewallRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve or reject a outbound firewall rule with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewOutboundFirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"server.database.windows.net",
		armsql.OutboundFirewallRule{},
		&armsql.OutboundFirewallRulesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/OutboundFirewallRuleCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/OutboundFirewallRuleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.OutboundFirewallRule{
			Name: to.Ptr("server.database.windows.net"),
			Type: to.Ptr("Microsoft.Sql/servers/outboundFirewallRules"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/outboundFirewallRules/server.datbase.windows.net"),
			Properties: &armsql.OutboundFirewallRuleProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OutboundFirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OutboundFirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/OutboundFirewallRuleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOutboundFirewallRules_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/OutboundFirewallRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a outbound firewall rule with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewOutboundFirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-6661",
		"server.database.windows.net",
		&armsql.OutboundFirewallRulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/OutboundFirewallRuleDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/OutboundFirewallRuleDelete.json: %v", err)
	}
}

func TestOutboundFirewallRules_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/OutboundFirewallRuleList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of outbound firewall rules on a server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewOutboundFirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/OutboundFirewallRuleList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.OutboundFirewallRuleListResult{
			Value: []*armsql.OutboundFirewallRule{
				{
					Name: to.Ptr("server.database.windows.net"),
					Type: to.Ptr("Microsoft.Sql/servers/outboundFirewallRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/outboundFirewallRules/server.datbase.windows.net"),
					Properties: &armsql.OutboundFirewallRuleProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name: to.Ptr("storage.blob.windows.net"),
					Type: to.Ptr("Microsoft.Sql/servers/outboundFirewallRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/outboundFirewallRules/storage.blob.windows.net"),
					Properties: &armsql.OutboundFirewallRuleProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OutboundFirewallRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OutboundFirewallRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/OutboundFirewallRuleList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_ListByResourceGroup(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List servers by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroup("sqlcrudtest-7398",
		&armsql.ServersClientListByResourceGroupOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerListResult{
			Value: []*armsql.Server{
				{
					Name:     to.Ptr("sqlcrudtest-4645"),
					Type:     to.Ptr("Microsoft.Sql/servers"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645"),
					Location: to.Ptr("japaneast"),
					Kind:     to.Ptr("v12.0"),
					Properties: &armsql.ServerProperties{
						AdministratorLogin:       to.Ptr("dummylogin"),
						FullyQualifiedDomainName: to.Ptr("sqlcrudtest-4645.database.windows.net"),
						PrivateEndpointConnections: []*armsql.ServerPrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
								Properties: &armsql.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armsql.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
										Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
									},
									ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
								},
							}},
						PublicNetworkAccess:           to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						RestrictOutboundNetworkAccess: to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						State:                         to.Ptr("Ready"),
						Version:                       to.Ptr("12.0"),
						WorkspaceFeature:              to.Ptr(armsql.ServerWorkspaceFeatureConnected),
					},
				},
				{
					Name:     to.Ptr("sqlcrudtest-6661"),
					Type:     to.Ptr("Microsoft.Sql/servers"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-6661"),
					Location: to.Ptr("japaneast"),
					Kind:     to.Ptr("v12.0"),
					Properties: &armsql.ServerProperties{
						AdministratorLogin:       to.Ptr("dummylogin"),
						FullyQualifiedDomainName: to.Ptr("sqlcrudtest-6661.database.windows.net"),
						PrivateEndpointConnections: []*armsql.ServerPrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
								Properties: &armsql.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armsql.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
										Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
									},
									ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
								},
							}},
						PublicNetworkAccess:           to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						RestrictOutboundNetworkAccess: to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						State:                         to.Ptr("Ready"),
						Version:                       to.Ptr("12.0"),
						WorkspaceFeature:              to.Ptr(armsql.ServerWorkspaceFeatureConnected),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerListByResourceGroupWithExpandEqualsAdministrators.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List servers by resource group with $expand=administrators"},
	})
	client = armsql.NewServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager = client.ListByResourceGroup("sqlcrudtest-7398",
		&armsql.ServersClientListByResourceGroupOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerListByResourceGroupWithExpandEqualsAdministrators.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerListResult{
			Value: []*armsql.Server{
				{
					Name:     to.Ptr("sqlcrudtest-4645"),
					Type:     to.Ptr("Microsoft.Sql/servers"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645"),
					Location: to.Ptr("japaneast"),
					Kind:     to.Ptr("v12.0"),
					Properties: &armsql.ServerProperties{
						AdministratorLogin: to.Ptr("dummylogin"),
						Administrators: &armsql.ServerExternalAdministrator{
							AzureADOnlyAuthentication: to.Ptr(true),
							Login:                     to.Ptr("bob@contoso.com"),
							PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
							Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
							TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
						},
						FullyQualifiedDomainName: to.Ptr("sqlcrudtest-4645.database.windows.net"),
						PrivateEndpointConnections: []*armsql.ServerPrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
								Properties: &armsql.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armsql.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
										Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
									},
									ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
								},
							}},
						PublicNetworkAccess:           to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						RestrictOutboundNetworkAccess: to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						State:                         to.Ptr("Ready"),
						Version:                       to.Ptr("12.0"),
						WorkspaceFeature:              to.Ptr(armsql.ServerWorkspaceFeatureConnected),
					},
				},
				{
					Name:     to.Ptr("sqlcrudtest-6661"),
					Type:     to.Ptr("Microsoft.Sql/servers"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-6661"),
					Location: to.Ptr("japaneast"),
					Kind:     to.Ptr("v12.0"),
					Properties: &armsql.ServerProperties{
						AdministratorLogin: to.Ptr("dummylogin"),
						Administrators: &armsql.ServerExternalAdministrator{
							AzureADOnlyAuthentication: to.Ptr(true),
							Login:                     to.Ptr("bob@contoso.com"),
							PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
							Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
							TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
						},
						FullyQualifiedDomainName: to.Ptr("sqlcrudtest-6661.database.windows.net"),
						PrivateEndpointConnections: []*armsql.ServerPrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
								Properties: &armsql.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armsql.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
										Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
									},
									ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
								},
							}},
						PublicNetworkAccess:           to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						RestrictOutboundNetworkAccess: to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						State:                         to.Ptr("Ready"),
						Version:                       to.Ptr("12.0"),
						WorkspaceFeature:              to.Ptr(armsql.ServerWorkspaceFeatureConnected),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerListByResourceGroupWithExpandEqualsAdministrators.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&armsql.ServersClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Server{
			Name:     to.Ptr("sqlcrudtest-4645"),
			Type:     to.Ptr("Microsoft.Sql/servers"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645"),
			Location: to.Ptr("japaneast"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Kind: to.Ptr("v12.0"),
			Properties: &armsql.ServerProperties{
				AdministratorLogin:       to.Ptr("dummylogin"),
				FullyQualifiedDomainName: to.Ptr("sqlcrudtest-4645.database.windows.net"),
				PrivateEndpointConnections: []*armsql.ServerPrivateEndpointConnection{
					{
						ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
						Properties: &armsql.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armsql.PrivateEndpointProperty{
								ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
							},
							PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
								Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
							},
							ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
						},
					}},
				PublicNetworkAccess:           to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
				RestrictOutboundNetworkAccess: to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
				State:                         to.Ptr("Ready"),
				Version:                       to.Ptr("12.0"),
				WorkspaceFeature:              to.Ptr(armsql.ServerWorkspaceFeatureConnected),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerGetWithExpandEqualsAdministrators.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get server with $expand=administrators"},
	})
	client = armsql.NewServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&armsql.ServersClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerGetWithExpandEqualsAdministrators.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Server{
			Name:     to.Ptr("sqlcrudtest-4645"),
			Type:     to.Ptr("Microsoft.Sql/servers"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645"),
			Location: to.Ptr("japaneast"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Kind: to.Ptr("v12.0"),
			Properties: &armsql.ServerProperties{
				AdministratorLogin: to.Ptr("dummylogin"),
				Administrators: &armsql.ServerExternalAdministrator{
					AzureADOnlyAuthentication: to.Ptr(true),
					Login:                     to.Ptr("bob@contoso.com"),
					PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
					Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
					TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
				},
				FullyQualifiedDomainName: to.Ptr("sqlcrudtest-4645.database.windows.net"),
				PrivateEndpointConnections: []*armsql.ServerPrivateEndpointConnection{
					{
						ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
						Properties: &armsql.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armsql.PrivateEndpointProperty{
								ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
							},
							PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
								Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
							},
							ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
						},
					}},
				PublicNetworkAccess:           to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
				RestrictOutboundNetworkAccess: to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
				State:                         to.Ptr("Ready"),
				Version:                       to.Ptr("12.0"),
				WorkspaceFeature:              to.Ptr(armsql.ServerWorkspaceFeatureConnected),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerGetWithExpandEqualsAdministrators.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		armsql.Server{
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ServerProperties{
				AdministratorLogin:         to.Ptr("dummylogin"),
				AdministratorLoginPassword: to.Ptr("PLACEHOLDER"),
				Administrators: &armsql.ServerExternalAdministrator{
					AzureADOnlyAuthentication: to.Ptr(true),
					Login:                     to.Ptr("bob@contoso.com"),
					PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
					Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
					TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
				},
				PublicNetworkAccess:           to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
				RestrictOutboundNetworkAccess: to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
			},
		},
		&armsql.ServersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Server{
			Name:     to.Ptr("sqlcrudtest-4645"),
			Type:     to.Ptr("Microsoft.Sql/servers"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645"),
			Location: to.Ptr("japaneast"),
			Kind:     to.Ptr("v12.0"),
			Properties: &armsql.ServerProperties{
				AdministratorLogin: to.Ptr("dummylogin"),
				Administrators: &armsql.ServerExternalAdministrator{
					AzureADOnlyAuthentication: to.Ptr(true),
					Login:                     to.Ptr("bob@contoso.com"),
					PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
					Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
					TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
				},
				FullyQualifiedDomainName: to.Ptr("sqlcrudtest-4645.database.windows.net"),
				PrivateEndpointConnections: []*armsql.ServerPrivateEndpointConnection{
					{
						ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
						Properties: &armsql.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armsql.PrivateEndpointProperty{
								ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
							},
							PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
								Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
							},
							ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
						},
					}},
				PublicNetworkAccess:           to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
				RestrictOutboundNetworkAccess: to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
				State:                         to.Ptr("Ready"),
				Version:                       to.Ptr("12.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-6661",
		&armsql.ServersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerDelete.json: %v", err)
	}
}

func TestServers_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		armsql.ServerUpdate{
			Properties: &armsql.ServerProperties{
				AdministratorLogin:            to.Ptr("dummylogin"),
				AdministratorLoginPassword:    to.Ptr("placeholder"),
				PublicNetworkAccess:           to.Ptr(armsql.ServerNetworkAccessFlagDisabled),
				RestrictOutboundNetworkAccess: to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
			},
		},
		&armsql.ServersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.Server{
			Name:     to.Ptr("sqlcrudtest-4645"),
			Type:     to.Ptr("Microsoft.Sql/servers"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645"),
			Location: to.Ptr("japaneast"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Kind: to.Ptr("v12.0"),
			Properties: &armsql.ServerProperties{
				AdministratorLogin:       to.Ptr("dummylogin"),
				FullyQualifiedDomainName: to.Ptr("sqlcrudtest-4645.database.windows.net"),
				PrivateEndpointConnections: []*armsql.ServerPrivateEndpointConnection{
					{
						ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
						Properties: &armsql.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armsql.PrivateEndpointProperty{
								ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
							},
							PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
								Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
							},
							ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
						},
					}},
				PublicNetworkAccess:           to.Ptr(armsql.ServerNetworkAccessFlagDisabled),
				RestrictOutboundNetworkAccess: to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
				State:                         to.Ptr("Ready"),
				Version:                       to.Ptr("12.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_List(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List servers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List(&armsql.ServersClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerListResult{
			Value: []*armsql.Server{
				{
					Name:     to.Ptr("sqlcrudtest-4645"),
					Type:     to.Ptr("Microsoft.Sql/servers"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645"),
					Location: to.Ptr("japaneast"),
					Kind:     to.Ptr("v12.0"),
					Properties: &armsql.ServerProperties{
						AdministratorLogin:       to.Ptr("dummylogin"),
						FullyQualifiedDomainName: to.Ptr("sqlcrudtest-4645.database.windows.net"),
						PrivateEndpointConnections: []*armsql.ServerPrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
								Properties: &armsql.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armsql.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
										Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
									},
									ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
								},
							}},
						PublicNetworkAccess:           to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						RestrictOutboundNetworkAccess: to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						State:                         to.Ptr("Ready"),
						Version:                       to.Ptr("12.0"),
						WorkspaceFeature:              to.Ptr(armsql.ServerWorkspaceFeatureConnected),
					},
				},
				{
					Name:     to.Ptr("sqlcrudtest-6661"),
					Type:     to.Ptr("Microsoft.Sql/servers"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-6661"),
					Location: to.Ptr("japaneast"),
					Kind:     to.Ptr("v12.0"),
					Properties: &armsql.ServerProperties{
						AdministratorLogin:       to.Ptr("dummylogin"),
						FullyQualifiedDomainName: to.Ptr("sqlcrudtest-6661.database.windows.net"),
						PrivateEndpointConnections: []*armsql.ServerPrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
								Properties: &armsql.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armsql.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
										Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
									},
									ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
								},
							}},
						PublicNetworkAccess:           to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						RestrictOutboundNetworkAccess: to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						State:                         to.Ptr("Ready"),
						Version:                       to.Ptr("12.0"),
						WorkspaceFeature:              to.Ptr(armsql.ServerWorkspaceFeatureConnected),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerListWithExpandEqualsAdministrators.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List servers with expand equals administrators"},
	})
	client = armsql.NewServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager = client.List(&armsql.ServersClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerListWithExpandEqualsAdministrators.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerListResult{
			Value: []*armsql.Server{
				{
					Name:     to.Ptr("sqlcrudtest-4645"),
					Type:     to.Ptr("Microsoft.Sql/servers"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645"),
					Location: to.Ptr("japaneast"),
					Kind:     to.Ptr("v12.0"),
					Properties: &armsql.ServerProperties{
						AdministratorLogin: to.Ptr("dummylogin"),
						Administrators: &armsql.ServerExternalAdministrator{
							AzureADOnlyAuthentication: to.Ptr(true),
							Login:                     to.Ptr("bob@contoso.com"),
							PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
							Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
							TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
						},
						FullyQualifiedDomainName: to.Ptr("sqlcrudtest-4645.database.windows.net"),
						PrivateEndpointConnections: []*armsql.ServerPrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
								Properties: &armsql.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armsql.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
										Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
									},
									ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
								},
							}},
						PublicNetworkAccess:           to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						RestrictOutboundNetworkAccess: to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						State:                         to.Ptr("Ready"),
						Version:                       to.Ptr("12.0"),
						WorkspaceFeature:              to.Ptr(armsql.ServerWorkspaceFeatureConnected),
					},
				},
				{
					Name:     to.Ptr("sqlcrudtest-6661"),
					Type:     to.Ptr("Microsoft.Sql/servers"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-6661"),
					Location: to.Ptr("japaneast"),
					Kind:     to.Ptr("v12.0"),
					Properties: &armsql.ServerProperties{
						AdministratorLogin: to.Ptr("dummylogin"),
						Administrators: &armsql.ServerExternalAdministrator{
							AzureADOnlyAuthentication: to.Ptr(true),
							Login:                     to.Ptr("bob@contoso.com"),
							PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
							Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
							TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
						},
						FullyQualifiedDomainName: to.Ptr("sqlcrudtest-6661.database.windows.net"),
						PrivateEndpointConnections: []*armsql.ServerPrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
								Properties: &armsql.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armsql.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr(armsql.PrivateLinkServiceConnectionStateActionsRequireNone),
										Status:          to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
									},
									ProvisioningState: to.Ptr(armsql.PrivateEndpointProvisioningState("Succeeded")),
								},
							}},
						PublicNetworkAccess:           to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						RestrictOutboundNetworkAccess: to.Ptr(armsql.ServerNetworkAccessFlagEnabled),
						State:                         to.Ptr("Ready"),
						Version:                       to.Ptr("12.0"),
						WorkspaceFeature:              to.Ptr(armsql.ServerWorkspaceFeatureConnected),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ServerListWithExpandEqualsAdministrators.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_ImportDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ImportNewDatabaseWithNetworkIsolation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Imports to a new database, using private link for the SQL server and storage account."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginImportDatabase(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		armsql.ImportNewDatabaseDefinition{
			AdministratorLogin:         to.Ptr("login"),
			AdministratorLoginPassword: to.Ptr("password"),
			AuthenticationType:         to.Ptr("Sql"),
			DatabaseName:               to.Ptr("testdb"),
			NetworkIsolation: &armsql.NetworkIsolationSettings{
				SQLServerResourceID:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr"),
				StorageAccountResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink"),
			},
			StorageKey:     to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=="),
			StorageKeyType: to.Ptr(armsql.StorageKeyTypeStorageAccessKey),
			StorageURI:     to.Ptr("https://test.blob.core.windows.net/test.bacpac"),
		},
		&armsql.ServersClientBeginImportDatabaseOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ImportNewDatabaseWithNetworkIsolation.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ImportNewDatabaseWithNetworkIsolation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ImportExportOperationResult{
			Name: to.Ptr("9d9a794a-5cec-4f23-af70-d29511b522a4"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/importExportOperationResults"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/importExportOperationResults/9d9a794a-5cec-4f23-af70-d29511b522a4"),
			Properties: &armsql.ImportExportOperationResultProperties{
				BlobURI:          to.Ptr("https://test.blob.core.windows.net/test.bacpac"),
				DatabaseName:     to.Ptr("testdb"),
				LastModifiedTime: to.Ptr("2/2/2020 8:34:47 PM"),
				QueuedTime:       to.Ptr("2/2/2020 8:33:27 PM"),
				RequestID:        to.Ptr("9d9a794a-5cec-4f23-af70-d29511b522a4"),
				RequestType:      to.Ptr("Import"),
				ServerName:       to.Ptr("testsvr.database.windows.net"),
				Status:           to.Ptr("Completed"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImportExportOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImportExportOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ImportNewDatabaseWithNetworkIsolation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ImportNewDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Imports to a new database."},
	})
	client = armsql.NewServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginImportDatabase(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		armsql.ImportNewDatabaseDefinition{
			AdministratorLogin:         to.Ptr("login"),
			AdministratorLoginPassword: to.Ptr("password"),
			AuthenticationType:         to.Ptr("Sql"),
			DatabaseName:               to.Ptr("testdb"),
			StorageKey:                 to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=="),
			StorageKeyType:             to.Ptr(armsql.StorageKeyTypeStorageAccessKey),
			StorageURI:                 to.Ptr("https://test.blob.core.windows.net/test.bacpac"),
		},
		&armsql.ServersClientBeginImportDatabaseOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ImportNewDatabase.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ImportNewDatabase.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ImportExportOperationResult{
			Name: to.Ptr("9d9a794a-5cec-4f23-af70-d29511b522a4"),
			Type: to.Ptr("Microsoft.Sql/servers/databases/importExportOperationResults"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/importExportOperationResults/9d9a794a-5cec-4f23-af70-d29511b522a4"),
			Properties: &armsql.ImportExportOperationResultProperties{
				BlobURI:          to.Ptr("https://test.blob.core.windows.net/test.bacpac"),
				DatabaseName:     to.Ptr("testdb"),
				LastModifiedTime: to.Ptr("2/2/2020 8:34:47 PM"),
				QueuedTime:       to.Ptr("2/2/2020 8:33:27 PM"),
				RequestID:        to.Ptr("9d9a794a-5cec-4f23-af70-d29511b522a4"),
				RequestType:      to.Ptr("Import"),
				ServerName:       to.Ptr("testsvr.database.windows.net"),
				Status:           to.Ptr("Completed"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImportExportOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImportExportOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ImportNewDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_CheckNameAvailability(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CheckNameAvailabilityServerAlreadyExists.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check for a server name that already exists"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armsql.CheckNameAvailabilityRequest{
			Name: to.Ptr("server1"),
			Type: to.Ptr("Microsoft.Sql/servers"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CheckNameAvailabilityServerAlreadyExists.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.CheckNameAvailabilityResponse{
			Name:      to.Ptr("server1"),
			Available: to.Ptr(false),
			Message:   to.Ptr("Specified server name is already used"),
			Reason:    to.Ptr(armsql.CheckNameAvailabilityReasonAlreadyExists),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CheckNameAvailabilityServerAlreadyExists.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CheckNameAvailabilityServerAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check for a server name that is available"},
	})
	client = armsql.NewServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CheckNameAvailability(ctx,
		armsql.CheckNameAvailabilityRequest{
			Name: to.Ptr("server1"),
			Type: to.Ptr("Microsoft.Sql/servers"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CheckNameAvailabilityServerAvailable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.CheckNameAvailabilityResponse{
			Name:      to.Ptr("server1"),
			Available: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CheckNameAvailabilityServerAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CheckNameAvailabilityServerInvalid.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check for a server name that is invalid"},
	})
	client = armsql.NewServersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CheckNameAvailability(ctx,
		armsql.CheckNameAvailabilityRequest{
			Name: to.Ptr("SERVER1"),
			Type: to.Ptr("Microsoft.Sql/servers"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CheckNameAvailabilityServerInvalid.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.CheckNameAvailabilityResponse{
			Name:      to.Ptr("SERVER1"),
			Available: to.Ptr(false),
			Message:   to.Ptr("Specified server name contains unsupported characters or is too long. Server name must be no longer than 63 characters long, contain only lower-case characters or digits, cannot contain '.' or '_' characters and can't start or end with '-' character."),
			Reason:    to.Ptr(armsql.CheckNameAvailabilityReasonInvalid),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/CheckNameAvailabilityServerInvalid.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsages_ListByInstancePool(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListInstancePoolUsageExpanded.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List instance pool usages expanded with children."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewUsagesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByInstancePool("group1",
		"testIP",
		&armsql.UsagesClientListByInstancePoolOptions{ExpandChildren: to.Ptr(true)})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListInstancePoolUsageExpanded.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.UsageListResult{
			Value: []*armsql.Usage{
				{
					Name: &armsql.Name{
						LocalizedValue: to.Ptr("VCore utilization"),
						Value:          to.Ptr("VCore utilization"),
					},
					Type:           to.Ptr("Microsoft.Sql/instancePools/usages"),
					CurrentValue:   to.Ptr[int32](12),
					ID:             to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP/usages/vcore_utilization"),
					Limit:          to.Ptr[int32](16),
					RequestedLimit: to.Ptr[int32](40),
					Unit:           to.Ptr("VCores"),
				},
				{
					Name: &armsql.Name{
						LocalizedValue: to.Ptr("Storage utilization"),
						Value:          to.Ptr("Storage utilization"),
					},
					Type:         to.Ptr("Microsoft.Sql/instancePools/usages"),
					CurrentValue: to.Ptr[int32](384),
					ID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP/usages/storage_utilization"),
					Limit:        to.Ptr[int32](8196),
					Unit:         to.Ptr("VCores"),
				},
				{
					Name: &armsql.Name{
						LocalizedValue: to.Ptr("Database utilization"),
						Value:          to.Ptr("Database utilization"),
					},
					Type:         to.Ptr("Microsoft.Sql/instancePools/usages"),
					CurrentValue: to.Ptr[int32](5),
					ID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP/usages/database_utilization"),
					Limit:        to.Ptr[int32](100),
					Unit:         to.Ptr("Number Of Databases"),
				},
				{
					Name: &armsql.Name{
						LocalizedValue: to.Ptr("VCore utilization"),
						Value:          to.Ptr("VCore utilization"),
					},
					Type:  to.Ptr("Microsoft.Sql/instancePools/managedInstances/usages"),
					ID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP/managedInstances/managedInstance1/usages/vcore_utilization"),
					Limit: to.Ptr[int32](4),
					Unit:  to.Ptr("VCores"),
				},
				{
					Name: &armsql.Name{
						LocalizedValue: to.Ptr("VCore utilization"),
						Value:          to.Ptr("VCore utilization"),
					},
					Type:           to.Ptr("Microsoft.Sql/instancePools/managedInstances/usages"),
					ID:             to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP/managedInstances/managedInstance2/usages/vcore_utilization"),
					Limit:          to.Ptr[int32](4),
					RequestedLimit: to.Ptr[int32](8),
					Unit:           to.Ptr("VCores"),
				},
				{
					Name: &armsql.Name{
						LocalizedValue: to.Ptr("Storage utilization"),
						Value:          to.Ptr("Storage utilization"),
					},
					Type:  to.Ptr("Microsoft.Sql/instancePools/managedInstances/usages"),
					ID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP/managedInstances/managedInstance1/usages/storage_utilization"),
					Limit: to.Ptr[int32](128),
					Unit:  to.Ptr("Gigabytes"),
				},
				{
					Name: &armsql.Name{
						LocalizedValue: to.Ptr("VCore utilization"),
						Value:          to.Ptr("VCore utilization"),
					},
					Type:           to.Ptr("Microsoft.Sql/instancePools/managedInstances/usages"),
					ID:             to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP/managedInstances/managedInstance2/usages/storage_utilization"),
					Limit:          to.Ptr[int32](128),
					RequestedLimit: to.Ptr[int32](256),
					Unit:           to.Ptr("Gigabytes"),
				},
				{
					Name: &armsql.Name{
						LocalizedValue: to.Ptr("Database utilization"),
						Value:          to.Ptr("Database utilization"),
					},
					Type:         to.Ptr("Microsoft.Sql/instancePools/managedInstances/usages"),
					CurrentValue: to.Ptr[int32](2),
					ID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP/managedInstances/managedInstance1/usages/database_utilization"),
					Limit:        to.Ptr[int32](100),
					Unit:         to.Ptr("Number Of Databases"),
				},
				{
					Name: &armsql.Name{
						LocalizedValue: to.Ptr("Database utilization"),
						Value:          to.Ptr("Database utilization"),
					},
					Type:         to.Ptr("Microsoft.Sql/instancePools/managedInstances/usages"),
					CurrentValue: to.Ptr[int32](3),
					ID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP/managedInstances/managedInstance2/usages/database_utilization"),
					Limit:        to.Ptr[int32](100),
					Unit:         to.Ptr("Number Of Databases"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListInstancePoolUsageExpanded.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListInstancePoolUsage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List instance pool usages."},
	})
	client = armsql.NewUsagesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager = client.ListByInstancePool("group1",
		"testIP",
		&armsql.UsagesClientListByInstancePoolOptions{ExpandChildren: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListInstancePoolUsage.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.UsageListResult{
			Value: []*armsql.Usage{
				{
					Name: &armsql.Name{
						LocalizedValue: to.Ptr("VCore utilization"),
						Value:          to.Ptr("VCore utilization"),
					},
					Type:           to.Ptr("Microsoft.Sql/instancePools/usages"),
					CurrentValue:   to.Ptr[int32](12),
					ID:             to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP/usages/vcore_utilization"),
					Limit:          to.Ptr[int32](16),
					RequestedLimit: to.Ptr[int32](40),
					Unit:           to.Ptr("VCores"),
				},
				{
					Name: &armsql.Name{
						LocalizedValue: to.Ptr("Storage utilization"),
						Value:          to.Ptr("Storage utilization"),
					},
					Type:         to.Ptr("Microsoft.Sql/instancePools/usages"),
					CurrentValue: to.Ptr[int32](384),
					ID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP/usages/storage_utilization"),
					Limit:        to.Ptr[int32](8196),
					Unit:         to.Ptr("VCores"),
				},
				{
					Name: &armsql.Name{
						LocalizedValue: to.Ptr("Database utilization"),
						Value:          to.Ptr("Database utilization"),
					},
					Type:         to.Ptr("Microsoft.Sql/instancePools/usages"),
					CurrentValue: to.Ptr[int32](5),
					ID:           to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP/usages/database_utilization"),
					Limit:        to.Ptr[int32](100),
					Unit:         to.Ptr("Number Of Databases"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-02-01-preview/examples/ListInstancePoolUsage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionBackups_Copy(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupCopy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Copy the long term retention backup."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCopy(ctx,
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		armsql.CopyLongTermRetentionBackupParameters{
			Properties: &armsql.CopyLongTermRetentionBackupParametersProperties{
				TargetBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				TargetDatabaseName:            to.Ptr("testDatabase2"),
				TargetServerResourceID:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/resourceGroups/resourceGroup/servers/testserver2"),
			},
		},
		&armsql.LongTermRetentionBackupsClientBeginCopyOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupCopy.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupCopy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.LongTermRetentionBackupOperationResult{
			Name: to.Ptr("a1aa7c77-961b-4fbb-bcd6-aa9acfcd1706"),
			Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionBackupOperationResults"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japanEast/longTermRetentionBackupOperationResults/a1aa7c77-961b-4fbb-bcd6-aa9acfcd1706"),
			Properties: &armsql.LongTermRetentionOperationResultProperties{
				FromBackupResourceID:          to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japanEast/longTermRetentionServers/testserver/longterRetentionDatabases/testDatabase/longTermRetentionBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
				OperationType:                 to.Ptr("CopyBackup"),
				RequestID:                     to.Ptr("a1aa7c77-961b-4fbb-bcd6-aa9acfcd1706"),
				Status:                        to.Ptr("Succeeded"),
				TargetBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				ToBackupResourceID:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup/providers/Microsoft.Sql/locations/japanEast/longTermRetentionServers/testserver2/longterRetentionDatabases/testDatabase2/longTermRetentionBackups/55555555-6666-7777-8888-111111111111;131637960820000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LongTermRetentionBackupOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LongTermRetentionBackupOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupCopy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionBackups_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the long term retention backup."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		armsql.UpdateLongTermRetentionBackupParameters{
			Properties: &armsql.UpdateLongTermRetentionBackupParametersProperties{
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
			},
		},
		&armsql.LongTermRetentionBackupsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.LongTermRetentionBackupOperationResult{
			Name: to.Ptr("a1aa7c77-961b-4fbb-bcd6-aa9acfcd1706"),
			Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionBackupOperationResults"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japanEast/longTermRetentionBackupOperationResults/a1aa7c77-961b-4fbb-bcd6-aa9acfcd1706"),
			Properties: &armsql.LongTermRetentionOperationResultProperties{
				FromBackupResourceID:          to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japanEast/longTermRetentionServers/testserver/longterRetentionDatabases/testDatabase/longTermRetentionBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
				OperationType:                 to.Ptr("UpdateBackup"),
				RequestID:                     to.Ptr("a1aa7c77-961b-4fbb-bcd6-aa9acfcd1706"),
				Status:                        to.Ptr("Succeeded"),
				TargetBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LongTermRetentionBackupOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LongTermRetentionBackupOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionBackups_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the long term retention backup."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.LongTermRetentionBackup{
			Name: to.Ptr("2017-03-10T08:00:00.000Z;55555555-6666-7777-8888-999999999999;131637960820000000"),
			Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver/longTermRetentionDatabases/testDatabase/longTermRetentionBackups/2017-03-10T08:00:00.000Z;55555555-6666-7777-8888-999999999999;2017-09-06T08:00:00.000Z"),
			Properties: &armsql.LongTermRetentionBackupProperties{
				BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-06T08:00:00Z"); return t }()),
				DatabaseName:            to.Ptr("testDatabase"),
				ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
				ServerName:              to.Ptr("testserver"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LongTermRetentionBackup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LongTermRetentionBackup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionBackups_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the long term retention backup."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		&armsql.LongTermRetentionBackupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupDelete.json: %v", err)
	}
}

func TestLongTermRetentionBackups_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all long term retention backups under the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("japaneast",
		"testserver",
		"testDatabase",
		&armsql.LongTermRetentionBackupsClientListByDatabaseOptions{OnlyLatestPerDatabase: nil,
			DatabaseState: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.LongTermRetentionBackupListResult{
			Value: []*armsql.LongTermRetentionBackup{
				{
					Name: to.Ptr("55555555-6666-7777-8888-999999999999;131637960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver/longTermRetentionDatabases/testDatabase/longTermRetentionBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-23T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver"),
					},
				},
				{
					Name: to.Ptr("55555555-6666-7777-8888-999999999999;131657960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver/longTermRetentionDatabases/testDatabase/longTermRetentionBackups/55555555-6666-7777-8888-999999999999;131657960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver"),
					},
				},
				{
					Name: to.Ptr("55555555-6666-7777-8888-999999999999;131677960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver/longTermRetentionDatabases/testDatabase/longTermRetentionBackups/55555555-6666-7777-8888-999999999999;131677960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-06T08:00:00Z"); return t }()),
						DatabaseDeletionTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-07T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LongTermRetentionBackupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LongTermRetentionBackupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionBackups_ListByLocation(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupListByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all long term retention backups under the location."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByLocation("japaneast",
		&armsql.LongTermRetentionBackupsClientListByLocationOptions{OnlyLatestPerDatabase: nil,
			DatabaseState: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupListByLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.LongTermRetentionBackupListResult{
			Value: []*armsql.LongTermRetentionBackup{
				{
					Name: to.Ptr("55555555-6666-7777-8888-999999999999;2017-08-23T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver1/longTermRetentionDatabases/testDatabase1/longTermRetentionBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-23T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase1"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver1"),
					},
				},
				{
					Name: to.Ptr("12341234-1234-1234-1234-123123123123;2017-08-30T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver2/longTermRetentionDatabases/testDatabase2/longTermRetentionBackups/12341234-1234-1234-1234-123123123123;131657960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase2"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver2"),
					},
				},
				{
					Name: to.Ptr("43214321-4321-4321-4321-321321321321;2017-09-06T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver3/longTermRetentionDatabases/testDatabase3/longTermRetentionBackups/43214321-4321-4321-4321-321321321321;131677960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-06T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase3"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver3"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LongTermRetentionBackupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LongTermRetentionBackupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupListByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionBackups_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all long term retention backups under the server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("japaneast",
		"testserver",
		&armsql.LongTermRetentionBackupsClientListByServerOptions{OnlyLatestPerDatabase: nil,
			DatabaseState: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.LongTermRetentionBackupListResult{
			Value: []*armsql.LongTermRetentionBackup{
				{
					Name: to.Ptr("55555555-6666-7777-8888-999999999999;131637960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver/longTermRetentionDatabases/testDatabase1/longTermRetentionBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-23T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase1"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver"),
					},
				},
				{
					Name: to.Ptr("12341234-1234-1234-1234-123123123123;131657960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver/longTermRetentionDatabases/testDatabase2/longTermRetentionBackups/12341234-1234-1234-1234-123123123123;131657960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase2"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver"),
					},
				},
				{
					Name: to.Ptr("43214321-4321-4321-4321-321321321321;131667960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver/longTermRetentionDatabases/testDatabase3/longTermRetentionBackups/43214321-4321-4321-4321-321321321321;131677960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-06T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase3"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LongTermRetentionBackupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LongTermRetentionBackupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/LongTermRetentionBackupListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionBackups_CopyByResourceGroup(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupCopy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Copy the long term retention backup."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCopyByResourceGroup(ctx,
		"testResourceGroup",
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		armsql.CopyLongTermRetentionBackupParameters{
			Properties: &armsql.CopyLongTermRetentionBackupParametersProperties{
				TargetBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				TargetDatabaseName:            to.Ptr("testDatabase2"),
				TargetServerResourceID:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/resourceGroups/resourceGroup/servers/testserver2"),
			},
		},
		&armsql.LongTermRetentionBackupsClientBeginCopyByResourceGroupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupCopy.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupCopy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.LongTermRetentionBackupOperationResult{
			Name: to.Ptr("a1aa7c77-961b-4fbb-bcd6-aa9acfcd1706"),
			Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionBackupOperationResults"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japanEast/longTermRetentionBackupOperationResults/a1aa7c77-961b-4fbb-bcd6-aa9acfcd1706"),
			Properties: &armsql.LongTermRetentionOperationResultProperties{
				FromBackupResourceID:          to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japanEast/longTermRetentionServers/testserver/longterRetentionDatabases/testDatabase/longTermRetentionBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
				OperationType:                 to.Ptr("CopyBackup"),
				RequestID:                     to.Ptr("a1aa7c77-961b-4fbb-bcd6-aa9acfcd1706"),
				Status:                        to.Ptr("Succeeded"),
				TargetBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				ToBackupResourceID:            to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup/providers/Microsoft.Sql/locations/japanEast/longTermRetentionServers/testserver2/longterRetentionDatabases/testDatabase2/longTermRetentionBackups/55555555-6666-7777-8888-111111111111;131637960820000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LongTermRetentionBackupOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LongTermRetentionBackupOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupCopy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionBackups_UpdateByResourceGroup(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the long term retention backup."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdateByResourceGroup(ctx,
		"testResourceGroup",
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		armsql.UpdateLongTermRetentionBackupParameters{
			Properties: &armsql.UpdateLongTermRetentionBackupParametersProperties{
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
			},
		},
		&armsql.LongTermRetentionBackupsClientBeginUpdateByResourceGroupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.LongTermRetentionBackupOperationResult{
			Name: to.Ptr("a1aa7c77-961b-4fbb-bcd6-aa9acfcd1706"),
			Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionBackupOperationResults"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japanEast/longTermRetentionBackupOperationResults/a1aa7c77-961b-4fbb-bcd6-aa9acfcd1706"),
			Properties: &armsql.LongTermRetentionOperationResultProperties{
				FromBackupResourceID:          to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japanEast/longTermRetentionServers/testserver/longterRetentionDatabases/testDatabase/longTermRetentionBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
				OperationType:                 to.Ptr("UpdateBackup"),
				RequestID:                     to.Ptr("a1aa7c77-961b-4fbb-bcd6-aa9acfcd1706"),
				Status:                        to.Ptr("Succeeded"),
				TargetBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LongTermRetentionBackupOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LongTermRetentionBackupOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionBackups_GetByResourceGroup(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the long term retention backup."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.GetByResourceGroup(ctx,
		"testResourceGroup",
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.LongTermRetentionBackup{
			Name: to.Ptr("2017-03-10T08:00:00.000Z;55555555-6666-7777-8888-999999999999;131637960820000000"),
			Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver/longTermRetentionDatabases/testDatabase/longTermRetentionBackups/2017-03-10T08:00:00.000Z;55555555-6666-7777-8888-999999999999;2017-09-06T08:00:00.000Z"),
			Properties: &armsql.LongTermRetentionBackupProperties{
				BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-06T08:00:00Z"); return t }()),
				DatabaseName:            to.Ptr("testDatabase"),
				ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
				ServerName:              to.Ptr("testserver"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LongTermRetentionBackup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LongTermRetentionBackup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionBackups_DeleteByResourceGroup(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the long term retention backup."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDeleteByResourceGroup(ctx,
		"testResourceGroup",
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		&armsql.LongTermRetentionBackupsClientBeginDeleteByResourceGroupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupDelete.json: %v", err)
	}
}

func TestLongTermRetentionBackups_ListByResourceGroupDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all long term retention backups under the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroupDatabase("testResourceGroup",
		"japaneast",
		"testserver",
		"testDatabase",
		&armsql.LongTermRetentionBackupsClientListByResourceGroupDatabaseOptions{OnlyLatestPerDatabase: nil,
			DatabaseState: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.LongTermRetentionBackupListResult{
			Value: []*armsql.LongTermRetentionBackup{
				{
					Name: to.Ptr("55555555-6666-7777-8888-999999999999;131637960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver/longTermRetentionDatabases/testDatabase/longTermRetentionBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-23T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver"),
					},
				},
				{
					Name: to.Ptr("55555555-6666-7777-8888-999999999999;131657960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver/longTermRetentionDatabases/testDatabase/longTermRetentionBackups/55555555-6666-7777-8888-999999999999;131657960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver"),
					},
				},
				{
					Name: to.Ptr("55555555-6666-7777-8888-999999999999;131677960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver/longTermRetentionDatabases/testDatabase/longTermRetentionBackups/55555555-6666-7777-8888-999999999999;131677960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-06T08:00:00Z"); return t }()),
						DatabaseDeletionTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-07T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LongTermRetentionBackupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LongTermRetentionBackupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionBackups_ListByResourceGroupLocation(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupListByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all long term retention backups under the location."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroupLocation("testResourceGroup",
		"japaneast",
		&armsql.LongTermRetentionBackupsClientListByResourceGroupLocationOptions{OnlyLatestPerDatabase: nil,
			DatabaseState: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupListByLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.LongTermRetentionBackupListResult{
			Value: []*armsql.LongTermRetentionBackup{
				{
					Name: to.Ptr("55555555-6666-7777-8888-999999999999;2017-08-23T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver1/longTermRetentionDatabases/testDatabase1/longTermRetentionBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-23T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase1"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver1"),
					},
				},
				{
					Name: to.Ptr("12341234-1234-1234-1234-123123123123;2017-08-30T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver2/longTermRetentionDatabases/testDatabase2/longTermRetentionBackups/12341234-1234-1234-1234-123123123123;131657960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase2"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver2"),
					},
				},
				{
					Name: to.Ptr("43214321-4321-4321-4321-321321321321;2017-09-06T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver3/longTermRetentionDatabases/testDatabase3/longTermRetentionBackups/43214321-4321-4321-4321-321321321321;131677960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-06T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase3"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver3"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LongTermRetentionBackupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LongTermRetentionBackupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupListByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionBackups_ListByResourceGroupServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all long term retention backups under the server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroupServer("testResourceGroup",
		"japaneast",
		"testserver",
		&armsql.LongTermRetentionBackupsClientListByResourceGroupServerOptions{OnlyLatestPerDatabase: nil,
			DatabaseState: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.LongTermRetentionBackupListResult{
			Value: []*armsql.LongTermRetentionBackup{
				{
					Name: to.Ptr("55555555-6666-7777-8888-999999999999;131637960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver/longTermRetentionDatabases/testDatabase1/longTermRetentionBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-23T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase1"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver"),
					},
				},
				{
					Name: to.Ptr("12341234-1234-1234-1234-123123123123;131657960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver/longTermRetentionDatabases/testDatabase2/longTermRetentionBackups/12341234-1234-1234-1234-123123123123;131657960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase2"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver"),
					},
				},
				{
					Name: to.Ptr("43214321-4321-4321-4321-321321321321;131667960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionServers/testserver/longTermRetentionDatabases/testDatabase3/longTermRetentionBackups/43214321-4321-4321-4321-321321321321;131677960820000000"),
					Properties: &armsql.LongTermRetentionBackupProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-06T08:00:00Z"); return t }()),
						DatabaseName:            to.Ptr("testDatabase3"),
						ServerCreateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ServerName:              to.Ptr("testserver"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LongTermRetentionBackupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LongTermRetentionBackupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedLongTermRetentionBackupListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionManagedInstanceBackups_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the long term retention backup of a managed database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionManagedInstanceBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"japaneast",
		"testInstance",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceLongTermRetentionBackup{
			Name: to.Ptr("55555555-6666-7777-8888-999999999999;131637960820000000"),
			Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/Locations/japaneast/longTermRetentionManagedInstances/testInstance/longTermRetentionDatabases/testDatabase/longTermRetentionManagedInstanceBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
			Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
				BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
				BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-23T08:00:00Z"); return t }()),
				DatabaseName:              to.Ptr("testDatabase"),
				ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-01T08:00:00Z"); return t }()),
				ManagedInstanceName:       to.Ptr("testInstance"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceLongTermRetentionBackup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceLongTermRetentionBackup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionManagedInstanceBackups_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the long term retention backup."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionManagedInstanceBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"japaneast",
		"testInstance",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		&armsql.LongTermRetentionManagedInstanceBackupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupDelete.json: %v", err)
	}
}

func TestLongTermRetentionManagedInstanceBackups_ListByDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all long term retention backups under the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionManagedInstanceBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabase("japaneast",
		"testInstance",
		"testDatabase",
		&armsql.LongTermRetentionManagedInstanceBackupsClientListByDatabaseOptions{OnlyLatestPerDatabase: nil,
			DatabaseState: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceLongTermRetentionBackupListResult{
			Value: []*armsql.ManagedInstanceLongTermRetentionBackup{
				{
					Name: to.Ptr("2018-06-01T08:00:00.000Z;55555555-6666-7777-8888-999999999999;2018-08-23T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/Locations/japaneast/longTermRetentionManagedInstances/testInstance/longTermRetentionDatabases/testDatabase/longTermRetentionManagedInstanceBackups/2018-06-01T08:00:00.000Z;55555555-6666-7777-8888-999999999999;2018-08-23T08:00:00.000Z"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-23T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance"),
					},
				},
				{
					Name: to.Ptr("2018-06-01T08:00:00.000Z;55555555-6666-7777-8888-999999999999;2018-08-30T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/Locations/japaneast/longTermRetentionManagedInstances/testInstance/longTermRetentionDatabases/testDatabase/longTermRetentionManagedInstanceBackups/2018-06-01T08:00:00.000Z;55555555-6666-7777-8888-999999999999;2018-08-30T08:00:00.000Z"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-30T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance"),
					},
				},
				{
					Name: to.Ptr("2018-06-01T08:00:00.000Z;55555555-6666-7777-8888-999999999999;2018-09-06T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/Locations/japaneast/longTermRetentionManagedInstances/testInstance/longTermRetentionDatabases/testDatabase/longTermRetentionManagedInstanceBackups/2018-06-01T08:00:00.000Z;55555555-6666-7777-8888-999999999999;2018-09-06T08:00:00.000Z"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-06T08:00:00Z"); return t }()),
						DatabaseDeletionTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-07T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceLongTermRetentionBackupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceLongTermRetentionBackupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionManagedInstanceBackups_ListByInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupListByInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all long term retention backups under the managed instance."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionManagedInstanceBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByInstance("japaneast",
		"testInstance",
		&armsql.LongTermRetentionManagedInstanceBackupsClientListByInstanceOptions{OnlyLatestPerDatabase: nil,
			DatabaseState: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupListByInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceLongTermRetentionBackupListResult{
			Value: []*armsql.ManagedInstanceLongTermRetentionBackup{
				{
					Name: to.Ptr("55555555-6666-7777-8888-999999999999;131637960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionManagedInstances/testInstance/longTermRetentionDatabases/testDatabase1/longTermRetentionManagedInstanceBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-23T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase1"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance"),
					},
				},
				{
					Name: to.Ptr("12341234-1234-1234-1234-123123123123;131657960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionManagedInstances/testInstance/longTermRetentionDatabases/testDatabase2/longTermRetentionManagedInstanceBackups/12341234-1234-1234-1234-123123123123;131657960820000000"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase2"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance"),
					},
				},
				{
					Name: to.Ptr("43214321-4321-4321-4321-321321321321;131667960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionManagedInstances/testInstance/longTermRetentionDatabases/testDatabase3/longTermRetentionManagedInstanceBackups/43214321-4321-4321-4321-321321321321;131677960820000000"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-06T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase3"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceLongTermRetentionBackupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceLongTermRetentionBackupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupListByInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionManagedInstanceBackups_ListByLocation(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupListByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all long term retention backups under the location."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionManagedInstanceBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByLocation("japaneast",
		&armsql.LongTermRetentionManagedInstanceBackupsClientListByLocationOptions{OnlyLatestPerDatabase: nil,
			DatabaseState: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupListByLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceLongTermRetentionBackupListResult{
			Value: []*armsql.ManagedInstanceLongTermRetentionBackup{
				{
					Name: to.Ptr("55555555-6666-7777-8888-999999999999;2017-08-23T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionManagedInstances/testserver1/longTermRetentionDatabases/testDatabase1/longTermRetentionManagedInstanceBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-23T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase1"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance1"),
					},
				},
				{
					Name: to.Ptr("12341234-1234-1234-1234-123123123123;2017-08-30T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionManagedInstances/testserver2/longTermRetentionDatabases/testDatabase2/longTermRetentionManagedInstanceBackups/12341234-1234-1234-1234-123123123123;131657960820000000"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase2"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance2"),
					},
				},
				{
					Name: to.Ptr("43214321-4321-4321-4321-321321321321;2017-09-06T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/locations/japaneast/longTermRetentionManagedInstances/testserver3/longTermRetentionDatabases/testDatabase3/longTermRetentionManagedInstanceBackups/43214321-4321-4321-4321-321321321321;131677960820000000"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-06T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase3"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance3"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceLongTermRetentionBackupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceLongTermRetentionBackupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceLongTermRetentionBackupListByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionManagedInstanceBackups_GetByResourceGroup(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the long term retention backup."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionManagedInstanceBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.GetByResourceGroup(ctx,
		"testResourceGroup",
		"japaneast",
		"testInstance",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstanceLongTermRetentionBackup{
			Name: to.Ptr("55555555-6666-7777-8888-999999999999;131637960820000000"),
			Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/Locations/japaneast/longTermRetentionManagedInstances/testInstance/longTermRetentionDatabases/testDatabase/longTermRetentionManagedInstanceBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
			Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
				BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
				BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-06T08:00:00Z"); return t }()),
				DatabaseName:              to.Ptr("testDatabase"),
				ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
				ManagedInstanceName:       to.Ptr("testInstance"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstanceLongTermRetentionBackup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstanceLongTermRetentionBackup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionManagedInstanceBackups_DeleteByResourceGroup(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the long term retention backup."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionManagedInstanceBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDeleteByResourceGroup(ctx,
		"testResourceGroup",
		"japaneast",
		"testInstance",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		&armsql.LongTermRetentionManagedInstanceBackupsClientBeginDeleteByResourceGroupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupDelete.json: %v", err)
	}
}

func TestLongTermRetentionManagedInstanceBackups_ListByResourceGroupDatabase(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all long term retention backups under the database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionManagedInstanceBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroupDatabase("testResourceGroup",
		"japaneast",
		"testInstance",
		"testDatabase",
		&armsql.LongTermRetentionManagedInstanceBackupsClientListByResourceGroupDatabaseOptions{OnlyLatestPerDatabase: nil,
			DatabaseState: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceLongTermRetentionBackupListResult{
			Value: []*armsql.ManagedInstanceLongTermRetentionBackup{
				{
					Name: to.Ptr("2018-06-01T08:00:00.000Z;55555555-6666-7777-8888-999999999999;2018-08-23T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/Locations/japaneast/longTermRetentionManagedInstances/testInstance/longTermRetentionDatabases/testDatabase/longTermRetentionManagedInstanceBackups/2018-06-01T08:00:00.000Z;55555555-6666-7777-8888-999999999999;2018-08-23T08:00:00.000Z"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-23T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance"),
					},
				},
				{
					Name: to.Ptr("2018-06-01T08:00:00.000Z;55555555-6666-7777-8888-999999999999;2018-08-30T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/Locations/japaneast/longTermRetentionManagedInstances/testInstance/longTermRetentionDatabases/testDatabase/longTermRetentionManagedInstanceBackups/2018-06-01T08:00:00.000Z;55555555-6666-7777-8888-999999999999;2018-08-30T08:00:00.000Z"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-30T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance"),
					},
				},
				{
					Name: to.Ptr("2018-06-01T08:00:00.000Z;55555555-6666-7777-8888-999999999999;2018-09-06T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/Locations/japaneast/longTermRetentionManagedInstances/testInstance/longTermRetentionDatabases/testDatabase/longTermRetentionManagedInstanceBackups/2018-06-01T08:00:00.000Z;55555555-6666-7777-8888-999999999999;2018-09-06T08:00:00.000Z"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-06T08:00:00Z"); return t }()),
						DatabaseDeletionTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-07T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceLongTermRetentionBackupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceLongTermRetentionBackupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionManagedInstanceBackups_ListByResourceGroupInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupListByInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all long term retention backups under the managed instance."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionManagedInstanceBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroupInstance("testResourceGroup",
		"japaneast",
		"testInstance",
		&armsql.LongTermRetentionManagedInstanceBackupsClientListByResourceGroupInstanceOptions{OnlyLatestPerDatabase: nil,
			DatabaseState: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupListByInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceLongTermRetentionBackupListResult{
			Value: []*armsql.ManagedInstanceLongTermRetentionBackup{
				{
					Name: to.Ptr("55555555-6666-7777-8888-999999999999;131637960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionManagedInstances/testInstance/longTermRetentionDatabases/testDatabase1/longTermRetentionManagedInstanceBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-23T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase1"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance"),
					},
				},
				{
					Name: to.Ptr("12341234-1234-1234-1234-123123123123;131657960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionManagedInstances/testInstance/longTermRetentionDatabases/testDatabase2/longTermRetentionManagedInstanceBackups/12341234-1234-1234-1234-123123123123;131657960820000000"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase2"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance"),
					},
				},
				{
					Name: to.Ptr("43214321-4321-4321-4321-321321321321;131667960820000000"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionManagedInstances/testInstance/longTermRetentionDatabases/testDatabase3/longTermRetentionManagedInstanceBackups/43214321-4321-4321-4321-321321321321;131677960820000000"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-06T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase3"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceLongTermRetentionBackupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceLongTermRetentionBackupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupListByInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLongTermRetentionManagedInstanceBackups_ListByResourceGroupLocation(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupListByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all long term retention backups under the location."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewLongTermRetentionManagedInstanceBackupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroupLocation("testResourceGroup",
		"japaneast",
		&armsql.LongTermRetentionManagedInstanceBackupsClientListByResourceGroupLocationOptions{OnlyLatestPerDatabase: nil,
			DatabaseState: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupListByLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceLongTermRetentionBackupListResult{
			Value: []*armsql.ManagedInstanceLongTermRetentionBackup{
				{
					Name: to.Ptr("55555555-6666-7777-8888-999999999999;2017-08-23T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionManagedInstances/testInstance1/longTermRetentionDatabases/testDatabase1/longTermRetentionManagedInstanceBackups/55555555-6666-7777-8888-999999999999;131637960820000000"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-23T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase1"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance1"),
					},
				},
				{
					Name: to.Ptr("12341234-1234-1234-1234-123123123123;2017-08-30T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionManagedInstances/testInstance2/longTermRetentionDatabases/testDatabase2/longTermRetentionManagedInstanceBackups/12341234-1234-1234-1234-123123123123;131657960820000000"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase2"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance2"),
					},
				},
				{
					Name: to.Ptr("43214321-4321-4321-4321-321321321321;2017-09-06T08:00:00.000Z"),
					Type: to.Ptr("Microsoft.Sql/locations/longTermRetentionManagedInstances/longTermRetentionDatabases/longTermRetentionManagedInstanceBackups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testResourceGroup/providers/Microsoft.Sql/locations/japaneast/longTermRetentionManagedInstances/testInstance3/longTermRetentionDatabases/testDatabase3/longTermRetentionManagedInstanceBackups/43214321-4321-4321-4321-321321321321;131677960820000000"),
					Properties: &armsql.ManagedInstanceLongTermRetentionBackupProperties{
						BackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						BackupTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-06T08:00:00Z"); return t }()),
						DatabaseName:              to.Ptr("testDatabase3"),
						ManagedInstanceCreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-10T08:00:00Z"); return t }()),
						ManagedInstanceName:       to.Ptr("testInstance3"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceLongTermRetentionBackupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceLongTermRetentionBackupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupListByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstances_ListByInstancePool(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListByInstancePool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed instances by instance pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancesClient("20D7082A-0FC7-4468-82BD-542694D5042B", cred, &options)
	pager := client.ListByInstancePool("Test1",
		"pool1",
		&armsql.ManagedInstancesClientListByInstancePoolOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListByInstancePool.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceListResult{
			Value: []*armsql.ManagedInstance{
				{
					Name:     to.Ptr("testinstance1"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances"),
					ID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/Test1/providers/Microsoft.Sql/managedInstances/testinstance1"),
					Location: to.Ptr("canadacentral"),
					Properties: &armsql.ManagedInstanceProperties{
						AdministratorLogin:               to.Ptr("dummylogin"),
						Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						DNSZone:                          to.Ptr("1b4e2caff2530"),
						FullyQualifiedDomainName:         to.Ptr("testinstance1.1b4e2caff2530.database.windows.net"),
						InstancePoolID:                   to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/Test1/providers/Microsoft.Sql/instancePools/pool1"),
						LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseTypeLicenseIncluded),
						MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_CanadaCentral_MI_1"),
						MinimalTLSVersion:                to.Ptr("1.2"),
						ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
						ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideRedirect),
						PublicDataEndpointEnabled:        to.Ptr(false),
						RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						State:                            to.Ptr("Ready"),
						StorageSizeInGB:                  to.Ptr[int32](1024),
						SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/Test1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
						VCores:                           to.Ptr[int32](8),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("GP_Gen5"),
						Capacity: to.Ptr[int32](8),
						Family:   to.Ptr("Gen5"),
						Tier:     to.Ptr("GeneralPurpose"),
					},
				},
				{
					Name:     to.Ptr("testinstance2"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances"),
					ID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/Test1/providers/Microsoft.Sql/managedInstances/testinstance2"),
					Location: to.Ptr("canadacentral"),
					Properties: &armsql.ManagedInstanceProperties{
						AdministratorLogin:               to.Ptr("dummylogin"),
						Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						DNSZone:                          to.Ptr("2c3d1bdae3412"),
						FullyQualifiedDomainName:         to.Ptr("testinstance2.2c3d1bdae3412.database.windows.net"),
						InstancePoolID:                   to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/Test1/providers/Microsoft.Sql/instancePools/pool1"),
						LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseType("Full")),
						MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_CanadaCentral_MI_1"),
						MinimalTLSVersion:                to.Ptr("1.2"),
						ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
						ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideRedirect),
						PublicDataEndpointEnabled:        to.Ptr(false),
						RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						State:                            to.Ptr("Ready"),
						StorageSizeInGB:                  to.Ptr[int32](1024),
						SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/Test1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
						VCores:                           to.Ptr[int32](16),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("GP_Gen5"),
						Capacity: to.Ptr[int32](16),
						Family:   to.Ptr("Gen5"),
						Tier:     to.Ptr("GeneralPurpose"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListByInstancePool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListByInstancePoolWithExpandEqualsAdministrators.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed instances by instance pool with $expand=administrators/activedirectory"},
	})
	client = armsql.NewManagedInstancesClient("20D7082A-0FC7-4468-82BD-542694D5042B", cred, &options)
	pager = client.ListByInstancePool("Test1",
		"pool1",
		&armsql.ManagedInstancesClientListByInstancePoolOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListByInstancePoolWithExpandEqualsAdministrators.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceListResult{
			Value: []*armsql.ManagedInstance{
				{
					Name:     to.Ptr("testinstance1"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances"),
					ID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/Test1/providers/Microsoft.Sql/managedInstances/testinstance1"),
					Location: to.Ptr("canadacentral"),
					Properties: &armsql.ManagedInstanceProperties{
						AdministratorLogin: to.Ptr("dummylogin"),
						Administrators: &armsql.ManagedInstanceExternalAdministrator{
							AzureADOnlyAuthentication: to.Ptr(true),
							Login:                     to.Ptr("bob@contoso.com"),
							PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
							Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
							TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
						},
						Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						DNSZone:                          to.Ptr("1b4e2caff2530"),
						FullyQualifiedDomainName:         to.Ptr("testinstance1.1b4e2caff2530.database.windows.net"),
						InstancePoolID:                   to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/Test1/providers/Microsoft.Sql/instancePools/pool1"),
						LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseTypeLicenseIncluded),
						MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_CanadaCentral_MI_1"),
						MinimalTLSVersion:                to.Ptr("1.2"),
						ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
						ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideRedirect),
						PublicDataEndpointEnabled:        to.Ptr(false),
						RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						State:                            to.Ptr("Ready"),
						StorageSizeInGB:                  to.Ptr[int32](1024),
						SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/Test1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
						VCores:                           to.Ptr[int32](8),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("GP_Gen5"),
						Capacity: to.Ptr[int32](8),
						Family:   to.Ptr("Gen5"),
						Tier:     to.Ptr("GeneralPurpose"),
					},
				},
				{
					Name:     to.Ptr("testinstance2"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances"),
					ID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/Test1/providers/Microsoft.Sql/managedInstances/testinstance2"),
					Location: to.Ptr("canadacentral"),
					Properties: &armsql.ManagedInstanceProperties{
						AdministratorLogin: to.Ptr("dummylogin"),
						Administrators: &armsql.ManagedInstanceExternalAdministrator{
							AzureADOnlyAuthentication: to.Ptr(true),
							Login:                     to.Ptr("bob@contoso.com"),
							PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
							Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
							TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
						},
						Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						DNSZone:                          to.Ptr("2c3d1bdae3412"),
						FullyQualifiedDomainName:         to.Ptr("testinstance2.2c3d1bdae3412.database.windows.net"),
						InstancePoolID:                   to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/Test1/providers/Microsoft.Sql/instancePools/pool1"),
						LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseType("Full")),
						MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_CanadaCentral_MI_2"),
						MinimalTLSVersion:                to.Ptr("1.2"),
						ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
						ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideRedirect),
						PublicDataEndpointEnabled:        to.Ptr(false),
						RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						State:                            to.Ptr("Ready"),
						StorageSizeInGB:                  to.Ptr[int32](1024),
						SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/Test1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
						VCores:                           to.Ptr[int32](16),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("GP_Gen5"),
						Capacity: to.Ptr[int32](16),
						Family:   to.Ptr("Gen5"),
						Tier:     to.Ptr("GeneralPurpose"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListByInstancePoolWithExpandEqualsAdministrators.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstances_List(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed instances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancesClient("20D7082A-0FC7-4468-82BD-542694D5042B", cred, &options)
	pager := client.List(&armsql.ManagedInstancesClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceListResult{
			Value: []*armsql.ManagedInstance{
				{
					Name:     to.Ptr("testinstance1"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances"),
					ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/Test1/providers/Microsoft.Sql/managedInstances/testinstance1"),
					Location: to.Ptr("japaneast"),
					Properties: &armsql.ManagedInstanceProperties{
						AdministratorLogin:               to.Ptr("dummylogin"),
						Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						DNSZone:                          to.Ptr("1b4e2caff2530"),
						FullyQualifiedDomainName:         to.Ptr("testinstance1.1b4e2caff2530.database.windows.net"),
						LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseTypeLicenseIncluded),
						MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1"),
						MinimalTLSVersion:                to.Ptr("1.2"),
						ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
						ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideDefault),
						PublicDataEndpointEnabled:        to.Ptr(false),
						RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						State:                            to.Ptr("Ready"),
						StorageSizeInGB:                  to.Ptr[int32](1024),
						SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
						VCores:                           to.Ptr[int32](8),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("GP_Gen4"),
						Capacity: to.Ptr[int32](8),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr("GeneralPurpose"),
					},
				},
				{
					Name:     to.Ptr("testinstance2"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances"),
					ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/Test1/providers/Microsoft.Sql/managedInstances/testinstance2"),
					Location: to.Ptr("japaneast"),
					Properties: &armsql.ManagedInstanceProperties{
						AdministratorLogin:               to.Ptr("dummylogin"),
						Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						DNSZone:                          to.Ptr("2c3d1bdae3412"),
						FullyQualifiedDomainName:         to.Ptr("testinstance2.2c3d1bdae3412.database.windows.net"),
						LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseType("Full")),
						MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1"),
						MinimalTLSVersion:                to.Ptr("1.2"),
						ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
						ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideDefault),
						PublicDataEndpointEnabled:        to.Ptr(false),
						RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						State:                            to.Ptr("Ready"),
						StorageSizeInGB:                  to.Ptr[int32](1024),
						SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/subnet2"),
						VCores:                           to.Ptr[int32](16),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("BC_Gen5"),
						Capacity: to.Ptr[int32](16),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr("BusinessCritical"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListWithExpandEqualsAdministrators.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed instances with $expand=administrators/activedirectory"},
	})
	client = armsql.NewManagedInstancesClient("20D7082A-0FC7-4468-82BD-542694D5042B", cred, &options)
	pager = client.List(&armsql.ManagedInstancesClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListWithExpandEqualsAdministrators.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceListResult{
			Value: []*armsql.ManagedInstance{
				{
					Name:     to.Ptr("testinstance1"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances"),
					ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/Test1/providers/Microsoft.Sql/managedInstances/testinstance1"),
					Location: to.Ptr("japaneast"),
					Properties: &armsql.ManagedInstanceProperties{
						AdministratorLogin: to.Ptr("dummylogin"),
						Administrators: &armsql.ManagedInstanceExternalAdministrator{
							AzureADOnlyAuthentication: to.Ptr(true),
							Login:                     to.Ptr("bob@contoso.com"),
							PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
							Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
							TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
						},
						Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						DNSZone:                          to.Ptr("1b4e2caff2530"),
						FullyQualifiedDomainName:         to.Ptr("testinstance1.1b4e2caff2530.database.windows.net"),
						LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseTypeLicenseIncluded),
						MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1"),
						MinimalTLSVersion:                to.Ptr("1.2"),
						ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
						ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideDefault),
						PublicDataEndpointEnabled:        to.Ptr(false),
						RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						State:                            to.Ptr("Ready"),
						StorageSizeInGB:                  to.Ptr[int32](1024),
						SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
						VCores:                           to.Ptr[int32](8),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("GP_Gen4"),
						Capacity: to.Ptr[int32](8),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr("GeneralPurpose"),
					},
				},
				{
					Name:     to.Ptr("testinstance2"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances"),
					ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/Test1/providers/Microsoft.Sql/managedInstances/testinstance2"),
					Location: to.Ptr("japaneast"),
					Properties: &armsql.ManagedInstanceProperties{
						AdministratorLogin: to.Ptr("dummylogin"),
						Administrators: &armsql.ManagedInstanceExternalAdministrator{
							AzureADOnlyAuthentication: to.Ptr(true),
							Login:                     to.Ptr("bob@contoso.com"),
							PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
							Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
							TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
						},
						Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						DNSZone:                          to.Ptr("2c3d1bdae3412"),
						FullyQualifiedDomainName:         to.Ptr("testinstance2.2c3d1bdae3412.database.windows.net"),
						LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseType("Full")),
						MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_2"),
						MinimalTLSVersion:                to.Ptr("1.2"),
						ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
						ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideDefault),
						PublicDataEndpointEnabled:        to.Ptr(false),
						RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						State:                            to.Ptr("Ready"),
						StorageSizeInGB:                  to.Ptr[int32](1024),
						SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/subnet2"),
						VCores:                           to.Ptr[int32](16),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("BC_Gen5"),
						Capacity: to.Ptr[int32](16),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr("BusinessCritical"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListWithExpandEqualsAdministrators.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstances_ListByResourceGroup(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed instances by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancesClient("20D7082A-0FC7-4468-82BD-542694D5042B", cred, &options)
	pager := client.ListByResourceGroup("Test1",
		&armsql.ManagedInstancesClientListByResourceGroupOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceListResult{
			Value: []*armsql.ManagedInstance{
				{
					Name:     to.Ptr("testinstance1"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances"),
					ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/Test1/providers/Microsoft.Sql/managedInstances/testinstance1"),
					Location: to.Ptr("japaneast"),
					Properties: &armsql.ManagedInstanceProperties{
						AdministratorLogin:               to.Ptr("dummylogin"),
						Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						DNSZone:                          to.Ptr("1b4e2caff2530"),
						FullyQualifiedDomainName:         to.Ptr("testinstance1.1b4e2caff2530.database.windows.net"),
						LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseTypeLicenseIncluded),
						MaintenanceConfigurationID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1"),
						MinimalTLSVersion:                to.Ptr("1.2"),
						ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
						ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideDefault),
						PublicDataEndpointEnabled:        to.Ptr(false),
						RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						State:                            to.Ptr("Ready"),
						StorageSizeInGB:                  to.Ptr[int32](1024),
						SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
						VCores:                           to.Ptr[int32](8),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("GP_Gen4"),
						Capacity: to.Ptr[int32](8),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr("GeneralPurpose"),
					},
				},
				{
					Name:     to.Ptr("testinstance2"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances"),
					ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/Test1/providers/Microsoft.Sql/managedInstances/testinstance2"),
					Location: to.Ptr("japaneast"),
					Properties: &armsql.ManagedInstanceProperties{
						AdministratorLogin:               to.Ptr("dummylogin"),
						Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						DNSZone:                          to.Ptr("2c3d1bdae3412"),
						FullyQualifiedDomainName:         to.Ptr("testinstance2.2c3d1bdae3412.database.windows.net"),
						LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseType("Full")),
						MaintenanceConfigurationID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1"),
						MinimalTLSVersion:                to.Ptr("1.2"),
						ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
						ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideDefault),
						PublicDataEndpointEnabled:        to.Ptr(false),
						RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						State:                            to.Ptr("Ready"),
						StorageSizeInGB:                  to.Ptr[int32](1024),
						SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/subnet2"),
						VCores:                           to.Ptr[int32](16),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("BC_Gen5"),
						Capacity: to.Ptr[int32](16),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr("BusinessCritical"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListByResourceGroupWithExpandEqualsAdministrators.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List managed instances by resource group with $expand=administrators/activedirectory"},
	})
	client = armsql.NewManagedInstancesClient("20D7082A-0FC7-4468-82BD-542694D5042B", cred, &options)
	pager = client.ListByResourceGroup("Test1",
		&armsql.ManagedInstancesClientListByResourceGroupOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListByResourceGroupWithExpandEqualsAdministrators.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ManagedInstanceListResult{
			Value: []*armsql.ManagedInstance{
				{
					Name:     to.Ptr("testinstance1"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances"),
					ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/Test1/providers/Microsoft.Sql/managedInstances/testinstance1"),
					Location: to.Ptr("japaneast"),
					Properties: &armsql.ManagedInstanceProperties{
						AdministratorLogin: to.Ptr("dummylogin"),
						Administrators: &armsql.ManagedInstanceExternalAdministrator{
							AzureADOnlyAuthentication: to.Ptr(true),
							Login:                     to.Ptr("bob@contoso.com"),
							PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
							Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
							TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
						},
						Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						DNSZone:                          to.Ptr("1b4e2caff2530"),
						FullyQualifiedDomainName:         to.Ptr("testinstance1.1b4e2caff2530.database.windows.net"),
						LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseTypeLicenseIncluded),
						MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1"),
						MinimalTLSVersion:                to.Ptr("1.2"),
						ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
						ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideDefault),
						PublicDataEndpointEnabled:        to.Ptr(false),
						RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						State:                            to.Ptr("Ready"),
						StorageSizeInGB:                  to.Ptr[int32](1024),
						SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
						VCores:                           to.Ptr[int32](8),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("GP_Gen4"),
						Capacity: to.Ptr[int32](8),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr("GeneralPurpose"),
					},
				},
				{
					Name:     to.Ptr("testinstance2"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances"),
					ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/Test1/providers/Microsoft.Sql/managedInstances/testinstance2"),
					Location: to.Ptr("japaneast"),
					Properties: &armsql.ManagedInstanceProperties{
						AdministratorLogin: to.Ptr("dummylogin"),
						Administrators: &armsql.ManagedInstanceExternalAdministrator{
							AzureADOnlyAuthentication: to.Ptr(true),
							Login:                     to.Ptr("bob@contoso.com"),
							PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
							Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
							TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
						},
						Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
						DNSZone:                          to.Ptr("2c3d1bdae3412"),
						FullyQualifiedDomainName:         to.Ptr("testinstance2.2c3d1bdae3412.database.windows.net"),
						LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseType("Full")),
						MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_2"),
						MinimalTLSVersion:                to.Ptr("1.2"),
						ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
						ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideDefault),
						PublicDataEndpointEnabled:        to.Ptr(false),
						RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						State:                            to.Ptr("Ready"),
						StorageSizeInGB:                  to.Ptr[int32](1024),
						SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/subnet2"),
						VCores:                           to.Ptr[int32](16),
					},
					SKU: &armsql.SKU{
						Name:     to.Ptr("BC_Gen5"),
						Capacity: to.Ptr[int32](16),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr("BusinessCritical"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ManagedInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ManagedInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceListByResourceGroupWithExpandEqualsAdministrators.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstances_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get managed instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancesClient("20d7082a-0fc7-4468-82bd-542694d5042b", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"testinstance",
		&armsql.ManagedInstancesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstance{
			Name:     to.Ptr("testinstance"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances"),
			ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance"),
			Location: to.Ptr("japaneast"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armsql.ManagedInstanceProperties{
				AdministratorLogin:               to.Ptr("dummylogin"),
				Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
				DNSZone:                          to.Ptr("1b4e2caff2530"),
				FullyQualifiedDomainName:         to.Ptr("testinstance.1b4e2caff2530.database.windows.net"),
				InstancePoolID:                   to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/instancePools/instancePool1"),
				LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseTypeLicenseIncluded),
				MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1"),
				MinimalTLSVersion:                to.Ptr("1.2"),
				ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
				ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideDefault),
				PublicDataEndpointEnabled:        to.Ptr(false),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				ServicePrincipal: &armsql.ServicePrincipal{
					Type:        to.Ptr(armsql.ServicePrincipalTypeSystemAssigned),
					ClientID:    to.Ptr("00000011-1111-2222-2222-123456789111"),
					PrincipalID: to.Ptr("00000011-1111-2222-2222-123456789111"),
					TenantID:    to.Ptr("00000011-1111-2222-2222-123456789111"),
				},
				State:           to.Ptr("Ready"),
				StorageSizeInGB: to.Ptr[int32](1024),
				SubnetID:        to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
				VCores:          to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("GP_Gen4"),
				Capacity: to.Ptr[int32](8),
				Family:   to.Ptr("Gen4"),
				Tier:     to.Ptr("GeneralPurpose"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceGetWithExpandEqualsAdministrators.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get managed instance with $expand=administrators/activedirectory"},
	})
	client = armsql.NewManagedInstancesClient("20d7082a-0fc7-4468-82bd-542694d5042b", cred, &options)
	res, err = client.Get(ctx,
		"testrg",
		"testinstance",
		&armsql.ManagedInstancesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceGetWithExpandEqualsAdministrators.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstance{
			Name:     to.Ptr("testinstance"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances"),
			ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance"),
			Location: to.Ptr("japaneast"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armsql.ManagedInstanceProperties{
				AdministratorLogin: to.Ptr("dummylogin"),
				Administrators: &armsql.ManagedInstanceExternalAdministrator{
					AzureADOnlyAuthentication: to.Ptr(true),
					Login:                     to.Ptr("bob@contoso.com"),
					PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
					Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
					TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
				},
				Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
				DNSZone:                          to.Ptr("1b4e2caff2530"),
				FullyQualifiedDomainName:         to.Ptr("testinstance.1b4e2caff2530.database.windows.net"),
				InstancePoolID:                   to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/instancePools/instancePool1"),
				LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseTypeLicenseIncluded),
				MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1"),
				MinimalTLSVersion:                to.Ptr("1.2"),
				ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
				ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideDefault),
				PublicDataEndpointEnabled:        to.Ptr(false),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				State:                            to.Ptr("Ready"),
				StorageSizeInGB:                  to.Ptr[int32](1024),
				SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
				VCores:                           to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("GP_Gen4"),
				Capacity: to.Ptr[int32](8),
				Family:   to.Ptr("Gen4"),
				Tier:     to.Ptr("GeneralPurpose"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceGetWithExpandEqualsAdministrators.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstances_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create managed instance with all properties"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancesClient("20D7082A-0FC7-4468-82BD-542694D5042B", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testinstance",
		armsql.ManagedInstance{
			Location: to.Ptr("Japan East"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armsql.ManagedInstanceProperties{
				AdministratorLogin:         to.Ptr("dummylogin"),
				AdministratorLoginPassword: to.Ptr("PLACEHOLDER"),
				Administrators: &armsql.ManagedInstanceExternalAdministrator{
					AzureADOnlyAuthentication: to.Ptr(true),
					Login:                     to.Ptr("bob@contoso.com"),
					PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
					Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
					TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
				},
				Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				DNSZonePartner:                   to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance"),
				InstancePoolID:                   to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/instancePools/pool1"),
				LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseTypeLicenseIncluded),
				MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1"),
				MinimalTLSVersion:                to.Ptr("1.2"),
				ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideRedirect),
				PublicDataEndpointEnabled:        to.Ptr(false),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				ServicePrincipal: &armsql.ServicePrincipal{
					Type: to.Ptr(armsql.ServicePrincipalTypeSystemAssigned),
				},
				StorageSizeInGB: to.Ptr[int32](1024),
				SubnetID:        to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
				TimezoneID:      to.Ptr("UTC"),
				VCores:          to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name: to.Ptr("GP_Gen5"),
				Tier: to.Ptr("GeneralPurpose"),
			},
		},
		&armsql.ManagedInstancesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceCreateMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstance{
			Name:     to.Ptr("testinstance"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances"),
			ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance"),
			Location: to.Ptr("japaneast"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armsql.ManagedInstanceProperties{
				AdministratorLogin: to.Ptr("dummylogin"),
				Administrators: &armsql.ManagedInstanceExternalAdministrator{
					AzureADOnlyAuthentication: to.Ptr(true),
					Login:                     to.Ptr("bob@contoso.com"),
					PrincipalType:             to.Ptr(armsql.PrincipalTypeUser),
					Sid:                       to.Ptr("00000011-1111-2222-2222-123456789111"),
					TenantID:                  to.Ptr("00000011-1111-2222-2222-123456789111"),
				},
				Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
				DNSZone:                          to.Ptr("1b4e2caff2530"),
				FullyQualifiedDomainName:         to.Ptr("testinstance.1b4e2caff2530.database.windows.net"),
				InstancePoolID:                   to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/instancePools/pool1"),
				LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseTypeLicenseIncluded),
				MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1"),
				MinimalTLSVersion:                to.Ptr("1.2"),
				ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
				ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideRedirect),
				PublicDataEndpointEnabled:        to.Ptr(false),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				ServicePrincipal: &armsql.ServicePrincipal{
					Type:        to.Ptr(armsql.ServicePrincipalTypeSystemAssigned),
					ClientID:    to.Ptr("00000011-1111-2222-2222-123456789111"),
					PrincipalID: to.Ptr("00000011-1111-2222-2222-123456789111"),
					TenantID:    to.Ptr("00000011-1111-2222-2222-123456789111"),
				},
				State:           to.Ptr("Ready"),
				StorageSizeInGB: to.Ptr[int32](1024),
				SubnetID:        to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
				TimezoneID:      to.Ptr("UTC"),
				VCores:          to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("GP_Gen5"),
				Capacity: to.Ptr[int32](8),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr("GeneralPurpose"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create managed instance with minimal properties"},
	})
	client = armsql.NewManagedInstancesClient("20D7082A-0FC7-4468-82BD-542694D5042B", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testinstance",
		armsql.ManagedInstance{
			Location: to.Ptr("Japan East"),
			Properties: &armsql.ManagedInstanceProperties{
				AdministratorLogin:         to.Ptr("dummylogin"),
				AdministratorLoginPassword: to.Ptr("PLACEHOLDER"),
				LicenseType:                to.Ptr(armsql.ManagedInstanceLicenseTypeLicenseIncluded),
				StorageSizeInGB:            to.Ptr[int32](1024),
				SubnetID:                   to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
				VCores:                     to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name: to.Ptr("GP_Gen4"),
				Tier: to.Ptr("GeneralPurpose"),
			},
		},
		&armsql.ManagedInstancesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceCreateMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstance{
			Name:     to.Ptr("testinstance"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances"),
			ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance"),
			Location: to.Ptr("japaneast"),
			Tags:     map[string]*string{},
			Properties: &armsql.ManagedInstanceProperties{
				AdministratorLogin:               to.Ptr("dummylogin"),
				Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
				DNSZone:                          to.Ptr("1b4e2caff2530"),
				FullyQualifiedDomainName:         to.Ptr("testinstance.1b4e2caff2530.database.windows.net"),
				LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseTypeLicenseIncluded),
				ProvisioningState:                to.Ptr(armsql.ManagedInstancePropertiesProvisioningStateSucceeded),
				ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideRedirect),
				PublicDataEndpointEnabled:        to.Ptr(false),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				State:                            to.Ptr("Ready"),
				StorageSizeInGB:                  to.Ptr[int32](1024),
				SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
				VCores:                           to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("GP_Gen4"),
				Capacity: to.Ptr[int32](8),
				Family:   to.Ptr("Gen4"),
				Tier:     to.Ptr("GeneralPurpose"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstances_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete managed instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancesClient("20D7082A-0FC7-4468-82BD-542694D5042B", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"testinstance",
		&armsql.ManagedInstancesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceDelete.json: %v", err)
	}
}

func TestManagedInstances_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceRemoveMaintenanceConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Remove maintenance policy from managed instance (select default maintenance policy)"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancesClient("20D7082A-0FC7-4468-82BD-542694D5042B", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testrg",
		"testinstance",
		armsql.ManagedInstanceUpdate{
			Properties: &armsql.ManagedInstanceProperties{
				MaintenanceConfigurationID: to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default"),
			},
		},
		&armsql.ManagedInstancesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceRemoveMaintenanceConfiguration.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceRemoveMaintenanceConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstance{
			Name:     to.Ptr("testinstance"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances"),
			ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance"),
			Location: to.Ptr("japaneast"),
			Properties: &armsql.ManagedInstanceProperties{
				AdministratorLogin:         to.Ptr("dummylogin"),
				Collation:                  to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				DNSZone:                    to.Ptr("1b4e2caff2530"),
				FullyQualifiedDomainName:   to.Ptr("testinstance.1b4e2caff2530.database.windows.net"),
				InstancePoolID:             to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/instancePools/instancePool1"),
				LicenseType:                to.Ptr(armsql.ManagedInstanceLicenseTypeLicenseIncluded),
				MaintenanceConfigurationID: to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default"),
				ProxyOverride:              to.Ptr(armsql.ManagedInstanceProxyOverrideDefault),
				PublicDataEndpointEnabled:  to.Ptr(false),
				State:                      to.Ptr("Ready"),
				StorageSizeInGB:            to.Ptr[int32](1024),
				SubnetID:                   to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
				VCores:                     to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("GP_Gen4"),
				Capacity: to.Ptr[int32](8),
				Family:   to.Ptr("Gen4"),
				Tier:     to.Ptr("GeneralPurpose"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceRemoveMaintenanceConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceUpdateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update managed instance with all properties"},
	})
	client = armsql.NewManagedInstancesClient("20D7082A-0FC7-4468-82BD-542694D5042B", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"testrg",
		"testinstance",
		armsql.ManagedInstanceUpdate{
			Properties: &armsql.ManagedInstanceProperties{
				AdministratorLogin:               to.Ptr("dummylogin"),
				AdministratorLoginPassword:       to.Ptr("PLACEHOLDER"),
				Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseTypeBasePrice),
				MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1"),
				MinimalTLSVersion:                to.Ptr("1.2"),
				ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideRedirect),
				PublicDataEndpointEnabled:        to.Ptr(false),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				StorageSizeInGB:                  to.Ptr[int32](448),
				VCores:                           to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("GP_Gen4"),
				Capacity: to.Ptr[int32](8),
				Tier:     to.Ptr("GeneralPurpose"),
			},
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
		},
		&armsql.ManagedInstancesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceUpdateMax.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceUpdateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstance{
			Name:     to.Ptr("testinstance"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances"),
			ID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance"),
			Location: to.Ptr("japaneast"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armsql.ManagedInstanceProperties{
				AdministratorLogin:               to.Ptr("dummylogin"),
				Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
				DNSZone:                          to.Ptr("1b4e2caff2530"),
				FullyQualifiedDomainName:         to.Ptr("testinstance.1b4e2caff2530.database.windows.net"),
				InstancePoolID:                   to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/instancePools/instancePool1"),
				LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseTypeBasePrice),
				MaintenanceConfigurationID:       to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1"),
				MinimalTLSVersion:                to.Ptr("1.2"),
				ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideRedirect),
				PublicDataEndpointEnabled:        to.Ptr(false),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				State:                            to.Ptr("Ready"),
				StorageSizeInGB:                  to.Ptr[int32](448),
				SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
				VCores:                           to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("GP_Gen4"),
				Capacity: to.Ptr[int32](8),
				Family:   to.Ptr("Gen4"),
				Tier:     to.Ptr("GeneralPurpose"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceUpdateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceUpdateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update managed instance with minimal properties"},
	})
	client = armsql.NewManagedInstancesClient("20D7082A-0FC7-4468-82BD-542694D5042B", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"testrg",
		"testinstance",
		armsql.ManagedInstanceUpdate{
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
		},
		&armsql.ManagedInstancesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceUpdateMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceUpdateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ManagedInstance{
			Name:     to.Ptr("testinstance"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances"),
			ID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance"),
			Location: to.Ptr("japaneast"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armsql.ManagedInstanceProperties{
				AdministratorLogin:               to.Ptr("PLACEHOLDER"),
				Collation:                        to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CurrentBackupStorageRedundancy:   to.Ptr(armsql.BackupStorageRedundancyGeo),
				DNSZone:                          to.Ptr("1b4e2caff2530"),
				FullyQualifiedDomainName:         to.Ptr("testinstance.1b4e2caff2530.database.windows.net"),
				InstancePoolID:                   to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/resourceGroups/testrg/providers/Microsoft.Sql/instancePools/instancePool1"),
				LicenseType:                      to.Ptr(armsql.ManagedInstanceLicenseTypeLicenseIncluded),
				MaintenanceConfigurationID:       to.Ptr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default"),
				ProxyOverride:                    to.Ptr(armsql.ManagedInstanceProxyOverrideDefault),
				PublicDataEndpointEnabled:        to.Ptr(false),
				RequestedBackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				State:                            to.Ptr("Ready"),
				StorageSizeInGB:                  to.Ptr[int32](1024),
				SubnetID:                         to.Ptr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
				VCores:                           to.Ptr[int32](8),
			},
			SKU: &armsql.SKU{
				Name:     to.Ptr("GP_Gen4"),
				Capacity: to.Ptr[int32](8),
				Family:   to.Ptr("Gen4"),
				Tier:     to.Ptr("GeneralPurpose"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceUpdateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstances_ListByManagedInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceTopQueriesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Obtain list of instance's top resource consuming queries."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByManagedInstance("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&armsql.ManagedInstancesClientListByManagedInstanceOptions{NumberOfQueries: nil,
			Databases:           nil,
			StartTime:           nil,
			EndTime:             nil,
			Interval:            to.Ptr(armsql.QueryTimeGrainTypePT1H),
			AggregationFunction: nil,
			ObservationMetric:   to.Ptr(armsql.MetricTypeDuration),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceTopQueriesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.TopQueriesListResult{
			Value: []*armsql.TopQueries{
				{
					AggregationFunction: to.Ptr("sum"),
					EndTime:             to.Ptr("03/05/2020 13:00:00"),
					IntervalType:        to.Ptr(armsql.QueryTimeGrainTypeP1D),
					NumberOfQueries:     to.Ptr[int32](5),
					ObservationMetric:   to.Ptr("cpu"),
					Queries: []*armsql.QueryStatisticsProperties{
						{
							DatabaseName: to.Ptr("db1"),
							Intervals: []*armsql.QueryMetricInterval{
								{
									ExecutionCount:    to.Ptr[int64](1),
									IntervalStartTime: to.Ptr("03/03/2020 00:00:00"),
									Metrics: []*armsql.QueryMetricProperties{
										{
											Name:        to.Ptr("cpu"),
											DisplayName: to.Ptr("Cpu"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0.0015841714409722222),
										},
										{
											Name:        to.Ptr("io"),
											DisplayName: to.Ptr("Physical Io Reads"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0.000004340277777777778),
										},
										{
											Name:        to.Ptr("logIo"),
											DisplayName: to.Ptr("Log Writes"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("memory"),
											DisplayName: to.Ptr("Memory consumption"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
											Value:       to.Ptr[float64](8336),
										},
										{
											Name:        to.Ptr("duration"),
											DisplayName: to.Ptr("Query duration"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
											Value:       to.Ptr[float64](11306905),
										}},
								}},
							QueryID: to.Ptr("25"),
						},
						{
							DatabaseName: to.Ptr("db1"),
							Intervals: []*armsql.QueryMetricInterval{
								{
									ExecutionCount:    to.Ptr[int64](1),
									IntervalStartTime: to.Ptr("03/03/2020 00:00:00"),
									Metrics: []*armsql.QueryMetricProperties{
										{
											Name:        to.Ptr("cpu"),
											DisplayName: to.Ptr("Cpu"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0.0009521432291666667),
										},
										{
											Name:        to.Ptr("io"),
											DisplayName: to.Ptr("Physical Io Reads"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](2.3148148148148148e-7),
										},
										{
											Name:        to.Ptr("logIo"),
											DisplayName: to.Ptr("Log Writes"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("memory"),
											DisplayName: to.Ptr("Memory consumption"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
											Value:       to.Ptr[float64](1024),
										},
										{
											Name:        to.Ptr("duration"),
											DisplayName: to.Ptr("Query duration"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
											Value:       to.Ptr[float64](6620020),
										}},
								}},
							QueryID: to.Ptr("21"),
						},
						{
							DatabaseName: to.Ptr("db3"),
							Intervals: []*armsql.QueryMetricInterval{
								{
									ExecutionCount:    to.Ptr[int64](104),
									IntervalStartTime: to.Ptr("03/04/2020 00:00:00"),
									Metrics: []*armsql.QueryMetricProperties{
										{
											Name:        to.Ptr("cpu"),
											DisplayName: to.Ptr("Cpu"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0.0008006611689814815),
										},
										{
											Name:        to.Ptr("io"),
											DisplayName: to.Ptr("Physical Io Reads"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("logIo"),
											DisplayName: to.Ptr("Log Writes"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("memory"),
											DisplayName: to.Ptr("Memory consumption"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("duration"),
											DisplayName: to.Ptr("Query duration"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
											Value:       to.Ptr[float64](5543088),
										}},
								}},
							QueryID: to.Ptr("3"),
						},
						{
							DatabaseName: to.Ptr("db2"),
							Intervals: []*armsql.QueryMetricInterval{
								{
									ExecutionCount:    to.Ptr[int64](89),
									IntervalStartTime: to.Ptr("03/03/2020 00:00:00"),
									Metrics: []*armsql.QueryMetricProperties{
										{
											Name:        to.Ptr("cpu"),
											DisplayName: to.Ptr("Cpu"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0.0006882543402777778),
										},
										{
											Name:        to.Ptr("io"),
											DisplayName: to.Ptr("Physical Io Reads"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("logIo"),
											DisplayName: to.Ptr("Log Writes"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("memory"),
											DisplayName: to.Ptr("Memory consumption"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("duration"),
											DisplayName: to.Ptr("Query duration"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
											Value:       to.Ptr[float64](4761877),
										}},
								}},
							QueryID: to.Ptr("3"),
						},
						{
							DatabaseName: to.Ptr("db3"),
							Intervals: []*armsql.QueryMetricInterval{
								{
									ExecutionCount:    to.Ptr[int64](1),
									IntervalStartTime: to.Ptr("03/04/2020 00:00:00"),
									Metrics: []*armsql.QueryMetricProperties{
										{
											Name:        to.Ptr("cpu"),
											DisplayName: to.Ptr("Cpu"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0.0006220661168981482),
										},
										{
											Name:        to.Ptr("io"),
											DisplayName: to.Ptr("Physical Io Reads"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("logIo"),
											DisplayName: to.Ptr("Log Writes"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("memory"),
											DisplayName: to.Ptr("Memory consumption"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
											Value:       to.Ptr[float64](1024),
										},
										{
											Name:        to.Ptr("duration"),
											DisplayName: to.Ptr("Query duration"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
											Value:       to.Ptr[float64](4454161),
										}},
								}},
							QueryID: to.Ptr("22"),
						}},
					StartTime: to.Ptr("03/01/2020 00:00:00"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TopQueriesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TopQueriesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceTopQueriesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceTopQueriesListMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Obtain list of instance's top resource consuming queries. Full-blown request and response."},
	})
	client = armsql.NewManagedInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager = client.ListByManagedInstance("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&armsql.ManagedInstancesClientListByManagedInstanceOptions{NumberOfQueries: nil,
			Databases:           to.Ptr("db1,db2"),
			StartTime:           to.Ptr("2020-03-10T12:00:00Z"),
			EndTime:             to.Ptr("2020-03-12T12:00:00Z"),
			Interval:            to.Ptr(armsql.QueryTimeGrainTypeP1D),
			AggregationFunction: nil,
			ObservationMetric:   to.Ptr(armsql.MetricTypeCPU),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceTopQueriesListMax.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.TopQueriesListResult{
			Value: []*armsql.TopQueries{
				{
					AggregationFunction: to.Ptr("sum"),
					EndTime:             to.Ptr("03/12/2020 13:00:00"),
					IntervalType:        to.Ptr(armsql.QueryTimeGrainTypeP1D),
					NumberOfQueries:     to.Ptr[int32](5),
					ObservationMetric:   to.Ptr("cpu"),
					Queries: []*armsql.QueryStatisticsProperties{
						{
							DatabaseName: to.Ptr("db1"),
							Intervals: []*armsql.QueryMetricInterval{
								{
									ExecutionCount:    to.Ptr[int64](1),
									IntervalStartTime: to.Ptr("03/11/2020 00:00:00"),
									Metrics: []*armsql.QueryMetricProperties{
										{
											Name:        to.Ptr("cpu"),
											DisplayName: to.Ptr("Cpu"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0.0015934667245370371),
										},
										{
											Name:        to.Ptr("io"),
											DisplayName: to.Ptr("Physical Io Reads"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0.000004224537037037037),
										},
										{
											Name:        to.Ptr("logIo"),
											DisplayName: to.Ptr("Log Writes"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("memory"),
											DisplayName: to.Ptr("Memory consumption"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
											Value:       to.Ptr[float64](8336),
										},
										{
											Name:        to.Ptr("duration"),
											DisplayName: to.Ptr("Query duration"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
											Value:       to.Ptr[float64](11091296),
										}},
								}},
							QueryID: to.Ptr("28"),
						},
						{
							DatabaseName: to.Ptr("db1"),
							Intervals: []*armsql.QueryMetricInterval{
								{
									ExecutionCount:    to.Ptr[int64](1),
									IntervalStartTime: to.Ptr("03/11/2020 00:00:00"),
									Metrics: []*armsql.QueryMetricProperties{
										{
											Name:        to.Ptr("cpu"),
											DisplayName: to.Ptr("Cpu"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0.0009522783564814815),
										},
										{
											Name:        to.Ptr("io"),
											DisplayName: to.Ptr("Physical Io Reads"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](1.7361111111111112e-7),
										},
										{
											Name:        to.Ptr("logIo"),
											DisplayName: to.Ptr("Log Writes"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("memory"),
											DisplayName: to.Ptr("Memory consumption"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
											Value:       to.Ptr[float64](1024),
										},
										{
											Name:        to.Ptr("duration"),
											DisplayName: to.Ptr("Query duration"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
											Value:       to.Ptr[float64](6625562),
										}},
								}},
							QueryID: to.Ptr("24"),
						},
						{
							DatabaseName: to.Ptr("db1"),
							Intervals: []*armsql.QueryMetricInterval{
								{
									ExecutionCount:    to.Ptr[int64](82),
									IntervalStartTime: to.Ptr("03/11/2020 00:00:00"),
									Metrics: []*armsql.QueryMetricProperties{
										{
											Name:        to.Ptr("cpu"),
											DisplayName: to.Ptr("Cpu"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0.0007183139467592593),
										},
										{
											Name:        to.Ptr("io"),
											DisplayName: to.Ptr("Physical Io Reads"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("logIo"),
											DisplayName: to.Ptr("Log Writes"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("memory"),
											DisplayName: to.Ptr("Memory consumption"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("duration"),
											DisplayName: to.Ptr("Query duration"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
											Value:       to.Ptr[float64](4970199),
										}},
								}},
							QueryID: to.Ptr("3"),
						},
						{
							DatabaseName: to.Ptr("db1"),
							Intervals: []*armsql.QueryMetricInterval{
								{
									ExecutionCount:    to.Ptr[int64](1),
									IntervalStartTime: to.Ptr("03/11/2020 00:00:00"),
									Metrics: []*armsql.QueryMetricProperties{
										{
											Name:        to.Ptr("cpu"),
											DisplayName: to.Ptr("Cpu"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0.0006494454571759259),
										},
										{
											Name:        to.Ptr("io"),
											DisplayName: to.Ptr("Physical Io Reads"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0.000005034722222222222),
										},
										{
											Name:        to.Ptr("logIo"),
											DisplayName: to.Ptr("Log Writes"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("memory"),
											DisplayName: to.Ptr("Memory consumption"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
											Value:       to.Ptr[float64](1024),
										},
										{
											Name:        to.Ptr("duration"),
											DisplayName: to.Ptr("Query duration"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
											Value:       to.Ptr[float64](4530668),
										}},
								}},
							QueryID: to.Ptr("29"),
						},
						{
							DatabaseName: to.Ptr("db2"),
							Intervals: []*armsql.QueryMetricInterval{
								{
									ExecutionCount:    to.Ptr[int64](1),
									IntervalStartTime: to.Ptr("03/11/2020 00:00:00"),
									Metrics: []*armsql.QueryMetricProperties{
										{
											Name:        to.Ptr("cpu"),
											DisplayName: to.Ptr("Cpu"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0.0006275368923611112),
										},
										{
											Name:        to.Ptr("io"),
											DisplayName: to.Ptr("Physical Io Reads"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("logIo"),
											DisplayName: to.Ptr("Log Writes"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypePercentage),
											Value:       to.Ptr[float64](0),
										},
										{
											Name:        to.Ptr("memory"),
											DisplayName: to.Ptr("Memory consumption"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeKB),
											Value:       to.Ptr[float64](1024),
										},
										{
											Name:        to.Ptr("duration"),
											DisplayName: to.Ptr("Query duration"),
											Unit:        to.Ptr(armsql.QueryMetricUnitTypeMicroseconds),
											Value:       to.Ptr[float64](4349943),
										}},
								}},
							QueryID: to.Ptr("25"),
						}},
					StartTime: to.Ptr("03/10/2020 00:00:00"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TopQueriesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TopQueriesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceTopQueriesListMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceTopQueriesListMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Obtain list of instance's top resource consuming queries. Minimal request and response."},
	})
	client = armsql.NewManagedInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager = client.ListByManagedInstance("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&armsql.ManagedInstancesClientListByManagedInstanceOptions{NumberOfQueries: nil,
			Databases:           nil,
			StartTime:           nil,
			EndTime:             nil,
			Interval:            nil,
			AggregationFunction: nil,
			ObservationMetric:   nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceTopQueriesListMin.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.TopQueriesListResult{
			Value: []*armsql.TopQueries{
				{
					AggregationFunction: to.Ptr("sum"),
					EndTime:             to.Ptr("03/11/2020 12:24:07"),
					IntervalType:        to.Ptr(armsql.QueryTimeGrainTypePT1H),
					NumberOfQueries:     to.Ptr[int32](5),
					ObservationMetric:   to.Ptr("cpu"),
					Queries:             []*armsql.QueryStatisticsProperties{},
					StartTime:           to.Ptr("03/10/2020 12:00:00"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TopQueriesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TopQueriesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceTopQueriesListMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedInstances_Failover(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/FailoverManagedInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Failover a managed instance."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewManagedInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginFailover(ctx,
		"group1",
		"instanceName",
		&armsql.ManagedInstancesClientBeginFailoverOptions{ReplicaType: to.Ptr(armsql.ReplicaTypePrimary),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/FailoverManagedInstance.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/FailoverManagedInstance.json: %v", err)
	}
}

func TestRestorableDroppedDatabases_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ListRestorableDroppedDatabasesByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a list of restorable dropped databases."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewRestorableDroppedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("Default-SQL-SouthEastAsia",
		"testsvr",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ListRestorableDroppedDatabasesByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.RestorableDroppedDatabaseListResult{
			Value: []*armsql.RestorableDroppedDatabase{
				{
					Name:     to.Ptr("testdb,131403269876900000"),
					Type:     to.Ptr("Microsoft.Sql/servers/restorableDroppedDatabases"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/restorableDroppedDatabases/testdb"),
					Location: to.Ptr("southeastasia"),
					Properties: &armsql.RestorableDroppedDatabaseProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						CreationDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
						DatabaseName:            to.Ptr("testdb"),
						DeletionDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T02:49:47.69Z"); return t }()),
						MaxSizeBytes:            to.Ptr[int64](268435456000),
					},
					SKU: &armsql.SKU{
						Name: to.Ptr("BC_Gen4_2"),
						Tier: to.Ptr("BusinessCritical"),
					},
				},
				{
					Name:     to.Ptr("testdb2,131403269876900000"),
					Type:     to.Ptr("Microsoft.Sql/servers/restorableDroppedDatabases"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/restorableDroppedDatabases/testdb2"),
					Location: to.Ptr("southeastasia"),
					Properties: &armsql.RestorableDroppedDatabaseProperties{
						BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
						CreationDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-07T04:41:33.937Z"); return t }()),
						DatabaseName:            to.Ptr("testdb2"),
						DeletionDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T02:49:47.69Z"); return t }()),
						MaxSizeBytes:            to.Ptr[int64](268435456000),
					},
					SKU: &armsql.SKU{
						Name: to.Ptr("GP_Gen4_2"),
						Tier: to.Ptr("GeneralPurpose"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorableDroppedDatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorableDroppedDatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ListRestorableDroppedDatabasesByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableDroppedDatabases_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/GetRestorableDroppedDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a restorable dropped database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewRestorableDroppedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb,131403269876900000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/GetRestorableDroppedDatabase.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.RestorableDroppedDatabase{
			Name:     to.Ptr("testdb,131403269876900000"),
			Type:     to.Ptr("Microsoft.Sql/servers/restorableDroppedDatabases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/restorableDroppedDatabases/testdb"),
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.RestorableDroppedDatabaseProperties{
				BackupStorageRedundancy: to.Ptr(armsql.BackupStorageRedundancyGeo),
				CreationDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-07T04:41:33.937Z"); return t }()),
				DatabaseName:            to.Ptr("testdb"),
				DeletionDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T02:49:47.69Z"); return t }()),
				MaxSizeBytes:            to.Ptr[int64](268435456000),
			},
			SKU: &armsql.SKU{
				Name: to.Ptr("BC_Gen4_2"),
				Tier: to.Ptr("BusinessCritical"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RestorableDroppedDatabase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RestorableDroppedDatabase)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/GetRestorableDroppedDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableDroppedManagedDatabases_ListByInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/RestorableDroppedManagedDatabaseListByManagedInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List restorable dropped databases by managed instances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewRestorableDroppedManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByInstance("Test1",
		"managedInstance",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/RestorableDroppedManagedDatabaseListByManagedInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.RestorableDroppedManagedDatabaseListResult{
			Value: []*armsql.RestorableDroppedManagedDatabase{
				{
					Name:     to.Ptr("testdb,131403269876900000"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances/restorableDroppedDatabases"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/restorableDroppedDatabases/testdb,131403269876900000"),
					Location: to.Ptr("southeastasia"),
					Properties: &armsql.RestorableDroppedManagedDatabaseProperties{
						CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-07T04:41:33.937Z"); return t }()),
						DatabaseName: to.Ptr("testdb"),
						DeletionDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T02:49:47.69Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("testdb2,131403269876900000"),
					Type:     to.Ptr("Microsoft.Sql/managedInstances/restorableDroppedDatabases"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/restorableDroppedDatabases/testdb2,131403269876900000"),
					Location: to.Ptr("southeastasia"),
					Properties: &armsql.RestorableDroppedManagedDatabaseProperties{
						CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-07T04:41:33.937Z"); return t }()),
						DatabaseName: to.Ptr("testdb2"),
						DeletionDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T02:49:47.69Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorableDroppedManagedDatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorableDroppedManagedDatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/RestorableDroppedManagedDatabaseListByManagedInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableDroppedManagedDatabases_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/GetRestorableDroppedManagedDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a restorable dropped managed database."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewRestorableDroppedManagedDatabasesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Test1",
		"managedInstance",
		"testdb,131403269876900000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/GetRestorableDroppedManagedDatabase.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.RestorableDroppedManagedDatabase{
			Name:     to.Ptr("testdb,131403269876900000"),
			Type:     to.Ptr("Microsoft.Sql/managedInstances/restorableDroppedDatabases"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/restorableDroppedDatabases/testdb,131403269876900000"),
			Location: to.Ptr("southeastasia"),
			Properties: &armsql.RestorableDroppedManagedDatabaseProperties{
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-07T04:41:33.937Z"); return t }()),
				DatabaseName: to.Ptr("testdb"),
				DeletionDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T02:49:47.69Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RestorableDroppedManagedDatabase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RestorableDroppedManagedDatabase)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/GetRestorableDroppedManagedDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerConnectionPolicies_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerConnectionPoliciesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a server connection policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerConnectionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"rgtest-12",
		"servertest-6285",
		armsql.ConnectionPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerConnectionPoliciesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerConnectionPolicy{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.Sql/servers/connectionPolicies"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rgtest-12/providers/Microsoft.Sql/servers/servertest-6285/connectionPolicies/default"),
			Location: to.Ptr("eastus"),
			Properties: &armsql.ServerConnectionPolicyProperties{
				ConnectionType: to.Ptr(armsql.ServerConnectionTypeRedirect),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerConnectionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerConnectionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerConnectionPoliciesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerConnectionPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerConnectionPoliciesUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates a server connection policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerConnectionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testserver",
		armsql.ConnectionPolicyNameDefault,
		armsql.ServerConnectionPolicy{
			Properties: &armsql.ServerConnectionPolicyProperties{
				ConnectionType: to.Ptr(armsql.ServerConnectionTypeRedirect),
			},
		},
		&armsql.ServerConnectionPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerConnectionPoliciesUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerConnectionPoliciesUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerConnectionPolicy{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.Sql/servers/connectionPolicies"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Sql/servers/testserver/connectionPolicies/default"),
			Location: to.Ptr("eastus"),
			Properties: &armsql.ServerConnectionPolicyProperties{
				ConnectionType: to.Ptr(armsql.ServerConnectionTypeRedirect),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerConnectionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerConnectionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerConnectionPoliciesUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerConnectionPolicies_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerConnectionPoliciesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists a servers connection policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerConnectionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("rgtest-12",
		"servertest-6285",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerConnectionPoliciesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerConnectionPolicyListResult{
			Value: []*armsql.ServerConnectionPolicy{
				{
					Name:     to.Ptr("default"),
					Type:     to.Ptr("Microsoft.Sql/servers/connectionPolicies"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rgtest-12/providers/Microsoft.Sql/servers/servertest-6285/connectionPolicies/default"),
					Location: to.Ptr("eastus"),
					Properties: &armsql.ServerConnectionPolicyProperties{
						ConnectionType: to.Ptr(armsql.ServerConnectionTypeRedirect),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerConnectionPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerConnectionPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerConnectionPoliciesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDistributedAvailabilityGroups_ListByInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsListByInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all distributed availability groups in instance."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDistributedAvailabilityGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByInstance("testrg",
		"testcl",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsListByInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.DistributedAvailabilityGroupsListResult{
			Value: []*armsql.DistributedAvailabilityGroup{
				{
					Name: to.Ptr("dag"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/distributedAvailabilityGroups"),
					ID:   to.Ptr("/subscriptions/f2669dff-5f08-45dd-b857-b2a60b72cdc9/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/distributedAvailabilityGroups/dag"),
					Properties: &armsql.DistributedAvailabilityGroupProperties{
						DistributedAvailabilityGroupID: to.Ptr("6bc05a51-aa36-a196-09bd-481d7a0973c0"),
						LastHardenedLsn:                to.Ptr("39000000030400001"),
						LinkState:                      to.Ptr("Catchup"),
						ReplicationMode:                to.Ptr(armsql.ReplicationModeAsync),
						SourceEndpoint:                 to.Ptr("TCP://SERVER:7022"),
						SourceReplicaID:                to.Ptr("543dd519-7585-faff-6ad2-11fb826d4f4d"),
						TargetDatabase:                 to.Ptr("testdb"),
						TargetReplicaID:                to.Ptr("7e218aba-0a53-6231-be09-895d99f96bf2"),
					},
				},
				{
					Name: to.Ptr("dag2"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/distributedAvailabilityGroups"),
					ID:   to.Ptr("/subscriptions/f2669dff-5f08-45dd-b857-b2a60b72cdc9/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/distributedAvailabilityGroups/dag2"),
					Properties: &armsql.DistributedAvailabilityGroupProperties{
						DistributedAvailabilityGroupID: to.Ptr("7ec05a51-aa36-a196-09bd-481d7a0973c0"),
						LastHardenedLsn:                to.Ptr("39000000030400001"),
						LinkState:                      to.Ptr("Catchup"),
						ReplicationMode:                to.Ptr(armsql.ReplicationModeAsync),
						SourceEndpoint:                 to.Ptr("TCP://SERVER:7022"),
						SourceReplicaID:                to.Ptr("d423d519-7585-faff-6ad2-11fb826d4f4d"),
						TargetDatabase:                 to.Ptr("testdb2"),
						TargetReplicaID:                to.Ptr("32578aba-0a53-6231-be09-895d99f96bf2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DistributedAvailabilityGroupsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DistributedAvailabilityGroupsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsListByInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDistributedAvailabilityGroups_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the distributed availability group info."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDistributedAvailabilityGroupsClient("f2669dff-5f08-45dd-b857-b2a60b72cdc9", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"testcl",
		"dag",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DistributedAvailabilityGroup{
			Name: to.Ptr("dag"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/distributedAvailabilityGroups"),
			ID:   to.Ptr("/subscriptions/f2669dff-5f08-45dd-b857-b2a60b72cdc9/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/distributedAvailabilityGroups/dag"),
			Properties: &armsql.DistributedAvailabilityGroupProperties{
				DistributedAvailabilityGroupID: to.Ptr("6bc05a51-aa36-a196-09bd-481d7a0973c0"),
				LastHardenedLsn:                to.Ptr("39000000030400001"),
				LinkState:                      to.Ptr("Catchup"),
				ReplicationMode:                to.Ptr(armsql.ReplicationModeAsync),
				SourceEndpoint:                 to.Ptr("TCP://SERVER:7022"),
				SourceReplicaID:                to.Ptr("543dd519-7585-faff-6ad2-11fb826d4f4d"),
				TargetDatabase:                 to.Ptr("testdb"),
				TargetReplicaID:                to.Ptr("7e218aba-0a53-6231-be09-895d99f96bf2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DistributedAvailabilityGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DistributedAvailabilityGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDistributedAvailabilityGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a distributed availability group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDistributedAvailabilityGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testcl",
		"dag",
		armsql.DistributedAvailabilityGroup{
			Properties: &armsql.DistributedAvailabilityGroupProperties{
				PrimaryAvailabilityGroupName:   to.Ptr("BoxLocalAg1"),
				SecondaryAvailabilityGroupName: to.Ptr("testcl"),
				SourceEndpoint:                 to.Ptr("TCP://SERVER:7022"),
				TargetDatabase:                 to.Ptr("testdb"),
			},
		},
		&armsql.DistributedAvailabilityGroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DistributedAvailabilityGroup{
			Name: to.Ptr("dag"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/distributedAvailabilityGroups"),
			ID:   to.Ptr("/subscriptions/f2669dff-5f08-45dd-b857-b2a60b72cdc9/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/distributedAvailabilityGroups/dag"),
			Properties: &armsql.DistributedAvailabilityGroupProperties{
				PrimaryAvailabilityGroupName:   to.Ptr("BoxLocalAg1"),
				SecondaryAvailabilityGroupName: to.Ptr("testcl"),
				SourceEndpoint:                 to.Ptr("TCP://SERVER:7022"),
				TargetDatabase:                 to.Ptr("testdb"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DistributedAvailabilityGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DistributedAvailabilityGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDistributedAvailabilityGroups_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Initiate a distributed availability group drop."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDistributedAvailabilityGroupsClient("f2669dff-5f08-45dd-b857-b2a60b72cdc9", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"testcl",
		"dag",
		&armsql.DistributedAvailabilityGroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsDelete.json: %v", err)
	}
}

func TestDistributedAvailabilityGroups_Update(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the distributed availability group replication mode before deleting it."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewDistributedAvailabilityGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testrg",
		"testcl",
		"dag",
		armsql.DistributedAvailabilityGroup{
			Properties: &armsql.DistributedAvailabilityGroupProperties{
				ReplicationMode: to.Ptr(armsql.ReplicationModeSync),
			},
		},
		&armsql.DistributedAvailabilityGroupsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.DistributedAvailabilityGroup{
			Name: to.Ptr("dag"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/distributedAvailabilityGroups"),
			ID:   to.Ptr("/subscriptions/f2669dff-5f08-45dd-b857-b2a60b72cdc9/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/distributedAvailabilityGroups/dag"),
			Properties: &armsql.DistributedAvailabilityGroupProperties{
				ReplicationMode: to.Ptr(armsql.ReplicationModeSync),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DistributedAvailabilityGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DistributedAvailabilityGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/DistributedAvailabilityGroupsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerTrustCertificates_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerTrustCertificatesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets server trust certificate."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerTrustCertificatesClient("38e0dc56-907f-45ba-a97c-74233baad471", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"testcl",
		"customerCertificateName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerTrustCertificatesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerTrustCertificate{
			Name: to.Ptr("customerCertificateName"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/serverTrustCertificates"),
			ID:   to.Ptr("/subscriptions/38e0dc56-907f-45ba-a97c-74233baad471/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/serverTrustCertificates/customerCertificateName"),
			Properties: &armsql.ServerTrustCertificateProperties{
				CertificateName: to.Ptr("customerCertificateName"),
				PublicBlob:      to.Ptr("308203B23082021AA003020102021034C597BA"),
				Thumbprint:      to.Ptr("57CFA9CF16F2FB2775AF059A95C6D5B897DA2C05"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerTrustCertificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerTrustCertificate)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerTrustCertificatesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerTrustCertificates_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerTrustCertificatesCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create server trust certificate."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerTrustCertificatesClient("0574222d-5c7f-489c-a172-b3013eafab53", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testcl",
		"customerCertificateName",
		armsql.ServerTrustCertificate{
			Properties: &armsql.ServerTrustCertificateProperties{
				PublicBlob: to.Ptr("308203AE30820296A0030201020210"),
			},
		},
		&armsql.ServerTrustCertificatesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerTrustCertificatesCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerTrustCertificatesCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.ServerTrustCertificate{
			Name: to.Ptr("customerCertificateName"),
			Type: to.Ptr("Microsoft.Sql/managedInstances/serverTrustCertificates"),
			ID:   to.Ptr("/subscriptions/0574222d-5c7f-489c-a172-b3013eafab53/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/serverTrustCertificates/customerCertificateName"),
			Properties: &armsql.ServerTrustCertificateProperties{
				CertificateName: to.Ptr("customerCertificateName"),
				PublicBlob:      to.Ptr("308203AE30820296A0030201020210"),
				Thumbprint:      to.Ptr("33702D20EC86119985283"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerTrustCertificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerTrustCertificate)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerTrustCertificatesCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerTrustCertificates_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerTrustCertificatesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete server trust certificate."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerTrustCertificatesClient("38e0dc56-907f-45ba-a97c-74233baad471", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"testcl",
		"customerCertificateName",
		&armsql.ServerTrustCertificatesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerTrustCertificatesDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerTrustCertificatesDelete.json: %v", err)
	}
}

func TestServerTrustCertificates_ListByInstance(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerTrustCertificatesListByInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a list of server trust certificates on a given server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewServerTrustCertificatesClient("38e0dc56-907f-45ba-a97c-74233baad471", cred, &options)
	pager := client.ListByInstance("testrg",
		"testcl",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerTrustCertificatesListByInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.ServerTrustCertificatesListResult{
			Value: []*armsql.ServerTrustCertificate{
				{
					Name: to.Ptr("customerCertificate1"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/serverTrustCertificates"),
					ID:   to.Ptr("/subscriptions/38e0dc56-907f-45ba-a97c-74233baad471/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/serverTrustCertificates/customerCertificate1"),
					Properties: &armsql.ServerTrustCertificateProperties{
						CertificateName: to.Ptr("customerCertificate1"),
						PublicBlob:      to.Ptr("0x
						Thumbprint:      to.Ptr("33702D20EC861199852837AE6BD1A71544B681E2"),
					},
				},
				{
					Name: to.Ptr("customerCertificate2"),
					Type: to.Ptr("Microsoft.Sql/managedInstances/serverTrustCertificates"),
					ID:   to.Ptr("/subscriptions/38e0dc56-907f-45ba-a97c-74233baad471/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testcl/serverTrustCertificates/customerCertificate2"),
					Properties: &armsql.ServerTrustCertificateProperties{
						CertificateName: to.Ptr("customerCertificate2"),
						PublicBlob:      to.Ptr("0x308203B23082021AA003020102021034C597BA79AD71844EE734A3546871BC300D06092A864886F70D01010B05003015311330110603550403130A48796272696443657274301E170D3231303630313130333430335A170D3330313231323030303030305A3015311330110603550403130A48796272696443657274308201A2300D06092A864886F70D01010105000382018F003082018A0282018100A75300A5CDC265F24C78DCB58389079D16878BBA3CF75D33987AE775BDB43810B2A925CD936F3068CD0EC59B7FE62D099D9ADCA8BC1C3A5076EAA46DBF3519830FB068876680558A5B827E2E661F24DB7912DB5DD971C60E2DFBC085F460027A803B37AD031CE851D06C53514F12E7F05FFA3833928F577D115A1DBDFECB7B6F7B03674458CBDB4DDC536FE19E2D52B167D63210EBEBF249396451D80CFCA23C188369E2D383A7EEBD3D5AC6EEA13571E471726068DB3912FE0124B578E1806E183985EA0A03BBCC6AE502ED01D85DA3D9C39638D95F398F034954CEA44BB0C7616FC176FAF5EAD87E7AD64A47A39EAB0010BB157C8FF8D4175ABE5DB5130D4E761D96613D0797B756D5D945B797062D23ABD2436E9C1CC1163AB8163B068B783DBF171823D1229BBCC1F287403874FDE00A266B7D105370B8247B4C0A48CCB4756E5DA543BEAE01A30FC5198763A529CCEE385987E7056493E37C15A356C4D87EF44AF2A7DA4181369DF36765180D2D7603AD163C6C9D4543A696ED4D1FB1C90203010001300D06092A864886F70D01010B0500038201810044EAF256ACEB3B455FC1E01168DCB8E1682D4643D1DA97F297D6A74C9EE68407EEBD333821836941A6728A2582BF6D4C68DEF5811A1A405991A6436B69AF62898E7EF7273E0570CB15768EA6B5339C92BF6875E68137CD93B8D37D298220E7CADEEAAE64CCD9B8AC1FFCBEDF5D7ECE5106B9173A06FBA2842607CDF38E143E78755897F05EF316D5C40D4D207410ECFB0DE24C6637AB5BF9FA94F0DDE065E465AA09B4F6B143371880A0BAC410CFB3AD220EC9FC4788AF3599175C62B85A44B80679F66EF6872CA024DA111720818FDAF387B60AB5ED3A41ADD2254770AF36F1974DAEB8A166E69225A4B795E8BECA977F0FCF3612E1C18B18DE6EE5D1213DD4A0D4F8C1BFD6A7EC53A1B838886483918E2537B33A7721222B4A0250D51E728AE7C861698E7D95A0CE4A1C32F04198476C4AE347C90F46514A62D82C38DA4ABD9B5D7A9ACCD98D74443865052AA7E5675D0BF994E95002D6990AA0A8D4797B8252A0387B5B3011790D28E3EA2E0034A034194AA72C649FB24F9800B1F9FCA83B"),
						Thumbprint:      to.Ptr("57CFA9CF16F2FB2775AF059A95C6D5B897DA2C05"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerTrustCertificatesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerTrustCertificatesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ServerTrustCertificatesListByInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPv6FirewallRules_Get(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/IPv6FirewallRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get IPv6 Firewall Rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewIPv6FirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"firewallrulecrudtest-12",
		"firewallrulecrudtest-6285",
		"firewallrulecrudtest-2304",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/IPv6FirewallRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.IPv6FirewallRule{
			Name: to.Ptr("firewallrulecrudtest-2304"),
			Type: to.Ptr("Microsoft.Sql/servers/ipv6FirewallRules"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/ipv6FirewallRules/firewallrulecrudtest-2304"),
			Properties: &armsql.IPv6ServerFirewallRuleProperties{
				EndIPv6Address:   to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0000"),
				StartIPv6Address: to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IPv6FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IPv6FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/IPv6FirewallRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPv6FirewallRules_CreateOrUpdate(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/IPv6FirewallRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an IPv6 firewall rule max/min"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewIPv6FirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"firewallrulecrudtest-12",
		"firewallrulecrudtest-6285",
		"firewallrulecrudtest-5370",
		armsql.IPv6FirewallRule{
			Properties: &armsql.IPv6ServerFirewallRuleProperties{
				EndIPv6Address:   to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0003"),
				StartIPv6Address: to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0003"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/IPv6FirewallRuleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.IPv6FirewallRule{
			Name: to.Ptr("firewallrulecrudtest-5370"),
			Type: to.Ptr("Microsoft.Sql/servers/ipv6FirewallRules"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/ipv6FirewallRules/firewallrulecrudtest-5370"),
			Properties: &armsql.IPv6ServerFirewallRuleProperties{
				EndIPv6Address:   to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0003"),
				StartIPv6Address: to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0003"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IPv6FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IPv6FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/IPv6FirewallRuleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/IPv6FirewallRuleUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an IPv6 firewall rule max/min"},
	})
	client = armsql.NewIPv6FirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"firewallrulecrudtest-12",
		"firewallrulecrudtest-6285",
		"firewallrulecrudtest-3927",
		armsql.IPv6FirewallRule{
			Properties: &armsql.IPv6ServerFirewallRuleProperties{
				EndIPv6Address:   to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0001"),
				StartIPv6Address: to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0001"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/IPv6FirewallRuleUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsql.IPv6FirewallRule{
			Name: to.Ptr("firewallrulecrudtest-3927"),
			Type: to.Ptr("Microsoft.Sql/servers/ipv6FirewallRules"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/ipv6FirewallRules/firewallrulecrudtest-3927"),
			Properties: &armsql.IPv6ServerFirewallRuleProperties{
				EndIPv6Address:   to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0001"),
				StartIPv6Address: to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0001"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IPv6FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IPv6FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/IPv6FirewallRuleUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPv6FirewallRules_Delete(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/IPv6FirewallRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an IPv6 firewall rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewIPv6FirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"firewallrulecrudtest-9886",
		"firewallrulecrudtest-2368",
		"firewallrulecrudtest-7011",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/IPv6FirewallRuleDelete.json: %v", err)
	}
}

func TestIPv6FirewallRules_ListByServer(t *testing.T) {
	// From example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/IPv6FirewallRuleList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List IPv6 Firewall Rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsql.NewIPv6FirewallRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("firewallrulecrudtest-12",
		"firewallrulecrudtest-6285",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/IPv6FirewallRuleList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsql.IPv6FirewallRuleListResult{
			Value: []*armsql.IPv6FirewallRule{
				{
					Name: to.Ptr("firewallrulecrudtest-2304"),
					Type: to.Ptr("Microsoft.Sql/servers/ipv6FirewallRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/ipv6FirewallRules/firewallrulecrudtest-2304"),
					Properties: &armsql.IPv6ServerFirewallRuleProperties{
						EndIPv6Address:   to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0000"),
						StartIPv6Address: to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0000"),
					},
				},
				{
					Name: to.Ptr("firewallrulecrudtest-3927"),
					Type: to.Ptr("Microsoft.Sql/servers/ipv6FirewallRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/ipv6FirewallRules/firewallrulecrudtest-3927"),
					Properties: &armsql.IPv6ServerFirewallRuleProperties{
						EndIPv6Address:   to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0001"),
						StartIPv6Address: to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0001"),
					},
				},
				{
					Name: to.Ptr("firewallrulecrudtest-5370"),
					Type: to.Ptr("Microsoft.Sql/servers/ipv6FirewallRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/ipv6FirewallRules/firewallrulecrudtest-5370"),
					Properties: &armsql.IPv6ServerFirewallRuleProperties{
						EndIPv6Address:   to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0003"),
						StartIPv6Address: to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0003"),
					},
				},
				{
					Name: to.Ptr("firewallrulecrudtest-5767"),
					Type: to.Ptr("Microsoft.Sql/servers/ipv6FirewallRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285/ipv6FirewallRules/firewallrulecrudtest-5767"),
					Properties: &armsql.IPv6ServerFirewallRuleProperties{
						EndIPv6Address:   to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0002"),
						StartIPv6Address: to.Ptr("0000:0000:0000:0000:0000:ffff:0000:0002"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IPv6FirewallRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IPv6FirewallRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sql/resource-manager/Microsoft.Sql/preview/2021-08-01-preview/examples/IPv6FirewallRuleList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
