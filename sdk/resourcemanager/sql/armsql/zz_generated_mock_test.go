//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsql

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestRecoverableDatabases_Get(t *testing.T) {
	// From example Get a recoverable database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecoverableDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"recoverabledatabasetest-6852",
		"recoverabledatabasetest-2080",
		"recoverabledatabasetest-9187",
		&RecoverableDatabasesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecoverableDatabase.ID == nil {
		t.Fatal("RecoverableDatabase.ID should not be nil!")
	}
}

func TestRecoverableDatabases_ListByServer(t *testing.T) {
	// From example Get list of restorable dropped databases
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecoverableDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListByServer(ctx,
		"recoverabledatabasetest-1234",
		"recoverabledatabasetest-7177",
		&RecoverableDatabasesListByServerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServerConnectionPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create or update a server's secure connection policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerConnectionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"test-1234",
		"test-5678",
		ConnectionPolicyNameDefault,
		ServerConnectionPolicy{
			Properties: &ServerConnectionPolicyProperties{
				ConnectionType: ServerConnectionTypeProxy.ToPtr(),
			},
		},
		&ServerConnectionPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerConnectionPolicy.ID == nil {
		t.Fatal("ServerConnectionPolicy.ID should not be nil!")
	}
}

func TestServerConnectionPolicies_Get(t *testing.T) {
	// From example Get a server's secure connection policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerConnectionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"test-1234",
		"test-5678",
		ConnectionPolicyNameDefault,
		&ServerConnectionPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerConnectionPolicy.ID == nil {
		t.Fatal("ServerConnectionPolicy.ID should not be nil!")
	}
}

func TestDataMaskingPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create or update data masking policy max
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataMaskingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		DataMaskingPolicy{
			Properties: &DataMaskingPolicyProperties{
				DataMaskingState: DataMaskingStateEnabled.ToPtr(),
				ExemptPrincipals: to.StringPtr("testuser;"),
			},
		},
		&DataMaskingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingPolicy.ID == nil {
		t.Fatal("DataMaskingPolicy.ID should not be nil!")
	}

	// From example Create or update data masking policy min
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		DataMaskingPolicy{
			Properties: &DataMaskingPolicyProperties{
				DataMaskingState: DataMaskingStateEnabled.ToPtr(),
			},
		},
		&DataMaskingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingPolicy.ID == nil {
		t.Fatal("DataMaskingPolicy.ID should not be nil!")
	}
}

func TestDataMaskingPolicies_Get(t *testing.T) {
	// From example Get data masking policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataMaskingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		&DataMaskingPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingPolicy.ID == nil {
		t.Fatal("DataMaskingPolicy.ID should not be nil!")
	}
}

func TestDataMaskingRules_CreateOrUpdate(t *testing.T) {
	// From example Create/Update data masking rule for default max
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataMaskingRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		DataMaskingRule{
			Properties: &DataMaskingRuleProperties{
				AliasName:       to.StringPtr("nickname"),
				ColumnName:      to.StringPtr("test1"),
				MaskingFunction: DataMaskingFunctionDefault.ToPtr(),
				RuleState:       DataMaskingRuleStateEnabled.ToPtr(),
				SchemaName:      to.StringPtr("dbo"),
				TableName:       to.StringPtr("Table_1"),
			},
		},
		&DataMaskingRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingRule.ID == nil {
		t.Fatal("DataMaskingRule.ID should not be nil!")
	}

	// From example Create/Update data masking rule for default min
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		DataMaskingRule{
			Properties: &DataMaskingRuleProperties{
				ColumnName:      to.StringPtr("test1"),
				MaskingFunction: DataMaskingFunctionDefault.ToPtr(),
				SchemaName:      to.StringPtr("dbo"),
				TableName:       to.StringPtr("Table_1"),
			},
		},
		&DataMaskingRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingRule.ID == nil {
		t.Fatal("DataMaskingRule.ID should not be nil!")
	}

	// From example Create/Update data masking rule for numbers
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		DataMaskingRule{
			Properties: &DataMaskingRuleProperties{
				ColumnName:      to.StringPtr("test1"),
				MaskingFunction: DataMaskingFunctionNumber.ToPtr(),
				NumberFrom:      to.StringPtr("0"),
				NumberTo:        to.StringPtr("2"),
				SchemaName:      to.StringPtr("dbo"),
				TableName:       to.StringPtr("Table_1"),
			},
		},
		&DataMaskingRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingRule.ID == nil {
		t.Fatal("DataMaskingRule.ID should not be nil!")
	}

	// From example Create/Update data masking rule for text
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		DataMaskingRule{
			Properties: &DataMaskingRuleProperties{
				ColumnName:        to.StringPtr("test1"),
				MaskingFunction:   DataMaskingFunctionText.ToPtr(),
				PrefixSize:        to.StringPtr("1"),
				ReplacementString: to.StringPtr("asdf"),
				SchemaName:        to.StringPtr("dbo"),
				SuffixSize:        to.StringPtr("0"),
				TableName:         to.StringPtr("Table_1"),
			},
		},
		&DataMaskingRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingRule.ID == nil {
		t.Fatal("DataMaskingRule.ID should not be nil!")
	}
}

func TestDataMaskingRules_ListByDatabase(t *testing.T) {
	// From example List data masking rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataMaskingRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListByDatabase(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		&DataMaskingRulesListByDatabaseOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGeoBackupPolicies_CreateOrUpdate(t *testing.T) {
	// From example Update geo backup policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGeoBackupPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-5961",
		"testdw",
		GeoBackupPolicyNameDefault,
		GeoBackupPolicy{
			Properties: &GeoBackupPolicyProperties{
				State: GeoBackupPolicyStateEnabled.ToPtr(),
			},
		},
		&GeoBackupPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GeoBackupPolicy.ID == nil {
		t.Fatal("GeoBackupPolicy.ID should not be nil!")
	}
}

func TestGeoBackupPolicies_Get(t *testing.T) {
	// From example Get geo backup policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGeoBackupPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-5961",
		"testdw",
		GeoBackupPolicyNameDefault,
		&GeoBackupPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GeoBackupPolicy.ID == nil {
		t.Fatal("GeoBackupPolicy.ID should not be nil!")
	}
}

func TestGeoBackupPolicies_ListByDatabase(t *testing.T) {
	// From example List geo backup policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGeoBackupPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListByDatabase(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-5961",
		"testdw",
		&GeoBackupPoliciesListByDatabaseOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabases_ListMetrics(t *testing.T) {
	// From example List database usage metrics
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListMetrics(ctx,
		"sqlcrudtest-6730",
		"sqlcrudtest-9007",
		"3481",
		"name/value eq 'cpu_percent' and timeGrain eq '00:10:00' and startTime eq '2017-06-02T18:35:00Z' and endTime eq '2017-06-02T18:55:00Z'",
		&DatabasesListMetricsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabases_ListMetricDefinitions(t *testing.T) {
	// From example List database usage metrics
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListMetricDefinitions(ctx,
		"sqlcrudtest-6730",
		"sqlcrudtest-9007",
		"3481",
		&DatabasesListMetricDefinitionsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabases_ListByServer(t *testing.T) {
	// From example Gets a list of databases.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("Default-SQL-SouthEastAsia",
		"testsvr",
		&DatabasesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Database.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Database.ID should not be nil!")
			}
		}
	}
}

func TestDatabases_Get(t *testing.T) {
	// From example Gets a database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		&DatabasesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}
}

func TestDatabases_CreateOrUpdate(t *testing.T) {
	// From example Creates a VCore database by specifying service objective name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		Database{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			SKU: &SKU{
				Name:     to.StringPtr("BC"),
				Capacity: to.Int32Ptr(2),
				Family:   to.StringPtr("Gen4"),
			},
		},
		&DatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}

	// From example Creates a VCore database by specifying sku name and capacity.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		Database{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			SKU: &SKU{
				Name:     to.StringPtr("BC_Gen4"),
				Capacity: to.Int32Ptr(2),
			},
		},
		&DatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}

	// From example Creates a database as a copy.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"dbcopy",
		Database{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			Properties: &DatabaseProperties{
				CreateMode:       CreateModeCopy.ToPtr(),
				SourceDatabaseID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			},
			SKU: &SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		},
		&DatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}

	// From example Creates a database as an on-line secondary.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		Database{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			Properties: &DatabaseProperties{
				CreateMode:       CreateModeSecondary.ToPtr(),
				SecondaryType:    SecondaryTypeGeo.ToPtr(),
				SourceDatabaseID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-NorthEurope/providers/Microsoft.Sql/servers/testsvr1/databases/testdb"),
			},
			SKU: &SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		},
		&DatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}

	// From example Creates a database as named replica secondary.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		Database{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			Properties: &DatabaseProperties{
				CreateMode:       CreateModeSecondary.ToPtr(),
				SecondaryType:    SecondaryTypeNamed.ToPtr(),
				SourceDatabaseID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-NorthEurope/providers/Microsoft.Sql/servers/testsvr1/databases/primarydb"),
			},
			SKU: &SKU{
				Name:     to.StringPtr("HS_Gen4"),
				Capacity: to.Int32Ptr(2),
				Tier:     to.StringPtr("Hyperscale"),
			},
		},
		&DatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}

	// From example Creates a database from PointInTimeRestore.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"dbpitr",
		Database{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			Properties: &DatabaseProperties{
				CreateMode:         CreateModePointInTimeRestore.ToPtr(),
				RestorePointInTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-22T05:35:31.503Z"); return t }()),
				SourceDatabaseID:   to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SoutheastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"),
			},
		},
		&DatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}

	// From example Creates a database with default mode.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		Database{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			Properties: &DatabaseProperties{
				Collation:    to.StringPtr("SQL_Latin1_General_CP1_CI_AS"),
				CreateMode:   CreateModeDefault.ToPtr(),
				MaxSizeBytes: to.Int64Ptr(1073741824),
			},
			SKU: &SKU{
				Name: to.StringPtr("S0"),
				Tier: to.StringPtr("Standard"),
			},
		},
		&DatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}

	// From example Creates a database with ledger on.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		Database{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			Properties: &DatabaseProperties{
				IsLedgerOn: to.BoolPtr(true),
			},
		},
		&DatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}

	// From example Creates a database with minimum number of parameters.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		Database{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
		},
		&DatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}

	// From example Creates a database with preferred maintenance window.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		Database{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			Properties: &DatabaseProperties{
				Collation:                  to.StringPtr("SQL_Latin1_General_CP1_CI_AS"),
				CreateMode:                 CreateModeDefault.ToPtr(),
				MaintenanceConfigurationID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1"),
				MaxSizeBytes:               to.Int64Ptr(1073741824),
			},
			SKU: &SKU{
				Name: to.StringPtr("S2"),
				Tier: to.StringPtr("Standard"),
			},
		},
		&DatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}

	// From example Creates a database with specified backup storage redundancy.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		Database{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			Properties: &DatabaseProperties{
				RequestedBackupStorageRedundancy: RequestedBackupStorageRedundancyZone.ToPtr(),
			},
		},
		&DatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}
}

func TestDatabases_Delete(t *testing.T) {
	// From example Deletes a database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		&DatabasesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabases_Update(t *testing.T) {
	// From example Assigns maintenance window to a database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		DatabaseUpdate{
			Properties: &DatabaseProperties{
				MaintenanceConfigurationID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1"),
			},
			SKU: &SKU{
				Name: to.StringPtr("BC_Gen5_4"),
			},
		},
		&DatabasesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}

	// From example Resets maintenance window of a database to default.
	poller, err = client.BeginUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		DatabaseUpdate{
			Properties: &DatabaseProperties{
				MaintenanceConfigurationID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default"),
			},
			SKU: &SKU{
				Name: to.StringPtr("BC_Gen5_4"),
			},
		},
		&DatabasesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}

	// From example Updates a database.
	poller, err = client.BeginUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		DatabaseUpdate{
			Properties: &DatabaseProperties{
				LicenseType:  DatabaseLicenseTypeLicenseIncluded.ToPtr(),
				MaxSizeBytes: to.Int64Ptr(1073741824),
			},
			SKU: &SKU{
				Name: to.StringPtr("BC_Gen4_4"),
			},
		},
		&DatabasesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}
}

func TestDatabases_ListByElasticPool(t *testing.T) {
	// From example Gets a list of databases in an elastic pool.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByElasticPool("Default-SQL-SouthEastAsia",
		"testsvr",
		"pool1",
		&DatabasesListByElasticPoolOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Database.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Database.ID should not be nil!")
			}
		}
	}
}

func TestDatabases_Failover(t *testing.T) {
	// From example Failover an database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginFailover(ctx,
		"group1",
		"testServer",
		"testDatabase",
		&DatabasesBeginFailoverOptions{ReplicaType: ReplicaTypePrimary.ToPtr()})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabases_ListInaccessibleByServer(t *testing.T) {
	// From example Gets a list of inaccessible databases in a logical server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListInaccessibleByServer("Default-SQL-SouthEastAsia",
		"testsvr",
		&DatabasesListInaccessibleByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Database.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Database.ID should not be nil!")
			}
		}
	}
}

func TestDatabases_Pause(t *testing.T) {
	// From example Pauses a database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginPause(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdwdb",
		&DatabasesBeginPauseOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}
}

func TestDatabases_Resume(t *testing.T) {
	// From example Resumes a database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginResume(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdwdb",
		&DatabasesBeginResumeOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}
}

func TestDatabases_UpgradeDataWarehouse(t *testing.T) {
	// From example Upgrades a data warehouse.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpgradeDataWarehouse(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdwdb",
		&DatabasesBeginUpgradeDataWarehouseOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabases_Rename(t *testing.T) {
	// From example Renames a database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Rename(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		ResourceMoveDefinition{
			ID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/newtestdb"),
		},
		&DatabasesRenameOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabases_Import(t *testing.T) {
	// From example Imports to an existing empty database, using private link to communicate with SQL server and storage account.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginImport(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		ImportExistingDatabaseDefinition{
			AdministratorLogin:         to.StringPtr("login"),
			AdministratorLoginPassword: to.StringPtr("password"),
			AuthenticationType:         to.StringPtr("Sql"),
			NetworkIsolation: &NetworkIsolationSettings{
				SQLServerResourceID:      to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr"),
				StorageAccountResourceID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink"),
			},
			StorageKey:     to.StringPtr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=="),
			StorageKeyType: StorageKeyTypeStorageAccessKey.ToPtr(),
			StorageURI:     to.StringPtr("https://test.blob.core.windows.net/test.bacpac"),
		},
		&DatabasesBeginImportOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ImportExportOperationResult.ID == nil {
		t.Fatal("ImportExportOperationResult.ID should not be nil!")
	}

	// From example Imports to an existing empty database.
	poller, err = client.BeginImport(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		ImportExistingDatabaseDefinition{
			AdministratorLogin:         to.StringPtr("login"),
			AdministratorLoginPassword: to.StringPtr("password"),
			AuthenticationType:         to.StringPtr("Sql"),
			StorageKey:                 to.StringPtr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=="),
			StorageKeyType:             StorageKeyTypeStorageAccessKey.ToPtr(),
			StorageURI:                 to.StringPtr("https://test.blob.core.windows.net/test.bacpac"),
		},
		&DatabasesBeginImportOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ImportExportOperationResult.ID == nil {
		t.Fatal("ImportExportOperationResult.ID should not be nil!")
	}
}

func TestDatabases_Export(t *testing.T) {
	// From example Exports a database, using private link to communicate with SQL server and storage account.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginExport(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		ExportDatabaseDefinition{
			AdministratorLogin:         to.StringPtr("login"),
			AdministratorLoginPassword: to.StringPtr("password"),
			AuthenticationType:         to.StringPtr("Sql"),
			NetworkIsolation: &NetworkIsolationSettings{
				SQLServerResourceID:      to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr"),
				StorageAccountResourceID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink"),
			},
			StorageKey:     to.StringPtr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=="),
			StorageKeyType: StorageKeyTypeStorageAccessKey.ToPtr(),
			StorageURI:     to.StringPtr("https://test.blob.core.windows.net/test.bacpac"),
		},
		&DatabasesBeginExportOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ImportExportOperationResult.ID == nil {
		t.Fatal("ImportExportOperationResult.ID should not be nil!")
	}

	// From example Exports a database.
	poller, err = client.BeginExport(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		ExportDatabaseDefinition{
			AdministratorLogin:         to.StringPtr("login"),
			AdministratorLoginPassword: to.StringPtr("password"),
			AuthenticationType:         to.StringPtr("Sql"),
			StorageKey:                 to.StringPtr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=="),
			StorageKeyType:             StorageKeyTypeStorageAccessKey.ToPtr(),
			StorageURI:                 to.StringPtr("https://test.blob.core.windows.net/test.bacpac"),
		},
		&DatabasesBeginExportOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ImportExportOperationResult.ID == nil {
		t.Fatal("ImportExportOperationResult.ID should not be nil!")
	}
}

func TestElasticPools_ListMetrics(t *testing.T) {
	// From example List database usage metrics
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewElasticPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListMetrics(ctx,
		"sqlcrudtest-6730",
		"sqlcrudtest-9007",
		"3481",
		"name/value eq 'cpu_percent' and timeGrain eq '00:10:00' and startTime eq '2017-06-02T18:35:00Z' and endTime eq '2017-06-02T18:55:00Z'",
		&ElasticPoolsListMetricsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestElasticPools_ListMetricDefinitions(t *testing.T) {
	// From example List database usage metrics
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewElasticPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListMetricDefinitions(ctx,
		"sqlcrudtest-6730",
		"sqlcrudtest-9007",
		"3481",
		&ElasticPoolsListMetricDefinitionsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestElasticPools_ListByServer(t *testing.T) {
	// From example Get all elastic pools in a server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewElasticPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("sqlcrudtest-2369",
		"sqlcrudtest-8069",
		&ElasticPoolsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ElasticPool.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ElasticPool.ID should not be nil!")
			}
		}
	}
}

func TestElasticPools_Get(t *testing.T) {
	// From example Get an elastic pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewElasticPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		&ElasticPoolsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ElasticPool.ID == nil {
		t.Fatal("ElasticPool.ID should not be nil!")
	}
}

func TestElasticPools_CreateOrUpdate(t *testing.T) {
	// From example Create or update elastic pool with all parameter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewElasticPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		ElasticPool{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("Japan East"),
			},
			Properties: &ElasticPoolProperties{
				PerDatabaseSettings: &ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Float64Ptr(2),
					MinCapacity: to.Float64Ptr(0.25),
				},
			},
			SKU: &SKU{
				Name:     to.StringPtr("GP_Gen4_2"),
				Capacity: to.Int32Ptr(2),
				Tier:     to.StringPtr("GeneralPurpose"),
			},
		},
		&ElasticPoolsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ElasticPool.ID == nil {
		t.Fatal("ElasticPool.ID should not be nil!")
	}

	// From example Create or update elastic pool with maintenance configuration parameter
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		ElasticPool{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("Japan East"),
			},
			Properties: &ElasticPoolProperties{
				MaintenanceConfigurationID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_1"),
			},
		},
		&ElasticPoolsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ElasticPool.ID == nil {
		t.Fatal("ElasticPool.ID should not be nil!")
	}

	// From example Create or update elastic pool with minimum parameters
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		ElasticPool{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("Japan East"),
			},
		},
		&ElasticPoolsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ElasticPool.ID == nil {
		t.Fatal("ElasticPool.ID should not be nil!")
	}
}

func TestElasticPools_Delete(t *testing.T) {
	// From example Delete an elastic pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewElasticPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-3129",
		"sqlcrudtest-228",
		"sqlcrudtest-3851",
		&ElasticPoolsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestElasticPools_Update(t *testing.T) {
	// From example Assigns maintenance configuration to an elastic pool.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewElasticPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		ElasticPoolUpdate{
			Properties: &ElasticPoolUpdateProperties{
				MaintenanceConfigurationID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_1"),
			},
		},
		&ElasticPoolsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ElasticPool.ID == nil {
		t.Fatal("ElasticPool.ID should not be nil!")
	}

	// From example Resets maintenance configuration of an elastic pool to default.
	poller, err = client.BeginUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		ElasticPoolUpdate{
			Properties: &ElasticPoolUpdateProperties{
				MaintenanceConfigurationID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default"),
			},
		},
		&ElasticPoolsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ElasticPool.ID == nil {
		t.Fatal("ElasticPool.ID should not be nil!")
	}

	// From example Update an elastic pool with all parameter
	poller, err = client.BeginUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		ElasticPoolUpdate{
			Properties: &ElasticPoolUpdateProperties{
				LicenseType: ElasticPoolLicenseTypeLicenseIncluded.ToPtr(),
				PerDatabaseSettings: &ElasticPoolPerDatabaseSettings{
					MaxCapacity: to.Float64Ptr(1),
					MinCapacity: to.Float64Ptr(0.25),
				},
				ZoneRedundant: to.BoolPtr(true),
			},
			SKU: &SKU{
				Name:     to.StringPtr("BC_Gen4"),
				Capacity: to.Int32Ptr(2),
				Tier:     to.StringPtr("BusinessCritical"),
			},
		},
		&ElasticPoolsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ElasticPool.ID == nil {
		t.Fatal("ElasticPool.ID should not be nil!")
	}

	// From example Update an elastic pool with minimum parameters
	poller, err = client.BeginUpdate(ctx,
		"sqlcrudtest-2369",
		"sqlcrudtest-8069",
		"sqlcrudtest-8102",
		ElasticPoolUpdate{},
		&ElasticPoolsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ElasticPool.ID == nil {
		t.Fatal("ElasticPool.ID should not be nil!")
	}
}

func TestElasticPools_Failover(t *testing.T) {
	// From example Failover an elastic pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewElasticPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginFailover(ctx,
		"group1",
		"testServer",
		"testElasticPool",
		&ElasticPoolsBeginFailoverOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestReplicationLinks_Delete(t *testing.T) {
	// From example Delete a replication link
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReplicationLinksClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		"testdb",
		"5b301b68-03f6-4b26-b0f4-73ebb8634238",
		&ReplicationLinksDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestReplicationLinks_Failover(t *testing.T) {
	// From example Failover a replication link
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReplicationLinksClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginFailover(ctx,
		"sqlcrudtest-8931",
		"sqlcrudtest-2137",
		"testdb",
		"f0550bf5-07ce-4270-8e4b-71737975973a",
		&ReplicationLinksBeginFailoverOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestReplicationLinks_FailoverAllowDataLoss(t *testing.T) {
	// From example Failover a replication link
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReplicationLinksClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginFailoverAllowDataLoss(ctx,
		"sqlcrudtest-8931",
		"sqlcrudtest-2137",
		"testdb",
		"f0550bf5-07ce-4270-8e4b-71737975973a",
		&ReplicationLinksBeginFailoverAllowDataLossOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestReplicationLinks_Unlink(t *testing.T) {
	// From example Delete replication link
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReplicationLinksClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUnlink(ctx,
		"sqlcrudtest-8931",
		"sqlcrudtest-2137",
		"testdb",
		"f0550bf5-07ce-4270-8e4b-71737975973a",
		UnlinkParameters{
			ForcedTermination: to.BoolPtr(true),
		},
		&ReplicationLinksBeginUnlinkOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestReplicationLinks_ListByDatabase(t *testing.T) {
	// From example List replication links on server on database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReplicationLinksClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("Default",
		"sourcesvr",
		"tetha-db",
		&ReplicationLinksListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReplicationLink.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReplicationLink.ID should not be nil!")
			}
		}
	}
}

func TestReplicationLinks_Get(t *testing.T) {
	// From example Gets the replication link.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReplicationLinksClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default",
		"sourcesvr",
		"gamma-db",
		"4891ca10-ebd0-47d7-9182-c722651780fb",
		&ReplicationLinksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ReplicationLink.ID == nil {
		t.Fatal("ReplicationLink.ID should not be nil!")
	}
}

func TestReplicationLinks_ListByServer(t *testing.T) {
	// From example List replication links on server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReplicationLinksClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("Default",
		"sourcesvr",
		&ReplicationLinksListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReplicationLink.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReplicationLink.ID should not be nil!")
			}
		}
	}
}

func TestServerCommunicationLinks_Delete(t *testing.T) {
	// From example Delete a server communication link
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerCommunicationLinksClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"link1",
		&ServerCommunicationLinksDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServerCommunicationLinks_Get(t *testing.T) {
	// From example Get a server communication link
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerCommunicationLinksClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"link1",
		&ServerCommunicationLinksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerCommunicationLink.ID == nil {
		t.Fatal("ServerCommunicationLink.ID should not be nil!")
	}
}

func TestServerCommunicationLinks_CreateOrUpdate(t *testing.T) {
	// From example Create a server communication link
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerCommunicationLinksClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"link1",
		ServerCommunicationLink{
			Properties: &ServerCommunicationLinkProperties{
				PartnerServer: to.StringPtr("sqldcrudtest-test"),
			},
		},
		&ServerCommunicationLinksBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerCommunicationLink.ID == nil {
		t.Fatal("ServerCommunicationLink.ID should not be nil!")
	}
}

func TestServerCommunicationLinks_ListByServer(t *testing.T) {
	// From example List server communication links
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerCommunicationLinksClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListByServer(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&ServerCommunicationLinksListByServerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServiceObjectives_Get(t *testing.T) {
	// From example Get a service objective
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceObjectivesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"group1",
		"sqlcrudtest",
		"29dd7459-4a7c-4e56-be22-f0adda49440d",
		&ServiceObjectivesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServiceObjective.ID == nil {
		t.Fatal("ServiceObjective.ID should not be nil!")
	}
}

func TestServiceObjectives_ListByServer(t *testing.T) {
	// From example List service objectives
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServiceObjectivesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListByServer(ctx,
		"group1",
		"sqlcrudtest",
		&ServiceObjectivesListByServerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestElasticPoolActivities_ListByElasticPool(t *testing.T) {
	// From example List Elastic pool activity
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewElasticPoolActivitiesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListByElasticPool(ctx,
		"sqlcrudtest-4291",
		"sqlcrudtest-6574",
		"8749",
		&ElasticPoolActivitiesListByElasticPoolOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestElasticPoolDatabaseActivities_ListByElasticPool(t *testing.T) {
	// From example List elastic pool database activity
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewElasticPoolDatabaseActivitiesClient(con,
		"9d4e2ad0-e20b-4464-9219-353bded52513")
	_, err := client.ListByElasticPool(ctx,
		"sqlcrudtest-4673",
		"sqlcrudtest-603",
		"7537",
		&ElasticPoolDatabaseActivitiesListByElasticPoolOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServerUsages_ListByServer(t *testing.T) {
	// From example List servers usages
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerUsagesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListByServer(ctx,
		"sqlcrudtest-6730",
		"sqlcrudtest-9007",
		&ServerUsagesListByServerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestExtendedDatabaseBlobAuditingPolicies_Get(t *testing.T) {
	// From example Get an extended database's blob auditing policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtendedDatabaseBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		Enum5Default,
		&ExtendedDatabaseBlobAuditingPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtendedDatabaseBlobAuditingPolicy.ID == nil {
		t.Fatal("ExtendedDatabaseBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestExtendedDatabaseBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create or update an extended database's azure monitor auditing policy with minimal parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtendedDatabaseBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		Enum5Default,
		ExtendedDatabaseBlobAuditingPolicy{
			Properties: &ExtendedDatabaseBlobAuditingPolicyProperties{
				IsAzureMonitorTargetEnabled: to.BoolPtr(true),
				State:                       BlobAuditingPolicyStateEnabled.ToPtr(),
			},
		},
		&ExtendedDatabaseBlobAuditingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtendedDatabaseBlobAuditingPolicy.ID == nil {
		t.Fatal("ExtendedDatabaseBlobAuditingPolicy.ID should not be nil!")
	}

	// From example Create or update an extended database's blob auditing policy with all parameters
	res, err = client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		Enum5Default,
		ExtendedDatabaseBlobAuditingPolicy{
			Properties: &ExtendedDatabaseBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.StringPtr("DATABASE_LOGOUT_GROUP"),
					to.StringPtr("DATABASE_ROLE_MEMBER_CHANGE_GROUP"),
					to.StringPtr("UPDATE on database::TestDatabaseName by public")},
				IsAzureMonitorTargetEnabled:  to.BoolPtr(true),
				IsStorageSecondaryKeyInUse:   to.BoolPtr(false),
				PredicateExpression:          to.StringPtr("statement = 'select 1'"),
				QueueDelayMs:                 to.Int32Ptr(4000),
				RetentionDays:                to.Int32Ptr(6),
				State:                        BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey:      to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.StringPtr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&ExtendedDatabaseBlobAuditingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtendedDatabaseBlobAuditingPolicy.ID == nil {
		t.Fatal("ExtendedDatabaseBlobAuditingPolicy.ID should not be nil!")
	}

	// From example Create or update an extended database's blob auditing policy with minimal parameters
	res, err = client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		Enum5Default,
		ExtendedDatabaseBlobAuditingPolicy{
			Properties: &ExtendedDatabaseBlobAuditingPolicyProperties{
				State:                   BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&ExtendedDatabaseBlobAuditingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtendedDatabaseBlobAuditingPolicy.ID == nil {
		t.Fatal("ExtendedDatabaseBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestExtendedDatabaseBlobAuditingPolicies_ListByDatabase(t *testing.T) {
	// From example List extended auditing settings of a database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtendedDatabaseBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		&ExtendedDatabaseBlobAuditingPoliciesListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExtendedDatabaseBlobAuditingPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExtendedDatabaseBlobAuditingPolicy.ID should not be nil!")
			}
		}
	}
}

func TestExtendedServerBlobAuditingPolicies_Get(t *testing.T) {
	// From example Get a server's blob extended auditing policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtendedServerBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		Enum5Default,
		&ExtendedServerBlobAuditingPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtendedServerBlobAuditingPolicy.ID == nil {
		t.Fatal("ExtendedServerBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestExtendedServerBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example Update a server's extended blob auditing policy with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtendedServerBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		Enum5Default,
		ExtendedServerBlobAuditingPolicy{
			Properties: &ExtendedServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.StringPtr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.StringPtr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.StringPtr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.BoolPtr(true),
				IsStorageSecondaryKeyInUse:   to.BoolPtr(false),
				PredicateExpression:          to.StringPtr("object_name = 'SensitiveData'"),
				QueueDelayMs:                 to.Int32Ptr(4000),
				RetentionDays:                to.Int32Ptr(6),
				State:                        BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey:      to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.StringPtr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&ExtendedServerBlobAuditingPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtendedServerBlobAuditingPolicy.ID == nil {
		t.Fatal("ExtendedServerBlobAuditingPolicy.ID should not be nil!")
	}

	// From example Update a server's extended blob auditing policy with minimal parameters
	poller, err = client.BeginCreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		Enum5Default,
		ExtendedServerBlobAuditingPolicy{
			Properties: &ExtendedServerBlobAuditingPolicyProperties{
				State:                   BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&ExtendedServerBlobAuditingPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtendedServerBlobAuditingPolicy.ID == nil {
		t.Fatal("ExtendedServerBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestExtendedServerBlobAuditingPolicies_ListByServer(t *testing.T) {
	// From example List extended auditing settings of a server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtendedServerBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("blobauditingtest-4799",
		"blobauditingtest-6440",
		&ExtendedServerBlobAuditingPoliciesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExtendedServerBlobAuditingPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExtendedServerBlobAuditingPolicy.ID should not be nil!")
			}
		}
	}
}

func TestServerBlobAuditingPolicies_Get(t *testing.T) {
	// From example Get a server's blob auditing policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		Enum5Default,
		&ServerBlobAuditingPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerBlobAuditingPolicy.ID == nil {
		t.Fatal("ServerBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestServerBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example Update a server's blob auditing policy with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		Enum5Default,
		ServerBlobAuditingPolicy{
			Properties: &ServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.StringPtr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.StringPtr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.StringPtr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.BoolPtr(true),
				IsStorageSecondaryKeyInUse:   to.BoolPtr(false),
				QueueDelayMs:                 to.Int32Ptr(4000),
				RetentionDays:                to.Int32Ptr(6),
				State:                        BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey:      to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.StringPtr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&ServerBlobAuditingPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerBlobAuditingPolicy.ID == nil {
		t.Fatal("ServerBlobAuditingPolicy.ID should not be nil!")
	}

	// From example Update a server's blob auditing policy with minimal parameters
	poller, err = client.BeginCreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		Enum5Default,
		ServerBlobAuditingPolicy{
			Properties: &ServerBlobAuditingPolicyProperties{
				State:                   BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&ServerBlobAuditingPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerBlobAuditingPolicy.ID == nil {
		t.Fatal("ServerBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestServerBlobAuditingPolicies_ListByServer(t *testing.T) {
	// From example List auditing settings of a server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("blobauditingtest-4799",
		"blobauditingtest-6440",
		&ServerBlobAuditingPoliciesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerBlobAuditingPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerBlobAuditingPolicy.ID should not be nil!")
			}
		}
	}
}

func TestDatabaseBlobAuditingPolicies_Get(t *testing.T) {
	// From example Get a database's blob auditing policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		Enum5Default,
		&DatabaseBlobAuditingPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseBlobAuditingPolicy.ID == nil {
		t.Fatal("DatabaseBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestDatabaseBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create or update a database's azure monitor auditing policy with minimal parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		Enum5Default,
		DatabaseBlobAuditingPolicy{
			Properties: &DatabaseBlobAuditingPolicyProperties{
				IsAzureMonitorTargetEnabled: to.BoolPtr(true),
				State:                       BlobAuditingPolicyStateEnabled.ToPtr(),
			},
		},
		&DatabaseBlobAuditingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseBlobAuditingPolicy.ID == nil {
		t.Fatal("DatabaseBlobAuditingPolicy.ID should not be nil!")
	}

	// From example Create or update a database's blob auditing policy with all parameters
	res, err = client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		Enum5Default,
		DatabaseBlobAuditingPolicy{
			Properties: &DatabaseBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.StringPtr("DATABASE_LOGOUT_GROUP"),
					to.StringPtr("DATABASE_ROLE_MEMBER_CHANGE_GROUP"),
					to.StringPtr("UPDATE on database::TestDatabaseName by public")},
				IsAzureMonitorTargetEnabled:  to.BoolPtr(true),
				IsStorageSecondaryKeyInUse:   to.BoolPtr(false),
				QueueDelayMs:                 to.Int32Ptr(4000),
				RetentionDays:                to.Int32Ptr(6),
				State:                        BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey:      to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.StringPtr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&DatabaseBlobAuditingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseBlobAuditingPolicy.ID == nil {
		t.Fatal("DatabaseBlobAuditingPolicy.ID should not be nil!")
	}

	// From example Create or update a database's blob auditing policy with minimal parameters
	res, err = client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		Enum5Default,
		DatabaseBlobAuditingPolicy{
			Properties: &DatabaseBlobAuditingPolicyProperties{
				State:                   BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&DatabaseBlobAuditingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseBlobAuditingPolicy.ID == nil {
		t.Fatal("DatabaseBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestDatabaseBlobAuditingPolicies_ListByDatabase(t *testing.T) {
	// From example List audit settings of a database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		&DatabaseBlobAuditingPoliciesListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseBlobAuditingPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseBlobAuditingPolicy.ID should not be nil!")
			}
		}
	}
}

func TestDatabaseAdvisors_ListByDatabase(t *testing.T) {
	// From example List of database advisors
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseAdvisorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListByDatabase(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"IndexAdvisor_test_3",
		&DatabaseAdvisorsListByDatabaseOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example List of database recommended actions for all advisors
	_, err = client.ListByDatabase(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"IndexAdvisor_test_3",
		&DatabaseAdvisorsListByDatabaseOptions{Expand: to.StringPtr("recommendedActions")})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabaseAdvisors_Get(t *testing.T) {
	// From example Get database advisor
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseAdvisorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"IndexAdvisor_test_3",
		"CreateIndex",
		&DatabaseAdvisorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Advisor.ID == nil {
		t.Fatal("Advisor.ID should not be nil!")
	}
}

func TestDatabaseAdvisors_Update(t *testing.T) {
	// From example Update database advisor
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseAdvisorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Update(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"IndexAdvisor_test_3",
		"CreateIndex",
		Advisor{
			Properties: &AdvisorProperties{
				AutoExecuteStatus: AutoExecuteStatusDisabled.ToPtr(),
			},
		},
		&DatabaseAdvisorsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Advisor.ID == nil {
		t.Fatal("Advisor.ID should not be nil!")
	}
}

func TestDatabaseAutomaticTuning_Get(t *testing.T) {
	// From example Get a database's automatic tuning settings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseAutomaticTuningClient(con,
		"c3aa9078-0000-0000-0000-e36f151182d7")
	res, err := client.Get(ctx,
		"default-sql-onebox",
		"testsvr11",
		"db1",
		&DatabaseAutomaticTuningGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseAutomaticTuning.ID == nil {
		t.Fatal("DatabaseAutomaticTuning.ID should not be nil!")
	}
}

func TestDatabaseAutomaticTuning_Update(t *testing.T) {
	// From example Updates database automatic tuning settings with all properties
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseAutomaticTuningClient(con,
		"c3aa9078-0000-0000-0000-e36f151182d7")
	res, err := client.Update(ctx,
		"default-sql-onebox",
		"testsvr11",
		"db1",
		DatabaseAutomaticTuning{
			Properties: &DatabaseAutomaticTuningProperties{
				DesiredState: AutomaticTuningModeAuto.ToPtr(),
				Options: map[string]*AutomaticTuningOptions{
					"createIndex": &AutomaticTuningOptions{
						DesiredState: AutomaticTuningOptionModeDesiredOff.ToPtr(),
					},
					"dropIndex": &AutomaticTuningOptions{
						DesiredState: AutomaticTuningOptionModeDesiredOn.ToPtr(),
					},
					"forceLastGoodPlan": &AutomaticTuningOptions{
						DesiredState: AutomaticTuningOptionModeDesiredDefault.ToPtr(),
					},
				},
			},
		},
		&DatabaseAutomaticTuningUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseAutomaticTuning.ID == nil {
		t.Fatal("DatabaseAutomaticTuning.ID should not be nil!")
	}

	// From example Updates database automatic tuning settings with minimal properties
	res, err = client.Update(ctx,
		"default-sql-onebox",
		"testsvr11",
		"db1",
		DatabaseAutomaticTuning{
			Properties: &DatabaseAutomaticTuningProperties{
				DesiredState: AutomaticTuningModeAuto.ToPtr(),
			},
		},
		&DatabaseAutomaticTuningUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseAutomaticTuning.ID == nil {
		t.Fatal("DatabaseAutomaticTuning.ID should not be nil!")
	}
}

func TestDatabaseColumns_ListByDatabase(t *testing.T) {
	// From example Filter database columns
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseColumnsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("myRG",
		"serverName",
		"myDatabase",
		&DatabaseColumnsListByDatabaseOptions{Schema: []*string{
			to.StringPtr("dbo")},
			Table: []*string{
				to.StringPtr("customer"),
				to.StringPtr("address")},
			Column: []*string{
				to.StringPtr("username")},
			OrderBy: []*string{
				to.StringPtr("schema asc"),
				to.StringPtr("table"),
				to.StringPtr("column desc")},
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseColumn.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseColumn.ID should not be nil!")
			}
		}
	}

	// From example List database columns
	pager = client.ListByDatabase("myRG",
		"serverName",
		"myDatabase",
		&DatabaseColumnsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseColumn.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseColumn.ID should not be nil!")
			}
		}
	}
}

func TestDatabaseColumns_ListByTable(t *testing.T) {
	// From example List database columns
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseColumnsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByTable("myRG",
		"serverName",
		"myDatabase",
		"dbo",
		"table1",
		&DatabaseColumnsListByTableOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseColumn.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseColumn.ID should not be nil!")
			}
		}
	}
}

func TestDatabaseColumns_Get(t *testing.T) {
	// From example Get database column
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseColumnsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"myRG",
		"serverName",
		"myDatabase",
		"dbo",
		"table1",
		"column1",
		&DatabaseColumnsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseColumn.ID == nil {
		t.Fatal("DatabaseColumn.ID should not be nil!")
	}
}

func TestDatabaseRecommendedActions_ListByDatabaseAdvisor(t *testing.T) {
	// From example List of database recommended actions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseRecommendedActionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListByDatabaseAdvisor(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"IndexAdvisor_test_3",
		"CreateIndex",
		&DatabaseRecommendedActionsListByDatabaseAdvisorOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabaseRecommendedActions_Get(t *testing.T) {
	// From example Get database recommended action
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseRecommendedActionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"IndexAdvisor_test_3",
		"CreateIndex",
		"IR_[CRM]_[DataPoints]_4821CD2F9510D98184BB",
		&DatabaseRecommendedActionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecommendedAction.ID == nil {
		t.Fatal("RecommendedAction.ID should not be nil!")
	}
}

func TestDatabaseRecommendedActions_Update(t *testing.T) {
	// From example Update database recommended action
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseRecommendedActionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Update(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"IndexAdvisor_test_3",
		"CreateIndex",
		"IR_[CRM]_[DataPoints]_4821CD2F9510D98184BB",
		RecommendedAction{
			Properties: &RecommendedActionProperties{
				State: &RecommendedActionStateInfo{
					CurrentValue: RecommendedActionCurrentStatePending.ToPtr(),
				},
			},
		},
		&DatabaseRecommendedActionsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecommendedAction.ID == nil {
		t.Fatal("RecommendedAction.ID should not be nil!")
	}
}

func TestDatabaseSchemas_ListByDatabase(t *testing.T) {
	// From example List database schemas
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseSchemasClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("myRG",
		"serverName",
		"myDatabase",
		&DatabaseSchemasListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseSchema.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseSchema.ID should not be nil!")
			}
		}
	}
}

func TestDatabaseSchemas_Get(t *testing.T) {
	// From example Get database schema
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseSchemasClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"myRG",
		"serverName",
		"myDatabase",
		"dbo",
		&DatabaseSchemasGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseSchema.ID == nil {
		t.Fatal("DatabaseSchema.ID should not be nil!")
	}
}

func TestDatabaseSecurityAlertPolicies_Get(t *testing.T) {
	// From example Get a database's threat detection policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"securityalert-6852",
		"securityalert-2080",
		"testdb",
		SecurityAlertPolicyNameDefault,
		&DatabaseSecurityAlertPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseSecurityAlertPolicy.ID == nil {
		t.Fatal("DatabaseSecurityAlertPolicy.ID should not be nil!")
	}
}

func TestDatabaseSecurityAlertPolicies_CreateOrUpdate(t *testing.T) {
	// From example Update a database's threat detection policy with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		"testdb",
		SecurityAlertPolicyNameDefault,
		DatabaseSecurityAlertPolicy{
			Properties: &SecurityAlertsPolicyProperties{
				DisabledAlerts: []*string{
					to.StringPtr("Sql_Injection"),
					to.StringPtr("Usage_Anomaly")},
				EmailAccountAdmins: to.BoolPtr(true),
				EmailAddresses: []*string{
					to.StringPtr("test@microsoft.com"),
					to.StringPtr("user@microsoft.com")},
				RetentionDays:           to.Int32Ptr(6),
				State:                   SecurityAlertsPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&DatabaseSecurityAlertPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseSecurityAlertPolicy.ID == nil {
		t.Fatal("DatabaseSecurityAlertPolicy.ID should not be nil!")
	}

	// From example Update a database's threat detection policy with minimal parameters
	res, err = client.CreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		"testdb",
		SecurityAlertPolicyNameDefault,
		DatabaseSecurityAlertPolicy{
			Properties: &SecurityAlertsPolicyProperties{
				State: SecurityAlertsPolicyStateEnabled.ToPtr(),
			},
		},
		&DatabaseSecurityAlertPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseSecurityAlertPolicy.ID == nil {
		t.Fatal("DatabaseSecurityAlertPolicy.ID should not be nil!")
	}
}

func TestDatabaseSecurityAlertPolicies_ListByDatabase(t *testing.T) {
	// From example Get the database's threat detection policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("securityalert-6852",
		"securityalert-2080",
		"testdb",
		&DatabaseSecurityAlertPoliciesListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseSecurityAlertPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseSecurityAlertPolicy.ID should not be nil!")
			}
		}
	}
}

func TestDatabaseTables_ListBySchema(t *testing.T) {
	// From example List  database tables
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseTablesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListBySchema("myRG",
		"serverName",
		"myDatabase",
		"dbo",
		&DatabaseTablesListBySchemaOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseTable.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseTable.ID should not be nil!")
			}
		}
	}
}

func TestDatabaseTables_Get(t *testing.T) {
	// From example Get database table
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseTablesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"myRG",
		"serverName",
		"myDatabase",
		"dbo",
		"table1",
		&DatabaseTablesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseTable.ID == nil {
		t.Fatal("DatabaseTable.ID should not be nil!")
	}
}

func TestDatabaseVulnerabilityAssessmentRuleBaselines_Get(t *testing.T) {
	// From example Gets a database's vulnerability assessment rule baseline.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseVulnerabilityAssessmentRuleBaselinesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4711",
		"vulnerabilityaseessmenttest-6411",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"VA1001",
		VulnerabilityAssessmentPolicyBaselineNameMaster,
		&DatabaseVulnerabilityAssessmentRuleBaselinesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseVulnerabilityAssessmentRuleBaseline.ID == nil {
		t.Fatal("DatabaseVulnerabilityAssessmentRuleBaseline.ID should not be nil!")
	}
}

func TestDatabaseVulnerabilityAssessmentRuleBaselines_CreateOrUpdate(t *testing.T) {
	// From example Creates or updates a database's vulnerability assessment rule baseline.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseVulnerabilityAssessmentRuleBaselinesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"VA1001",
		VulnerabilityAssessmentPolicyBaselineNameDefault,
		DatabaseVulnerabilityAssessmentRuleBaseline{
			Properties: &DatabaseVulnerabilityAssessmentRuleBaselineProperties{
				BaselineResults: []*DatabaseVulnerabilityAssessmentRuleBaselineItem{
					{
						Result: []*string{
							to.StringPtr("userA"),
							to.StringPtr("SELECT")},
					},
					{
						Result: []*string{
							to.StringPtr("userB"),
							to.StringPtr("SELECT")},
					},
					{
						Result: []*string{
							to.StringPtr("userC"),
							to.StringPtr("SELECT"),
							to.StringPtr("tableId_4")},
					}},
			},
		},
		&DatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseVulnerabilityAssessmentRuleBaseline.ID == nil {
		t.Fatal("DatabaseVulnerabilityAssessmentRuleBaseline.ID should not be nil!")
	}
}

func TestDatabaseVulnerabilityAssessmentRuleBaselines_Delete(t *testing.T) {
	// From example Removes a database's vulnerability assessment rule baseline.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseVulnerabilityAssessmentRuleBaselinesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"VA1001",
		VulnerabilityAssessmentPolicyBaselineNameDefault,
		&DatabaseVulnerabilityAssessmentRuleBaselinesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabaseVulnerabilityAssessments_Get(t *testing.T) {
	// From example Get a database's vulnerability assessment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		&DatabaseVulnerabilityAssessmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseVulnerabilityAssessment.ID == nil {
		t.Fatal("DatabaseVulnerabilityAssessment.ID should not be nil!")
	}
}

func TestDatabaseVulnerabilityAssessments_CreateOrUpdate(t *testing.T) {
	// From example Create a database's vulnerability assessment with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		DatabaseVulnerabilityAssessment{
			Properties: &DatabaseVulnerabilityAssessmentProperties{
				RecurringScans: &VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.BoolPtr(true),
					Emails: []*string{
						to.StringPtr("email1@mail.com"),
						to.StringPtr("email2@mail.com")},
					IsEnabled: to.BoolPtr(true),
				},
				StorageAccountAccessKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey:  to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		&DatabaseVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseVulnerabilityAssessment.ID == nil {
		t.Fatal("DatabaseVulnerabilityAssessment.ID should not be nil!")
	}

	// From example Create a database's vulnerability assessment with minimal parameters, when storageAccountAccessKey is specified
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		DatabaseVulnerabilityAssessment{
			Properties: &DatabaseVulnerabilityAssessmentProperties{
				StorageAccountAccessKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
			},
		},
		&DatabaseVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseVulnerabilityAssessment.ID == nil {
		t.Fatal("DatabaseVulnerabilityAssessment.ID should not be nil!")
	}

	// From example Create a database's vulnerability assessment with minimal parameters, when storageContainerSasKey is specified
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		DatabaseVulnerabilityAssessment{
			Properties: &DatabaseVulnerabilityAssessmentProperties{
				StorageContainerPath:   to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		&DatabaseVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseVulnerabilityAssessment.ID == nil {
		t.Fatal("DatabaseVulnerabilityAssessment.ID should not be nil!")
	}
}

func TestDatabaseVulnerabilityAssessments_Delete(t *testing.T) {
	// From example Remove a database's vulnerability assessment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		&DatabaseVulnerabilityAssessmentsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabaseVulnerabilityAssessments_ListByDatabase(t *testing.T) {
	// From example Get the database's vulnerability assessment policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		&DatabaseVulnerabilityAssessmentsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseVulnerabilityAssessment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseVulnerabilityAssessment.ID should not be nil!")
			}
		}
	}
}

func TestDatabaseVulnerabilityAssessmentScans_InitiateScan(t *testing.T) {
	// From example Executes a database's vulnerability assessment scan.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseVulnerabilityAssessmentScansClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginInitiateScan(ctx,
		"vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"scan01",
		&DatabaseVulnerabilityAssessmentScansBeginInitiateScanOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabaseVulnerabilityAssessmentScans_ListByDatabase(t *testing.T) {
	// From example Gets the list of a database vulnerability assessment scan records
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseVulnerabilityAssessmentScansClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		&DatabaseVulnerabilityAssessmentScansListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VulnerabilityAssessmentScanRecord.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VulnerabilityAssessmentScanRecord.ID should not be nil!")
			}
		}
	}
}

func TestDatabaseVulnerabilityAssessmentScans_Get(t *testing.T) {
	// From example Gets a database vulnerability assessment scan record by scan ID
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseVulnerabilityAssessmentScansClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"scan001",
		&DatabaseVulnerabilityAssessmentScansGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VulnerabilityAssessmentScanRecord.ID == nil {
		t.Fatal("VulnerabilityAssessmentScanRecord.ID should not be nil!")
	}
}

func TestDatabaseVulnerabilityAssessmentScans_Export(t *testing.T) {
	// From example Export a database's vulnerability assessment scan results.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseVulnerabilityAssessmentScansClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Export(ctx,
		"vulnerabilityassessmenttest-4799",
		"vulnerabilityassessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"scan001",
		&DatabaseVulnerabilityAssessmentScansExportOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseVulnerabilityAssessmentScansExport.ID == nil {
		t.Fatal("DatabaseVulnerabilityAssessmentScansExport.ID should not be nil!")
	}
}

func TestDataWarehouseUserActivities_Get(t *testing.T) {
	// From example Get the list of the user activities of a data warehouse
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataWarehouseUserActivitiesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		DataWarehouseUserActivityNameCurrent,
		&DataWarehouseUserActivitiesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataWarehouseUserActivities.ID == nil {
		t.Fatal("DataWarehouseUserActivities.ID should not be nil!")
	}
}

func TestDataWarehouseUserActivities_ListByDatabase(t *testing.T) {
	// From example List of the user activities of a data warehouse
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataWarehouseUserActivitiesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		&DataWarehouseUserActivitiesListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataWarehouseUserActivities.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataWarehouseUserActivities.ID should not be nil!")
			}
		}
	}
}

func TestDeletedServers_List(t *testing.T) {
	// From example List deleted servers in a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeletedServersClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List(&DeletedServersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DeletedServer.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DeletedServer.ID should not be nil!")
			}
		}
	}
}

func TestDeletedServers_Get(t *testing.T) {
	// From example Get deleted server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeletedServersClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"japaneast",
		"sqlcrudtest-d-1414",
		&DeletedServersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DeletedServer.ID == nil {
		t.Fatal("DeletedServer.ID should not be nil!")
	}
}

func TestDeletedServers_ListByLocation(t *testing.T) {
	// From example List deleted servers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeletedServersClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByLocation("japaneast",
		&DeletedServersListByLocationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DeletedServer.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DeletedServer.ID should not be nil!")
			}
		}
	}
}

func TestDeletedServers_Recover(t *testing.T) {
	// From example Recover deleted server.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeletedServersClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginRecover(ctx,
		"japaneast",
		"sqlcrudtest-d-1414",
		&DeletedServersBeginRecoverOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DeletedServer.ID == nil {
		t.Fatal("DeletedServer.ID should not be nil!")
	}
}

func TestElasticPoolOperations_Cancel(t *testing.T) {
	// From example Cancel the elastic pool management operation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewElasticPoolOperationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Cancel(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-6661",
		"testpool",
		"f779414b-e748-4925-8cfe-c8598f7660ae",
		&ElasticPoolOperationsCancelOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestElasticPoolOperations_ListByElasticPool(t *testing.T) {
	// From example List the elastic pool management operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewElasticPoolOperationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByElasticPool("sqlcrudtestgroup",
		"sqlcrudtestserver",
		"testpool",
		&ElasticPoolOperationsListByElasticPoolOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ElasticPoolOperation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ElasticPoolOperation.ID should not be nil!")
			}
		}
	}
}

func TestEncryptionProtectors_ListByServer(t *testing.T) {
	// From example List encryption protectors by server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEncryptionProtectorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&EncryptionProtectorsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EncryptionProtector.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EncryptionProtector.ID should not be nil!")
			}
		}
	}
}

func TestEncryptionProtectors_Get(t *testing.T) {
	// From example Get the encryption protector
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEncryptionProtectorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		EncryptionProtectorNameCurrent,
		&EncryptionProtectorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EncryptionProtector.ID == nil {
		t.Fatal("EncryptionProtector.ID should not be nil!")
	}
}

func TestEncryptionProtectors_CreateOrUpdate(t *testing.T) {
	// From example Update the encryption protector to key vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEncryptionProtectorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		EncryptionProtectorNameCurrent,
		EncryptionProtector{
			Properties: &EncryptionProtectorProperties{
				AutoRotationEnabled: to.BoolPtr(false),
				ServerKeyName:       to.StringPtr("someVault_someKey_01234567890123456789012345678901"),
				ServerKeyType:       ServerKeyTypeAzureKeyVault.ToPtr(),
			},
		},
		&EncryptionProtectorsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EncryptionProtector.ID == nil {
		t.Fatal("EncryptionProtector.ID should not be nil!")
	}

	// From example Update the encryption protector to service managed
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		EncryptionProtectorNameCurrent,
		EncryptionProtector{
			Properties: &EncryptionProtectorProperties{
				ServerKeyName: to.StringPtr("ServiceManaged"),
				ServerKeyType: ServerKeyTypeServiceManaged.ToPtr(),
			},
		},
		&EncryptionProtectorsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EncryptionProtector.ID == nil {
		t.Fatal("EncryptionProtector.ID should not be nil!")
	}
}

func TestEncryptionProtectors_Revalidate(t *testing.T) {
	// From example Revalidates the encryption protector
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEncryptionProtectorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginRevalidate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		EncryptionProtectorNameCurrent,
		&EncryptionProtectorsBeginRevalidateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestFailoverGroups_Get(t *testing.T) {
	// From example Get failover group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFailoverGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default",
		"failover-group-primary-server",
		"failover-group-test",
		&FailoverGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FailoverGroup.ID == nil {
		t.Fatal("FailoverGroup.ID should not be nil!")
	}
}

func TestFailoverGroups_CreateOrUpdate(t *testing.T) {
	// From example Create failover group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFailoverGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"failover-group-primary-server",
		"failover-group-test-3",
		FailoverGroup{
			Properties: &FailoverGroupProperties{
				Databases: []*string{
					to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server/databases/testdb-1"),
					to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server/databases/testdb-2")},
				PartnerServers: []*PartnerInfo{
					{
						ID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-secondary-server"),
					}},
				ReadOnlyEndpoint: &FailoverGroupReadOnlyEndpoint{
					FailoverPolicy: ReadOnlyEndpointFailoverPolicyDisabled.ToPtr(),
				},
				ReadWriteEndpoint: &FailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         ReadWriteEndpointFailoverPolicyAutomatic.ToPtr(),
					FailoverWithDataLossGracePeriodMinutes: to.Int32Ptr(480),
				},
			},
		},
		&FailoverGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FailoverGroup.ID == nil {
		t.Fatal("FailoverGroup.ID should not be nil!")
	}
}

func TestFailoverGroups_Delete(t *testing.T) {
	// From example Delete failover group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFailoverGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"Default",
		"failover-group-primary-server",
		"failover-group-test-1",
		&FailoverGroupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestFailoverGroups_Update(t *testing.T) {
	// From example Update failover group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFailoverGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdate(ctx,
		"Default",
		"failover-group-primary-server",
		"failover-group-test-1",
		FailoverGroupUpdate{
			Properties: &FailoverGroupUpdateProperties{
				Databases: []*string{
					to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/failover-group-primary-server/databases/testdb-1")},
				ReadWriteEndpoint: &FailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         ReadWriteEndpointFailoverPolicyAutomatic.ToPtr(),
					FailoverWithDataLossGracePeriodMinutes: to.Int32Ptr(120),
				},
			},
		},
		&FailoverGroupsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FailoverGroup.ID == nil {
		t.Fatal("FailoverGroup.ID should not be nil!")
	}
}

func TestFailoverGroups_ListByServer(t *testing.T) {
	// From example List failover group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFailoverGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("Default",
		"failover-group-primary-server",
		&FailoverGroupsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FailoverGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FailoverGroup.ID should not be nil!")
			}
		}
	}
}

func TestFailoverGroups_Failover(t *testing.T) {
	// From example Planned failover of a failover group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFailoverGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginFailover(ctx,
		"Default",
		"failover-group-secondary-server",
		"failover-group-test-3",
		&FailoverGroupsBeginFailoverOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FailoverGroup.ID == nil {
		t.Fatal("FailoverGroup.ID should not be nil!")
	}
}

func TestFailoverGroups_ForceFailoverAllowDataLoss(t *testing.T) {
	// From example Forced failover of a failover group allowing data loss
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFailoverGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginForceFailoverAllowDataLoss(ctx,
		"Default",
		"failover-group-secondary-server",
		"failover-group-test-3",
		&FailoverGroupsBeginForceFailoverAllowDataLossOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FailoverGroup.ID == nil {
		t.Fatal("FailoverGroup.ID should not be nil!")
	}
}

func TestFirewallRules_Get(t *testing.T) {
	// From example Get Firewall Rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"firewallrulecrudtest-12",
		"firewallrulecrudtest-6285",
		"firewallrulecrudtest-2304",
		&FirewallRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallRule.ID == nil {
		t.Fatal("FirewallRule.ID should not be nil!")
	}
}

func TestFirewallRules_CreateOrUpdate(t *testing.T) {
	// From example Create a firewall rule max/min
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"firewallrulecrudtest-12",
		"firewallrulecrudtest-6285",
		"firewallrulecrudtest-5370",
		FirewallRule{
			Properties: &ServerFirewallRuleProperties{
				EndIPAddress:   to.StringPtr("0.0.0.3"),
				StartIPAddress: to.StringPtr("0.0.0.3"),
			},
		},
		&FirewallRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallRule.ID == nil {
		t.Fatal("FirewallRule.ID should not be nil!")
	}

	// From example Update a firewall rule max/min
	res, err = client.CreateOrUpdate(ctx,
		"firewallrulecrudtest-12",
		"firewallrulecrudtest-6285",
		"firewallrulecrudtest-3927",
		FirewallRule{
			Properties: &ServerFirewallRuleProperties{
				EndIPAddress:   to.StringPtr("0.0.0.1"),
				StartIPAddress: to.StringPtr("0.0.0.1"),
			},
		},
		&FirewallRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallRule.ID == nil {
		t.Fatal("FirewallRule.ID should not be nil!")
	}
}

func TestFirewallRules_Delete(t *testing.T) {
	// From example Delete a firewall rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"firewallrulecrudtest-9886",
		"firewallrulecrudtest-2368",
		"firewallrulecrudtest-7011",
		&FirewallRulesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestFirewallRules_ListByServer(t *testing.T) {
	// From example List Firewall Rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("firewallrulecrudtest-12",
		"firewallrulecrudtest-6285",
		&FirewallRulesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FirewallRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FirewallRule.ID should not be nil!")
			}
		}
	}
}

func TestFirewallRules_Replace(t *testing.T) {
	// From example Replace firewall rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Replace(ctx,
		"firewallrulecrudtest-12",
		"firewallrulecrudtest-6285",
		FirewallRuleList{
			Values: []*FirewallRule{
				{
					ProxyResourceWithWritableName: ProxyResourceWithWritableName{
						ResourceWithWritableName: ResourceWithWritableName{
							Name: to.StringPtr("firewallrulecrudtest-5370 "),
						},
					},
					Properties: &ServerFirewallRuleProperties{
						EndIPAddress:   to.StringPtr("100.0.0.0"),
						StartIPAddress: to.StringPtr("0.0.0.0"),
					},
				}},
		},
		&FirewallRulesReplaceOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallRule.ID == nil {
		t.Fatal("FirewallRule.ID should not be nil!")
	}
}

func TestInstanceFailoverGroups_Get(t *testing.T) {
	// From example Get failover group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInstanceFailoverGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default",
		"Japan East",
		"failover-group-test",
		&InstanceFailoverGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.InstanceFailoverGroup.ID == nil {
		t.Fatal("InstanceFailoverGroup.ID should not be nil!")
	}
}

func TestInstanceFailoverGroups_CreateOrUpdate(t *testing.T) {
	// From example Create failover group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInstanceFailoverGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"Japan East",
		"failover-group-test-3",
		InstanceFailoverGroup{
			Properties: &InstanceFailoverGroupProperties{
				ManagedInstancePairs: []*ManagedInstancePairInfo{
					{
						PartnerManagedInstanceID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-secondary-mngdInstance"),
						PrimaryManagedInstanceID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/failover-group-primary-mngdInstance"),
					}},
				PartnerRegions: []*PartnerRegionInfo{
					{
						Location: to.StringPtr("Japan West"),
					}},
				ReadOnlyEndpoint: &InstanceFailoverGroupReadOnlyEndpoint{
					FailoverPolicy: ReadOnlyEndpointFailoverPolicyDisabled.ToPtr(),
				},
				ReadWriteEndpoint: &InstanceFailoverGroupReadWriteEndpoint{
					FailoverPolicy:                         ReadWriteEndpointFailoverPolicyAutomatic.ToPtr(),
					FailoverWithDataLossGracePeriodMinutes: to.Int32Ptr(480),
				},
			},
		},
		&InstanceFailoverGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.InstanceFailoverGroup.ID == nil {
		t.Fatal("InstanceFailoverGroup.ID should not be nil!")
	}
}

func TestInstanceFailoverGroups_Delete(t *testing.T) {
	// From example Delete failover group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInstanceFailoverGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"Default",
		"Japan East",
		"failover-group-test-1",
		&InstanceFailoverGroupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestInstanceFailoverGroups_ListByLocation(t *testing.T) {
	// From example List failover group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInstanceFailoverGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByLocation("Default",
		"Japan East",
		&InstanceFailoverGroupsListByLocationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("InstanceFailoverGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("InstanceFailoverGroup.ID should not be nil!")
			}
		}
	}
}

func TestInstanceFailoverGroups_Failover(t *testing.T) {
	// From example Planned failover of a failover group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInstanceFailoverGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginFailover(ctx,
		"Default",
		"Japan West",
		"failover-group-test-3",
		&InstanceFailoverGroupsBeginFailoverOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.InstanceFailoverGroup.ID == nil {
		t.Fatal("InstanceFailoverGroup.ID should not be nil!")
	}
}

func TestInstanceFailoverGroups_ForceFailoverAllowDataLoss(t *testing.T) {
	// From example Forced failover of a failover group allowing data loss
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInstanceFailoverGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginForceFailoverAllowDataLoss(ctx,
		"Default",
		"Japan West",
		"failover-group-test-3",
		&InstanceFailoverGroupsBeginForceFailoverAllowDataLossOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.InstanceFailoverGroup.ID == nil {
		t.Fatal("InstanceFailoverGroup.ID should not be nil!")
	}
}

func TestInstancePools_Get(t *testing.T) {
	// From example Get an instance pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInstancePoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"group1",
		"testIP",
		&InstancePoolsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.InstancePool.ID == nil {
		t.Fatal("InstancePool.ID should not be nil!")
	}
}

func TestInstancePools_CreateOrUpdate(t *testing.T) {
	// From example Create an instance pool with all properties.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInstancePoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"testIP",
		InstancePool{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("japaneast"),
				Tags: map[string]*string{
					"a": to.StringPtr("b"),
				},
			},
			Properties: &InstancePoolProperties{
				LicenseType: InstancePoolLicenseTypeLicenseIncluded.ToPtr(),
				SubnetID:    to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet1"),
				VCores:      to.Int32Ptr(8),
			},
			SKU: &SKU{
				Name:   to.StringPtr("GP_Gen5"),
				Family: to.StringPtr("Gen5"),
				Tier:   to.StringPtr("GeneralPurpose"),
			},
		},
		&InstancePoolsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.InstancePool.ID == nil {
		t.Fatal("InstancePool.ID should not be nil!")
	}

	// From example Create an instance pool with min properties.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"group1",
		"testIP",
		InstancePool{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("japaneast"),
			},
			Properties: &InstancePoolProperties{
				LicenseType: InstancePoolLicenseTypeLicenseIncluded.ToPtr(),
				SubnetID:    to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet1"),
				VCores:      to.Int32Ptr(8),
			},
			SKU: &SKU{
				Name:   to.StringPtr("GP_Gen5"),
				Family: to.StringPtr("Gen5"),
				Tier:   to.StringPtr("GeneralPurpose"),
			},
		},
		&InstancePoolsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.InstancePool.ID == nil {
		t.Fatal("InstancePool.ID should not be nil!")
	}
}

func TestInstancePools_Delete(t *testing.T) {
	// From example Delete an instance pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInstancePoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"group1",
		"testIP",
		&InstancePoolsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestInstancePools_Update(t *testing.T) {
	// From example Patch an instance pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInstancePoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdate(ctx,
		"group1",
		"testIP",
		InstancePoolUpdate{
			Tags: map[string]*string{
				"x": to.StringPtr("y"),
			},
		},
		&InstancePoolsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.InstancePool.ID == nil {
		t.Fatal("InstancePool.ID should not be nil!")
	}
}

func TestInstancePools_ListByResourceGroup(t *testing.T) {
	// From example List instance pools by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInstancePoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByResourceGroup("group1",
		&InstancePoolsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("InstancePool.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("InstancePool.ID should not be nil!")
			}
		}
	}
}

func TestInstancePools_List(t *testing.T) {
	// From example List instance pools in the subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewInstancePoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List(&InstancePoolsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("InstancePool.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("InstancePool.ID should not be nil!")
			}
		}
	}
}

func TestJobAgents_ListByServer(t *testing.T) {
	// From example List job agents in a server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobAgentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("group1",
		"server1",
		&JobAgentsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobAgent.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobAgent.ID should not be nil!")
			}
		}
	}
}

func TestJobAgents_Get(t *testing.T) {
	// From example Get a job agent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobAgentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		&JobAgentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobAgent.ID == nil {
		t.Fatal("JobAgent.ID should not be nil!")
	}
}

func TestJobAgents_CreateOrUpdate(t *testing.T) {
	// From example Create or update a job agent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobAgentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		JobAgent{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			Properties: &JobAgentProperties{
				DatabaseID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/databases/db1"),
			},
		},
		&JobAgentsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.JobAgent.ID == nil {
		t.Fatal("JobAgent.ID should not be nil!")
	}
}

func TestJobAgents_Delete(t *testing.T) {
	// From example Delete a job agent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobAgentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"group1",
		"server1",
		"agent1",
		&JobAgentsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobAgents_Update(t *testing.T) {
	// From example Update a job agent's tags.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobAgentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		JobAgentUpdate{
			Tags: map[string]*string{
				"mytag1": to.StringPtr("myvalue1"),
			},
		},
		&JobAgentsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.JobAgent.ID == nil {
		t.Fatal("JobAgent.ID should not be nil!")
	}
}

func TestJobCredentials_ListByAgent(t *testing.T) {
	// From example List credentials in a job agent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobCredentialsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByAgent("group1",
		"server1",
		"agent1",
		&JobCredentialsListByAgentOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobCredential.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobCredential.ID should not be nil!")
			}
		}
	}
}

func TestJobCredentials_Get(t *testing.T) {
	// From example Get a credential
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobCredentialsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"cred1",
		&JobCredentialsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobCredential.ID == nil {
		t.Fatal("JobCredential.ID should not be nil!")
	}
}

func TestJobCredentials_CreateOrUpdate(t *testing.T) {
	// From example Create or update a credential
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobCredentialsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"cred1",
		JobCredential{
			Properties: &JobCredentialProperties{
				Password: to.StringPtr("<password>"),
				Username: to.StringPtr("myuser"),
			},
		},
		&JobCredentialsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobCredential.ID == nil {
		t.Fatal("JobCredential.ID should not be nil!")
	}
}

func TestJobCredentials_Delete(t *testing.T) {
	// From example Delete a credential
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobCredentialsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"group1",
		"server1",
		"agent1",
		"cred1",
		&JobCredentialsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobExecutions_ListByAgent(t *testing.T) {
	// From example List all job executions in a job agent with filtering.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobExecutionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByAgent("group1",
		"server1",
		"agent1",
		&JobExecutionsListByAgentOptions{CreateTimeMin: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:00:00Z"); return t }()),
			CreateTimeMax: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:05:00Z"); return t }()),
			EndTimeMin:    to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:20:00Z"); return t }()),
			EndTimeMax:    to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-21T19:25:00Z"); return t }()),
			IsActive:      to.BoolPtr(false),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobExecution.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobExecution.ID should not be nil!")
			}
		}
	}

	// From example List all job executions in a job agent.
	pager = client.ListByAgent("group1",
		"server1",
		"agent1",
		&JobExecutionsListByAgentOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobExecution.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobExecution.ID should not be nil!")
			}
		}
	}
}

func TestJobExecutions_Cancel(t *testing.T) {
	// From example Cancel a job execution.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobExecutionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Cancel(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"5555-6666-7777-8888-999999999999",
		&JobExecutionsCancelOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobExecutions_Create(t *testing.T) {
	// From example Start a job execution.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobExecutionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreate(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		&JobExecutionsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.JobExecution.ID == nil {
		t.Fatal("JobExecution.ID should not be nil!")
	}
}

func TestJobExecutions_ListByJob(t *testing.T) {
	// From example List a job's executions.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobExecutionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByJob("group1",
		"server1",
		"agent1",
		"job1",
		&JobExecutionsListByJobOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobExecution.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobExecution.ID should not be nil!")
			}
		}
	}
}

func TestJobExecutions_Get(t *testing.T) {
	// From example Get a job execution.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobExecutionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"5555-6666-7777-8888-999999999999",
		&JobExecutionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobExecution.ID == nil {
		t.Fatal("JobExecution.ID should not be nil!")
	}
}

func TestJobExecutions_CreateOrUpdate(t *testing.T) {
	// From example Create job execution.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobExecutionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"5555-6666-7777-8888-999999999999",
		&JobExecutionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.JobExecution.ID == nil {
		t.Fatal("JobExecution.ID should not be nil!")
	}
}

func TestJobs_ListByAgent(t *testing.T) {
	// From example List jobs in a job agent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByAgent("group1",
		"server1",
		"agent1",
		&JobsListByAgentOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Job.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Job.ID should not be nil!")
			}
		}
	}
}

func TestJobs_Get(t *testing.T) {
	// From example Get a job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		&JobsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Job.ID == nil {
		t.Fatal("Job.ID should not be nil!")
	}
}

func TestJobs_CreateOrUpdate(t *testing.T) {
	// From example Create a job with all properties specified
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		Job{
			Properties: &JobProperties{
				Description: to.StringPtr("my favourite job"),
				Schedule: &JobSchedule{
					Type:      JobScheduleTypeRecurring.ToPtr(),
					Enabled:   to.BoolPtr(true),
					EndTime:   to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-24T23:59:59Z"); return t }()),
					Interval:  to.StringPtr("PT5M"),
					StartTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-24T18:30:01Z"); return t }()),
				},
			},
		},
		&JobsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Job.ID == nil {
		t.Fatal("Job.ID should not be nil!")
	}

	// From example Create a job with default properties
	res, err = client.CreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		Job{},
		&JobsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Job.ID == nil {
		t.Fatal("Job.ID should not be nil!")
	}
}

func TestJobs_Delete(t *testing.T) {
	// From example Delete a job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		&JobsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobStepExecutions_ListByJobExecution(t *testing.T) {
	// From example List job step executions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobStepExecutionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByJobExecution("group1",
		"server1",
		"agent1",
		"job1",
		"5555-6666-7777-8888-999999999999",
		&JobStepExecutionsListByJobExecutionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobExecution.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobExecution.ID should not be nil!")
			}
		}
	}
}

func TestJobStepExecutions_Get(t *testing.T) {
	// From example Get a job step execution
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobStepExecutionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"5555-6666-7777-8888-999999999999",
		"step1",
		&JobStepExecutionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobExecution.ID == nil {
		t.Fatal("JobExecution.ID should not be nil!")
	}
}

func TestJobSteps_ListByVersion(t *testing.T) {
	// From example List job steps for the specified version of a job.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobStepsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByVersion("group1",
		"server1",
		"agent1",
		"job1",
		"1",
		&JobStepsListByVersionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobStep.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobStep.ID should not be nil!")
			}
		}
	}
}

func TestJobSteps_GetByVersion(t *testing.T) {
	// From example Get the specified version of a job step.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobStepsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.GetByVersion(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"1",
		"step1",
		&JobStepsGetByVersionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobStep.ID == nil {
		t.Fatal("JobStep.ID should not be nil!")
	}
}

func TestJobSteps_ListByJob(t *testing.T) {
	// From example List job steps for the latest version of a job.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobStepsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByJob("group1",
		"server1",
		"agent1",
		"job1",
		&JobStepsListByJobOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobStep.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobStep.ID should not be nil!")
			}
		}
	}
}

func TestJobSteps_Get(t *testing.T) {
	// From example Get the latest version of a job step.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobStepsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"step1",
		&JobStepsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobStep.ID == nil {
		t.Fatal("JobStep.ID should not be nil!")
	}
}

func TestJobSteps_CreateOrUpdate(t *testing.T) {
	// From example Create or update a job step with all properties specified.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobStepsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"step1",
		JobStep{
			Properties: &JobStepProperties{
				Action: &JobStepAction{
					Type:   JobStepActionTypeTSQL.ToPtr(),
					Source: JobStepActionSourceInline.ToPtr(),
					Value:  to.StringPtr("select 2"),
				},
				Credential: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred1"),
				ExecutionOptions: &JobStepExecutionOptions{
					InitialRetryIntervalSeconds:    to.Int32Ptr(11),
					MaximumRetryIntervalSeconds:    to.Int32Ptr(222),
					RetryAttempts:                  to.Int32Ptr(42),
					RetryIntervalBackoffMultiplier: to.Float32Ptr(3),
					TimeoutSeconds:                 to.Int32Ptr(1234),
				},
				Output: &JobStepOutput{
					Type:              JobStepOutputTypeSQLDatabase.ToPtr(),
					Credential:        to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred0"),
					DatabaseName:      to.StringPtr("database3"),
					ResourceGroupName: to.StringPtr("group3"),
					SchemaName:        to.StringPtr("myschema1234"),
					ServerName:        to.StringPtr("server3"),
					SubscriptionID:    to.StringPtr("3501b905-a848-4b5d-96e8-b253f62d735a"),
					TableName:         to.StringPtr("mytable5678"),
				},
				StepID:      to.Int32Ptr(1),
				TargetGroup: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup1"),
			},
		},
		&JobStepsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobStep.ID == nil {
		t.Fatal("JobStep.ID should not be nil!")
	}

	// From example Create or update a job step with minimal properties specified.
	res, err = client.CreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"step1",
		JobStep{
			Properties: &JobStepProperties{
				Action: &JobStepAction{
					Value: to.StringPtr("select 1"),
				},
				Credential:  to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred0"),
				TargetGroup: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup0"),
			},
		},
		&JobStepsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobStep.ID == nil {
		t.Fatal("JobStep.ID should not be nil!")
	}
}

func TestJobSteps_Delete(t *testing.T) {
	// From example Delete a job step.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobStepsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"step1",
		&JobStepsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobTargetExecutions_ListByJobExecution(t *testing.T) {
	// From example List job step target executions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobTargetExecutionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByJobExecution("group1",
		"server1",
		"agent1",
		"job1",
		"5555-6666-7777-8888-999999999999",
		&JobTargetExecutionsListByJobExecutionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobExecution.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobExecution.ID should not be nil!")
			}
		}
	}
}

func TestJobTargetExecutions_ListByStep(t *testing.T) {
	// From example List job step target executions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobTargetExecutionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByStep("group1",
		"server1",
		"agent1",
		"job1",
		"5555-6666-7777-8888-999999999999",
		"step1",
		&JobTargetExecutionsListByStepOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobExecution.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobExecution.ID should not be nil!")
			}
		}
	}
}

func TestJobTargetExecutions_Get(t *testing.T) {
	// From example Get a job step target execution
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobTargetExecutionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"5555-6666-7777-8888-999999999999",
		"step1",
		"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",
		&JobTargetExecutionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobExecution.ID == nil {
		t.Fatal("JobExecution.ID should not be nil!")
	}
}

func TestJobTargetGroups_ListByAgent(t *testing.T) {
	// From example Get all target groups in an agent.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobTargetGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByAgent("group1",
		"server1",
		"agent1",
		&JobTargetGroupsListByAgentOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobTargetGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobTargetGroup.ID should not be nil!")
			}
		}
	}
}

func TestJobTargetGroups_Get(t *testing.T) {
	// From example Get a target group.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobTargetGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"targetGroup1",
		&JobTargetGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobTargetGroup.ID == nil {
		t.Fatal("JobTargetGroup.ID should not be nil!")
	}
}

func TestJobTargetGroups_CreateOrUpdate(t *testing.T) {
	// From example Create or update a target group with all properties.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobTargetGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"targetGroup1",
		JobTargetGroup{
			Properties: &JobTargetGroupProperties{
				Members: []*JobTarget{
					{
						Type:           JobTargetTypeSQLDatabase.ToPtr(),
						DatabaseName:   to.StringPtr("database1"),
						MembershipType: JobTargetGroupMembershipTypeExclude.ToPtr(),
						ServerName:     to.StringPtr("server1"),
					},
					{
						Type:              JobTargetTypeSQLServer.ToPtr(),
						MembershipType:    JobTargetGroupMembershipTypeInclude.ToPtr(),
						RefreshCredential: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
						ServerName:        to.StringPtr("server1"),
					},
					{
						Type:              JobTargetTypeSQLElasticPool.ToPtr(),
						ElasticPoolName:   to.StringPtr("pool1"),
						MembershipType:    JobTargetGroupMembershipTypeInclude.ToPtr(),
						RefreshCredential: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
						ServerName:        to.StringPtr("server2"),
					},
					{
						Type:              JobTargetTypeSQLShardMap.ToPtr(),
						MembershipType:    JobTargetGroupMembershipTypeInclude.ToPtr(),
						RefreshCredential: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
						ServerName:        to.StringPtr("server3"),
						ShardMapName:      to.StringPtr("shardMap1"),
					}},
			},
		},
		&JobTargetGroupsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobTargetGroup.ID == nil {
		t.Fatal("JobTargetGroup.ID should not be nil!")
	}

	// From example Create or update a target group with minimal properties.
	res, err = client.CreateOrUpdate(ctx,
		"group1",
		"server1",
		"agent1",
		"targetGroup1",
		JobTargetGroup{
			Properties: &JobTargetGroupProperties{
				Members: []*JobTarget{},
			},
		},
		&JobTargetGroupsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobTargetGroup.ID == nil {
		t.Fatal("JobTargetGroup.ID should not be nil!")
	}
}

func TestJobTargetGroups_Delete(t *testing.T) {
	// From example Delete a target group.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobTargetGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"group1",
		"server1",
		"agent1",
		"targetGroup1",
		&JobTargetGroupsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobVersions_ListByJob(t *testing.T) {
	// From example Get all versions of a job.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobVersionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByJob("group1",
		"server1",
		"agent1",
		"job1",
		&JobVersionsListByJobOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobVersion.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobVersion.ID should not be nil!")
			}
		}
	}
}

func TestJobVersions_Get(t *testing.T) {
	// From example Get a version of a job.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobVersionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"group1",
		"server1",
		"agent1",
		"job1",
		"1",
		&JobVersionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobVersion.ID == nil {
		t.Fatal("JobVersion.ID should not be nil!")
	}
}

func TestCapabilities_ListByLocation(t *testing.T) {
	// From example List subscription capabilities in the given location.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCapabilitiesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListByLocation(ctx,
		"eastus",
		&CapabilitiesListByLocationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLongTermRetentionBackups_Copy(t *testing.T) {
	// From example Copy the long term retention backup.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCopy(ctx,
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		CopyLongTermRetentionBackupParameters{
			Properties: &CopyLongTermRetentionBackupParametersProperties{
				TargetBackupStorageRedundancy: TargetBackupStorageRedundancyGeo.ToPtr(),
				TargetDatabaseName:            to.StringPtr("testDatabase2"),
				TargetServerResourceID:        to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/resourceGroups/resourceGroup/servers/testserver2"),
			},
		},
		&LongTermRetentionBackupsBeginCopyOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LongTermRetentionBackupOperationResult.ID == nil {
		t.Fatal("LongTermRetentionBackupOperationResult.ID should not be nil!")
	}
}

func TestLongTermRetentionBackups_Update(t *testing.T) {
	// From example Update the long term retention backup.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdate(ctx,
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		UpdateLongTermRetentionBackupParameters{
			Properties: &UpdateLongTermRetentionBackupParametersProperties{
				RequestedBackupStorageRedundancy: RequestedBackupStorageRedundancyGeo.ToPtr(),
			},
		},
		&LongTermRetentionBackupsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LongTermRetentionBackupOperationResult.ID == nil {
		t.Fatal("LongTermRetentionBackupOperationResult.ID should not be nil!")
	}
}

func TestLongTermRetentionBackups_Get(t *testing.T) {
	// From example Get the long term retention backup.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		&LongTermRetentionBackupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LongTermRetentionBackup.ID == nil {
		t.Fatal("LongTermRetentionBackup.ID should not be nil!")
	}
}

func TestLongTermRetentionBackups_Delete(t *testing.T) {
	// From example Delete the long term retention backup.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		&LongTermRetentionBackupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLongTermRetentionBackups_ListByDatabase(t *testing.T) {
	// From example Get all long term retention backups under the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("japaneast",
		"testserver",
		"testDatabase",
		&LongTermRetentionBackupsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LongTermRetentionBackup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LongTermRetentionBackup.ID should not be nil!")
			}
		}
	}
}

func TestLongTermRetentionBackups_ListByLocation(t *testing.T) {
	// From example Get all long term retention backups under the location.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByLocation("japaneast",
		&LongTermRetentionBackupsListByLocationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LongTermRetentionBackup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LongTermRetentionBackup.ID should not be nil!")
			}
		}
	}
}

func TestLongTermRetentionBackups_ListByServer(t *testing.T) {
	// From example Get all long term retention backups under the server.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("japaneast",
		"testserver",
		&LongTermRetentionBackupsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LongTermRetentionBackup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LongTermRetentionBackup.ID should not be nil!")
			}
		}
	}
}

func TestLongTermRetentionBackups_CopyByResourceGroup(t *testing.T) {
	// From example Copy the long term retention backup.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCopyByResourceGroup(ctx,
		"testResourceGroup",
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		CopyLongTermRetentionBackupParameters{
			Properties: &CopyLongTermRetentionBackupParametersProperties{
				TargetBackupStorageRedundancy: TargetBackupStorageRedundancyGeo.ToPtr(),
				TargetDatabaseName:            to.StringPtr("testDatabase2"),
				TargetServerResourceID:        to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/resourceGroups/resourceGroup/servers/testserver2"),
			},
		},
		&LongTermRetentionBackupsBeginCopyByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LongTermRetentionBackupOperationResult.ID == nil {
		t.Fatal("LongTermRetentionBackupOperationResult.ID should not be nil!")
	}
}

func TestLongTermRetentionBackups_UpdateByResourceGroup(t *testing.T) {
	// From example Update the long term retention backup.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdateByResourceGroup(ctx,
		"testResourceGroup",
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		UpdateLongTermRetentionBackupParameters{
			Properties: &UpdateLongTermRetentionBackupParametersProperties{
				RequestedBackupStorageRedundancy: RequestedBackupStorageRedundancyGeo.ToPtr(),
			},
		},
		&LongTermRetentionBackupsBeginUpdateByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LongTermRetentionBackupOperationResult.ID == nil {
		t.Fatal("LongTermRetentionBackupOperationResult.ID should not be nil!")
	}
}

func TestLongTermRetentionBackups_GetByResourceGroup(t *testing.T) {
	// From example Get the long term retention backup.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.GetByResourceGroup(ctx,
		"testResourceGroup",
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		&LongTermRetentionBackupsGetByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LongTermRetentionBackup.ID == nil {
		t.Fatal("LongTermRetentionBackup.ID should not be nil!")
	}
}

func TestLongTermRetentionBackups_DeleteByResourceGroup(t *testing.T) {
	// From example Delete the long term retention backup.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDeleteByResourceGroup(ctx,
		"testResourceGroup",
		"japaneast",
		"testserver",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		&LongTermRetentionBackupsBeginDeleteByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLongTermRetentionBackups_ListByResourceGroupDatabase(t *testing.T) {
	// From example Get all long term retention backups under the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByResourceGroupDatabase("testResourceGroup",
		"japaneast",
		"testserver",
		"testDatabase",
		&LongTermRetentionBackupsListByResourceGroupDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LongTermRetentionBackup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LongTermRetentionBackup.ID should not be nil!")
			}
		}
	}
}

func TestLongTermRetentionBackups_ListByResourceGroupLocation(t *testing.T) {
	// From example Get all long term retention backups under the location.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByResourceGroupLocation("testResourceGroup",
		"japaneast",
		&LongTermRetentionBackupsListByResourceGroupLocationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LongTermRetentionBackup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LongTermRetentionBackup.ID should not be nil!")
			}
		}
	}
}

func TestLongTermRetentionBackups_ListByResourceGroupServer(t *testing.T) {
	// From example Get all long term retention backups under the server.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByResourceGroupServer("testResourceGroup",
		"japaneast",
		"testserver",
		&LongTermRetentionBackupsListByResourceGroupServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LongTermRetentionBackup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LongTermRetentionBackup.ID should not be nil!")
			}
		}
	}
}

func TestLongTermRetentionManagedInstanceBackups_Get(t *testing.T) {
	// From example Get the long term retention backup of a managed database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionManagedInstanceBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"japaneast",
		"testInstance",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		&LongTermRetentionManagedInstanceBackupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceLongTermRetentionBackup.ID == nil {
		t.Fatal("ManagedInstanceLongTermRetentionBackup.ID should not be nil!")
	}
}

func TestLongTermRetentionManagedInstanceBackups_Delete(t *testing.T) {
	// From example Delete the long term retention backup.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionManagedInstanceBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"japaneast",
		"testInstance",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		&LongTermRetentionManagedInstanceBackupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLongTermRetentionManagedInstanceBackups_ListByDatabase(t *testing.T) {
	// From example Get all long term retention backups under the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionManagedInstanceBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("japaneast",
		"testInstance",
		"testDatabase",
		&LongTermRetentionManagedInstanceBackupsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstanceLongTermRetentionBackup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstanceLongTermRetentionBackup.ID should not be nil!")
			}
		}
	}
}

func TestLongTermRetentionManagedInstanceBackups_ListByInstance(t *testing.T) {
	// From example Get all long term retention backups under the managed instance.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionManagedInstanceBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByInstance("japaneast",
		"testInstance",
		&LongTermRetentionManagedInstanceBackupsListByInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstanceLongTermRetentionBackup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstanceLongTermRetentionBackup.ID should not be nil!")
			}
		}
	}
}

func TestLongTermRetentionManagedInstanceBackups_ListByLocation(t *testing.T) {
	// From example Get all long term retention backups under the location.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionManagedInstanceBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByLocation("japaneast",
		&LongTermRetentionManagedInstanceBackupsListByLocationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstanceLongTermRetentionBackup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstanceLongTermRetentionBackup.ID should not be nil!")
			}
		}
	}
}

func TestLongTermRetentionManagedInstanceBackups_GetByResourceGroup(t *testing.T) {
	// From example Get the long term retention backup.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionManagedInstanceBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.GetByResourceGroup(ctx,
		"testResourceGroup",
		"japaneast",
		"testInstance",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		&LongTermRetentionManagedInstanceBackupsGetByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceLongTermRetentionBackup.ID == nil {
		t.Fatal("ManagedInstanceLongTermRetentionBackup.ID should not be nil!")
	}
}

func TestLongTermRetentionManagedInstanceBackups_DeleteByResourceGroup(t *testing.T) {
	// From example Delete the long term retention backup.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionManagedInstanceBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDeleteByResourceGroup(ctx,
		"testResourceGroup",
		"japaneast",
		"testInstance",
		"testDatabase",
		"55555555-6666-7777-8888-999999999999;131637960820000000",
		&LongTermRetentionManagedInstanceBackupsBeginDeleteByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLongTermRetentionManagedInstanceBackups_ListByResourceGroupDatabase(t *testing.T) {
	// From example Get all long term retention backups under the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionManagedInstanceBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByResourceGroupDatabase("testResourceGroup",
		"japaneast",
		"testInstance",
		"testDatabase",
		&LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstanceLongTermRetentionBackup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstanceLongTermRetentionBackup.ID should not be nil!")
			}
		}
	}
}

func TestLongTermRetentionManagedInstanceBackups_ListByResourceGroupInstance(t *testing.T) {
	// From example Get all long term retention backups under the managed instance.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionManagedInstanceBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByResourceGroupInstance("testResourceGroup",
		"japaneast",
		"testInstance",
		&LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstanceLongTermRetentionBackup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstanceLongTermRetentionBackup.ID should not be nil!")
			}
		}
	}
}

func TestLongTermRetentionManagedInstanceBackups_ListByResourceGroupLocation(t *testing.T) {
	// From example Get all long term retention backups under the location.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionManagedInstanceBackupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByResourceGroupLocation("testResourceGroup",
		"japaneast",
		&LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstanceLongTermRetentionBackup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstanceLongTermRetentionBackup.ID should not be nil!")
			}
		}
	}
}

func TestLongTermRetentionPolicies_Get(t *testing.T) {
	// From example Get the long term retention policy for the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"resourceGroup",
		"testserver",
		"testDatabase",
		LongTermRetentionPolicyNameDefault,
		&LongTermRetentionPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LongTermRetentionPolicy.ID == nil {
		t.Fatal("LongTermRetentionPolicy.ID should not be nil!")
	}
}

func TestLongTermRetentionPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create or update the long term retention policy for the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup",
		"testserver",
		"testDatabase",
		LongTermRetentionPolicyNameDefault,
		LongTermRetentionPolicy{
			Properties: &BaseLongTermRetentionPolicyProperties{
				MonthlyRetention: to.StringPtr("P1Y"),
				WeekOfYear:       to.Int32Ptr(5),
				WeeklyRetention:  to.StringPtr("P1M"),
				YearlyRetention:  to.StringPtr("P5Y"),
			},
		},
		&LongTermRetentionPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LongTermRetentionPolicy.ID == nil {
		t.Fatal("LongTermRetentionPolicy.ID should not be nil!")
	}
}

func TestLongTermRetentionPolicies_ListByDatabase(t *testing.T) {
	// From example Get the long term retention policy for the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLongTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("resourceGroup",
		"testserver",
		"testDatabase",
		&LongTermRetentionPoliciesListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LongTermRetentionPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LongTermRetentionPolicy.ID should not be nil!")
			}
		}
	}
}

func TestMaintenanceWindowOptions_Get(t *testing.T) {
	// From example Gets a list of available maintenance windows for a selected database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMaintenanceWindowOptionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"current",
		&MaintenanceWindowOptionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MaintenanceWindowOptions.ID == nil {
		t.Fatal("MaintenanceWindowOptions.ID should not be nil!")
	}
}

func TestMaintenanceWindows_Get(t *testing.T) {
	// From example Gets maintenance window settings for a selected database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMaintenanceWindowsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"current",
		&MaintenanceWindowsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MaintenanceWindows.ID == nil {
		t.Fatal("MaintenanceWindows.ID should not be nil!")
	}
}

func TestMaintenanceWindows_CreateOrUpdate(t *testing.T) {
	// From example Sets maintenance window settings for a selected database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMaintenanceWindowsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.CreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdwdb",
		"current",
		MaintenanceWindows{
			Properties: &MaintenanceWindowsProperties{
				TimeRanges: []*MaintenanceWindowTimeRange{
					{
						DayOfWeek: DayOfWeekSaturday.ToPtr(),
						Duration:  to.StringPtr("PT60M"),
						StartTime: to.StringPtr("00:00:00"),
					}},
			},
		},
		&MaintenanceWindowsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedBackupShortTermRetentionPolicies_Get(t *testing.T) {
	// From example Get the short term retention policy for the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedBackupShortTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		ManagedShortTermRetentionPolicyNameDefault,
		&ManagedBackupShortTermRetentionPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedBackupShortTermRetentionPolicy.ID == nil {
		t.Fatal("ManagedBackupShortTermRetentionPolicy.ID should not be nil!")
	}
}

func TestManagedBackupShortTermRetentionPolicies_CreateOrUpdate(t *testing.T) {
	// From example Update the short term retention policy for the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedBackupShortTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup",
		"testsvr",
		"testdb",
		ManagedShortTermRetentionPolicyNameDefault,
		ManagedBackupShortTermRetentionPolicy{
			Properties: &ManagedBackupShortTermRetentionPolicyProperties{
				RetentionDays: to.Int32Ptr(14),
			},
		},
		&ManagedBackupShortTermRetentionPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedBackupShortTermRetentionPolicy.ID == nil {
		t.Fatal("ManagedBackupShortTermRetentionPolicy.ID should not be nil!")
	}
}

func TestManagedBackupShortTermRetentionPolicies_Update(t *testing.T) {
	// From example Update the short term retention policy for the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedBackupShortTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdate(ctx,
		"resourceGroup",
		"testsvr",
		"testdb",
		ManagedShortTermRetentionPolicyNameDefault,
		ManagedBackupShortTermRetentionPolicy{
			Properties: &ManagedBackupShortTermRetentionPolicyProperties{
				RetentionDays: to.Int32Ptr(14),
			},
		},
		&ManagedBackupShortTermRetentionPoliciesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedBackupShortTermRetentionPolicy.ID == nil {
		t.Fatal("ManagedBackupShortTermRetentionPolicy.ID should not be nil!")
	}
}

func TestManagedBackupShortTermRetentionPolicies_ListByDatabase(t *testing.T) {
	// From example Get the short term retention policy list for the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedBackupShortTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		&ManagedBackupShortTermRetentionPoliciesListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedBackupShortTermRetentionPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedBackupShortTermRetentionPolicy.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabaseColumns_ListByDatabase(t *testing.T) {
	// From example Filter managed database columns
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseColumnsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("myRG",
		"serverName",
		"myDatabase",
		&ManagedDatabaseColumnsListByDatabaseOptions{Schema: []*string{
			to.StringPtr("dbo")},
			Table: []*string{
				to.StringPtr("customer"),
				to.StringPtr("address")},
			Column: []*string{
				to.StringPtr("username")},
			OrderBy: []*string{
				to.StringPtr("schema asc"),
				to.StringPtr("table"),
				to.StringPtr("column desc")},
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseColumn.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseColumn.ID should not be nil!")
			}
		}
	}

	// From example List managed database columns
	pager = client.ListByDatabase("myRG",
		"serverName",
		"myDatabase",
		&ManagedDatabaseColumnsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseColumn.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseColumn.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabaseColumns_ListByTable(t *testing.T) {
	// From example List managed database columns
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseColumnsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByTable("myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"table1",
		&ManagedDatabaseColumnsListByTableOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseColumn.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseColumn.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabaseColumns_Get(t *testing.T) {
	// From example Get managed database column
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseColumnsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"table1",
		"column1",
		&ManagedDatabaseColumnsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseColumn.ID == nil {
		t.Fatal("DatabaseColumn.ID should not be nil!")
	}
}

func TestManagedDatabaseQueries_Get(t *testing.T) {
	// From example Obtain query properties
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseQueriesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"database_1",
		"42",
		&ManagedDatabaseQueriesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceQuery.ID == nil {
		t.Fatal("ManagedInstanceQuery.ID should not be nil!")
	}
}

func TestManagedDatabaseQueries_ListByQuery(t *testing.T) {
	// From example Obtain query execution statistics
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseQueriesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByQuery("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"database_1",
		"42",
		&ManagedDatabaseQueriesListByQueryOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("QueryStatistics.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("QueryStatistics.ID should not be nil!")
			}
		}
	}

	// From example Obtain query execution statistics. Example with all request parameters.
	pager = client.ListByQuery("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"database_1",
		"42",
		&ManagedDatabaseQueriesListByQueryOptions{StartTime: to.StringPtr("03/01/2020 16:23:09"),
			EndTime:  to.StringPtr("03/11/2020 14:00:00"),
			Interval: QueryTimeGrainTypeP1D.ToPtr(),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("QueryStatistics.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("QueryStatistics.ID should not be nil!")
			}
		}
	}

	// From example Obtain query execution statistics. Minimal example with only mandatory request parameters.
	pager = client.ListByQuery("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"database_1",
		"42",
		&ManagedDatabaseQueriesListByQueryOptions{Interval: QueryTimeGrainTypePT1H.ToPtr()})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("QueryStatistics.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("QueryStatistics.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabaseRestoreDetails_Get(t *testing.T) {
	// From example Managed database restore details.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseRestoreDetailsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"testdb",
		RestoreDetailsNameDefault,
		&ManagedDatabaseRestoreDetailsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedDatabaseRestoreDetailsResult.ID == nil {
		t.Fatal("ManagedDatabaseRestoreDetailsResult.ID should not be nil!")
	}
}

func TestManagedDatabases_ListByInstance(t *testing.T) {
	// From example List databases by managed instances
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByInstance("Test1",
		"managedInstance",
		&ManagedDatabasesListByInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedDatabase.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedDatabase.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabases_Get(t *testing.T) {
	// From example Gets a managed database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Test1",
		"managedInstance",
		"managedDatabase",
		&ManagedDatabasesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedDatabase.ID == nil {
		t.Fatal("ManagedDatabase.ID should not be nil!")
	}
}

func TestManagedDatabases_CreateOrUpdate(t *testing.T) {
	// From example Creates a new managed database by restoring from an external backup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"managedDatabase",
		ManagedDatabase{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			Properties: &ManagedDatabaseProperties{
				AutoCompleteRestore:      to.BoolPtr(true),
				Collation:                to.StringPtr("SQL_Latin1_General_CP1_CI_AS"),
				CreateMode:               ManagedDatabaseCreateModeRestoreExternalBackup.ToPtr(),
				LastBackupName:           to.StringPtr("last_backup_name"),
				StorageContainerSasToken: to.StringPtr("sv=2015-12-11&sr=c&sp=rl&sig=1234"),
				StorageContainerURI:      to.StringPtr("https://myaccountname.blob.core.windows.net/backups"),
			},
		},
		&ManagedDatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedDatabase.ID == nil {
		t.Fatal("ManagedDatabase.ID should not be nil!")
	}

	// From example Creates a new managed database from restoring a geo-replicated backup
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"server1",
		"testdb_recovered",
		ManagedDatabase{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			Properties: &ManagedDatabaseProperties{
				CreateMode:            ManagedDatabaseCreateModeRecovery.ToPtr(),
				RecoverableDatabaseID: to.StringPtr("/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/Default-SQL-WestEurope/providers/Microsoft.Sql/managedInstances/testsvr/recoverableDatabases/testdb"),
			},
		},
		&ManagedDatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedDatabase.ID == nil {
		t.Fatal("ManagedDatabase.ID should not be nil!")
	}

	// From example Creates a new managed database from restoring a long term retention backup
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"managedDatabase",
		ManagedDatabase{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			Properties: &ManagedDatabaseProperties{
				Collation:                to.StringPtr("SQL_Latin1_General_CP1_CI_AS"),
				CreateMode:               ManagedDatabaseCreateModeRestoreExternalBackup.ToPtr(),
				StorageContainerSasToken: to.StringPtr("sv=2015-12-11&sr=c&sp=rl&sig=1234"),
				StorageContainerURI:      to.StringPtr("https://myaccountname.blob.core.windows.net/backups"),
			},
		},
		&ManagedDatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedDatabase.ID == nil {
		t.Fatal("ManagedDatabase.ID should not be nil!")
	}

	// From example Creates a new managed database using point in time restore
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"managedDatabase",
		ManagedDatabase{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
			Properties: &ManagedDatabaseProperties{
				CreateMode:         ManagedDatabaseCreateModePointInTimeRestore.ToPtr(),
				RestorePointInTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-07-14T05:35:31.503Z"); return t }()),
				SourceDatabaseID:   to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/testsvr/databases/testdb"),
			},
		},
		&ManagedDatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedDatabase.ID == nil {
		t.Fatal("ManagedDatabase.ID should not be nil!")
	}

	// From example Creates a new managed database with maximal properties
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"managedDatabase",
		ManagedDatabase{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
				Tags: map[string]*string{
					"tagKey1": to.StringPtr("TagValue1"),
				},
			},
		},
		&ManagedDatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedDatabase.ID == nil {
		t.Fatal("ManagedDatabase.ID should not be nil!")
	}

	// From example Creates a new managed database with minimal properties
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"managedDatabase",
		ManagedDatabase{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("southeastasia"),
			},
		},
		&ManagedDatabasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedDatabase.ID == nil {
		t.Fatal("ManagedDatabase.ID should not be nil!")
	}
}

func TestManagedDatabases_Delete(t *testing.T) {
	// From example Delete managed database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"testdb",
		&ManagedDatabasesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedDatabases_Update(t *testing.T) {
	// From example Updates a managed database with maximal properties
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"testdb",
		ManagedDatabaseUpdate{
			Tags: map[string]*string{
				"tagKey1": to.StringPtr("TagValue1"),
			},
		},
		&ManagedDatabasesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedDatabase.ID == nil {
		t.Fatal("ManagedDatabase.ID should not be nil!")
	}

	// From example Updates a managed database with minimal properties
	poller, err = client.BeginUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		"testdb",
		ManagedDatabaseUpdate{
			Tags: map[string]*string{
				"tagKey1": to.StringPtr("TagValue1"),
			},
		},
		&ManagedDatabasesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedDatabase.ID == nil {
		t.Fatal("ManagedDatabase.ID should not be nil!")
	}
}

func TestManagedDatabases_CompleteRestore(t *testing.T) {
	// From example Completes a managed database external backup restore.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCompleteRestore(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		CompleteDatabaseRestoreDefinition{
			LastBackupName: to.StringPtr("testdb1_log4"),
		},
		&ManagedDatabasesBeginCompleteRestoreOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedDatabases_ListInaccessibleByInstance(t *testing.T) {
	// From example List inaccessible managed databases by managed instances
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListInaccessibleByInstance("testrg",
		"testcl",
		&ManagedDatabasesListInaccessibleByInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedDatabase.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedDatabase.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabaseSchemas_ListByDatabase(t *testing.T) {
	// From example List managed database schemas
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseSchemasClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("myRG",
		"myManagedInstanceName",
		"myDatabase",
		&ManagedDatabaseSchemasListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseSchema.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseSchema.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabaseSchemas_Get(t *testing.T) {
	// From example Get managed database schema
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseSchemasClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		&ManagedDatabaseSchemasGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseSchema.ID == nil {
		t.Fatal("DatabaseSchema.ID should not be nil!")
	}
}

func TestManagedDatabaseSecurityAlertPolicies_Get(t *testing.T) {
	// From example Get a database's threat detection policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"securityalert-6852",
		"securityalert-2080",
		"testdb",
		SecurityAlertPolicyNameDefault,
		&ManagedDatabaseSecurityAlertPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedDatabaseSecurityAlertPolicy.ID == nil {
		t.Fatal("ManagedDatabaseSecurityAlertPolicy.ID should not be nil!")
	}
}

func TestManagedDatabaseSecurityAlertPolicies_CreateOrUpdate(t *testing.T) {
	// From example Update a database's threat detection policy with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		"testdb",
		SecurityAlertPolicyNameDefault,
		ManagedDatabaseSecurityAlertPolicy{
			Properties: &SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.StringPtr("Sql_Injection"),
					to.StringPtr("Usage_Anomaly")},
				EmailAccountAdmins: to.BoolPtr(true),
				EmailAddresses: []*string{
					to.StringPtr("test@contoso.com"),
					to.StringPtr("user@contoso.com")},
				RetentionDays:           to.Int32Ptr(6),
				State:                   SecurityAlertPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&ManagedDatabaseSecurityAlertPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedDatabaseSecurityAlertPolicy.ID == nil {
		t.Fatal("ManagedDatabaseSecurityAlertPolicy.ID should not be nil!")
	}

	// From example Update a database's threat detection policy with minimal parameters
	res, err = client.CreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		"testdb",
		SecurityAlertPolicyNameDefault,
		ManagedDatabaseSecurityAlertPolicy{
			Properties: &SecurityAlertPolicyProperties{
				State: SecurityAlertPolicyStateEnabled.ToPtr(),
			},
		},
		&ManagedDatabaseSecurityAlertPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedDatabaseSecurityAlertPolicy.ID == nil {
		t.Fatal("ManagedDatabaseSecurityAlertPolicy.ID should not be nil!")
	}
}

func TestManagedDatabaseSecurityAlertPolicies_ListByDatabase(t *testing.T) {
	// From example Get a list of the database's threat detection policies.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("securityalert-6852",
		"securityalert-2080",
		"testdb",
		&ManagedDatabaseSecurityAlertPoliciesListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedDatabaseSecurityAlertPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedDatabaseSecurityAlertPolicy.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabaseSecurityEvents_ListByDatabase(t *testing.T) {
	// From example Get the managed database's security events with maximal parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseSecurityEventsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("testrg",
		"testcl",
		"database1",
		&ManagedDatabaseSecurityEventsListByDatabaseOptions{Filter: to.StringPtr("ShowServerRecords eq true"),
			Skip:      to.Int32Ptr("0"),
			Top:       to.Int32Ptr("1"),
			Skiptoken: to.StringPtr("eyJCbG9iTmFtZURhdGVUaW1lIjoiXC9EYXRlKDE1MTIyODg4MTIwMTArMDIwMClcLyIsIkJsb2JOYW1lUm9sbG92ZXJJbmRleCI6IjAiLCJFbmREYXRlIjoiXC9EYXRlKDE1MTI0NjYyMDA1MjkpXC8iLCJJc1NraXBUb2tlblNldCI6ZmFsc2UsIklzVjJCbG9iVGltZUZvcm1hdCI6dHJ1ZSwiU2hvd1NlcnZlclJlY29yZHMiOmZhbHNlLCJTa2lwVmFsdWUiOjAsIlRha2VWYWx1ZSI6MTB9"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SecurityEvent.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SecurityEvent.ID should not be nil!")
			}
		}
	}

	// From example Get the managed database's security events with minimal parameters
	pager = client.ListByDatabase("testrg",
		"testcl",
		"database1",
		&ManagedDatabaseSecurityEventsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SecurityEvent.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SecurityEvent.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabaseSensitivityLabels_Get(t *testing.T) {
	// From example Gets the sensitivity label of a given column in a managed database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		SensitivityLabelSourceCurrent,
		&ManagedDatabaseSensitivityLabelsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SensitivityLabel.ID == nil {
		t.Fatal("SensitivityLabel.ID should not be nil!")
	}
}

func TestManagedDatabaseSensitivityLabels_CreateOrUpdate(t *testing.T) {
	// From example Updates or creates a sensitivity label of a given column with all parameters in a managed database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		SensitivityLabel{
			Properties: &SensitivityLabelProperties{
				InformationType:   to.StringPtr("PhoneNumber"),
				InformationTypeID: to.StringPtr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
				LabelID:           to.StringPtr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
				LabelName:         to.StringPtr("PII"),
				Rank:              SensitivityLabelRankHigh.ToPtr(),
			},
		},
		&ManagedDatabaseSensitivityLabelsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SensitivityLabel.ID == nil {
		t.Fatal("SensitivityLabel.ID should not be nil!")
	}
}

func TestManagedDatabaseSensitivityLabels_Delete(t *testing.T) {
	// From example Deletes the sensitivity label of a given column in a managed database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		&ManagedDatabaseSensitivityLabelsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedDatabaseSensitivityLabels_DisableRecommendation(t *testing.T) {
	// From example Disables the sensitivity recommendations on a given column
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.DisableRecommendation(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		&ManagedDatabaseSensitivityLabelsDisableRecommendationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedDatabaseSensitivityLabels_EnableRecommendation(t *testing.T) {
	// From example Enables the sensitivity recommendations on a given column
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.EnableRecommendation(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		&ManagedDatabaseSensitivityLabelsEnableRecommendationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedDatabaseSensitivityLabels_ListCurrentByDatabase(t *testing.T) {
	// From example Gets the current sensitivity labels of a given database in a managed database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListCurrentByDatabase("myRG",
		"myManagedInstanceName",
		"myDatabase",
		&ManagedDatabaseSensitivityLabelsListCurrentByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SensitivityLabel.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SensitivityLabel.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabaseSensitivityLabels_Update(t *testing.T) {
	// From example Update sensitivity labels of a given database using an operations batch.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Update(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		SensitivityLabelUpdateList{
			Operations: []*SensitivityLabelUpdate{
				{
					Properties: &SensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("column1"),
						Op:     SensitivityLabelUpdateKindSet.ToPtr(),
						SensitivityLabel: &SensitivityLabel{
							Properties: &SensitivityLabelProperties{
								InformationType:   to.StringPtr("Financial"),
								InformationTypeID: to.StringPtr("1D3652D6-422C-4115-82F1-65DAEBC665C8"),
								LabelID:           to.StringPtr("3A477B16-9423-432B-AA97-6069B481CEC3"),
								LabelName:         to.StringPtr("Highly Confidential"),
							},
						},
						Table: to.StringPtr("table1"),
					},
				},
				{
					Properties: &SensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("column2"),
						Op:     SensitivityLabelUpdateKindSet.ToPtr(),
						SensitivityLabel: &SensitivityLabel{
							Properties: &SensitivityLabelProperties{
								InformationType:   to.StringPtr("PhoneNumber"),
								InformationTypeID: to.StringPtr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
								LabelID:           to.StringPtr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
								LabelName:         to.StringPtr("PII"),
							},
						},
						Table: to.StringPtr("table2"),
					},
				},
				{
					Properties: &SensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("Column3"),
						Op:     SensitivityLabelUpdateKindRemove.ToPtr(),
						Table:  to.StringPtr("Table1"),
					},
				}},
		},
		&ManagedDatabaseSensitivityLabelsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedDatabaseSensitivityLabels_ListRecommendedByDatabase(t *testing.T) {
	// From example Gets the recommended sensitivity labels of a given database in a managed database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListRecommendedByDatabase("myRG",
		"myManagedInstanceName",
		"myDatabase",
		&ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SensitivityLabel.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SensitivityLabel.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabaseRecommendedSensitivityLabels_Update(t *testing.T) {
	// From example Update recommended sensitivity labels of a given database using an operations batch.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseRecommendedSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Update(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		RecommendedSensitivityLabelUpdateList{
			Operations: []*RecommendedSensitivityLabelUpdate{
				{
					Properties: &RecommendedSensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("column1"),
						Op:     RecommendedSensitivityLabelUpdateKindEnable.ToPtr(),
						Table:  to.StringPtr("table1"),
					},
				},
				{
					Properties: &RecommendedSensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("column2"),
						Op:     RecommendedSensitivityLabelUpdateKindDisable.ToPtr(),
						Table:  to.StringPtr("table2"),
					},
				},
				{
					Properties: &RecommendedSensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("Column3"),
						Op:     RecommendedSensitivityLabelUpdateKindDisable.ToPtr(),
						Table:  to.StringPtr("Table1"),
					},
				}},
		},
		&ManagedDatabaseRecommendedSensitivityLabelsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedDatabaseTables_ListBySchema(t *testing.T) {
	// From example List managed database tables
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseTablesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListBySchema("myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		&ManagedDatabaseTablesListBySchemaOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseTable.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseTable.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabaseTables_Get(t *testing.T) {
	// From example Get managed database table
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseTablesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"myRG",
		"myManagedInstanceName",
		"myDatabase",
		"dbo",
		"table1",
		&ManagedDatabaseTablesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseTable.ID == nil {
		t.Fatal("DatabaseTable.ID should not be nil!")
	}
}

func TestManagedDatabaseTransparentDataEncryption_Get(t *testing.T) {
	// From example Get a database's transparent data encryption
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseTransparentDataEncryptionClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"security-tde-resourcegroup",
		"securitytde",
		"testdb",
		TransparentDataEncryptionNameCurrent,
		&ManagedDatabaseTransparentDataEncryptionGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedTransparentDataEncryption.ID == nil {
		t.Fatal("ManagedTransparentDataEncryption.ID should not be nil!")
	}
}

func TestManagedDatabaseTransparentDataEncryption_CreateOrUpdate(t *testing.T) {
	// From example Update a database's Transparent Data Encryption state with minimal parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseTransparentDataEncryptionClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"securitytde-42-rg",
		"securitytde-42",
		"testdb",
		TransparentDataEncryptionNameCurrent,
		ManagedTransparentDataEncryption{
			Properties: &ManagedTransparentDataEncryptionProperties{
				State: TransparentDataEncryptionStateEnabled.ToPtr(),
			},
		},
		&ManagedDatabaseTransparentDataEncryptionCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedTransparentDataEncryption.ID == nil {
		t.Fatal("ManagedTransparentDataEncryption.ID should not be nil!")
	}
}

func TestManagedDatabaseTransparentDataEncryption_ListByDatabase(t *testing.T) {
	// From example Get a list of the database's transparent data encryptions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseTransparentDataEncryptionClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("security-tde-resourcegroup",
		"securitytde",
		"testdb",
		&ManagedDatabaseTransparentDataEncryptionListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedTransparentDataEncryption.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedTransparentDataEncryption.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabaseVulnerabilityAssessmentRuleBaselines_Get(t *testing.T) {
	// From example Gets a database's vulnerability assessment rule baseline.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4711",
		"vulnerabilityaseessmenttest-6411",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"VA1001",
		VulnerabilityAssessmentPolicyBaselineNameMaster,
		&ManagedDatabaseVulnerabilityAssessmentRuleBaselinesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseVulnerabilityAssessmentRuleBaseline.ID == nil {
		t.Fatal("DatabaseVulnerabilityAssessmentRuleBaseline.ID should not be nil!")
	}
}

func TestManagedDatabaseVulnerabilityAssessmentRuleBaselines_CreateOrUpdate(t *testing.T) {
	// From example Creates or updates a database's vulnerability assessment rule baseline.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"VA1001",
		VulnerabilityAssessmentPolicyBaselineNameDefault,
		DatabaseVulnerabilityAssessmentRuleBaseline{
			Properties: &DatabaseVulnerabilityAssessmentRuleBaselineProperties{
				BaselineResults: []*DatabaseVulnerabilityAssessmentRuleBaselineItem{
					{
						Result: []*string{
							to.StringPtr("userA"),
							to.StringPtr("SELECT")},
					},
					{
						Result: []*string{
							to.StringPtr("userB"),
							to.StringPtr("SELECT")},
					},
					{
						Result: []*string{
							to.StringPtr("userC"),
							to.StringPtr("SELECT"),
							to.StringPtr("tableId_4")},
					}},
			},
		},
		&ManagedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseVulnerabilityAssessmentRuleBaseline.ID == nil {
		t.Fatal("DatabaseVulnerabilityAssessmentRuleBaseline.ID should not be nil!")
	}
}

func TestManagedDatabaseVulnerabilityAssessmentRuleBaselines_Delete(t *testing.T) {
	// From example Removes a database's vulnerability assessment rule baseline.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseVulnerabilityAssessmentRuleBaselinesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"VA1001",
		VulnerabilityAssessmentPolicyBaselineNameDefault,
		&ManagedDatabaseVulnerabilityAssessmentRuleBaselinesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedDatabaseVulnerabilityAssessments_Get(t *testing.T) {
	// From example Get a database's vulnerability assessment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		&ManagedDatabaseVulnerabilityAssessmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseVulnerabilityAssessment.ID == nil {
		t.Fatal("DatabaseVulnerabilityAssessment.ID should not be nil!")
	}
}

func TestManagedDatabaseVulnerabilityAssessments_CreateOrUpdate(t *testing.T) {
	// From example Create a database's vulnerability assessment with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		DatabaseVulnerabilityAssessment{
			Properties: &DatabaseVulnerabilityAssessmentProperties{
				RecurringScans: &VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.BoolPtr(true),
					Emails: []*string{
						to.StringPtr("email1@mail.com"),
						to.StringPtr("email2@mail.com")},
					IsEnabled: to.BoolPtr(true),
				},
				StorageContainerPath:   to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		&ManagedDatabaseVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseVulnerabilityAssessment.ID == nil {
		t.Fatal("DatabaseVulnerabilityAssessment.ID should not be nil!")
	}

	// From example Create a database's vulnerability assessment with minimal parameters
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		DatabaseVulnerabilityAssessment{
			Properties: &DatabaseVulnerabilityAssessmentProperties{
				StorageContainerPath:   to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		&ManagedDatabaseVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseVulnerabilityAssessment.ID == nil {
		t.Fatal("DatabaseVulnerabilityAssessment.ID should not be nil!")
	}
}

func TestManagedDatabaseVulnerabilityAssessments_Delete(t *testing.T) {
	// From example Remove a database's vulnerability assessment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		&ManagedDatabaseVulnerabilityAssessmentsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedDatabaseVulnerabilityAssessments_ListByDatabase(t *testing.T) {
	// From example Get a database's vulnerability assessments list
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		&ManagedDatabaseVulnerabilityAssessmentsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseVulnerabilityAssessment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseVulnerabilityAssessment.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabaseVulnerabilityAssessmentScans_InitiateScan(t *testing.T) {
	// From example Executes a database's vulnerability assessment scan.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseVulnerabilityAssessmentScansClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginInitiateScan(ctx,
		"vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"scan01",
		&ManagedDatabaseVulnerabilityAssessmentScansBeginInitiateScanOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedDatabaseVulnerabilityAssessmentScans_Export(t *testing.T) {
	// From example Export a database's vulnerability assessment scan results.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseVulnerabilityAssessmentScansClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Export(ctx,
		"vulnerabilityassessmenttest-4799",
		"vulnerabilityassessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"scan001",
		&ManagedDatabaseVulnerabilityAssessmentScansExportOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DatabaseVulnerabilityAssessmentScansExport.ID == nil {
		t.Fatal("DatabaseVulnerabilityAssessmentScansExport.ID should not be nil!")
	}
}

func TestManagedDatabaseVulnerabilityAssessmentScans_ListByDatabase(t *testing.T) {
	// From example Gets the list of a database vulnerability assessment scan records
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseVulnerabilityAssessmentScansClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		&ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VulnerabilityAssessmentScanRecord.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VulnerabilityAssessmentScanRecord.ID should not be nil!")
			}
		}
	}
}

func TestManagedDatabaseVulnerabilityAssessmentScans_Get(t *testing.T) {
	// From example Gets a database vulnerability assessment scan record by scan ID
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedDatabaseVulnerabilityAssessmentScansClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"scan001",
		&ManagedDatabaseVulnerabilityAssessmentScansGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VulnerabilityAssessmentScanRecord.ID == nil {
		t.Fatal("VulnerabilityAssessmentScanRecord.ID should not be nil!")
	}
}

func TestManagedInstanceAdministrators_ListByInstance(t *testing.T) {
	// From example List administrators of managed instance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceAdministratorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByInstance("Default-SQL-SouthEastAsia",
		"managedInstance",
		&ManagedInstanceAdministratorsListByInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstanceAdministrator.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstanceAdministrator.ID should not be nil!")
			}
		}
	}
}

func TestManagedInstanceAdministrators_Get(t *testing.T) {
	// From example Get administrator of managed instance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceAdministratorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		AdministratorNameActiveDirectory,
		&ManagedInstanceAdministratorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceAdministrator.ID == nil {
		t.Fatal("ManagedInstanceAdministrator.ID should not be nil!")
	}
}

func TestManagedInstanceAdministrators_CreateOrUpdate(t *testing.T) {
	// From example Create administrator of managed instance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceAdministratorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		AdministratorNameActiveDirectory,
		ManagedInstanceAdministrator{
			Properties: &ManagedInstanceAdministratorProperties{
				AdministratorType: ManagedInstanceAdministratorTypeActiveDirectory.ToPtr(),
				Login:             to.StringPtr("bob@contoso.com"),
				Sid:               to.StringPtr("44444444-3333-2222-1111-000000000000"),
				TenantID:          to.StringPtr("55555555-4444-3333-2222-111111111111"),
			},
		},
		&ManagedInstanceAdministratorsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceAdministrator.ID == nil {
		t.Fatal("ManagedInstanceAdministrator.ID should not be nil!")
	}

	// From example Update administrator of managed instance
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		AdministratorNameActiveDirectory,
		ManagedInstanceAdministrator{
			Properties: &ManagedInstanceAdministratorProperties{
				AdministratorType: ManagedInstanceAdministratorTypeActiveDirectory.ToPtr(),
				Login:             to.StringPtr("bob@contoso.com"),
				Sid:               to.StringPtr("44444444-3333-2222-1111-000000000000"),
				TenantID:          to.StringPtr("55555555-4444-3333-2222-111111111111"),
			},
		},
		&ManagedInstanceAdministratorsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceAdministrator.ID == nil {
		t.Fatal("ManagedInstanceAdministrator.ID should not be nil!")
	}
}

func TestManagedInstanceAdministrators_Delete(t *testing.T) {
	// From example Delete administrator of managed instance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceAdministratorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		AdministratorNameActiveDirectory,
		&ManagedInstanceAdministratorsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedInstanceAzureADOnlyAuthentications_Get(t *testing.T) {
	// From example Gets a Azure Active Directory only authentication property.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceAzureADOnlyAuthenticationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		AuthenticationNameDefault,
		&ManagedInstanceAzureADOnlyAuthenticationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceAzureADOnlyAuthentication.ID == nil {
		t.Fatal("ManagedInstanceAzureADOnlyAuthentication.ID should not be nil!")
	}
}

func TestManagedInstanceAzureADOnlyAuthentications_CreateOrUpdate(t *testing.T) {
	// From example Creates or updates Azure Active Directory only authentication object.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceAzureADOnlyAuthenticationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		AuthenticationNameDefault,
		ManagedInstanceAzureADOnlyAuthentication{
			Properties: &ManagedInstanceAzureADOnlyAuthProperties{
				AzureADOnlyAuthentication: to.BoolPtr(false),
			},
		},
		&ManagedInstanceAzureADOnlyAuthenticationsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceAzureADOnlyAuthentication.ID == nil {
		t.Fatal("ManagedInstanceAzureADOnlyAuthentication.ID should not be nil!")
	}
}

func TestManagedInstanceAzureADOnlyAuthentications_Delete(t *testing.T) {
	// From example Deletes Azure Active Directory only authentication object.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceAzureADOnlyAuthenticationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"Default-SQL-SouthEastAsia",
		"managedInstance",
		AuthenticationNameDefault,
		&ManagedInstanceAzureADOnlyAuthenticationsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedInstanceAzureADOnlyAuthentications_ListByInstance(t *testing.T) {
	// From example Gets a list of Azure Active Directory only authentication object.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceAzureADOnlyAuthenticationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByInstance("Default-SQL-SouthEastAsia",
		"managedInstance",
		&ManagedInstanceAzureADOnlyAuthenticationsListByInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstanceAzureADOnlyAuthentication.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstanceAzureADOnlyAuthentication.ID should not be nil!")
			}
		}
	}
}

func TestManagedInstanceEncryptionProtectors_Revalidate(t *testing.T) {
	// From example Revalidates the encryption protector
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceEncryptionProtectorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginRevalidate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		EncryptionProtectorNameCurrent,
		&ManagedInstanceEncryptionProtectorsBeginRevalidateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedInstanceEncryptionProtectors_ListByInstance(t *testing.T) {
	// From example List encryption protectors by managed instance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceEncryptionProtectorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByInstance("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&ManagedInstanceEncryptionProtectorsListByInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstanceEncryptionProtector.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstanceEncryptionProtector.ID should not be nil!")
			}
		}
	}
}

func TestManagedInstanceEncryptionProtectors_Get(t *testing.T) {
	// From example Get the encryption protector
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceEncryptionProtectorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		EncryptionProtectorNameCurrent,
		&ManagedInstanceEncryptionProtectorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceEncryptionProtector.ID == nil {
		t.Fatal("ManagedInstanceEncryptionProtector.ID should not be nil!")
	}
}

func TestManagedInstanceEncryptionProtectors_CreateOrUpdate(t *testing.T) {
	// From example Update the encryption protector to key vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceEncryptionProtectorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		EncryptionProtectorNameCurrent,
		ManagedInstanceEncryptionProtector{
			Properties: &ManagedInstanceEncryptionProtectorProperties{
				AutoRotationEnabled: to.BoolPtr(false),
				ServerKeyName:       to.StringPtr("someVault_someKey_01234567890123456789012345678901"),
				ServerKeyType:       ServerKeyTypeAzureKeyVault.ToPtr(),
			},
		},
		&ManagedInstanceEncryptionProtectorsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceEncryptionProtector.ID == nil {
		t.Fatal("ManagedInstanceEncryptionProtector.ID should not be nil!")
	}

	// From example Update the encryption protector to service managed
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		EncryptionProtectorNameCurrent,
		ManagedInstanceEncryptionProtector{
			Properties: &ManagedInstanceEncryptionProtectorProperties{
				ServerKeyName: to.StringPtr("ServiceManaged"),
				ServerKeyType: ServerKeyTypeServiceManaged.ToPtr(),
			},
		},
		&ManagedInstanceEncryptionProtectorsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceEncryptionProtector.ID == nil {
		t.Fatal("ManagedInstanceEncryptionProtector.ID should not be nil!")
	}
}

func TestManagedInstanceKeys_ListByInstance(t *testing.T) {
	// From example List the keys for a managed instance.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceKeysClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByInstance("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&ManagedInstanceKeysListByInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstanceKey.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstanceKey.ID should not be nil!")
			}
		}
	}
}

func TestManagedInstanceKeys_Get(t *testing.T) {
	// From example Get the managed instance key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceKeysClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"someVault_someKey_01234567890123456789012345678901",
		&ManagedInstanceKeysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceKey.ID == nil {
		t.Fatal("ManagedInstanceKey.ID should not be nil!")
	}
}

func TestManagedInstanceKeys_CreateOrUpdate(t *testing.T) {
	// From example Creates or updates a managed instance key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceKeysClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"someVault_someKey_01234567890123456789012345678901",
		ManagedInstanceKey{
			Properties: &ManagedInstanceKeyProperties{
				ServerKeyType: ServerKeyTypeAzureKeyVault.ToPtr(),
				URI:           to.StringPtr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
			},
		},
		&ManagedInstanceKeysBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceKey.ID == nil {
		t.Fatal("ManagedInstanceKey.ID should not be nil!")
	}
}

func TestManagedInstanceKeys_Delete(t *testing.T) {
	// From example Delete the managed instance key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceKeysClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"someVault_someKey_01234567890123456789012345678901",
		&ManagedInstanceKeysBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedInstanceLongTermRetentionPolicies_Get(t *testing.T) {
	// From example Get the long term retention policy for the managed database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceLongTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testInstance",
		"testDatabase",
		ManagedInstanceLongTermRetentionPolicyNameDefault,
		&ManagedInstanceLongTermRetentionPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceLongTermRetentionPolicy.ID == nil {
		t.Fatal("ManagedInstanceLongTermRetentionPolicy.ID should not be nil!")
	}
}

func TestManagedInstanceLongTermRetentionPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create or update the LTR policy for the managed database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceLongTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testResourceGroup",
		"testInstance",
		"testDatabase",
		ManagedInstanceLongTermRetentionPolicyNameDefault,
		ManagedInstanceLongTermRetentionPolicy{
			Properties: &BaseLongTermRetentionPolicyProperties{
				MonthlyRetention: to.StringPtr("P1Y"),
				WeekOfYear:       to.Int32Ptr(5),
				WeeklyRetention:  to.StringPtr("P1M"),
				YearlyRetention:  to.StringPtr("P5Y"),
			},
		},
		&ManagedInstanceLongTermRetentionPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceLongTermRetentionPolicy.ID == nil {
		t.Fatal("ManagedInstanceLongTermRetentionPolicy.ID should not be nil!")
	}
}

func TestManagedInstanceLongTermRetentionPolicies_ListByDatabase(t *testing.T) {
	// From example Get the long term retention policies for the managed database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceLongTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("testResourceGroup",
		"testInstance",
		"testDatabase",
		&ManagedInstanceLongTermRetentionPoliciesListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstanceLongTermRetentionPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstanceLongTermRetentionPolicy.ID should not be nil!")
			}
		}
	}
}

func TestManagedInstanceOperations_ListByManagedInstance(t *testing.T) {
	// From example List the managed instance management operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceOperationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByManagedInstance("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&ManagedInstanceOperationsListByManagedInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstanceOperation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstanceOperation.ID should not be nil!")
			}
		}
	}
}

func TestManagedInstanceOperations_Get(t *testing.T) {
	// From example Gets the managed instance management operation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceOperationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"00000000-1111-2222-3333-444444444444",
		&ManagedInstanceOperationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceOperation.ID == nil {
		t.Fatal("ManagedInstanceOperation.ID should not be nil!")
	}
}

func TestManagedInstanceOperations_Cancel(t *testing.T) {
	// From example Cancel the managed instance management operation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceOperationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Cancel(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"11111111-1111-1111-1111-111111111111",
		&ManagedInstanceOperationsCancelOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedInstancePrivateEndpointConnections_Get(t *testing.T) {
	// From example Gets private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancePrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default",
		"test-cl",
		"private-endpoint-connection-name",
		&ManagedInstancePrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstancePrivateEndpointConnection.ID == nil {
		t.Fatal("ManagedInstancePrivateEndpointConnection.ID should not be nil!")
	}
}

func TestManagedInstancePrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example Approve or reject a private endpoint connection with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancePrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"test-cl",
		"private-endpoint-connection-name",
		ManagedInstancePrivateEndpointConnection{
			Properties: &ManagedInstancePrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &ManagedInstancePrivateLinkServiceConnectionStateProperty{
					Description: to.StringPtr("Approved by johndoe@contoso.com"),
					Status:      to.StringPtr("Approved"),
				},
			},
		},
		&ManagedInstancePrivateEndpointConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstancePrivateEndpointConnection.ID == nil {
		t.Fatal("ManagedInstancePrivateEndpointConnection.ID should not be nil!")
	}
}

func TestManagedInstancePrivateEndpointConnections_Delete(t *testing.T) {
	// From example Deletes a private endpoint connection with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancePrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"Default",
		"test-cl",
		"private-endpoint-connection-name",
		&ManagedInstancePrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedInstancePrivateEndpointConnections_ListByManagedInstance(t *testing.T) {
	// From example Gets list of private endpoint connections on a server.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancePrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByManagedInstance("Default",
		"test-cl",
		&ManagedInstancePrivateEndpointConnectionsListByManagedInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstancePrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstancePrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestManagedInstancePrivateLinkResources_ListByManagedInstance(t *testing.T) {
	// From example Gets private link resources for SQL.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancePrivateLinkResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByManagedInstance("Default",
		"test-cl",
		&ManagedInstancePrivateLinkResourcesListByManagedInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstancePrivateLink.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstancePrivateLink.ID should not be nil!")
			}
		}
	}
}

func TestManagedInstancePrivateLinkResources_Get(t *testing.T) {
	// From example Gets a private link resource for SQL.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancePrivateLinkResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default",
		"test-cl",
		"plr",
		&ManagedInstancePrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstancePrivateLink.ID == nil {
		t.Fatal("ManagedInstancePrivateLink.ID should not be nil!")
	}
}

func TestManagedInstances_ListByInstancePool(t *testing.T) {
	// From example List managed instances by instance pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancesClient(con,
		"20D7082A-0FC7-4468-82BD-542694D5042B")
	pager := client.ListByInstancePool("Test1",
		"pool1",
		&ManagedInstancesListByInstancePoolOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstance.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstance.ID should not be nil!")
			}
		}
	}

	// From example List managed instances by instance pool with expand equals administrators
	pager = client.ListByInstancePool("Test1",
		"pool1",
		&ManagedInstancesListByInstancePoolOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstance.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstance.ID should not be nil!")
			}
		}
	}
}

func TestManagedInstances_List(t *testing.T) {
	// From example List managed instances
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancesClient(con,
		"20D7082A-0FC7-4468-82BD-542694D5042B")
	pager := client.List(&ManagedInstancesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstance.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstance.ID should not be nil!")
			}
		}
	}

	// From example List managed instances with expand equals administrators
	pager = client.List(&ManagedInstancesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstance.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstance.ID should not be nil!")
			}
		}
	}
}

func TestManagedInstances_ListByResourceGroup(t *testing.T) {
	// From example List managed instances by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancesClient(con,
		"20D7082A-0FC7-4468-82BD-542694D5042B")
	pager := client.ListByResourceGroup("Test1",
		&ManagedInstancesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstance.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstance.ID should not be nil!")
			}
		}
	}

	// From example List managed instances by resource group with $expand=administrators
	pager = client.ListByResourceGroup("Test1",
		&ManagedInstancesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstance.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstance.ID should not be nil!")
			}
		}
	}
}

func TestManagedInstances_Get(t *testing.T) {
	// From example Get managed instance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancesClient(con,
		"20d7082a-0fc7-4468-82bd-542694d5042b")
	res, err := client.Get(ctx,
		"testrg",
		"testinstance",
		&ManagedInstancesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstance.ID == nil {
		t.Fatal("ManagedInstance.ID should not be nil!")
	}

	// From example Get managed instance with $expand=administrators
	res, err = client.Get(ctx,
		"testrg",
		"testinstance",
		&ManagedInstancesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstance.ID == nil {
		t.Fatal("ManagedInstance.ID should not be nil!")
	}
}

func TestManagedInstances_CreateOrUpdate(t *testing.T) {
	// From example Create managed instance with all properties
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancesClient(con,
		"20D7082A-0FC7-4468-82BD-542694D5042B")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testinstance",
		ManagedInstance{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("Japan East"),
				Tags: map[string]*string{
					"tagKey1": to.StringPtr("TagValue1"),
				},
			},
			Properties: &ManagedInstanceProperties{
				AdministratorLogin:         to.StringPtr("dummylogin"),
				AdministratorLoginPassword: to.StringPtr("PLACEHOLDER"),
				Administrators: &ManagedInstanceExternalAdministrator{
					AzureADOnlyAuthentication: to.BoolPtr(true),
					Login:                     to.StringPtr("bob@contoso.com"),
					PrincipalType:             PrincipalTypeUser.ToPtr(),
					Sid:                       to.StringPtr("00000011-1111-2222-2222-123456789111"),
					TenantID:                  to.StringPtr("00000011-1111-2222-2222-123456789111"),
				},
				Collation:                  to.StringPtr("SQL_Latin1_General_CP1_CI_AS"),
				DNSZonePartner:             to.StringPtr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/managedInstances/testinstance"),
				InstancePoolID:             to.StringPtr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Sql/instancePools/pool1"),
				LicenseType:                ManagedInstanceLicenseTypeLicenseIncluded.ToPtr(),
				MaintenanceConfigurationID: to.StringPtr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1"),
				MinimalTLSVersion:          to.StringPtr("1.2"),
				ProxyOverride:              ManagedInstanceProxyOverrideRedirect.ToPtr(),
				PublicDataEndpointEnabled:  to.BoolPtr(false),
				StorageAccountType:         StorageAccountTypeGRS.ToPtr(),
				StorageSizeInGB:            to.Int32Ptr(1024),
				SubnetID:                   to.StringPtr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
				TimezoneID:                 to.StringPtr("UTC"),
				VCores:                     to.Int32Ptr(8),
			},
			SKU: &SKU{
				Name: to.StringPtr("GP_Gen5"),
				Tier: to.StringPtr("GeneralPurpose"),
			},
		},
		&ManagedInstancesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstance.ID == nil {
		t.Fatal("ManagedInstance.ID should not be nil!")
	}

	// From example Create managed instance with minimal properties
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testinstance",
		ManagedInstance{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("Japan East"),
			},
			Properties: &ManagedInstanceProperties{
				AdministratorLogin:         to.StringPtr("dummylogin"),
				AdministratorLoginPassword: to.StringPtr("PLACEHOLDER"),
				LicenseType:                ManagedInstanceLicenseTypeLicenseIncluded.ToPtr(),
				StorageSizeInGB:            to.Int32Ptr(1024),
				SubnetID:                   to.StringPtr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
				VCores:                     to.Int32Ptr(8),
			},
			SKU: &SKU{
				Name: to.StringPtr("GP_Gen4"),
				Tier: to.StringPtr("GeneralPurpose"),
			},
		},
		&ManagedInstancesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstance.ID == nil {
		t.Fatal("ManagedInstance.ID should not be nil!")
	}
}

func TestManagedInstances_Delete(t *testing.T) {
	// From example Delete managed instance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancesClient(con,
		"20D7082A-0FC7-4468-82BD-542694D5042B")
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"testinstance",
		&ManagedInstancesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedInstances_Update(t *testing.T) {
	// From example Remove maintenance policy from managed instance (select default maintenance policy)
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancesClient(con,
		"20D7082A-0FC7-4468-82BD-542694D5042B")
	poller, err := client.BeginUpdate(ctx,
		"testrg",
		"testinstance",
		ManagedInstanceUpdate{
			Properties: &ManagedInstanceProperties{
				MaintenanceConfigurationID: to.StringPtr("/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default"),
			},
		},
		&ManagedInstancesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstance.ID == nil {
		t.Fatal("ManagedInstance.ID should not be nil!")
	}

	// From example Update managed instance with all properties
	poller, err = client.BeginUpdate(ctx,
		"testrg",
		"testinstance",
		ManagedInstanceUpdate{
			Properties: &ManagedInstanceProperties{
				AdministratorLogin:         to.StringPtr("dummylogin"),
				AdministratorLoginPassword: to.StringPtr("PLACEHOLDER"),
				Collation:                  to.StringPtr("SQL_Latin1_General_CP1_CI_AS"),
				LicenseType:                ManagedInstanceLicenseTypeBasePrice.ToPtr(),
				MaintenanceConfigurationID: to.StringPtr("/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1"),
				MinimalTLSVersion:          to.StringPtr("1.2"),
				ProxyOverride:              ManagedInstanceProxyOverrideRedirect.ToPtr(),
				PublicDataEndpointEnabled:  to.BoolPtr(false),
				StorageSizeInGB:            to.Int32Ptr(448),
				VCores:                     to.Int32Ptr(8),
			},
			SKU: &SKU{
				Name:     to.StringPtr("GP_Gen4"),
				Capacity: to.Int32Ptr(8),
				Tier:     to.StringPtr("GeneralPurpose"),
			},
			Tags: map[string]*string{
				"tagKey1": to.StringPtr("TagValue1"),
			},
		},
		&ManagedInstancesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstance.ID == nil {
		t.Fatal("ManagedInstance.ID should not be nil!")
	}

	// From example Update managed instance with minimal properties
	poller, err = client.BeginUpdate(ctx,
		"testrg",
		"testinstance",
		ManagedInstanceUpdate{
			Tags: map[string]*string{
				"tagKey1": to.StringPtr("TagValue1"),
			},
		},
		&ManagedInstancesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstance.ID == nil {
		t.Fatal("ManagedInstance.ID should not be nil!")
	}
}

func TestManagedInstances_ListByManagedInstance(t *testing.T) {
	// From example Obtain list of instance's top resource consuming queries.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByManagedInstance("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&ManagedInstancesListByManagedInstanceOptions{Interval: QueryTimeGrainTypePT1H.ToPtr(),
			ObservationMetric: MetricTypeDuration.ToPtr(),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}

	// From example Obtain list of instance's top resource consuming queries. Full-blown request and response.
	pager = client.ListByManagedInstance("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&ManagedInstancesListByManagedInstanceOptions{Databases: to.StringPtr("db1,db2"),
			StartTime:         to.StringPtr("2020-03-10T12:00:00Z"),
			EndTime:           to.StringPtr("2020-03-12T12:00:00Z"),
			Interval:          QueryTimeGrainTypeP1D.ToPtr(),
			ObservationMetric: MetricTypeCPU.ToPtr(),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}

	// From example Obtain list of instance's top resource consuming queries. Minimal request and response.
	pager = client.ListByManagedInstance("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&ManagedInstancesListByManagedInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestManagedInstances_Failover(t *testing.T) {
	// From example Failover a managed instance.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstancesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginFailover(ctx,
		"group1",
		"instanceName",
		&ManagedInstancesBeginFailoverOptions{ReplicaType: ReplicaTypePrimary.ToPtr()})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedInstanceTdeCertificates_Create(t *testing.T) {
	// From example Upload a TDE certificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceTdeCertificatesClient(con,
		"00000000-0000-0000-0000-000000000001")
	poller, err := client.BeginCreate(ctx,
		"testtdecert",
		"testtdecert",
		TdeCertificate{
			Properties: &TdeCertificateProperties{
				PrivateBlob: to.StringPtr("MIIXXXXXXXX"),
			},
		},
		&ManagedInstanceTdeCertificatesBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedInstanceVulnerabilityAssessments_Get(t *testing.T) {
	// From example Get a managed instance's vulnerability assessment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		VulnerabilityAssessmentNameDefault,
		&ManagedInstanceVulnerabilityAssessmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceVulnerabilityAssessment.ID == nil {
		t.Fatal("ManagedInstanceVulnerabilityAssessment.ID should not be nil!")
	}
}

func TestManagedInstanceVulnerabilityAssessments_CreateOrUpdate(t *testing.T) {
	// From example Create a managed instance's vulnerability assessment with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		VulnerabilityAssessmentNameDefault,
		ManagedInstanceVulnerabilityAssessment{
			Properties: &ManagedInstanceVulnerabilityAssessmentProperties{
				RecurringScans: &VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.BoolPtr(true),
					Emails: []*string{
						to.StringPtr("email1@mail.com"),
						to.StringPtr("email2@mail.com")},
					IsEnabled: to.BoolPtr(true),
				},
				StorageAccountAccessKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey:  to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		&ManagedInstanceVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceVulnerabilityAssessment.ID == nil {
		t.Fatal("ManagedInstanceVulnerabilityAssessment.ID should not be nil!")
	}

	// From example Create a managed instance's vulnerability assessment with minimal parameters, when storageAccountAccessKey is specified
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		VulnerabilityAssessmentNameDefault,
		ManagedInstanceVulnerabilityAssessment{
			Properties: &ManagedInstanceVulnerabilityAssessmentProperties{
				StorageAccountAccessKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
			},
		},
		&ManagedInstanceVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceVulnerabilityAssessment.ID == nil {
		t.Fatal("ManagedInstanceVulnerabilityAssessment.ID should not be nil!")
	}

	// From example Create a managed instance's vulnerability assessment with minimal parameters, when storageContainerSasKey is specified
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		VulnerabilityAssessmentNameDefault,
		ManagedInstanceVulnerabilityAssessment{
			Properties: &ManagedInstanceVulnerabilityAssessmentProperties{
				StorageContainerPath:   to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		&ManagedInstanceVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedInstanceVulnerabilityAssessment.ID == nil {
		t.Fatal("ManagedInstanceVulnerabilityAssessment.ID should not be nil!")
	}
}

func TestManagedInstanceVulnerabilityAssessments_Delete(t *testing.T) {
	// From example Remove a managed instance's vulnerability assessment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		VulnerabilityAssessmentNameDefault,
		&ManagedInstanceVulnerabilityAssessmentsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagedInstanceVulnerabilityAssessments_ListByInstance(t *testing.T) {
	// From example Get a managed instance's vulnerability assessment policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedInstanceVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByInstance("vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		&ManagedInstanceVulnerabilityAssessmentsListByInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedInstanceVulnerabilityAssessment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedInstanceVulnerabilityAssessment.ID should not be nil!")
			}
		}
	}
}

func TestManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_Get(t *testing.T) {
	// From example Get the short term retention policy for the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb,131403269876900000",
		ManagedShortTermRetentionPolicyNameDefault,
		&ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedBackupShortTermRetentionPolicy.ID == nil {
		t.Fatal("ManagedBackupShortTermRetentionPolicy.ID should not be nil!")
	}
}

func TestManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_CreateOrUpdate(t *testing.T) {
	// From example Update the short term retention policy for the restorable dropped database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup",
		"testsvr",
		"testdb,131403269876900000",
		ManagedShortTermRetentionPolicyNameDefault,
		ManagedBackupShortTermRetentionPolicy{
			Properties: &ManagedBackupShortTermRetentionPolicyProperties{
				RetentionDays: to.Int32Ptr(14),
			},
		},
		&ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedBackupShortTermRetentionPolicy.ID == nil {
		t.Fatal("ManagedBackupShortTermRetentionPolicy.ID should not be nil!")
	}
}

func TestManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_Update(t *testing.T) {
	// From example Update the short term retention policy for the restorable dropped database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdate(ctx,
		"resourceGroup",
		"testsvr",
		"testdb,131403269876900000",
		ManagedShortTermRetentionPolicyNameDefault,
		ManagedBackupShortTermRetentionPolicy{
			Properties: &ManagedBackupShortTermRetentionPolicyProperties{
				RetentionDays: to.Int32Ptr(14),
			},
		},
		&ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedBackupShortTermRetentionPolicy.ID == nil {
		t.Fatal("ManagedBackupShortTermRetentionPolicy.ID should not be nil!")
	}
}

func TestManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_ListByRestorableDroppedDatabase(t *testing.T) {
	// From example Get the short term retention policy list for the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByRestorableDroppedDatabase("Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb,131403269876900000",
		&ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesListByRestorableDroppedDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedBackupShortTermRetentionPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedBackupShortTermRetentionPolicy.ID should not be nil!")
			}
		}
	}
}

func TestManagedServerSecurityAlertPolicies_Get(t *testing.T) {
	// From example Get a managed server's threat detection policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedServerSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"securityalert-4799",
		"securityalert-6440",
		SecurityAlertPolicyNameDefault,
		&ManagedServerSecurityAlertPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedServerSecurityAlertPolicy.ID == nil {
		t.Fatal("ManagedServerSecurityAlertPolicy.ID should not be nil!")
	}
}

func TestManagedServerSecurityAlertPolicies_CreateOrUpdate(t *testing.T) {
	// From example Update a managed server's threat detection policy with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedServerSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		SecurityAlertPolicyNameDefault,
		ManagedServerSecurityAlertPolicy{
			Properties: &SecurityAlertsPolicyProperties{
				DisabledAlerts: []*string{
					to.StringPtr("Access_Anomaly"),
					to.StringPtr("Usage_Anomaly")},
				EmailAccountAdmins: to.BoolPtr(true),
				EmailAddresses: []*string{
					to.StringPtr("testSecurityAlert@microsoft.com")},
				RetentionDays:           to.Int32Ptr(5),
				State:                   SecurityAlertsPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&ManagedServerSecurityAlertPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedServerSecurityAlertPolicy.ID == nil {
		t.Fatal("ManagedServerSecurityAlertPolicy.ID should not be nil!")
	}

	// From example Update a managed server's threat detection policy with minimal parameters
	poller, err = client.BeginCreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		SecurityAlertPolicyNameDefault,
		ManagedServerSecurityAlertPolicy{
			Properties: &SecurityAlertsPolicyProperties{
				State: SecurityAlertsPolicyStateEnabled.ToPtr(),
			},
		},
		&ManagedServerSecurityAlertPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedServerSecurityAlertPolicy.ID == nil {
		t.Fatal("ManagedServerSecurityAlertPolicy.ID should not be nil!")
	}
}

func TestManagedServerSecurityAlertPolicies_ListByInstance(t *testing.T) {
	// From example Get the managed server's threat detection policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagedServerSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByInstance("securityalert-4799",
		"securityalert-6440",
		&ManagedServerSecurityAlertPoliciesListByInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedServerSecurityAlertPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedServerSecurityAlertPolicy.ID should not be nil!")
			}
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestOperationsHealth_ListByLocation(t *testing.T) {
	// From example Get management operations health in the given location.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsHealthClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByLocation("WestUS",
		&OperationsHealthListByLocationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("OperationsHealth.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("OperationsHealth.ID should not be nil!")
			}
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example Gets private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example Approve or reject a private endpoint connection with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionStateProperty{
					Description: to.StringPtr("Approved by johndoe@contoso.com"),
					Status:      PrivateLinkServiceConnectionStateStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example Deletes a private endpoint connection with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_ListByServer(t *testing.T) {
	// From example Gets list of private endpoint connections on a server.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("Default",
		"test-svr",
		&PrivateEndpointConnectionsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_ListByServer(t *testing.T) {
	// From example Gets private link resources for SQL.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("Default",
		"test-svr",
		&PrivateLinkResourcesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example Gets a private link resource for SQL.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default",
		"test-svr",
		"plr",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

func TestRecoverableManagedDatabases_ListByInstance(t *testing.T) {
	// From example List recoverable databases by managed instances
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecoverableManagedDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByInstance("Test1",
		"managedInstance",
		&RecoverableManagedDatabasesListByInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecoverableManagedDatabase.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecoverableManagedDatabase.ID should not be nil!")
			}
		}
	}
}

func TestRecoverableManagedDatabases_Get(t *testing.T) {
	// From example Gets a recoverable databases by managed instances
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecoverableManagedDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Test1",
		"managedInstance",
		"testdb",
		&RecoverableManagedDatabasesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecoverableManagedDatabase.ID == nil {
		t.Fatal("RecoverableManagedDatabase.ID should not be nil!")
	}
}

func TestRestorePoints_ListByDatabase(t *testing.T) {
	// From example List database restore points.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRestorePointsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("sqlcrudtest-6730",
		"sqlcrudtest-9007",
		"3481",
		&RestorePointsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RestorePoint.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RestorePoint.ID should not be nil!")
			}
		}
	}

	// From example List datawarehouse database restore points.
	pager = client.ListByDatabase("Default-SQL-SouthEastAsia",
		"testserver",
		"testDatabase",
		&RestorePointsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RestorePoint.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RestorePoint.ID should not be nil!")
			}
		}
	}
}

func TestRestorePoints_Create(t *testing.T) {
	// From example Creates datawarehouse database restore point.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRestorePointsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreate(ctx,
		"Default-SQL-SouthEastAsia",
		"testserver",
		"testDatabase",
		CreateDatabaseRestorePointDefinition{
			RestorePointLabel: to.StringPtr("mylabel"),
		},
		&RestorePointsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.RestorePoint.ID == nil {
		t.Fatal("RestorePoint.ID should not be nil!")
	}
}

func TestRestorePoints_Get(t *testing.T) {
	// From example Gets a database restore point.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRestorePointsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testserver",
		"testDatabase",
		"131546477590000000",
		&RestorePointsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RestorePoint.ID == nil {
		t.Fatal("RestorePoint.ID should not be nil!")
	}

	// From example Gets a datawarehouse database restore point.
	res, err = client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testserver",
		"testDatabase",
		"131546477590000000",
		&RestorePointsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RestorePoint.ID == nil {
		t.Fatal("RestorePoint.ID should not be nil!")
	}
}

func TestRestorePoints_Delete(t *testing.T) {
	// From example Deletes a restore point.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRestorePointsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"Default-SQL-SouthEastAsia",
		"testserver",
		"testDatabase",
		"131546477590000000",
		&RestorePointsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSensitivityLabels_ListCurrentByDatabase(t *testing.T) {
	// From example Gets the current sensitivity labels of a given database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListCurrentByDatabase("myRG",
		"myServer",
		"myDatabase",
		&SensitivityLabelsListCurrentByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SensitivityLabel.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SensitivityLabel.ID should not be nil!")
			}
		}
	}
}

func TestSensitivityLabels_Update(t *testing.T) {
	// From example Update sensitivity labels of a given database using an operations batch.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Update(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		SensitivityLabelUpdateList{
			Operations: []*SensitivityLabelUpdate{
				{
					Properties: &SensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("column1"),
						Op:     SensitivityLabelUpdateKindSet.ToPtr(),
						SensitivityLabel: &SensitivityLabel{
							Properties: &SensitivityLabelProperties{
								InformationType:   to.StringPtr("Financial"),
								InformationTypeID: to.StringPtr("1D3652D6-422C-4115-82F1-65DAEBC665C8"),
								LabelID:           to.StringPtr("3A477B16-9423-432B-AA97-6069B481CEC3"),
								LabelName:         to.StringPtr("Highly Confidential"),
								Rank:              SensitivityLabelRankLow.ToPtr(),
							},
						},
						Table: to.StringPtr("table1"),
					},
				},
				{
					Properties: &SensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("column2"),
						Op:     SensitivityLabelUpdateKindSet.ToPtr(),
						SensitivityLabel: &SensitivityLabel{
							Properties: &SensitivityLabelProperties{
								InformationType:   to.StringPtr("PhoneNumber"),
								InformationTypeID: to.StringPtr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
								LabelID:           to.StringPtr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
								LabelName:         to.StringPtr("PII"),
								Rank:              SensitivityLabelRankCritical.ToPtr(),
							},
						},
						Table: to.StringPtr("table2"),
					},
				},
				{
					Properties: &SensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("Column3"),
						Op:     SensitivityLabelUpdateKindRemove.ToPtr(),
						Table:  to.StringPtr("Table1"),
					},
				}},
		},
		&SensitivityLabelsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSensitivityLabels_ListRecommendedByDatabase(t *testing.T) {
	// From example Gets the recommended sensitivity labels of a given database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListRecommendedByDatabase("myRG",
		"myServer",
		"myDatabase",
		&SensitivityLabelsListRecommendedByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SensitivityLabel.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SensitivityLabel.ID should not be nil!")
			}
		}
	}
}

func TestSensitivityLabels_EnableRecommendation(t *testing.T) {
	// From example Enables sensitivity recommendations on a given column
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.EnableRecommendation(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		&SensitivityLabelsEnableRecommendationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSensitivityLabels_DisableRecommendation(t *testing.T) {
	// From example Disables sensitivity recommendations on a given column
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.DisableRecommendation(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		&SensitivityLabelsDisableRecommendationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSensitivityLabels_Get(t *testing.T) {
	// From example Gets the sensitivity label of a given column
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		SensitivityLabelSourceCurrent,
		&SensitivityLabelsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SensitivityLabel.ID == nil {
		t.Fatal("SensitivityLabel.ID should not be nil!")
	}
}

func TestSensitivityLabels_CreateOrUpdate(t *testing.T) {
	// From example Updates the sensitivity label of a given column with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		SensitivityLabel{
			Properties: &SensitivityLabelProperties{
				InformationType:   to.StringPtr("PhoneNumber"),
				InformationTypeID: to.StringPtr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
				LabelID:           to.StringPtr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
				LabelName:         to.StringPtr("PII"),
				Rank:              SensitivityLabelRankLow.ToPtr(),
			},
		},
		&SensitivityLabelsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SensitivityLabel.ID == nil {
		t.Fatal("SensitivityLabel.ID should not be nil!")
	}
}

func TestSensitivityLabels_Delete(t *testing.T) {
	// From example Deletes the sensitivity label of a given column
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		&SensitivityLabelsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRecommendedSensitivityLabels_Update(t *testing.T) {
	// From example Update recommended sensitivity labels of a given database using an operations batch.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecommendedSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Update(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		RecommendedSensitivityLabelUpdateList{
			Operations: []*RecommendedSensitivityLabelUpdate{
				{
					Properties: &RecommendedSensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("column1"),
						Op:     RecommendedSensitivityLabelUpdateKindEnable.ToPtr(),
						Table:  to.StringPtr("table1"),
					},
				},
				{
					Properties: &RecommendedSensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("column2"),
						Op:     RecommendedSensitivityLabelUpdateKindEnable.ToPtr(),
						Table:  to.StringPtr("table2"),
					},
				},
				{
					Properties: &RecommendedSensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("column3"),
						Op:     RecommendedSensitivityLabelUpdateKindDisable.ToPtr(),
						Table:  to.StringPtr("table1"),
					},
				}},
		},
		&RecommendedSensitivityLabelsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServerAdvisors_ListByServer(t *testing.T) {
	// From example List of server advisors
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerAdvisorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListByServer(ctx,
		"workloadinsight-demos",
		"misosisvr",
		&ServerAdvisorsListByServerOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example List of server recommended actions for all advisors
	_, err = client.ListByServer(ctx,
		"workloadinsight-demos",
		"misosisvr",
		&ServerAdvisorsListByServerOptions{Expand: to.StringPtr("recommendedActions")})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServerAdvisors_Get(t *testing.T) {
	// From example Get server advisor
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerAdvisorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"CreateIndex",
		&ServerAdvisorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Advisor.ID == nil {
		t.Fatal("Advisor.ID should not be nil!")
	}
}

func TestServerAdvisors_Update(t *testing.T) {
	// From example Update server advisor
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerAdvisorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Update(ctx,
		"workloadinsight-demos",
		"misosisvr",
		"CreateIndex",
		Advisor{
			Properties: &AdvisorProperties{
				AutoExecuteStatus: AutoExecuteStatusDisabled.ToPtr(),
			},
		},
		&ServerAdvisorsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Advisor.ID == nil {
		t.Fatal("Advisor.ID should not be nil!")
	}
}

func TestServerAutomaticTuning_Get(t *testing.T) {
	// From example Get a server's automatic tuning settings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerAutomaticTuningClient(con,
		"c3aa9078-0000-0000-0000-e36f151182d7")
	res, err := client.Get(ctx,
		"default-sql-onebox",
		"testsvr11",
		&ServerAutomaticTuningGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerAutomaticTuning.ID == nil {
		t.Fatal("ServerAutomaticTuning.ID should not be nil!")
	}
}

func TestServerAutomaticTuning_Update(t *testing.T) {
	// From example Updates server automatic tuning settings with all properties
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerAutomaticTuningClient(con,
		"c3aa9078-0000-0000-0000-e36f151182d7")
	res, err := client.Update(ctx,
		"default-sql-onebox",
		"testsvr11",
		ServerAutomaticTuning{
			Properties: &AutomaticTuningServerProperties{
				DesiredState: AutomaticTuningServerModeAuto.ToPtr(),
				Options: map[string]*AutomaticTuningServerOptions{
					"createIndex": &AutomaticTuningServerOptions{
						DesiredState: AutomaticTuningOptionModeDesiredOff.ToPtr(),
					},
					"dropIndex": &AutomaticTuningServerOptions{
						DesiredState: AutomaticTuningOptionModeDesiredOn.ToPtr(),
					},
					"forceLastGoodPlan": &AutomaticTuningServerOptions{
						DesiredState: AutomaticTuningOptionModeDesiredDefault.ToPtr(),
					},
				},
			},
		},
		&ServerAutomaticTuningUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerAutomaticTuning.ID == nil {
		t.Fatal("ServerAutomaticTuning.ID should not be nil!")
	}

	// From example Updates server automatic tuning settings with minimal properties
	res, err = client.Update(ctx,
		"default-sql-onebox",
		"testsvr11",
		ServerAutomaticTuning{
			Properties: &AutomaticTuningServerProperties{
				DesiredState: AutomaticTuningServerModeAuto.ToPtr(),
			},
		},
		&ServerAutomaticTuningUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerAutomaticTuning.ID == nil {
		t.Fatal("ServerAutomaticTuning.ID should not be nil!")
	}
}

func TestServerAzureADAdministrators_Get(t *testing.T) {
	// From example Gets a Azure Active Directory administrator.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerAzureADAdministratorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		AdministratorNameActiveDirectory,
		&ServerAzureADAdministratorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerAzureADAdministrator.ID == nil {
		t.Fatal("ServerAzureADAdministrator.ID should not be nil!")
	}
}

func TestServerAzureADAdministrators_CreateOrUpdate(t *testing.T) {
	// From example Creates or updates an existing Azure Active Directory administrator.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerAzureADAdministratorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		AdministratorNameActiveDirectory,
		ServerAzureADAdministrator{
			Properties: &AdministratorProperties{
				AdministratorType: AdministratorTypeActiveDirectory.ToPtr(),
				Login:             to.StringPtr("bob@contoso.com"),
				Sid:               to.StringPtr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.StringPtr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		},
		&ServerAzureADAdministratorsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerAzureADAdministrator.ID == nil {
		t.Fatal("ServerAzureADAdministrator.ID should not be nil!")
	}
}

func TestServerAzureADAdministrators_Delete(t *testing.T) {
	// From example Delete Azure Active Directory administrator.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerAzureADAdministratorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		AdministratorNameActiveDirectory,
		&ServerAzureADAdministratorsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServerAzureADAdministrators_ListByServer(t *testing.T) {
	// From example Gets a list of Azure Active Directory administrator.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerAzureADAdministratorsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("sqlcrudtest-4799",
		"sqlcrudtest-6440",
		&ServerAzureADAdministratorsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerAzureADAdministrator.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerAzureADAdministrator.ID should not be nil!")
			}
		}
	}
}

func TestServerAzureADOnlyAuthentications_Get(t *testing.T) {
	// From example Gets a Azure Active Directory only authentication property.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerAzureADOnlyAuthenticationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		AuthenticationNameDefault,
		&ServerAzureADOnlyAuthenticationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerAzureADOnlyAuthentication.ID == nil {
		t.Fatal("ServerAzureADOnlyAuthentication.ID should not be nil!")
	}
}

func TestServerAzureADOnlyAuthentications_CreateOrUpdate(t *testing.T) {
	// From example Creates or updates Azure Active Directory only authentication object.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerAzureADOnlyAuthenticationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		AuthenticationNameDefault,
		ServerAzureADOnlyAuthentication{
			Properties: &AzureADOnlyAuthProperties{
				AzureADOnlyAuthentication: to.BoolPtr(false),
			},
		},
		&ServerAzureADOnlyAuthenticationsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerAzureADOnlyAuthentication.ID == nil {
		t.Fatal("ServerAzureADOnlyAuthentication.ID should not be nil!")
	}
}

func TestServerAzureADOnlyAuthentications_Delete(t *testing.T) {
	// From example Deletes Azure Active Directory only authentication object.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerAzureADOnlyAuthenticationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		AuthenticationNameDefault,
		&ServerAzureADOnlyAuthenticationsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServerAzureADOnlyAuthentications_ListByServer(t *testing.T) {
	// From example Gets a list of Azure Active Directory only authentication object.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerAzureADOnlyAuthenticationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("sqlcrudtest-4799",
		"sqlcrudtest-6440",
		&ServerAzureADOnlyAuthenticationsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerAzureADOnlyAuthentication.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerAzureADOnlyAuthentication.ID should not be nil!")
			}
		}
	}
}

func TestServerDevOpsAuditSettings_Get(t *testing.T) {
	// From example Get a server's DevOps audit settings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerDevOpsAuditSettingsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"devAuditTestRG",
		"devOpsAuditTestSvr",
		"default",
		&ServerDevOpsAuditSettingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerDevOpsAuditingSettings.ID == nil {
		t.Fatal("ServerDevOpsAuditingSettings.ID should not be nil!")
	}
}

func TestServerDevOpsAuditSettings_CreateOrUpdate(t *testing.T) {
	// From example Update a server's DevOps audit settings with all params
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerDevOpsAuditSettingsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"devAuditTestRG",
		"devOpsAuditTestSvr",
		"default",
		ServerDevOpsAuditingSettings{
			Properties: &ServerDevOpsAuditSettingsProperties{
				IsAzureMonitorTargetEnabled:  to.BoolPtr(true),
				State:                        BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey:      to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.StringPtr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&ServerDevOpsAuditSettingsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerDevOpsAuditingSettings.ID == nil {
		t.Fatal("ServerDevOpsAuditingSettings.ID should not be nil!")
	}

	// From example Update a server's DevOps audit settings with minimal input
	poller, err = client.BeginCreateOrUpdate(ctx,
		"devAuditTestRG",
		"devOpsAuditTestSvr",
		"default",
		ServerDevOpsAuditingSettings{
			Properties: &ServerDevOpsAuditSettingsProperties{
				State:                   BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&ServerDevOpsAuditSettingsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerDevOpsAuditingSettings.ID == nil {
		t.Fatal("ServerDevOpsAuditingSettings.ID should not be nil!")
	}
}

func TestServerDevOpsAuditSettings_ListByServer(t *testing.T) {
	// From example List DevOps audit settings of a server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerDevOpsAuditSettingsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("devAuditTestRG",
		"devOpsAuditTestSvr",
		&ServerDevOpsAuditSettingsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerDevOpsAuditingSettings.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerDevOpsAuditingSettings.ID should not be nil!")
			}
		}
	}
}

func TestServerDnsAliases_Get(t *testing.T) {
	// From example Get server DNS alias
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerDNSAliasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default",
		"dns-alias-server",
		"dns-alias-name-1",
		&ServerDNSAliasesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerDNSAlias.ID == nil {
		t.Fatal("ServerDNSAlias.ID should not be nil!")
	}
}

func TestServerDnsAliases_CreateOrUpdate(t *testing.T) {
	// From example Create server DNS alias
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerDNSAliasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"dns-alias-server",
		"dns-alias-name-1",
		&ServerDNSAliasesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerDNSAlias.ID == nil {
		t.Fatal("ServerDNSAlias.ID should not be nil!")
	}
}

func TestServerDnsAliases_Delete(t *testing.T) {
	// From example Delete server DNS alias
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerDNSAliasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"Default",
		"dns-alias-server",
		"dns-alias-name-1",
		&ServerDNSAliasesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServerDnsAliases_ListByServer(t *testing.T) {
	// From example List server DNS aliases
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerDNSAliasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("Default",
		"dns-alias-server",
		&ServerDNSAliasesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerDNSAlias.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerDNSAlias.ID should not be nil!")
			}
		}
	}
}

func TestServerDnsAliases_Acquire(t *testing.T) {
	// From example Acquire server DNS alias
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerDNSAliasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginAcquire(ctx,
		"Default",
		"dns-alias-new-server",
		"dns-alias-name-1",
		ServerDNSAliasAcquisition{
			OldServerDNSAliasID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-old-server/dnsAliases/dns-alias-name-1"),
		},
		&ServerDNSAliasesBeginAcquireOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerDNSAlias.ID == nil {
		t.Fatal("ServerDNSAlias.ID should not be nil!")
	}
}

func TestServerKeys_ListByServer(t *testing.T) {
	// From example List the server keys by server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerKeysClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&ServerKeysListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerKey.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerKey.ID should not be nil!")
			}
		}
	}
}

func TestServerKeys_Get(t *testing.T) {
	// From example Get the server key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerKeysClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"someVault_someKey_01234567890123456789012345678901",
		&ServerKeysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerKey.ID == nil {
		t.Fatal("ServerKey.ID should not be nil!")
	}
}

func TestServerKeys_CreateOrUpdate(t *testing.T) {
	// From example Creates or updates a server key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerKeysClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"someVault_someKey_01234567890123456789012345678901",
		ServerKey{
			Properties: &ServerKeyProperties{
				ServerKeyType: ServerKeyTypeAzureKeyVault.ToPtr(),
				URI:           to.StringPtr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
			},
		},
		&ServerKeysBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerKey.ID == nil {
		t.Fatal("ServerKey.ID should not be nil!")
	}
}

func TestServerKeys_Delete(t *testing.T) {
	// From example Delete the server key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerKeysClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"someVault_someKey_01234567890123456789012345678901",
		&ServerKeysBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServerOperations_ListByServer(t *testing.T) {
	// From example List the server management operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerOperationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&ServerOperationsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerOperation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerOperation.ID should not be nil!")
			}
		}
	}
}

func TestServerSecurityAlertPolicies_Get(t *testing.T) {
	// From example Get a server's threat detection policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"securityalert-4799",
		"securityalert-6440",
		SecurityAlertPolicyNameDefault,
		&ServerSecurityAlertPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerSecurityAlertPolicy.ID == nil {
		t.Fatal("ServerSecurityAlertPolicy.ID should not be nil!")
	}
}

func TestServerSecurityAlertPolicies_CreateOrUpdate(t *testing.T) {
	// From example Update a server's threat detection policy with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		SecurityAlertPolicyNameDefault,
		ServerSecurityAlertPolicy{
			Properties: &SecurityAlertsPolicyProperties{
				DisabledAlerts: []*string{
					to.StringPtr("Access_Anomaly"),
					to.StringPtr("Usage_Anomaly")},
				EmailAccountAdmins: to.BoolPtr(true),
				EmailAddresses: []*string{
					to.StringPtr("testSecurityAlert@microsoft.com")},
				RetentionDays:           to.Int32Ptr(5),
				State:                   SecurityAlertsPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&ServerSecurityAlertPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerSecurityAlertPolicy.ID == nil {
		t.Fatal("ServerSecurityAlertPolicy.ID should not be nil!")
	}

	// From example Update a server's threat detection policy with minimal parameters
	poller, err = client.BeginCreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		SecurityAlertPolicyNameDefault,
		ServerSecurityAlertPolicy{
			Properties: &SecurityAlertsPolicyProperties{
				State: SecurityAlertsPolicyStateEnabled.ToPtr(),
			},
		},
		&ServerSecurityAlertPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerSecurityAlertPolicy.ID == nil {
		t.Fatal("ServerSecurityAlertPolicy.ID should not be nil!")
	}
}

func TestServerSecurityAlertPolicies_ListByServer(t *testing.T) {
	// From example List the server's threat detection policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("securityalert-4799",
		"securityalert-6440",
		&ServerSecurityAlertPoliciesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerSecurityAlertPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerSecurityAlertPolicy.ID should not be nil!")
			}
		}
	}
}

func TestServerTrustGroups_Get(t *testing.T) {
	// From example Get server trust group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerTrustGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default",
		"Japan East",
		"server-trust-group-test",
		&ServerTrustGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerTrustGroup.ID == nil {
		t.Fatal("ServerTrustGroup.ID should not be nil!")
	}
}

func TestServerTrustGroups_CreateOrUpdate(t *testing.T) {
	// From example Create server trust group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerTrustGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"Japan East",
		"server-trust-group-test",
		ServerTrustGroup{
			Properties: &ServerTrustGroupProperties{
				GroupMembers: []*ServerInfo{
					{
						ServerID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-1"),
					},
					{
						ServerID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/managedInstances/managedInstance-2"),
					}},
				TrustScopes: []*ServerTrustGroupPropertiesTrustScopesItem{
					ServerTrustGroupPropertiesTrustScopesItemGlobalTransactions.ToPtr(),
					ServerTrustGroupPropertiesTrustScopesItemServiceBroker.ToPtr()},
			},
		},
		&ServerTrustGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerTrustGroup.ID == nil {
		t.Fatal("ServerTrustGroup.ID should not be nil!")
	}
}

func TestServerTrustGroups_Delete(t *testing.T) {
	// From example Drop server trust group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerTrustGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"Default",
		"Japan East",
		"server-trust-group-test",
		&ServerTrustGroupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServerTrustGroups_ListByLocation(t *testing.T) {
	// From example List server trust groups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerTrustGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByLocation("Default",
		"Japan East",
		&ServerTrustGroupsListByLocationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerTrustGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerTrustGroup.ID should not be nil!")
			}
		}
	}
}

func TestServerTrustGroups_ListByInstance(t *testing.T) {
	// From example List server trust groups by managed instance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerTrustGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByInstance("Default-SQL-SouthEastAsia",
		"managedInstance-1",
		&ServerTrustGroupsListByInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerTrustGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerTrustGroup.ID should not be nil!")
			}
		}
	}
}

func TestServerVulnerabilityAssessments_Get(t *testing.T) {
	// From example Get a server's vulnerability assessment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		VulnerabilityAssessmentNameDefault,
		&ServerVulnerabilityAssessmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerVulnerabilityAssessment.ID == nil {
		t.Fatal("ServerVulnerabilityAssessment.ID should not be nil!")
	}
}

func TestServerVulnerabilityAssessments_CreateOrUpdate(t *testing.T) {
	// From example Create a server's vulnerability assessment with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		VulnerabilityAssessmentNameDefault,
		ServerVulnerabilityAssessment{
			Properties: &ServerVulnerabilityAssessmentProperties{
				RecurringScans: &VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.BoolPtr(true),
					Emails: []*string{
						to.StringPtr("email1@mail.com"),
						to.StringPtr("email2@mail.com")},
					IsEnabled: to.BoolPtr(true),
				},
				StorageAccountAccessKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey:  to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		&ServerVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerVulnerabilityAssessment.ID == nil {
		t.Fatal("ServerVulnerabilityAssessment.ID should not be nil!")
	}

	// From example Create a server's vulnerability assessment with minimal parameters, when storageAccountAccessKey is specified
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		VulnerabilityAssessmentNameDefault,
		ServerVulnerabilityAssessment{
			Properties: &ServerVulnerabilityAssessmentProperties{
				StorageAccountAccessKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
			},
		},
		&ServerVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerVulnerabilityAssessment.ID == nil {
		t.Fatal("ServerVulnerabilityAssessment.ID should not be nil!")
	}

	// From example Create a server's vulnerability assessment with minimal parameters, when storageContainerSasKey is specified
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		VulnerabilityAssessmentNameDefault,
		ServerVulnerabilityAssessment{
			Properties: &ServerVulnerabilityAssessmentProperties{
				StorageContainerPath:   to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		&ServerVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerVulnerabilityAssessment.ID == nil {
		t.Fatal("ServerVulnerabilityAssessment.ID should not be nil!")
	}
}

func TestServerVulnerabilityAssessments_Delete(t *testing.T) {
	// From example Remove a server's vulnerability assessment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		VulnerabilityAssessmentNameDefault,
		&ServerVulnerabilityAssessmentsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServerVulnerabilityAssessments_ListByServer(t *testing.T) {
	// From example Get a server's vulnerability assessment policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		&ServerVulnerabilityAssessmentsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerVulnerabilityAssessment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerVulnerabilityAssessment.ID should not be nil!")
			}
		}
	}
}

func TestSqlAgent_Get(t *testing.T) {
	// From example Gets current instance sql agent configuration.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLAgentClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&SQLAgentGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLAgentConfiguration.ID == nil {
		t.Fatal("SQLAgentConfiguration.ID should not be nil!")
	}
}

func TestSqlAgent_CreateOrUpdate(t *testing.T) {
	// From example Puts new sql agent configuration to instance.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLAgentClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		SQLAgentConfiguration{
			Properties: &SQLAgentConfigurationProperties{
				State: SQLAgentConfigurationPropertiesStateEnabled.ToPtr(),
			},
		},
		&SQLAgentCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLAgentConfiguration.ID == nil {
		t.Fatal("SQLAgentConfiguration.ID should not be nil!")
	}
}

func TestSubscriptionUsages_ListByLocation(t *testing.T) {
	// From example List subscription usages in the given location.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionUsagesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByLocation("WestUS",
		&SubscriptionUsagesListByLocationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SubscriptionUsage.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SubscriptionUsage.ID should not be nil!")
			}
		}
	}
}

func TestSubscriptionUsages_Get(t *testing.T) {
	// From example Get specific subscription usage in the given location.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSubscriptionUsagesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"WestUS",
		"ServerQuota",
		&SubscriptionUsagesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SubscriptionUsage.ID == nil {
		t.Fatal("SubscriptionUsage.ID should not be nil!")
	}
}

func TestSyncAgents_Get(t *testing.T) {
	// From example Get a sync agent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncAgentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"syncagentcrud-65440",
		"syncagentcrud-8475",
		"syncagentcrud-3187",
		&SyncAgentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SyncAgent.ID == nil {
		t.Fatal("SyncAgent.ID should not be nil!")
	}
}

func TestSyncAgents_CreateOrUpdate(t *testing.T) {
	// From example Create a new sync agent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncAgentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"syncagentcrud-65440",
		"syncagentcrud-8475",
		"syncagentcrud-3187",
		SyncAgent{
			Properties: &SyncAgentProperties{
				SyncDatabaseID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/syncagentcrud-8475/databases/sync"),
			},
		},
		&SyncAgentsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SyncAgent.ID == nil {
		t.Fatal("SyncAgent.ID should not be nil!")
	}

	// From example Update a sync agent
	poller, err = client.BeginCreateOrUpdate(ctx,
		"syncagentcrud-65440",
		"syncagentcrud-8475",
		"syncagentcrud-3187",
		SyncAgent{
			Properties: &SyncAgentProperties{
				SyncDatabaseID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Sql/servers/syncagentcrud-8475/databases/sync"),
			},
		},
		&SyncAgentsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SyncAgent.ID == nil {
		t.Fatal("SyncAgent.ID should not be nil!")
	}
}

func TestSyncAgents_Delete(t *testing.T) {
	// From example Delete a sync agent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncAgentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"syncagentcrud-65440",
		"syncagentcrud-8475",
		"syncagentcrud-3187",
		&SyncAgentsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSyncAgents_ListByServer(t *testing.T) {
	// From example Get sync agents under a server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncAgentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("syncagentcrud-65440",
		"syncagentcrud-8475",
		&SyncAgentsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SyncAgent.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SyncAgent.ID should not be nil!")
			}
		}
	}
}

func TestSyncAgents_GenerateKey(t *testing.T) {
	// From example Generate a sync agent key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncAgentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.GenerateKey(ctx,
		"syncagentcrud-65440",
		"syncagentcrud-8475",
		"syncagentcrud-3187",
		&SyncAgentsGenerateKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSyncAgents_ListLinkedDatabases(t *testing.T) {
	// From example Get sync agent linked databases
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncAgentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListLinkedDatabases("syncagentcrud-65440",
		"syncagentcrud-8475",
		"syncagentcrud-3187",
		&SyncAgentsListLinkedDatabasesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SyncAgentLinkedDatabase.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SyncAgentLinkedDatabase.ID should not be nil!")
			}
		}
	}
}

func TestSyncGroups_ListSyncDatabaseIds(t *testing.T) {
	// From example Get a sync database ID
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListSyncDatabaseIDs("westus",
		&SyncGroupsListSyncDatabaseIDsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SyncDatabaseIDProperties.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SyncDatabaseIDProperties.ID should not be nil!")
			}
		}
	}
}

func TestSyncGroups_RefreshHubSchema(t *testing.T) {
	// From example Refresh a hub database schema.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginRefreshHubSchema(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		&SyncGroupsBeginRefreshHubSchemaOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSyncGroups_ListHubSchemas(t *testing.T) {
	// From example Get a hub database schema.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListHubSchemas("syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		&SyncGroupsListHubSchemasOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestSyncGroups_ListLogs(t *testing.T) {
	// From example Get sync group logs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListLogs("syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"2017-01-01T00:00:00",
		"2017-12-31T00:00:00",
		Enum76All,
		&SyncGroupsListLogsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestSyncGroups_CancelSync(t *testing.T) {
	// From example Cancel a sync group synchronization
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.CancelSync(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		&SyncGroupsCancelSyncOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSyncGroups_TriggerSync(t *testing.T) {
	// From example Trigger a sync group synchronization.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.TriggerSync(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		&SyncGroupsTriggerSyncOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSyncGroups_Get(t *testing.T) {
	// From example Get a sync group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		&SyncGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SyncGroup.ID == nil {
		t.Fatal("SyncGroup.ID should not be nil!")
	}
}

func TestSyncGroups_CreateOrUpdate(t *testing.T) {
	// From example Create a sync group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		SyncGroup{
			Properties: &SyncGroupProperties{
				ConflictResolutionPolicy: SyncConflictResolutionPolicyHubWin.ToPtr(),
				HubDatabaseUserName:      to.StringPtr("hubUser"),
				Interval:                 to.Int32Ptr(-1),
				SyncDatabaseID:           to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				UsePrivateLinkConnection: to.BoolPtr(true),
			},
		},
		&SyncGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SyncGroup.ID == nil {
		t.Fatal("SyncGroup.ID should not be nil!")
	}

	// From example Update a sync group
	poller, err = client.BeginCreateOrUpdate(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		SyncGroup{
			Properties: &SyncGroupProperties{
				ConflictResolutionPolicy: SyncConflictResolutionPolicyHubWin.ToPtr(),
				HubDatabaseUserName:      to.StringPtr("hubUser"),
				Interval:                 to.Int32Ptr(-1),
				SyncDatabaseID:           to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				UsePrivateLinkConnection: to.BoolPtr(true),
			},
		},
		&SyncGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SyncGroup.ID == nil {
		t.Fatal("SyncGroup.ID should not be nil!")
	}
}

func TestSyncGroups_Delete(t *testing.T) {
	// From example Delete a sync group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		&SyncGroupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSyncGroups_Update(t *testing.T) {
	// From example Update a sync group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdate(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		SyncGroup{
			Properties: &SyncGroupProperties{
				ConflictResolutionPolicy: SyncConflictResolutionPolicyHubWin.ToPtr(),
				HubDatabasePassword:      to.StringPtr("hubPassword"),
				HubDatabaseUserName:      to.StringPtr("hubUser"),
				Interval:                 to.Int32Ptr(-1),
				SyncDatabaseID:           to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				UsePrivateLinkConnection: to.BoolPtr(true),
			},
		},
		&SyncGroupsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SyncGroup.ID == nil {
		t.Fatal("SyncGroup.ID should not be nil!")
	}
}

func TestSyncGroups_ListByDatabase(t *testing.T) {
	// From example List sync groups under a given database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		&SyncGroupsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SyncGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SyncGroup.ID should not be nil!")
			}
		}
	}
}

func TestSyncMembers_Get(t *testing.T) {
	// From example Get a sync member
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncMembersClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"syncmembercrud-4879",
		&SyncMembersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SyncMember.ID == nil {
		t.Fatal("SyncMember.ID should not be nil!")
	}
}

func TestSyncMembers_CreateOrUpdate(t *testing.T) {
	// From example Create a new sync member
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncMembersClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"syncmembercrud-4879",
		SyncMember{
			Properties: &SyncMemberProperties{
				DatabaseName:                      to.StringPtr("syncgroupcrud-7421"),
				DatabaseType:                      SyncMemberDbTypeAzureSQLDatabase.ToPtr(),
				ServerName:                        to.StringPtr("syncgroupcrud-3379.database.windows.net"),
				SyncDirection:                     SyncDirectionBidirectional.ToPtr(),
				SyncMemberAzureDatabaseResourceID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				UsePrivateLinkConnection:          to.BoolPtr(true),
				UserName:                          to.StringPtr("myUser"),
			},
		},
		&SyncMembersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SyncMember.ID == nil {
		t.Fatal("SyncMember.ID should not be nil!")
	}

	// From example Update a sync member
	poller, err = client.BeginCreateOrUpdate(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"syncmembercrud-4879",
		SyncMember{
			Properties: &SyncMemberProperties{
				DatabaseName:                      to.StringPtr("syncgroupcrud-7421"),
				DatabaseType:                      SyncMemberDbTypeAzureSQLDatabase.ToPtr(),
				ServerName:                        to.StringPtr("syncgroupcrud-3379.database.windows.net"),
				SyncDirection:                     SyncDirectionBidirectional.ToPtr(),
				SyncMemberAzureDatabaseResourceID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				UsePrivateLinkConnection:          to.BoolPtr(true),
				UserName:                          to.StringPtr("myUser"),
			},
		},
		&SyncMembersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SyncMember.ID == nil {
		t.Fatal("SyncMember.ID should not be nil!")
	}
}

func TestSyncMembers_Delete(t *testing.T) {
	// From example Delete a sync member
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncMembersClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"syncgroupcrud-4879",
		&SyncMembersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSyncMembers_Update(t *testing.T) {
	// From example Update an existing sync member
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncMembersClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdate(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"syncmembercrud-4879",
		SyncMember{
			Properties: &SyncMemberProperties{
				DatabaseName:                      to.StringPtr("syncgroupcrud-7421"),
				DatabaseType:                      SyncMemberDbTypeAzureSQLDatabase.ToPtr(),
				ServerName:                        to.StringPtr("syncgroupcrud-3379.database.windows.net"),
				SyncDirection:                     SyncDirectionBidirectional.ToPtr(),
				SyncMemberAzureDatabaseResourceID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328"),
				UsePrivateLinkConnection:          to.BoolPtr(true),
				UserName:                          to.StringPtr("myUser"),
			},
		},
		&SyncMembersBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SyncMember.ID == nil {
		t.Fatal("SyncMember.ID should not be nil!")
	}
}

func TestSyncMembers_ListBySyncGroup(t *testing.T) {
	// From example List sync members under a sync group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncMembersClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListBySyncGroup("syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		&SyncMembersListBySyncGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SyncMember.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SyncMember.ID should not be nil!")
			}
		}
	}
}

func TestSyncMembers_ListMemberSchemas(t *testing.T) {
	// From example Get a sync member schema
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncMembersClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListMemberSchemas("syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"syncgroupcrud-4879",
		&SyncMembersListMemberSchemasOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestSyncMembers_RefreshMemberSchema(t *testing.T) {
	// From example Refresh a sync member database schema
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSyncMembersClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginRefreshMemberSchema(ctx,
		"syncgroupcrud-65440",
		"syncgroupcrud-8475",
		"syncgroupcrud-4328",
		"syncgroupcrud-3187",
		"syncgroupcrud-4879",
		&SyncMembersBeginRefreshMemberSchemaOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestTdeCertificates_Create(t *testing.T) {
	// From example Upload a TDE certificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTdeCertificatesClient(con,
		"00000000-0000-0000-0000-000000000001")
	poller, err := client.BeginCreate(ctx,
		"testtdecert",
		"testtdecert",
		TdeCertificate{
			Properties: &TdeCertificateProperties{
				PrivateBlob: to.StringPtr("MIIXXXXXXXX"),
			},
		},
		&TdeCertificatesBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestTimeZones_ListByLocation(t *testing.T) {
	// From example List managed instance time zones by location
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTimeZonesClient(con,
		"37d5e605-6142-4d79-b564-28b6dbfeec0f")
	pager := client.ListByLocation("canadaeast",
		&TimeZonesListByLocationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("TimeZone.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("TimeZone.ID should not be nil!")
			}
		}
	}
}

func TestTimeZones_Get(t *testing.T) {
	// From example Get managed instance time zone
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTimeZonesClient(con,
		"37d5e605-6142-4d79-b564-28b6dbfeec0f")
	res, err := client.Get(ctx,
		"canadaeast",
		"Haiti Standard Time",
		&TimeZonesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TimeZone.ID == nil {
		t.Fatal("TimeZone.ID should not be nil!")
	}
}

func TestVirtualClusters_UpdateDnsServers(t *testing.T) {
	// From example Synchronizes the DNS server settings used by the managed instances inside the given virtual cluster.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualClustersClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.UpdateDNSServers(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&VirtualClustersUpdateDNSServersOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.UpdateManagedInstanceDNSServersOperation.ID == nil {
		t.Fatal("UpdateManagedInstanceDNSServersOperation.ID should not be nil!")
	}
}

func TestVirtualClusters_List(t *testing.T) {
	// From example List virtualClusters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualClustersClient(con,
		"20d7082a-0fc7-4468-82bd-542694d5042b")
	pager := client.List(&VirtualClustersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualCluster.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualCluster.ID should not be nil!")
			}
		}
	}
}

func TestVirtualClusters_ListByResourceGroup(t *testing.T) {
	// From example List virtual clusters by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualClustersClient(con,
		"20d7082a-0fc7-4468-82bd-542694d5042b")
	pager := client.ListByResourceGroup("testrg",
		&VirtualClustersListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualCluster.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualCluster.ID should not be nil!")
			}
		}
	}
}

func TestVirtualClusters_Get(t *testing.T) {
	// From example Get virtual cluster
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualClustersClient(con,
		"20d7082a-0fc7-4468-82bd-542694d5042b")
	res, err := client.Get(ctx,
		"testrg",
		"vc-subnet1-f769ed71-b3ad-491a-a9d5-26eeceaa6be2",
		&VirtualClustersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualCluster.ID == nil {
		t.Fatal("VirtualCluster.ID should not be nil!")
	}
}

func TestVirtualClusters_Delete(t *testing.T) {
	// From example Delete virtual cluster
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualClustersClient(con,
		"20d7082a-0fc7-4468-82bd-542694d5042b")
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"vc-subnet1-f769ed71-b3ad-491a-a9d5-26eeceaa6be2",
		&VirtualClustersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualClusters_Update(t *testing.T) {
	// From example Update virtual cluster with tags
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualClustersClient(con,
		"20d7082a-0fc7-4468-82bd-542694d5042b")
	poller, err := client.BeginUpdate(ctx,
		"testrg",
		"vc-subnet1-f769ed71-b3ad-491a-a9d5-26eeceaa6be2",
		VirtualClusterUpdate{
			Properties: &VirtualClusterProperties{
				MaintenanceConfigurationID: to.StringPtr("/subscriptions/ab0e51c0-83c0-4380-8ae9-025516df392f/resourceGroups/Federation/providers/Microsoft.Maintenance/maintenanceConfigurations/MiPolicy1"),
			},
		},
		&VirtualClustersBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualCluster.ID == nil {
		t.Fatal("VirtualCluster.ID should not be nil!")
	}
}

func TestVirtualNetworkRules_Get(t *testing.T) {
	// From example Gets a virtual network rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default",
		"vnet-test-svr",
		"vnet-firewall-rule",
		&VirtualNetworkRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkRule.ID == nil {
		t.Fatal("VirtualNetworkRule.ID should not be nil!")
	}
}

func TestVirtualNetworkRules_CreateOrUpdate(t *testing.T) {
	// From example Create or update a virtual network rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"vnet-test-svr",
		"vnet-firewall-rule",
		VirtualNetworkRule{
			Properties: &VirtualNetworkRuleProperties{
				IgnoreMissingVnetServiceEndpoint: to.BoolPtr(false),
				VirtualNetworkSubnetID:           to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
			},
		},
		&VirtualNetworkRulesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkRule.ID == nil {
		t.Fatal("VirtualNetworkRule.ID should not be nil!")
	}
}

func TestVirtualNetworkRules_Delete(t *testing.T) {
	// From example Delete a virtual network rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"Default",
		"vnet-test-svr",
		"vnet-firewall-rule",
		&VirtualNetworkRulesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkRules_ListByServer(t *testing.T) {
	// From example List virtual network rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("Default",
		"vnet-test-svr",
		&VirtualNetworkRulesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetworkRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetworkRule.ID should not be nil!")
			}
		}
	}
}

func TestWorkloadClassifiers_Get(t *testing.T) {
	// From example Gets a workload classifier for a data warehouse
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkloadClassifiersClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"wlm_workloadgroup",
		"wlm_classifier",
		&WorkloadClassifiersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkloadClassifier.ID == nil {
		t.Fatal("WorkloadClassifier.ID should not be nil!")
	}
}

func TestWorkloadClassifiers_CreateOrUpdate(t *testing.T) {
	// From example Create a workload group with all properties specified.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkloadClassifiersClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"wlm_workloadgroup",
		"wlm_workloadclassifier",
		WorkloadClassifier{
			Properties: &WorkloadClassifierProperties{
				Context:    to.StringPtr("test_context"),
				EndTime:    to.StringPtr("14:00"),
				Importance: to.StringPtr("high"),
				Label:      to.StringPtr("test_label"),
				MemberName: to.StringPtr("dbo"),
				StartTime:  to.StringPtr("12:00"),
			},
		},
		&WorkloadClassifiersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkloadClassifier.ID == nil {
		t.Fatal("WorkloadClassifier.ID should not be nil!")
	}

	// From example Create a workload group with the required properties specified.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"wlm_workloadgroup",
		"wlm_workloadclassifier",
		WorkloadClassifier{
			Properties: &WorkloadClassifierProperties{
				MemberName: to.StringPtr("dbo"),
			},
		},
		&WorkloadClassifiersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkloadClassifier.ID == nil {
		t.Fatal("WorkloadClassifier.ID should not be nil!")
	}
}

func TestWorkloadClassifiers_Delete(t *testing.T) {
	// From example Delete a workload classifier
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkloadClassifiersClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"wlm_workloadgroup",
		"wlm_workloadclassifier",
		&WorkloadClassifiersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkloadClassifiers_ListByWorkloadGroup(t *testing.T) {
	// From example Get the list of workload classifiers for a workload group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkloadClassifiersClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByWorkloadGroup("Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"wlm_workloadgroup",
		&WorkloadClassifiersListByWorkloadGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WorkloadClassifier.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WorkloadClassifier.ID should not be nil!")
			}
		}
	}
}

func TestWorkloadGroups_Get(t *testing.T) {
	// From example Gets a workload group for a data warehouse
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkloadGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"smallrc",
		&WorkloadGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkloadGroup.ID == nil {
		t.Fatal("WorkloadGroup.ID should not be nil!")
	}
}

func TestWorkloadGroups_CreateOrUpdate(t *testing.T) {
	// From example Create a workload group with all properties specified.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkloadGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"smallrc",
		WorkloadGroup{
			Properties: &WorkloadGroupProperties{
				Importance:                   to.StringPtr("normal"),
				MaxResourcePercent:           to.Int32Ptr(100),
				MaxResourcePercentPerRequest: to.Float64Ptr(3),
				MinResourcePercent:           to.Int32Ptr(0),
				MinResourcePercentPerRequest: to.Float64Ptr(3),
				QueryExecutionTimeout:        to.Int32Ptr(0),
			},
		},
		&WorkloadGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkloadGroup.ID == nil {
		t.Fatal("WorkloadGroup.ID should not be nil!")
	}

	// From example Create a workload group with the required properties specified.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"smallrc",
		WorkloadGroup{
			Properties: &WorkloadGroupProperties{
				MaxResourcePercent:           to.Int32Ptr(100),
				MinResourcePercent:           to.Int32Ptr(0),
				MinResourcePercentPerRequest: to.Float64Ptr(3),
			},
		},
		&WorkloadGroupsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkloadGroup.ID == nil {
		t.Fatal("WorkloadGroup.ID should not be nil!")
	}
}

func TestWorkloadGroups_Delete(t *testing.T) {
	// From example Delete a workload group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkloadGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		"wlm_workloadgroup",
		&WorkloadGroupsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkloadGroups_ListByDatabase(t *testing.T) {
	// From example Get the list of workload groups for a data warehouse
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkloadGroupsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		&WorkloadGroupsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WorkloadGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WorkloadGroup.ID should not be nil!")
			}
		}
	}
}

func TestTransparentDataEncryptions_Get(t *testing.T) {
	// From example Get a database's transparent data encryption
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTransparentDataEncryptionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"security-tde-resourcegroup",
		"securitytde",
		"testdb",
		TransparentDataEncryptionNameCurrent,
		&TransparentDataEncryptionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LogicalDatabaseTransparentDataEncryption.ID == nil {
		t.Fatal("LogicalDatabaseTransparentDataEncryption.ID should not be nil!")
	}
}

func TestTransparentDataEncryptions_CreateOrUpdate(t *testing.T) {
	// From example Update a database's Transparent Data Encryption state with minimal parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTransparentDataEncryptionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"securitytde-42-rg",
		"securitytde-42",
		"testdb",
		TransparentDataEncryptionNameCurrent,
		LogicalDatabaseTransparentDataEncryption{
			Properties: &TransparentDataEncryptionProperties{
				State: TransparentDataEncryptionStateEnabled.ToPtr(),
			},
		},
		&TransparentDataEncryptionsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LogicalDatabaseTransparentDataEncryption.ID == nil {
		t.Fatal("LogicalDatabaseTransparentDataEncryption.ID should not be nil!")
	}
}

func TestTransparentDataEncryptions_ListByDatabase(t *testing.T) {
	// From example Get a list of the database's transparent data encryption
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTransparentDataEncryptionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("security-tde-resourcegroup",
		"securitytde",
		"testdb",
		&TransparentDataEncryptionsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LogicalDatabaseTransparentDataEncryption.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LogicalDatabaseTransparentDataEncryption.ID should not be nil!")
			}
		}
	}
}

func TestBackupShortTermRetentionPolicies_Get(t *testing.T) {
	// From example Get the short term retention policy for the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupShortTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		ShortTermRetentionPolicyNameDefault,
		&BackupShortTermRetentionPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupShortTermRetentionPolicy.ID == nil {
		t.Fatal("BackupShortTermRetentionPolicy.ID should not be nil!")
	}
}

func TestBackupShortTermRetentionPolicies_CreateOrUpdate(t *testing.T) {
	// From example Update the short term retention policy for the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupShortTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup",
		"testsvr",
		"testdb",
		ShortTermRetentionPolicyNameDefault,
		BackupShortTermRetentionPolicy{
			Properties: &BackupShortTermRetentionPolicyProperties{
				DiffBackupIntervalInHours: DiffBackupIntervalInHoursTwentyFour.ToPtr(),
				RetentionDays:             to.Int32Ptr(7),
			},
		},
		&BackupShortTermRetentionPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupShortTermRetentionPolicy.ID == nil {
		t.Fatal("BackupShortTermRetentionPolicy.ID should not be nil!")
	}
}

func TestBackupShortTermRetentionPolicies_Update(t *testing.T) {
	// From example Update the short term retention policy for the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupShortTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdate(ctx,
		"resourceGroup",
		"testsvr",
		"testdb",
		ShortTermRetentionPolicyNameDefault,
		BackupShortTermRetentionPolicy{
			Properties: &BackupShortTermRetentionPolicyProperties{
				DiffBackupIntervalInHours: DiffBackupIntervalInHoursTwentyFour.ToPtr(),
				RetentionDays:             to.Int32Ptr(7),
			},
		},
		&BackupShortTermRetentionPoliciesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupShortTermRetentionPolicy.ID == nil {
		t.Fatal("BackupShortTermRetentionPolicy.ID should not be nil!")
	}
}

func TestBackupShortTermRetentionPolicies_ListByDatabase(t *testing.T) {
	// From example Get the short term retention policy for the database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupShortTermRetentionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		&BackupShortTermRetentionPoliciesListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BackupShortTermRetentionPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BackupShortTermRetentionPolicy.ID should not be nil!")
			}
		}
	}
}

func TestDatabaseExtensions_Get(t *testing.T) {
	// From example Get database extensions.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseExtensionsClient(con,
		"a3473687-7581-41e1-ac24-6bcca5843f07")
	_, err := client.Get(ctx,
		"rg_a1f9d6f8-30d5-4228-9504-8a364361bca3",
		"srv_65858e0f-b1d1-4bdc-8351-a7da86ca4939",
		"11aa6c5e-58ed-4693-b303-3b8e3131deaa",
		"polybaseimport",
		&DatabaseExtensionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabaseExtensions_CreateOrUpdate(t *testing.T) {
	// From example Create or Update database extensions.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseExtensionsClient(con,
		"a1c0814d-3c18-4e1e-a247-c128c12b1677")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg_20cbe0f0-c2d9-4522-9177-5469aad53029",
		"srv_1ffd1cf8-9951-47fb-807d-a9c384763849",
		"878e303f-1ea0-4f17-aa3d-a22ac5e9da08",
		"polybaseimport",
		DatabaseExtensions{
			Properties: &DatabaseExtensionsProperties{
				OperationMode:  OperationModePolybaseImport.ToPtr(),
				StorageKey:     to.StringPtr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
				StorageKeyType: StorageKeyTypeStorageAccessKey.ToPtr(),
				StorageURI:     to.StringPtr("https://teststorage.blob.core.windows.net/testcontainer/Manifest.xml"),
			},
		},
		&DatabaseExtensionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ImportExportExtensionsOperationResult.ID == nil {
		t.Fatal("ImportExportExtensionsOperationResult.ID should not be nil!")
	}
}

func TestDatabaseExtensions_ListByDatabase(t *testing.T) {
	// From example List database extensions.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseExtensionsClient(con,
		"7b2515fe-f230-4017-8cf0-695163acab85")
	pager := client.ListByDatabase("rg_4007c5a9-b3b0-41e1-bd46-9eef38768a4a",
		"srv_3b67ec2a-519b-43a7-8533-fb62dce3431e",
		"719d8fa4-bf0f-48fc-8cd3-ef40fe6ba1fe",
		&DatabaseExtensionsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ImportExportExtensionsOperationResult.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ImportExportExtensionsOperationResult.ID should not be nil!")
			}
		}
	}
}

func TestDatabaseOperations_Cancel(t *testing.T) {
	// From example Cancel the database management operation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseOperationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Cancel(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-6661",
		"testdb",
		"f779414b-e748-4925-8cfe-c8598f7660ae",
		&DatabaseOperationsCancelOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabaseOperations_ListByDatabase(t *testing.T) {
	// From example List the database management operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseOperationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"testdb",
		&DatabaseOperationsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseOperation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseOperation.ID should not be nil!")
			}
		}
	}
}

func TestDatabaseUsages_ListByDatabase(t *testing.T) {
	// From example Gets database usages.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabaseUsagesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		&DatabaseUsagesListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DatabaseUsage.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DatabaseUsage.ID should not be nil!")
			}
		}
	}
}

func TestLedgerDigestUploads_Get(t *testing.T) {
	// From example Gets the current ledger digest upload configuration for a database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLedgerDigestUploadsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"ledgertestrg",
		"ledgertestserver",
		"testdb",
		LedgerDigestUploadsNameCurrent,
		&LedgerDigestUploadsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LedgerDigestUploads.ID == nil {
		t.Fatal("LedgerDigestUploads.ID should not be nil!")
	}
}

func TestLedgerDigestUploads_CreateOrUpdate(t *testing.T) {
	// From example Enables ledger digest upload configuration for a database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLedgerDigestUploadsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"ledgertestrg",
		"ledgertestserver",
		"testdb",
		LedgerDigestUploadsNameCurrent,
		LedgerDigestUploads{
			Properties: &LedgerDigestUploadsProperties{
				DigestStorageEndpoint: to.StringPtr("https://MyAccount.blob.core.windows.net"),
			},
		},
		&LedgerDigestUploadsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LedgerDigestUploads.ID == nil {
		t.Fatal("LedgerDigestUploads.ID should not be nil!")
	}
}

func TestLedgerDigestUploads_ListByDatabase(t *testing.T) {
	// From example Gets list of ledger digest upload settings on a database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLedgerDigestUploadsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByDatabase("ledgertestrg",
		"ledgertestserver",
		"testdb",
		&LedgerDigestUploadsListByDatabaseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LedgerDigestUploads.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LedgerDigestUploads.ID should not be nil!")
			}
		}
	}
}

func TestLedgerDigestUploads_Disable(t *testing.T) {
	// From example Disables uploading ledger digests for a database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLedgerDigestUploadsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDisable(ctx,
		"ledgertestrg",
		"ledgertestserver",
		"testdb",
		LedgerDigestUploadsNameCurrent,
		&LedgerDigestUploadsBeginDisableOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LedgerDigestUploads.ID == nil {
		t.Fatal("LedgerDigestUploads.ID should not be nil!")
	}
}

func TestOutboundFirewallRules_Get(t *testing.T) {
	// From example Gets outbound firewall rule.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOutboundFirewallRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"server.database.windows.net",
		&OutboundFirewallRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OutboundFirewallRule.ID == nil {
		t.Fatal("OutboundFirewallRule.ID should not be nil!")
	}
}

func TestOutboundFirewallRules_CreateOrUpdate(t *testing.T) {
	// From example Approve or reject a outbound firewall rule with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOutboundFirewallRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"server.database.windows.net",
		OutboundFirewallRule{},
		&OutboundFirewallRulesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OutboundFirewallRule.ID == nil {
		t.Fatal("OutboundFirewallRule.ID should not be nil!")
	}
}

func TestOutboundFirewallRules_Delete(t *testing.T) {
	// From example Deletes a outbound firewall rule with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOutboundFirewallRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-6661",
		"server.database.windows.net",
		&OutboundFirewallRulesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestOutboundFirewallRules_ListByServer(t *testing.T) {
	// From example Gets list of outbound firewall rules on a server.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOutboundFirewallRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&OutboundFirewallRulesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("OutboundFirewallRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("OutboundFirewallRule.ID should not be nil!")
			}
		}
	}
}

func TestRestorableDroppedDatabases_ListByServer(t *testing.T) {
	// From example Gets a list of restorable dropped databases.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRestorableDroppedDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByServer("Default-SQL-SouthEastAsia",
		"testsvr",
		&RestorableDroppedDatabasesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RestorableDroppedDatabase.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RestorableDroppedDatabase.ID should not be nil!")
			}
		}
	}
}

func TestRestorableDroppedDatabases_Get(t *testing.T) {
	// From example Gets a restorable dropped database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRestorableDroppedDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb,131403269876900000",
		&RestorableDroppedDatabasesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RestorableDroppedDatabase.ID == nil {
		t.Fatal("RestorableDroppedDatabase.ID should not be nil!")
	}
}

func TestRestorableDroppedManagedDatabases_ListByInstance(t *testing.T) {
	// From example List restorable dropped databases by managed instances
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRestorableDroppedManagedDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByInstance("Test1",
		"managedInstance",
		&RestorableDroppedManagedDatabasesListByInstanceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RestorableDroppedManagedDatabase.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RestorableDroppedManagedDatabase.ID should not be nil!")
			}
		}
	}
}

func TestRestorableDroppedManagedDatabases_Get(t *testing.T) {
	// From example Gets a restorable dropped managed database.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRestorableDroppedManagedDatabasesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Test1",
		"managedInstance",
		"testdb,131403269876900000",
		&RestorableDroppedManagedDatabasesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RestorableDroppedManagedDatabase.ID == nil {
		t.Fatal("RestorableDroppedManagedDatabase.ID should not be nil!")
	}
}

func TestServers_ListByResourceGroup(t *testing.T) {
	// From example List servers by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByResourceGroup("sqlcrudtest-7398",
		&ServersListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Server.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Server.ID should not be nil!")
			}
		}
	}

	// From example List servers by resource group with $expand=administrators
	pager = client.ListByResourceGroup("sqlcrudtest-7398",
		&ServersListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Server.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Server.ID should not be nil!")
			}
		}
	}
}

func TestServers_Get(t *testing.T) {
	// From example Get server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&ServersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}

	// From example Get server with $expand=administrators
	res, err = client.Get(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		&ServersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}
}

func TestServers_CreateOrUpdate(t *testing.T) {
	// From example Create server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		Server{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("Japan East"),
			},
			Properties: &ServerProperties{
				AdministratorLogin:         to.StringPtr("dummylogin"),
				AdministratorLoginPassword: to.StringPtr("PLACEHOLDER"),
				Administrators: &ServerExternalAdministrator{
					AzureADOnlyAuthentication: to.BoolPtr(true),
					Login:                     to.StringPtr("bob@contoso.com"),
					PrincipalType:             PrincipalTypeUser.ToPtr(),
					Sid:                       to.StringPtr("00000011-1111-2222-2222-123456789111"),
					TenantID:                  to.StringPtr("00000011-1111-2222-2222-123456789111"),
				},
				PublicNetworkAccess:           ServerNetworkAccessFlagEnabled.ToPtr(),
				RestrictOutboundNetworkAccess: ServerNetworkAccessFlagEnabled.ToPtr(),
			},
		},
		&ServersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}
}

func TestServers_Delete(t *testing.T) {
	// From example Delete server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-6661",
		&ServersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_Update(t *testing.T) {
	// From example Update a server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdate(ctx,
		"sqlcrudtest-7398",
		"sqlcrudtest-4645",
		ServerUpdate{
			Properties: &ServerProperties{
				AdministratorLogin:            to.StringPtr("dummylogin"),
				AdministratorLoginPassword:    to.StringPtr("placeholder"),
				PublicNetworkAccess:           ServerNetworkAccessFlagDisabled.ToPtr(),
				RestrictOutboundNetworkAccess: ServerNetworkAccessFlagEnabled.ToPtr(),
			},
		},
		&ServersBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}
}

func TestServers_List(t *testing.T) {
	// From example List servers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List(&ServersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Server.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Server.ID should not be nil!")
			}
		}
	}

	// From example List servers with expand equals administrators
	pager = client.List(&ServersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Server.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Server.ID should not be nil!")
			}
		}
	}
}

func TestServers_ImportDatabase(t *testing.T) {
	// From example Imports to a new database, using private link for the SQL server and storage account.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginImportDatabase(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		ImportNewDatabaseDefinition{
			AdministratorLogin:         to.StringPtr("login"),
			AdministratorLoginPassword: to.StringPtr("password"),
			AuthenticationType:         to.StringPtr("Sql"),
			DatabaseName:               to.StringPtr("testdb"),
			NetworkIsolation: &NetworkIsolationSettings{
				SQLServerResourceID:      to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr"),
				StorageAccountResourceID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink"),
			},
			StorageKey:     to.StringPtr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=="),
			StorageKeyType: StorageKeyTypeStorageAccessKey.ToPtr(),
			StorageURI:     to.StringPtr("https://test.blob.core.windows.net/test.bacpac"),
		},
		&ServersBeginImportDatabaseOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ImportExportOperationResult.ID == nil {
		t.Fatal("ImportExportOperationResult.ID should not be nil!")
	}

	// From example Imports to a new database.
	poller, err = client.BeginImportDatabase(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		ImportNewDatabaseDefinition{
			AdministratorLogin:         to.StringPtr("login"),
			AdministratorLoginPassword: to.StringPtr("password"),
			AuthenticationType:         to.StringPtr("Sql"),
			DatabaseName:               to.StringPtr("testdb"),
			StorageKey:                 to.StringPtr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=="),
			StorageKeyType:             StorageKeyTypeStorageAccessKey.ToPtr(),
			StorageURI:                 to.StringPtr("https://test.blob.core.windows.net/test.bacpac"),
		},
		&ServersBeginImportDatabaseOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ImportExportOperationResult.ID == nil {
		t.Fatal("ImportExportOperationResult.ID should not be nil!")
	}
}

func TestServers_CheckNameAvailability(t *testing.T) {
	// From example Check for a server name that already exists
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.CheckNameAvailability(ctx,
		CheckNameAvailabilityRequest{
			Name: to.StringPtr("server1"),
			Type: to.StringPtr("Microsoft.Sql/servers"),
		},
		&ServersCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Check for a server name that is available
	_, err = client.CheckNameAvailability(ctx,
		CheckNameAvailabilityRequest{
			Name: to.StringPtr("server1"),
			Type: to.StringPtr("Microsoft.Sql/servers"),
		},
		&ServersCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Check for a server name that is invalid
	_, err = client.CheckNameAvailability(ctx,
		CheckNameAvailabilityRequest{
			Name: to.StringPtr("SERVER1"),
			Type: to.StringPtr("Microsoft.Sql/servers"),
		},
		&ServersCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestUsages_ListByInstancePool(t *testing.T) {
	// From example List instance pool usages expanded with children.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsagesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByInstancePool("group1",
		"testIP",
		&UsagesListByInstancePoolOptions{ExpandChildren: to.BoolPtr(true)})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Usage.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Usage.ID should not be nil!")
			}
		}
	}

	// From example List instance pool usages.
	pager = client.ListByInstancePool("group1",
		"testIP",
		&UsagesListByInstancePoolOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Usage.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Usage.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
