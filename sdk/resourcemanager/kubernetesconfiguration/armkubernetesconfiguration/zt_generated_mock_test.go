//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkubernetesconfiguration_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/kubernetesconfiguration/armkubernetesconfiguration"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestClusterExtensionType_Get(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ClusterExtensionType_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ClusterExtensionType_Get_MaximumSet_Gen"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewClusterExtensionTypeClient("subId1", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftContainerService,
		armkubernetesconfiguration.ExtensionsClusterResourceNameManagedClusters,
		"clusterName1",
		"microsoft.example",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ClusterExtensionType_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkubernetesconfiguration.ExtensionType{
			Properties: &armkubernetesconfiguration.ExtensionTypeProperties{
				ClusterTypes: to.Ptr(armkubernetesconfiguration.ClusterTypesConnectedClusters),
				ReleaseTrains: []*string{
					to.Ptr("stable"),
					to.Ptr("preview"),
					to.Ptr("pilot")},
				SupportedScopes: &armkubernetesconfiguration.SupportedScopes{
					ClusterScopeSettings: &armkubernetesconfiguration.ClusterScopeSettings{
						Name: to.Ptr("microsoft.example"),
						Type: to.Ptr("Microsoft.KubernetesConfiguration/extensionTypes"),
						ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.ContainerService/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/extensionTypes/microsoft.example"),
						Properties: &armkubernetesconfiguration.ClusterScopeSettingsProperties{
							AllowMultipleInstances:  to.Ptr(true),
							DefaultReleaseNamespace: to.Ptr("kube-system"),
						},
					},
					DefaultScope: to.Ptr("cluster"),
				},
			},
			SystemData: &armkubernetesconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtensionType) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtensionType)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ClusterExtensionType_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusterExtensionTypes_List(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ClusterExtensionTypes_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ClusterExtensionTypes_List_MaximumSet_Gen"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewClusterExtensionTypesClient("subId1", cred, &options)
	pager := client.List("rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftContainerService,
		armkubernetesconfiguration.ExtensionsClusterResourceNameManagedClusters,
		"clusterName1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ClusterExtensionTypes_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkubernetesconfiguration.ExtensionTypeList{
			Value: []*armkubernetesconfiguration.ExtensionType{
				{
					Properties: &armkubernetesconfiguration.ExtensionTypeProperties{
						ClusterTypes: to.Ptr(armkubernetesconfiguration.ClusterTypesConnectedClusters),
						ReleaseTrains: []*string{
							to.Ptr("stable"),
							to.Ptr("preview"),
							to.Ptr("pilot")},
						SupportedScopes: &armkubernetesconfiguration.SupportedScopes{
							ClusterScopeSettings: &armkubernetesconfiguration.ClusterScopeSettings{
								Name: to.Ptr("microsoft.example"),
								Type: to.Ptr("Microsoft.KubernetesConfiguration/extensionTypes"),
								ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.ContainerService/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/extensionTypes/microsoft.example"),
								Properties: &armkubernetesconfiguration.ClusterScopeSettingsProperties{
									AllowMultipleInstances:  to.Ptr(true),
									DefaultReleaseNamespace: to.Ptr("kube-system"),
								},
							},
							DefaultScope: to.Ptr("cluster"),
						},
					},
					SystemData: &armkubernetesconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExtensionTypeList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExtensionTypeList)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ClusterExtensionTypes_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensionTypeVersions_List(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ExtensionTypeVersions_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExtensionTypeVersions_List_MaximumSet_Gen"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewExtensionTypeVersionsClient("subId1", cred, &options)
	pager := client.List("eastus",
		"microsoft.example",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ExtensionTypeVersions_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkubernetesconfiguration.ExtensionVersionList{
			SystemData: &armkubernetesconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
			},
			Versions: []*armkubernetesconfiguration.ExtensionVersionListVersionsItem{
				{
					ReleaseTrain: to.Ptr("stable"),
					Versions: []*string{
						to.Ptr("0.1.0"),
						to.Ptr("0.2.0"),
						to.Ptr("0.2.1")},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExtensionVersionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExtensionVersionList)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ExtensionTypeVersions_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocationExtensionTypes_List(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/LocationExtensionTypes_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LocationExtensionTypes_List_MaximumSet_Gen"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewLocationExtensionTypesClient("subId1", cred, &options)
	pager := client.List("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/LocationExtensionTypes_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkubernetesconfiguration.ExtensionTypeList{
			Value: []*armkubernetesconfiguration.ExtensionType{
				{
					Properties: &armkubernetesconfiguration.ExtensionTypeProperties{
						ClusterTypes: to.Ptr(armkubernetesconfiguration.ClusterTypesConnectedClusters),
						ReleaseTrains: []*string{
							to.Ptr("stable"),
							to.Ptr("preview"),
							to.Ptr("pilot")},
						SupportedScopes: &armkubernetesconfiguration.SupportedScopes{
							ClusterScopeSettings: &armkubernetesconfiguration.ClusterScopeSettings{
								Name: to.Ptr("microsoft.example"),
								Type: to.Ptr("Microsoft.KubernetesConfiguration/extensionTypes"),
								ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.ContainerService/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/extensionTypes/microsoft.example"),
								Properties: &armkubernetesconfiguration.ClusterScopeSettingsProperties{
									AllowMultipleInstances:  to.Ptr(true),
									DefaultReleaseNamespace: to.Ptr("kube-system"),
								},
							},
							DefaultScope: to.Ptr("cluster"),
						},
					},
					SystemData: &armkubernetesconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExtensionTypeList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExtensionTypeList)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/LocationExtensionTypes_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensions_Create(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewExtensionsClient("subId1", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		"ClusterMonitor",
		armkubernetesconfiguration.Extension{
			Properties: &armkubernetesconfiguration.ExtensionProperties{
				AutoUpgradeMinorVersion: to.Ptr(true),
				ConfigurationProtectedSettings: map[string]*string{
					"omsagent.secret.key": to.Ptr("secretKeyValue01"),
				},
				ConfigurationSettings: map[string]*string{
					"omsagent.env.clusterName": to.Ptr("clusterName1"),
					"omsagent.secret.wsid":     to.Ptr("a38cef99-5a89-52ed-b6db-22095c23664b"),
				},
				ExtensionType: to.Ptr("azuremonitor-containers"),
				ReleaseTrain:  to.Ptr("Preview"),
				Scope: &armkubernetesconfiguration.Scope{
					Cluster: &armkubernetesconfiguration.ScopeCluster{
						ReleaseNamespace: to.Ptr("kube-system"),
					},
				},
			},
		},
		&armkubernetesconfiguration.ExtensionsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateExtension.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateExtension.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkubernetesconfiguration.Extension{
			Name: to.Ptr("ClusterMonitor"),
			Type: to.Ptr("Microsoft.KubernetesConfiguration/extensions"),
			ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/extensions/ClusterMonitor"),
			Properties: &armkubernetesconfiguration.ExtensionProperties{
				AutoUpgradeMinorVersion: to.Ptr(true),
				ConfigurationSettings: map[string]*string{
					"omsagent.env.clusterName": to.Ptr("clusterName1"),
					"omsagent.secret.wsid":     to.Ptr("a38cef99-5a89-52ed-b6db-22095c23664b"),
				},
				ExtensionType:     to.Ptr("azuremonitor-containers"),
				ProvisioningState: to.Ptr(armkubernetesconfiguration.ProvisioningStateSucceeded),
				ReleaseTrain:      to.Ptr("Preview"),
				Scope: &armkubernetesconfiguration.Scope{
					Cluster: &armkubernetesconfiguration.ScopeCluster{
						ReleaseNamespace: to.Ptr("kube-system"),
					},
				},
				Statuses: []*armkubernetesconfiguration.ExtensionStatus{},
				Version:  to.Ptr("0.1.4"),
			},
			SystemData: &armkubernetesconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-08T05:10:57.027Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-08T05:10:57.027Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Extension) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Extension)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateExtension.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensions_Get(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewExtensionsClient("subId1", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		"ClusterMonitor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetExtension.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkubernetesconfiguration.Extension{
			Name: to.Ptr("ClusterMonitor"),
			Type: to.Ptr("Microsoft.KubernetesConfiguration/extensions"),
			ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/extensions/ClusterMonitor"),
			Properties: &armkubernetesconfiguration.ExtensionProperties{
				AutoUpgradeMinorVersion: to.Ptr(true),
				ConfigurationSettings: map[string]*string{
					"omsagent.env.clusterName": to.Ptr("clusterName1"),
					"omsagent.secret.wsid":     to.Ptr("a38cef99-5a89-52ed-b6db-22095c23664b"),
				},
				ExtensionType:     to.Ptr("azuremonitor-containers"),
				ProvisioningState: to.Ptr(armkubernetesconfiguration.ProvisioningStateSucceeded),
				ReleaseTrain:      to.Ptr("Preview"),
				Scope: &armkubernetesconfiguration.Scope{
					Cluster: &armkubernetesconfiguration.ScopeCluster{
						ReleaseNamespace: to.Ptr("kube-system"),
					},
				},
				Statuses: []*armkubernetesconfiguration.ExtensionStatus{},
				Version:  to.Ptr("0.1.4"),
			},
			SystemData: &armkubernetesconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-08T05:10:57.027Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-08T05:10:57.027Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Extension) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Extension)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetExtension.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensions_Delete(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/DeleteExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewExtensionsClient("subId1", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		"ClusterMonitor",
		&armkubernetesconfiguration.ExtensionsClientBeginDeleteOptions{ForceDelete: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/DeleteExtension.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/DeleteExtension.json: %v", err)
	}
}

func TestExtensions_Update(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/PatchExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewExtensionsClient("subId1", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		"ClusterMonitor",
		armkubernetesconfiguration.PatchExtension{
			Properties: &armkubernetesconfiguration.PatchExtensionProperties{
				AutoUpgradeMinorVersion: to.Ptr(true),
				ConfigurationProtectedSettings: map[string]*string{
					"omsagent.secret.key": to.Ptr("secretKeyValue01"),
				},
				ConfigurationSettings: map[string]*string{
					"omsagent.env.clusterName": to.Ptr("clusterName1"),
					"omsagent.secret.wsid":     to.Ptr("a38cef99-5a89-52ed-b6db-22095c23664b"),
				},
				ReleaseTrain: to.Ptr("Preview"),
			},
		},
		&armkubernetesconfiguration.ExtensionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/PatchExtension.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/PatchExtension.json: %v", err)
	}
}

func TestExtensions_List(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ListExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Extensions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewExtensionsClient("subId1", cred, &options)
	pager := client.List("rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ListExtensions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkubernetesconfiguration.ExtensionsList{
			Value: []*armkubernetesconfiguration.Extension{
				{
					Name: to.Ptr("ClusterMonitor"),
					Type: to.Ptr("Microsoft.KubernetesConfiguration/extensions"),
					ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/extensions/ClusterMonitor"),
					Properties: &armkubernetesconfiguration.ExtensionProperties{
						AutoUpgradeMinorVersion: to.Ptr(true),
						ConfigurationSettings: map[string]*string{
							"omsagent.env.clusterName": to.Ptr("clusterName1"),
							"omsagent.secret.wsid":     to.Ptr("a38cef99-5a89-52ed-b6db-22095c23664b"),
						},
						ExtensionType:     to.Ptr("azuremonitor-containers"),
						ProvisioningState: to.Ptr(armkubernetesconfiguration.ProvisioningStateSucceeded),
						ReleaseTrain:      to.Ptr("Preview"),
						Scope: &armkubernetesconfiguration.Scope{
							Cluster: &armkubernetesconfiguration.ScopeCluster{
								ReleaseNamespace: to.Ptr("kube-system"),
							},
						},
						Statuses: []*armkubernetesconfiguration.ExtensionStatus{},
						Version:  to.Ptr("0.1.4"),
					},
					SystemData: &armkubernetesconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-08T05:10:57.027Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-08T05:10:57.027Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
					},
				},
				{
					Name: to.Ptr("App1Monitor"),
					Type: to.Ptr("Microsoft.KubernetesConfiguration/extensions"),
					ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/extensions/BackupVault01"),
					Properties: &armkubernetesconfiguration.ExtensionProperties{
						AutoUpgradeMinorVersion: to.Ptr(false),
						ConfigurationSettings:   map[string]*string{},
						ExtensionType:           to.Ptr("Microsoft.RecoveryServices/recoveryVault"),
						ProvisioningState:       to.Ptr(armkubernetesconfiguration.ProvisioningStateSucceeded),
						ReleaseTrain:            to.Ptr("Stable"),
						Scope: &armkubernetesconfiguration.Scope{
							Cluster: &armkubernetesconfiguration.ScopeCluster{
								ReleaseNamespace: to.Ptr("myKVNamespace"),
							},
						},
						Statuses: []*armkubernetesconfiguration.ExtensionStatus{},
						Version:  to.Ptr("1.0.1"),
					},
					SystemData: &armkubernetesconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-08T04:09:23.011Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-08T04:09:23.011Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExtensionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExtensionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ListExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationStatus_Get(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetExtensionAsyncOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExtensionAsyncOperationStatus Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewOperationStatusClient("subId1", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		"ClusterMonitor",
		"99999999-9999-9999-9999-999999999999",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetExtensionAsyncOperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkubernetesconfiguration.OperationStatusResult{
			Name:       to.Ptr("99999999-9999-9999-9999-999999999999"),
			ID:         to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/extensions/ClusterMonitor/operations/99999999-9999-9999-9999-999999999999"),
			Properties: map[string]*string{},
			Status:     to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationStatusResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationStatusResult)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetExtensionAsyncOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationStatus_List(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ListAsyncOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AsyncOperationStatus List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewOperationStatusClient("subId1", cred, &options)
	pager := client.List("rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ListAsyncOperationStatus.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkubernetesconfiguration.OperationStatusList{
			Value: []*armkubernetesconfiguration.OperationStatusResult{
				{
					Name:       to.Ptr("99999999-9999-9999-9999-999999999999"),
					ID:         to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/extensions/ClusterMonitor/operations/99999999-9999-9999-9999-999999999999"),
					Properties: map[string]*string{},
					Status:     to.Ptr("Deleting"),
				},
				{
					Name:       to.Ptr("88888888-8888-8888-8888-888888888888"),
					ID:         to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/extensions/cassandraExtension1/operations/88888888-8888-8888-8888-888888888888"),
					Properties: map[string]*string{},
					Status:     to.Ptr("Creating"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationStatusList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationStatusList)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ListAsyncOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFluxConfigurations_Get(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetFluxConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Flux Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewFluxConfigurationsClient("subId1", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		"srs-fluxconfig",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetFluxConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkubernetesconfiguration.FluxConfiguration{
			Name: to.Ptr("srs-fluxconfig"),
			Type: to.Ptr("Microsoft.KubernetesConfiguration/fluxConfigurations"),
			ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/srs-fluxconfig"),
			Properties: &armkubernetesconfiguration.FluxConfigurationProperties{
				ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
				ErrorMessage:    to.Ptr(""),
				GitRepository: &armkubernetesconfiguration.GitRepositoryDefinition{
					RepositoryRef: &armkubernetesconfiguration.RepositoryRefDefinition{
						Branch: to.Ptr("master"),
					},
					SyncIntervalInSeconds: to.Ptr[int64](600),
					TimeoutInSeconds:      to.Ptr[int64](600),
					URL:                   to.Ptr("https://github.com/Azure/arc-k8s-demo"),
				},
				Kustomizations: map[string]*armkubernetesconfiguration.KustomizationDefinition{
					"srs-kustomization1": {
						Path:                  to.Ptr("./test/path"),
						DependsOn:             []*armkubernetesconfiguration.DependsOnDefinition{},
						SyncIntervalInSeconds: to.Ptr[int64](600),
						TimeoutInSeconds:      to.Ptr[int64](600),
					},
					"srs-kustomization2": {
						Path: to.Ptr("./other/test/path"),
						DependsOn: []*armkubernetesconfiguration.DependsOnDefinition{
							{
								KustomizationName: to.Ptr("srs-kustomization1"),
							}},
						Prune:                  to.Ptr(false),
						RetryIntervalInSeconds: to.Ptr[int64](600),
						SyncIntervalInSeconds:  to.Ptr[int64](600),
						TimeoutInSeconds:       to.Ptr[int64](600),
					},
				},
				LastSourceUpdatedAt:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T18:17:12Z"); return t }()),
				LastSourceUpdatedCommitID: to.Ptr("master/0ba6f0d30760d567de0bac86c8c4eec13ce1a590"),
				Namespace:                 to.Ptr("srs-namespace"),
				ProvisioningState:         to.Ptr(armkubernetesconfiguration.ProvisioningStateSucceeded),
				RepositoryPublicKey:       to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiNkrANrhtRy+02Xc7b5bwvgOKvQMbqUQaXeB6FCDkbLaavw/zO/vIhIBEQu+vbBt6IlI/Pui0rMFr5JjA8Vwwd85oabzU07TPzbFvKSU9eCXqWRKWf0DHNQj/kxPJNtyPYFv3lGoiZZ6QzejOxlW/lPPokUePN0oI10daWwqznm2q0Cmh1EgPUYveq3J5KCWncZXCdwY36zWYulCWFaqazoaGy4kxcqlVy+mPjE/UJthaoLm3mq+23uhlmmfCc1j7W6+H6fcOwTyOtcbimxz2Ug8HlTzSTXBPtEe7qyllMyk62EPNUUq4bVoVsex9sKBK6/hW0Cn2P5i5jslUPCQF"),
				Scope:                     to.Ptr(armkubernetesconfiguration.ScopeTypeCluster),
				SourceKind:                to.Ptr(armkubernetesconfiguration.SourceKindTypeGitRepository),
				Statuses: []*armkubernetesconfiguration.ObjectStatusDefinition{
					{
						Name:            to.Ptr("srs-fluxconfig"),
						ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
						Kind:            to.Ptr("GitRepository"),
						StatusConditions: []*armkubernetesconfiguration.ObjectStatusConditionDefinition{
							{
								Type:               to.Ptr("Ready"),
								LastTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T18:12:40Z"); return t }()),
								Message:            to.Ptr("'Fetched revision: master/0ba6f0d30760d567de0bac86c8c4eec13ce1a590'"),
								Reason:             to.Ptr("GitOperationSucceed"),
								Status:             to.Ptr("True"),
							}},
					},
					{
						Name: to.Ptr("srs-fluxconfig-srs-kustomization1"),
						AppliedBy: &armkubernetesconfiguration.ObjectReferenceDefinition{
							Name:      to.Ptr("my-name"),
							Namespace: to.Ptr("my-namespace"),
						},
						ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
						HelmReleaseProperties: &armkubernetesconfiguration.HelmReleasePropertiesDefinition{
							HelmChartRef: &armkubernetesconfiguration.ObjectReferenceDefinition{
								Name:      to.Ptr("myname"),
								Namespace: to.Ptr("mynamespace"),
							},
							LastRevisionApplied: to.Ptr[int64](1),
						},
						Kind: to.Ptr("Kustomization"),
						StatusConditions: []*armkubernetesconfiguration.ObjectStatusConditionDefinition{
							{
								Type:               to.Ptr("Ready"),
								LastTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T18:12:40Z"); return t }()),
								Message:            to.Ptr("'Applied revision: master/0ba6f0d30760d567de0bac86c8c4eec13ce1a590'"),
								Reason:             to.Ptr("ReconciliationSucceeded"),
								Status:             to.Ptr("True"),
							}},
					},
					{
						Name:            to.Ptr("srs-fluxconfig-srs-kustomization2"),
						ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
						HelmReleaseProperties: &armkubernetesconfiguration.HelmReleasePropertiesDefinition{
							HelmChartRef: &armkubernetesconfiguration.ObjectReferenceDefinition{
								Name:      to.Ptr("myname"),
								Namespace: to.Ptr("mynamespace"),
							},
							LastRevisionApplied: to.Ptr[int64](1),
						},
						Kind: to.Ptr("Kustomization"),
						StatusConditions: []*armkubernetesconfiguration.ObjectStatusConditionDefinition{
							{
								Type:               to.Ptr("Ready"),
								LastTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T18:12:40Z"); return t }()),
								Message:            to.Ptr("'Applied revision: master/0ba6f0d30760d567de0bac86c8c4eec13ce1a590'"),
								Reason:             to.Ptr("ReconciliationSucceeded"),
								Status:             to.Ptr("True"),
							}},
					}},
				Suspend: to.Ptr(false),
			},
			SystemData: &armkubernetesconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T05:10:57.027Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-19T05:10:57.027Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FluxConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FluxConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetFluxConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFluxConfigurations_CreateOrUpdate(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateFluxConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Flux Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewFluxConfigurationsClient("subId1", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		"srs-fluxconfig",
		armkubernetesconfiguration.FluxConfiguration{
			Properties: &armkubernetesconfiguration.FluxConfigurationProperties{
				GitRepository: &armkubernetesconfiguration.GitRepositoryDefinition{
					HTTPSCACert: to.Ptr("ZXhhbXBsZWNlcnRpZmljYXRl"),
					RepositoryRef: &armkubernetesconfiguration.RepositoryRefDefinition{
						Branch: to.Ptr("master"),
					},
					SyncIntervalInSeconds: to.Ptr[int64](600),
					TimeoutInSeconds:      to.Ptr[int64](600),
					URL:                   to.Ptr("https://github.com/Azure/arc-k8s-demo"),
				},
				Kustomizations: map[string]*armkubernetesconfiguration.KustomizationDefinition{
					"srs-kustomization1": {
						Path:                  to.Ptr("./test/path"),
						DependsOn:             []*armkubernetesconfiguration.DependsOnDefinition{},
						SyncIntervalInSeconds: to.Ptr[int64](600),
						TimeoutInSeconds:      to.Ptr[int64](600),
					},
					"srs-kustomization2": {
						Path: to.Ptr("./other/test/path"),
						DependsOn: []*armkubernetesconfiguration.DependsOnDefinition{
							{
								KustomizationName: to.Ptr("srs-kustomization1"),
							}},
						Prune:                  to.Ptr(false),
						RetryIntervalInSeconds: to.Ptr[int64](600),
						SyncIntervalInSeconds:  to.Ptr[int64](600),
						TimeoutInSeconds:       to.Ptr[int64](600),
					},
				},
				Namespace:  to.Ptr("srs-namespace"),
				Scope:      to.Ptr(armkubernetesconfiguration.ScopeTypeCluster),
				SourceKind: to.Ptr(armkubernetesconfiguration.SourceKindTypeGitRepository),
				Suspend:    to.Ptr(false),
			},
		},
		&armkubernetesconfiguration.FluxConfigurationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateFluxConfiguration.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateFluxConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkubernetesconfiguration.FluxConfiguration{
			Name: to.Ptr("srs-fluxconfig"),
			Type: to.Ptr("Microsoft.KubernetesConfiguration/fluxConfigurations"),
			ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/srs-fluxconfig"),
			Properties: &armkubernetesconfiguration.FluxConfigurationProperties{
				ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
				ErrorMessage:    to.Ptr(""),
				GitRepository: &armkubernetesconfiguration.GitRepositoryDefinition{
					HTTPSCACert: to.Ptr("ZXhhbXBsZWNlcnRpZmljYXRl"),
					RepositoryRef: &armkubernetesconfiguration.RepositoryRefDefinition{
						Branch: to.Ptr("master"),
					},
					SyncIntervalInSeconds: to.Ptr[int64](600),
					TimeoutInSeconds:      to.Ptr[int64](600),
					URL:                   to.Ptr("https://github.com/Azure/arc-k8s-demo"),
				},
				Kustomizations: map[string]*armkubernetesconfiguration.KustomizationDefinition{
					"srs-kustomization1": {
						Path:                  to.Ptr("./test/path"),
						DependsOn:             []*armkubernetesconfiguration.DependsOnDefinition{},
						SyncIntervalInSeconds: to.Ptr[int64](600),
						TimeoutInSeconds:      to.Ptr[int64](600),
					},
					"srs-kustomization2": {
						Path: to.Ptr("./other/test/path"),
						DependsOn: []*armkubernetesconfiguration.DependsOnDefinition{
							{
								KustomizationName: to.Ptr("srs-kustomization1"),
							}},
						Prune:                  to.Ptr(false),
						RetryIntervalInSeconds: to.Ptr[int64](600),
						SyncIntervalInSeconds:  to.Ptr[int64](600),
						TimeoutInSeconds:       to.Ptr[int64](600),
					},
				},
				LastSourceUpdatedAt:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T18:17:12Z"); return t }()),
				LastSourceUpdatedCommitID: to.Ptr("master/0ba6f0d30760d567de0bac86c8c4eec13ce1a590"),
				Namespace:                 to.Ptr("srs-namespace"),
				ProvisioningState:         to.Ptr(armkubernetesconfiguration.ProvisioningStateSucceeded),
				RepositoryPublicKey:       to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiNkrANrhtRy+02Xc7b5bwvgOKvQMbqUQaXeB6FCDkbLaavw/zO/vIhIBEQu+vbBt6IlI/Pui0rMFr5JjA8Vwwd85oabzU07TPzbFvKSU9eCXqWRKWf0DHNQj/kxPJNtyPYFv3lGoiZZ6QzejOxlW/lPPokUePN0oI10daWwqznm2q0Cmh1EgPUYveq3J5KCWncZXCdwY36zWYulCWFaqazoaGy4kxcqlVy+mPjE/UJthaoLm3mq+23uhlmmfCc1j7W6+H6fcOwTyOtcbimxz2Ug8HlTzSTXBPtEe7qyllMyk62EPNUUq4bVoVsex9sKBK6/hW0Cn2P5i5jslUPCQF"),
				Scope:                     to.Ptr(armkubernetesconfiguration.ScopeTypeCluster),
				SourceKind:                to.Ptr(armkubernetesconfiguration.SourceKindTypeGitRepository),
				Statuses: []*armkubernetesconfiguration.ObjectStatusDefinition{
					{
						Name:            to.Ptr("srs-fluxconfig"),
						ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
						Kind:            to.Ptr("GitRepository"),
						StatusConditions: []*armkubernetesconfiguration.ObjectStatusConditionDefinition{
							{
								Type:               to.Ptr("Ready"),
								LastTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T18:12:40Z"); return t }()),
								Message:            to.Ptr("'Fetched revision: master/0ba6f0d30760d567de0bac86c8c4eec13ce1a590'"),
								Reason:             to.Ptr("GitOperationSucceed"),
								Status:             to.Ptr("True"),
							}},
					},
					{
						Name:            to.Ptr("srs-fluxconfig-srs-kustomization1"),
						ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
						HelmReleaseProperties: &armkubernetesconfiguration.HelmReleasePropertiesDefinition{
							HelmChartRef: &armkubernetesconfiguration.ObjectReferenceDefinition{
								Name:      to.Ptr("myname"),
								Namespace: to.Ptr("mynamespace"),
							},
							LastRevisionApplied: to.Ptr[int64](1),
						},
						Kind: to.Ptr("Kustomization"),
						StatusConditions: []*armkubernetesconfiguration.ObjectStatusConditionDefinition{
							{
								Type:               to.Ptr("Ready"),
								LastTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T18:12:40Z"); return t }()),
								Message:            to.Ptr("'Applied revision: master/0ba6f0d30760d567de0bac86c8c4eec13ce1a590'"),
								Reason:             to.Ptr("ReconciliationSucceeded"),
								Status:             to.Ptr("True"),
							}},
					},
					{
						Name:            to.Ptr("srs-fluxconfig-srs-kustomization2"),
						ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
						HelmReleaseProperties: &armkubernetesconfiguration.HelmReleasePropertiesDefinition{
							HelmChartRef: &armkubernetesconfiguration.ObjectReferenceDefinition{
								Name:      to.Ptr("myname"),
								Namespace: to.Ptr("mynamespace"),
							},
							LastRevisionApplied: to.Ptr[int64](1),
						},
						Kind: to.Ptr("Kustomization"),
						StatusConditions: []*armkubernetesconfiguration.ObjectStatusConditionDefinition{
							{
								Type:               to.Ptr("Ready"),
								LastTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T18:12:40Z"); return t }()),
								Message:            to.Ptr("'Applied revision: master/0ba6f0d30760d567de0bac86c8c4eec13ce1a590'"),
								Reason:             to.Ptr("ReconciliationSucceeded"),
								Status:             to.Ptr("True"),
							}},
					}},
				Suspend: to.Ptr(false),
			},
			SystemData: &armkubernetesconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T05:10:57.027Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-19T05:10:57.027Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FluxConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FluxConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateFluxConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateFluxConfigurationWithBucket.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Flux Configuration with Bucket Source Kind"},
	})
	client = armkubernetesconfiguration.NewFluxConfigurationsClient("subId1", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		"srs-fluxconfig",
		armkubernetesconfiguration.FluxConfiguration{
			Properties: &armkubernetesconfiguration.FluxConfigurationProperties{
				Bucket: &armkubernetesconfiguration.BucketDefinition{
					AccessKey:             to.Ptr("fluxminiotest"),
					BucketName:            to.Ptr("flux"),
					SyncIntervalInSeconds: to.Ptr[int64](1000),
					TimeoutInSeconds:      to.Ptr[int64](1000),
					URL:                   to.Ptr("https://fluxminiotest.az.minio.io"),
				},
				Kustomizations: map[string]*armkubernetesconfiguration.KustomizationDefinition{
					"srs-kustomization1": {
						Path:                  to.Ptr("./test/path"),
						DependsOn:             []*armkubernetesconfiguration.DependsOnDefinition{},
						SyncIntervalInSeconds: to.Ptr[int64](600),
						TimeoutInSeconds:      to.Ptr[int64](600),
					},
					"srs-kustomization2": {
						Path: to.Ptr("./other/test/path"),
						DependsOn: []*armkubernetesconfiguration.DependsOnDefinition{
							{
								KustomizationName: to.Ptr("srs-kustomization1"),
							}},
						Prune:                  to.Ptr(false),
						RetryIntervalInSeconds: to.Ptr[int64](600),
						SyncIntervalInSeconds:  to.Ptr[int64](600),
						TimeoutInSeconds:       to.Ptr[int64](600),
					},
				},
				Namespace:  to.Ptr("srs-namespace"),
				Scope:      to.Ptr(armkubernetesconfiguration.ScopeTypeCluster),
				SourceKind: to.Ptr(armkubernetesconfiguration.SourceKindTypeBucket),
				Suspend:    to.Ptr(false),
			},
		},
		&armkubernetesconfiguration.FluxConfigurationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateFluxConfigurationWithBucket.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateFluxConfigurationWithBucket.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkubernetesconfiguration.FluxConfiguration{
			Name: to.Ptr("srs-fluxconfig"),
			Type: to.Ptr("Microsoft.KubernetesConfiguration/fluxConfigurations"),
			ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/srs-fluxconfig"),
			Properties: &armkubernetesconfiguration.FluxConfigurationProperties{
				Bucket: &armkubernetesconfiguration.BucketDefinition{
					AccessKey:             to.Ptr("fluxminiotest"),
					BucketName:            to.Ptr("flux"),
					SyncIntervalInSeconds: to.Ptr[int64](1000),
					TimeoutInSeconds:      to.Ptr[int64](1000),
					URL:                   to.Ptr("https://fluxminiotest.az.minio.io"),
				},
				ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
				ErrorMessage:    to.Ptr(""),
				Kustomizations: map[string]*armkubernetesconfiguration.KustomizationDefinition{
					"srs-kustomization1": {
						Path:                  to.Ptr("./test/path"),
						DependsOn:             []*armkubernetesconfiguration.DependsOnDefinition{},
						SyncIntervalInSeconds: to.Ptr[int64](600),
						TimeoutInSeconds:      to.Ptr[int64](600),
					},
					"srs-kustomization2": {
						Path: to.Ptr("./other/test/path"),
						DependsOn: []*armkubernetesconfiguration.DependsOnDefinition{
							{
								KustomizationName: to.Ptr("srs-kustomization1"),
							}},
						Prune:                  to.Ptr(false),
						RetryIntervalInSeconds: to.Ptr[int64](600),
						SyncIntervalInSeconds:  to.Ptr[int64](600),
						TimeoutInSeconds:       to.Ptr[int64](600),
					},
				},
				LastSourceUpdatedAt:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T18:17:12Z"); return t }()),
				LastSourceUpdatedCommitID: to.Ptr("master/0ba6f0d30760d567de0bac86c8c4eec13ce1a590"),
				Namespace:                 to.Ptr("srs-namespace"),
				ProvisioningState:         to.Ptr(armkubernetesconfiguration.ProvisioningStateSucceeded),
				RepositoryPublicKey:       to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiNkrANrhtRy+02Xc7b5bwvgOKvQMbqUQaXeB6FCDkbLaavw/zO/vIhIBEQu+vbBt6IlI/Pui0rMFr5JjA8Vwwd85oabzU07TPzbFvKSU9eCXqWRKWf0DHNQj/kxPJNtyPYFv3lGoiZZ6QzejOxlW/lPPokUePN0oI10daWwqznm2q0Cmh1EgPUYveq3J5KCWncZXCdwY36zWYulCWFaqazoaGy4kxcqlVy+mPjE/UJthaoLm3mq+23uhlmmfCc1j7W6+H6fcOwTyOtcbimxz2Ug8HlTzSTXBPtEe7qyllMyk62EPNUUq4bVoVsex9sKBK6/hW0Cn2P5i5jslUPCQF"),
				Scope:                     to.Ptr(armkubernetesconfiguration.ScopeTypeCluster),
				SourceKind:                to.Ptr(armkubernetesconfiguration.SourceKindTypeBucket),
				Statuses: []*armkubernetesconfiguration.ObjectStatusDefinition{
					{
						Name:            to.Ptr("srs-fluxconfig"),
						ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
						Kind:            to.Ptr("GitRepository"),
						StatusConditions: []*armkubernetesconfiguration.ObjectStatusConditionDefinition{
							{
								Type:               to.Ptr("Ready"),
								LastTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T18:12:40Z"); return t }()),
								Message:            to.Ptr("'Fetched revision: master/0ba6f0d30760d567de0bac86c8c4eec13ce1a590'"),
								Reason:             to.Ptr("GitOperationSucceed"),
								Status:             to.Ptr("True"),
							}},
					},
					{
						Name:            to.Ptr("srs-fluxconfig-srs-kustomization1"),
						ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
						HelmReleaseProperties: &armkubernetesconfiguration.HelmReleasePropertiesDefinition{
							HelmChartRef: &armkubernetesconfiguration.ObjectReferenceDefinition{
								Name:      to.Ptr("myname"),
								Namespace: to.Ptr("mynamespace"),
							},
							LastRevisionApplied: to.Ptr[int64](1),
						},
						Kind: to.Ptr("Kustomization"),
						StatusConditions: []*armkubernetesconfiguration.ObjectStatusConditionDefinition{
							{
								Type:               to.Ptr("Ready"),
								LastTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T18:12:40Z"); return t }()),
								Message:            to.Ptr("'Applied revision: master/0ba6f0d30760d567de0bac86c8c4eec13ce1a590'"),
								Reason:             to.Ptr("ReconciliationSucceeded"),
								Status:             to.Ptr("True"),
							}},
					},
					{
						Name:            to.Ptr("srs-fluxconfig-srs-kustomization2"),
						ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
						HelmReleaseProperties: &armkubernetesconfiguration.HelmReleasePropertiesDefinition{
							HelmChartRef: &armkubernetesconfiguration.ObjectReferenceDefinition{
								Name:      to.Ptr("myname"),
								Namespace: to.Ptr("mynamespace"),
							},
							LastRevisionApplied: to.Ptr[int64](1),
						},
						Kind: to.Ptr("Kustomization"),
						StatusConditions: []*armkubernetesconfiguration.ObjectStatusConditionDefinition{
							{
								Type:               to.Ptr("Ready"),
								LastTransitionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T18:12:40Z"); return t }()),
								Message:            to.Ptr("'Applied revision: master/0ba6f0d30760d567de0bac86c8c4eec13ce1a590'"),
								Reason:             to.Ptr("ReconciliationSucceeded"),
								Status:             to.Ptr("True"),
							}},
					}},
				Suspend: to.Ptr(false),
			},
			SystemData: &armkubernetesconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T05:10:57.027Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-19T05:10:57.027Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FluxConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FluxConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateFluxConfigurationWithBucket.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFluxConfigurations_Update(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/PatchFluxConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch Flux Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewFluxConfigurationsClient("subId1", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		"srs-fluxconfig",
		armkubernetesconfiguration.FluxConfigurationPatch{
			Properties: &armkubernetesconfiguration.FluxConfigurationPatchProperties{
				GitRepository: &armkubernetesconfiguration.GitRepositoryPatchDefinition{
					URL: to.Ptr("https://github.com/jonathan-innis/flux2-kustomize-helm-example.git"),
				},
				Kustomizations: map[string]*armkubernetesconfiguration.KustomizationPatchDefinition{
					"srs-kustomization1": nil,
					"srs-kustomization2": {
						Path:                  to.Ptr("./test/alt-path"),
						SyncIntervalInSeconds: to.Ptr[int64](300),
					},
					"srs-kustomization3": {
						Path:                  to.Ptr("./test/another-path"),
						SyncIntervalInSeconds: to.Ptr[int64](300),
					},
				},
				Suspend: to.Ptr(true),
			},
		},
		&armkubernetesconfiguration.FluxConfigurationsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/PatchFluxConfiguration.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/PatchFluxConfiguration.json: %v", err)
	}
}

func TestFluxConfigurations_Delete(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/DeleteFluxConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Flux Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewFluxConfigurationsClient("subId1", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		"srs-fluxconfig",
		&armkubernetesconfiguration.FluxConfigurationsClientBeginDeleteOptions{ForceDelete: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/DeleteFluxConfiguration.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/DeleteFluxConfiguration.json: %v", err)
	}
}

func TestFluxConfigurations_List(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ListFluxConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Flux Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewFluxConfigurationsClient("subId1", cred, &options)
	pager := client.List("rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ListFluxConfigurations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkubernetesconfiguration.FluxConfigurationsList{
			Value: []*armkubernetesconfiguration.FluxConfiguration{
				{
					Name: to.Ptr("srs-fluxconfig"),
					Type: to.Ptr("Microsoft.KubernetesConfiguration/fluxConfigurations"),
					ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/srs-fluxconfig"),
					Properties: &armkubernetesconfiguration.FluxConfigurationProperties{
						ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
						ErrorMessage:    to.Ptr(""),
						GitRepository: &armkubernetesconfiguration.GitRepositoryDefinition{
							RepositoryRef: &armkubernetesconfiguration.RepositoryRefDefinition{
								Branch: to.Ptr("master"),
							},
							SyncIntervalInSeconds: to.Ptr[int64](600),
							TimeoutInSeconds:      to.Ptr[int64](600),
							URL:                   to.Ptr("https://github.com/Azure/arc-k8s-demo"),
						},
						Kustomizations: map[string]*armkubernetesconfiguration.KustomizationDefinition{
							"srs-kustomization1": {
								Path:                  to.Ptr("./test/path"),
								DependsOn:             []*armkubernetesconfiguration.DependsOnDefinition{},
								SyncIntervalInSeconds: to.Ptr[int64](600),
								TimeoutInSeconds:      to.Ptr[int64](600),
							},
							"srs-kustomization2": {
								Path: to.Ptr("./other/test/path"),
								DependsOn: []*armkubernetesconfiguration.DependsOnDefinition{
									{
										KustomizationName: to.Ptr("srs-kustomization1"),
									}},
								Prune:                  to.Ptr(false),
								RetryIntervalInSeconds: to.Ptr[int64](600),
								SyncIntervalInSeconds:  to.Ptr[int64](600),
								TimeoutInSeconds:       to.Ptr[int64](600),
							},
						},
						LastSourceUpdatedAt:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T18:17:12Z"); return t }()),
						LastSourceUpdatedCommitID: to.Ptr("master/0ba6f0d30760d567de0bac86c8c4eec13ce1a590"),
						Namespace:                 to.Ptr("srs-namespace"),
						ProvisioningState:         to.Ptr(armkubernetesconfiguration.ProvisioningStateSucceeded),
						RepositoryPublicKey:       to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiNkrANrhtRy+02Xc7b5bwvgOKvQMbqUQaXeB6FCDkbLaavw/zO/vIhIBEQu+vbBt6IlI/Pui0rMFr5JjA8Vwwd85oabzU07TPzbFvKSU9eCXqWRKWf0DHNQj/kxPJNtyPYFv3lGoiZZ6QzejOxlW/lPPokUePN0oI10daWwqznm2q0Cmh1EgPUYveq3J5KCWncZXCdwY36zWYulCWFaqazoaGy4kxcqlVy+mPjE/UJthaoLm3mq+23uhlmmfCc1j7W6+H6fcOwTyOtcbimxz2Ug8HlTzSTXBPtEe7qyllMyk62EPNUUq4bVoVsex9sKBK6/hW0Cn2P5i5jslUPCQF"),
						Scope:                     to.Ptr(armkubernetesconfiguration.ScopeTypeCluster),
						SourceKind:                to.Ptr(armkubernetesconfiguration.SourceKindTypeGitRepository),
						Statuses: []*armkubernetesconfiguration.ObjectStatusDefinition{
							{
								Name:            to.Ptr("srs-fluxconfig"),
								ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
								Kind:            to.Ptr("GitRepository"),
							},
							{
								Name:            to.Ptr("srs-fluxconfig-srs-kustomization1"),
								ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
								Kind:            to.Ptr("Kustomization"),
							},
							{
								Name:            to.Ptr("srs-fluxconfig-srs-kustomization2"),
								ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
								Kind:            to.Ptr("Kustomization"),
							}},
						Suspend: to.Ptr(false),
					},
					SystemData: &armkubernetesconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T05:10:57.027Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-19T05:10:57.027Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
					},
				},
				{
					Name: to.Ptr("srs-fluxconfig"),
					Type: to.Ptr("Microsoft.KubernetesConfiguration/fluxConfigurations"),
					ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/srs-fluxconfig"),
					Properties: &armkubernetesconfiguration.FluxConfigurationProperties{
						ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
						ErrorMessage:    to.Ptr(""),
						GitRepository: &armkubernetesconfiguration.GitRepositoryDefinition{
							RepositoryRef: &armkubernetesconfiguration.RepositoryRefDefinition{
								Branch: to.Ptr("master"),
							},
							SyncIntervalInSeconds: to.Ptr[int64](600),
							TimeoutInSeconds:      to.Ptr[int64](600),
							URL:                   to.Ptr("https://github.com/Azure/arc-k8s-demo"),
						},
						Kustomizations: map[string]*armkubernetesconfiguration.KustomizationDefinition{
							"srs-kustomization1": {
								Path:                  to.Ptr("./test/path"),
								DependsOn:             []*armkubernetesconfiguration.DependsOnDefinition{},
								SyncIntervalInSeconds: to.Ptr[int64](600),
								TimeoutInSeconds:      to.Ptr[int64](600),
							},
							"srs-kustomization2": {
								Path: to.Ptr("./other/test/path"),
								DependsOn: []*armkubernetesconfiguration.DependsOnDefinition{
									{
										KustomizationName: to.Ptr("srs-kustomization1"),
									}},
								Prune:                  to.Ptr(false),
								RetryIntervalInSeconds: to.Ptr[int64](600),
								SyncIntervalInSeconds:  to.Ptr[int64](600),
								TimeoutInSeconds:       to.Ptr[int64](600),
							},
						},
						LastSourceUpdatedAt:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T18:17:12Z"); return t }()),
						LastSourceUpdatedCommitID: to.Ptr("master/0ba6f0d30760d567de0bac86c8c4eec13ce1a590"),
						Namespace:                 to.Ptr("srs-namespace"),
						ProvisioningState:         to.Ptr(armkubernetesconfiguration.ProvisioningStateSucceeded),
						RepositoryPublicKey:       to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiNkrANrhtRy+02Xc7b5bwvgOKvQMbqUQaXeB6FCDkbLaavw/zO/vIhIBEQu+vbBt6IlI/Pui0rMFr5JjA8Vwwd85oabzU07TPzbFvKSU9eCXqWRKWf0DHNQj/kxPJNtyPYFv3lGoiZZ6QzejOxlW/lPPokUePN0oI10daWwqznm2q0Cmh1EgPUYveq3J5KCWncZXCdwY36zWYulCWFaqazoaGy4kxcqlVy+mPjE/UJthaoLm3mq+23uhlmmfCc1j7W6+H6fcOwTyOtcbimxz2Ug8HlTzSTXBPtEe7qyllMyk62EPNUUq4bVoVsex9sKBK6/hW0Cn2P5i5jslUPCQF"),
						Scope:                     to.Ptr(armkubernetesconfiguration.ScopeTypeCluster),
						SourceKind:                to.Ptr(armkubernetesconfiguration.SourceKindTypeGitRepository),
						Statuses: []*armkubernetesconfiguration.ObjectStatusDefinition{
							{
								Name:            to.Ptr("srs-fluxconfig"),
								ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
								Kind:            to.Ptr("GitRepository"),
							},
							{
								Name:            to.Ptr("srs-fluxconfig-srs-kustomization1"),
								ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
								Kind:            to.Ptr("Kustomization"),
							},
							{
								Name:            to.Ptr("srs-fluxconfig-srs-kustomization2"),
								ComplianceState: to.Ptr(armkubernetesconfiguration.FluxComplianceStateCompliant),
								Kind:            to.Ptr("Kustomization"),
							}},
						Suspend: to.Ptr(false),
					},
					SystemData: &armkubernetesconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-19T05:10:57.027Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-19T05:10:57.027Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FluxConfigurationsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FluxConfigurationsList)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ListFluxConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFluxConfigOperationStatus_Get(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetFluxConfigurationAsyncOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FluxConfigurationAsyncOperationStatus Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewFluxConfigOperationStatusClient("subId1", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		"srs-fluxconfig",
		"99999999-9999-9999-9999-999999999999",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetFluxConfigurationAsyncOperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkubernetesconfiguration.OperationStatusResult{
			Name:       to.Ptr("99999999-9999-9999-9999-999999999999"),
			ID:         to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/srs-fluxconfig/operations/99999999-9999-9999-9999-999999999999"),
			Properties: map[string]*string{},
			Status:     to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationStatusResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationStatusResult)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetFluxConfigurationAsyncOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControlConfigurations_Get(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetSourceControlConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Source Control Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewSourceControlConfigurationsClient("subId1", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		"SRS_GitHubConfig",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetSourceControlConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkubernetesconfiguration.SourceControlConfiguration{
			Name: to.Ptr("SRS_GitHubConfig"),
			Type: to.Ptr("Microsoft.KubernetesConfiguration/sourceControlConfigurations"),
			ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/SRS_GitHubConfig"),
			Properties: &armkubernetesconfiguration.SourceControlConfigurationProperties{
				ComplianceStatus: &armkubernetesconfiguration.ComplianceStatus{
					ComplianceState:   to.Ptr(armkubernetesconfiguration.ComplianceStateTypePending),
					LastConfigApplied: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:25:32.122Z"); return t }()),
					Message:           to.Ptr("Configuration successfully created"),
					MessageLevel:      to.Ptr(armkubernetesconfiguration.MessageLevelType("Info")),
				},
				HelmOperatorProperties: &armkubernetesconfiguration.HelmOperatorProperties{
					ChartValues:  to.Ptr("--set git.ssh.secretName=flux-git-deploy --set tillerNamespace=kube-system"),
					ChartVersion: to.Ptr("0.3.0"),
				},
				OperatorInstanceName:  to.Ptr("SRSGitHubFluxOp-01"),
				OperatorNamespace:     to.Ptr("SRS_Namespace"),
				OperatorParams:        to.Ptr("--git-email=xyzgituser@users.srs.github.com"),
				OperatorScope:         to.Ptr(armkubernetesconfiguration.OperatorScopeTypeNamespace),
				OperatorType:          to.Ptr(armkubernetesconfiguration.OperatorTypeFlux),
				ProvisioningState:     to.Ptr(armkubernetesconfiguration.ProvisioningStateTypeSucceeded),
				RepositoryPublicKey:   to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAqvTzeL+BWgcHnC1CTBRMg2ZfCh9khlrvb2avFHiGG24rRvjLHlKqtfiiw+cZNCKskUyVKqamD2RHrhyn/wXvJ9fFRt0LhYLKn4hJhJaPx4IawdWnW1MUv4U+Mr8o3Cxps4EmiZemqri3fOrhzEIlPL272whKpzlDLV7L4W1XQIGmVPwQ93HTzKEd5uHuEuw6JyFftDDLlCnd3Q1kQ7HOabFEfcSSr9cMx2MU4j/Pjuf3Rd/CzeksvKtU009KSXSnWKm8LL1fihSc1H1WDTi8iuZtT63hsNYH1yxrPRpMVScs3ufLViAGO9NEHQSgDdl/OERQQqKisUn2Qm6adgmftw== rsa-key-20190909"),
				RepositoryURL:         to.Ptr("git@github.com:k8sdeveloper425/flux-get-started"),
				SSHKnownHostsContents: to.Ptr("c3NoLmRldi5henVyZS5jb20gc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDN0hyMW9UV3FOcU9sekdKT2ZHSjROYWtWeUl6ZjFyWFlkNGQ3d282akJsa0x2Q0E0b2RCbEwwbURVeVowL1FVZlRUcWV1K3RtMjJnT3N2K1ZyVlRNazZ2d1JVNzVnWS95OXV0NU1iM2JSNUJWNThkS1h5cTlBOVVlQjVDYWtlaG41WmdtNngxbUtvVnlmK0ZGbjI2aVlxWEpSZ3pJWlpjWjVWNmhyRTBRZzM5a1ptNGF6NDhvMEFVYmY2U3A0U0xkdm51TWEyc1ZOd0hCYm9TN0VKa201N1hRUFZVMy9RcHlOTEhiV0Rkend0cmxTK2V6MzBTM0FkWWhMS0VPeEFHOHdlT255cnRMSkFVZW45bVRrb2w4b0lJMWVkZjdtV1diV1ZmMG5CbWx5MjErblpjbUNUSVNRQnRkY3lQYUVubzdmRlFNREQyNi9zMGxmS29iNEt3OEg="),
			},
			SystemData: &armkubernetesconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SourceControlConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SourceControlConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetSourceControlConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControlConfigurations_CreateOrUpdate(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateSourceControlConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Source Control Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewSourceControlConfigurationsClient("subId1", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		"SRS_GitHubConfig",
		armkubernetesconfiguration.SourceControlConfiguration{
			Properties: &armkubernetesconfiguration.SourceControlConfigurationProperties{
				ConfigurationProtectedSettings: map[string]*string{
					"protectedSetting1Key": to.Ptr("protectedSetting1Value"),
				},
				EnableHelmOperator: to.Ptr(true),
				HelmOperatorProperties: &armkubernetesconfiguration.HelmOperatorProperties{
					ChartValues:  to.Ptr("--set git.ssh.secretName=flux-git-deploy --set tillerNamespace=kube-system"),
					ChartVersion: to.Ptr("0.3.0"),
				},
				OperatorInstanceName:  to.Ptr("SRSGitHubFluxOp-01"),
				OperatorNamespace:     to.Ptr("SRS_Namespace"),
				OperatorParams:        to.Ptr("--git-email=xyzgituser@users.srs.github.com"),
				OperatorScope:         to.Ptr(armkubernetesconfiguration.OperatorScopeTypeNamespace),
				OperatorType:          to.Ptr(armkubernetesconfiguration.OperatorTypeFlux),
				RepositoryURL:         to.Ptr("git@github.com:k8sdeveloper425/flux-get-started"),
				SSHKnownHostsContents: to.Ptr("c3NoLmRldi5henVyZS5jb20gc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDN0hyMW9UV3FOcU9sekdKT2ZHSjROYWtWeUl6ZjFyWFlkNGQ3d282akJsa0x2Q0E0b2RCbEwwbURVeVowL1FVZlRUcWV1K3RtMjJnT3N2K1ZyVlRNazZ2d1JVNzVnWS95OXV0NU1iM2JSNUJWNThkS1h5cTlBOVVlQjVDYWtlaG41WmdtNngxbUtvVnlmK0ZGbjI2aVlxWEpSZ3pJWlpjWjVWNmhyRTBRZzM5a1ptNGF6NDhvMEFVYmY2U3A0U0xkdm51TWEyc1ZOd0hCYm9TN0VKa201N1hRUFZVMy9RcHlOTEhiV0Rkend0cmxTK2V6MzBTM0FkWWhMS0VPeEFHOHdlT255cnRMSkFVZW45bVRrb2w4b0lJMWVkZjdtV1diV1ZmMG5CbWx5MjErblpjbUNUSVNRQnRkY3lQYUVubzdmRlFNREQyNi9zMGxmS29iNEt3OEg="),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateSourceControlConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armkubernetesconfiguration.SourceControlConfiguration{
			Name: to.Ptr("SRS_GitHubConfig"),
			Type: to.Ptr("Microsoft.KubernetesConfiguration/sourceControlConfigurations"),
			ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/SRS_GitHubConfig"),
			Properties: &armkubernetesconfiguration.SourceControlConfigurationProperties{
				ComplianceStatus: &armkubernetesconfiguration.ComplianceStatus{
					ComplianceState:   to.Ptr(armkubernetesconfiguration.ComplianceStateTypePending),
					LastConfigApplied: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:25:32.122Z"); return t }()),
					Message:           to.Ptr("Configuration successfully created"),
					MessageLevel:      to.Ptr(armkubernetesconfiguration.MessageLevelType("Info")),
				},
				EnableHelmOperator: to.Ptr(true),
				HelmOperatorProperties: &armkubernetesconfiguration.HelmOperatorProperties{
					ChartValues:  to.Ptr("--set git.ssh.secretName=flux-git-deploy --set tillerNamespace=kube-system"),
					ChartVersion: to.Ptr("0.3.0"),
				},
				OperatorInstanceName:  to.Ptr("SRSGitHubFluxOp-01"),
				OperatorNamespace:     to.Ptr("SRS_Namespace"),
				OperatorParams:        to.Ptr("--git-email=xyzgituser@users.srs.github.com"),
				OperatorScope:         to.Ptr(armkubernetesconfiguration.OperatorScopeTypeNamespace),
				OperatorType:          to.Ptr(armkubernetesconfiguration.OperatorTypeFlux),
				ProvisioningState:     to.Ptr(armkubernetesconfiguration.ProvisioningStateTypeSucceeded),
				RepositoryPublicKey:   to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAqvTzeL+BWgcHnC1CTBRMg2ZfCh9khlrvb2avFHiGG24rRvjLHlKqtfiiw+cZNCKskUyVKqamD2RHrhyn/wXvJ9fFRt0LhYLKn4hJhJaPx4IawdWnW1MUv4U+Mr8o3Cxps4EmiZemqri3fOrhzEIlPL272whKpzlDLV7L4W1XQIGmVPwQ93HTzKEd5uHuEuw6JyFftDDLlCnd3Q1kQ7HOabFEfcSSr9cMx2MU4j/Pjuf3Rd/CzeksvKtU009KSXSnWKm8LL1fihSc1H1WDTi8iuZtT63hsNYH1yxrPRpMVScs3ufLViAGO9NEHQSgDdl/OERQQqKisUn2Qm6adgmftw== rsa-key-20190909"),
				RepositoryURL:         to.Ptr("git@github.com:k8sdeveloper425/flux-get-started"),
				SSHKnownHostsContents: to.Ptr("c3NoLmRldi5henVyZS5jb20gc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDN0hyMW9UV3FOcU9sekdKT2ZHSjROYWtWeUl6ZjFyWFlkNGQ3d282akJsa0x2Q0E0b2RCbEwwbURVeVowL1FVZlRUcWV1K3RtMjJnT3N2K1ZyVlRNazZ2d1JVNzVnWS95OXV0NU1iM2JSNUJWNThkS1h5cTlBOVVlQjVDYWtlaG41WmdtNngxbUtvVnlmK0ZGbjI2aVlxWEpSZ3pJWlpjWjVWNmhyRTBRZzM5a1ptNGF6NDhvMEFVYmY2U3A0U0xkdm51TWEyc1ZOd0hCYm9TN0VKa201N1hRUFZVMy9RcHlOTEhiV0Rkend0cmxTK2V6MzBTM0FkWWhMS0VPeEFHOHdlT255cnRMSkFVZW45bVRrb2w4b0lJMWVkZjdtV1diV1ZmMG5CbWx5MjErblpjbUNUSVNRQnRkY3lQYUVubzdmRlFNREQyNi9zMGxmS29iNEt3OEg="),
			},
			SystemData: &armkubernetesconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SourceControlConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SourceControlConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateSourceControlConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControlConfigurations_Delete(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/DeleteSourceControlConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Source Control Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewSourceControlConfigurationsClient("subId1", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		"SRS_GitHubConfig",
		&armkubernetesconfiguration.SourceControlConfigurationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/DeleteSourceControlConfiguration.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/DeleteSourceControlConfiguration.json: %v", err)
	}
}

func TestSourceControlConfigurations_List(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ListSourceControlConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Source Control Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewSourceControlConfigurationsClient("subId1", cred, &options)
	pager := client.List("rg1",
		armkubernetesconfiguration.ExtensionsClusterRpMicrosoftKubernetes,
		armkubernetesconfiguration.ExtensionsClusterResourceNameConnectedClusters,
		"clusterName1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ListSourceControlConfiguration.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkubernetesconfiguration.SourceControlConfigurationList{
			Value: []*armkubernetesconfiguration.SourceControlConfiguration{
				{
					Name: to.Ptr("SRS_GitHubConfig"),
					Type: to.Ptr("Microsoft.KubernetesConfiguration/sourceControlConfigurations"),
					ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/SRS_GitHubConfig"),
					Properties: &armkubernetesconfiguration.SourceControlConfigurationProperties{
						ComplianceStatus: &armkubernetesconfiguration.ComplianceStatus{
							ComplianceState: to.Ptr(armkubernetesconfiguration.ComplianceStateTypeCompliant),
						},
						OperatorInstanceName:  to.Ptr("SRSGitHubFluxOp-01"),
						OperatorNamespace:     to.Ptr("SRS_Namespace"),
						OperatorScope:         to.Ptr(armkubernetesconfiguration.OperatorScopeTypeNamespace),
						OperatorType:          to.Ptr(armkubernetesconfiguration.OperatorTypeFlux),
						ProvisioningState:     to.Ptr(armkubernetesconfiguration.ProvisioningStateTypeSucceeded),
						RepositoryURL:         to.Ptr("git@github.com:k8sdeveloper425/SRSClusterconfigs"),
						SSHKnownHostsContents: to.Ptr("c3NoLmRldi5henVyZS5jb20gc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDN0hyMW9UV3FOcU9sekdKT2ZHSjROYWtWeUl6ZjFyWFlkNGQ3d282akJsa0x2Q0E0b2RCbEwwbURVeVowL1FVZlRUcWV1K3RtMjJnT3N2K1ZyVlRNazZ2d1JVNzVnWS95OXV0NU1iM2JSNUJWNThkS1h5cTlBOVVlQjVDYWtlaG41WmdtNngxbUtvVnlmK0ZGbjI2aVlxWEpSZ3pJWlpjWjVWNmhyRTBRZzM5a1ptNGF6NDhvMEFVYmY2U3A0U0xkdm51TWEyc1ZOd0hCYm9TN0VKa201N1hRUFZVMy9RcHlOTEhiV0Rkend0cmxTK2V6MzBTM0FkWWhMS0VPeEFHOHdlT255cnRMSkFVZW45bVRrb2w4b0lJMWVkZjdtV1diV1ZmMG5CbWx5MjErblpjbUNUSVNRQnRkY3lQYUVubzdmRlFNREQyNi9zMGxmS29iNEt3OEg="),
					},
					SystemData: &armkubernetesconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
					},
				},
				{
					Name: to.Ptr("SCRS_GitHubConfig"),
					Type: to.Ptr("Microsoft.KubernetesConfiguration/sourceControlConfigurations"),
					ID:   to.Ptr("/subscriptions/subId1/resourceGroups/rg1/providers/Microsoft.Kubernetes/connectedClusters/clusterName1/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/SCRS_GitHubConfig"),
					Properties: &armkubernetesconfiguration.SourceControlConfigurationProperties{
						ComplianceStatus: &armkubernetesconfiguration.ComplianceStatus{
							ComplianceState: to.Ptr(armkubernetesconfiguration.ComplianceStateTypeCompliant),
						},
						OperatorInstanceName:  to.Ptr("SCRSGitHubFluxOp-02"),
						OperatorNamespace:     to.Ptr("SCRS_Namespace"),
						OperatorScope:         to.Ptr(armkubernetesconfiguration.OperatorScopeTypeCluster),
						OperatorType:          to.Ptr(armkubernetesconfiguration.OperatorTypeFlux),
						ProvisioningState:     to.Ptr(armkubernetesconfiguration.ProvisioningStateTypeSucceeded),
						RepositoryURL:         to.Ptr("git@github.com:k8sdeveloper425/SCRSClusterconfigs"),
						SSHKnownHostsContents: to.Ptr("c3NoLmRldi5henVyZS5jb20gc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDN0hyMW9UV3FOcU9sekdKT2ZHSjROYWtWeUl6ZjFyWFlkNGQ3d282akJsa0x2Q0E0b2RCbEwwbURVeVowL1FVZlRUcWV1K3RtMjJnT3N2K1ZyVlRNazZ2d1JVNzVnWS95OXV0NU1iM2JSNUJWNThkS1h5cTlBOVVlQjVDYWtlaG41WmdtNngxbUtvVnlmK0ZGbjI2aVlxWEpSZ3pJWlpjWjVWNmhyRTBRZzM5a1ptNGF6NDhvMEFVYmY2U3A0U0xkdm51TWEyc1ZOd0hCYm9TN0VKa201N1hRUFZVMy9RcHlOTEhiV0Rkend0cmxTK2V6MzBTM0FkWWhMS0VPeEFHOHdlT255cnRMSkFVZW45bVRrb2w4b0lJMWVkZjdtV1diV1ZmMG5CbWx5MjErblpjbUNUSVNRQnRkY3lQYUVubzdmRlFNREQyNi9zMGxmS29iNEt3OEg="),
					},
					SystemData: &armkubernetesconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-08T05:10:57.027Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armkubernetesconfiguration.CreatedByTypeApplication),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SourceControlConfigurationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SourceControlConfigurationList)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ListSourceControlConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BatchAccountDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armkubernetesconfiguration.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armkubernetesconfiguration.ResourceProviderOperationList{
			Value: []*armkubernetesconfiguration.ResourceProviderOperation{
				{
					Name: to.Ptr("Microsoft.KubernetesConfiguration/sourceControlConfigurations/write"),
					Display: &armkubernetesconfiguration.ResourceProviderOperationDisplay{
						Description: to.Ptr("Creates or updates source control configuration."),
						Operation:   to.Ptr("Microsoft.KubernetesConfiguration/sourceControlConfigurations/write"),
						Provider:    to.Ptr("Microsoft Kubernetes Configuration"),
						Resource:    to.Ptr("Microsoft.KubernetesConfiguration/sourceControlConfigurations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.KubernetesConfiguration/sourceControlConfigurations/read"),
					Display: &armkubernetesconfiguration.ResourceProviderOperationDisplay{
						Description: to.Ptr("Gets source control configuration."),
						Operation:   to.Ptr("Microsoft.KubernetesConfiguration/sourceControlConfigurations/read"),
						Provider:    to.Ptr("Microsoft Kubernetes Configuration"),
						Resource:    to.Ptr("Microsoft.KubernetesConfiguration/sourceControlConfigurations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.KubernetesConfiguration/sourceControlConfigurations/delete"),
					Display: &armkubernetesconfiguration.ResourceProviderOperationDisplay{
						Description: to.Ptr("Deletes source control configuration."),
						Operation:   to.Ptr("Microsoft.KubernetesConfiguration/sourceControlConfigurations/delete"),
						Provider:    to.Ptr("Microsoft Kubernetes Configuration"),
						Resource:    to.Ptr("Microsoft.KubernetesConfiguration/sourceControlConfigurations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.KubernetesConfiguration/extensions/read"),
					Display: &armkubernetesconfiguration.ResourceProviderOperationDisplay{
						Description: to.Ptr("Get the specified Extension."),
						Operation:   to.Ptr("Get extension"),
						Provider:    to.Ptr("Microsoft KubernetesConfiguration"),
						Resource:    to.Ptr("extensions"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.KubernetesConfiguration/extensions/write"),
					Display: &armkubernetesconfiguration.ResourceProviderOperationDisplay{
						Description: to.Ptr("Create the Extension specified."),
						Operation:   to.Ptr("Create a Extension"),
						Provider:    to.Ptr("Microsoft KubernetesConfiguration"),
						Resource:    to.Ptr("extensions"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.KubernetesConfiguration/extensions/delete"),
					Display: &armkubernetesconfiguration.ResourceProviderOperationDisplay{
						Description: to.Ptr("Delete the specified Extension."),
						Operation:   to.Ptr("Delete Extension"),
						Provider:    to.Ptr("Microsoft KubernetesConfiguration"),
						Resource:    to.Ptr("extensions"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.KubernetesConfiguration/extensions/operations/read"),
					Display: &armkubernetesconfiguration.ResourceProviderOperationDisplay{
						Description: to.Ptr("Get the Status of the Extension Async Operation."),
						Operation:   to.Ptr("Get Extension Async Operation Status"),
						Provider:    to.Ptr("Microsoft KubernetesConfiguration"),
						Resource:    to.Ptr("extensions"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.KubernetesConfiguration/fluxConfigurations/read"),
					Display: &armkubernetesconfiguration.ResourceProviderOperationDisplay{
						Description: to.Ptr("Get the specified Flux Configuration."),
						Operation:   to.Ptr("Get fluxConfiguration"),
						Provider:    to.Ptr("Microsoft KubernetesConfiguration"),
						Resource:    to.Ptr("fluxConfigurations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.KubernetesConfiguration/fluxConfigurations/write"),
					Display: &armkubernetesconfiguration.ResourceProviderOperationDisplay{
						Description: to.Ptr("Create the Flux Configuration specified."),
						Operation:   to.Ptr("Create a fluxConfiguration"),
						Provider:    to.Ptr("Microsoft KubernetesConfiguration"),
						Resource:    to.Ptr("fluxConfigurations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.KubernetesConfiguration/fluxConfigurations/delete"),
					Display: &armkubernetesconfiguration.ResourceProviderOperationDisplay{
						Description: to.Ptr("Delete the specified Flux Configuration."),
						Operation:   to.Ptr("Delete Flux Configuration"),
						Provider:    to.Ptr("Microsoft KubernetesConfiguration"),
						Resource:    to.Ptr("fluxConfigurations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.KubernetesConfiguration/fluxConfigurations/operations/read"),
					Display: &armkubernetesconfiguration.ResourceProviderOperationDisplay{
						Description: to.Ptr("Get the Status of the Flux Configuration Async Operation."),
						Operation:   to.Ptr("Get Flux Configuration Async Operation Status"),
						Provider:    to.Ptr("Microsoft KubernetesConfiguration"),
						Resource:    to.Ptr("fluxConfigurations"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.KubernetesConfiguration/register/action"),
					Display: &armkubernetesconfiguration.ResourceProviderOperationDisplay{
						Description: to.Ptr("Registers subscription to Microsoft.KubernetesConfiguration resource provider."),
						Operation:   to.Ptr("Microsoft.KubernetesConfiguration/register/action"),
						Provider:    to.Ptr("Microsoft Kubernetes Configuration"),
						Resource:    to.Ptr("Register"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.KubernetesConfiguration/extensionTypes/read"),
					Display: &armkubernetesconfiguration.ResourceProviderOperationDisplay{
						Description: to.Ptr("Get Kubernetes Configuration Available Extensions"),
						Operation:   to.Ptr("Microsoft.KubernetesConfiguration/extensionTypes/read"),
						Provider:    to.Ptr("Microsoft KubernetesConfiguration"),
						Resource:    to.Ptr("extensionTypes"),
					},
					IsDataAction: to.Ptr(false),
					Origin:       to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceProviderOperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceProviderOperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
