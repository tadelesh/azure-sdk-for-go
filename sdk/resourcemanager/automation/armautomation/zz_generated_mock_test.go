//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armautomation

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestPrivateEndpointConnections_ListByAutomationAccount(t *testing.T) {
	// From example Gets private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListByAutomationAccount(ctx,
		"rg1",
		"ddb1",
		&PrivateEndpointConnectionsListByAutomationAccountOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example Gets private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"rg1",
		"ddb1",
		"privateEndpointConnectionName",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example Approve or reject a private endpoint connection with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"ddb1",
		"privateEndpointConnectionName",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionStateProperty{
					Description: to.StringPtr("Approved by johndoe@contoso.com"),
					Status:      to.StringPtr("Approved"),
				},
			},
		},
		&PrivateEndpointConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example Deletes a private endpoint connection with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"ddb1",
		"privateEndpointConnectionName",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_Automation(t *testing.T) {
	// From example Gets private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Automation(ctx,
		"rg1",
		"ddb1",
		&PrivateLinkResourcesAutomationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPython2Package_Delete(t *testing.T) {
	// From example Delete a python 2 package
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPython2PackageClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		&Python2PackageDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPython2Package_Get(t *testing.T) {
	// From example Get a python 2 package
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPython2PackageClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		&Python2PackageGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Module.ID == nil {
		t.Fatal("Module.ID should not be nil!")
	}
}

func TestPython2Package_CreateOrUpdate(t *testing.T) {
	// From example Create or update a python 2 package
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPython2PackageClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		PythonPackageCreateParameters{
			Properties: &PythonPackageCreateProperties{
				ContentLink: &ContentLink{
					ContentHash: &ContentHash{
						Algorithm: to.StringPtr("sha265"),
						Value:     to.StringPtr("07E108A962B81DD9C9BAA89BB47C0F6EE52B29E83758B07795E408D258B2B87A"),
					},
					URI:     to.StringPtr("https://teststorage.blob.core.windows.net/dsccomposite/OmsCompositeResources.zip"),
					Version: to.StringPtr("1.0.0.0"),
				},
			},
			Tags: map[string]*string{},
		},
		&Python2PackageCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Module.ID == nil {
		t.Fatal("Module.ID should not be nil!")
	}
}

func TestPython2Package_Update(t *testing.T) {
	// From example Update a module
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPython2PackageClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"MyAutomationAccount",
		"MyPython2Package",
		PythonPackageUpdateParameters{
			Tags: map[string]*string{},
		},
		&Python2PackageUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Module.ID == nil {
		t.Fatal("Module.ID should not be nil!")
	}
}

func TestPython2Package_ListByAutomationAccount(t *testing.T) {
	// From example List python 2 packages by automation account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPython2PackageClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&Python2PackageListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Module.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Module.ID should not be nil!")
			}
		}
	}
}

func TestAgentRegistrationInformation_Get(t *testing.T) {
	// From example Get the agent registration information
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAgentRegistrationInformationClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount18",
		&AgentRegistrationInformationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AgentRegistration.ID == nil {
		t.Fatal("AgentRegistration.ID should not be nil!")
	}
}

func TestAgentRegistrationInformation_RegenerateKey(t *testing.T) {
	// From example Regenerate registration key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAgentRegistrationInformationClient(con,
		"subid")
	res, err := client.RegenerateKey(ctx,
		"rg",
		"myAutomationAccount18",
		AgentRegistrationRegenerateKeyParameter{
			KeyName: AgentRegistrationKeyNamePrimary.ToPtr(),
		},
		&AgentRegistrationInformationRegenerateKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AgentRegistration.ID == nil {
		t.Fatal("AgentRegistration.ID should not be nil!")
	}
}

func TestDscNode_Delete(t *testing.T) {
	// From example Delete a DSC Node
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscNodeClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount9",
		"e1243a76-a9bd-432f-bde3-ad8f317ee786",
		&DscNodeDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDscNode_Get(t *testing.T) {
	// From example Get a node
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscNodeClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"nodeId",
		&DscNodeGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DscNode.ID == nil {
		t.Fatal("DscNode.ID should not be nil!")
	}
}

func TestDscNode_Update(t *testing.T) {
	// From example Update a node
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscNodeClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount33",
		"nodeId",
		DscNodeUpdateParameters{
			NodeID: to.StringPtr("nodeId"),
			Properties: &DscNodeUpdateParametersProperties{
				NodeConfiguration: &DscNodeConfigurationAssociationProperty{
					Name: to.StringPtr("SetupServer.localhost"),
				},
			},
		},
		&DscNodeUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DscNode.ID == nil {
		t.Fatal("DscNode.ID should not be nil!")
	}
}

func TestDscNode_ListByAutomationAccount(t *testing.T) {
	// From example List DSC nodes by Automation Account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscNodeClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscNodeListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscNode.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscNode.ID should not be nil!")
			}
		}
	}

	// From example List Paged DSC nodes by Automation Account where Node Configurations are not assigned filter
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscNodeListByAutomationAccountOptions{Filter: to.StringPtr("properties/nodeConfiguration/name eq ''"),
			Skip:        to.Int32Ptr(0),
			Top:         to.Int32Ptr(20),
			Inlinecount: to.StringPtr("allpages"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscNode.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscNode.ID should not be nil!")
			}
		}
	}

	// From example List Paged DSC nodes by Automation Account with Node Configuration Custom filter
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscNodeListByAutomationAccountOptions{Filter: to.StringPtr("contains(properties/nodeConfiguration/name,'SetupServer.localhost,SetupClient.localhost,$$Not$$Configured$$')"),
			Skip:        to.Int32Ptr(0),
			Top:         to.Int32Ptr(4),
			Inlinecount: to.StringPtr("allpages"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscNode.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscNode.ID should not be nil!")
			}
		}
	}

	// From example List Paged DSC nodes by Automation Account with name filter
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscNodeListByAutomationAccountOptions{Filter: to.StringPtr("contains('DSCCOMP',name)"),
			Skip:        to.Int32Ptr(0),
			Top:         to.Int32Ptr(6),
			Inlinecount: to.StringPtr("allpages"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscNode.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscNode.ID should not be nil!")
			}
		}
	}

	// From example List Paged DSC nodes by Automation Account with no filters
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscNodeListByAutomationAccountOptions{Skip: to.Int32Ptr(0),
			Top:         to.Int32Ptr(2),
			Inlinecount: to.StringPtr("allpages"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscNode.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscNode.ID should not be nil!")
			}
		}
	}

	// From example List Paged DSC nodes by Automation Account with node status filter
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscNodeListByAutomationAccountOptions{Filter: to.StringPtr("contains(properties/status,'Compliant,NotCompliant')"),
			Skip:        to.Int32Ptr(0),
			Top:         to.Int32Ptr(4),
			Inlinecount: to.StringPtr("allpages"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscNode.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscNode.ID should not be nil!")
			}
		}
	}

	// From example List Paged DSC nodes by Automation Account with version filter
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscNodeListByAutomationAccountOptions{Filter: to.StringPtr("properties/extensionHandler/any(eh: eh/version le '2.70')"),
			Skip:        to.Int32Ptr(0),
			Top:         to.Int32Ptr(4),
			Inlinecount: to.StringPtr("allpages"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscNode.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscNode.ID should not be nil!")
			}
		}
	}

	// From example List Paged DSC nodes with filters separated by 'and'
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscNodeListByAutomationAccountOptions{Filter: to.StringPtr("properties/extensionHandler/any(eh: eh/version gt '2.70') and contains(name,'sql') and contains(properties/nodeConfiguration/name,'$$Not$$Configured$$')"),
			Skip:        to.Int32Ptr(0),
			Top:         to.Int32Ptr(10),
			Inlinecount: to.StringPtr("allpages"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscNode.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscNode.ID should not be nil!")
			}
		}
	}
}

func TestNodeReports_ListByNode(t *testing.T) {
	// From example List DSC reports by node id.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNodeReportsClient(con,
		"subid")
	pager := client.ListByNode("rg",
		"myAutomationAccount33",
		"nodeId",
		&NodeReportsListByNodeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscNodeReport.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscNodeReport.ID should not be nil!")
			}
		}
	}

	// From example List Paged DSC reports by node id.
	pager = client.ListByNode("rg",
		"myAutomationAccount33",
		"nodeId",
		&NodeReportsListByNodeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscNodeReport.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscNodeReport.ID should not be nil!")
			}
		}
	}
}

func TestNodeReports_Get(t *testing.T) {
	// From example Get Dsc node report data by node id and report id.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNodeReportsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"nodeId",
		"903a5ead-140c-11e7-a943-000d3a6140c9",
		&NodeReportsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DscNodeReport.ID == nil {
		t.Fatal("DscNodeReport.ID should not be nil!")
	}
}

func TestNodeReports_GetContent(t *testing.T) {
	// From example Get content of node
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNodeReportsClient(con,
		"subid")
	_, err := client.GetContent(ctx,
		"rg",
		"myAutomationAccount33",
		"nodeId",
		"reportId",
		&NodeReportsGetContentOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDscNodeConfiguration_Delete(t *testing.T) {
	// From example Delete a DSC node configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscNodeConfigurationClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount20",
		"configName.nodeConfigName",
		&DscNodeConfigurationDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDscNodeConfiguration_Get(t *testing.T) {
	// From example Get a DSC node configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscNodeConfigurationClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"SetupServer.localhost",
		&DscNodeConfigurationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DscNodeConfiguration.ID == nil {
		t.Fatal("DscNodeConfiguration.ID should not be nil!")
	}
}

func TestDscNodeConfiguration_CreateOrUpdate(t *testing.T) {
	// From example Create node configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscNodeConfigurationClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount20",
		"configName.nodeConfigName",
		DscNodeConfigurationCreateOrUpdateParameters{
			Name: to.StringPtr("configName.nodeConfigName"),
			Properties: &DscNodeConfigurationCreateOrUpdateParametersProperties{
				Configuration: &DscConfigurationAssociationProperty{
					Name: to.StringPtr("configName"),
				},
				IncrementNodeConfigurationBuild: to.BoolPtr(true),
				Source: &ContentSource{
					Type: ContentSourceTypeEmbeddedContent.ToPtr(),
					Hash: &ContentHash{
						Algorithm: to.StringPtr("sha256"),
						Value:     to.StringPtr("6DE256A57F01BFA29B88696D5E77A383D6E61484C7686E8DB955FA10ACE9FFE5"),
					},
					Value:   to.StringPtr("\r\ninstance of MSFT_RoleResource as $MSFT_RoleResource1ref\r\n{\r\nResourceID = \"[WindowsFeature]IIS\";\r\n Ensure = \"Present\";\r\n SourceInfo = \"::3::32::WindowsFeature\";\r\n Name = \"Web-Server\";\r\n ModuleName = \"PsDesiredStateConfiguration\";\r\n\r\nModuleVersion = \"1.0\";\r\r\n ConfigurationName = \"configName\";\r\r\n};\r\ninstance of OMI_ConfigurationDocument\r\n\r\r\n                    {\r\n Version=\"2.0.0\";\r\n \r\r\n                        MinimumCompatibleVersion = \"1.0.0\";\r\n \r\r\n                        CompatibleVersionAdditionalProperties= {\"Omi_BaseResource:ConfigurationName\"};\r\n \r\r\n                        Author=\"weijiel\";\r\n \r\r\n                        GenerationDate=\"03/30/2017 13:40:25\";\r\n \r\r\n                        GenerationHost=\"TEST-BACKEND\";\r\n \r\r\n                        Name=\"configName\";\r\n\r\r\n                    };\r\n"),
					Version: to.StringPtr("1.0"),
				},
			},
		},
		&DscNodeConfigurationBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DscNodeConfiguration.ID == nil {
		t.Fatal("DscNodeConfiguration.ID should not be nil!")
	}
}

func TestDscNodeConfiguration_ListByAutomationAccount(t *testing.T) {
	// From example List DSC node configurations by Automation Account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscNodeConfigurationClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscNodeConfigurationListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscNodeConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscNodeConfiguration.ID should not be nil!")
			}
		}
	}

	// From example List Paged DSC node configurations by Automation Account with name filter
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscNodeConfigurationListByAutomationAccountOptions{Filter: to.StringPtr("contains('.localhost',name)"),
			Skip:        to.Int32Ptr(0),
			Top:         to.Int32Ptr(2),
			Inlinecount: to.StringPtr("allpages"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscNodeConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscNodeConfiguration.ID should not be nil!")
			}
		}
	}

	// From example List Paged DSC node configurations by Automation Account with no filter
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscNodeConfigurationListByAutomationAccountOptions{Skip: to.Int32Ptr(0),
			Top:         to.Int32Ptr(4),
			Inlinecount: to.StringPtr("allpages"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscNodeConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscNodeConfiguration.ID should not be nil!")
			}
		}
	}
}

func TestDscCompilationJob_Create(t *testing.T) {
	// From example Create or update a DSC Compilation job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscCompilationJobClient(con,
		"subid")
	poller, err := client.BeginCreate(ctx,
		"rg",
		"myAutomationAccount33",
		"TestCompilationJob",
		DscCompilationJobCreateParameters{
			Properties: &DscCompilationJobCreateProperties{
				Configuration: &DscConfigurationAssociationProperty{
					Name: to.StringPtr("SetupServer"),
				},
			},
		},
		&DscCompilationJobBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DscCompilationJob.ID == nil {
		t.Fatal("DscCompilationJob.ID should not be nil!")
	}
}

func TestDscCompilationJob_Get(t *testing.T) {
	// From example Get a DSC Compilation job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscCompilationJobClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"TestCompilationJob",
		&DscCompilationJobGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DscCompilationJob.ID == nil {
		t.Fatal("DscCompilationJob.ID should not be nil!")
	}
}

func TestDscCompilationJob_ListByAutomationAccount(t *testing.T) {
	// From example List DSC Compilation job in Automation Account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscCompilationJobClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscCompilationJobListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscCompilationJob.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscCompilationJob.ID should not be nil!")
			}
		}
	}
}

func TestDscCompilationJob_GetStream(t *testing.T) {
	// From example Get a DSC Compilation job stream by job stream id
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscCompilationJobClient(con,
		"subid")
	res, err := client.GetStream(ctx,
		"rg",
		"myAutomationAccount33",
		"836d4e06-2d88-46b4-8500-7febd4906838",
		"836d4e06-2d88-46b4-8500-7febd4906838_00636481062421684835_00000000000000000008",
		&DscCompilationJobGetStreamOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobStream.ID == nil {
		t.Fatal("JobStream.ID should not be nil!")
	}
}

func TestDscCompilationJobStream_ListByJob(t *testing.T) {
	// From example List DSC Compilation job streams
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscCompilationJobStreamClient(con,
		"subid")
	_, err := client.ListByJob(ctx,
		"rg",
		"myAutomationAccount33",
		"836d4e06-2d88-46b4-8500-7febd4906838",
		&DscCompilationJobStreamListByJobOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNodeCountInformation_Get(t *testing.T) {
	// From example Get node's node configuration counts
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNodeCountInformationClient(con,
		"subid")
	_, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		CountTypeNodeconfiguration,
		&NodeCountInformationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Get node's status counts
	_, err = client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		CountTypeStatus,
		&NodeCountInformationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSourceControl_CreateOrUpdate(t *testing.T) {
	// From example Create or update a source control
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSourceControlClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"sampleAccount9",
		"sampleSourceControl",
		SourceControlCreateOrUpdateParameters{
			Properties: &SourceControlCreateOrUpdateProperties{
				Description:    to.StringPtr("my description"),
				AutoSync:       to.BoolPtr(true),
				Branch:         to.StringPtr("master"),
				FolderPath:     to.StringPtr("/folderOne/folderTwo"),
				PublishRunbook: to.BoolPtr(true),
				RepoURL:        to.StringPtr("https://sampleUser.visualstudio.com/myProject/_git/myRepository"),
				SecurityToken: &SourceControlSecurityTokenProperties{
					AccessToken: to.StringPtr("3a326f7a0dcd343ea58fee21f2fd5fb4c1234567"),
					TokenType:   TokenTypePersonalAccessToken.ToPtr(),
				},
				SourceType: SourceTypeVsoGit.ToPtr(),
			},
		},
		&SourceControlCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SourceControl.ID == nil {
		t.Fatal("SourceControl.ID should not be nil!")
	}
}

func TestSourceControl_Update(t *testing.T) {
	// From example Update a source control
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSourceControlClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"sampleAccount9",
		"sampleSourceControl",
		SourceControlUpdateParameters{
			Properties: &SourceControlUpdateProperties{
				Description:    to.StringPtr("my description"),
				AutoSync:       to.BoolPtr(true),
				Branch:         to.StringPtr("master"),
				FolderPath:     to.StringPtr("/folderOne/folderTwo"),
				PublishRunbook: to.BoolPtr(true),
				SecurityToken: &SourceControlSecurityTokenProperties{
					AccessToken: to.StringPtr("3a326f7a0dcd343ea58fee21f2fd5fb4c1234567"),
					TokenType:   TokenTypePersonalAccessToken.ToPtr(),
				},
			},
		},
		&SourceControlUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SourceControl.ID == nil {
		t.Fatal("SourceControl.ID should not be nil!")
	}
}

func TestSourceControl_Delete(t *testing.T) {
	// From example Delete a source control
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSourceControlClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"sampleAccount9",
		"sampleSourceControl",
		&SourceControlDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSourceControl_Get(t *testing.T) {
	// From example Get a source control
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSourceControlClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"sampleAccount9",
		"sampleSourceControl",
		&SourceControlGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SourceControl.ID == nil {
		t.Fatal("SourceControl.ID should not be nil!")
	}
}

func TestSourceControl_ListByAutomationAccount(t *testing.T) {
	// From example List sourceControls
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSourceControlClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"sampleAccount9",
		&SourceControlListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SourceControl.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SourceControl.ID should not be nil!")
			}
		}
	}
}

func TestSourceControlSyncJob_Create(t *testing.T) {
	// From example Create or update a source control sync job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSourceControlSyncJobClient(con,
		"subid")
	res, err := client.Create(ctx,
		"rg",
		"myAutomationAccount33",
		"MySourceControl",
		"ce6fe3e3-9db3-4096-a6b4-82bfb4c10a9a",
		SourceControlSyncJobCreateParameters{
			Properties: &SourceControlSyncJobCreateProperties{
				CommitID: to.StringPtr("9de0980bfb45026a3d97a1b0522d98a9f604226e"),
			},
		},
		&SourceControlSyncJobCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SourceControlSyncJob.ID == nil {
		t.Fatal("SourceControlSyncJob.ID should not be nil!")
	}
}

func TestSourceControlSyncJob_Get(t *testing.T) {
	// From example Get a source control sync job by job id
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSourceControlSyncJobClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"MySourceControl",
		"ce6fe3e3-9db3-4096-a6b4-82bfb4c10a9a",
		&SourceControlSyncJobGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SourceControlSyncJobByID.ID == nil {
		t.Fatal("SourceControlSyncJobByID.ID should not be nil!")
	}
}

func TestSourceControlSyncJob_ListByAutomationAccount(t *testing.T) {
	// From example Get a list of source control sync jobs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSourceControlSyncJobClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		"MySourceControl",
		&SourceControlSyncJobListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SourceControlSyncJob.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SourceControlSyncJob.ID should not be nil!")
			}
		}
	}
}

func TestSourceControlSyncJobStreams_ListBySyncJob(t *testing.T) {
	// From example Get a list of sync job streams identified by sync job id
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSourceControlSyncJobStreamsClient(con,
		"subid")
	pager := client.ListBySyncJob("rg",
		"myAutomationAccount33",
		"MySourceControl",
		"ce6fe3e3-9db3-4096-a6b4-82bfb4c10a2b",
		&SourceControlSyncJobStreamsListBySyncJobOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SourceControlSyncJobStream.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SourceControlSyncJobStream.ID should not be nil!")
			}
		}
	}
}

func TestSourceControlSyncJobStreams_Get(t *testing.T) {
	// From example Get a sync job stream identified by sync job stream id.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSourceControlSyncJobStreamsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"MySourceControl",
		"ce6fe3e3-9db3-4096-a6b4-82bfb4c10a2b",
		"b86c5c31-e9fd-4734-8764-ddd6c101e706_00636596855139029522_00000000000000000007",
		&SourceControlSyncJobStreamsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SourceControlSyncJobStreamByID.ID == nil {
		t.Fatal("SourceControlSyncJobStreamByID.ID should not be nil!")
	}
}

func TestAutomationAccount_Update(t *testing.T) {
	// From example Update an automation account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAutomationAccountClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount9",
		AutomationAccountUpdateParameters{
			Name:     to.StringPtr("myAutomationAccount9"),
			Location: to.StringPtr("East US 2"),
			Properties: &AutomationAccountUpdateProperties{
				SKU: &SKU{
					Name: SKUNameEnumFree.ToPtr(),
				},
			},
		},
		&AutomationAccountUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AutomationAccount.ID == nil {
		t.Fatal("AutomationAccount.ID should not be nil!")
	}
}

func TestAutomationAccount_CreateOrUpdate(t *testing.T) {
	// From example Create or update automation account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAutomationAccountClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount9",
		AutomationAccountCreateOrUpdateParameters{
			Name:     to.StringPtr("myAutomationAccount9"),
			Location: to.StringPtr("East US 2"),
			Properties: &AutomationAccountCreateOrUpdateProperties{
				SKU: &SKU{
					Name: SKUNameEnumFree.ToPtr(),
				},
			},
		},
		&AutomationAccountCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AutomationAccount.ID == nil {
		t.Fatal("AutomationAccount.ID should not be nil!")
	}
}

func TestAutomationAccount_Delete(t *testing.T) {
	// From example Delete automation account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAutomationAccountClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount9",
		&AutomationAccountDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAutomationAccount_Get(t *testing.T) {
	// From example Get automation account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAutomationAccountClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount9",
		&AutomationAccountGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AutomationAccount.ID == nil {
		t.Fatal("AutomationAccount.ID should not be nil!")
	}
}

func TestAutomationAccount_ListByResourceGroup(t *testing.T) {
	// From example List automation accounts by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAutomationAccountClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg",
		&AutomationAccountListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AutomationAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AutomationAccount.ID should not be nil!")
			}
		}
	}
}

func TestAutomationAccount_List(t *testing.T) {
	// From example List automation accounts by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAutomationAccountClient(con,
		"subid")
	pager := client.List(&AutomationAccountListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AutomationAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AutomationAccount.ID should not be nil!")
			}
		}
	}
}

func TestStatistics_ListByAutomationAccount(t *testing.T) {
	// From example Get statistics of an automation account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStatisticsClient(con,
		"subid")
	_, err := client.ListByAutomationAccount(ctx,
		"rg",
		"myAutomationAccount11",
		&StatisticsListByAutomationAccountOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestUsages_ListByAutomationAccount(t *testing.T) {
	// From example Get usages of an automation account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsagesClient(con,
		"subid")
	_, err := client.ListByAutomationAccount(ctx,
		"rg",
		"myAutomationAccount11",
		&UsagesListByAutomationAccountOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestKeys_ListByAutomationAccount(t *testing.T) {
	// From example Get lists of an automation account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKeysClient(con,
		"subid")
	_, err := client.ListByAutomationAccount(ctx,
		"rg",
		"MyAutomationAccount",
		&KeysListByAutomationAccountOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCertificate_Delete(t *testing.T) {
	// From example Delete a certificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount33",
		"testCert",
		&CertificateDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCertificate_Get(t *testing.T) {
	// From example Get a certificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"testCert",
		&CertificateGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Certificate.ID == nil {
		t.Fatal("Certificate.ID should not be nil!")
	}
}

func TestCertificate_CreateOrUpdate(t *testing.T) {
	// From example Create or update a certificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount18",
		"testCert",
		CertificateCreateOrUpdateParameters{
			Name: to.StringPtr("testCert"),
			Properties: &CertificateCreateOrUpdateProperties{
				Description:  to.StringPtr("Sample Cert"),
				Base64Value:  to.StringPtr("base 64 value of cert"),
				IsExportable: to.BoolPtr(false),
				Thumbprint:   to.StringPtr("thumbprint of cert"),
			},
		},
		&CertificateCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Certificate.ID == nil {
		t.Fatal("Certificate.ID should not be nil!")
	}
}

func TestCertificate_Update(t *testing.T) {
	// From example Update a certificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount33",
		"testCert",
		CertificateUpdateParameters{
			Name: to.StringPtr("testCert"),
			Properties: &CertificateUpdateProperties{
				Description: to.StringPtr("sample certificate. Description updated"),
			},
		},
		&CertificateUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Certificate.ID == nil {
		t.Fatal("Certificate.ID should not be nil!")
	}
}

func TestCertificate_ListByAutomationAccount(t *testing.T) {
	// From example List certificates
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&CertificateListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Certificate.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Certificate.ID should not be nil!")
			}
		}
	}
}

func TestConnection_Delete(t *testing.T) {
	// From example Delete an existing connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount28",
		"myConnection",
		&ConnectionDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestConnection_Get(t *testing.T) {
	// From example Get a connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount28",
		"myConnection",
		&ConnectionGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Connection.ID == nil {
		t.Fatal("Connection.ID should not be nil!")
	}
}

func TestConnection_CreateOrUpdate(t *testing.T) {
	// From example Create or update connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount28",
		"mysConnection",
		ConnectionCreateOrUpdateParameters{
			Name: to.StringPtr("mysConnection"),
			Properties: &ConnectionCreateOrUpdateProperties{
				Description: to.StringPtr("my description goes here"),
				ConnectionType: &ConnectionTypeAssociationProperty{
					Name: to.StringPtr("Azure"),
				},
				FieldDefinitionValues: map[string]*string{
					"AutomationCertificateName": to.StringPtr("mysCertificateName"),
					"SubscriptionID":            to.StringPtr("subid"),
				},
			},
		},
		&ConnectionCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Connection.ID == nil {
		t.Fatal("Connection.ID should not be nil!")
	}
}

func TestConnection_Update(t *testing.T) {
	// From example Update a connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount28",
		"myConnection",
		ConnectionUpdateParameters{
			Name: to.StringPtr("myConnection"),
			Properties: &ConnectionUpdateProperties{
				Description: to.StringPtr("my description goes here"),
				FieldDefinitionValues: map[string]*string{
					"AutomationCertificateName": to.StringPtr("myCertificateName"),
					"SubscriptionID":            to.StringPtr("b5e4748c-f69a-467c-8749-e2f9c8cd3009"),
				},
			},
		},
		&ConnectionUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Connection.ID == nil {
		t.Fatal("Connection.ID should not be nil!")
	}
}

func TestConnection_ListByAutomationAccount(t *testing.T) {
	// From example List connections by automation account, first 100
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount28",
		&ConnectionListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Connection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Connection.ID should not be nil!")
			}
		}
	}

	// From example List connections by automation account, next 100
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount28",
		&ConnectionListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Connection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Connection.ID should not be nil!")
			}
		}
	}
}

func TestConnectionType_Delete(t *testing.T) {
	// From example Delete an existing connection type
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionTypeClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount22",
		"myCT",
		&ConnectionTypeDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestConnectionType_Get(t *testing.T) {
	// From example Get connection type
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionTypeClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount22",
		"myCT",
		&ConnectionTypeGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectionType.ID == nil {
		t.Fatal("ConnectionType.ID should not be nil!")
	}
}

func TestConnectionType_CreateOrUpdate(t *testing.T) {
	// From example Create or update connection type
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionTypeClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount22",
		"myCT",
		ConnectionTypeCreateOrUpdateParameters{
			Name: to.StringPtr("myCT"),
			Properties: &ConnectionTypeCreateOrUpdateProperties{
				FieldDefinitions: map[string]*FieldDefinition{
					"myBoolField": &FieldDefinition{
						Type:        to.StringPtr("bool"),
						IsEncrypted: to.BoolPtr(false),
						IsOptional:  to.BoolPtr(false),
					},
					"myStringField": &FieldDefinition{
						Type:        to.StringPtr("string"),
						IsEncrypted: to.BoolPtr(false),
						IsOptional:  to.BoolPtr(false),
					},
					"myStringFieldEncrypted": &FieldDefinition{
						Type:        to.StringPtr("string"),
						IsEncrypted: to.BoolPtr(true),
						IsOptional:  to.BoolPtr(false),
					},
				},
				IsGlobal: to.BoolPtr(false),
			},
		},
		&ConnectionTypeCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectionType.ID == nil {
		t.Fatal("ConnectionType.ID should not be nil!")
	}
}

func TestConnectionType_ListByAutomationAccount(t *testing.T) {
	// From example Get connection types, first 100
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectionTypeClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount25",
		&ConnectionTypeListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ConnectionType.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ConnectionType.ID should not be nil!")
			}
		}
	}

	// From example Get connection types, next 100
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount25",
		&ConnectionTypeListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ConnectionType.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ConnectionType.ID should not be nil!")
			}
		}
	}
}

func TestCredential_Delete(t *testing.T) {
	// From example Delete a credential
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCredentialClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount20",
		"myCredential",
		&CredentialDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCredential_Get(t *testing.T) {
	// From example Get a credential
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCredentialClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount18",
		"myCredential",
		&CredentialGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Credential.ID == nil {
		t.Fatal("Credential.ID should not be nil!")
	}
}

func TestCredential_CreateOrUpdate(t *testing.T) {
	// From example Create a credential
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCredentialClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount18",
		"myCredential",
		CredentialCreateOrUpdateParameters{
			Name: to.StringPtr("myCredential"),
			Properties: &CredentialCreateOrUpdateProperties{
				Description: to.StringPtr("my description goes here"),
				Password:    to.StringPtr("<password>"),
				UserName:    to.StringPtr("mylingaiah"),
			},
		},
		&CredentialCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Credential.ID == nil {
		t.Fatal("Credential.ID should not be nil!")
	}
}

func TestCredential_Update(t *testing.T) {
	// From example Update a credential
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCredentialClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount18",
		"myCredential",
		CredentialUpdateParameters{
			Name: to.StringPtr("myCredential"),
			Properties: &CredentialUpdateProperties{
				Description: to.StringPtr("my description goes here"),
				Password:    to.StringPtr("<password>"),
				UserName:    to.StringPtr("mylingaiah"),
			},
		},
		&CredentialUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Credential.ID == nil {
		t.Fatal("Credential.ID should not be nil!")
	}
}

func TestCredential_ListByAutomationAccount(t *testing.T) {
	// From example List credentials by automation account, first 100
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCredentialClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount20",
		&CredentialListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Credential.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Credential.ID should not be nil!")
			}
		}
	}

	// From example List credentials by automation account, next 100
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount20",
		&CredentialListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Credential.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Credential.ID should not be nil!")
			}
		}
	}
}

func TestHybridRunbookWorkerGroup_Delete(t *testing.T) {
	// From example Delete a hybrid worker group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridRunbookWorkerGroupClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount20",
		"myGroup",
		&HybridRunbookWorkerGroupDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestHybridRunbookWorkerGroup_Get(t *testing.T) {
	// From example Get a hybrid worker group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridRunbookWorkerGroupClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"testaccount",
		"TestHybridGroup",
		&HybridRunbookWorkerGroupGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HybridRunbookWorkerGroup.ID == nil {
		t.Fatal("HybridRunbookWorkerGroup.ID should not be nil!")
	}
}

func TestHybridRunbookWorkerGroup_Create(t *testing.T) {
	// From example Create a hybrid worker group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridRunbookWorkerGroupClient(con,
		"subid")
	res, err := client.Create(ctx,
		"rg",
		"testaccount",
		"TestHybridGroup",
		nil,
		&HybridRunbookWorkerGroupCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HybridRunbookWorkerGroup.ID == nil {
		t.Fatal("HybridRunbookWorkerGroup.ID should not be nil!")
	}
}

func TestHybridRunbookWorkerGroup_Update(t *testing.T) {
	// From example Update hybrid worker group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridRunbookWorkerGroupClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"testaccount",
		"TestHybridGroup",
		HybridRunbookWorkerGroupCreateOrUpdateParameters{
			Credential: &RunAsCredentialAssociationProperty{
				Name: to.StringPtr("myRunAsCredentialName"),
			},
		},
		&HybridRunbookWorkerGroupUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HybridRunbookWorkerGroup.ID == nil {
		t.Fatal("HybridRunbookWorkerGroup.ID should not be nil!")
	}
}

func TestHybridRunbookWorkerGroup_ListByAutomationAccount(t *testing.T) {
	// From example List hybrid worker groups by Automation Account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridRunbookWorkerGroupClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"testaccount",
		&HybridRunbookWorkerGroupListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("HybridRunbookWorkerGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("HybridRunbookWorkerGroup.ID should not be nil!")
			}
		}
	}
}

func TestJobSchedule_Delete(t *testing.T) {
	// From example Delete a job schedule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobScheduleClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"ContoseAutomationAccount",
		"0fa462ba-3aa2-4138-83ca-9ebc3bc55cdc",
		&JobScheduleDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobSchedule_Get(t *testing.T) {
	// From example Get a job schedule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobScheduleClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"ContoseAutomationAccount",
		"0fa462ba-3aa2-4138-83ca-9ebc3bc55cdc",
		&JobScheduleGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobSchedule.ID == nil {
		t.Fatal("JobSchedule.ID should not be nil!")
	}
}

func TestJobSchedule_Create(t *testing.T) {
	// From example Create a job schedule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobScheduleClient(con,
		"subid")
	res, err := client.Create(ctx,
		"rg",
		"ContoseAutomationAccount",
		"0fa462ba-3aa2-4138-83ca-9ebc3bc55cdc",
		JobScheduleCreateParameters{
			Properties: &JobScheduleCreateProperties{
				Parameters: map[string]*string{
					"jobscheduletag01": to.StringPtr("jobschedulevalue01"),
					"jobscheduletag02": to.StringPtr("jobschedulevalue02"),
				},
				Runbook: &RunbookAssociationProperty{
					Name: to.StringPtr("TestRunbook"),
				},
				Schedule: &ScheduleAssociationProperty{
					Name: to.StringPtr("ScheduleNameGoesHere332204b5-debe-4348-a5c7-6357457189f2"),
				},
			},
		},
		&JobScheduleCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobSchedule.ID == nil {
		t.Fatal("JobSchedule.ID should not be nil!")
	}
}

func TestJobSchedule_ListByAutomationAccount(t *testing.T) {
	// From example List all job schedules by automation account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobScheduleClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"ContoseAutomationAccount",
		&JobScheduleListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobSchedule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobSchedule.ID should not be nil!")
			}
		}
	}
}

func TestLinkedWorkspace_Get(t *testing.T) {
	// From example Get the linked workspace of an automation account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedWorkspaceClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"ContosoAutomationAccount",
		&LinkedWorkspaceGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LinkedWorkspace.ID == nil {
		t.Fatal("LinkedWorkspace.ID should not be nil!")
	}
}

func TestActivity_Get(t *testing.T) {
	// From example Get Activity in a module
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActivityClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		"Add-AzureRmAccount",
		&ActivityGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Activity.ID == nil {
		t.Fatal("Activity.ID should not be nil!")
	}
}

func TestActivity_ListByModule(t *testing.T) {
	// From example List activities by a module
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActivityClient(con,
		"subid")
	pager := client.ListByModule("rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		&ActivityListByModuleOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Activity.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Activity.ID should not be nil!")
			}
		}
	}
}

func TestModule_Delete(t *testing.T) {
	// From example Delete a module
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewModuleClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		&ModuleDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestModule_Get(t *testing.T) {
	// From example Get a module
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewModuleClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		&ModuleGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Module.ID == nil {
		t.Fatal("Module.ID should not be nil!")
	}
}

func TestModule_CreateOrUpdate(t *testing.T) {
	// From example Create or update a module
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewModuleClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		ModuleCreateOrUpdateParameters{
			Properties: &ModuleCreateOrUpdateProperties{
				ContentLink: &ContentLink{
					ContentHash: &ContentHash{
						Algorithm: to.StringPtr("sha265"),
						Value:     to.StringPtr("07E108A962B81DD9C9BAA89BB47C0F6EE52B29E83758B07795E408D258B2B87A"),
					},
					URI:     to.StringPtr("https://teststorage.blob.core.windows.net/dsccomposite/OmsCompositeResources.zip"),
					Version: to.StringPtr("1.0.0.0"),
				},
			},
		},
		&ModuleCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Module.ID == nil {
		t.Fatal("Module.ID should not be nil!")
	}
}

func TestModule_Update(t *testing.T) {
	// From example Update a module
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewModuleClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"MyAutomationAccount",
		"MyModule",
		ModuleUpdateParameters{
			Properties: &ModuleUpdateProperties{
				ContentLink: &ContentLink{
					ContentHash: &ContentHash{
						Algorithm: to.StringPtr("sha265"),
						Value:     to.StringPtr("07E108A962B81DD9C9BAA89BB47C0F6EE52B29E83758B07795E408D258B2B87A"),
					},
					URI:     to.StringPtr("https://teststorage.blob.core.windows.net/mycontainer/MyModule.zip"),
					Version: to.StringPtr("1.0.0.0"),
				},
			},
		},
		&ModuleUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Module.ID == nil {
		t.Fatal("Module.ID should not be nil!")
	}
}

func TestModule_ListByAutomationAccount(t *testing.T) {
	// From example List modules by automation account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewModuleClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&ModuleListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Module.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Module.ID should not be nil!")
			}
		}
	}
}

func TestObjectDataTypes_ListFieldsByModuleAndType(t *testing.T) {
	// From example Get a list of fields of a given type
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewObjectDataTypesClient(con,
		"subid")
	_, err := client.ListFieldsByModuleAndType(ctx,
		"rg",
		"MyAutomationAccount",
		"MyModule",
		"MyCustomType",
		&ObjectDataTypesListFieldsByModuleAndTypeOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestObjectDataTypes_ListFieldsByType(t *testing.T) {
	// From example Get a list of fields of a given type across all accessible modules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewObjectDataTypesClient(con,
		"subid")
	_, err := client.ListFieldsByType(ctx,
		"rg",
		"MyAutomationAccount",
		"MyCustomType",
		&ObjectDataTypesListFieldsByTypeOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestFields_ListByType(t *testing.T) {
	// From example Get a list of fields of a given type
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFieldsClient(con,
		"subid")
	_, err := client.ListByType(ctx,
		"rg",
		"MyAutomationAccount",
		"MyModule",
		"MyCustomType",
		&FieldsListByTypeOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSchedule_CreateOrUpdate(t *testing.T) {
	// From example Create or update a schedule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScheduleClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount33",
		"mySchedule",
		ScheduleCreateOrUpdateParameters{
			Name: to.StringPtr("mySchedule"),
			Properties: &ScheduleCreateOrUpdateProperties{
				Description:      to.StringPtr("my description of schedule goes here"),
				AdvancedSchedule: &AdvancedSchedule{},
				ExpiryTime:       to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:57.2494819Z"); return t }()),
				Frequency:        ScheduleFrequencyHour.ToPtr(),
				Interval:         1,
				StartTime:        to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:57.2494819Z"); return t }()),
			},
		},
		&ScheduleCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestSchedule_Update(t *testing.T) {
	// From example Update a schedule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScheduleClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount33",
		"mySchedule",
		ScheduleUpdateParameters{
			Name: to.StringPtr("mySchedule"),
			Properties: &ScheduleUpdateProperties{
				Description: to.StringPtr("my updated description of schedule goes here"),
				IsEnabled:   to.BoolPtr(false),
			},
		},
		&ScheduleUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestSchedule_Get(t *testing.T) {
	// From example Get a schedule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScheduleClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"mySchedule",
		&ScheduleGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Schedule.ID == nil {
		t.Fatal("Schedule.ID should not be nil!")
	}
}

func TestSchedule_Delete(t *testing.T) {
	// From example Delete schedule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScheduleClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount33",
		"mySchedule",
		&ScheduleDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSchedule_ListByAutomationAccount(t *testing.T) {
	// From example List schedules by automation account, first 100
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScheduleClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&ScheduleListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Schedule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Schedule.ID should not be nil!")
			}
		}
	}

	// From example List schedules by automation account, next 100
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&ScheduleListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Schedule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Schedule.ID should not be nil!")
			}
		}
	}
}

func TestVariable_CreateOrUpdate(t *testing.T) {
	// From example Create or update a variable
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVariableClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"sampleAccount9",
		"sampleVariable",
		VariableCreateOrUpdateParameters{
			Name: to.StringPtr("sampleVariable"),
			Properties: &VariableCreateOrUpdateProperties{
				Description: to.StringPtr("my description"),
				IsEncrypted: to.BoolPtr(false),
				Value:       to.StringPtr("\"ComputerName.domain.com\""),
			},
		},
		&VariableCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Variable.ID == nil {
		t.Fatal("Variable.ID should not be nil!")
	}
}

func TestVariable_Update(t *testing.T) {
	// From example Update a variable
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVariableClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"sampleAccount9",
		"sampleVariable",
		VariableUpdateParameters{
			Name: to.StringPtr("sampleVariable"),
			Properties: &VariableUpdateProperties{
				Value: to.StringPtr("\"ComputerName3.domain.com\""),
			},
		},
		&VariableUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Variable.ID == nil {
		t.Fatal("Variable.ID should not be nil!")
	}
}

func TestVariable_Delete(t *testing.T) {
	// From example Delete a variable
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVariableClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"sampleAccount9",
		"sampleVariable",
		&VariableDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVariable_Get(t *testing.T) {
	// From example Get a variable
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVariableClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"sampleAccount9",
		"sampleVariable",
		&VariableGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Variable.ID == nil {
		t.Fatal("Variable.ID should not be nil!")
	}
}

func TestVariable_ListByAutomationAccount(t *testing.T) {
	// From example List variables, First 100
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVariableClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"sampleAccount9",
		&VariableListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Variable.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Variable.ID should not be nil!")
			}
		}
	}

	// From example List variables, Next 100
	pager = client.ListByAutomationAccount("rg",
		"sampleAccount9",
		&VariableListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Variable.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Variable.ID should not be nil!")
			}
		}
	}
}

func TestWatcher_CreateOrUpdate(t *testing.T) {
	// From example Create or update watcher
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWatcherClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"MyTestAutomationAccount",
		"MyTestWatcher",
		Watcher{
			Resource: Resource{
				Type: to.StringPtr("null"),
			},
			Etag:     to.StringPtr("null"),
			Location: to.StringPtr("null"),
			Properties: &WatcherProperties{
				Description:                 to.StringPtr("This is a test watcher."),
				ExecutionFrequencyInSeconds: to.Int64Ptr(60),
				LastModifiedBy:              to.StringPtr("null"),
				ScriptName:                  to.StringPtr("MyTestWatcherRunbook"),
				ScriptParameters:            map[string]*string{},
				ScriptRunOn:                 to.StringPtr("MyTestHybridWorkerGroup"),
			},
			Tags: map[string]*string{},
		},
		&WatcherCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Watcher.ID == nil {
		t.Fatal("Watcher.ID should not be nil!")
	}
}

func TestWatcher_Get(t *testing.T) {
	// From example Get watcher
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWatcherClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"MyTestAutomationAccount",
		"MyTestWatcher",
		&WatcherGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Watcher.ID == nil {
		t.Fatal("Watcher.ID should not be nil!")
	}
}

func TestWatcher_Update(t *testing.T) {
	// From example Update watcher
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWatcherClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"MyTestAutomationAccount",
		"MyTestWatcher",
		WatcherUpdateParameters{
			Name: to.StringPtr("MyTestWatcher"),
			Properties: &WatcherUpdateProperties{
				ExecutionFrequencyInSeconds: to.Int64Ptr(600),
			},
		},
		&WatcherUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Watcher.ID == nil {
		t.Fatal("Watcher.ID should not be nil!")
	}
}

func TestWatcher_Delete(t *testing.T) {
	// From example Delete watcher
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWatcherClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"MyTestAutomationAccount",
		"MyTestWatcher",
		&WatcherDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWatcher_Start(t *testing.T) {
	// From example Start Watcher
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWatcherClient(con,
		"subid")
	_, err := client.Start(ctx,
		"rg",
		"MyTestAutomationAccount",
		"MyTestWatcher",
		&WatcherStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWatcher_Stop(t *testing.T) {
	// From example Start Watcher
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWatcherClient(con,
		"subid")
	_, err := client.Stop(ctx,
		"rg",
		"MyTestAutomationAccount",
		"MyTestWatcher",
		&WatcherStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWatcher_ListByAutomationAccount(t *testing.T) {
	// From example List watchers by Automation Account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWatcherClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"MyTestAutomationAccount",
		&WatcherListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Watcher.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Watcher.ID should not be nil!")
			}
		}
	}
}

func TestDscConfiguration_Delete(t *testing.T) {
	// From example Delete DSC Configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscConfigurationClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount33",
		"TemplateBasic",
		&DscConfigurationDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDscConfiguration_Get(t *testing.T) {
	// From example Get a DSC Configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscConfigurationClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"TemplateBasic",
		&DscConfigurationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DscConfiguration.ID == nil {
		t.Fatal("DscConfiguration.ID should not be nil!")
	}
}

func TestDscConfiguration_GetContent(t *testing.T) {
	// From example Get DSC Configuration content
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscConfigurationClient(con,
		"subid")
	_, err := client.GetContent(ctx,
		"rg",
		"myAutomationAccount33",
		"ConfigName",
		&DscConfigurationGetContentOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDscConfiguration_ListByAutomationAccount(t *testing.T) {
	// From example Get DSC Configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscConfigurationClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscConfigurationListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscConfiguration.ID should not be nil!")
			}
		}
	}

	// From example List Paged DSC Configurations with name filter
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscConfigurationListByAutomationAccountOptions{Filter: to.StringPtr("contains(name,'server')"),
			Skip:        to.Int32Ptr(0),
			Top:         to.Int32Ptr(2),
			Inlinecount: to.StringPtr("allpages"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscConfiguration.ID should not be nil!")
			}
		}
	}

	// From example List Paged DSC Configurations with no filter
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&DscConfigurationListByAutomationAccountOptions{Skip: to.Int32Ptr(0),
			Top:         to.Int32Ptr(3),
			Inlinecount: to.StringPtr("allpages"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DscConfiguration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DscConfiguration.ID should not be nil!")
			}
		}
	}
}

func TestDscConfiguration_CreateOrUpdate(t *testing.T) {
	// From example Create or Update Configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscConfigurationClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount18",
		"SetupServer",
		"[object Object]",
		&DscConfigurationCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DscConfiguration.ID == nil {
		t.Fatal("DscConfiguration.ID should not be nil!")
	}
}

func TestDscConfiguration_CreateOrUpdate(t *testing.T) {
	// From example Create or Update Configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscConfigurationClient(con,
		"subid")
	res, err := client.CreateOrUpdateWithDscConfigurationCreateOrUpdateParameters(ctx,
		"rg",
		"myAutomationAccount18",
		"SetupServer",
		DscConfigurationCreateOrUpdateParameters{
			Name:     to.StringPtr("SetupServer"),
			Location: to.StringPtr("East US 2"),
			Properties: &DscConfigurationCreateOrUpdateProperties{
				Description: to.StringPtr("sample configuration"),
				Source: &ContentSource{
					Type: ContentSourceTypeEmbeddedContent.ToPtr(),
					Hash: &ContentHash{
						Algorithm: to.StringPtr("sha256"),
						Value:     to.StringPtr("A9E5DB56BA21513F61E0B3868816FDC6D4DF5131F5617D7FF0D769674BD5072F"),
					},
					Value: to.StringPtr("Configuration SetupServer {\r\n    Node localhost {\r\n                               WindowsFeature IIS {\r\n                               Name = \"Web-Server\";\r\n            Ensure = \"Present\"\r\n        }\r\n    }\r\n}"),
				},
			},
		},
		&DscConfigurationCreateOrUpdateWithDscConfigurationCreateOrUpdateParametersOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DscConfiguration.ID == nil {
		t.Fatal("DscConfiguration.ID should not be nil!")
	}
}

func TestDscConfiguration_Update(t *testing.T) {
	// From example Create or Update Configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscConfigurationClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount18",
		"SetupServer",
		&DscConfigurationUpdateOptions{Parameters: to.StringPtr("[object Object]")})
	if err != nil {
		t.Fatal(err)
	}
	if res.DscConfiguration.ID == nil {
		t.Fatal("DscConfiguration.ID should not be nil!")
	}
}

func TestDscConfiguration_Update(t *testing.T) {
	// From example Create or Update Configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDscConfigurationClient(con,
		"subid")
	res, err := client.UpdateWithDscConfigurationUpdateParameters(ctx,
		"rg",
		"myAutomationAccount18",
		"SetupServer",
		&DscConfigurationUpdateWithDscConfigurationUpdateParametersOptions{Parameters: &DscConfigurationUpdateParameters{
			Name: to.StringPtr("SetupServer"),
			Tags: map[string]*string{
				"Hello": to.StringPtr("World"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.DscConfiguration.ID == nil {
		t.Fatal("DscConfiguration.ID should not be nil!")
	}
}

func TestJob_GetOutput(t *testing.T) {
	// From example Get Job Output
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	_, err := client.GetOutput(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		&JobGetOutputOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJob_GetRunbookContent(t *testing.T) {
	// From example Get Job Runbook Content
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	_, err := client.GetRunbookContent(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		&JobGetRunbookContentOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJob_Suspend(t *testing.T) {
	// From example Suspend job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	_, err := client.Suspend(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		&JobSuspendOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJob_Stop(t *testing.T) {
	// From example Stop job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	_, err := client.Stop(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		&JobStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJob_Get(t *testing.T) {
	// From example Get job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	res, err := client.Get(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		&JobGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Job.ID == nil {
		t.Fatal("Job.ID should not be nil!")
	}
}

func TestJob_Create(t *testing.T) {
	// From example Create job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	res, err := client.Create(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		JobCreateParameters{
			Properties: &JobCreateProperties{
				Parameters: map[string]*string{
					"key01": to.StringPtr("value01"),
					"key02": to.StringPtr("value02"),
				},
				RunOn: to.StringPtr(""),
				Runbook: &RunbookAssociationProperty{
					Name: to.StringPtr("TestRunbook"),
				},
			},
		},
		&JobCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Job.ID == nil {
		t.Fatal("Job.ID should not be nil!")
	}
}

func TestJob_ListByAutomationAccount(t *testing.T) {
	// From example List jobs by automation account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	pager := client.ListByAutomationAccount("mygroup",
		"ContoseAutomationAccount",
		&JobListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobCollectionItem.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobCollectionItem.ID should not be nil!")
			}
		}
	}
}

func TestJob_Resume(t *testing.T) {
	// From example Resume job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	_, err := client.Resume(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		&JobResumeOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobStream_Get(t *testing.T) {
	// From example Get job stream
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobStreamClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	res, err := client.Get(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		"851b2101-686f-40e2-8a4b-5b8df08afbd1_00636535684910693884_00000000000000000001",
		&JobStreamGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobStream.ID == nil {
		t.Fatal("JobStream.ID should not be nil!")
	}
}

func TestJobStream_ListByJob(t *testing.T) {
	// From example List job streams by job name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobStreamClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	pager := client.ListByJob("mygroup",
		"ContoseAutomationAccount",
		"foo",
		&JobStreamListByJobOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobStream.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobStream.ID should not be nil!")
			}
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_ConvertGraphRunbookContent(t *testing.T) {
	// From example Get Graphical raw runbook content from graphical runbook JSON object
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAutomationClientClient(con,
		"subid")
	_, err := client.ConvertGraphRunbookContent(ctx,
		"rg",
		"MyAutomationAccount",
		GraphicalRunbookContent{
			GraphRunbookJSON: to.StringPtr("<GraphRunbookJSON>"),
		},
		&AutomationClientConvertGraphRunbookContentOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Get Graphical runbook content from raw content
	_, err = client.ConvertGraphRunbookContent(ctx,
		"rg",
		"MyAutomationAccount",
		GraphicalRunbookContent{
			RawContent: &RawGraphicalRunbookContent{
				RunbookDefinition: to.StringPtr("AAEAAADAQAAAAAAAAAMAgAAAGJPcmNoZXN0cmF0b3IuR3JhcGhSdW5ib29rLk1vZGVsLCBWZXJzaW9uPTcuMy4wLjAsIEN1bHR...."),
				RunbookType:       GraphRunbookTypeGraphPowerShell.ToPtr(),
				SchemaVersion:     to.StringPtr("1.10"),
			},
		},
		&AutomationClientConvertGraphRunbookContentOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSoftwareUpdateConfigurations_Create(t *testing.T) {
	// From example Create software update configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSoftwareUpdateConfigurationsClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	res, err := client.Create(ctx,
		"mygroup",
		"myaccount",
		"testpatch",
		SoftwareUpdateConfiguration{
			Properties: &SoftwareUpdateConfigurationProperties{
				ScheduleInfo: &SUCScheduleProperties{
					AdvancedSchedule: &AdvancedSchedule{
						WeekDays: []*string{
							to.StringPtr("Monday"),
							to.StringPtr("Thursday")},
					},
					ExpiryTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-09T11:22:57+00:00"); return t }()),
					Frequency:  ScheduleFrequencyHour.ToPtr(),
					Interval:   to.Int64Ptr(1),
					StartTime:  to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T12:22:57+00:00"); return t }()),
					TimeZone:   to.StringPtr("America/Los_Angeles"),
				},
				Tasks: &SoftwareUpdateConfigurationTasks{
					PostTask: &TaskProperties{
						Parameters: map[string]*string{},
						Source:     to.StringPtr("GetCache"),
					},
					PreTask: &TaskProperties{
						Parameters: map[string]*string{
							"COMPUTERNAME": to.StringPtr("Computer1"),
						},
						Source: to.StringPtr("HelloWorld"),
					},
				},
				UpdateConfiguration: &UpdateConfiguration{
					AzureVirtualMachines: []*string{
						to.StringPtr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-01"),
						to.StringPtr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-02"),
						to.StringPtr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-03")},
					Duration: to.StringPtr("PT2H0M"),
					NonAzureComputerNames: []*string{
						to.StringPtr("box1.contoso.com"),
						to.StringPtr("box2.contoso.com")},
					OperatingSystem: OperatingSystemTypeWindows.ToPtr(),
					Targets: &TargetProperties{
						AzureQueries: []*AzureQueryProperties{
							{
								Locations: []*string{
									to.StringPtr("Japan East"),
									to.StringPtr("UK South")},
								Scope: []*string{
									to.StringPtr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067/resourceGroups/myresources"),
									to.StringPtr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067")},
								TagSettings: &TagSettingsProperties{
									FilterOperator: TagOperatorsAll.ToPtr(),
									Tags: map[string][]*string{
										"tag1": []*string{
											to.StringPtr("tag1Value1"),
											to.StringPtr("tag1Value2"),
											to.StringPtr("tag1Value3")},
										"tag2": []*string{
											to.StringPtr("tag2Value1"),
											to.StringPtr("tag2Value2"),
											to.StringPtr("tag2Value3")},
									},
								},
							}},
						NonAzureQueries: []*NonAzureQueryProperties{
							{
								FunctionAlias: to.StringPtr("SavedSearch1"),
								WorkspaceID:   to.StringPtr("WorkspaceId1"),
							},
							{
								FunctionAlias: to.StringPtr("SavedSearch2"),
								WorkspaceID:   to.StringPtr("WorkspaceId2"),
							}},
					},
					Windows: &WindowsProperties{
						ExcludedKbNumbers: []*string{
							to.StringPtr("168934"),
							to.StringPtr("168973")},
						IncludedUpdateClassifications: WindowsUpdateClassesCritical.ToPtr(),
						RebootSetting:                 to.StringPtr("IfRequired"),
					},
				},
			},
		},
		&SoftwareUpdateConfigurationsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SoftwareUpdateConfiguration.ID == nil {
		t.Fatal("SoftwareUpdateConfiguration.ID should not be nil!")
	}
}

func TestSoftwareUpdateConfigurations_GetByName(t *testing.T) {
	// From example Get software update configuration by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSoftwareUpdateConfigurationsClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	res, err := client.GetByName(ctx,
		"mygroup",
		"myaccount",
		"mypatch",
		&SoftwareUpdateConfigurationsGetByNameOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SoftwareUpdateConfiguration.ID == nil {
		t.Fatal("SoftwareUpdateConfiguration.ID should not be nil!")
	}
}

func TestSoftwareUpdateConfigurations_Delete(t *testing.T) {
	// From example Delete software update configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSoftwareUpdateConfigurationsClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	_, err := client.Delete(ctx,
		"mygroup",
		"myaccount",
		"mypatch",
		&SoftwareUpdateConfigurationsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSoftwareUpdateConfigurations_List(t *testing.T) {
	// From example List software update configurations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSoftwareUpdateConfigurationsClient(con,
		"1a7d4044-286c-4acb-969a-96639265bf2e")
	_, err := client.List(ctx,
		"mygroup",
		"myaccount",
		&SoftwareUpdateConfigurationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example List software update configurations Targeting a specific azure virtual machine
	_, err = client.List(ctx,
		"mygroup",
		"myaccount",
		&SoftwareUpdateConfigurationsListOptions{Filter: to.StringPtr("properties/updateConfiguration/azureVirtualMachines/any(m: m eq '/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-01')")})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSoftwareUpdateConfigurationRuns_GetById(t *testing.T) {
	// From example Get software update configuration runs by Id
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSoftwareUpdateConfigurationRunsClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	res, err := client.GetByID(ctx,
		"mygroup",
		"myaccount",
		"2bd77cfa-2e9c-41b4-a45b-684a77cfeca9",
		&SoftwareUpdateConfigurationRunsGetByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SoftwareUpdateConfigurationRun.ID == nil {
		t.Fatal("SoftwareUpdateConfigurationRun.ID should not be nil!")
	}
}

func TestSoftwareUpdateConfigurationRuns_List(t *testing.T) {
	// From example List software update configuration machine run with status equal to 'Failed'
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSoftwareUpdateConfigurationRunsClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	_, err := client.List(ctx,
		"mygroup",
		"myaccount",
		&SoftwareUpdateConfigurationRunsListOptions{Filter: to.StringPtr("properties/status%20eq%20'Failed'")})
	if err != nil {
		t.Fatal(err)
	}

	// From example List software update configuration machine runs
	_, err = client.List(ctx,
		"mygroup",
		"myaccount",
		&SoftwareUpdateConfigurationRunsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSoftwareUpdateConfigurationMachineRuns_GetById(t *testing.T) {
	// From example Get software update configuration machine run
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSoftwareUpdateConfigurationMachineRunsClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	res, err := client.GetByID(ctx,
		"mygroup",
		"myaccount",
		"ca440719-34a4-4234-a1a9-3f84faf7788f",
		&SoftwareUpdateConfigurationMachineRunsGetByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SoftwareUpdateConfigurationMachineRun.ID == nil {
		t.Fatal("SoftwareUpdateConfigurationMachineRun.ID should not be nil!")
	}
}

func TestSoftwareUpdateConfigurationMachineRuns_List(t *testing.T) {
	// From example List software update configuration machine runs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSoftwareUpdateConfigurationMachineRunsClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	_, err := client.List(ctx,
		"mygroup",
		"myaccount",
		&SoftwareUpdateConfigurationMachineRunsListOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example List software update configuration machine runs for a specific software update configuration run
	_, err = client.List(ctx,
		"mygroup",
		"myaccount",
		&SoftwareUpdateConfigurationMachineRunsListOptions{Filter: to.StringPtr("$filter=properties/correlationId%20eq%200b943e57-44d3-4f05-898c-6e92aa617e59")})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRunbookDraft_GetContent(t *testing.T) {
	// From example Get runbook draft content
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunbookDraftClient(con,
		"subid")
	_, err := client.GetContent(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		&RunbookDraftGetContentOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRunbookDraft_ReplaceContent(t *testing.T) {
	// From example Create or update runbook draft
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunbookDraftClient(con,
		"subid")
	poller, err := client.BeginReplaceContent(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		"<#\r\n        .DESCRIPTION\r\n            An example runbook which prints out the first10 Azure VMs in your subscription (ordered alphabetically).\r\n            For more information about how this runbook authenticates to your Azure subscription, see our documentation here: http: //aka.ms/fxu3mn\r\n\r\n        .NOTES\r\n            AUTHOR: Azure Automation Team\r\n            LASTEDIT: Mar27,\r\n            2015\r\n    #>\r\n    workflow Get-AzureVMTutorial{\r\n        #The name of the Automation Credential Asset this runbook will use to authenticate to Azure.\r\n        $CredentialAssetName = 'DefaultAzureCredential'\r\n\r\n        #Get the credential with the above name from the Automation Asset store\r\n        $Cred = Get-AutomationPSCredential -Name $CredentialAssetName\r\n        if(!$Cred){\r\n            Throw\"Could not find an Automation Credential Asset named '${CredentialAssetName}'. Make sure you have created one in this Automation Account.\"\r\n                }\r\n\r\n        #Connect to your Azure Account\r\n        $Account = Add-AzureAccount -Credential $Cred\r\n        if(!$Account){\r\n            Throw\"Could not authenticate to Azure using the credential asset '${CredentialAssetName}'. Make sure the user name and password are correct.\"\r\n                }\r\n\r\n        #TODO (optional): pick the right subscription to use. Without this line, the default subscription for your Azure Account will be used.\r\n        #Select-AzureSubscription -SubscriptionName\"TODO: your Azure subscription name here\"\r\n        \r\n        #Get all the VMs you have in your Azure subscription\r\n        $VMs = Get-AzureVM\r\n\r\n        #Print out up to10 of those VMs\r\n        if(!$VMs){\r\n            Write-Output\"No VMs were found in your subscription.\"\r\n                } else{\r\n            Write-Output $VMs[0..9\r\n                    ]\r\n                }\r\n            }",
		&RunbookDraftBeginReplaceContentOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRunbookDraft_Get(t *testing.T) {
	// From example Get runbook draft
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunbookDraftClient(con,
		"subid")
	_, err := client.Get(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		&RunbookDraftGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRunbookDraft_UndoEdit(t *testing.T) {
	// From example Undo draft edit to last known published state
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunbookDraftClient(con,
		"subid")
	_, err := client.UndoEdit(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		&RunbookDraftUndoEditOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRunbook_Publish(t *testing.T) {
	// From example Publish runbook draft
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunbookClient(con,
		"subid")
	poller, err := client.BeginPublish(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		&RunbookBeginPublishOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRunbook_GetContent(t *testing.T) {
	// From example Get runbook content
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunbookClient(con,
		"subid")
	_, err := client.GetContent(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		&RunbookGetContentOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRunbook_Get(t *testing.T) {
	// From example Get runbook
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunbookClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		&RunbookGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Runbook.ID == nil {
		t.Fatal("Runbook.ID should not be nil!")
	}
}

func TestRunbook_CreateOrUpdate(t *testing.T) {
	// From example Create or update runbook and publish it
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunbookClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		RunbookCreateOrUpdateParameters{
			Name:     to.StringPtr("Get-AzureVMTutorial"),
			Location: to.StringPtr("East US 2"),
			Properties: &RunbookCreateOrUpdateProperties{
				Description:      to.StringPtr("Description of the Runbook"),
				LogActivityTrace: to.Int32Ptr(1),
				LogProgress:      to.BoolPtr(true),
				LogVerbose:       to.BoolPtr(false),
				PublishContentLink: &ContentLink{
					ContentHash: &ContentHash{
						Algorithm: to.StringPtr("SHA256"),
						Value:     to.StringPtr("115775B8FF2BE672D8A946BD0B489918C724DDE15A440373CA54461D53010A80"),
					},
					URI: to.StringPtr("https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/101-automation-runbook-getvms/Runbooks/Get-AzureVMTutorial.ps1"),
				},
				RunbookType: RunbookTypeEnumPowerShellWorkflow.ToPtr(),
			},
			Tags: map[string]*string{
				"tag01": to.StringPtr("value01"),
				"tag02": to.StringPtr("value02"),
			},
		},
		&RunbookCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Runbook.ID == nil {
		t.Fatal("Runbook.ID should not be nil!")
	}

	// From example Create runbook as draft
	res, err = client.CreateOrUpdate(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		RunbookCreateOrUpdateParameters{
			Name:     to.StringPtr("Get-AzureVMTutorial"),
			Location: to.StringPtr("East US 2"),
			Properties: &RunbookCreateOrUpdateProperties{
				Description: to.StringPtr("Description of the Runbook"),
				Draft:       &RunbookDraft{},
				LogProgress: to.BoolPtr(false),
				LogVerbose:  to.BoolPtr(false),
				RunbookType: RunbookTypeEnumPowerShellWorkflow.ToPtr(),
			},
			Tags: map[string]*string{
				"tag01": to.StringPtr("value01"),
				"tag02": to.StringPtr("value02"),
			},
		},
		&RunbookCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Runbook.ID == nil {
		t.Fatal("Runbook.ID should not be nil!")
	}
}

func TestRunbook_Update(t *testing.T) {
	// From example Update runbook
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunbookClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		RunbookUpdateParameters{
			Properties: &RunbookUpdateProperties{
				Description:      to.StringPtr("Updated Description of the Runbook"),
				LogActivityTrace: to.Int32Ptr(1),
				LogProgress:      to.BoolPtr(true),
				LogVerbose:       to.BoolPtr(false),
			},
		},
		&RunbookUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Runbook.ID == nil {
		t.Fatal("Runbook.ID should not be nil!")
	}
}

func TestRunbook_Delete(t *testing.T) {
	// From example Delete a runbook
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunbookClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		&RunbookDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRunbook_ListByAutomationAccount(t *testing.T) {
	// From example List runbooks by automation account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunbookClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"ContoseAutomationAccount",
		&RunbookListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Runbook.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Runbook.ID should not be nil!")
			}
		}
	}
}

func TestTestJobStreams_Get(t *testing.T) {
	// From example Get test job stream
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTestJobStreamsClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	res, err := client.Get(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		"851b2101-686f-40e2-8a4b-5b8df08afbd1_00636535684910693884_00000000000000000001",
		&TestJobStreamsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.JobStream.ID == nil {
		t.Fatal("JobStream.ID should not be nil!")
	}
}

func TestTestJobStreams_ListByTestJob(t *testing.T) {
	// From example List job streams by job name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTestJobStreamsClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	pager := client.ListByTestJob("mygroup",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		&TestJobStreamsListByTestJobOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("JobStream.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("JobStream.ID should not be nil!")
			}
		}
	}
}

func TestTestJob_Create(t *testing.T) {
	// From example Create test job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTestJobClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	_, err := client.Create(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		TestJobCreateParameters{
			Parameters: map[string]*string{
				"key01": to.StringPtr("value01"),
				"key02": to.StringPtr("value02"),
			},
			RunOn: to.StringPtr(""),
		},
		&TestJobCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTestJob_Get(t *testing.T) {
	// From example Get test job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTestJobClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	_, err := client.Get(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		&TestJobGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTestJob_Resume(t *testing.T) {
	// From example Resume test job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTestJobClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	_, err := client.Resume(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		&TestJobResumeOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTestJob_Stop(t *testing.T) {
	// From example Stop test job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTestJobClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	_, err := client.Stop(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		&TestJobStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTestJob_Suspend(t *testing.T) {
	// From example Suspend test job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTestJobClient(con,
		"51766542-3ed7-4a72-a187-0c8ab644ddab")
	_, err := client.Suspend(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		&TestJobSuspendOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebhook_GenerateUri(t *testing.T) {
	// From example Generate webhook uri
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebhookClient(con,
		"subid")
	_, err := client.GenerateURI(ctx,
		"rg",
		"myAutomationAccount33",
		&WebhookGenerateURIOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebhook_Delete(t *testing.T) {
	// From example Delete webhook
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebhookClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount33",
		"TestWebhook",
		&WebhookDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebhook_Get(t *testing.T) {
	// From example Get webhook
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebhookClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"TestWebhook",
		&WebhookGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Webhook.ID == nil {
		t.Fatal("Webhook.ID should not be nil!")
	}
}

func TestWebhook_CreateOrUpdate(t *testing.T) {
	// From example Create or update webhook
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebhookClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount33",
		"TestWebhook",
		WebhookCreateOrUpdateParameters{
			Name: to.StringPtr("TestWebhook"),
			Properties: &WebhookCreateOrUpdateProperties{
				ExpiryTime: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-29T22:18:13.7002872Z"); return t }()),
				IsEnabled:  to.BoolPtr(true),
				Runbook: &RunbookAssociationProperty{
					Name: to.StringPtr("TestRunbook"),
				},
				URI: to.StringPtr("<uri>"),
			},
		},
		&WebhookCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Webhook.ID == nil {
		t.Fatal("Webhook.ID should not be nil!")
	}
}

func TestWebhook_Update(t *testing.T) {
	// From example Update webhook
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebhookClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount33",
		"TestWebhook",
		WebhookUpdateParameters{
			Name: to.StringPtr("TestWebhook"),
			Properties: &WebhookUpdateProperties{
				Description: to.StringPtr("updated webhook"),
				IsEnabled:   to.BoolPtr(false),
			},
		},
		&WebhookUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Webhook.ID == nil {
		t.Fatal("Webhook.ID should not be nil!")
	}
}

func TestWebhook_ListByAutomationAccount(t *testing.T) {
	// From example List webhooks by Automation Account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebhookClient(con,
		"subid")
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&WebhookListByAutomationAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Webhook.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Webhook.ID should not be nil!")
			}
		}
	}
}

func TestHybridRunbookWorkers_Delete(t *testing.T) {
	// From example Delete a V2 hybrid runbook worker
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridRunbookWorkersClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount20",
		"myGroup",
		"c010ad12-ef14-4a2a-aa9e-ef22c4745ddd",
		&HybridRunbookWorkersDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestHybridRunbookWorkers_Get(t *testing.T) {
	// From example Get a V2 hybrid runbook worker
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridRunbookWorkersClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"testaccount",
		"TestHybridGroup",
		"c010ad12-ef14-4a2a-aa9e-ef22c4745ddd",
		&HybridRunbookWorkersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HybridRunbookWorker.ID == nil {
		t.Fatal("HybridRunbookWorker.ID should not be nil!")
	}
}

func TestHybridRunbookWorkers_Create(t *testing.T) {
	// From example Create a V2 hybrid runbook worker
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridRunbookWorkersClient(con,
		"subid")
	res, err := client.Create(ctx,
		"rg",
		"testaccount",
		"TestHybridGroup",
		"c010ad12-ef14-4a2a-aa9e-ef22c4745ddd",
		nil,
		&HybridRunbookWorkersCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HybridRunbookWorker.ID == nil {
		t.Fatal("HybridRunbookWorker.ID should not be nil!")
	}
}

func TestHybridRunbookWorkers_Move(t *testing.T) {
	// From example Move a V2 hybrid worker to a different group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridRunbookWorkersClient(con,
		"subid")
	_, err := client.Move(ctx,
		"rg",
		"testaccount",
		"TestHybridGroup",
		"c010ad12-ef14-4a2a-aa9e-ef22c4745ddd",
		nil,
		&HybridRunbookWorkersMoveOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestHybridRunbookWorkers_ListByHybridRunbookWorkerGroup(t *testing.T) {
	// From example List hybrid workers by hybrid runbook worker group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridRunbookWorkersClient(con,
		"subid")
	pager := client.ListByHybridRunbookWorkerGroup("rg",
		"testaccount",
		"TestHybridGroup",
		&HybridRunbookWorkersListByHybridRunbookWorkerGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("HybridRunbookWorker.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("HybridRunbookWorker.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
