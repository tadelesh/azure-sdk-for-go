//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armautomation_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/automation/armautomation"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestPrivateEndpointConnections_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateEndpointConnectionListGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByAutomationAccount("rg1",
		"ddb1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateEndpointConnectionListGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.PrivateEndpointConnectionListResult{
			Value: []*armautomation.PrivateEndpointConnection{
				{
					Name: to.Ptr("privateEndpointConnectionName"),
					Type: to.Ptr("Microsoft.Automation/automationAccounts/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Automation/automationAccounts/ddb1/privateEndpointConnections/privateEndpointConnectionName"),
					Properties: &armautomation.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armautomation.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
						},
						PrivateLinkServiceConnectionState: &armautomation.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
					},
				},
				{
					Name: to.Ptr("privateEndpointConnectionName"),
					Type: to.Ptr("Microsoft.Automation/automationAccounts/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Automation/automationAccounts/ddb1/privateEndpointConnections/privateEndpointConnectionName2"),
					Properties: &armautomation.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armautomation.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName2"),
						},
						PrivateLinkServiceConnectionState: &armautomation.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateEndpointConnectionListGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateEndpointConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"ddb1",
		"privateEndpointConnectionName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateEndpointConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.PrivateEndpointConnection{
			Name: to.Ptr("privateEndpointConnectionName"),
			Type: to.Ptr("Microsoft.Automation/automationAccounts/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg1/providers/Microsoft.Automation/automationAccounts/ddb1/privateEndpointConnections/privateEndpointConnectionName"),
			Properties: &armautomation.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armautomation.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
				},
				PrivateLinkServiceConnectionState: &armautomation.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Auto-approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateEndpointConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateEndpointConnectionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve or reject a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"ddb1",
		"privateEndpointConnectionName",
		armautomation.PrivateEndpointConnection{
			Properties: &armautomation.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armautomation.PrivateLinkServiceConnectionStateProperty{
					Description: to.Ptr("Approved by johndoe@contoso.com"),
					Status:      to.Ptr("Approved"),
				},
			},
		},
		&armautomation.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.PrivateEndpointConnection{
			Name: to.Ptr("privateEndpointConnectionName"),
			Type: to.Ptr("Microsoft.Automation/automationAccounts/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg1/providers/Microsoft.Automation/automationAccounts/ddb1/privateEndpointConnections/privateEndpointConnectionName"),
			Properties: &armautomation.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armautomation.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
				},
				PrivateLinkServiceConnectionState: &armautomation.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Auto-approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateEndpointConnectionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateEndpointConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"ddb1",
		"privateEndpointConnectionName",
		&armautomation.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
}

func TestPrivateLinkResources_Automation(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateLinkResourceListGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.Automation("rg1",
		"ddb1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateLinkResourceListGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.PrivateLinkResourceListResult{
			Value: []*armautomation.PrivateLinkResource{
				{
					Name: to.Ptr("sql"),
					Type: to.Ptr("Microsoft.Automation/automationAccounts/privateLinkResources"),
					ID:   to.Ptr("subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Automation/automationAccounts/ddb1/privateLinkResources/sql"),
					Properties: &armautomation.PrivateLinkResourceProperties{
						GroupID: to.Ptr("sql"),
						RequiredMembers: []*string{
							to.Ptr("ddb1"),
							to.Ptr("ddb1-westus")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/PrivateLinkResourceListGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPython2Package_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deletePython2Package.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a python 2 package"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewPython2PackageClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deletePython2Package.json: %v", err)
	}
}

func TestPython2Package_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getPython2Package.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a python 2 package"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewPython2PackageClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getPython2Package.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Module{
			Name:     to.Ptr("OmsCompositeResources"),
			Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Python2Packages"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/python2Packages/OmsCompositeResources"),
			Location: to.Ptr("East US 2"),
			Tags:     map[string]*string{},
			Properties: &armautomation.ModuleProperties{
				ActivityCount: to.Ptr[int32](0),
				CreationTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T15:41:47.003+00:00"); return t }()),
				Error: &armautomation.ModuleErrorInfo{
					Message: to.Ptr(""),
				},
				IsComposite:       to.Ptr(true),
				IsGlobal:          to.Ptr(false),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T15:42:10.567+00:00"); return t }()),
				ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
				SizeInBytes:       to.Ptr[int64](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Module) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Module)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getPython2Package.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPython2Package_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdatePython2Package.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a python 2 package"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewPython2PackageClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		armautomation.PythonPackageCreateParameters{
			Properties: &armautomation.PythonPackageCreateProperties{
				ContentLink: &armautomation.ContentLink{
					ContentHash: &armautomation.ContentHash{
						Algorithm: to.Ptr("sha265"),
						Value:     to.Ptr("07E108A962B81DD9C9BAA89BB47C0F6EE52B29E83758B07795E408D258B2B87A"),
					},
					URI:     to.Ptr("https://teststorage.blob.core.windows.net/dsccomposite/OmsCompositeResources.zip"),
					Version: to.Ptr("1.0.0.0"),
				},
			},
			Tags: map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdatePython2Package.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Module{
			Name:     to.Ptr("OmsCompositeResources"),
			Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/python2Packages"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/python2Packages/OmsCompositeResources"),
			Location: to.Ptr("East US 2"),
			Tags:     map[string]*string{},
			Properties: &armautomation.ModuleProperties{
				ActivityCount:     to.Ptr[int32](0),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T15:41:47.003+00:00"); return t }()),
				Error:             &armautomation.ModuleErrorInfo{},
				IsComposite:       to.Ptr(false),
				IsGlobal:          to.Ptr(false),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T15:42:10.567+00:00"); return t }()),
				ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
				SizeInBytes:       to.Ptr[int64](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Module) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Module)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdatePython2Package.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPython2Package_Update(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updatePython2Package.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a module"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewPython2PackageClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"MyAutomationAccount",
		"MyPython2Package",
		armautomation.PythonPackageUpdateParameters{
			Tags: map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updatePython2Package.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Module{
			Name:     to.Ptr("MyPython2Package"),
			Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/python2Packages"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/MyAutomationAccount/python2Packages/MyPython2Package"),
			Location: to.Ptr("East US 2"),
			Tags:     map[string]*string{},
			Properties: &armautomation.ModuleProperties{
				ActivityCount:     to.Ptr[int32](0),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T15:41:47.003+00:00"); return t }()),
				Error:             &armautomation.ModuleErrorInfo{},
				IsComposite:       to.Ptr(false),
				IsGlobal:          to.Ptr(false),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T15:42:10.567+00:00"); return t }()),
				ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
				SizeInBytes:       to.Ptr[int64](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Module) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Module)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updatePython2Package.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPython2Package_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPython2PackagesByAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List python 2 packages by automation account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewPython2PackageClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPython2PackagesByAutomationAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.ModuleListResult{
			Value: []*armautomation.Module{
				{
					Name: to.Ptr("configparser"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/python2Packages/configparser"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-17T17:57:01.7866667+00:00"); return t }()),
						IsComposite:       to.Ptr(false),
						IsGlobal:          to.Ptr(false),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-24T20:30:16.4966667+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](39573),
						Version:           to.Ptr("3.5.0"),
					},
				},
				{
					Name: to.Ptr("flask"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/python2Packages/flask"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-09T18:07:44.6133333+00:00"); return t }()),
						IsComposite:       to.Ptr(false),
						IsGlobal:          to.Ptr(false),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-09T18:09:20.7733333+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](91364),
						Version:           to.Ptr("1.0.2"),
					},
				},
				{
					Name: to.Ptr("numpy"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/python2Packages/numpy"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-14T01:05:54.67+00:00"); return t }()),
						IsComposite:       to.Ptr(false),
						IsGlobal:          to.Ptr(false),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-17T17:58:09.8733333+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](13345673),
						Version:           to.Ptr("1.14.5"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ModuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ModuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPython2PackagesByAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAgentRegistrationInformation_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getAgentRegistration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the agent registration information"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewAgentRegistrationInformationClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount18",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getAgentRegistration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.AgentRegistration{
			DscMetaConfiguration: to.Ptr("\r\n	instance of MSFT_WebDownloadManager as $MSFT_WebDownloadManager1ref\r\n	{\r\n	ResourceID = \"[ConfigurationRepositoryWeb]AzureAutomationDSC\";\r\n	 SourceInfo = \"C:\\\\OaaS-RegistrationMetaConfig2.ps1::20::9::ConfigurationRepositoryWeb\";\r\n	 RegistrationKey = \"5ci0000000000000000000000000000000000000000000000000000000000000000000000000000Y5H/8wFg==\"; \r\n	 ServerURL = \"https://eus2-agentservice-prod-1.azure-automation.net/accounts/bd8fac9e-0000-0000-0000-0000f474fbf6\";\r\n	};\r\n\r\n	instance of MSFT_WebResourceManager as $MSFT_WebResourceManager1ref\r\n	{\r\n	 SourceInfo = \"C:\\\\OaaS-RegistrationMetaConfig2.ps1::27::9::ResourceRepositoryWeb\";\r\n	 ServerURL = \"https://eus2-agentservice-prod-1.azure-automation.net/accounts/bd8fac9e-0000-0000-0000-0000f474fbf6\";\r\n	 ResourceID = \"[ResourceRepositoryWeb]AzureAutomationDSC\";\r\n	 RegistrationKey = \"5ci0000000000000000000000000000000000000000000000000000000000000000000000000000Y5H/8wFg==\"; \r\n	};\r\n\r\n	instance of MSFT_WebReportManager as $MSFT_WebReportManager1ref\r\n	{\r\n	 SourceInfo = \"C:\\\\OaaS-RegistrationMetaConfig2.ps1::34::9::ReportServerWeb\";\r\n	 ServerURL = \"https://eus2-agentservice-prod-1.azure-automation.net/accounts/bd8fac9e-0000-0000-0000-0000f474fbf6\";\r\n	 ResourceID = \"[ReportServerWeb]AzureAutomationDSC\";\r\n	 RegistrationKey = \"5ci0000000000000000000000000000000000000000000000000000000000000000000000000000Y5H/8wFg==\"; \r\n	};\r\n\r\n	instance of MSFT_DSCMetaConfiguration as $MSFT_DSCMetaConfiguration1ref\r\n	{\r\n	 RefreshMode = \"Pull\";\r\n	 AllowModuleOverwrite = False;\r\n	 ActionAfterReboot = \"ContinueConfiguration\";\r\n	 RefreshFrequencyMins = 30;\r\n	 RebootNodeIfNeeded = False;\r\n	 ConfigurationModeFrequencyMins = 15;\r\n	 ConfigurationMode = \"ApplyAndMonitor\";\r\n\r\n	  ResourceModuleManagers = {\r\n	  $MSFT_WebResourceManager1ref  \r\n	};\r\n	  ReportManagers = {\r\n	  $MSFT_WebReportManager1ref  \r\n	 };\r\n	  ConfigurationDownloadManagers = {\r\n	  $MSFT_WebDownloadManager1ref  \r\n	 };\r\n	};\r\n\r\n	instance of OMI_ConfigurationDocument\r\n	{\r\n	 Version=\"2.0.0\";\r\n	 MinimumCompatibleVersion = \"2.0.0\";\r\n	 CompatibleVersionAdditionalProperties= { \"MSFT_DSCMetaConfiguration:StatusRetentionTimeInDays\" };\r\n	 Author=\"azureautomation\";\r\n	 GenerationDate=\"04/17/2015 11:41:09\";\r\n	 GenerationHost=\"azureautomation-01\";\r\n	 Name=\"RegistrationMetaConfig\";\r\n	};\r\n	"),
			Endpoint: to.Ptr("https://eus2-agentservice-prod-1.azure-automation.net/accounts/bd8fac9e-0000-0000-0000-0000f474fbf6"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount18/agentRegistrationInformation/https://eus2-agentservice-prod-1.azure-automation.net/accounts/bd8fac9e-0000-0000-0000-0000f474fbf6"),
			Keys: &armautomation.AgentRegistrationKeys{
				Primary:   to.Ptr("5ci0000000000000000000000000000000000000000000000000000000000000000000000000000Y5H/8wFg=="),
				Secondary: to.Ptr("rVp0000000000000000000000000000000000000000000000000000000000000000000000000000f8cbmrOA=="),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentRegistration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentRegistration)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getAgentRegistration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAgentRegistrationInformation_RegenerateKey(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/regenerateAgentRegistrationKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Regenerate registration key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewAgentRegistrationInformationClient("subid", cred, &options)
	res, err := client.RegenerateKey(ctx,
		"rg",
		"myAutomationAccount18",
		armautomation.AgentRegistrationRegenerateKeyParameter{
			KeyName: to.Ptr(armautomation.AgentRegistrationKeyNamePrimary),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/regenerateAgentRegistrationKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.AgentRegistration{
			Endpoint: to.Ptr("https://eus2-agentservice-prod-1.azure-automation.net/accounts/bd8fac9e-0000-0000-0000-0000f474fbf6"),
			Keys: &armautomation.AgentRegistrationKeys{
				Primary:   to.Ptr("5ci0000000000000000000000000000000000000000000000000000000000000000000000000000Y5H/8wFg=="),
				Secondary: to.Ptr("rVp0000000000000000000000000000000000000000000000000000000000000000000000000000f8cbmrOA=="),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentRegistration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentRegistration)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/regenerateAgentRegistrationKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscNode_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteDscNode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a DSC Node"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscNodeClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount9",
		"e1243a76-a9bd-432f-bde3-ad8f317ee786",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteDscNode.json: %v", err)
	}
}

func TestDscNode_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getDscNode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a node"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscNodeClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"nodeId",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getDscNode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.DscNode{
			Name: to.Ptr("DSCCOMP"),
			Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId"),
			Properties: &armautomation.DscNodeProperties{
				ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
					{
						Name:    to.Ptr("Microsoft.Powershell.DSC"),
						Version: to.Ptr("2.75.0.0"),
					}},
				IP:       to.Ptr("ip"),
				LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
				NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
					Name: to.Ptr("SetupServer.localhost"),
				},
				NodeID:           to.Ptr("nodeId"),
				RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
				Status:           to.Ptr("Pending"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DscNode) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DscNode)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getDscNode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscNode_Update(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateDscNode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a node"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscNodeClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount33",
		"nodeId",
		armautomation.DscNodeUpdateParameters{
			NodeID: to.Ptr("nodeId"),
			Properties: &armautomation.DscNodeUpdateParametersProperties{
				NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
					Name: to.Ptr("SetupServer.localhost"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateDscNode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.DscNode{
			Name: to.Ptr("DSCCOMP"),
			Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId"),
			Properties: &armautomation.DscNodeProperties{
				ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
					{
						Name:    to.Ptr("Microsoft.Powershell.DSC"),
						Version: to.Ptr("2.75.0.0"),
					}},
				IP:       to.Ptr("ip"),
				LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
				NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
					Name: to.Ptr("SetupServer.localhost"),
				},
				NodeID:           to.Ptr("nodeId"),
				RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
				Status:           to.Ptr("Pending"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DscNode) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DscNode)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateDscNode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscNode_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listAllDscNodesByAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List DSC nodes by Automation Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscNodeClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscNodeClientListByAutomationAccountOptions{Filter: nil,
			Skip:        nil,
			Top:         nil,
			Inlinecount: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listAllDscNodesByAutomationAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscNodeListResult{
			Value: []*armautomation.DscNode{
				{
					Name: to.Ptr("DSCCOMP"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("nodeId"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Pending"),
					},
				},
				{
					Name: to.Ptr("DSCCOMP2"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId2"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("nodeId2"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Pending"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscNodeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscNodeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listAllDscNodesByAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithNodeConfigurationNotAssignedFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Paged DSC nodes by Automation Account where Node Configurations are not assigned filter"},
	})
	client = armautomation.NewDscNodeClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscNodeClientListByAutomationAccountOptions{Filter: to.Ptr("properties/nodeConfiguration/name eq ''"),
			Skip:        to.Ptr[int32](0),
			Top:         to.Ptr[int32](20),
			Inlinecount: to.Ptr("allpages"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithNodeConfigurationNotAssignedFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscNodeListResult{
			TotalCount: to.Ptr[int32](2),
			Value: []*armautomation.DscNode{
				{
					Name: to.Ptr("Node60"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Node60"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr(""),
						},
						NodeID:           to.Ptr("477F9596-92F3-479A-82F2-9EE149F2C6B0"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Compliant"),
					},
				},
				{
					Name: to.Ptr("Node61"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Node61"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr(""),
						},
						NodeID:           to.Ptr("E5D5D0B5-400D-48F7-A791-612945DAC5EB"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Compliant"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscNodeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscNodeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithNodeConfigurationNotAssignedFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithNodeConfigurationCustomFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Paged DSC nodes by Automation Account with Node Configuration Custom filter"},
	})
	client = armautomation.NewDscNodeClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscNodeClientListByAutomationAccountOptions{Filter: to.Ptr("contains(properties/nodeConfiguration/name,'SetupServer.localhost,SetupClient.localhost,$$Not$$Configured$$')"),
			Skip:        to.Ptr[int32](0),
			Top:         to.Ptr[int32](4),
			Inlinecount: to.Ptr("allpages"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithNodeConfigurationCustomFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscNodeListResult{
			TotalCount: to.Ptr[int32](12),
			Value: []*armautomation.DscNode{
				{
					Name: to.Ptr("Node32"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Node32"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr(""),
						},
						NodeID:           to.Ptr("477F9596-92F3-479A-82F2-9EE149F2C6B0"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Compliant"),
					},
				},
				{
					Name: to.Ptr("Node33"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Node33"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("E5D5D0B5-400D-48F7-A791-612945DAC5EB"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Compliant"),
					},
				},
				{
					Name: to.Ptr("Node34"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Node34"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupClient.localhost"),
						},
						NodeID:           to.Ptr("Node34"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Compliant"),
					},
				},
				{
					Name: to.Ptr("Node35"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Node35"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupClient.localhost"),
						},
						NodeID:           to.Ptr("Node35"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("NotCompliant"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscNodeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscNodeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithNodeConfigurationCustomFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithNameFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Paged DSC nodes by Automation Account with name filter"},
	})
	client = armautomation.NewDscNodeClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscNodeClientListByAutomationAccountOptions{Filter: to.Ptr("contains('DSCCOMP',name)"),
			Skip:        to.Ptr[int32](0),
			Top:         to.Ptr[int32](6),
			Inlinecount: to.Ptr("allpages"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithNameFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscNodeListResult{
			TotalCount: to.Ptr[int32](2),
			Value: []*armautomation.DscNode{
				{
					Name: to.Ptr("DSCCOMP"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/DSCCOMP"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("708D250A-2169-4B54-89FF-76F5F71C252A"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Compliant"),
					},
				},
				{
					Name: to.Ptr("DSCCOMP2"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/DSCCOMP2"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("3B4BB31A-5132-4669-A15F-A17E234D1634"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Failed"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscNodeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscNodeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithNameFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithNoFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Paged DSC nodes by Automation Account with no filters"},
	})
	client = armautomation.NewDscNodeClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscNodeClientListByAutomationAccountOptions{Filter: nil,
			Skip:        to.Ptr[int32](0),
			Top:         to.Ptr[int32](2),
			Inlinecount: to.Ptr("allpages"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithNoFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscNodeListResult{
			TotalCount: to.Ptr[int32](152),
			Value: []*armautomation.DscNode{
				{
					Name: to.Ptr("DSCCOMP"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("FCC20208-E781-41C4-A757-17AA0429B3A4"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Pending"),
					},
				},
				{
					Name: to.Ptr("DSCCOMP2"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId2"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("A63C781C-0C50-4825-B295-B7F8ECFD0DBC"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Pending"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscNodeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscNodeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithNoFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithStatusFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Paged DSC nodes by Automation Account with node status filter"},
	})
	client = armautomation.NewDscNodeClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscNodeClientListByAutomationAccountOptions{Filter: to.Ptr("contains(properties/status,'Compliant,NotCompliant')"),
			Skip:        to.Ptr[int32](0),
			Top:         to.Ptr[int32](4),
			Inlinecount: to.Ptr("allpages"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithStatusFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscNodeListResult{
			TotalCount: to.Ptr[int32](67),
			Value: []*armautomation.DscNode{
				{
					Name: to.Ptr("Node12"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Node12"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("01D64CDE-85DD-4C9B-B8F1-2F725348FDEC"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Compliant"),
					},
				},
				{
					Name: to.Ptr("Node13"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Node13"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("E13076D7-A959-4067-B02F-4F014AAD22D7"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Compliant"),
					},
				},
				{
					Name: to.Ptr("Node14"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Node14"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("4289B441-B9A0-4309-93FC-0C5100CFBE46"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Compliant"),
					},
				},
				{
					Name: to.Ptr("Node15"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Node15"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.75.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("CBD2212B-8F4C-4049-98E7-1DBCBED7343B"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("NotCompliant"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscNodeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscNodeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithStatusFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithVersionFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Paged DSC nodes by Automation Account with version filter"},
	})
	client = armautomation.NewDscNodeClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscNodeClientListByAutomationAccountOptions{Filter: to.Ptr("properties/extensionHandler/any(eh: eh/version le '2.70')"),
			Skip:        to.Ptr[int32](0),
			Top:         to.Ptr[int32](4),
			Inlinecount: to.Ptr("allpages"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithVersionFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscNodeListResult{
			TotalCount: to.Ptr[int32](7),
			Value: []*armautomation.DscNode{
				{
					Name: to.Ptr("Node62"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Node62"),
					Properties: &armautomation.DscNodeProperties{
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("01D64CDE-85DD-4C9B-B8F1-2F725348FDEC"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Compliant"),
					},
				},
				{
					Name: to.Ptr("Node63"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Node63"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.70.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("E13076D7-A959-4067-B02F-4F014AAD22D7"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Compliant"),
					},
				},
				{
					Name: to.Ptr("Node64"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Node64"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.70.0.0"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("4289B441-B9A0-4309-93FC-0C5100CFBE46"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Compliant"),
					},
				},
				{
					Name: to.Ptr("Node65"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Node65"),
					Properties: &armautomation.DscNodeProperties{
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer.localhost"),
						},
						NodeID:           to.Ptr("CBD2212B-8F4C-4049-98E7-1DBCBED7343B"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("NotCompliant"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscNodeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscNodeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithVersionFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithCompositeFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Paged DSC nodes with filters separated by 'and'"},
	})
	client = armautomation.NewDscNodeClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscNodeClientListByAutomationAccountOptions{Filter: to.Ptr("properties/extensionHandler/any(eh: eh/version gt '2.70') and contains(name,'sql') and contains(properties/nodeConfiguration/name,'$$Not$$Configured$$')"),
			Skip:        to.Ptr[int32](0),
			Top:         to.Ptr[int32](10),
			Inlinecount: to.Ptr("allpages"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithCompositeFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscNodeListResult{
			TotalCount: to.Ptr[int32](1),
			Value: []*armautomation.DscNode{
				{
					Name: to.Ptr("Sql1"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Nodes"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/Sql1"),
					Properties: &armautomation.DscNodeProperties{
						ExtensionHandler: []*armautomation.DscNodeExtensionHandlerAssociationProperty{
							{
								Name:    to.Ptr("Microsoft.Powershell.DSC"),
								Version: to.Ptr("2.70.0.1"),
							}},
						IP:       to.Ptr("ip"),
						LastSeen: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-22T22:25:39.0963773+00:00"); return t }()),
						NodeConfiguration: &armautomation.DscNodeConfigurationAssociationProperty{
							Name: to.Ptr("SetupSqlServer.localhost"),
						},
						NodeID:           to.Ptr("01D64CDE-85DD-4C9B-B8F1-2F725348FDEC"),
						RegistrationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-10T00:51:12.5393083+00:00"); return t }()),
						Status:           to.Ptr("Compliant"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscNodeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscNodeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodesByAutomationAccountWithCompositeFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNodeReports_ListByNode(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listDscNodeReportsByNode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List DSC reports by node id."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewNodeReportsClient("subid", cred, &options)
	pager := client.ListByNode("rg",
		"myAutomationAccount33",
		"nodeId",
		&armautomation.NodeReportsClientListByNodeOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listDscNodeReportsByNode.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscNodeReportListResult{
			Value: []*armautomation.DscNodeReport{
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:27.587+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/903a5ead-140c-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:29.4440401+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("903a5ead-140c-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:27.587+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:27.015+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/903a5eac-140c-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:28.3813034+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("903a5eac-140c-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:26.015+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:26.986+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/77c280c2-140a-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:28.216963+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("77c280c2-140a-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:25.986+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:46:28.668+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/5f4f5382-1408-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:46:29.0439184+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("5f4f5382-1408-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:46:27.668+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:46:26.957+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/5f4f5381-1408-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:46:27.9498533+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("5f4f5381-1408-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:46:25.957+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:31:26.941+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/46d97d6a-1406-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:31:27.6825492+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("46d97d6a-1406-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:31:25.941+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:17:10.163+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/48c8e301-1404-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:17:11.0040472+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("48c8e301-1404-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:17:10.163+00:00"); return t }()),
					Status:               to.Ptr("Failed"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:17:09.897+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/2e63fdbc-1404-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:16:27.3128731+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("2e63fdbc-1404-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:16:25.897+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:01:27.899+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/15ee63e4-1402-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:01:26.6282252+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("15ee63e4-1402-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:01:25.899+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:46:39.511+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/0508f316-1400-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:46:40.577983+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("0508f316-1400-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:46:38.511+00:00"); return t }()),
					Status:               to.Ptr("Failed"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:46:37.843+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/fd799a51-13ff-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:46:28.4660077+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("fd799a51-13ff-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:46:25.843+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:31:27.818+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/e504ae1b-13fd-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:31:28.1503168+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("e504ae1b-13fd-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:31:25.818+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:16:59.538+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/cd3ed224-13fb-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:16:37.1768158+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("cd3ed224-13fb-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:16:35.538+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:16:34.956+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/cd3ed223-13fb-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:16:29.2370664+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("cd3ed223-13fb-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:16:26.956+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:02:02.916+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/b6915efa-13f9-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:01:31.875597+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("b6915efa-13f9-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:01:29.916+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:46:44.626+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/a3560dca-13f7-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:46:39.749649+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("a3560dca-13f7-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:46:38.626+00:00"); return t }()),
					Status:               to.Ptr("Failed"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:46:37.676+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/9b9bb016-13f7-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:46:27.2602881+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("9b9bb016-13f7-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:46:25.676+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:40:24.805+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/833bd89b-13f5-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:31:27.1356547+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("833bd89b-13f5-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:31:25.805+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscNodeReportListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscNodeReportListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listDscNodeReportsByNode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeReportsByNode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Paged DSC reports by node id."},
	})
	client = armautomation.NewNodeReportsClient("subid", cred, &options)
	pager = client.ListByNode("rg",
		"myAutomationAccount33",
		"nodeId",
		&armautomation.NodeReportsClientListByNodeOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeReportsByNode.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscNodeReportListResult{
			Value: []*armautomation.DscNodeReport{
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:27.587+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/903a5ead-140c-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:29.4440401+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("903a5ead-140c-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:27.587+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:27.015+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/903a5eac-140c-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:28.3813034+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("903a5eac-140c-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:26.015+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:26.986+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/77c280c2-140a-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:28.216963+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("77c280c2-140a-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:25.986+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:46:28.668+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/5f4f5382-1408-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:46:29.0439184+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("5f4f5382-1408-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:46:27.668+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:46:26.957+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/5f4f5381-1408-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:46:27.9498533+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("5f4f5381-1408-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:46:25.957+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:31:26.941+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/46d97d6a-1406-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:31:27.6825492+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("46d97d6a-1406-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:31:25.941+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:17:10.163+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/48c8e301-1404-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:17:11.0040472+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("48c8e301-1404-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:17:10.163+00:00"); return t }()),
					Status:               to.Ptr("Failed"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:17:09.897+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/2e63fdbc-1404-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:16:27.3128731+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("2e63fdbc-1404-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:16:25.897+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:01:27.899+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/15ee63e4-1402-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:01:26.6282252+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("15ee63e4-1402-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:01:25.899+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:46:39.511+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/0508f316-1400-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:46:40.577983+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("0508f316-1400-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:46:38.511+00:00"); return t }()),
					Status:               to.Ptr("Failed"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:46:37.843+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/fd799a51-13ff-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:46:28.4660077+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("fd799a51-13ff-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:46:25.843+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:31:27.818+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/e504ae1b-13fd-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:31:28.1503168+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("e504ae1b-13fd-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:31:25.818+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:16:59.538+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/cd3ed224-13fb-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:16:37.1768158+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("cd3ed224-13fb-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:16:35.538+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:16:34.956+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/cd3ed223-13fb-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:16:29.2370664+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("cd3ed223-13fb-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:16:26.956+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:02:02.916+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/b6915efa-13f9-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:01:31.875597+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("b6915efa-13f9-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:01:29.916+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:46:44.626+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/a3560dca-13f7-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:46:39.749649+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("a3560dca-13f7-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:46:38.626+00:00"); return t }()),
					Status:               to.Ptr("Failed"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:46:37.676+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/9b9bb016-13f7-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:46:27.2602881+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("9b9bb016-13f7-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:46:25.676+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				},
				{
					Type:                 to.Ptr("Consistency"),
					ConfigurationVersion: to.Ptr("2.0.0"),
					EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:40:24.805+00:00"); return t }()),
					ID:                   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/833bd89b-13f5-11e7-a943-000d3a6140c9"),
					LastModifiedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:31:27.1356547+00:00"); return t }()),
					RebootRequested:      to.Ptr("False"),
					RefreshMode:          to.Ptr("Pull"),
					ReportFormatVersion:  to.Ptr("2.0"),
					ReportID:             to.Ptr("833bd89b-13f5-11e7-a943-000d3a6140c9"),
					StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T20:31:25.805+00:00"); return t }()),
					Status:               to.Ptr("Compliant"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscNodeReportListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscNodeReportListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeReportsByNode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNodeReports_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getDscNodeReport.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Dsc node report data by node id and report id. "},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewNodeReportsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"nodeId",
		"903a5ead-140c-11e7-a943-000d3a6140c9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getDscNodeReport.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.DscNodeReport{
			Type:                 to.Ptr("Consistency"),
			ConfigurationVersion: to.Ptr("2.0.0"),
			EndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:27.587+00:00"); return t }()),
			Errors:               []*armautomation.DscReportError{},
			HostName:             to.Ptr("DSCCOMP"),
			IPV4Addresses: []*string{
				to.Ptr("172.16.2.5"),
				to.Ptr("127.0.0.1")},
			IPV6Addresses: []*string{
				to.Ptr("fe80::4c51:9518:aa3c:256a%5"),
				to.Ptr("::2000:0:0:0"),
				to.Ptr("::1"),
				to.Ptr("::2000:0:0:0"),
				to.Ptr("2001:0:9d38:78cf:106b:130a:53ef:fdfa"),
				to.Ptr("fe80::106b:130a:53ef:fdfa%7")},
			ID:               to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodes/nodeId/reports/903a5ead-140c-11e7-a943-000d3a6140c9"),
			LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:29.4440401+00:00"); return t }()),
			MetaConfiguration: &armautomation.DscMetaConfiguration{
				ActionAfterReboot:              to.Ptr("ContinueConfiguration"),
				AllowModuleOverwrite:           to.Ptr(false),
				CertificateID:                  to.Ptr("certId"),
				ConfigurationMode:              to.Ptr("ApplyAndMonitor"),
				ConfigurationModeFrequencyMins: to.Ptr[int32](15),
				RebootNodeIfNeeded:             to.Ptr(false),
				RefreshFrequencyMins:           to.Ptr[int32](30),
			},
			NumberOfResources:   to.Ptr[int32](1),
			RebootRequested:     to.Ptr("False"),
			RefreshMode:         to.Ptr("Pull"),
			ReportFormatVersion: to.Ptr("2.0"),
			ReportID:            to.Ptr("903a5ead-140c-11e7-a943-000d3a6140c9"),
			Resources: []*armautomation.DscReportResource{
				{
					DependsOn:         []*armautomation.DscReportResourceNavigation{},
					DurationInSeconds: to.Ptr[float64](0.25),
					ModuleName:        to.Ptr("PsDesiredStateConfiguration"),
					ModuleVersion:     to.Ptr("1.1"),
					ResourceID:        to.Ptr("[WindowsFeature]IIS"),
					ResourceName:      to.Ptr("WindowsFeature"),
					SourceInfo:        to.Ptr("::4::32::WindowsFeature"),
					StartDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:28.181+00:00"); return t }()),
					Status:            to.Ptr("Compliant"),
				}},
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:16:27.587+00:00"); return t }()),
			Status:    to.Ptr("Compliant"),
		}
		if !reflect.DeepEqual(exampleRes, res.DscNodeReport) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DscNodeReport)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getDscNodeReport.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNodeReports_GetContent(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getDscNodeReportContent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get content of node"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewNodeReportsClient("subid", cred, &options)
	res, err := client.GetContent(ctx,
		"rg",
		"myAutomationAccount33",
		"nodeId",
		"reportId",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getDscNodeReportContent.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{
			"AdditionalData": []interface{}{
				map[string]interface{}{
					"Key":   "OSVersion",
					"Value": "{\"VersionString\":\"Microsoft Windows NT 6.1.7601 Service Pack 1\",\"ServicePack\":\"Service Pack 1\",\"Platform\":\"Win32NT\"}",
				},
				map[string]interface{}{
					"Key":   "PSVersion",
					"Value": "{\"CLRVersion\":\"4.0.30319.42000\",\"PSVersion\":\"5.1.14409.1012\",\"BuildVersion\":\"10.0.14409.1012\"}",
				},
			},
			"Errors":              []interface{}{},
			"IpAddress":           "10.13.49.8;127.0.0.1;fe80::2cc0:8062:a210:e1c6%11;::2000:0:0:0;::1;::2000:0:0:0",
			"JobId":               "eabe061f-2e1f-11e8-8d01-000d3a18dec4",
			"LCMVersion":          "2.0",
			"NodeName":            "ANAGG-2008R2",
			"OperationType":       "Consistency",
			"ReportFormatVersion": "2.0",
			"StartTime":           "2018-03-22T22:25:26.2140000+00:00",
			"StatusData": []interface{}{
				"{\"IPV4Addresses\":[\"10.13.49.8\",\"127.0.0.1\"],\"MACAddresses\":[\"00-0D-3A-18-DE-C4\",\"00-00-00-00-00-00-00-E0\"],\"Type\":\"Consistency\",\"HostName\":\"ANAGG-2008R2\",\"Locale\":\"en-US\",\"StartDate\":\"2018-03-22T22:25:26.2140000+00:00\",\"JobID\":\"{EABE061F-2E1F-11E8-8D01-000D3A18DEC4}\",\"LCMVersion\":\"2.0\",\"IPV6Addresses\":[\"fe80::2cc0:8062:a210:e1c6%11\",\"::2000:0:0:0\",\"::1\",\"::2000:0:0:0\"]}",
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getDscNodeReportContent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscNodeConfiguration_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteDscNodeConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a DSC node configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscNodeConfigurationClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount20",
		"configName.nodeConfigName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteDscNodeConfiguration.json: %v", err)
	}
}

func TestDscNodeConfiguration_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getDscNodeConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a DSC node configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscNodeConfigurationClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"SetupServer.localhost",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getDscNodeConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.DscNodeConfiguration{
			Name: to.Ptr("SetupServer.localhost"),
			Type: to.Ptr("Microsoft.Automation/AutomationAccounts/nodeConfigurations"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodeConfigurations/SetupServer.localhost"),
			Properties: &armautomation.DscNodeConfigurationProperties{
				Configuration: &armautomation.DscConfigurationAssociationProperty{
					Name: to.Ptr("SetupServer"),
				},
				CreationTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
				IncrementNodeConfigurationBuild: to.Ptr(false),
				LastModifiedTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
				NodeCount:                       to.Ptr[int64](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DscNodeConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DscNodeConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getDscNodeConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscNodeConfiguration_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateDscNodeConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create node configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscNodeConfigurationClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount20",
		"configName.nodeConfigName",
		armautomation.DscNodeConfigurationCreateOrUpdateParameters{
			Name: to.Ptr("configName.nodeConfigName"),
			Properties: &armautomation.DscNodeConfigurationCreateOrUpdateParametersProperties{
				Configuration: &armautomation.DscConfigurationAssociationProperty{
					Name: to.Ptr("configName"),
				},
				IncrementNodeConfigurationBuild: to.Ptr(true),
				Source: &armautomation.ContentSource{
					Type: to.Ptr(armautomation.ContentSourceTypeEmbeddedContent),
					Hash: &armautomation.ContentHash{
						Algorithm: to.Ptr("sha256"),
						Value:     to.Ptr("6DE256A57F01BFA29B88696D5E77A383D6E61484C7686E8DB955FA10ACE9FFE5"),
					},
					Value:   to.Ptr("\r\ninstance of MSFT_RoleResource as $MSFT_RoleResource1ref\r\n{\r\nResourceID = \"[WindowsFeature]IIS\";\r\n Ensure = \"Present\";\r\n SourceInfo = \"::3::32::WindowsFeature\";\r\n Name = \"Web-Server\";\r\n ModuleName = \"PsDesiredStateConfiguration\";\r\n\r\nModuleVersion = \"1.0\";\r\r\n ConfigurationName = \"configName\";\r\r\n};\r\ninstance of OMI_ConfigurationDocument\r\n\r\r\n                    {\r\n Version=\"2.0.0\";\r\n \r\r\n                        MinimumCompatibleVersion = \"1.0.0\";\r\n \r\r\n                        CompatibleVersionAdditionalProperties= {\"Omi_BaseResource:ConfigurationName\"};\r\n \r\r\n                        Author=\"weijiel\";\r\n \r\r\n                        GenerationDate=\"03/30/2017 13:40:25\";\r\n \r\r\n                        GenerationHost=\"TEST-BACKEND\";\r\n \r\r\n                        Name=\"configName\";\r\n\r\r\n                    };\r\n"),
					Version: to.Ptr("1.0"),
				},
			},
		},
		&armautomation.DscNodeConfigurationClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateDscNodeConfiguration.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateDscNodeConfiguration.json: %v", err)
	}
}

func TestDscNodeConfiguration_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listDscNodeConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List DSC node configurations by Automation Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscNodeConfigurationClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscNodeConfigurationClientListByAutomationAccountOptions{Filter: nil,
			Skip:        nil,
			Top:         nil,
			Inlinecount: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listDscNodeConfigurations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscNodeConfigurationListResult{
			Value: []*armautomation.DscNodeConfiguration{
				{
					Name: to.Ptr("SetupServer.localhost"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/nodeConfigurations"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodeConfigurations/SetupServer.localhost"),
					Properties: &armautomation.DscNodeConfigurationProperties{
						Configuration: &armautomation.DscConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer"),
						},
						CreationTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						IncrementNodeConfigurationBuild: to.Ptr(false),
						LastModifiedTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						NodeCount:                       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("SetupServer.localhost"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/nodeConfigurations"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodeConfigurations/SetupServer.localhost"),
					Properties: &armautomation.DscNodeConfigurationProperties{
						Configuration: &armautomation.DscConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer"),
						},
						CreationTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						IncrementNodeConfigurationBuild: to.Ptr(false),
						LastModifiedTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						NodeCount:                       to.Ptr[int64](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscNodeConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscNodeConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listDscNodeConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeConfigurationsWithNameFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Paged DSC node configurations by Automation Account with name filter"},
	})
	client = armautomation.NewDscNodeConfigurationClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscNodeConfigurationClientListByAutomationAccountOptions{Filter: to.Ptr("contains('.localhost',name)"),
			Skip:        to.Ptr[int32](0),
			Top:         to.Ptr[int32](2),
			Inlinecount: to.Ptr("allpages"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeConfigurationsWithNameFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscNodeConfigurationListResult{
			TotalCount: to.Ptr[int32](6),
			Value: []*armautomation.DscNodeConfiguration{
				{
					Name: to.Ptr("server.localhost"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/nodeConfigurations"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodeConfigurations/SetupServer.localhost"),
					Properties: &armautomation.DscNodeConfigurationProperties{
						Configuration: &armautomation.DscConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						NodeCount:        to.Ptr[int64](2),
					},
				},
				{
					Name: to.Ptr("SetupClient.localhost"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/nodeConfigurations"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodeConfigurations/SetupClient.localhost"),
					Properties: &armautomation.DscNodeConfigurationProperties{
						Configuration: &armautomation.DscConfigurationAssociationProperty{
							Name: to.Ptr("SetupClient"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						NodeCount:        to.Ptr[int64](6),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscNodeConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscNodeConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeConfigurationsWithNameFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeConfigurationsWithNoFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Paged DSC node configurations by Automation Account with no filter"},
	})
	client = armautomation.NewDscNodeConfigurationClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscNodeConfigurationClientListByAutomationAccountOptions{Filter: nil,
			Skip:        to.Ptr[int32](0),
			Top:         to.Ptr[int32](4),
			Inlinecount: to.Ptr("allpages"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeConfigurationsWithNoFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscNodeConfigurationListResult{
			TotalCount: to.Ptr[int32](12),
			Value: []*armautomation.DscNodeConfiguration{
				{
					Name: to.Ptr("server.localhost"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/nodeConfigurations"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodeConfigurations/SetupServer.localhost"),
					Properties: &armautomation.DscNodeConfigurationProperties{
						Configuration: &armautomation.DscConfigurationAssociationProperty{
							Name: to.Ptr("SetupServer"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						NodeCount:        to.Ptr[int64](2),
					},
				},
				{
					Name: to.Ptr("SetupClient.localhost"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/nodeConfigurations"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodeConfigurations/SetupClient.localhost"),
					Properties: &armautomation.DscNodeConfigurationProperties{
						Configuration: &armautomation.DscConfigurationAssociationProperty{
							Name: to.Ptr("SetupClient"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						NodeCount:        to.Ptr[int64](6),
					},
				},
				{
					Name: to.Ptr("webServer.localhost"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/nodeConfigurations"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodeConfigurations/webServer.localhost"),
					Properties: &armautomation.DscNodeConfigurationProperties{
						Configuration: &armautomation.DscConfigurationAssociationProperty{
							Name: to.Ptr("webServer"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						NodeCount:        to.Ptr[int64](5),
					},
				},
				{
					Name: to.Ptr("SqlServer.localhost"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/nodeConfigurations"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/nodeConfigurations/SqlServer.localhost"),
					Properties: &armautomation.DscNodeConfigurationProperties{
						Configuration: &armautomation.DscConfigurationAssociationProperty{
							Name: to.Ptr("SqlServer"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:17:06.8901968+00:00"); return t }()),
						NodeCount:        to.Ptr[int64](1),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscNodeConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscNodeConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeConfigurationsWithNoFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscCompilationJob_Create(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createCompilationJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a DSC Compilation job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscCompilationJobClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"rg",
		"myAutomationAccount33",
		"TestCompilationJob",
		armautomation.DscCompilationJobCreateParameters{
			Properties: &armautomation.DscCompilationJobCreateProperties{
				Configuration: &armautomation.DscConfigurationAssociationProperty{
					Name: to.Ptr("SetupServer"),
				},
			},
		},
		&armautomation.DscCompilationJobClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createCompilationJob.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createCompilationJob.json: %v", err)
	}
}

func TestDscCompilationJob_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getCompilationJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a DSC Compilation job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscCompilationJobClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"TestCompilationJob",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getCompilationJob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.DscCompilationJob{
			Name: to.Ptr("TestCompilationJob"),
			Type: to.Ptr("Microsoft.Automation/AutomationAccounts/compilationjobs"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/compilationjobs/TestCompilationJob"),
			Properties: &armautomation.DscCompilationJobProperties{
				Configuration: &armautomation.DscConfigurationAssociationProperty{
					Name: to.Ptr("SetupServer"),
				},
				CreationTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:26.903+00:00"); return t }()),
				JobID:                  to.Ptr("ce6fe3e3-9db3-4096-a6b4-82bfb4c10a9a"),
				LastModifiedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:26.903+00:00"); return t }()),
				LastStatusModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:26.903+00:00"); return t }()),
				ProvisioningState:      to.Ptr(armautomation.JobProvisioningStateSucceeded),
				Status:                 to.Ptr(armautomation.JobStatusNew),
				StatusDetails:          to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DscCompilationJob) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DscCompilationJob)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getCompilationJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscCompilationJob_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listCompilationJobsByAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List DSC Compilation job in Automation Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscCompilationJobClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscCompilationJobClientListByAutomationAccountOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listCompilationJobsByAutomationAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscCompilationJobListResult{
			Value: []*armautomation.DscCompilationJob{
				{
					Name: to.Ptr("CompilationConfiguration1"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/compilationjobs"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/compilationjobs/"),
					Properties: &armautomation.DscCompilationJobProperties{
						Configuration: &armautomation.DscConfigurationAssociationProperty{
							Name: to.Ptr("TestDscConfiguration"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-17T19:45:24.59+00:00"); return t }()),
						JobID:            to.Ptr("e6e7fbab-183c-405a-afe6-9eb5db97921a"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-17T19:45:58.5933333+00:00"); return t }()),
						StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-17T19:45:52.9833333+00:00"); return t }()),
						Status:           to.Ptr(armautomation.JobStatusSuspended),
					},
				},
				{
					Name: to.Ptr("CompilationConfiguration2"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/compilationjobs"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/compilationjobs/"),
					Properties: &armautomation.DscCompilationJobProperties{
						Configuration: &armautomation.DscConfigurationAssociationProperty{
							Name: to.Ptr("NewDscConfiguration"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T21:29:07.74+00:00"); return t }()),
						EndTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T21:30:42.6+00:00"); return t }()),
						JobID:            to.Ptr("111d4e06-2d88-46b4-8500-7febd4906838"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T21:30:42.6+00:00"); return t }()),
						StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T21:30:26.48+00:00"); return t }()),
						Status:           to.Ptr(armautomation.JobStatusCompleted),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscCompilationJobListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscCompilationJobListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listCompilationJobsByAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscCompilationJob_GetStream(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/compilationJobStreamByJobStreamId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a DSC Compilation job stream by job stream id"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscCompilationJobClient("subid", cred, &options)
	res, err := client.GetStream(ctx,
		"rg",
		"myAutomationAccount33",
		"836d4e06-2d88-46b4-8500-7febd4906838",
		"836d4e06-2d88-46b4-8500-7febd4906838_00636481062421684835_00000000000000000008",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/compilationJobStreamByJobStreamId.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.JobStream{
			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/compilationjobs/836d4e06-2d88-46b4-8500-7febd4906838/streams/836d4e06-2d88-46b4-8500-7febd4906838_00636481062421684835_00000000000000000008"),
			Properties: &armautomation.JobStreamProperties{
				JobStreamID: to.Ptr("836d4e06-2d88-46b4-8500-7febd4906838:00636481062421684835:00000000000000000001"),
				StreamText:  to.Ptr(""),
				StreamType:  to.Ptr(armautomation.JobStreamTypeOutput),
				Summary:     to.Ptr(""),
				Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T21:30:42.1684835+00:00"); return t }()),
				Value: map[string]interface{}{
					"PSComputerName":        "localhost",
					"PSShowComputerName":    true,
					"PSSourceJobInstanceId": "836d4e06-2d88-46b4-8500-7febd4906838",
					"value":                 "",
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobStream) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobStream)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/compilationJobStreamByJobStreamId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscCompilationJobStream_ListByJob(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/compilationJobStreamList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List DSC Compilation job streams"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscCompilationJobStreamClient("subid", cred, &options)
	res, err := client.ListByJob(ctx,
		"rg",
		"myAutomationAccount33",
		"836d4e06-2d88-46b4-8500-7febd4906838",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/compilationJobStreamList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.JobStreamListResult{
			Value: []*armautomation.JobStream{
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/compilationjobs/836d4e06-2d88-46b4-8500-7febd4906838/streams/836d4e06-2d88-46b4-8500-7febd4906838_00636481062355996678_00000000000000000001"),
					Properties: &armautomation.JobStreamProperties{
						JobStreamID: to.Ptr("836d4e06-2d88-46b4-8500-7febd4906838_00636481062355996678_00000000000000000001"),
						StreamType:  to.Ptr(armautomation.JobStreamTypeWarning),
						Summary:     to.Ptr("836d4e06-2d88-46b4-8500-7febd4906838:[localhost]:The 'Microsoft.PowerShell.Management' module was not imported because the 'Microsoft.PowerShell.Management' snap-in was already imported."),
						Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T21:30:35.5996678+00:00"); return t }()),
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/compilationjobs/836d4e06-2d88-46b4-8500-7febd4906838/streams/836d4e06-2d88-46b4-8500-7febd4906838_00636481062380840740_00000000000000000002"),
					Properties: &armautomation.JobStreamProperties{
						JobStreamID: to.Ptr("836d4e06-2d88-46b4-8500-7febd4906838_00636481062380840740_00000000000000000002"),
						StreamType:  to.Ptr(armautomation.JobStreamTypeWarning),
						Summary:     to.Ptr("836d4e06-2d88-46b4-8500-7febd4906838:[localhost]:The configuration 'NewDscConfiguration' is loading one or more built-in resources without explicitly importing associated modules. Add Import-DscResource –ModuleName 'PSDesiredStateConfiguration' to your configuration to avoid this message."),
						Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T21:30:38.084074+00:00"); return t }()),
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/compilationjobs/836d4e06-2d88-46b4-8500-7febd4906838/streams/836d4e06-2d88-46b4-8500-7febd4906838_00636481062384590127_00000000000000000003"),
					Properties: &armautomation.JobStreamProperties{
						JobStreamID: to.Ptr("836d4e06-2d88-46b4-8500-7febd4906838_00636481062384590127_00000000000000000003"),
						StreamType:  to.Ptr(armautomation.JobStreamTypeWarning),
						Summary:     to.Ptr("836d4e06-2d88-46b4-8500-7febd4906838:[localhost]:The 'Microsoft.PowerShell.Management' module was not imported because the 'Microsoft.PowerShell.Management' snap-in was already imported."),
						Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T21:30:38.4590127+00:00"); return t }()),
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/compilationjobs/836d4e06-2d88-46b4-8500-7febd4906838/streams/836d4e06-2d88-46b4-8500-7febd4906838_00636481062387245395_00000000000000000004"),
					Properties: &armautomation.JobStreamProperties{
						JobStreamID: to.Ptr("836d4e06-2d88-46b4-8500-7febd4906838_00636481062387245395_00000000000000000004"),
						StreamType:  to.Ptr(armautomation.JobStreamTypeWarning),
						Summary:     to.Ptr("836d4e06-2d88-46b4-8500-7febd4906838:[localhost]:The configuration 'NewDscConfiguration' is loading one or more built-in resources without explicitly importing associated modules. Add Import-DscResource –ModuleName 'PSDesiredStateConfiguration' to your configuration to avoid this message."),
						Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T21:30:38.7245395+00:00"); return t }()),
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/compilationjobs/836d4e06-2d88-46b4-8500-7febd4906838/streams/836d4e06-2d88-46b4-8500-7febd4906838_00636481062417091181_00000000000000000005"),
					Properties: &armautomation.JobStreamProperties{
						JobStreamID: to.Ptr("836d4e06-2d88-46b4-8500-7febd4906838_00636481062417091181_00000000000000000005"),
						StreamType:  to.Ptr(armautomation.JobStreamTypeOutput),
						Summary:     to.Ptr(""),
						Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T21:30:41.7091181+00:00"); return t }()),
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/compilationjobs/836d4e06-2d88-46b4-8500-7febd4906838/streams/836d4e06-2d88-46b4-8500-7febd4906838_00636481062418809632_00000000000000000006"),
					Properties: &armautomation.JobStreamProperties{
						JobStreamID: to.Ptr("836d4e06-2d88-46b4-8500-7febd4906838_00636481062418809632_00000000000000000006"),
						StreamType:  to.Ptr(armautomation.JobStreamTypeOutput),
						Summary:     to.Ptr(""),
						Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T21:30:41.8809632+00:00"); return t }()),
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/compilationjobs/836d4e06-2d88-46b4-8500-7febd4906838/streams/836d4e06-2d88-46b4-8500-7febd4906838_00636481062420371712_00000000000000000007"),
					Properties: &armautomation.JobStreamProperties{
						JobStreamID: to.Ptr("836d4e06-2d88-46b4-8500-7febd4906838_00636481062420371712_00000000000000000007"),
						StreamType:  to.Ptr(armautomation.JobStreamTypeOutput),
						Summary:     to.Ptr(""),
						Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T21:30:42.0371712+00:00"); return t }()),
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/compilationjobs/836d4e06-2d88-46b4-8500-7febd4906838/streams/836d4e06-2d88-46b4-8500-7febd4906838_00636481062421684835_00000000000000000008"),
					Properties: &armautomation.JobStreamProperties{
						JobStreamID: to.Ptr("836d4e06-2d88-46b4-8500-7febd4906838_00636481062421684835_00000000000000000008"),
						StreamType:  to.Ptr(armautomation.JobStreamTypeOutput),
						Summary:     to.Ptr(""),
						Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-05T21:30:42.1684835+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.JobStreamListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobStreamListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/compilationJobStreamList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNodeCountInformation_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeConfigurationCounts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get node's node configuration counts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewNodeCountInformationClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		armautomation.CountTypeNodeconfiguration,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeConfigurationCounts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.NodeCounts{
			TotalCount: to.Ptr[int32](16),
			Value: []*armautomation.NodeCount{
				{
					Name: to.Ptr("client.localhost"),
					Properties: &armautomation.NodeCountProperties{
						Count: to.Ptr[int32](24),
					},
				},
				{
					Name: to.Ptr("server.localhost"),
					Properties: &armautomation.NodeCountProperties{
						Count: to.Ptr[int32](3),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.NodeCounts) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NodeCounts)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeConfigurationCounts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeStatusCounts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get node's status counts"},
	})
	client = armautomation.NewNodeCountInformationClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		armautomation.CountTypeStatus,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeStatusCounts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.NodeCounts{
			TotalCount: to.Ptr[int32](6),
			Value: []*armautomation.NodeCount{
				{
					Name: to.Ptr("Compliant"),
					Properties: &armautomation.NodeCountProperties{
						Count: to.Ptr[int32](10),
					},
				},
				{
					Name: to.Ptr("Failed"),
					Properties: &armautomation.NodeCountProperties{
						Count: to.Ptr[int32](1),
					},
				},
				{
					Name: to.Ptr("InProgress"),
					Properties: &armautomation.NodeCountProperties{
						Count: to.Ptr[int32](1),
					},
				},
				{
					Name: to.Ptr("NotCompliant"),
					Properties: &armautomation.NodeCountProperties{
						Count: to.Ptr[int32](3),
					},
				},
				{
					Name: to.Ptr("Pending"),
					Properties: &armautomation.NodeCountProperties{
						Count: to.Ptr[int32](0),
					},
				},
				{
					Name: to.Ptr("Unresponsive"),
					Properties: &armautomation.NodeCountProperties{
						Count: to.Ptr[int32](4),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.NodeCounts) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NodeCounts)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listPagedDscNodeStatusCounts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControl_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControl/createOrUpdateSourceControl.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a source control"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSourceControlClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"sampleAccount9",
		"sampleSourceControl",
		armautomation.SourceControlCreateOrUpdateParameters{
			Properties: &armautomation.SourceControlCreateOrUpdateProperties{
				Description:    to.Ptr("my description"),
				AutoSync:       to.Ptr(true),
				Branch:         to.Ptr("master"),
				FolderPath:     to.Ptr("/folderOne/folderTwo"),
				PublishRunbook: to.Ptr(true),
				RepoURL:        to.Ptr("https://sampleUser.visualstudio.com/myProject/_git/myRepository"),
				SecurityToken: &armautomation.SourceControlSecurityTokenProperties{
					AccessToken: to.Ptr("3a326f7a0dcd343ea58fee21f2fd5fb4c1234567"),
					TokenType:   to.Ptr(armautomation.TokenTypePersonalAccessToken),
				},
				SourceType: to.Ptr(armautomation.SourceTypeVsoGit),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControl/createOrUpdateSourceControl.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.SourceControl{
			Name: to.Ptr("sampleSourceControl"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/sourcecontrols/sampleSourceControl"),
			Properties: &armautomation.SourceControlProperties{
				Description:      to.Ptr("my description"),
				AutoSync:         to.Ptr(true),
				Branch:           to.Ptr("master"),
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
				FolderPath:       to.Ptr("/folderOne/folderTwo"),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
				PublishRunbook:   to.Ptr(true),
				RepoURL:          to.Ptr("https://sampleUser.visualstudio.com/myProject/_git/myRepository"),
				SourceType:       to.Ptr(armautomation.SourceTypeVsoGit),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SourceControl) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SourceControl)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControl/createOrUpdateSourceControl.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControl_Update(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControl/updateSourceControl_patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a source control"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSourceControlClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"sampleAccount9",
		"sampleSourceControl",
		armautomation.SourceControlUpdateParameters{
			Properties: &armautomation.SourceControlUpdateProperties{
				Description:    to.Ptr("my description"),
				AutoSync:       to.Ptr(true),
				Branch:         to.Ptr("master"),
				FolderPath:     to.Ptr("/folderOne/folderTwo"),
				PublishRunbook: to.Ptr(true),
				SecurityToken: &armautomation.SourceControlSecurityTokenProperties{
					AccessToken: to.Ptr("3a326f7a0dcd343ea58fee21f2fd5fb4c1234567"),
					TokenType:   to.Ptr(armautomation.TokenTypePersonalAccessToken),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControl/updateSourceControl_patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.SourceControl{
			Name: to.Ptr("sampleSourceControl"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/sourcecontrols/sampleSourceControl"),
			Properties: &armautomation.SourceControlProperties{
				Description:      to.Ptr("my description"),
				AutoSync:         to.Ptr(true),
				Branch:           to.Ptr("master"),
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
				FolderPath:       to.Ptr("/folderOne/folderTwo"),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
				PublishRunbook:   to.Ptr(true),
				RepoURL:          to.Ptr("https://sampleUser.visualstudio.com/myProject/_git/myRepository"),
				SourceType:       to.Ptr(armautomation.SourceTypeVsoGit),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SourceControl) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SourceControl)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControl/updateSourceControl_patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControl_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControl/deleteSourceControl.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a source control"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSourceControlClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"sampleAccount9",
		"sampleSourceControl",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControl/deleteSourceControl.json: %v", err)
	}
}

func TestSourceControl_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControl/getSourceControl.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a source control"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSourceControlClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"sampleAccount9",
		"sampleSourceControl",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControl/getSourceControl.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.SourceControl{
			Name: to.Ptr("sampleSourceControl"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/sourcecontrols/sampleSourceControl"),
			Properties: &armautomation.SourceControlProperties{
				Description:      to.Ptr("my description"),
				AutoSync:         to.Ptr(true),
				Branch:           to.Ptr("master"),
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
				FolderPath:       to.Ptr("/folderOne/folderTwo"),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
				PublishRunbook:   to.Ptr(true),
				RepoURL:          to.Ptr("https://github.com/SampleUserRepro/PowerShell"),
				SourceType:       to.Ptr(armautomation.SourceTypeGitHub),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SourceControl) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SourceControl)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControl/getSourceControl.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControl_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControl/getAllSourceControls.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List sourceControls"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSourceControlClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"sampleAccount9",
		&armautomation.SourceControlClientListByAutomationAccountOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControl/getAllSourceControls.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.SourceControlListResult{
			Value: []*armautomation.SourceControl{
				{
					Name: to.Ptr("sampleSourceControl1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/sourcecontrols/sampleSourceControl1"),
					Properties: &armautomation.SourceControlProperties{
						Description:      to.Ptr("my description"),
						AutoSync:         to.Ptr(true),
						Branch:           to.Ptr("master"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
						FolderPath:       to.Ptr("/sampleFolder/sampleFolder2"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
						PublishRunbook:   to.Ptr(true),
						RepoURL:          to.Ptr("https://github.com/SampleUserRepro/PowerShell-1"),
						SourceType:       to.Ptr(armautomation.SourceTypeGitHub),
					},
				},
				{
					Name: to.Ptr("sampleSourceControl2"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/sourcecontrols/sampleSourceControl2"),
					Properties: &armautomation.SourceControlProperties{
						Description:      to.Ptr("my description"),
						AutoSync:         to.Ptr(true),
						Branch:           to.Ptr("master"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
						FolderPath:       to.Ptr("/sampleFolder/sampleFolder2"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
						PublishRunbook:   to.Ptr(true),
						RepoURL:          to.Ptr("https://github.com/SampleUserRepro/PowerShell-2"),
						SourceType:       to.Ptr(armautomation.SourceTypeGitHub),
					},
				},
				{
					Name: to.Ptr("sampleSourceControl3"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/sourcecontrols/sampleSourceControl3"),
					Properties: &armautomation.SourceControlProperties{
						Description:      to.Ptr("my description"),
						AutoSync:         to.Ptr(true),
						Branch:           to.Ptr("master"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
						FolderPath:       to.Ptr("/sampleFolder/sampleFolder2"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
						PublishRunbook:   to.Ptr(true),
						RepoURL:          to.Ptr("https://github.com/SampleUserRepro/PowerShell-3"),
						SourceType:       to.Ptr(armautomation.SourceTypeGitHub),
					},
				},
				{
					Name: to.Ptr("sampleSourceControl4"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/sourcecontrols/sampleSourceControl4"),
					Properties: &armautomation.SourceControlProperties{
						Description:      to.Ptr("my description"),
						AutoSync:         to.Ptr(true),
						Branch:           to.Ptr("master"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
						FolderPath:       to.Ptr("/sampleFolder/sampleFolder2"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
						PublishRunbook:   to.Ptr(true),
						RepoURL:          to.Ptr("https://github.com/SampleUserRepro/PowerShell-4"),
						SourceType:       to.Ptr(armautomation.SourceTypeGitHub),
					},
				},
				{
					Name: to.Ptr("sampleSourceControl5"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/sourcecontrols/sampleSourceControl5"),
					Properties: &armautomation.SourceControlProperties{
						Description:      to.Ptr("my description"),
						AutoSync:         to.Ptr(true),
						Branch:           to.Ptr("master"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
						FolderPath:       to.Ptr("/sampleFolder/sampleFolder2"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
						PublishRunbook:   to.Ptr(true),
						RepoURL:          to.Ptr("https://github.com/SampleUserRepro/PowerShell-5"),
						SourceType:       to.Ptr(armautomation.SourceTypeGitHub),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SourceControlListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SourceControlListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControl/getAllSourceControls.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControlSyncJob_Create(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControlSyncJob/createSourceControlSyncJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a source control sync job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSourceControlSyncJobClient("subid", cred, &options)
	_, err := client.Create(ctx,
		"rg",
		"myAutomationAccount33",
		"MySourceControl",
		"ce6fe3e3-9db3-4096-a6b4-82bfb4c10a9a",
		armautomation.SourceControlSyncJobCreateParameters{
			Properties: &armautomation.SourceControlSyncJobCreateProperties{
				CommitID: to.Ptr("9de0980bfb45026a3d97a1b0522d98a9f604226e"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControlSyncJob/createSourceControlSyncJob.json: %v", err)
	}
}

func TestSourceControlSyncJob_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControlSyncJob/getSourceControlSyncJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a source control sync job by job id"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSourceControlSyncJobClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"MySourceControl",
		"ce6fe3e3-9db3-4096-a6b4-82bfb4c10a9a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControlSyncJob/getSourceControlSyncJob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.SourceControlSyncJobByID{
			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/sourceControls/MySourceControl/sourceControlSyncJobs/ce6fe3e3-9db3-4096-a6b4-82bfb4c10a9a"),
			Properties: &armautomation.SourceControlSyncJobByIDProperties{
				CreationTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:26.903+00:00"); return t }()),
				EndTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:28.903+00:00"); return t }()),
				Exception:              to.Ptr(""),
				ProvisioningState:      to.Ptr(armautomation.ProvisioningState("Succeeded")),
				SourceControlSyncJobID: to.Ptr("ce6fe3e3-9db3-4096-a6b4-82bfb4c10a9a"),
				StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:27.903+00:00"); return t }()),
				SyncType:               to.Ptr(armautomation.SyncTypePartialSync),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SourceControlSyncJobByID) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SourceControlSyncJobByID)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControlSyncJob/getSourceControlSyncJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControlSyncJob_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControlSyncJob/getAllSourceControlSyncJobs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of source control sync jobs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSourceControlSyncJobClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		"MySourceControl",
		&armautomation.SourceControlSyncJobClientListByAutomationAccountOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControlSyncJob/getAllSourceControlSyncJobs.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.SourceControlSyncJobListResult{
			Value: []*armautomation.SourceControlSyncJob{
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/sourceControls/MySourceControl/sourceControlSyncJobs/ce6fe3e3-9db3-4096-a6b4-82bfb4c10a1a"),
					Properties: &armautomation.SourceControlSyncJobProperties{
						CreationTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:26.903+00:00"); return t }()),
						EndTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:28.903+00:00"); return t }()),
						ProvisioningState:      to.Ptr(armautomation.ProvisioningState("Succeeded")),
						SourceControlSyncJobID: to.Ptr("ce6fe3e3-9db3-4096-a6b4-82bfb4c10a1a"),
						StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:27.903+00:00"); return t }()),
						SyncType:               to.Ptr(armautomation.SyncTypePartialSync),
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/sourceControls/MySourceControl/sourceControlSyncJobs/ce6fe3e3-9db3-4096-a6b4-82bfb4c10a2a"),
					Properties: &armautomation.SourceControlSyncJobProperties{
						CreationTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:26.903+00:00"); return t }()),
						EndTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:28.903+00:00"); return t }()),
						ProvisioningState:      to.Ptr(armautomation.ProvisioningState("Succeeded")),
						SourceControlSyncJobID: to.Ptr("ce6fe3e3-9db3-4096-a6b4-82bfb4c10a2a"),
						StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:27.903+00:00"); return t }()),
						SyncType:               to.Ptr(armautomation.SyncTypePartialSync),
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/sourceControls/MySourceControl/sourceControlSyncJobs/ce6fe3e3-9db3-4096-a6b4-82bfb4c10a3a"),
					Properties: &armautomation.SourceControlSyncJobProperties{
						CreationTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:26.903+00:00"); return t }()),
						EndTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:28.903+00:00"); return t }()),
						ProvisioningState:      to.Ptr(armautomation.ProvisioningState("Succeeded")),
						SourceControlSyncJobID: to.Ptr("ce6fe3e3-9db3-4096-a6b4-82bfb4c10a3a"),
						StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:27.903+00:00"); return t }()),
						SyncType:               to.Ptr(armautomation.SyncTypePartialSync),
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/sourceControls/MySourceControl/sourceControlSyncJobs/ce6fe3e3-9db3-4096-a6b4-82bfb4c10a4a"),
					Properties: &armautomation.SourceControlSyncJobProperties{
						CreationTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:26.903+00:00"); return t }()),
						EndTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:28.903+00:00"); return t }()),
						ProvisioningState:      to.Ptr(armautomation.ProvisioningState("Succeeded")),
						SourceControlSyncJobID: to.Ptr("ce6fe3e3-9db3-4096-a6b4-82bfb4c10a4a"),
						StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:27.903+00:00"); return t }()),
						SyncType:               to.Ptr(armautomation.SyncTypePartialSync),
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/sourceControls/MySourceControl/sourceControlSyncJobs/ce6fe3e3-9db3-4096-a6b4-82bfb4c10a5a"),
					Properties: &armautomation.SourceControlSyncJobProperties{
						CreationTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:26.903+00:00"); return t }()),
						EndTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:28.903+00:00"); return t }()),
						ProvisioningState:      to.Ptr(armautomation.ProvisioningState("Succeeded")),
						SourceControlSyncJobID: to.Ptr("ce6fe3e3-9db3-4096-a6b4-82bfb4c10a5a"),
						StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:27.903+00:00"); return t }()),
						SyncType:               to.Ptr(armautomation.SyncTypePartialSync),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SourceControlSyncJobListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SourceControlSyncJobListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControlSyncJob/getAllSourceControlSyncJobs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControlSyncJobStreams_ListBySyncJob(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControlSyncJobStreams/getSourceControlSyncJobStreams.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of sync job streams identified by sync job id"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSourceControlSyncJobStreamsClient("subid", cred, &options)
	pager := client.ListBySyncJob("rg",
		"myAutomationAccount33",
		"MySourceControl",
		"ce6fe3e3-9db3-4096-a6b4-82bfb4c10a2b",
		&armautomation.SourceControlSyncJobStreamsClientListBySyncJobOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControlSyncJobStreams/getSourceControlSyncJobStreams.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.SourceControlSyncJobStreamsListBySyncJob{
			Value: []*armautomation.SourceControlSyncJobStream{
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/sourceControls/MySourceControl/sourceControlSyncJobs/ce6fe3e3-9db3-4096-a6b4-82bfb4c10a2b/streams/b86c5c31-e9fd-4734-8764-ddd6c101e706_00636596855134810785_00000000000000000005"),
					Properties: &armautomation.SourceControlSyncJobStreamProperties{
						SourceControlSyncJobStreamID: to.Ptr("b86c5c31-e9fd-4734-8764-ddd6c101e706_00636596855134810785_00000000000000000005"),
						StreamType:                   to.Ptr(armautomation.StreamTypeError),
						Summary:                      to.Ptr("ForbiddenError: The server failed to authenticate the request. Verify that the certificate is valid and is associated with this subscription."),
						Time:                         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:26.903+00:00"); return t }()),
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/sourceControls/MySourceControl/sourceControlSyncJobs/ce6fe3e3-9db3-4096-a6b4-82bfb4c10a2b/streams/b86c5c31-e9fd-4734-8764-ddd6c101e706_00636596855136998262_00000000000000000006"),
					Properties: &armautomation.SourceControlSyncJobStreamProperties{
						SourceControlSyncJobStreamID: to.Ptr("b86c5c31-e9fd-4734-8764-ddd6c101e706_00636596855136998262_00000000000000000006"),
						StreamType:                   to.Ptr(armautomation.StreamTypeError),
						Summary:                      to.Ptr("System.Management.Automation.RuntimeException: Cannot index into a null array.\r\n   at CallSite.Target(Closure , CallSite , Object , Int32 )\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)"),
						Time:                         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:27.903+00:00"); return t }()),
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/sourceControls/MySourceControl/sourceControlSyncJobs/ce6fe3e3-9db3-4096-a6b4-82bfb4c10a2b/streams/b86c5c31-e9fd-4734-8764-ddd6c101e706_00636596855139029522_00000000000000000007"),
					Properties: &armautomation.SourceControlSyncJobStreamProperties{
						SourceControlSyncJobStreamID: to.Ptr("b86c5c31-e9fd-4734-8764-ddd6c101e706_00636596855139029522_00000000000000000007"),
						StreamType:                   to.Ptr(armautomation.StreamTypeError),
						Summary:                      to.Ptr("System.Management.Automation.ParameterBindingValidationException: Cannot validate argument on parameter 'Location'. The argument is null or empty. Provide an argument that is not null or empty, and then try the command again. ---> System.Management.Automation.ValidationMetadataException: The argument is null or empty. Provide an argument that is not null or empty, and then try the command again.\r\n   at System.Management.Automation.ValidateNotNullOrEmptyAttribute.Validate(Object arguments, EngineIntrinsics engineIntrinsics)"),
						Time:                         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:28.903+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SourceControlSyncJobStreamsListBySyncJob) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SourceControlSyncJobStreamsListBySyncJob)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControlSyncJobStreams/getSourceControlSyncJobStreams.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSourceControlSyncJobStreams_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControlSyncJobStreams/getSourceControlSyncJobStreamsByStreamId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a sync job stream identified by sync job stream id."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSourceControlSyncJobStreamsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"MySourceControl",
		"ce6fe3e3-9db3-4096-a6b4-82bfb4c10a2b",
		"b86c5c31-e9fd-4734-8764-ddd6c101e706_00636596855139029522_00000000000000000007",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControlSyncJobStreams/getSourceControlSyncJobStreamsByStreamId.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.SourceControlSyncJobStreamByID{
			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/sourceControls/MySourceControl/sourceControlSyncJobs/ce6fe3e3-9db3-4096-a6b4-82bfb4c10a2b/streams/b86c5c31-e9fd-4734-8764-ddd6c101e706_00636596855139029522_00000000000000000007"),
			Properties: &armautomation.SourceControlSyncJobStreamByIDProperties{
				SourceControlSyncJobStreamID: to.Ptr("b86c5c31-e9fd-4734-8764-ddd6c101e706_00636596855139029522_00000000000000000007"),
				StreamText:                   to.Ptr("New-AzureAffinityGroup : Cannot validate argument on parameter 'Location'. The argument is null or empty. Provide an \r\nargument that is not null or empty, and then try the command again.\r\nAt DatabaseExportImport1fba401e-0:69 char:69\r\n+ \r\n + CategoryInfo : InvalidData: . . . ."),
				StreamType:                   to.Ptr(armautomation.StreamTypeError),
				Summary:                      to.Ptr(""),
				Time:                         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:26.903+00:00"); return t }()),
				Value: map[string]interface{}{
					"Exception": map[string]interface{}{
						"Message": "System.Management.Automation.ParameterBindingValidationException: Cannot validate argument on parameter 'Location'. The argument is null or empty . . .} }",
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SourceControlSyncJobStreamByID) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SourceControlSyncJobStreamByID)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/sourceControlSyncJobStreams/getSourceControlSyncJobStreamsByStreamId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutomationAccount_Update(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/updateAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an automation account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewAccountClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount9",
		armautomation.AccountUpdateParameters{
			Name:     to.Ptr("myAutomationAccount9"),
			Location: to.Ptr("East US 2"),
			Properties: &armautomation.AccountUpdateProperties{
				SKU: &armautomation.SKU{
					Name: to.Ptr(armautomation.SKUNameEnumFree),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/updateAutomationAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Account{
			Name:     to.Ptr("myAutomationAccount9"),
			Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount9"),
			Location: to.Ptr("East US 2"),
			Tags:     map[string]*string{},
			Properties: &armautomation.AccountProperties{
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T01:13:43.267+00:00"); return t }()),
				LastModifiedBy:   to.Ptr("myEmailId@microsoft.com"),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T01:13:43.267+00:00"); return t }()),
				SKU: &armautomation.SKU{
					Name: to.Ptr(armautomation.SKUNameEnumFree),
				},
				State: to.Ptr(armautomation.AutomationAccountStateOk),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/updateAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutomationAccount_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/createOrUpdateAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update automation account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewAccountClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount9",
		armautomation.AccountCreateOrUpdateParameters{
			Name:     to.Ptr("myAutomationAccount9"),
			Location: to.Ptr("East US 2"),
			Properties: &armautomation.AccountCreateOrUpdateProperties{
				SKU: &armautomation.SKU{
					Name: to.Ptr(armautomation.SKUNameEnumFree),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/createOrUpdateAutomationAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Account{
			Name:     to.Ptr("ContoseAutomationAccount"),
			Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount9"),
			Location: to.Ptr("East US 2"),
			Tags:     map[string]*string{},
			Properties: &armautomation.AccountProperties{
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T18:21:15.187+00:00"); return t }()),
				LastModifiedBy:   to.Ptr("myEmaild@microsoft.com"),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T18:21:15.187+00:00"); return t }()),
				SKU: &armautomation.SKU{
					Name: to.Ptr(armautomation.SKUNameEnumFree),
				},
				State: to.Ptr(armautomation.AutomationAccountStateOk),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/createOrUpdateAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutomationAccount_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/deleteAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete automation account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewAccountClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/deleteAutomationAccount.json: %v", err)
	}
}

func TestAutomationAccount_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get automation account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewAccountClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount9",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getAutomationAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Account{
			Name:     to.Ptr("myAutomationAccount9"),
			Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount9"),
			Location: to.Ptr("East US 2"),
			Tags:     map[string]*string{},
			Properties: &armautomation.AccountProperties{
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T01:13:43.267+00:00"); return t }()),
				LastModifiedBy:   to.Ptr("myEmailId@microsoft.com"),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T01:13:43.267+00:00"); return t }()),
				SKU: &armautomation.SKU{
					Name: to.Ptr(armautomation.SKUNameEnumFree),
				},
				State: to.Ptr(armautomation.AutomationAccountStateOk),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutomationAccount_ListByResourceGroup(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listAutomationAccountsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List automation accounts by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewAccountClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listAutomationAccountsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.AccountListResult{
			Value: []*armautomation.Account{
				{
					Name:     to.Ptr("myaccount"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myaccount"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-24T00:47:04.227+00:00"); return t }()),
						LastModifiedBy:   to.Ptr("myEmailId@microsoft.com"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
						State:            to.Ptr(armautomation.AutomationAccountStateOk),
					},
				},
				{
					Name:     to.Ptr("myAccount123"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAccount123"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-29T00:32:32.52+00:00"); return t }()),
						LastModifiedBy:   to.Ptr("myEmailId@microsoft.com"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
						State:            to.Ptr(armautomation.AutomationAccountStateOk),
					},
				},
				{
					Name:     to.Ptr("myAccountasfads"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAccountasfads"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:21:03.27+00:00"); return t }()),
						LastModifiedBy:   to.Ptr("myEmailId@microsoft.com"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:21:03.27+00:00"); return t }()),
						State:            to.Ptr(armautomation.AutomationAccountStateOk),
					},
				},
				{
					Name:     to.Ptr("myAutomationAccount1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount1"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:22:33.26+00:00"); return t }()),
						LastModifiedBy:   to.Ptr("myEmailId@microsoft.com"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:22:33.26+00:00"); return t }()),
						State:            to.Ptr(armautomation.AutomationAccountStateOk),
					},
				},
				{
					Name:     to.Ptr("myAutomationAccount11"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:10:24.523+00:00"); return t }()),
						LastModifiedBy:   to.Ptr("myEmailId@microsoft.com"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:12.027+00:00"); return t }()),
						State:            to.Ptr(armautomation.AutomationAccountStateOk),
					},
				},
				{
					Name:     to.Ptr("myAutomationAccount2"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount2"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:24:20.31+00:00"); return t }()),
						LastModifiedBy:   to.Ptr("myEmailId@microsoft.com"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:24:20.31+00:00"); return t }()),
						State:            to.Ptr(armautomation.AutomationAccountStateOk),
					},
				},
				{
					Name:     to.Ptr("myAutomationAccount3"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount3"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:24:43.967+00:00"); return t }()),
						LastModifiedBy:   to.Ptr("myEmailId@microsoft.com"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:24:43.967+00:00"); return t }()),
						State:            to.Ptr(armautomation.AutomationAccountStateOk),
					},
				},
				{
					Name:     to.Ptr("myAutomationAccount4"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount4"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-25T02:04:56.9+00:00"); return t }()),
						LastModifiedBy:   to.Ptr("myEmailId@microsoft.com"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-25T02:04:56.9+00:00"); return t }()),
						State:            to.Ptr(armautomation.AutomationAccountStateOk),
					},
				},
				{
					Name:     to.Ptr("myAutomationAccount6"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount6"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-25T02:10:44.567+00:00"); return t }()),
						LastModifiedBy:   to.Ptr("myEmailId@microsoft.com"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-25T02:10:44.567+00:00"); return t }()),
						State:            to.Ptr(armautomation.AutomationAccountStateOk),
					},
				},
				{
					Name:     to.Ptr("myAutomationAccount7"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount7"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-25T02:19:17.943+00:00"); return t }()),
						LastModifiedBy:   to.Ptr("myEmailId@microsoft.com"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-25T02:19:17.943+00:00"); return t }()),
						State:            to.Ptr(armautomation.AutomationAccountStateOk),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listAutomationAccountsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutomationAccount_List(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listAutomationAccountsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List automation accounts by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewAccountClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listAutomationAccountsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.AccountListResult{
			Value: []*armautomation.Account{
				{
					Name:     to.Ptr("JPEDDeployDSC1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/JPEDeploy1/providers/Microsoft.Automation/automationAccounts/JPEDDeployDSC1"),
					Location: to.Ptr("japaneast"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-04-28T23:48:25.143+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.06+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("jpeDemoAutomation1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/jpeDemo1/providers/Microsoft.Automation/automationAccounts/jpeDemoAutomation1"),
					Location: to.Ptr("japaneast"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-04-25T02:04:10.223+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.06+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("ASEAutomationAccount1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/ASERG1/providers/Microsoft.Automation/automationAccounts/ASEAutomationAccount1"),
					Location: to.Ptr("australiasoutheast"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-04-12T05:19:19.48+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:15.64+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("AAEU2DSCDemo"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/eus2Demo1/providers/Microsoft.Automation/automationAccounts/AAEU2DSCDemo"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-08-04T14:44:02.397+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("AAEU2DSCDemo2"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/eus2Demo1/providers/Microsoft.Automation/automationAccounts/AAEU2DSCDemo2"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-08-04T15:03:45.977+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("AAsnoverDemo1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/aadscdemo1/providers/Microsoft.Automation/automationAccounts/AAsnoverDemo1"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-01-29T02:29:13.18+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("automationaccdelete"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/oaastest/providers/Microsoft.Automation/automationAccounts/automationaccdelete"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-29T20:30:49.97+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("mytest1212"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/aadscdemo2/providers/Microsoft.Automation/automationAccounts/mytest1212"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-12T20:25:36.34+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("deleteacc"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/CIDRG/providers/Microsoft.Automation/automationAccounts/deleteacc"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-12T22:13:39.79+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("deleteme"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/test/providers/Microsoft.Automation/automationAccounts/deleteme"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-12T21:56:10.267+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("deleteme3"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/tst/providers/Microsoft.Automation/automationAccounts/deleteme3"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-12T22:00:51.333+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("Eus2Account1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/OaaSCSXASVNLMD6CUTP2UKUNHMCSLLJRVOSRAS2HOBKX4B3A3UBNLZWZEA-East-US/providers/Microsoft.Automation/automationAccounts/Eus2Account1"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-05-19T19:07:43.2+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("EUS2DDeployDSC1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/EUS2Deploy1/providers/Microsoft.Automation/automationAccounts/EUS2DDeployDSC1"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-04-28T23:50:56.16+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("eusAccount2"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/OaaSCSXASVNLMD6CUTP2UKUNHMCSLLJRVOSRAS2HOBKX4B3A3UBNLZWZEA-East-US/providers/Microsoft.Automation/automationAccounts/eusAccount2"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-05-19T19:12:19.853+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myProdAutomation1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/mms-eus/providers/Microsoft.Automation/automationAccounts/myProdAutomation1"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-16T21:31:06.333+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-16T21:31:06.333+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myProdDevAutomation"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/mms-eus/providers/Microsoft.Automation/automationAccounts/myProdDevAutomation"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-10-27T21:11:16.71+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myProdPublicAutomation"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/mms-eus/providers/Microsoft.Automation/automationAccounts/myProdPublicAutomation"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-11-18T19:49:08.893+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myTestaccount"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myTestaccount"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-24T00:47:04.227+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("kjohn-sandbox-eus"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/mms-eus/providers/Microsoft.Automation/automationAccounts/kjohn-sandbox-eus"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T17:29:18.493+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T17:29:18.493+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("kjohn-sandbox-eus-proddev"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/mms-eus/providers/Microsoft.Automation/automationAccounts/kjohn-sandbox-eus-proddev"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-06T02:33:10.29+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("kjohn-sandbox-eus-prodtest"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/kjohn-rg/providers/Microsoft.Automation/automationAccounts/kjohn-sandbox-eus-prodtest"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-10T23:40:13.103+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("kjohn-sandbox-eus-prodtest2"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/kjohn-rg/providers/Microsoft.Automation/automationAccounts/kjohn-sandbox-eus-prodtest2"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-11T00:20:50.463+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("LinuxPatchingOpsEUS-AA2"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/mms-eus/providers/Microsoft.Automation/automationAccounts/LinuxPatchingOpsEUS-AA2"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-24T03:17:00.043+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("LinuxTestNewAA"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/mms-eus/providers/Microsoft.Automation/automationAccounts/LinuxTestNewAA"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-23T18:50:54.887+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("psrdfeAccount2"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/OaasCSsubid-east-us/providers/Microsoft.Automation/automationAccounts/psrdfeAccount2"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-05-05T00:26:49.02+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("my-account-one"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/myrg/providers/Microsoft.Automation/automationAccounts/my-account-one"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-10-27T17:54:31.007+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myku-no-vms"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/mms-eus/providers/Microsoft.Automation/automationAccounts/myku-no-vms"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-30T01:12:00.853+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myku-win-vms"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/mms-eus/providers/Microsoft.Automation/automationAccounts/myku-win-vms"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-30T01:17:07.613+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("SVCPrnAcctTest1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/aadscdemo2/providers/Microsoft.Automation/automationAccounts/SVCPrnAcctTest1"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-28T20:12:48.163+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("testfgbhfghfgh"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/tesdbgfvfhgjghjgh/providers/Microsoft.Automation/automationAccounts/testfgbhfghfgh"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-12T20:48:59.3+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("test-linux-linuxopsworkspace"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/mms-eus/providers/Microsoft.Automation/automationAccounts/test-linux-linuxopsworkspace"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-23T18:59:56.99+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("my-dsc-test-1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-dev/providers/Microsoft.Automation/automationAccounts/my-dsc-test-1"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-11-10T00:21:05.133+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("my-test-automation-1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-dev/providers/Microsoft.Automation/automationAccounts/my-test-automation-1"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-11-09T19:57:50.043+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myAccount"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/myresourcegroupeus/providers/Microsoft.Automation/automationAccounts/myAccount"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T19:10:30.453+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T19:10:30.453+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myAccount123"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAccount123"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-29T00:32:32.52+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myAccountasfads"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAccountasfads"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:21:03.27+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:21:03.27+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myAccountEUS"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/myResourceGroupEUS/providers/Microsoft.Automation/automationAccounts/myAccountEUS"),
					Location: to.Ptr("eastus2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-29T23:13:38.873+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.4+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myAutomationAccount1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount1"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:22:33.26+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:22:33.26+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myAutomationAccount11"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:10:24.523+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:12.027+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myAutomationAccount2"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount2"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:24:20.31+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:24:20.31+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myAutomationAccount3"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount3"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:24:43.967+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-24T23:24:43.967+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myAutomationAccount4"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount4"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-25T02:04:56.9+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-25T02:04:56.9+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myAutomationAccount6"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount6"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-25T02:10:44.567+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-25T02:10:44.567+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myAutomationAccount7"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount7"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-25T02:19:17.943+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-25T02:19:17.943+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("CSSCase1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/WEURG1/providers/Microsoft.Automation/automationAccounts/CSSCase1"),
					Location: to.Ptr("westeurope"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-18T05:53:58.91+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:15.373+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("deleteme"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my/providers/Microsoft.Automation/automationAccounts/deleteme"),
					Location: to.Ptr("westeurope"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-12T21:48:47.98+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:15.373+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("LinuxPatchingOpsWEU-AA2"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/mms-weu/providers/Microsoft.Automation/automationAccounts/LinuxPatchingOpsWEU-AA2"),
					Location: to.Ptr("westeurope"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-24T02:27:35.713+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:15.373+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("LinuxPatchJobs"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-dev/providers/Microsoft.Automation/automationAccounts/LinuxPatchJobs"),
					Location: to.Ptr("westeurope"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-14T22:02:28.223+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:15.373+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("MyCoolAAC1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/IgnniteRG/providers/Microsoft.Automation/automationAccounts/MyCoolAAC1"),
					Location: to.Ptr("westeurope"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-22T05:59:22.443+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:15.373+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("MyCoolACT1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/IgnniteRG/providers/Microsoft.Automation/automationAccounts/MyCoolACT1"),
					Location: to.Ptr("westeurope"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-22T06:05:18.5+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:15.373+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("MyTestmyTest-WEU"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/OaaSCSXASVNLMD6CUTP2UKUNHMCSLLJRVOSRAS2HOBKX4B3A3UBNLZWZEA-West-Europe/providers/Microsoft.Automation/automationAccounts/MyTestmyTest-WEU"),
					Location: to.Ptr("West Europe"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2014-11-12T02:48:51.473+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:15.373+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("WEDDeployDSC1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/WEDeploy1/providers/Microsoft.Automation/automationAccounts/WEDDeployDSC1"),
					Location: to.Ptr("westeurope"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-04-28T23:20:01.73+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-13T08:43:47.36+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("SEADDeployDSC1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/SEADeploy1/providers/Microsoft.Automation/automationAccounts/SEADDeployDSC1"),
					Location: to.Ptr("southeamyia"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-04-28T19:06:39.1+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.683+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("seaDemoAutomation1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/seaDemo1/providers/Microsoft.Automation/automationAccounts/seaDemoAutomation1"),
					Location: to.Ptr("southeamyia"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-04-25T01:31:32.15+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:16.683+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("AAsnoverDemo2"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/aadscdemo1/providers/Microsoft.Automation/automationAccounts/AAsnoverDemo2"),
					Location: to.Ptr("South Central US"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-01-29T02:30:05.84+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:17.107+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("SCUSDDeployDSC1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/SCUSDeploy1/providers/Microsoft.Automation/automationAccounts/SCUSDDeployDSC1"),
					Location: to.Ptr("southcentralus"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-06-04T23:06:44.897+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:17.107+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("scusposthydtest1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/eus2Demo1/providers/Microsoft.Automation/automationAccounts/scusposthydtest1"),
					Location: to.Ptr("South Central US"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-06-04T16:44:18.823+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:17.107+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("scustestaccount1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/OaaSCSXASVNLMD6CUTP2UKUNHMCSLLJRVOSRAS2HOBKX4B3A3UBNLZWZEA-South-Central-US/providers/Microsoft.Automation/automationAccounts/scustestaccount1"),
					Location: to.Ptr("South Central US"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-05-30T01:54:57.313+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:17.107+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("AAUKSmyTest1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/UKSRG1/providers/Microsoft.Automation/automationAccounts/AAUKSmyTest1"),
					Location: to.Ptr("uksouth"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-15T02:31:03.19+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-15T02:31:03.19+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("Tip-WCUS-AutomationAccount"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/Gaurav_machines/providers/Microsoft.Automation/automationAccounts/Tip-WCUS-AutomationAccount"),
					Location: to.Ptr("westcentralus"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-08T19:53:36.2933333+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-08T19:53:36.2933333+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("aa-my"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/myRG/providers/Microsoft.Automation/automationAccounts/aa-my"),
					Location: to.Ptr("northeurope"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-21T18:59:56.26+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:15.457+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("CIDAccout1"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/CIDRG/providers/Microsoft.Automation/automationAccounts/CIDAccout1"),
					Location: to.Ptr("Central India"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-02-24T20:04:58.867+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:19.003+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("aaspntest"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my/providers/Microsoft.Automation/automationAccounts/aaspntest"),
					Location: to.Ptr("northcentralus"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-06T17:18:51.88+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:19.37+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("dsccomposite"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my/providers/Microsoft.Automation/automationAccounts/dsccomposite"),
					Location: to.Ptr("northcentralus"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T17:37:55.163+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T17:19:15.09+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("dsclinux"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my/providers/Microsoft.Automation/automationAccounts/dsclinux"),
					Location: to.Ptr("northcentralus"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T21:50:05.493+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T21:50:05.493+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("mydsc"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my/providers/Microsoft.Automation/automationAccounts/mydsc"),
					Location: to.Ptr("northcentralus"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-11-01T17:28:36.197+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-09T21:35:19.37+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("mydsc2"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/my/providers/Microsoft.Automation/automationAccounts/mydsc2"),
					Location: to.Ptr("northcentralus"),
					Properties: &armautomation.AccountProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-11-01T18:50:06.063+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-11T01:33:13.113+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listAutomationAccountsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStatistics_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getStatisticsOfAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get statistics of an automation account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewStatisticsClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount11",
		&armautomation.StatisticsClientListByAutomationAccountOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getStatisticsOfAutomationAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.StatisticsListResult{
			Value: []*armautomation.Statistics{
				{
					CounterProperty: to.Ptr("New"),
					CounterValue:    to.Ptr[int64](0),
					EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:49.9879197+00:00"); return t }()),
					ID:              to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11/statistics/New"),
					StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T02:11:49.9879197+00:00"); return t }()),
				},
				{
					CounterProperty: to.Ptr("Activating"),
					CounterValue:    to.Ptr[int64](0),
					EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:49.9879197+00:00"); return t }()),
					ID:              to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11/statistics/Activating"),
					StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T02:11:49.9879197+00:00"); return t }()),
				},
				{
					CounterProperty: to.Ptr("Running"),
					CounterValue:    to.Ptr[int64](0),
					EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:49.9879197+00:00"); return t }()),
					ID:              to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11/statistics/Running"),
					StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T02:11:49.9879197+00:00"); return t }()),
				},
				{
					CounterProperty: to.Ptr("Completed"),
					CounterValue:    to.Ptr[int64](0),
					EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:49.9879197+00:00"); return t }()),
					ID:              to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11/statistics/Completed"),
					StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T02:11:49.9879197+00:00"); return t }()),
				},
				{
					CounterProperty: to.Ptr("Failed"),
					CounterValue:    to.Ptr[int64](0),
					EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:49.9879197+00:00"); return t }()),
					ID:              to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11/statistics/Failed"),
					StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T02:11:49.9879197+00:00"); return t }()),
				},
				{
					CounterProperty: to.Ptr("Stopped"),
					CounterValue:    to.Ptr[int64](0),
					EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:49.9879197+00:00"); return t }()),
					ID:              to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11/statistics/Stopped"),
					StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T02:11:49.9879197+00:00"); return t }()),
				},
				{
					CounterProperty: to.Ptr("Blocked"),
					CounterValue:    to.Ptr[int64](0),
					EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:49.9879197+00:00"); return t }()),
					ID:              to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11/statistics/Blocked"),
					StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T02:11:49.9879197+00:00"); return t }()),
				},
				{
					CounterProperty: to.Ptr("Suspended"),
					CounterValue:    to.Ptr[int64](0),
					EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:49.9879197+00:00"); return t }()),
					ID:              to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11/statistics/Suspended"),
					StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T02:11:49.9879197+00:00"); return t }()),
				},
				{
					CounterProperty: to.Ptr("Disconnected"),
					CounterValue:    to.Ptr[int64](0),
					EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:49.9879197+00:00"); return t }()),
					ID:              to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11/statistics/Disconnected"),
					StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T02:11:49.9879197+00:00"); return t }()),
				},
				{
					CounterProperty: to.Ptr("Suspending"),
					CounterValue:    to.Ptr[int64](0),
					EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:49.9879197+00:00"); return t }()),
					ID:              to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11/statistics/Suspending"),
					StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T02:11:49.9879197+00:00"); return t }()),
				},
				{
					CounterProperty: to.Ptr("Stopping"),
					CounterValue:    to.Ptr[int64](0),
					EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:49.9879197+00:00"); return t }()),
					ID:              to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11/statistics/Stopping"),
					StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T02:11:49.9879197+00:00"); return t }()),
				},
				{
					CounterProperty: to.Ptr("Resuming"),
					CounterValue:    to.Ptr[int64](0),
					EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:49.9879197+00:00"); return t }()),
					ID:              to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11/statistics/Resuming"),
					StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T02:11:49.9879197+00:00"); return t }()),
				},
				{
					CounterProperty: to.Ptr("Removing"),
					CounterValue:    to.Ptr[int64](0),
					EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T02:11:49.9879197+00:00"); return t }()),
					ID:              to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount11/statistics/Removing"),
					StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-19T02:11:49.9879197+00:00"); return t }()),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StatisticsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StatisticsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getStatisticsOfAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsages_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getUsagesOfAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get usages of an automation account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewUsagesClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount11",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getUsagesOfAutomationAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.UsageListResult{
			Value: []*armautomation.Usage{
				{
					Name: &armautomation.UsageCounterName{
						LocalizedValue: to.Ptr("AccountUsage"),
						Value:          to.Ptr("AccountUsage"),
					},
					CurrentValue:   to.Ptr[float64](0),
					Limit:          to.Ptr[int64](500),
					ThrottleStatus: to.Ptr("NotThrottled"),
					Unit:           to.Ptr("Minute"),
				},
				{
					Name: &armautomation.UsageCounterName{
						LocalizedValue: to.Ptr("SubscriptionUsage"),
						Value:          to.Ptr("SubscriptionUsage"),
					},
					CurrentValue:   to.Ptr[float64](429),
					Limit:          to.Ptr[int64](500),
					ThrottleStatus: to.Ptr("NotThrottled"),
					Unit:           to.Ptr("Minute"),
				},
				{
					Name: &armautomation.UsageCounterName{
						LocalizedValue: to.Ptr("DscSubscriptionUsage"),
						Value:          to.Ptr("DscSubscriptionUsage"),
					},
					CurrentValue:   to.Ptr[float64](8),
					Limit:          to.Ptr[int64](5),
					ThrottleStatus: to.Ptr("ThrottledAtSubscriptionLevel"),
					Unit:           to.Ptr("Count"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getUsagesOfAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKeys_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listAutomationAccountKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get lists of an automation account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewKeysClient("subid", cred, &options)
	res, err := client.ListByAutomationAccount(ctx,
		"rg",
		"MyAutomationAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listAutomationAccountKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.KeyListResult{
			Keys: []*armautomation.Key{
				{
					KeyName:     to.Ptr(armautomation.AutomationKeyNamePrimary),
					Permissions: to.Ptr(armautomation.AutomationKeyPermissionsFull),
					Value:       to.Ptr("**************************************************************"),
				},
				{
					KeyName:     to.Ptr(armautomation.AutomationKeyNameSecondary),
					Permissions: to.Ptr(armautomation.AutomationKeyPermissionsFull),
					Value:       to.Ptr("**************************************************************"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.KeyListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.KeyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listAutomationAccountKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificate_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a certificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewCertificateClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount33",
		"testCert",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteCertificate.json: %v", err)
	}
}

func TestCertificate_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a certificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewCertificateClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"testCert",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getCertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Certificate{
			Name: to.Ptr("testCert"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/certificates/testCert"),
			Properties: &armautomation.CertificateProperties{
				Description:      to.Ptr("Sample Cert"),
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T17:26:43.337+00:00"); return t }()),
				ExpiryTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-29T17:25:45+00:00"); return t }()),
				IsExportable:     to.Ptr(false),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T17:28:55.01+00:00"); return t }()),
				Thumbprint:       to.Ptr("thumbprint of cert"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Certificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Certificate)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificate_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a certificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewCertificateClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount18",
		"testCert",
		armautomation.CertificateCreateOrUpdateParameters{
			Name: to.Ptr("testCert"),
			Properties: &armautomation.CertificateCreateOrUpdateProperties{
				Description:  to.Ptr("Sample Cert"),
				Base64Value:  to.Ptr("base 64 value of cert"),
				IsExportable: to.Ptr(false),
				Thumbprint:   to.Ptr("thumbprint of cert"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateCertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Certificate{
			Name: to.Ptr("testCert"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/certificates/testCert"),
			Properties: &armautomation.CertificateProperties{
				Description:      to.Ptr("sample certificate. Description updated"),
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T17:26:43.337+00:00"); return t }()),
				ExpiryTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-29T17:25:45+00:00"); return t }()),
				IsExportable:     to.Ptr(false),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T17:28:55.01+00:00"); return t }()),
				Thumbprint:       to.Ptr("thumbprint of cert"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Certificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Certificate)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificate_Update(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a certificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewCertificateClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount33",
		"testCert",
		armautomation.CertificateUpdateParameters{
			Name: to.Ptr("testCert"),
			Properties: &armautomation.CertificateUpdateProperties{
				Description: to.Ptr("sample certificate. Description updated"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateCertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Certificate{
			Name: to.Ptr("testCert"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/certificates/testCert"),
			Properties: &armautomation.CertificateProperties{
				Description:      to.Ptr("sample certificate. Description updated"),
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T17:26:43.337+00:00"); return t }()),
				ExpiryTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-29T17:25:45+00:00"); return t }()),
				IsExportable:     to.Ptr(false),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T17:28:55.01+00:00"); return t }()),
				Thumbprint:       to.Ptr("thumbprint of cert"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Certificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Certificate)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificate_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listCertificatesByAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List certificates"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewCertificateClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listCertificatesByAutomationAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.CertificateListResult{
			Value: []*armautomation.Certificate{
				{
					Name: to.Ptr("testCert"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/certificates/testCert"),
					Properties: &armautomation.CertificateProperties{
						Description:      to.Ptr("Sample Cert"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T17:26:43.337+00:00"); return t }()),
						ExpiryTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-29T17:25:45+00:00"); return t }()),
						IsExportable:     to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T17:28:55.01+00:00"); return t }()),
						Thumbprint:       to.Ptr("thumbprint of cert"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CertificateListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CertificateListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listCertificatesByAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnection_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an existing connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewConnectionClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount28",
		"myConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteConnection.json: %v", err)
	}
}

func TestConnection_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewConnectionClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount28",
		"myConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Connection{
			Name: to.Ptr("myConnection"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection"),
			Properties: &armautomation.ConnectionProperties{
				Description: to.Ptr("my description goes here"),
				ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
					Name: to.Ptr("Azure"),
				},
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:29.29+00:00"); return t }()),
				FieldDefinitionValues: map[string]*string{
					"AutomationCertificateName": to.Ptr("myCertificateName"),
					"SubscriptionID":            to.Ptr("b5e4748c-f69a-467c-8749-e2f9c8cd3007"),
				},
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:33.617+00:00"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Connection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Connection)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnection_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewConnectionClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount28",
		"mysConnection",
		armautomation.ConnectionCreateOrUpdateParameters{
			Name: to.Ptr("mysConnection"),
			Properties: &armautomation.ConnectionCreateOrUpdateProperties{
				Description: to.Ptr("my description goes here"),
				ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
					Name: to.Ptr("Azure"),
				},
				FieldDefinitionValues: map[string]*string{
					"AutomationCertificateName": to.Ptr("mysCertificateName"),
					"SubscriptionID":            to.Ptr("subid"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Connection{
			Name: to.Ptr("mysConnection"),
			Properties: &armautomation.ConnectionProperties{
				Description: to.Ptr("my description goes here"),
				ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
					Name: to.Ptr("Azure"),
				},
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:29.29+00:00"); return t }()),
				FieldDefinitionValues: map[string]*string{
					"AutomationCertificateName": to.Ptr("mysCertificateName"),
					"SubscriptionID":            to.Ptr("subid"),
				},
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:29.29+00:00"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Connection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Connection)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnection_Update(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewConnectionClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount28",
		"myConnection",
		armautomation.ConnectionUpdateParameters{
			Name: to.Ptr("myConnection"),
			Properties: &armautomation.ConnectionUpdateProperties{
				Description: to.Ptr("my description goes here"),
				FieldDefinitionValues: map[string]*string{
					"AutomationCertificateName": to.Ptr("myCertificateName"),
					"SubscriptionID":            to.Ptr("b5e4748c-f69a-467c-8749-e2f9c8cd3009"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Connection{
			Name: to.Ptr("myConnection"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount29/connections/myConnection"),
			Properties: &armautomation.ConnectionProperties{
				Description: to.Ptr("my description goes here"),
				ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
					Name: to.Ptr("Azure"),
				},
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T08:21:29.313+00:00"); return t }()),
				FieldDefinitionValues: map[string]*string{
					"AutomationCertificateName": to.Ptr("myCertificateName"),
					"SubscriptionID":            to.Ptr("b5e4748c-f69a-467c-8749-e2f9c8cd3009"),
				},
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T08:21:30.093+00:00"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Connection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Connection)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnection_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listConnectionsByAutomationAccount_First100.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List connections by automation account, first 100"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewConnectionClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount28",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listConnectionsByAutomationAccount_First100.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.ConnectionListResult{
			Value: []*armautomation.Connection{
				{
					Name: to.Ptr("myConnection"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:29.29+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:33.617+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection0"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection0"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:36.493+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:36.493+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection1"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:36.76+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:36.76+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection10"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection10"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:39.117+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:39.117+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection100"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection100"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:04.527+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:04.527+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection101"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection101"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:04.777+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:04.777+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection102"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection102"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:05.027+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:05.027+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection103"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection103"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:05.277+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:05.277+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection104"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection104"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:05.527+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:05.527+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection105"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection105"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:05.82+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:05.82+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection106"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection106"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:06.07+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:06.07+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection107"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection107"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:06.37+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:06.37+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection108"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection108"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:06.62+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:06.62+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection109"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection109"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:06.87+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:06.87+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection11"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection11"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:39.367+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:39.367+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection110"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection110"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:07.167+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:07.167+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection111"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection111"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:07.463+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:07.463+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection112"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection112"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:07.73+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:07.73+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection113"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection113"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:07.963+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:07.963+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection114"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection114"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:08.213+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:08.213+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection115"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection115"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:08.527+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:08.527+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection116"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection116"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:08.76+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:08.76+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection117"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection117"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:09.103+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:09.103+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection118"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection118"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:09.37+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:09.37+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection119"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection119"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:09.65+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:09.65+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection12"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection12"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:39.617+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:39.617+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection120"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection120"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:09.883+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:09.883+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection121"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection121"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:10.167+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:10.167+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection122"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection122"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:10.43+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:10.43+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection123"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection123"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:10.68+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:10.68+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection124"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection124"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:10.93+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:10.93+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection125"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection125"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:11.18+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:11.18+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection126"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection126"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:11.43+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:11.43+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection127"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection127"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:11.667+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:11.667+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection128"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection128"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:11.917+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:11.917+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection129"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection129"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:12.18+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:12.18+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection13"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection13"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:39.883+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:39.883+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection130"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection130"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:12.43+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:12.43+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection131"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection131"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:12.667+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:12.667+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection132"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection132"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:12.917+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:12.917+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection133"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection133"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:13.213+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:13.213+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection134"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection134"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:13.463+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:13.463+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection135"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection135"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:13.73+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:13.73+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection136"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection136"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:14.01+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:14.01+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection137"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection137"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:14.29+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:14.29+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection138"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection138"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:14.54+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:14.54+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection139"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection139"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:14.807+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:14.807+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection14"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection14"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:40.133+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:40.133+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection140"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection140"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:15.057+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:15.057+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection141"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection141"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:15.307+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:15.307+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection142"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection142"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:15.603+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:15.603+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection143"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection143"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:15.853+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:15.853+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection144"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection144"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:16.12+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:16.12+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection145"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection145"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:16.37+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:16.37+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection146"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection146"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:16.633+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:16.633+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection147"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection147"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:16.9+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:16.9+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection148"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection148"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:17.167+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:17.167+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection149"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection149"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:17.43+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:17.43+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection15"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection15"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:40.37+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:40.37+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection150"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection150"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:17.68+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:17.68+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection151"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection151"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:17.963+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:17.963+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection152"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection152"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:18.527+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:18.527+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection153"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection153"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:18.79+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:18.79+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection154"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection154"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:19.073+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:19.073+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection155"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection155"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:19.353+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:19.353+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection156"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection156"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:19.68+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:19.68+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection157"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection157"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:19.93+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:19.93+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection158"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection158"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:20.243+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:20.243+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection159"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection159"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:20.557+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:20.557+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection16"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection16"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:40.62+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:40.62+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection160"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection160"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:20.823+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:20.823+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection161"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection161"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:21.15+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:21.15+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection162"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection162"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:21.417+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:21.417+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection163"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection163"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:21.65+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:21.65+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection164"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection164"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:21.993+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:21.993+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection165"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection165"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:22.323+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:22.323+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection166"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection166"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:22.68+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:22.68+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection167"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection167"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:23.057+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:23.057+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection168"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection168"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:23.417+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:23.417+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection169"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection169"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:23.697+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:23.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection17"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection17"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:40.87+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:40.87+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection170"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection170"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:23.963+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:23.963+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection171"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection171"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:24.243+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:24.243+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection172"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection172"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:24.51+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:24.51+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection173"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection173"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:24.777+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:24.777+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection174"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection174"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:25.057+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:25.057+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection175"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection175"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:25.34+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:25.34+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection18"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection18"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:41.197+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:41.197+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection19"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection19"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:41.57+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:41.57+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection2"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection2"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:37.01+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:37.01+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection20"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection20"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:41.913+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:41.913+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection21"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection21"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:42.273+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:42.273+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection22"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection22"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:42.663+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:42.663+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection23"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection23"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:42.993+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:42.993+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection24"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection24"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:43.26+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:43.26+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection25"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection25"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:43.587+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:43.587+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection26"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection26"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:43.87+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:43.87+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection27"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection27"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:44.227+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:44.227+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection28"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection28"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:44.557+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:44.557+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection29"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection29"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:44.807+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:44.807+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listConnectionsByAutomationAccount_First100.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listConnectionsByAutomationAccount_Next100.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List connections by automation account, next 100"},
	})
	client = armautomation.NewConnectionClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount28",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listConnectionsByAutomationAccount_Next100.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.ConnectionListResult{
			Value: []*armautomation.Connection{
				{
					Name: to.Ptr("myConnection3"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection3"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:37.29+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:37.29+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection30"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection30"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:45.04+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:45.04+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection31"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection31"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:45.307+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:45.307+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection32"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection32"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:45.557+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:45.557+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection33"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection33"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:45.853+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:45.853+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection34"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection34"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:46.087+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:46.087+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection35"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection35"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:46.353+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:46.353+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection36"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection36"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:46.603+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:46.603+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection37"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection37"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:46.853+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:46.853+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection38"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection38"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:47.103+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:47.103+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection39"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection39"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:47.353+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:47.353+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection4"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection4"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:37.54+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:37.54+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection40"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection40"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:47.62+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:47.62+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection41"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection41"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:47.883+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:47.883+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection42"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection42"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:48.167+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:48.167+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection43"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection43"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:48.43+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:48.43+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection44"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection44"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:48.82+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:48.82+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection45"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection45"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:49.18+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:49.18+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection46"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection46"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:49.477+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:49.477+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection47"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection47"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:49.773+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:49.773+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection48"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection48"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:50.197+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:50.197+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection49"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection49"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:50.603+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:50.603+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection5"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection5"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:37.79+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:37.79+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection50"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection50"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:50.837+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:50.837+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection51"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection51"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:51.087+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:51.087+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection52"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection52"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:51.337+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:51.337+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection53"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection53"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:51.587+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:51.587+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection54"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection54"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:51.87+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:51.87+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection55"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection55"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:52.15+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:52.15+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection56"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection56"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:52.4+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:52.4+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection57"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection57"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:52.667+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:52.667+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection58"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection58"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:52.917+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:52.917+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection59"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection59"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:53.167+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:53.167+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection6"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection6"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:38.103+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:38.103+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection60"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection60"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:53.463+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:53.463+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection61"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection61"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:53.727+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:53.727+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection62"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection62"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:54.01+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:54.01+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection63"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection63"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:54.273+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:54.273+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection64"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection64"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:54.523+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:54.523+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection65"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection65"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:54.807+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:54.807+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection66"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection66"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:55.103+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:55.103+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection67"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection67"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:55.37+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:55.37+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection68"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection68"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:55.62+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:55.62+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection69"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection69"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:55.883+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:55.883+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection7"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection7"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:38.353+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:38.353+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection70"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection70"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:56.133+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:56.133+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection71"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection71"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:56.383+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:56.383+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection72"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection72"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:56.633+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:56.633+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection73"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection73"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:56.87+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:56.87+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection74"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection74"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:57.12+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:57.12+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection75"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection75"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:57.37+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:57.37+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection76"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection76"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:57.62+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:57.62+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection77"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection77"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:57.87+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:57.87+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection78"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection78"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:58.12+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:58.12+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection79"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection79"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:58.37+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:58.37+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection8"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection8"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:38.587+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:38.587+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection80"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection80"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:58.633+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:58.633+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection81"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection81"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:58.917+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:58.917+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection82"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection82"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:59.18+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:59.18+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection83"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection83"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:59.477+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:59.477+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection84"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection84"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:59.713+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:59.713+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection85"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection85"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:00.01+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:00.01+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection86"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection86"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:00.26+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:00.26+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection87"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection87"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:00.62+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:00.62+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection88"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection88"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:00.98+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:00.98+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection89"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection89"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:01.353+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:01.353+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection9"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection9"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:38.867+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:52:38.867+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection90"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection90"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:01.697+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:01.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection91"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection91"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:01.963+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:01.963+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection92"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection92"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:02.29+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:02.29+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection93"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection93"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:02.587+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:02.587+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection94"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection94"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:02.87+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:02.87+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection95"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection95"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:03.26+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:03.26+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection96"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection96"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:03.51+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:03.51+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection97"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection97"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:03.76+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:03.76+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection98"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection98"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:04.027+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:04.027+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myConnection99"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount28/connections/myConnection99"),
					Properties: &armautomation.ConnectionProperties{
						ConnectionType: &armautomation.ConnectionTypeAssociationProperty{
							Name: to.Ptr("Azure"),
						},
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:04.26+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T07:53:04.26+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listConnectionsByAutomationAccount_Next100.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectionType_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteConnectionType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an existing connection type"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewConnectionTypeClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount22",
		"myCT",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteConnectionType.json: %v", err)
	}
}

func TestConnectionType_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getConnectionType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get connection type"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewConnectionTypeClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount22",
		"myCT",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getConnectionType.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.ConnectionType{
			Name: to.Ptr("myCT"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount22/connectionTypes/myCT"),
			Properties: &armautomation.ConnectionTypeProperties{
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T03:47:53.433+00:00"); return t }()),
				FieldDefinitions: map[string]*armautomation.FieldDefinition{
					"myBoolField": {
						Type:        to.Ptr("bool"),
						IsEncrypted: to.Ptr(false),
						IsOptional:  to.Ptr(false),
					},
					"myStringField": {
						Type:        to.Ptr("string"),
						IsEncrypted: to.Ptr(false),
						IsOptional:  to.Ptr(false),
					},
					"myStringFieldEncrypted": {
						Type:        to.Ptr("string"),
						IsEncrypted: to.Ptr(true),
						IsOptional:  to.Ptr(false),
					},
				},
				IsGlobal:         to.Ptr(false),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T03:47:53.557+00:00"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionType) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionType)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getConnectionType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectionType_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateConnectionType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update connection type"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewConnectionTypeClient("subid", cred, &options)
	_, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount22",
		"myCT",
		armautomation.ConnectionTypeCreateOrUpdateParameters{
			Name: to.Ptr("myCT"),
			Properties: &armautomation.ConnectionTypeCreateOrUpdateProperties{
				FieldDefinitions: map[string]*armautomation.FieldDefinition{
					"myBoolField": {
						Type:        to.Ptr("bool"),
						IsEncrypted: to.Ptr(false),
						IsOptional:  to.Ptr(false),
					},
					"myStringField": {
						Type:        to.Ptr("string"),
						IsEncrypted: to.Ptr(false),
						IsOptional:  to.Ptr(false),
					},
					"myStringFieldEncrypted": {
						Type:        to.Ptr("string"),
						IsEncrypted: to.Ptr(true),
						IsOptional:  to.Ptr(false),
					},
				},
				IsGlobal: to.Ptr(false),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateConnectionType.json: %v", err)
	}
}

func TestConnectionType_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getAllConnectionTypes_First100.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get connection types, first 100"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewConnectionTypeClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount25",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getAllConnectionTypes_First100.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.ConnectionTypeListResult{
			Value: []*armautomation.ConnectionType{
				{
					Name: to.Ptr("Azure"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/Azure"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2014-03-18T23:02:40.613+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"AutomationCertificateName": {
								Type:        to.Ptr("System.String"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"SubscriptionID": {
								Type:        to.Ptr("System.String"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(true),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2014-03-18T23:02:40.74+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("AzureClassicCertificate"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/AzureClassicCertificate"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-04-25T23:54:02.65+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"CertificateAssetName": {
								Type:        to.Ptr("System.String"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"SubscriptionId": {
								Type:        to.Ptr("System.String"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"SubscriptionName": {
								Type:        to.Ptr("System.String"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(true),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-04-25T23:54:03.167+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("AzureServicePrincipal"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/AzureServicePrincipal"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-16T23:08:41.853+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"ApplicationId": {
								Type:        to.Ptr("System.String"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"CertificateThumbprint": {
								Type:        to.Ptr("System.String"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"SubscriptionId": {
								Type:        to.Ptr("System.String"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"TenantId": {
								Type:        to.Ptr("System.String"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(true),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-16T23:08:42.407+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:14.43+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:14.51+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT0"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT0"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:14.837+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:14.853+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT1"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:15.04+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:15.057+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT10"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT10"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:17.12+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:17.15+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT100"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT100"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:36.73+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:36.76+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT101"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT101"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:36.963+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:36.993+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT102"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT102"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:37.197+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:37.213+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT103"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT103"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:37.417+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:37.43+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT104"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT104"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:37.633+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:37.65+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT105"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT105"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:37.837+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:37.883+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT106"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT106"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:38.073+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:38.087+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT107"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT107"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:38.277+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:38.29+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT108"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT108"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:38.493+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:38.51+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT109"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT109"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:38.697+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:38.713+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT11"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT11"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:17.337+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:17.383+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT110"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT110"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:38.93+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:38.947+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT111"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT111"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:39.15+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:39.167+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT112"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT112"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:39.353+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:39.37+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT113"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT113"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:39.557+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:39.573+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT114"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT114"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:39.777+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:39.79+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT115"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT115"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:39.98+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:39.993+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT116"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT116"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:40.18+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:40.197+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT117"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT117"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:40.417+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:40.43+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT118"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT118"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:40.633+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:40.65+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT119"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT119"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:40.837+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:40.853+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT12"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT12"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:17.587+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:17.603+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT120"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT120"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:41.04+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:41.057+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT121"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT121"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:41.26+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:41.277+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT122"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT122"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:41.48+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:41.557+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT123"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT123"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:41.743+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:41.76+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT124"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT124"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:41.947+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:41.963+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT125"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT125"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:42.18+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:42.197+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT126"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT126"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:42.383+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:42.4+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT127"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT127"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:42.603+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:42.62+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT128"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT128"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:42.823+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:42.837+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT129"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT129"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:43.027+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:43.04+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT13"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT13"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:17.79+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:17.807+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT130"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT130"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:43.243+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:43.26+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT131"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT131"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:43.447+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:43.463+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT132"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT132"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:43.65+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:43.667+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT133"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT133"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:43.87+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:43.887+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT134"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT134"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:44.073+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:44.087+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT135"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT135"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:44.29+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:44.307+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT136"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT136"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:44.493+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:44.51+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT137"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT137"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:44.76+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:44.807+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT138"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT138"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:45.01+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:45.027+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT139"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT139"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:45.213+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:45.23+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT14"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT14"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:17.993+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:18.01+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT140"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT140"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:45.433+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:45.463+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT141"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT141"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:45.65+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:45.667+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT142"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT142"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:45.883+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:45.917+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT143"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT143"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:46.103+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:46.133+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT144"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT144"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:46.34+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:46.353+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT145"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT145"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:46.54+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:46.557+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT146"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT146"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:46.76+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:46.777+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT147"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT147"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:46.963+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:46.98+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT148"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT148"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:47.197+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:47.213+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT149"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT149"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:47.417+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:47.43+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT15"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT15"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:18.213+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:18.227+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT150"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT150"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:47.637+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:47.65+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT151"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT151"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:47.853+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:47.87+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT152"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT152"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:48.103+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:48.167+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT153"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT153"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:48.37+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:48.4+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT154"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT154"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:48.59+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:48.667+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT155"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT155"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:48.887+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:48.93+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT156"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT156"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:49.12+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:49.167+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT157"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT157"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:49.37+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:49.4+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT158"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT158"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:49.603+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:49.637+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT159"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT159"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:49.84+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:49.87+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT16"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT16"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:18.417+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:18.43+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT160"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT160"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:50.09+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:50.103+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT161"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT161"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:50.29+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:50.307+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT162"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT162"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:50.493+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:50.51+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT163"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT163"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:50.697+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:50.713+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT164"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT164"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:50.917+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:50.933+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT165"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT165"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:51.12+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:51.137+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT166"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT166"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:51.34+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:51.353+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT167"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT167"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:51.54+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:51.557+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT168"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT168"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:51.743+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:51.76+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT169"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT169"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:51.98+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:51.98+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT17"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT17"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:18.62+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:18.633+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT170"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT170"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:52.213+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:52.23+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT171"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT171"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:52.417+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:52.433+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT172"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT172"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:52.637+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:52.65+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT173"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT173"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:52.84+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:52.87+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT174"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT174"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:53.057+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:53.073+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT175"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT175"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:53.26+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:53.29+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT18"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT18"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:18.82+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:18.837+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT19"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT19"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:19.04+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:19.057+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT2"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT2"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:15.26+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:15.273+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT20"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT20"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:19.243+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:19.26+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT21"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT21"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:19.463+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:19.477+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT22"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT22"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:19.667+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:19.68+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT23"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT23"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:19.883+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:19.9+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT24"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT24"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:20.103+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:20.12+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT25"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT25"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:20.4+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:20.417+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT26"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT26"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:20.65+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:20.667+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConnectionTypeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConnectionTypeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getAllConnectionTypes_First100.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getAllConnectionTypes_Next100.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get connection types, next 100"},
	})
	client = armautomation.NewConnectionTypeClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount25",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getAllConnectionTypes_Next100.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.ConnectionTypeListResult{
			Value: []*armautomation.ConnectionType{
				{
					Name: to.Ptr("myCT27"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT27"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:20.87+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:20.883+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT28"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT28"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:21.07+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:21.087+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT29"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT29"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:21.29+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:21.307+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT3"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT3"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:15.477+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:15.493+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT30"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT30"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:21.523+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:21.54+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT31"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT31"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:21.727+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:21.743+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT32"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT32"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:21.93+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:21.947+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT33"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT33"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:22.133+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:22.15+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT34"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT34"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:22.353+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:22.37+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT35"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT35"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:22.57+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:22.587+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT36"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT36"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:22.773+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:22.79+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT37"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT37"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:22.977+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:22.993+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT38"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT38"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:23.197+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:23.213+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT39"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT39"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:23.417+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:23.447+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT4"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT4"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:15.68+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:15.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT40"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT40"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:23.633+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:23.65+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT41"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT41"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:23.853+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:23.87+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT42"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT42"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:24.057+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:24.07+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT43"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT43"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:24.26+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:24.273+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT44"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT44"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:24.477+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:24.493+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT45"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT45"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:24.68+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:24.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT46"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT46"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:24.883+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:24.9+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT47"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT47"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:25.103+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:25.12+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT48"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT48"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:25.307+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:25.32+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT49"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT49"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:25.523+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:25.54+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT5"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT5"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:15.9+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:15.917+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT50"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT50"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:25.727+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:25.743+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT51"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT51"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:25.93+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:25.947+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT52"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT52"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:26.133+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:26.167+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT53"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT53"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:26.353+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:26.37+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT54"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT54"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:26.57+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:26.587+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT55"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT55"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:26.773+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:26.79+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT56"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT56"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:26.977+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:26.993+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT57"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT57"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:27.197+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:27.213+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT58"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT58"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:27.477+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:27.493+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT59"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT59"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:27.68+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:27.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT6"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT6"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:16.133+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:16.167+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT60"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT60"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:27.917+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:27.947+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT61"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT61"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:28.133+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:28.15+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT62"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT62"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:28.337+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:28.353+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT63"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT63"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:28.587+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:28.587+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT64"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT64"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:28.79+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:28.807+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT65"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT65"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:28.993+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:29.01+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT66"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT66"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:29.197+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:29.213+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT67"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT67"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:29.417+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:29.463+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT68"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT68"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:29.65+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:29.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT69"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT69"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:29.883+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:29.9+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT7"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT7"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:16.4+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:16.447+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT70"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT70"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:30.087+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:30.12+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT71"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT71"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:30.32+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:30.353+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT72"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT72"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:30.557+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:30.57+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT73"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT73"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:30.773+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:30.79+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT74"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT74"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:30.98+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:30.98+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT75"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT75"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:31.18+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:31.2+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT76"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT76"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:31.383+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:31.4+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT77"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT77"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:31.587+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:31.62+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT78"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT78"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:31.837+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:31.853+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT79"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT79"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:32.057+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:32.057+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT8"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT8"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:16.633+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:16.68+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT80"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT80"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:32.26+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:32.277+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT81"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT81"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:32.493+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:32.51+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT82"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT82"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:32.73+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:32.743+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT83"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT83"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:32.93+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:32.947+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT84"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT84"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:33.133+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:33.197+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT85"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT85"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:33.4+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:33.417+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT86"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT86"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:33.603+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:33.62+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT87"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT87"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:33.82+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:33.837+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT88"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT88"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:34.027+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:34.04+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT89"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT89"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:34.23+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:34.243+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT9"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT9"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:16.883+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:16.917+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT90"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT90"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:34.43+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:34.48+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT91"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT91"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:34.667+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:34.713+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT92"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT92"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:34.9+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:34.947+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT93"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT93"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:35.133+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:35.15+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT94"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT94"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:35.37+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:35.417+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT95"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT95"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:35.603+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:35.62+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT96"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT96"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:35.823+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:35.837+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT97"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT97"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:36.027+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:36.04+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT98"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT98"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:36.243+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:36.29+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("myCT99"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount25/connectionTypes/myCT99"),
					Properties: &armautomation.ConnectionTypeProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:36.493+00:00"); return t }()),
						FieldDefinitions: map[string]*armautomation.FieldDefinition{
							"myBoolField": {
								Type:        to.Ptr("bool"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringField": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(false),
								IsOptional:  to.Ptr(false),
							},
							"myStringFieldEncrypted": {
								Type:        to.Ptr("string"),
								IsEncrypted: to.Ptr(true),
								IsOptional:  to.Ptr(false),
							},
						},
						IsGlobal:         to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T06:25:36.527+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConnectionTypeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConnectionTypeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getAllConnectionTypes_Next100.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCredential_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteCredentialExisting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a credential"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewCredentialClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount20",
		"myCredential",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteCredentialExisting.json: %v", err)
	}
}

func TestCredential_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getCredential.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a credential"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewCredentialClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount18",
		"myCredential",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getCredential.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Credential{
			Name: to.Ptr("myCredential"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount18/credentials/myCredential"),
			Properties: &armautomation.CredentialProperties{
				Description:      to.Ptr("my description goes here"),
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:04:10.27+00:00"); return t }()),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:04:16.423+00:00"); return t }()),
				UserName:         to.Ptr("mylingaiah"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Credential) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Credential)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getCredential.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCredential_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateCredential.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a credential"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewCredentialClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount18",
		"myCredential",
		armautomation.CredentialCreateOrUpdateParameters{
			Name: to.Ptr("myCredential"),
			Properties: &armautomation.CredentialCreateOrUpdateProperties{
				Description: to.Ptr("my description goes here"),
				Password:    to.Ptr("<password>"),
				UserName:    to.Ptr("mylingaiah"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateCredential.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Credential{
			Name: to.Ptr("myCredential"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount18/credentials/myCredential"),
			Properties: &armautomation.CredentialProperties{
				Description:      to.Ptr("my description goes here"),
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:04:10.27+00:00"); return t }()),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:04:13.567+00:00"); return t }()),
				UserName:         to.Ptr("mylingaiah"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Credential) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Credential)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateCredential.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCredential_Update(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateCredential_patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a credential"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewCredentialClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount18",
		"myCredential",
		armautomation.CredentialUpdateParameters{
			Name: to.Ptr("myCredential"),
			Properties: &armautomation.CredentialUpdateProperties{
				Description: to.Ptr("my description goes here"),
				Password:    to.Ptr("<password>"),
				UserName:    to.Ptr("mylingaiah"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateCredential_patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Credential{
			Name: to.Ptr("myCredential"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount18/credentials/myCredential"),
			Properties: &armautomation.CredentialProperties{
				Description:      to.Ptr("my description goes here"),
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:04:10.27+00:00"); return t }()),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:04:13.567+00:00"); return t }()),
				UserName:         to.Ptr("mylingaiah"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Credential) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Credential)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateCredential_patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCredential_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listCredentialsByAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List credentials by automation account, first 100"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewCredentialClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount20",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listCredentialsByAutomationAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.CredentialListResult{
			Value: []*armautomation.Credential{
				{
					Name: to.Ptr("myCredential"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:38.91+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:45.393+00:00"); return t }()),
						UserName:         to.Ptr("mylingaiah"),
					},
				},
				{
					Name: to.Ptr("myCredential0"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential0"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:51.77+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:51.77+00:00"); return t }()),
						UserName:         to.Ptr("myCredential0"),
					},
				},
				{
					Name: to.Ptr("myCredential1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential1"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:52.113+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:52.113+00:00"); return t }()),
						UserName:         to.Ptr("myCredential1"),
					},
				},
				{
					Name: to.Ptr("myCredential10"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential10"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:55.3+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:55.3+00:00"); return t }()),
						UserName:         to.Ptr("myCredential10"),
					},
				},
				{
					Name: to.Ptr("myCredential100"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential100"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:25.41+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:25.41+00:00"); return t }()),
						UserName:         to.Ptr("myCredential100"),
					},
				},
				{
					Name: to.Ptr("myCredential101"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential101"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:25.69+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:25.69+00:00"); return t }()),
						UserName:         to.Ptr("myCredential101"),
					},
				},
				{
					Name: to.Ptr("myCredential102"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential102"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:26.003+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:26.003+00:00"); return t }()),
						UserName:         to.Ptr("myCredential102"),
					},
				},
				{
					Name: to.Ptr("myCredential103"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential103"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:26.337+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:26.337+00:00"); return t }()),
						UserName:         to.Ptr("myCredential103"),
					},
				},
				{
					Name: to.Ptr("myCredential104"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential104"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:26.677+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:26.677+00:00"); return t }()),
						UserName:         to.Ptr("myCredential104"),
					},
				},
				{
					Name: to.Ptr("myCredential105"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential105"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:27.02+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:27.02+00:00"); return t }()),
						UserName:         to.Ptr("myCredential105"),
					},
				},
				{
					Name: to.Ptr("myCredential106"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential106"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:27.35+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:27.35+00:00"); return t }()),
						UserName:         to.Ptr("myCredential106"),
					},
				},
				{
					Name: to.Ptr("myCredential107"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential107"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:27.66+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:27.66+00:00"); return t }()),
						UserName:         to.Ptr("myCredential107"),
					},
				},
				{
					Name: to.Ptr("myCredential108"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential108"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:27.99+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:27.99+00:00"); return t }()),
						UserName:         to.Ptr("myCredential108"),
					},
				},
				{
					Name: to.Ptr("myCredential109"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential109"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:28.3+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:28.3+00:00"); return t }()),
						UserName:         to.Ptr("myCredential109"),
					},
				},
				{
					Name: to.Ptr("myCredential11"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential11"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:55.677+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:55.677+00:00"); return t }()),
						UserName:         to.Ptr("myCredential11"),
					},
				},
				{
					Name: to.Ptr("myCredential110"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential110"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:28.63+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:28.63+00:00"); return t }()),
						UserName:         to.Ptr("myCredential110"),
					},
				},
				{
					Name: to.Ptr("myCredential111"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential111"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:28.943+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:28.943+00:00"); return t }()),
						UserName:         to.Ptr("myCredential111"),
					},
				},
				{
					Name: to.Ptr("myCredential112"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential112"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:29.253+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:29.253+00:00"); return t }()),
						UserName:         to.Ptr("myCredential112"),
					},
				},
				{
					Name: to.Ptr("myCredential113"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential113"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:29.567+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:29.567+00:00"); return t }()),
						UserName:         to.Ptr("myCredential113"),
					},
				},
				{
					Name: to.Ptr("myCredential114"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential114"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:29.88+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:29.88+00:00"); return t }()),
						UserName:         to.Ptr("myCredential114"),
					},
				},
				{
					Name: to.Ptr("myCredential115"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential115"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:30.207+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:30.207+00:00"); return t }()),
						UserName:         to.Ptr("myCredential115"),
					},
				},
				{
					Name: to.Ptr("myCredential116"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential116"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:30.52+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:30.52+00:00"); return t }()),
						UserName:         to.Ptr("myCredential116"),
					},
				},
				{
					Name: to.Ptr("myCredential117"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential117"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:30.833+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:30.833+00:00"); return t }()),
						UserName:         to.Ptr("myCredential117"),
					},
				},
				{
					Name: to.Ptr("myCredential118"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential118"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:31.24+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:31.24+00:00"); return t }()),
						UserName:         to.Ptr("myCredential118"),
					},
				},
				{
					Name: to.Ptr("myCredential119"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential119"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:31.6+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:31.6+00:00"); return t }()),
						UserName:         to.Ptr("myCredential119"),
					},
				},
				{
					Name: to.Ptr("myCredential12"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential12"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:56.02+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:56.02+00:00"); return t }()),
						UserName:         to.Ptr("myCredential12"),
					},
				},
				{
					Name: to.Ptr("myCredential120"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential120"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:31.943+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:31.943+00:00"); return t }()),
						UserName:         to.Ptr("myCredential120"),
					},
				},
				{
					Name: to.Ptr("myCredential121"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential121"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:32.333+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:32.333+00:00"); return t }()),
						UserName:         to.Ptr("myCredential121"),
					},
				},
				{
					Name: to.Ptr("myCredential122"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential122"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:32.66+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:32.66+00:00"); return t }()),
						UserName:         to.Ptr("myCredential122"),
					},
				},
				{
					Name: to.Ptr("myCredential123"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential123"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:32.957+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:32.957+00:00"); return t }()),
						UserName:         to.Ptr("myCredential123"),
					},
				},
				{
					Name: to.Ptr("myCredential124"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential124"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:33.27+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:33.27+00:00"); return t }()),
						UserName:         to.Ptr("myCredential124"),
					},
				},
				{
					Name: to.Ptr("myCredential125"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential125"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:33.6+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:33.6+00:00"); return t }()),
						UserName:         to.Ptr("myCredential125"),
					},
				},
				{
					Name: to.Ptr("myCredential126"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential126"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:33.957+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:33.957+00:00"); return t }()),
						UserName:         to.Ptr("myCredential126"),
					},
				},
				{
					Name: to.Ptr("myCredential127"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential127"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:34.287+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:34.287+00:00"); return t }()),
						UserName:         to.Ptr("myCredential127"),
					},
				},
				{
					Name: to.Ptr("myCredential128"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential128"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:34.613+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:34.613+00:00"); return t }()),
						UserName:         to.Ptr("myCredential128"),
					},
				},
				{
					Name: to.Ptr("myCredential129"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential129"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:34.973+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:34.973+00:00"); return t }()),
						UserName:         to.Ptr("myCredential129"),
					},
				},
				{
					Name: to.Ptr("myCredential13"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential13"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:56.393+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:56.393+00:00"); return t }()),
						UserName:         to.Ptr("myCredential13"),
					},
				},
				{
					Name: to.Ptr("myCredential130"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential130"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:35.363+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:35.363+00:00"); return t }()),
						UserName:         to.Ptr("myCredential130"),
					},
				},
				{
					Name: to.Ptr("myCredential131"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential131"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:35.707+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:35.707+00:00"); return t }()),
						UserName:         to.Ptr("myCredential131"),
					},
				},
				{
					Name: to.Ptr("myCredential132"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential132"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:36.037+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:36.037+00:00"); return t }()),
						UserName:         to.Ptr("myCredential132"),
					},
				},
				{
					Name: to.Ptr("myCredential133"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential133"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:36.38+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:36.38+00:00"); return t }()),
						UserName:         to.Ptr("myCredential133"),
					},
				},
				{
					Name: to.Ptr("myCredential134"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential134"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:36.74+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:36.74+00:00"); return t }()),
						UserName:         to.Ptr("myCredential134"),
					},
				},
				{
					Name: to.Ptr("myCredential135"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential135"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:37.05+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:37.05+00:00"); return t }()),
						UserName:         to.Ptr("myCredential135"),
					},
				},
				{
					Name: to.Ptr("myCredential136"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential136"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:37.41+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:37.41+00:00"); return t }()),
						UserName:         to.Ptr("myCredential136"),
					},
				},
				{
					Name: to.Ptr("myCredential137"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential137"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:37.723+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:37.723+00:00"); return t }()),
						UserName:         to.Ptr("myCredential137"),
					},
				},
				{
					Name: to.Ptr("myCredential138"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential138"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:38.037+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:38.037+00:00"); return t }()),
						UserName:         to.Ptr("myCredential138"),
					},
				},
				{
					Name: to.Ptr("myCredential139"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential139"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:38.35+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:38.35+00:00"); return t }()),
						UserName:         to.Ptr("myCredential139"),
					},
				},
				{
					Name: to.Ptr("myCredential14"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential14"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:56.723+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:56.723+00:00"); return t }()),
						UserName:         to.Ptr("myCredential14"),
					},
				},
				{
					Name: to.Ptr("myCredential140"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential140"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:38.71+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:38.71+00:00"); return t }()),
						UserName:         to.Ptr("myCredential140"),
					},
				},
				{
					Name: to.Ptr("myCredential141"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential141"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:39.037+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:39.037+00:00"); return t }()),
						UserName:         to.Ptr("myCredential141"),
					},
				},
				{
					Name: to.Ptr("myCredential142"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential142"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:39.35+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:39.35+00:00"); return t }()),
						UserName:         to.Ptr("myCredential142"),
					},
				},
				{
					Name: to.Ptr("myCredential143"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential143"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:39.677+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:39.677+00:00"); return t }()),
						UserName:         to.Ptr("myCredential143"),
					},
				},
				{
					Name: to.Ptr("myCredential144"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential144"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:39.99+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:39.99+00:00"); return t }()),
						UserName:         to.Ptr("myCredential144"),
					},
				},
				{
					Name: to.Ptr("myCredential145"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential145"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:40.317+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:40.317+00:00"); return t }()),
						UserName:         to.Ptr("myCredential145"),
					},
				},
				{
					Name: to.Ptr("myCredential146"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential146"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:40.63+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:40.63+00:00"); return t }()),
						UserName:         to.Ptr("myCredential146"),
					},
				},
				{
					Name: to.Ptr("myCredential147"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential147"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:40.943+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:40.943+00:00"); return t }()),
						UserName:         to.Ptr("myCredential147"),
					},
				},
				{
					Name: to.Ptr("myCredential148"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential148"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:41.27+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:41.27+00:00"); return t }()),
						UserName:         to.Ptr("myCredential148"),
					},
				},
				{
					Name: to.Ptr("myCredential149"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential149"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:41.6+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:41.6+00:00"); return t }()),
						UserName:         to.Ptr("myCredential149"),
					},
				},
				{
					Name: to.Ptr("myCredential15"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential15"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:57.033+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:57.033+00:00"); return t }()),
						UserName:         to.Ptr("myCredential15"),
					},
				},
				{
					Name: to.Ptr("myCredential150"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential150"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:41.91+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:41.91+00:00"); return t }()),
						UserName:         to.Ptr("myCredential150"),
					},
				},
				{
					Name: to.Ptr("myCredential151"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential151"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:42.24+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:42.24+00:00"); return t }()),
						UserName:         to.Ptr("myCredential151"),
					},
				},
				{
					Name: to.Ptr("myCredential152"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential152"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:42.567+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:42.567+00:00"); return t }()),
						UserName:         to.Ptr("myCredential152"),
					},
				},
				{
					Name: to.Ptr("myCredential153"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential153"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:42.88+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:42.88+00:00"); return t }()),
						UserName:         to.Ptr("myCredential153"),
					},
				},
				{
					Name: to.Ptr("myCredential154"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential154"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:43.193+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:43.193+00:00"); return t }()),
						UserName:         to.Ptr("myCredential154"),
					},
				},
				{
					Name: to.Ptr("myCredential155"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential155"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:43.52+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:43.52+00:00"); return t }()),
						UserName:         to.Ptr("myCredential155"),
					},
				},
				{
					Name: to.Ptr("myCredential156"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential156"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:43.833+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:43.833+00:00"); return t }()),
						UserName:         to.Ptr("myCredential156"),
					},
				},
				{
					Name: to.Ptr("myCredential157"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential157"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:44.147+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:44.147+00:00"); return t }()),
						UserName:         to.Ptr("myCredential157"),
					},
				},
				{
					Name: to.Ptr("myCredential158"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential158"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:44.473+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:44.473+00:00"); return t }()),
						UserName:         to.Ptr("myCredential158"),
					},
				},
				{
					Name: to.Ptr("myCredential159"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential159"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:44.787+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:44.787+00:00"); return t }()),
						UserName:         to.Ptr("myCredential159"),
					},
				},
				{
					Name: to.Ptr("myCredential16"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential16"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:57.363+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:57.363+00:00"); return t }()),
						UserName:         to.Ptr("myCredential16"),
					},
				},
				{
					Name: to.Ptr("myCredential160"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential160"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:45.1+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:45.1+00:00"); return t }()),
						UserName:         to.Ptr("myCredential160"),
					},
				},
				{
					Name: to.Ptr("myCredential161"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential161"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:45.427+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:45.427+00:00"); return t }()),
						UserName:         to.Ptr("myCredential161"),
					},
				},
				{
					Name: to.Ptr("myCredential162"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential162"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:45.74+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:45.74+00:00"); return t }()),
						UserName:         to.Ptr("myCredential162"),
					},
				},
				{
					Name: to.Ptr("myCredential163"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential163"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:46.067+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:46.067+00:00"); return t }()),
						UserName:         to.Ptr("myCredential163"),
					},
				},
				{
					Name: to.Ptr("myCredential164"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential164"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:46.38+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:46.38+00:00"); return t }()),
						UserName:         to.Ptr("myCredential164"),
					},
				},
				{
					Name: to.Ptr("myCredential165"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential165"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:46.71+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:46.71+00:00"); return t }()),
						UserName:         to.Ptr("myCredential165"),
					},
				},
				{
					Name: to.Ptr("myCredential166"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential166"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:47.037+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:47.037+00:00"); return t }()),
						UserName:         to.Ptr("myCredential166"),
					},
				},
				{
					Name: to.Ptr("myCredential167"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential167"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:47.35+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:47.35+00:00"); return t }()),
						UserName:         to.Ptr("myCredential167"),
					},
				},
				{
					Name: to.Ptr("myCredential168"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential168"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:47.677+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:47.677+00:00"); return t }()),
						UserName:         to.Ptr("myCredential168"),
					},
				},
				{
					Name: to.Ptr("myCredential169"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential169"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:47.99+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:47.99+00:00"); return t }()),
						UserName:         to.Ptr("myCredential169"),
					},
				},
				{
					Name: to.Ptr("myCredential17"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential17"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:57.677+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:57.677+00:00"); return t }()),
						UserName:         to.Ptr("myCredential17"),
					},
				},
				{
					Name: to.Ptr("myCredential170"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential170"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:48.287+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:48.287+00:00"); return t }()),
						UserName:         to.Ptr("myCredential170"),
					},
				},
				{
					Name: to.Ptr("myCredential171"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential171"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:48.613+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:48.613+00:00"); return t }()),
						UserName:         to.Ptr("myCredential171"),
					},
				},
				{
					Name: to.Ptr("myCredential172"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential172"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:48.927+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:48.927+00:00"); return t }()),
						UserName:         to.Ptr("myCredential172"),
					},
				},
				{
					Name: to.Ptr("myCredential173"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential173"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:49.257+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:49.257+00:00"); return t }()),
						UserName:         to.Ptr("myCredential173"),
					},
				},
				{
					Name: to.Ptr("myCredential174"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential174"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:49.567+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:49.567+00:00"); return t }()),
						UserName:         to.Ptr("myCredential174"),
					},
				},
				{
					Name: to.Ptr("myCredential175"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential175"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:49.88+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:49.88+00:00"); return t }()),
						UserName:         to.Ptr("myCredential175"),
					},
				},
				{
					Name: to.Ptr("myCredential176"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential176"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:50.21+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:50.21+00:00"); return t }()),
						UserName:         to.Ptr("myCredential176"),
					},
				},
				{
					Name: to.Ptr("myCredential177"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential177"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:50.537+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:50.537+00:00"); return t }()),
						UserName:         to.Ptr("myCredential177"),
					},
				},
				{
					Name: to.Ptr("myCredential178"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential178"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:50.863+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:50.863+00:00"); return t }()),
						UserName:         to.Ptr("myCredential178"),
					},
				},
				{
					Name: to.Ptr("myCredential179"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential179"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:51.193+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:51.193+00:00"); return t }()),
						UserName:         to.Ptr("myCredential179"),
					},
				},
				{
					Name: to.Ptr("myCredential18"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential18"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:58.003+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:58.003+00:00"); return t }()),
						UserName:         to.Ptr("myCredential18"),
					},
				},
				{
					Name: to.Ptr("myCredential180"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential180"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:51.6+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:51.6+00:00"); return t }()),
						UserName:         to.Ptr("myCredential180"),
					},
				},
				{
					Name: to.Ptr("myCredential181"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential181"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:51.91+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:51.91+00:00"); return t }()),
						UserName:         to.Ptr("myCredential181"),
					},
				},
				{
					Name: to.Ptr("myCredential182"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential182"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:52.223+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:52.223+00:00"); return t }()),
						UserName:         to.Ptr("myCredential182"),
					},
				},
				{
					Name: to.Ptr("myCredential183"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential183"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:52.6+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:52.6+00:00"); return t }()),
						UserName:         to.Ptr("myCredential183"),
					},
				},
				{
					Name: to.Ptr("myCredential184"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential184"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:52.927+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:52.927+00:00"); return t }()),
						UserName:         to.Ptr("myCredential184"),
					},
				},
				{
					Name: to.Ptr("myCredential185"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential185"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:53.27+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:53.27+00:00"); return t }()),
						UserName:         to.Ptr("myCredential185"),
					},
				},
				{
					Name: to.Ptr("myCredential186"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential186"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:53.583+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:53.583+00:00"); return t }()),
						UserName:         to.Ptr("myCredential186"),
					},
				},
				{
					Name: to.Ptr("myCredential187"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential187"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:54.037+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:54.037+00:00"); return t }()),
						UserName:         to.Ptr("myCredential187"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CredentialListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CredentialListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listCredentialsByAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listCredentialsByAutomationAccount_next100_using_nextLink.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List credentials by automation account, next 100"},
	})
	client = armautomation.NewCredentialClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount20",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listCredentialsByAutomationAccount_next100_using_nextLink.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.CredentialListResult{
			Value: []*armautomation.Credential{
				{
					Name: to.Ptr("myCredential188"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential188"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:54.397+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:54.397+00:00"); return t }()),
						UserName:         to.Ptr("myCredential188"),
					},
				},
				{
					Name: to.Ptr("myCredential189"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential189"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:54.71+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:54.71+00:00"); return t }()),
						UserName:         to.Ptr("myCredential189"),
					},
				},
				{
					Name: to.Ptr("myCredential19"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential19"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:58.33+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:58.33+00:00"); return t }()),
						UserName:         to.Ptr("myCredential19"),
					},
				},
				{
					Name: to.Ptr("myCredential190"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential190"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:55.037+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:55.037+00:00"); return t }()),
						UserName:         to.Ptr("myCredential190"),
					},
				},
				{
					Name: to.Ptr("myCredential191"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential191"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:55.35+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:55.35+00:00"); return t }()),
						UserName:         to.Ptr("myCredential191"),
					},
				},
				{
					Name: to.Ptr("myCredential192"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential192"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:55.677+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:55.677+00:00"); return t }()),
						UserName:         to.Ptr("myCredential192"),
					},
				},
				{
					Name: to.Ptr("myCredential193"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential193"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:56.007+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:56.007+00:00"); return t }()),
						UserName:         to.Ptr("myCredential193"),
					},
				},
				{
					Name: to.Ptr("myCredential194"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential194"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:56.333+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:56.333+00:00"); return t }()),
						UserName:         to.Ptr("myCredential194"),
					},
				},
				{
					Name: to.Ptr("myCredential195"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential195"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:56.66+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:56.66+00:00"); return t }()),
						UserName:         to.Ptr("myCredential195"),
					},
				},
				{
					Name: to.Ptr("myCredential196"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential196"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:57.007+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:57.007+00:00"); return t }()),
						UserName:         to.Ptr("myCredential196"),
					},
				},
				{
					Name: to.Ptr("myCredential197"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential197"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:57.333+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:57.333+00:00"); return t }()),
						UserName:         to.Ptr("myCredential197"),
					},
				},
				{
					Name: to.Ptr("myCredential198"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential198"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:57.66+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:57.66+00:00"); return t }()),
						UserName:         to.Ptr("myCredential198"),
					},
				},
				{
					Name: to.Ptr("myCredential199"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential199"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:57.973+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:57.973+00:00"); return t }()),
						UserName:         to.Ptr("myCredential199"),
					},
				},
				{
					Name: to.Ptr("myCredential2"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential2"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:52.44+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:52.44+00:00"); return t }()),
						UserName:         to.Ptr("myCredential2"),
					},
				},
				{
					Name: to.Ptr("myCredential20"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential20"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:58.66+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:58.66+00:00"); return t }()),
						UserName:         to.Ptr("myCredential20"),
					},
				},
				{
					Name: to.Ptr("myCredential200"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential200"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:58.303+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:58.303+00:00"); return t }()),
						UserName:         to.Ptr("myCredential200"),
					},
				},
				{
					Name: to.Ptr("myCredential21"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential21"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:59.033+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:59.033+00:00"); return t }()),
						UserName:         to.Ptr("myCredential21"),
					},
				},
				{
					Name: to.Ptr("myCredential22"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential22"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:59.363+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:59.363+00:00"); return t }()),
						UserName:         to.Ptr("myCredential22"),
					},
				},
				{
					Name: to.Ptr("myCredential23"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential23"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:59.707+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:59.707+00:00"); return t }()),
						UserName:         to.Ptr("myCredential23"),
					},
				},
				{
					Name: to.Ptr("myCredential24"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential24"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:00.02+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:00.02+00:00"); return t }()),
						UserName:         to.Ptr("myCredential24"),
					},
				},
				{
					Name: to.Ptr("myCredential25"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential25"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:00.33+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:00.33+00:00"); return t }()),
						UserName:         to.Ptr("myCredential25"),
					},
				},
				{
					Name: to.Ptr("myCredential26"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential26"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:00.707+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:00.707+00:00"); return t }()),
						UserName:         to.Ptr("myCredential26"),
					},
				},
				{
					Name: to.Ptr("myCredential27"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential27"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:01.02+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:01.02+00:00"); return t }()),
						UserName:         to.Ptr("myCredential27"),
					},
				},
				{
					Name: to.Ptr("myCredential28"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential28"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:01.347+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:01.347+00:00"); return t }()),
						UserName:         to.Ptr("myCredential28"),
					},
				},
				{
					Name: to.Ptr("myCredential29"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential29"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:01.847+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:01.847+00:00"); return t }()),
						UserName:         to.Ptr("myCredential29"),
					},
				},
				{
					Name: to.Ptr("myCredential3"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential3"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:52.863+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:52.863+00:00"); return t }()),
						UserName:         to.Ptr("myCredential3"),
					},
				},
				{
					Name: to.Ptr("myCredential30"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential30"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:02.16+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:02.16+00:00"); return t }()),
						UserName:         to.Ptr("myCredential30"),
					},
				},
				{
					Name: to.Ptr("myCredential31"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential31"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:02.503+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:02.503+00:00"); return t }()),
						UserName:         to.Ptr("myCredential31"),
					},
				},
				{
					Name: to.Ptr("myCredential32"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential32"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:02.88+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:02.88+00:00"); return t }()),
						UserName:         to.Ptr("myCredential32"),
					},
				},
				{
					Name: to.Ptr("myCredential33"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential33"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:03.177+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:03.177+00:00"); return t }()),
						UserName:         to.Ptr("myCredential33"),
					},
				},
				{
					Name: to.Ptr("myCredential34"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential34"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:03.55+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:03.55+00:00"); return t }()),
						UserName:         to.Ptr("myCredential34"),
					},
				},
				{
					Name: to.Ptr("myCredential35"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential35"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:03.893+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:03.893+00:00"); return t }()),
						UserName:         to.Ptr("myCredential35"),
					},
				},
				{
					Name: to.Ptr("myCredential36"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential36"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:04.207+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:04.207+00:00"); return t }()),
						UserName:         to.Ptr("myCredential36"),
					},
				},
				{
					Name: to.Ptr("myCredential37"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential37"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:04.55+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:04.55+00:00"); return t }()),
						UserName:         to.Ptr("myCredential37"),
					},
				},
				{
					Name: to.Ptr("myCredential38"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential38"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:04.847+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:04.847+00:00"); return t }()),
						UserName:         to.Ptr("myCredential38"),
					},
				},
				{
					Name: to.Ptr("myCredential39"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential39"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:05.177+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:05.177+00:00"); return t }()),
						UserName:         to.Ptr("myCredential39"),
					},
				},
				{
					Name: to.Ptr("myCredential4"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential4"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:53.253+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:53.253+00:00"); return t }()),
						UserName:         to.Ptr("myCredential4"),
					},
				},
				{
					Name: to.Ptr("myCredential40"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential40"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:05.49+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:05.49+00:00"); return t }()),
						UserName:         to.Ptr("myCredential40"),
					},
				},
				{
					Name: to.Ptr("myCredential41"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential41"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:05.83+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:05.83+00:00"); return t }()),
						UserName:         to.Ptr("myCredential41"),
					},
				},
				{
					Name: to.Ptr("myCredential42"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential42"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:06.143+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:06.143+00:00"); return t }()),
						UserName:         to.Ptr("myCredential42"),
					},
				},
				{
					Name: to.Ptr("myCredential43"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential43"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:06.457+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:06.457+00:00"); return t }()),
						UserName:         to.Ptr("myCredential43"),
					},
				},
				{
					Name: to.Ptr("myCredential44"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential44"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:06.94+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:06.94+00:00"); return t }()),
						UserName:         to.Ptr("myCredential44"),
					},
				},
				{
					Name: to.Ptr("myCredential45"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential45"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:07.3+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:07.3+00:00"); return t }()),
						UserName:         to.Ptr("myCredential45"),
					},
				},
				{
					Name: to.Ptr("myCredential46"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential46"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:07.63+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:07.63+00:00"); return t }()),
						UserName:         to.Ptr("myCredential46"),
					},
				},
				{
					Name: to.Ptr("myCredential47"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential47"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:07.957+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:07.957+00:00"); return t }()),
						UserName:         to.Ptr("myCredential47"),
					},
				},
				{
					Name: to.Ptr("myCredential48"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential48"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:08.27+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:08.27+00:00"); return t }()),
						UserName:         to.Ptr("myCredential48"),
					},
				},
				{
					Name: to.Ptr("myCredential49"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential49"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:08.58+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:08.58+00:00"); return t }()),
						UserName:         to.Ptr("myCredential49"),
					},
				},
				{
					Name: to.Ptr("myCredential5"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential5"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:53.567+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:53.567+00:00"); return t }()),
						UserName:         to.Ptr("myCredential5"),
					},
				},
				{
					Name: to.Ptr("myCredential50"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential50"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:09.02+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:09.02+00:00"); return t }()),
						UserName:         to.Ptr("myCredential50"),
					},
				},
				{
					Name: to.Ptr("myCredential51"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential51"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:09.33+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:09.33+00:00"); return t }()),
						UserName:         to.Ptr("myCredential51"),
					},
				},
				{
					Name: to.Ptr("myCredential52"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential52"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:09.643+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:09.643+00:00"); return t }()),
						UserName:         to.Ptr("myCredential52"),
					},
				},
				{
					Name: to.Ptr("myCredential53"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential53"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:09.973+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:09.973+00:00"); return t }()),
						UserName:         to.Ptr("myCredential53"),
					},
				},
				{
					Name: to.Ptr("myCredential54"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential54"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:10.287+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:10.287+00:00"); return t }()),
						UserName:         to.Ptr("myCredential54"),
					},
				},
				{
					Name: to.Ptr("myCredential55"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential55"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:10.66+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:10.66+00:00"); return t }()),
						UserName:         to.Ptr("myCredential55"),
					},
				},
				{
					Name: to.Ptr("myCredential56"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential56"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:10.973+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:10.973+00:00"); return t }()),
						UserName:         to.Ptr("myCredential56"),
					},
				},
				{
					Name: to.Ptr("myCredential57"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential57"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:11.33+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:11.33+00:00"); return t }()),
						UserName:         to.Ptr("myCredential57"),
					},
				},
				{
					Name: to.Ptr("myCredential58"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential58"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:11.643+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:11.643+00:00"); return t }()),
						UserName:         to.Ptr("myCredential58"),
					},
				},
				{
					Name: to.Ptr("myCredential59"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential59"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:11.99+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:11.99+00:00"); return t }()),
						UserName:         to.Ptr("myCredential59"),
					},
				},
				{
					Name: to.Ptr("myCredential6"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential6"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:53.863+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:53.863+00:00"); return t }()),
						UserName:         to.Ptr("myCredential6"),
					},
				},
				{
					Name: to.Ptr("myCredential60"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential60"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:12.3+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:12.3+00:00"); return t }()),
						UserName:         to.Ptr("myCredential60"),
					},
				},
				{
					Name: to.Ptr("myCredential61"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential61"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:12.63+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:12.63+00:00"); return t }()),
						UserName:         to.Ptr("myCredential61"),
					},
				},
				{
					Name: to.Ptr("myCredential62"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential62"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:12.957+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:12.957+00:00"); return t }()),
						UserName:         to.Ptr("myCredential62"),
					},
				},
				{
					Name: to.Ptr("myCredential63"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential63"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:13.27+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:13.27+00:00"); return t }()),
						UserName:         to.Ptr("myCredential63"),
					},
				},
				{
					Name: to.Ptr("myCredential64"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential64"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:13.583+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:13.583+00:00"); return t }()),
						UserName:         to.Ptr("myCredential64"),
					},
				},
				{
					Name: to.Ptr("myCredential65"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential65"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:13.893+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:13.893+00:00"); return t }()),
						UserName:         to.Ptr("myCredential65"),
					},
				},
				{
					Name: to.Ptr("myCredential66"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential66"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:14.207+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:14.207+00:00"); return t }()),
						UserName:         to.Ptr("myCredential66"),
					},
				},
				{
					Name: to.Ptr("myCredential67"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential67"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:14.537+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:14.537+00:00"); return t }()),
						UserName:         to.Ptr("myCredential67"),
					},
				},
				{
					Name: to.Ptr("myCredential68"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential68"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:14.847+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:14.847+00:00"); return t }()),
						UserName:         to.Ptr("myCredential68"),
					},
				},
				{
					Name: to.Ptr("myCredential69"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential69"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:15.19+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:15.19+00:00"); return t }()),
						UserName:         to.Ptr("myCredential69"),
					},
				},
				{
					Name: to.Ptr("myCredential7"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential7"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:54.19+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:54.19+00:00"); return t }()),
						UserName:         to.Ptr("myCredential7"),
					},
				},
				{
					Name: to.Ptr("myCredential70"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential70"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:15.503+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:15.503+00:00"); return t }()),
						UserName:         to.Ptr("myCredential70"),
					},
				},
				{
					Name: to.Ptr("myCredential71"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential71"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:15.91+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:15.91+00:00"); return t }()),
						UserName:         to.Ptr("myCredential71"),
					},
				},
				{
					Name: to.Ptr("myCredential72"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential72"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:16.253+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:16.253+00:00"); return t }()),
						UserName:         to.Ptr("myCredential72"),
					},
				},
				{
					Name: to.Ptr("myCredential73"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential73"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:16.567+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:16.567+00:00"); return t }()),
						UserName:         to.Ptr("myCredential73"),
					},
				},
				{
					Name: to.Ptr("myCredential74"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential74"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:16.927+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:16.927+00:00"); return t }()),
						UserName:         to.Ptr("myCredential74"),
					},
				},
				{
					Name: to.Ptr("myCredential75"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential75"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:17.253+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:17.253+00:00"); return t }()),
						UserName:         to.Ptr("myCredential75"),
					},
				},
				{
					Name: to.Ptr("myCredential76"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential76"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:17.567+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:17.567+00:00"); return t }()),
						UserName:         to.Ptr("myCredential76"),
					},
				},
				{
					Name: to.Ptr("myCredential77"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential77"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:17.88+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:17.88+00:00"); return t }()),
						UserName:         to.Ptr("myCredential77"),
					},
				},
				{
					Name: to.Ptr("myCredential78"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential78"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:18.19+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:18.19+00:00"); return t }()),
						UserName:         to.Ptr("myCredential78"),
					},
				},
				{
					Name: to.Ptr("myCredential79"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential79"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:18.52+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:18.52+00:00"); return t }()),
						UserName:         to.Ptr("myCredential79"),
					},
				},
				{
					Name: to.Ptr("myCredential8"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential8"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:54.503+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:54.503+00:00"); return t }()),
						UserName:         to.Ptr("myCredential8"),
					},
				},
				{
					Name: to.Ptr("myCredential80"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential80"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:18.833+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:18.833+00:00"); return t }()),
						UserName:         to.Ptr("myCredential80"),
					},
				},
				{
					Name: to.Ptr("myCredential81"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential81"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:19.177+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:19.177+00:00"); return t }()),
						UserName:         to.Ptr("myCredential81"),
					},
				},
				{
					Name: to.Ptr("myCredential82"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential82"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:19.49+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:19.49+00:00"); return t }()),
						UserName:         to.Ptr("myCredential82"),
					},
				},
				{
					Name: to.Ptr("myCredential83"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential83"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:19.833+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:19.833+00:00"); return t }()),
						UserName:         to.Ptr("myCredential83"),
					},
				},
				{
					Name: to.Ptr("myCredential84"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential84"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:20.177+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:20.177+00:00"); return t }()),
						UserName:         to.Ptr("myCredential84"),
					},
				},
				{
					Name: to.Ptr("myCredential85"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential85"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:20.503+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:20.503+00:00"); return t }()),
						UserName:         to.Ptr("myCredential85"),
					},
				},
				{
					Name: to.Ptr("myCredential86"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential86"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:20.817+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:20.817+00:00"); return t }()),
						UserName:         to.Ptr("myCredential86"),
					},
				},
				{
					Name: to.Ptr("myCredential87"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential87"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:21.143+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:21.143+00:00"); return t }()),
						UserName:         to.Ptr("myCredential87"),
					},
				},
				{
					Name: to.Ptr("myCredential88"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential88"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:21.457+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:21.457+00:00"); return t }()),
						UserName:         to.Ptr("myCredential88"),
					},
				},
				{
					Name: to.Ptr("myCredential89"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential89"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:21.787+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:21.787+00:00"); return t }()),
						UserName:         to.Ptr("myCredential89"),
					},
				},
				{
					Name: to.Ptr("myCredential9"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential9"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:54.957+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:43:54.957+00:00"); return t }()),
						UserName:         to.Ptr("myCredential9"),
					},
				},
				{
					Name: to.Ptr("myCredential90"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential90"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:22.1+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:22.1+00:00"); return t }()),
						UserName:         to.Ptr("myCredential90"),
					},
				},
				{
					Name: to.Ptr("myCredential91"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential91"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:22.427+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:22.427+00:00"); return t }()),
						UserName:         to.Ptr("myCredential91"),
					},
				},
				{
					Name: to.Ptr("myCredential92"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential92"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:22.77+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:22.77+00:00"); return t }()),
						UserName:         to.Ptr("myCredential92"),
					},
				},
				{
					Name: to.Ptr("myCredential93"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential93"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:23.083+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:23.083+00:00"); return t }()),
						UserName:         to.Ptr("myCredential93"),
					},
				},
				{
					Name: to.Ptr("myCredential94"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential94"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:23.41+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:23.41+00:00"); return t }()),
						UserName:         to.Ptr("myCredential94"),
					},
				},
				{
					Name: to.Ptr("myCredential95"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential95"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:23.753+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:23.753+00:00"); return t }()),
						UserName:         to.Ptr("myCredential95"),
					},
				},
				{
					Name: to.Ptr("myCredential96"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential96"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:24.1+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:24.1+00:00"); return t }()),
						UserName:         to.Ptr("myCredential96"),
					},
				},
				{
					Name: to.Ptr("myCredential97"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount20/credentials/myCredential97"),
					Properties: &armautomation.CredentialProperties{
						Description:      to.Ptr("my description goes here"),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:24.427+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-26T21:44:24.427+00:00"); return t }()),
						UserName:         to.Ptr("myCredential97"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CredentialListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CredentialListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listCredentialsByAutomationAccount_next100_using_nextLink.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridRunbookWorkerGroup_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/deleteHybridRunbookWorkerGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a hybrid worker group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewHybridRunbookWorkerGroupClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount20",
		"myGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/deleteHybridRunbookWorkerGroup.json: %v", err)
	}
}

func TestHybridRunbookWorkerGroup_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getHybridRunbookWorkerGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a hybrid worker group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewHybridRunbookWorkerGroupClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"testaccount",
		"TestHybridGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getHybridRunbookWorkerGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.HybridRunbookWorkerGroup{
			Name: to.Ptr("TestHybridGroup"),
			Type: to.Ptr("Microsoft.Automation/AutomationAccounts/HybridRunbookWorkerGroups"),
			Credential: &armautomation.RunAsCredentialAssociationProperty{
				Name: to.Ptr("myRunAsCredentialName"),
			},
			GroupType: to.Ptr(armautomation.GroupTypeEnumUser),
			ID:        to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/testaccount/hybridRunbookWorkerGroups/TestHybridGroup"),
			SystemData: &armautomation.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				CreatedBy:          to.Ptr("foo@contoso.com"),
				CreatedByType:      to.Ptr(armautomation.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("foo@contoso.com"),
				LastModifiedByType: to.Ptr(armautomation.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HybridRunbookWorkerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HybridRunbookWorkerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getHybridRunbookWorkerGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridRunbookWorkerGroup_Create(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/putHybridRunbookWorkerGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a hybrid worker group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewHybridRunbookWorkerGroupClient("subid", cred, &options)
	res, err := client.Create(ctx,
		"rg",
		"testaccount",
		"TestHybridGroup",
		armautomation.HybridRunbookWorkerGroupCreateOrUpdateParameters{
			Credential: &armautomation.RunAsCredentialAssociationProperty{
				Name: to.Ptr("myRunAsCredentialName"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/putHybridRunbookWorkerGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.HybridRunbookWorkerGroup{
			Name: to.Ptr("TestHybridGroup"),
			Credential: &armautomation.RunAsCredentialAssociationProperty{
				Name: to.Ptr("myRunAsCredentialName"),
			},
			GroupType: to.Ptr(armautomation.GroupTypeEnumUser),
			ID:        to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/testaccount/hybridRunbookWorkerGroups/TestHybridGroup"),
			SystemData: &armautomation.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				CreatedBy:          to.Ptr("foo@contoso.com"),
				CreatedByType:      to.Ptr(armautomation.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("foo@contoso.com"),
				LastModifiedByType: to.Ptr(armautomation.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HybridRunbookWorkerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HybridRunbookWorkerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/putHybridRunbookWorkerGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridRunbookWorkerGroup_Update(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/updateHybridRunbookWorkerGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update hybrid worker group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewHybridRunbookWorkerGroupClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"testaccount",
		"TestHybridGroup",
		armautomation.HybridRunbookWorkerGroupCreateOrUpdateParameters{
			Credential: &armautomation.RunAsCredentialAssociationProperty{
				Name: to.Ptr("myRunAsCredentialName"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/updateHybridRunbookWorkerGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.HybridRunbookWorkerGroup{
			Name: to.Ptr("TestHybridGroup"),
			Credential: &armautomation.RunAsCredentialAssociationProperty{
				Name: to.Ptr("myRunAsCredentialName"),
			},
			GroupType: to.Ptr(armautomation.GroupTypeEnumUser),
			ID:        to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/testaccount/hybridRunbookWorkerGroups/TestHybridGroup"),
			SystemData: &armautomation.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				CreatedBy:          to.Ptr("foo@contoso.com"),
				CreatedByType:      to.Ptr(armautomation.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("foo@contoso.com"),
				LastModifiedByType: to.Ptr(armautomation.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HybridRunbookWorkerGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HybridRunbookWorkerGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/updateHybridRunbookWorkerGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridRunbookWorkerGroup_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listHybridRunbookWorkerGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List hybrid worker groups by Automation Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewHybridRunbookWorkerGroupClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"testaccount",
		&armautomation.HybridRunbookWorkerGroupClientListByAutomationAccountOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listHybridRunbookWorkerGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.HybridRunbookWorkerGroupsListResult{
			Value: []*armautomation.HybridRunbookWorkerGroup{
				{
					Name: to.Ptr("TestHybridGroup"),
					Credential: &armautomation.RunAsCredentialAssociationProperty{
						Name: to.Ptr("myRunAsCredentialName"),
					},
					GroupType: to.Ptr(armautomation.GroupTypeEnumUser),
					ID:        to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/testaccount/hybridRunbookWorkerGroups/TestHybridGroup"),
					SystemData: &armautomation.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						CreatedBy:          to.Ptr("foo@contoso.com"),
						CreatedByType:      to.Ptr(armautomation.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("foo@contoso.com"),
						LastModifiedByType: to.Ptr(armautomation.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HybridRunbookWorkerGroupsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HybridRunbookWorkerGroupsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listHybridRunbookWorkerGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobSchedule_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteJobSchedule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a job schedule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewJobScheduleClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"ContoseAutomationAccount",
		"0fa462ba-3aa2-4138-83ca-9ebc3bc55cdc",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteJobSchedule.json: %v", err)
	}
}

func TestJobSchedule_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getJobSchedule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a job schedule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewJobScheduleClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"ContoseAutomationAccount",
		"0fa462ba-3aa2-4138-83ca-9ebc3bc55cdc",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getJobSchedule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.JobSchedule{
			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/jobSchedules/0fa462ba-3aa2-4138-83ca-9ebc3bc55cdc"),
			Properties: &armautomation.JobScheduleProperties{
				JobScheduleID: to.Ptr("0fa462ba-3aa2-4138-83ca-9ebc3bc55cdc"),
				Parameters: map[string]*string{
					"jobscheduletag01": to.Ptr("jobschedulevalue01"),
					"jobscheduletag02": to.Ptr("jobschedulevalue02"),
				},
				Runbook: &armautomation.RunbookAssociationProperty{
					Name: to.Ptr("TestRunbook"),
				},
				Schedule: &armautomation.ScheduleAssociationProperty{
					Name: to.Ptr("ScheduleNameGoesHere332204b5-debe-4348-a5c7-6357457189f2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobSchedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobSchedule)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getJobSchedule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobSchedule_Create(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createJobSchedule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a job schedule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewJobScheduleClient("subid", cred, &options)
	_, err := client.Create(ctx,
		"rg",
		"ContoseAutomationAccount",
		"0fa462ba-3aa2-4138-83ca-9ebc3bc55cdc",
		armautomation.JobScheduleCreateParameters{
			Properties: &armautomation.JobScheduleCreateProperties{
				Parameters: map[string]*string{
					"jobscheduletag01": to.Ptr("jobschedulevalue01"),
					"jobscheduletag02": to.Ptr("jobschedulevalue02"),
				},
				Runbook: &armautomation.RunbookAssociationProperty{
					Name: to.Ptr("TestRunbook"),
				},
				Schedule: &armautomation.ScheduleAssociationProperty{
					Name: to.Ptr("ScheduleNameGoesHere332204b5-debe-4348-a5c7-6357457189f2"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createJobSchedule.json: %v", err)
	}
}

func TestJobSchedule_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listAllJobSchedulesByAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all job schedules by automation account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewJobScheduleClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"ContoseAutomationAccount",
		&armautomation.JobScheduleClientListByAutomationAccountOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listAllJobSchedulesByAutomationAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.JobScheduleListResult{
			Value: []*armautomation.JobSchedule{
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/jobSchedules/2f4d8f35-ecd5-44ee-a019-2382fec58fb7"),
					Properties: &armautomation.JobScheduleProperties{
						JobScheduleID: to.Ptr("2f4d8f35-ecd5-44ee-a019-2382fec58fb7"),
						Runbook: &armautomation.RunbookAssociationProperty{
							Name: to.Ptr("TestRunbook"),
						},
						Schedule: &armautomation.ScheduleAssociationProperty{
							Name: to.Ptr("JobScheduleforTestRunbook"),
						},
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/jobSchedules/446f7a33-86ff-45a1-b71c-f998f701b443"),
					Properties: &armautomation.JobScheduleProperties{
						JobScheduleID: to.Ptr("446f7a33-86ff-45a1-b71c-f998f701b443"),
						Runbook: &armautomation.RunbookAssociationProperty{
							Name: to.Ptr("TestRunbook"),
						},
						Schedule: &armautomation.ScheduleAssociationProperty{
							Name: to.Ptr("TestSchedule"),
						},
					},
				},
				{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/jobSchedules/0fa462ba-3aa2-4138-83ca-9ebc3bc55cdc"),
					Properties: &armautomation.JobScheduleProperties{
						JobScheduleID: to.Ptr("0fa462ba-3aa2-4138-83ca-9ebc3bc55cdc"),
						Runbook: &armautomation.RunbookAssociationProperty{
							Name: to.Ptr("TestRunbook"),
						},
						Schedule: &armautomation.ScheduleAssociationProperty{
							Name: to.Ptr("ScheduleNameGoesHere332204b5-debe-4348-a5c7-6357457189f2"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobScheduleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobScheduleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listAllJobSchedulesByAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedWorkspace_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getLinkedWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the linked workspace of an automation account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewLinkedWorkspaceClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"ContosoAutomationAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getLinkedWorkspace.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.LinkedWorkspace{
			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.OperationalInsights/workspaces/ContosoWorkspace"),
		}
		if !reflect.DeepEqual(exampleRes, res.LinkedWorkspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkedWorkspace)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getLinkedWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActivity_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getActivityInAModule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Activity in a module"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewActivityClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		"Add-AzureRmAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getActivityInAModule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Activity{
			Name: to.Ptr("Add-AzureRmAccount"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile/activities/Add-AzureRmAccount"),
			Properties: &armautomation.ActivityProperties{
				Description:      to.Ptr("The Add-AzureRmAcccount cmdlet adds an authenticated Azure account to use for Azure Resource Manager cmdlet requests.\n\nYou can use this authenticated account only with Azure Resource Manager cmdlets. To add an authenticated account for use with Service Management cmdlets, use the Add-AzureAccount or the Import-AzurePublishSettingsFile cmdlet."),
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
				Definition:       to.Ptr(""),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
				OutputTypes: []*armautomation.ActivityOutputType{
					{
						Name: to.Ptr("Microsoft.Azure.Commands.Profile.Models.PSAzureProfile"),
						Type: to.Ptr("Microsoft.Azure.Commands.Profile.Models.PSAzureProfile"),
					}},
				ParameterSets: []*armautomation.ActivityParameterSet{
					{
						Name: to.Ptr("SubscriptionId"),
						Parameters: []*armautomation.ActivityParameter{
							{
								Name:                            to.Ptr("AccessToken"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("AccountId"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("ApplicationId"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("CertificateThumbprint"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("Credential"),
								Type:                            to.Ptr("System.Management.Automation.PSCredential"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("Environment"),
								Type:                            to.Ptr("Microsoft.Azure.Common.Authentication.Models.AzureEnvironment"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("EnvironmentName"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("SubscriptionId"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(true),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("TenantId"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							}},
					},
					{
						Name: to.Ptr("ServicePrincipal"),
						Parameters: []*armautomation.ActivityParameter{
							{
								Name:                            to.Ptr("Credential"),
								Type:                            to.Ptr("System.Management.Automation.PSCredential"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(true),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("Environment"),
								Type:                            to.Ptr("Microsoft.Azure.Common.Authentication.Models.AzureEnvironment"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("EnvironmentName"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("ServicePrincipal"),
								Type:                            to.Ptr("System.Management.Automation.SwitchParameter"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(true),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("SubscriptionId"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(true),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("SubscriptionName"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(true),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("TenantId"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(true),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							}},
					},
					{
						Name: to.Ptr("SubscriptionName"),
						Parameters: []*armautomation.ActivityParameter{
							{
								Name:                            to.Ptr("AccessToken"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("AccountId"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("ApplicationId"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("CertificateThumbprint"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("Credential"),
								Type:                            to.Ptr("System.Management.Automation.PSCredential"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("Environment"),
								Type:                            to.Ptr("Microsoft.Azure.Common.Authentication.Models.AzureEnvironment"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("EnvironmentName"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("SubscriptionName"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(true),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("TenantId"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							}},
					},
					{
						Name: to.Ptr("User"),
						Parameters: []*armautomation.ActivityParameter{
							{
								Name:                            to.Ptr("Credential"),
								Type:                            to.Ptr("System.Management.Automation.PSCredential"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("Environment"),
								Type:                            to.Ptr("Microsoft.Azure.Common.Authentication.Models.AzureEnvironment"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("EnvironmentName"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("TenantId"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							}},
					},
					{
						Name: to.Ptr("AccessToken"),
						Parameters: []*armautomation.ActivityParameter{
							{
								Name:                            to.Ptr("AccessToken"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(true),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("AccountId"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(true),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("Environment"),
								Type:                            to.Ptr("Microsoft.Azure.Common.Authentication.Models.AzureEnvironment"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("EnvironmentName"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("TenantId"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							}},
					},
					{
						Name: to.Ptr("ServicePrincipalCertificate"),
						Parameters: []*armautomation.ActivityParameter{
							{
								Name:                            to.Ptr("ApplicationId"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(true),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("CertificateThumbprint"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(true),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("Environment"),
								Type:                            to.Ptr("Microsoft.Azure.Common.Authentication.Models.AzureEnvironment"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("EnvironmentName"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(false),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("ServicePrincipal"),
								Type:                            to.Ptr("System.Management.Automation.SwitchParameter"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(true),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							},
							{
								Name:                            to.Ptr("TenantId"),
								Type:                            to.Ptr("System.String"),
								Description:                     to.Ptr("Specify the feature description"),
								IsDynamic:                       to.Ptr(false),
								IsMandatory:                     to.Ptr(true),
								Position:                        to.Ptr[int64](-2147483648),
								ValidationSet:                   []*armautomation.ActivityParameterValidationSet{},
								ValueFromPipeline:               to.Ptr(false),
								ValueFromPipelineByPropertyName: to.Ptr(false),
								ValueFromRemainingArguments:     to.Ptr(false),
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Activity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Activity)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getActivityInAModule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestActivity_ListByModule(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listActivitiesByModule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List activities by a module"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewActivityClient("subid", cred, &options)
	pager := client.ListByModule("rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listActivitiesByModule.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.ActivityListResult{
			Value: []*armautomation.Activity{
				{
					Name: to.Ptr("Add-AzureRmAccount"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile/activities/Add-AzureRmAccount"),
					Properties: &armautomation.ActivityProperties{
						Description:      to.Ptr("The Add-AzureRmAcccount cmdlet adds an authenticated Azure account to use for Azure Resource Manager cmdlet requests.\n\nYou can use this authenticated account only with Azure Resource Manager cmdlets. To add an authenticated account for use with Service Management cmdlets, use the Add-AzureAccount or the Import-AzurePublishSettingsFile cmdlet."),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
						Definition:       to.Ptr(""),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("Add-AzureRmEnvironment"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile/activities/Add-AzureRmEnvironment"),
					Properties: &armautomation.ActivityProperties{
						Description:      to.Ptr("The Add-AzureRmEnvironment cmdlet adds endpoints and metadata to enable Azure Resource Manager cmdlets to connect with a new instance of Azure Resource Manager. The built-in environments AzureCloud and AzureChinaCloud target existing public instances of Azure Resource Manager."),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
						Definition:       to.Ptr(""),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("Disable-AzureRmDataCollection"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile/activities/Disable-AzureRmDataCollection"),
					Properties: &armautomation.ActivityProperties{
						Description:      to.Ptr(""),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.713+00:00"); return t }()),
						Definition:       to.Ptr(""),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.713+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("Enable-AzureRmDataCollection"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile/activities/Enable-AzureRmDataCollection"),
					Properties: &armautomation.ActivityProperties{
						Description:      to.Ptr(""),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.713+00:00"); return t }()),
						Definition:       to.Ptr(""),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.713+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("Get-AzureRmContext"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile/activities/Get-AzureRmContext"),
					Properties: &armautomation.ActivityProperties{
						Description:      to.Ptr("The Get-AzureRmContext cmdlet gets the current metadata used to authenticate Azure Resource Manager requests.\n\nThis cmdlet gets the Active Directory account, Active Directory tenant, Azure subscription, and the targeted Azure environment. Azure Resource Manager cmdlets use these settings by default when making Azure Resource Manager requests."),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.713+00:00"); return t }()),
						Definition:       to.Ptr(""),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.713+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("Get-AzureRmEnvironment"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile/activities/Get-AzureRmEnvironment"),
					Properties: &armautomation.ActivityProperties{
						Description:      to.Ptr("The Get-AzureRmEnvironment cmdlet gets endpoints and metadata for an instance of Azure services."),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
						Definition:       to.Ptr(""),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("Get-AzureRmSubscription"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile/activities/Get-AzureRmSubscription"),
					Properties: &armautomation.ActivityProperties{
						Description:      to.Ptr("The Get-AzureRmSubscription cmdlet gets the subscription ID, subscription name, and home tenant for subscriptions that the current account can access."),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
						Definition:       to.Ptr(""),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("Get-AzureRmTenant"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile/activities/Get-AzureRmTenant"),
					Properties: &armautomation.ActivityProperties{
						Description:      to.Ptr("The Get-AzureRmTenant cmdlet gets tenants authorized for the current user."),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
						Definition:       to.Ptr(""),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("Remove-AzureRmEnvironment"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile/activities/Remove-AzureRmEnvironment"),
					Properties: &armautomation.ActivityProperties{
						Description:      to.Ptr("The Remove-AzureRmEnvironment cmdlet removes endpoints and metadata information for connecting to a given Azure instance."),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
						Definition:       to.Ptr(""),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("Save-AzureRmProfile"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile/activities/Save-AzureRmProfile"),
					Properties: &armautomation.ActivityProperties{
						Description:      to.Ptr("The Save-AzureRmProfile cmdlet saves the current authentication information for use in other PowerShell sessions."),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
						Definition:       to.Ptr(""),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("Select-AzureRmProfile"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile/activities/Select-AzureRmProfile"),
					Properties: &armautomation.ActivityProperties{
						Description:      to.Ptr("The Select-AzureRmProfile cmdlet loads authentication information from a file to set the Azure environment and context. Cmdlets that you run in the current session use this information to authenticate requests to Azure Resource Manager."),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
						Definition:       to.Ptr(""),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("Set-AzureRmContext"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile/activities/Set-AzureRmContext"),
					Properties: &armautomation.ActivityProperties{
						Description:      to.Ptr("The Set-AzureRmContext cmdlet sets authentication information for cmdlets that you run in the current session. The context includes tenant, subscription, and environment information."),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
						Definition:       to.Ptr(""),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("Set-AzureRmEnvironment"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile/activities/Set-AzureRmEnvironment"),
					Properties: &armautomation.ActivityProperties{
						Description:      to.Ptr("The Set-AzureRMEnvironment cmdlet sets endpoints and metadata for connecting to an instance of Azure."),
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
						Definition:       to.Ptr(""),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:21.697+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ActivityListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ActivityListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listActivitiesByModule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestModule_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteModule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a module"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewModuleClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteModule.json: %v", err)
	}
}

func TestModule_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getModule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a module"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewModuleClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getModule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Module{
			Name:     to.Ptr("OmsCompositeResources"),
			Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Modules"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/OmsCompositeResources"),
			Location: to.Ptr("East US 2"),
			Tags:     map[string]*string{},
			Properties: &armautomation.ModuleProperties{
				ActivityCount: to.Ptr[int32](0),
				CreationTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T15:41:47.003+00:00"); return t }()),
				Error: &armautomation.ModuleErrorInfo{
					Message: to.Ptr(""),
				},
				IsComposite:       to.Ptr(true),
				IsGlobal:          to.Ptr(false),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T15:42:10.567+00:00"); return t }()),
				ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
				SizeInBytes:       to.Ptr[int64](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Module) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Module)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getModule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestModule_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateModule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a module"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewModuleClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount33",
		"OmsCompositeResources",
		armautomation.ModuleCreateOrUpdateParameters{
			Properties: &armautomation.ModuleCreateOrUpdateProperties{
				ContentLink: &armautomation.ContentLink{
					ContentHash: &armautomation.ContentHash{
						Algorithm: to.Ptr("sha265"),
						Value:     to.Ptr("07E108A962B81DD9C9BAA89BB47C0F6EE52B29E83758B07795E408D258B2B87A"),
					},
					URI:     to.Ptr("https://teststorage.blob.core.windows.net/dsccomposite/OmsCompositeResources.zip"),
					Version: to.Ptr("1.0.0.0"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateModule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Module{
			Name:     to.Ptr("OmsCompositeResources"),
			Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Modules"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/OmsCompositeResources"),
			Location: to.Ptr("East US 2"),
			Tags:     map[string]*string{},
			Properties: &armautomation.ModuleProperties{
				ActivityCount:     to.Ptr[int32](0),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T15:41:47.003+00:00"); return t }()),
				Error:             &armautomation.ModuleErrorInfo{},
				IsComposite:       to.Ptr(false),
				IsGlobal:          to.Ptr(false),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T15:42:10.567+00:00"); return t }()),
				ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
				SizeInBytes:       to.Ptr[int64](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Module) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Module)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateModule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestModule_Update(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateModule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a module"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewModuleClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"MyAutomationAccount",
		"MyModule",
		armautomation.ModuleUpdateParameters{
			Properties: &armautomation.ModuleUpdateProperties{
				ContentLink: &armautomation.ContentLink{
					ContentHash: &armautomation.ContentHash{
						Algorithm: to.Ptr("sha265"),
						Value:     to.Ptr("07E108A962B81DD9C9BAA89BB47C0F6EE52B29E83758B07795E408D258B2B87A"),
					},
					URI:     to.Ptr("https://teststorage.blob.core.windows.net/mycontainer/MyModule.zip"),
					Version: to.Ptr("1.0.0.0"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateModule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Module{
			Name:     to.Ptr("MyModule"),
			Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Modules"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/MyAutomationAccount/modules/MyModule"),
			Location: to.Ptr("East US 2"),
			Tags:     map[string]*string{},
			Properties: &armautomation.ModuleProperties{
				ActivityCount:     to.Ptr[int32](0),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T15:41:47.003+00:00"); return t }()),
				Error:             &armautomation.ModuleErrorInfo{},
				IsComposite:       to.Ptr(false),
				IsGlobal:          to.Ptr(false),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T15:42:10.567+00:00"); return t }()),
				ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
				SizeInBytes:       to.Ptr[int64](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Module) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Module)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateModule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestModule_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listModulesByAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List modules by automation account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewModuleClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listModulesByAutomationAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.ModuleListResult{
			Value: []*armautomation.Module{
				{
					Name: to.Ptr("Azure"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/Azure"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2014-03-18T23:02:40.323+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T16:57:48.343+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("Azure.Storage"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/Azure.Storage"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-01-30T01:21:44.68+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:04:27.833+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("AzureRM.Automation"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Automation"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-01-30T01:19:39.427+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:02:24.42+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("AzureRM.Compute"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Compute"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-11-24T20:24:06.1+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:01:53.81+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("AzureRM.Profile"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Profile"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-11-24T20:23:34.723+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:01:22.993+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("AzureRM.Resources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Resources"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-01-30T01:20:10.367+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:02:55.25+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("AzureRM.Sql"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Sql"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-01-30T01:20:42.177+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:03:26.08+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("AzureRM.Storage"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/AzureRM.Storage"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-01-30T01:21:13.237+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:03:56.99+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerShell.Core"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/Microsoft.PowerShell.Core"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-17T00:12:20.897+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T16:58:19.017+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerShell.Diagnostics"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/Microsoft.PowerShell.Diagnostics"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-17T00:12:22.817+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T16:58:49.737+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerShell.Management"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/Microsoft.PowerShell.Management"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-17T00:12:24.967+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T16:59:20.38+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerShell.Security"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/Microsoft.PowerShell.Security"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-17T00:12:26.753+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T16:59:51.007+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerShell.Utility"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/Microsoft.PowerShell.Utility"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-17T00:12:28.643+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:00:21.647+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("Microsoft.WSMan.Management"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/Microsoft.WSMan.Management"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-03-17T00:17:15.003+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:00:52.197+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("OmsCompositeResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/OmsCompositeResources"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T15:41:47.003+00:00"); return t }()),
						IsGlobal:          to.Ptr(false),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T15:42:10.567+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("Orchestrator.AssetManagement.Cmdlets"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/modules/Orchestrator.AssetManagement.Cmdlets"),
					Properties: &armautomation.ModuleProperties{
						ActivityCount:     to.Ptr[int32](0),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-09-12T00:45:12.897+00:00"); return t }()),
						IsGlobal:          to.Ptr(true),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-17T17:05:01.57+00:00"); return t }()),
						ProvisioningState: to.Ptr(armautomation.ModuleProvisioningStateSucceeded),
						SizeInBytes:       to.Ptr[int64](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ModuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ModuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listModulesByAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestObjectDataTypes_ListFieldsByModuleAndType(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listFieldsByModuleAndType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of fields of a given type"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewObjectDataTypesClient("subid", cred, &options)
	pager := client.ListFieldsByModuleAndType("rg",
		"MyAutomationAccount",
		"MyModule",
		"MyCustomType",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listFieldsByModuleAndType.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.TypeFieldListResult{
			Value: []*armautomation.TypeField{
				{
					Name: to.Ptr("Name"),
					Type: to.Ptr("System.String"),
				},
				{
					Name: to.Ptr("Id"),
					Type: to.Ptr("System.Integer"),
				},
				{
					Name: to.Ptr("Details"),
					Type: to.Ptr("MyModule.AnotherCustomType"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TypeFieldListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TypeFieldListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listFieldsByModuleAndType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestObjectDataTypes_ListFieldsByType(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listFieldsByType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of fields of a given type across all accessible modules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewObjectDataTypesClient("subid", cred, &options)
	pager := client.ListFieldsByType("rg",
		"MyAutomationAccount",
		"MyCustomType",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listFieldsByType.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.TypeFieldListResult{
			Value: []*armautomation.TypeField{
				{
					Name: to.Ptr("Name"),
					Type: to.Ptr("System.String"),
				},
				{
					Name: to.Ptr("Id"),
					Type: to.Ptr("System.Integer"),
				},
				{
					Name: to.Ptr("Details"),
					Type: to.Ptr("MyModule.AnotherCustomType"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TypeFieldListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TypeFieldListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listFieldsByType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFields_ListByType(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listFieldsByModuleAndType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of fields of a given type"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewFieldsClient("subid", cred, &options)
	pager := client.ListByType("rg",
		"MyAutomationAccount",
		"MyModule",
		"MyCustomType",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listFieldsByModuleAndType.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.TypeFieldListResult{
			Value: []*armautomation.TypeField{
				{
					Name: to.Ptr("Name"),
					Type: to.Ptr("System.String"),
				},
				{
					Name: to.Ptr("Id"),
					Type: to.Ptr("System.Integer"),
				},
				{
					Name: to.Ptr("Details"),
					Type: to.Ptr("MyModule.AnotherCustomType"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TypeFieldListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TypeFieldListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listFieldsByModuleAndType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSchedule_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateSchedule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a schedule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewScheduleClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount33",
		"mySchedule",
		armautomation.ScheduleCreateOrUpdateParameters{
			Name: to.Ptr("mySchedule"),
			Properties: &armautomation.ScheduleCreateOrUpdateProperties{
				Description:      to.Ptr("my description of schedule goes here"),
				AdvancedSchedule: &armautomation.AdvancedSchedule{},
				ExpiryTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:57.2494819Z"); return t }()),
				Frequency:        to.Ptr(armautomation.ScheduleFrequencyHour),
				Interval:         float64(1),
				StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:57.2494819Z"); return t }()),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateSchedule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Schedule{
			Name: to.Ptr("mySchedule"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule"),
			Properties: &armautomation.ScheduleProperties{
				Description:             to.Ptr("my description of schedule goes here"),
				CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T16:59:22.697+00:00"); return t }()),
				ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
				Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
				Interval:                float64(1),
				IsEnabled:               to.Ptr(true),
				LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T16:59:22.697+00:00"); return t }()),
				NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t }()),
				NextRunOffsetMinutes:    to.Ptr[float64](0),
				StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t }()),
				StartTimeOffsetMinutes:  to.Ptr[float64](0),
				TimeZone:                to.Ptr("UTC"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateSchedule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSchedule_Update(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateSchedule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a schedule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewScheduleClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount33",
		"mySchedule",
		armautomation.ScheduleUpdateParameters{
			Name: to.Ptr("mySchedule"),
			Properties: &armautomation.ScheduleUpdateProperties{
				Description: to.Ptr("my updated description of schedule goes here"),
				IsEnabled:   to.Ptr(false),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateSchedule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Schedule{
			Name: to.Ptr("mySchedule"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule"),
			Properties: &armautomation.ScheduleProperties{
				Description:             to.Ptr("my updated description of schedule goes here"),
				CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T16:59:22.697+00:00"); return t }()),
				ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
				Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
				Interval:                float64(1),
				IsEnabled:               to.Ptr(false),
				LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T16:59:22.697+00:00"); return t }()),
				NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t }()),
				NextRunOffsetMinutes:    to.Ptr[float64](0),
				StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t }()),
				StartTimeOffsetMinutes:  to.Ptr[float64](0),
				TimeZone:                to.Ptr("UTC"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateSchedule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSchedule_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getSchedule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a schedule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewScheduleClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"mySchedule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getSchedule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Schedule{
			Name: to.Ptr("mySchedule"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule"),
			Properties: &armautomation.ScheduleProperties{
				Description:             to.Ptr("my description of schedule goes here"),
				CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T16:59:22.697+00:00"); return t }()),
				ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
				Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
				Interval:                float64(1),
				IsEnabled:               to.Ptr(true),
				LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T16:59:22.697+00:00"); return t }()),
				NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t }()),
				NextRunOffsetMinutes:    to.Ptr[float64](0),
				StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t }()),
				StartTimeOffsetMinutes:  to.Ptr[float64](0),
				TimeZone:                to.Ptr("UTC"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Schedule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Schedule)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getSchedule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSchedule_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteSchedule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete schedule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewScheduleClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount33",
		"mySchedule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteSchedule.json: %v", err)
	}
}

func TestSchedule_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listSchedulesByAutomationAccount_First100.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List schedules by automation account, first 100"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewScheduleClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listSchedulesByAutomationAccount_First100.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.ScheduleListResult{
			Value: []*armautomation.Schedule{
				{
					Name: to.Ptr("mySchedule"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my updated description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T16:59:22.697+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(false),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:14.027+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule0"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule0"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:17.18+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:17.18+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule1"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:17.493+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:17.493+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule10"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule10"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:20.54+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:20.54+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule100"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule100"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:50.103+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:50.103+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule101"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule101"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:50.433+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:50.433+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule102"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule102"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:50.713+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:50.713+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule103"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule103"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.04+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.04+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule104"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule104"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.323+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.323+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule105"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule105"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.62+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.62+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule106"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule106"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.9+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.9+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule107"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule107"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:52.183+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:52.183+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule108"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule108"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:52.48+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:52.48+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule109"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule109"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:52.76+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:52.76+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule11"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule11"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:20.883+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:20.883+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule110"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule110"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:53.073+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:53.073+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule111"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule111"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:53.48+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:53.48+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule112"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule112"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:53.807+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:53.807+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule113"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule113"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.073+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.073+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule114"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule114"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.353+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.353+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule115"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule115"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.65+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.65+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule116"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule116"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.933+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.933+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule117"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule117"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:55.277+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:55.277+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule118"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule118"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:55.65+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:55.65+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule119"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule119"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:55.95+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:55.95+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule12"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule12"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:21.213+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:21.213+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule120"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule120"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:56.353+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:56.353+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule121"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule121"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:56.65+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:56.65+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule122"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule122"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:56.95+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:56.95+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule123"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule123"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:57.247+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:57.247+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule124"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule124"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:57.573+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:57.573+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule125"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule125"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:57.9+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:57.9+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule126"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule126"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:58.387+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:58.387+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule127"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule127"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:58.7+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:58.7+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule128"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule128"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:59.4+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:59.4+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule129"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule129"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:59.73+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:59.73+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule13"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule13"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:21.603+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:21.603+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule130"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule130"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:00.09+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:00.09+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule131"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule131"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:00.4+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:00.4+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule132"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule132"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:00.683+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:00.683+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule133"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule133"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.073+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.073+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule134"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule134"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.387+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.387+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule135"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule135"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.667+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.667+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule136"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule136"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.95+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.95+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule137"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule137"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:02.247+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:02.247+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule138"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule138"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:02.557+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:02.557+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule139"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule139"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:02.853+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:02.853+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule14"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule14"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:21.98+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:21.98+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule140"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule140"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:03.247+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:03.247+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule141"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule141"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:03.573+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:03.573+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule142"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule142"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:03.87+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:03.87+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule143"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule143"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:04.2+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:04.2+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule144"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule144"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:04.48+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:04.48+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule145"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule145"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:04.76+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:04.76+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule146"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule146"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.027+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.027+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule147"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule147"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.353+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.353+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule148"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule148"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.65+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.65+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule149"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule149"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.95+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.95+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule15"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule15"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:22.353+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:22.353+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule150"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule150"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:06.247+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:06.247+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule151"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule151"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:06.527+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:06.527+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule152"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule152"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:06.81+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:06.81+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule153"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule153"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:07.157+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:07.157+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule154"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule154"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:07.453+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:07.453+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule155"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule155"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:07.75+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:07.75+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule156"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule156"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:08.093+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:08.093+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule157"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule157"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:08.513+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:08.513+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule158"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule158"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:08.873+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:08.873+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule159"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule159"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:09.203+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:09.203+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule16"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule16"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:22.697+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:22.697+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule160"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule160"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:09.547+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:09.547+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule161"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule161"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:09.843+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:09.843+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule162"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule162"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:10.14+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:10.14+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule163"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule163"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:10.437+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:10.437+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule164"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule164"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:10.72+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:10.72+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule165"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule165"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.013+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.013+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule166"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule166"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.297+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.297+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule167"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule167"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.61+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.61+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule168"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule168"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.89+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.89+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule169"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule169"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:12.203+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:12.203+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule17"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule17"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:23.027+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:23.027+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule170"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule170"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:12.453+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:12.453+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule171"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule171"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:12.733+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:12.733+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule172"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule172"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.03+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.03+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule173"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule173"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.31+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.31+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule174"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule174"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.623+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.623+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule175"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule175"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.937+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.937+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule18"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule18"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:23.337+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:23.337+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule19"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule19"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:23.667+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:23.667+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule2"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule2"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:17.823+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:17.823+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule20"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule20"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.01+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.01+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule21"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule21"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.337+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.337+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule22"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule22"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.667+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.667+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule23"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule23"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.98+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.98+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule24"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule24"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:25.353+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:25.353+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule25"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule25"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:25.68+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:25.68+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule26"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule26"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.01+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.01+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule27"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule27"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.323+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.323+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule28"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule28"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.65+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.65+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule29"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule29"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.947+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.947+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScheduleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScheduleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listSchedulesByAutomationAccount_First100.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listSchedulesByAutomationAccount_Next100.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List schedules by automation account, next 100"},
	})
	client = armautomation.NewScheduleClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listSchedulesByAutomationAccount_Next100.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.ScheduleListResult{
			Value: []*armautomation.Schedule{
				{
					Name: to.Ptr("mySchedule3"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule3"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.12+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.12+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule30"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule30"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:27.277+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:27.277+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule31"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule31"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:27.603+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:27.603+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule32"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule32"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.04+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.04+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule33"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule33"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.353+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.353+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule34"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule34"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.667+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.667+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule35"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule35"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.01+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.01+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule36"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule36"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.353+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.353+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule37"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule37"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.68+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.68+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule38"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule38"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.993+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.993+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule39"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule39"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.307+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.307+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule4"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule4"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.417+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.417+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule40"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule40"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.62+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.62+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule41"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule41"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.93+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.93+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule42"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule42"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.26+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.26+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule43"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule43"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.573+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.573+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule44"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule44"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.947+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.947+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule45"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule45"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.29+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.29+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule46"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule46"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.603+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.603+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule47"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule47"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.93+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.93+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule48"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule48"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:33.51+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:33.51+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule49"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule49"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:33.823+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:33.823+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule5"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule5"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.743+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.743+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule50"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule50"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.15+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.15+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule51"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule51"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.447+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.447+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule52"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule52"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.743+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.743+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule53"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule53"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.057+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.057+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule54"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule54"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.37+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.37+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule55"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule55"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.683+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.683+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule56"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule56"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.98+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.98+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule57"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule57"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.277+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.277+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule58"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule58"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.603+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.603+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule59"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule59"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.947+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.947+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule6"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule6"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.103+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.103+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule60"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule60"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.26+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.26+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule61"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule61"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.557+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.557+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule62"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule62"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.963+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.963+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule63"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule63"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.29+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.29+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule64"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule64"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.603+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.603+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule65"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule65"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.917+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.917+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule66"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule66"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.307+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.307+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule67"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule67"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.59+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.59+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule68"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule68"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.947+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.947+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule69"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule69"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:40.307+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:40.307+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule7"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule7"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.51+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.51+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule70"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule70"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:40.667+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:40.667+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule71"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule71"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.01+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.01+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule72"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule72"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.323+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.323+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule73"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule73"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.637+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.637+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule74"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule74"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.933+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.933+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule75"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule75"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.26+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.26+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule76"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule76"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.573+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.573+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule77"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule77"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.9+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.9+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule78"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule78"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.213+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.213+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule79"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule79"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.573+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.573+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule8"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule8"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.837+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.837+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule80"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule80"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.87+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.87+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule81"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule81"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.197+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.197+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule82"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule82"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.493+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.493+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule83"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule83"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.807+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.807+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule84"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule84"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.183+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.183+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule85"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule85"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.493+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.493+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule86"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule86"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.79+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.79+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule87"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule87"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.09+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.09+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule88"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule88"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.37+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.37+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule89"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule89"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.887+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.887+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule9"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule9"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:20.15+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:20.15+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule90"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule90"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.183+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.183+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule91"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule91"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.493+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.493+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule92"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule92"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.76+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.76+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule93"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule93"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.073+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.073+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule94"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule94"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.353+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.353+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule95"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule95"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.683+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.683+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule96"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule96"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.963+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.963+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule97"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule97"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.243+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.243+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule98"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule98"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.51+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.51+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				},
				{
					Name: to.Ptr("mySchedule99"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule99"),
					Properties: &armautomation.ScheduleProperties{
						Description:             to.Ptr("my description of schedule goes here"),
						CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.79+00:00"); return t }()),
						ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t }()),
						ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
						Frequency:               to.Ptr(armautomation.ScheduleFrequencyHour),
						Interval:                float64(1),
						IsEnabled:               to.Ptr(true),
						LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.79+00:00"); return t }()),
						NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						NextRunOffsetMinutes:    to.Ptr[float64](0),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t }()),
						StartTimeOffsetMinutes:  to.Ptr[float64](0),
						TimeZone:                to.Ptr("UTC"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScheduleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScheduleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listSchedulesByAutomationAccount_Next100.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVariable_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateVariable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a variable"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewVariableClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"sampleAccount9",
		"sampleVariable",
		armautomation.VariableCreateOrUpdateParameters{
			Name: to.Ptr("sampleVariable"),
			Properties: &armautomation.VariableCreateOrUpdateProperties{
				Description: to.Ptr("my description"),
				IsEncrypted: to.Ptr(false),
				Value:       to.Ptr("\"ComputerName.domain.com\""),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateVariable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Variable{
			Name: to.Ptr("sampleVariable"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable"),
			Properties: &armautomation.VariableProperties{
				Description:      to.Ptr("my description"),
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
				IsEncrypted:      to.Ptr(false),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
				Value:            to.Ptr("\"ComputerName2.domain.com\""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Variable) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Variable)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateVariable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVariable_Update(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateVariable_patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a variable"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewVariableClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"sampleAccount9",
		"sampleVariable",
		armautomation.VariableUpdateParameters{
			Name: to.Ptr("sampleVariable"),
			Properties: &armautomation.VariableUpdateProperties{
				Value: to.Ptr("\"ComputerName3.domain.com\""),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateVariable_patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Variable{
			Name: to.Ptr("sampleVariable"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable"),
			Properties: &armautomation.VariableProperties{
				Description:      to.Ptr("my description"),
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:00:53.363+00:00"); return t }()),
				IsEncrypted:      to.Ptr(false),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:00:57.987+00:00"); return t }()),
				Value:            to.Ptr("\"ComputerName3.domain.com\""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Variable) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Variable)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateVariable_patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVariable_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteVariable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a variable"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewVariableClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"sampleAccount9",
		"sampleVariable",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteVariable.json: %v", err)
	}
}

func TestVariable_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getVariable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a variable"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewVariableClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"sampleAccount9",
		"sampleVariable",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getVariable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Variable{
			Name: to.Ptr("sampleVariable"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable"),
			Properties: &armautomation.VariableProperties{
				Description:      to.Ptr("my description"),
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
				IsEncrypted:      to.Ptr(false),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T22:59:00.937+00:00"); return t }()),
				Value:            to.Ptr("\"ComputerName.domain.com\""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Variable) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Variable)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getVariable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVariable_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listVariables_First100.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List variables, First 100"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewVariableClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"sampleAccount9",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listVariables_First100.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.VariableListResult{
			Value: []*armautomation.Variable{
				{
					Name: to.Ptr("sampleVariable"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:00:53.363+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:00:57.987+00:00"); return t }()),
						Value:            to.Ptr("\"ComputerName3.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable0"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable0"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:00:58.847+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:00:58.847+00:00"); return t }()),
						Value:            to.Ptr("\"server0.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable1"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable1"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:00:59.69+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:00:59.69+00:00"); return t }()),
						Value:            to.Ptr("\"server1.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable10"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable10"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:08.393+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:08.393+00:00"); return t }()),
						Value:            to.Ptr("\"server10.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable100"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable100"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:27.38+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:27.38+00:00"); return t }()),
						Value:            to.Ptr("\"server100.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable101"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable101"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:28.223+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:28.223+00:00"); return t }()),
						Value:            to.Ptr("\"server101.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable102"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable102"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:28.99+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:28.99+00:00"); return t }()),
						Value:            to.Ptr("\"server102.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable103"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable103"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:29.77+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:29.77+00:00"); return t }()),
						Value:            to.Ptr("\"server103.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable104"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable104"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:30.647+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:30.647+00:00"); return t }()),
						Value:            to.Ptr("\"server104.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable105"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable105"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:31.49+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:31.49+00:00"); return t }()),
						Value:            to.Ptr("\"server105.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable106"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable106"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:32.303+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:32.303+00:00"); return t }()),
						Value:            to.Ptr("\"server106.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable107"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable107"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:34.583+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:34.583+00:00"); return t }()),
						Value:            to.Ptr("\"server107.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable108"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable108"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:35.367+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:35.367+00:00"); return t }()),
						Value:            to.Ptr("\"server108.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable109"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable109"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:36.147+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:36.147+00:00"); return t }()),
						Value:            to.Ptr("\"server109.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable11"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable11"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:09.27+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:09.27+00:00"); return t }()),
						Value:            to.Ptr("\"server11.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable12"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable12"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:10.16+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:10.16+00:00"); return t }()),
						Value:            to.Ptr("\"server12.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable13"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable13"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:11.003+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:11.003+00:00"); return t }()),
						Value:            to.Ptr("\"server13.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable14"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable14"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:11.863+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:11.863+00:00"); return t }()),
						Value:            to.Ptr("\"server14.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable15"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable15"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:12.74+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:12.74+00:00"); return t }()),
						Value:            to.Ptr("\"server15.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable16"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable16"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:13.597+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:13.597+00:00"); return t }()),
						Value:            to.Ptr("\"server16.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable17"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable17"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:16.287+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:16.287+00:00"); return t }()),
						Value:            to.Ptr("\"server17.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable18"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable18"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:17.16+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:17.16+00:00"); return t }()),
						Value:            to.Ptr("\"server18.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable19"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable19"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:18.02+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:18.02+00:00"); return t }()),
						Value:            to.Ptr("\"server19.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable2"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable2"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:00.567+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:00.567+00:00"); return t }()),
						Value:            to.Ptr("\"server2.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable20"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable20"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:18.847+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:18.847+00:00"); return t }()),
						Value:            to.Ptr("\"server20.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable21"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable21"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:19.723+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:19.723+00:00"); return t }()),
						Value:            to.Ptr("\"server21.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable22"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable22"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:21.597+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:21.597+00:00"); return t }()),
						Value:            to.Ptr("\"server22.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable23"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable23"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:22.393+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:22.393+00:00"); return t }()),
						Value:            to.Ptr("\"server23.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable24"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable24"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:23.207+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:23.207+00:00"); return t }()),
						Value:            to.Ptr("\"server24.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable25"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable25"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:23.973+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:23.973+00:00"); return t }()),
						Value:            to.Ptr("\"server25.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable26"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable26"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:24.8+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:24.8+00:00"); return t }()),
						Value:            to.Ptr("\"server26.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable27"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable27"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:25.597+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:25.597+00:00"); return t }()),
						Value:            to.Ptr("\"server27.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable28"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable28"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:26.55+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:26.55+00:00"); return t }()),
						Value:            to.Ptr("\"server28.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable29"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable29"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:27.457+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:27.457+00:00"); return t }()),
						Value:            to.Ptr("\"server29.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable3"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable3"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:01.427+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:01.427+00:00"); return t }()),
						Value:            to.Ptr("\"server3.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable30"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable30"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:28.253+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:28.253+00:00"); return t }()),
						Value:            to.Ptr("\"server30.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable31"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable31"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:29.05+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:29.05+00:00"); return t }()),
						Value:            to.Ptr("\"server31.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable32"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable32"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:29.817+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:29.817+00:00"); return t }()),
						Value:            to.Ptr("\"server32.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable33"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable33"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:30.643+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:30.643+00:00"); return t }()),
						Value:            to.Ptr("\"server33.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable34"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable34"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:31.473+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:31.473+00:00"); return t }()),
						Value:            to.Ptr("\"server34.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable35"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable35"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:32.253+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:32.253+00:00"); return t }()),
						Value:            to.Ptr("\"server35.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable36"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable36"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:33.27+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:33.27+00:00"); return t }()),
						Value:            to.Ptr("\"server36.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable37"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable37"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:34.037+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:34.037+00:00"); return t }()),
						Value:            to.Ptr("\"server37.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable38"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable38"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:34.817+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:34.817+00:00"); return t }()),
						Value:            to.Ptr("\"server38.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable39"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable39"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:35.613+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:35.613+00:00"); return t }()),
						Value:            to.Ptr("\"server39.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable4"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable4"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:02.38+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:02.38+00:00"); return t }()),
						Value:            to.Ptr("\"server4.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable40"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable40"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:36.397+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:36.397+00:00"); return t }()),
						Value:            to.Ptr("\"server40.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable41"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable41"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:37.19+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:37.19+00:00"); return t }()),
						Value:            to.Ptr("\"server41.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable42"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable42"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:38.037+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:38.037+00:00"); return t }()),
						Value:            to.Ptr("\"server42.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable43"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable43"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:38.88+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:38.88+00:00"); return t }()),
						Value:            to.Ptr("\"server43.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable44"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable44"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:39.707+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:39.707+00:00"); return t }()),
						Value:            to.Ptr("\"server44.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable45"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable45"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:41.457+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:41.457+00:00"); return t }()),
						Value:            to.Ptr("\"server45.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable46"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable46"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:42.253+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:42.253+00:00"); return t }()),
						Value:            to.Ptr("\"server46.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable47"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable47"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:43.083+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:43.083+00:00"); return t }()),
						Value:            to.Ptr("\"server47.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable48"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable48"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:43.957+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:43.957+00:00"); return t }()),
						Value:            to.Ptr("\"server48.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable49"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable49"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:44.74+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:44.74+00:00"); return t }()),
						Value:            to.Ptr("\"server49.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable5"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable5"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:03.253+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:03.253+00:00"); return t }()),
						Value:            to.Ptr("\"server5.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable50"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable50"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:46.35+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:46.35+00:00"); return t }()),
						Value:            to.Ptr("\"server50.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable51"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable51"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:47.1+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:47.1+00:00"); return t }()),
						Value:            to.Ptr("\"server51.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable52"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable52"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:47.88+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:47.88+00:00"); return t }()),
						Value:            to.Ptr("\"server52.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable53"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable53"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:48.677+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:48.677+00:00"); return t }()),
						Value:            to.Ptr("\"server53.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable54"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable54"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:49.473+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:49.473+00:00"); return t }()),
						Value:            to.Ptr("\"server54.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable55"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable55"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:51.16+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:51.16+00:00"); return t }()),
						Value:            to.Ptr("\"server55.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable56"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable56"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:51.927+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:51.927+00:00"); return t }()),
						Value:            to.Ptr("\"server56.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable57"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable57"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:52.757+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:52.757+00:00"); return t }()),
						Value:            to.Ptr("\"server57.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable58"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable58"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:53.55+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:53.55+00:00"); return t }()),
						Value:            to.Ptr("\"server58.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable59"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable59"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:54.317+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:54.317+00:00"); return t }()),
						Value:            to.Ptr("\"server59.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable6"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable6"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:04.143+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:04.143+00:00"); return t }()),
						Value:            to.Ptr("\"server6.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable60"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable60"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:55.177+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:55.177+00:00"); return t }()),
						Value:            to.Ptr("\"server60.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable61"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable61"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:56.583+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:56.583+00:00"); return t }()),
						Value:            to.Ptr("\"server61.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable62"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable62"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:57.27+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:57.27+00:00"); return t }()),
						Value:            to.Ptr("\"server62.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable63"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable63"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:57.943+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:57.943+00:00"); return t }()),
						Value:            to.Ptr("\"server63.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable64"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable64"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:58.66+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:58.66+00:00"); return t }()),
						Value:            to.Ptr("\"server64.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable65"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable65"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:59.35+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:59.35+00:00"); return t }()),
						Value:            to.Ptr("\"server65.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable66"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable66"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:00.02+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:00.02+00:00"); return t }()),
						Value:            to.Ptr("\"server66.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable67"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable67"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:01.507+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:01.507+00:00"); return t }()),
						Value:            to.Ptr("\"server67.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable68"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable68"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:02.177+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:02.177+00:00"); return t }()),
						Value:            to.Ptr("\"server68.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable69"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable69"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:02.863+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:02.863+00:00"); return t }()),
						Value:            to.Ptr("\"server69.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable7"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable7"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:05.393+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:05.393+00:00"); return t }()),
						Value:            to.Ptr("\"server7.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable70"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable70"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:03.6+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:03.6+00:00"); return t }()),
						Value:            to.Ptr("\"server70.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable71"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable71"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:04.333+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:04.333+00:00"); return t }()),
						Value:            to.Ptr("\"server71.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable72"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable72"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:05.1+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:05.1+00:00"); return t }()),
						Value:            to.Ptr("\"server72.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable73"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable73"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:05.833+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:05.833+00:00"); return t }()),
						Value:            to.Ptr("\"server73.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable74"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable74"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:06.647+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:06.647+00:00"); return t }()),
						Value:            to.Ptr("\"server74.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable75"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable75"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:07.363+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:07.363+00:00"); return t }()),
						Value:            to.Ptr("\"server75.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable76"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable76"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:08.1+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:08.1+00:00"); return t }()),
						Value:            to.Ptr("\"server76.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable77"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable77"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:08.82+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:08.82+00:00"); return t }()),
						Value:            to.Ptr("\"server77.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable78"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable78"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:09.553+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:09.553+00:00"); return t }()),
						Value:            to.Ptr("\"server78.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable79"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable79"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:10.63+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:10.63+00:00"); return t }()),
						Value:            to.Ptr("\"server79.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable8"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable8"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:06.52+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:06.52+00:00"); return t }()),
						Value:            to.Ptr("\"server8.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable80"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable80"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:11.32+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:11.32+00:00"); return t }()),
						Value:            to.Ptr("\"server80.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable81"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable81"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:12.02+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:12.02+00:00"); return t }()),
						Value:            to.Ptr("\"server81.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable82"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable82"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:12.723+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:12.723+00:00"); return t }()),
						Value:            to.Ptr("\"server82.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable83"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable83"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:13.443+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:13.443+00:00"); return t }()),
						Value:            to.Ptr("\"server83.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable84"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable84"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:14.16+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:14.16+00:00"); return t }()),
						Value:            to.Ptr("\"server84.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable85"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable85"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:15.177+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:15.177+00:00"); return t }()),
						Value:            to.Ptr("\"server85.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable86"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable86"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:16.053+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:16.053+00:00"); return t }()),
						Value:            to.Ptr("\"server86.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable87"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable87"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:16.82+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:16.82+00:00"); return t }()),
						Value:            to.Ptr("\"server87.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable88"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable88"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:17.583+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:17.583+00:00"); return t }()),
						Value:            to.Ptr("\"server88.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable89"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable89"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:18.333+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:18.333+00:00"); return t }()),
						Value:            to.Ptr("\"server89.domain.com\""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VariableListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VariableListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listVariables_First100.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listVariables_Next100.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List variables, Next 100"},
	})
	client = armautomation.NewVariableClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"sampleAccount9",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listVariables_Next100.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.VariableListResult{
			Value: []*armautomation.Variable{
				{
					Name: to.Ptr("sampleVariable9"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable9"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:07.38+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:01:07.38+00:00"); return t }()),
						Value:            to.Ptr("\"server9.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable90"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable90"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:19.147+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:19.147+00:00"); return t }()),
						Value:            to.Ptr("\"server90.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable91"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable91"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:20.257+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:20.257+00:00"); return t }()),
						Value:            to.Ptr("\"server91.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable92"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable92"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:21.037+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:21.037+00:00"); return t }()),
						Value:            to.Ptr("\"server92.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable93"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable93"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:21.803+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:21.803+00:00"); return t }()),
						Value:            to.Ptr("\"server93.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable94"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable94"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:22.583+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:22.583+00:00"); return t }()),
						Value:            to.Ptr("\"server94.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable95"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable95"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:23.333+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:23.333+00:00"); return t }()),
						Value:            to.Ptr("\"server95.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable96"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable96"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:24.163+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:24.163+00:00"); return t }()),
						Value:            to.Ptr("\"server96.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable97"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable97"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:24.973+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:24.973+00:00"); return t }()),
						Value:            to.Ptr("\"server97.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable98"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable98"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:25.757+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:25.757+00:00"); return t }()),
						Value:            to.Ptr("\"server98.domain.com\""),
					},
				},
				{
					Name: to.Ptr("sampleVariable99"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/sampleAccount9/variables/sampleVariable99"),
					Properties: &armautomation.VariableProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:26.553+00:00"); return t }()),
						IsEncrypted:      to.Ptr(false),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:02:26.553+00:00"); return t }()),
						Value:            to.Ptr("\"server99.domain.com\""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VariableListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VariableListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listVariables_Next100.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWatcher_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateWatcher.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update watcher"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewWatcherClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"MyTestAutomationAccount",
		"MyTestWatcher",
		armautomation.Watcher{
			Properties: &armautomation.WatcherProperties{
				Description:                 to.Ptr("This is a test watcher."),
				ExecutionFrequencyInSeconds: to.Ptr[int64](60),
				ScriptName:                  to.Ptr("MyTestWatcherRunbook"),
				ScriptRunOn:                 to.Ptr("MyTestHybridWorkerGroup"),
			},
			Tags: map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateWatcher.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Watcher{
			Name: to.Ptr("MyTestWatcher"),
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/MyTestAutomationAccount/watchers/MyTestWatcher"),
			Properties: &armautomation.WatcherProperties{
				Description:                 to.Ptr("This is a test watcher."),
				CreationTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-14T21:14:09.607+00:00"); return t }()),
				ExecutionFrequencyInSeconds: to.Ptr[int64](60),
				LastModifiedTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-14T21:14:09.607+00:00"); return t }()),
				ScriptName:                  to.Ptr("MyTestWatcherRunbook"),
				ScriptRunOn:                 to.Ptr("MyTestHybridWorkerGroup"),
				Status:                      to.Ptr("New"),
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Watcher) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Watcher)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateWatcher.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWatcher_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getWatcher.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get watcher"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewWatcherClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"MyTestAutomationAccount",
		"MyTestWatcher",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getWatcher.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Watcher{
			Name: to.Ptr("MyTestWatcher"),
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/MyTestAutomationAccount/watchers/MyTestWatcher"),
			Properties: &armautomation.WatcherProperties{
				Description:                 to.Ptr(""),
				CreationTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-30T18:50:17.163+00:00"); return t }()),
				ExecutionFrequencyInSeconds: to.Ptr[int64](60),
				LastModifiedTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-30T18:50:17.163+00:00"); return t }()),
				ScriptName:                  to.Ptr("MyTestWatcherRunbook"),
				ScriptParameters:            map[string]*string{},
				ScriptRunOn:                 to.Ptr("MyTestHybridWorkerGroup"),
				Status:                      to.Ptr("Running"),
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Watcher) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Watcher)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getWatcher.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWatcher_Update(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateWatcher.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update watcher"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewWatcherClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"MyTestAutomationAccount",
		"MyTestWatcher",
		armautomation.WatcherUpdateParameters{
			Name: to.Ptr("MyTestWatcher"),
			Properties: &armautomation.WatcherUpdateProperties{
				ExecutionFrequencyInSeconds: to.Ptr[int64](600),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateWatcher.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Watcher{
			Name: to.Ptr("MyTestWatcher"),
			ID:   to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/MyTestAutomationAccount/watchers/MyTestWatcher"),
			Properties: &armautomation.WatcherProperties{
				Description:                 to.Ptr("This is a test watcher."),
				CreationTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-14T21:33:02.197+00:00"); return t }()),
				ExecutionFrequencyInSeconds: to.Ptr[int64](600),
				LastModifiedTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-14T22:29:57.65+00:00"); return t }()),
				ScriptName:                  to.Ptr("MyTestWatcherRunbook"),
				ScriptParameters:            map[string]*string{},
				ScriptRunOn:                 to.Ptr("MyTestHybridWorkerGroup"),
				Status:                      to.Ptr("New"),
			},
			Tags: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.Watcher) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Watcher)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateWatcher.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWatcher_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteWatcher.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete watcher"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewWatcherClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"MyTestAutomationAccount",
		"MyTestWatcher",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteWatcher.json: %v", err)
	}
}

func TestWatcher_Start(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/startWatcher.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start Watcher"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewWatcherClient("subid", cred, &options)
	_, err := client.Start(ctx,
		"rg",
		"MyTestAutomationAccount",
		"MyTestWatcher",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/startWatcher.json: %v", err)
	}
}

func TestWatcher_Stop(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/stopWatcher.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start Watcher"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewWatcherClient("subid", cred, &options)
	_, err := client.Stop(ctx,
		"rg",
		"MyTestAutomationAccount",
		"MyTestWatcher",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/stopWatcher.json: %v", err)
	}
}

func TestWatcher_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listWatchersByAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List watchers by Automation Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewWatcherClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"MyTestAutomationAccount",
		&armautomation.WatcherClientListByAutomationAccountOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listWatchersByAutomationAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.WatcherListResult{
			Value: []*armautomation.Watcher{
				{
					Name: to.Ptr("MyTestWatcher"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/MyTestAutomationAccount/watchers/MyTestWatcher"),
					Properties: &armautomation.WatcherProperties{
						Description:                 to.Ptr("This is a test watcher."),
						CreationTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-20T21:36:48.597+00:00"); return t }()),
						ExecutionFrequencyInSeconds: to.Ptr[int64](60),
						LastModifiedTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-20T21:36:48.597+00:00"); return t }()),
						ScriptName:                  to.Ptr("MyTestWatcher"),
						ScriptRunOn:                 to.Ptr("MyTestHybridWorkerGroup"),
					},
				},
				{
					Name: to.Ptr("MyTestWatcher01"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/MyTestAutomationAccount/watchers/MyTestWatcher01"),
					Properties: &armautomation.WatcherProperties{
						Description:                 to.Ptr("This is a test watcher."),
						CreationTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-20T20:47:24.697+00:00"); return t }()),
						ExecutionFrequencyInSeconds: to.Ptr[int64](60),
						LastModifiedTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-20T20:47:24.697+00:00"); return t }()),
						ScriptName:                  to.Ptr("MyTestWatcher"),
						ScriptRunOn:                 to.Ptr("MyTestHybridWorkerGroup"),
					},
				},
				{
					Name: to.Ptr("MyTestWatcher02"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/MyTestAutomationAccount/watchers/MyTestWatcher02"),
					Properties: &armautomation.WatcherProperties{
						Description:                 to.Ptr("This is a test watcher."),
						CreationTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-20T21:26:35.647+00:00"); return t }()),
						ExecutionFrequencyInSeconds: to.Ptr[int64](60),
						LastModifiedTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-20T21:26:35.647+00:00"); return t }()),
						ScriptName:                  to.Ptr("MyTestWatcher"),
						ScriptRunOn:                 to.Ptr("MyTestHybridWorkerGroup"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WatcherListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WatcherListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listWatchersByAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscConfiguration_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/deleteDscConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete DSC Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscConfigurationClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount33",
		"TemplateBasic",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/deleteDscConfiguration.json: %v", err)
	}
}

func TestDscConfiguration_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getDscConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a DSC Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscConfigurationClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"TemplateBasic",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getDscConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.DscConfiguration{
			Name:     to.Ptr("TemplateBasic"),
			Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Configurations"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/configurations/TemplateBasic"),
			Location: to.Ptr("East US 2"),
			Tags:     map[string]*string{},
			Etag:     to.Ptr("\"636263396635600000\""),
			Properties: &armautomation.DscConfigurationProperties{
				Description:       to.Ptr("sample configuration"),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:23.56+00:00"); return t }()),
				JobCount:          to.Ptr[int32](0),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T23:14:23.56+00:00"); return t }()),
				LogVerbose:        to.Ptr(false),
				Parameters:        map[string]*armautomation.DscConfigurationParameter{},
				ProvisioningState: to.Ptr("Succeeded"),
				State:             to.Ptr(armautomation.DscConfigurationStatePublished),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DscConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DscConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getDscConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscConfiguration_GetContent(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getDscConfigurationContent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DSC Configuration content"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscConfigurationClient("subid", cred, &options)
	res, err := client.GetContent(ctx,
		"rg",
		"myAutomationAccount33",
		"ConfigName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getDscConfigurationContent.json: %v", err)
	}
	// Response check
	{
		exampleRes := "Configuration ConfigName {\r\n    Node localhost {\r\n                               WindowsFeature IIS {\r\n                               Name = \"Web-Server\";\r\n            Ensure = \"Present\"\r\n        }\r\n    }\r\n}"
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getDscConfigurationContent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDscConfiguration_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getAllDscConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DSC Configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewDscConfigurationClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscConfigurationClientListByAutomationAccountOptions{Filter: nil,
			Skip:        nil,
			Top:         nil,
			Inlinecount: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getAllDscConfigurations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscConfigurationListResult{
			Value: []*armautomation.DscConfiguration{
				{
					Name:     to.Ptr("SetupServer"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Configurations"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/configurations/SetupServer"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.DscConfigurationProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T18:53:24.997+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T18:53:24.997+00:00"); return t }()),
						State:            to.Ptr(armautomation.DscConfigurationStatePublished),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getAllDscConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getPagedlDscConfigurationsWithNameFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Paged DSC Configurations with name filter"},
	})
	client = armautomation.NewDscConfigurationClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscConfigurationClientListByAutomationAccountOptions{Filter: to.Ptr("contains(name,'server')"),
			Skip:        to.Ptr[int32](0),
			Top:         to.Ptr[int32](2),
			Inlinecount: to.Ptr("allpages"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getPagedlDscConfigurationsWithNameFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscConfigurationListResult{
			TotalCount: to.Ptr[int32](4),
			Value: []*armautomation.DscConfiguration{
				{
					Name:     to.Ptr("SqlServerBig"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Configurations"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/configurations/SqlServerBig"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.DscConfigurationProperties{
						CreationTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T18:53:24.997+00:00"); return t }()),
						LastModifiedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T18:53:24.997+00:00"); return t }()),
						NodeConfigurationCount: to.Ptr[int32](1),
						State:                  to.Ptr(armautomation.DscConfigurationStatePublished),
					},
				},
				{
					Name:     to.Ptr("SqlServerLittle"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Configurations"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/configurations/SqlServerLittle"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.DscConfigurationProperties{
						CreationTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T18:53:24.997+00:00"); return t }()),
						LastModifiedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T18:53:24.997+00:00"); return t }()),
						NodeConfigurationCount: to.Ptr[int32](1),
						State:                  to.Ptr(armautomation.DscConfigurationStatePublished),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getPagedlDscConfigurationsWithNameFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getPagedDscConfigurationsWithNoFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Paged DSC Configurations with no filter"},
	})
	client = armautomation.NewDscConfigurationClient("subid", cred, &options)
	pager = client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.DscConfigurationClientListByAutomationAccountOptions{Filter: nil,
			Skip:        to.Ptr[int32](0),
			Top:         to.Ptr[int32](3),
			Inlinecount: to.Ptr("allpages"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getPagedDscConfigurationsWithNoFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.DscConfigurationListResult{
			TotalCount: to.Ptr[int32](12),
			Value: []*armautomation.DscConfiguration{
				{
					Name:     to.Ptr("SqlServerBig"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Configurations"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/configurations/SqlServerBig"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.DscConfigurationProperties{
						CreationTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T18:53:24.997+00:00"); return t }()),
						LastModifiedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T18:53:24.997+00:00"); return t }()),
						NodeConfigurationCount: to.Ptr[int32](1),
						State:                  to.Ptr(armautomation.DscConfigurationStatePublished),
					},
				},
				{
					Name:     to.Ptr("SqlServerLittle"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Configurations"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/configurations/SqlServerLittle"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.DscConfigurationProperties{
						CreationTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T18:53:24.997+00:00"); return t }()),
						LastModifiedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T18:53:24.997+00:00"); return t }()),
						NodeConfigurationCount: to.Ptr[int32](1),
						State:                  to.Ptr(armautomation.DscConfigurationStatePublished),
					},
				},
				{
					Name:     to.Ptr("SetupServer"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Configurations"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/configurations/SetupServer"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.DscConfigurationProperties{
						CreationTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T18:53:24.997+00:00"); return t }()),
						LastModifiedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T18:53:24.997+00:00"); return t }()),
						NodeConfigurationCount: to.Ptr[int32](1),
						State:                  to.Ptr(armautomation.DscConfigurationStatePublished),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DscConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DscConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/getPagedDscConfigurationsWithNoFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJob_GetOutput(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/getJobOutput.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Job Output"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewJobClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.GetOutput(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		&armautomation.JobClientGetOutputOptions{ClientRequestID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/getJobOutput.json: %v", err)
	}
	// Response check
	{
		exampleRes := "Wednesday, February 7, 2018 3:47:17 PM"
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/getJobOutput.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJob_GetRunbookContent(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/getJobRunbookContent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Job Runbook Content"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewJobClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.GetRunbookContent(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		&armautomation.JobClientGetRunbookContentOptions{ClientRequestID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/getJobRunbookContent.json: %v", err)
	}
	// Response check
	{
		exampleRes := "get-date"
		if !reflect.DeepEqual(exampleRes, *res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(*res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/getJobRunbookContent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJob_Suspend(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/suspendJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Suspend job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewJobClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	_, err := client.Suspend(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		&armautomation.JobClientSuspendOptions{ClientRequestID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/suspendJob.json: %v", err)
	}
}

func TestJob_Stop(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/stopJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewJobClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	_, err := client.Stop(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		&armautomation.JobClientStopOptions{ClientRequestID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/stopJob.json: %v", err)
	}
}

func TestJob_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/getJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewJobClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.Get(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		&armautomation.JobClientGetOptions{ClientRequestID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/getJob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Job{
			Name: to.Ptr("foo"),
			Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Jobs"),
			ID:   to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/jobs/jobName"),
			Properties: &armautomation.JobProperties{
				CreationTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T05:53:30.243+00:00"); return t }()),
				JobID:                  to.Ptr("5b8a3960-e8ab-45f6-bec6-567df8467d1a"),
				LastModifiedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T05:53:30.243+00:00"); return t }()),
				LastStatusModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-01T05:53:30.243+00:00"); return t }()),
				Parameters: map[string]*string{
					"tag01": to.Ptr("value01"),
					"tag02": to.Ptr("value02"),
				},
				ProvisioningState: to.Ptr(armautomation.JobProvisioningStateSucceeded),
				RunOn:             to.Ptr(""),
				Runbook: &armautomation.RunbookAssociationProperty{
					Name: to.Ptr("TestRunbook"),
				},
				Status:        to.Ptr(armautomation.JobStatusNew),
				StatusDetails: to.Ptr("None"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Job) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Job)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/getJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJob_Create(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/createJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewJobClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	_, err := client.Create(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		armautomation.JobCreateParameters{
			Properties: &armautomation.JobCreateProperties{
				Parameters: map[string]*string{
					"key01": to.Ptr("value01"),
					"key02": to.Ptr("value02"),
				},
				RunOn: to.Ptr(""),
				Runbook: &armautomation.RunbookAssociationProperty{
					Name: to.Ptr("TestRunbook"),
				},
			},
		},
		&armautomation.JobClientCreateOptions{ClientRequestID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/createJob.json: %v", err)
	}
}

func TestJob_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/listJobsByAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List jobs by automation account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewJobClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	pager := client.ListByAutomationAccount("mygroup",
		"ContoseAutomationAccount",
		&armautomation.JobClientListByAutomationAccountOptions{Filter: nil,
			ClientRequestID: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/listJobsByAutomationAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.JobListResultV2{
			Value: []*armautomation.JobCollectionItem{
				{
					Name: to.Ptr("job1"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Jobs"),
					ID:   to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/jobs/job1"),
					Properties: &armautomation.JobCollectionItemProperties{
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-30T05:53:30.243+00:00"); return t }()),
						JobID:             to.Ptr("45203a94-a8cb-47c3-8ce4-4dcc3a5f7d23"),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-30T05:53:30.243+00:00"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						Runbook: &armautomation.RunbookAssociationProperty{
							Name: to.Ptr("TestRunbook"),
						},
						Status: to.Ptr(armautomation.JobStatusNew),
					},
				},
				{
					Name: to.Ptr("job2"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Jobs"),
					ID:   to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/jobs/job2"),
					Properties: &armautomation.JobCollectionItemProperties{
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-30T05:46:49.37+00:00"); return t }()),
						EndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-30T05:48:38.857+00:00"); return t }()),
						JobID:             to.Ptr("7584055f-5118-460a-a2dd-5176c9c8efe9"),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-30T05:48:38.857+00:00"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						Runbook: &armautomation.RunbookAssociationProperty{
							Name: to.Ptr("TestRunbook"),
						},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-30T05:47:35.2+00:00"); return t }()),
						Status:    to.Ptr(armautomation.JobStatusCompleted),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobListResultV2) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobListResultV2)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/listJobsByAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJob_Resume(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/resumeJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resume job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewJobClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	_, err := client.Resume(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		&armautomation.JobClientResumeOptions{ClientRequestID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/resumeJob.json: %v", err)
	}
}

func TestJobStream_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/getJobStream.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get job stream"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewJobStreamClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.Get(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"foo",
		"851b2101-686f-40e2-8a4b-5b8df08afbd1_00636535684910693884_00000000000000000001",
		&armautomation.JobStreamClientGetOptions{ClientRequestID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/getJobStream.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.JobStream{
			ID: to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourcegroups/mygroup/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/jobs/jobName/streams/851b2101-686f-40e2-8a4b-5b8df08afbd1_00636535684910693884_00000000000000000001"),
			Properties: &armautomation.JobStreamProperties{
				JobStreamID: to.Ptr("851b2101-686f-40e2-8a4b-5b8df08afbd1:00636535684910693884:00000000000000000001"),
				StreamText:  to.Ptr(""),
				StreamType:  to.Ptr(armautomation.JobStreamTypeOutput),
				Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-07T02:48:11.0693884+00:00"); return t }()),
				Value:       map[string]interface{}{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobStream) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobStream)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/getJobStream.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobStream_ListByJob(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/listJobStreamsByJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List job streams by job name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewJobStreamClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	pager := client.ListByJob("mygroup",
		"ContoseAutomationAccount",
		"foo",
		&armautomation.JobStreamClientListByJobOptions{Filter: nil,
			ClientRequestID: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/listJobStreamsByJob.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.JobStreamListResult{
			Value: []*armautomation.JobStream{
				{
					ID: to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourcegroups/mygroup/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/jobs/jobName/streams/24456a8a-2857-4af6-932c-3455f38bd05e_00636535675981232703_00000000000000000001"),
					Properties: &armautomation.JobStreamProperties{
						JobStreamID: to.Ptr("24456a8a-2857-4af6-932c-3455f38bd05e_00636535675981232703_00000000000000000001"),
						StreamType:  to.Ptr(armautomation.JobStreamTypeOutput),
						Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-07T02:33:18.1232703+00:00"); return t }()),
					},
				},
				{
					ID: to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourcegroups/mygroup/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/jobs/jobName/streams/24456a8a-2857-4af6-932c-3455f38bd05e_00636535675984691350_00000000000000000002"),
					Properties: &armautomation.JobStreamProperties{
						JobStreamID: to.Ptr("24456a8a-2857-4af6-932c-3455f38bd05e_00636535675984691350_00000000000000000002"),
						StreamType:  to.Ptr(armautomation.JobStreamTypeOutput),
						Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-07T02:33:18.469135+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobStreamListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobStreamListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/job/listJobStreamsByJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAutomationClient_ConvertGraphRunbookContent(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/serializeGraphRunbookContent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Graphical raw runbook content from graphical runbook JSON object"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewClient("subid", cred, &options)
	res, err := client.ConvertGraphRunbookContent(ctx,
		"rg",
		"MyAutomationAccount",
		armautomation.GraphicalRunbookContent{
			GraphRunbookJSON: to.Ptr("<GraphRunbookJSON>"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/serializeGraphRunbookContent.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.GraphicalRunbookContent{
			GraphRunbookJSON: to.Ptr("<GraphRunbookJSON>"),
			RawContent: &armautomation.RawGraphicalRunbookContent{
				RunbookDefinition: to.Ptr("AAEAAADAQAAAAAAAAAMAgAAAGJPcmNoZXN0cmF0b3IuR3JhcGhSdW5ib29rLk1vZGVsLCBWZXJzaW9uPTcuMy4wLjAsIEN1bHR...."),
				RunbookType:       to.Ptr(armautomation.GraphRunbookTypeGraphPowerShell),
				SchemaVersion:     to.Ptr("1.10"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GraphicalRunbookContent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GraphicalRunbookContent)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/serializeGraphRunbookContent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/deserializeGraphRunbookContent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Graphical runbook content from raw content"},
	})
	client = armautomation.NewClient("subid", cred, &options)
	res, err = client.ConvertGraphRunbookContent(ctx,
		"rg",
		"MyAutomationAccount",
		armautomation.GraphicalRunbookContent{
			RawContent: &armautomation.RawGraphicalRunbookContent{
				RunbookDefinition: to.Ptr("AAEAAADAQAAAAAAAAAMAgAAAGJPcmNoZXN0cmF0b3IuR3JhcGhSdW5ib29rLk1vZGVsLCBWZXJzaW9uPTcuMy4wLjAsIEN1bHR...."),
				RunbookType:       to.Ptr(armautomation.GraphRunbookTypeGraphPowerShell),
				SchemaVersion:     to.Ptr("1.10"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/deserializeGraphRunbookContent.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.GraphicalRunbookContent{
			GraphRunbookJSON: to.Ptr("<GraphRunbookJSON>"),
			RawContent: &armautomation.RawGraphicalRunbookContent{
				RunbookDefinition: to.Ptr("AAEAAADAQAAAAAAAAAMAgAAAGJPcmNoZXN0cmF0b3IuR3JhcGhSdW5ib29rLk1vZGVsLCBWZXJzaW9uPTcuMy4wLjAsIEN1bHR...."),
				RunbookType:       to.Ptr(armautomation.GraphRunbookTypeGraphPowerShell),
				SchemaVersion:     to.Ptr("1.10"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GraphicalRunbookContent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GraphicalRunbookContent)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/deserializeGraphRunbookContent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSoftwareUpdateConfigurations_Create(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfiguration/createSoftwareUpdateConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create software update configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSoftwareUpdateConfigurationsClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.Create(ctx,
		"mygroup",
		"myaccount",
		"testpatch",
		armautomation.SoftwareUpdateConfiguration{
			Properties: &armautomation.SoftwareUpdateConfigurationProperties{
				ScheduleInfo: &armautomation.SUCScheduleProperties{
					AdvancedSchedule: &armautomation.AdvancedSchedule{
						WeekDays: []*string{
							to.Ptr("Monday"),
							to.Ptr("Thursday")},
					},
					ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-09T11:22:57+00:00"); return t }()),
					Frequency:  to.Ptr(armautomation.ScheduleFrequencyHour),
					Interval:   to.Ptr[int64](1),
					StartTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T12:22:57+00:00"); return t }()),
					TimeZone:   to.Ptr("America/Los_Angeles"),
				},
				Tasks: &armautomation.SoftwareUpdateConfigurationTasks{
					PostTask: &armautomation.TaskProperties{
						Source: to.Ptr("GetCache"),
					},
					PreTask: &armautomation.TaskProperties{
						Parameters: map[string]*string{
							"COMPUTERNAME": to.Ptr("Computer1"),
						},
						Source: to.Ptr("HelloWorld"),
					},
				},
				UpdateConfiguration: &armautomation.UpdateConfiguration{
					AzureVirtualMachines: []*string{
						to.Ptr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-01"),
						to.Ptr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-02"),
						to.Ptr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-03")},
					Duration: to.Ptr("PT2H0M"),
					NonAzureComputerNames: []*string{
						to.Ptr("box1.contoso.com"),
						to.Ptr("box2.contoso.com")},
					OperatingSystem: to.Ptr(armautomation.OperatingSystemTypeWindows),
					Targets: &armautomation.TargetProperties{
						AzureQueries: []*armautomation.AzureQueryProperties{
							{
								Locations: []*string{
									to.Ptr("Japan East"),
									to.Ptr("UK South")},
								Scope: []*string{
									to.Ptr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067/resourceGroups/myresources"),
									to.Ptr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067")},
								TagSettings: &armautomation.TagSettingsProperties{
									FilterOperator: to.Ptr(armautomation.TagOperatorsAll),
									Tags: map[string][]*string{
										"tag1": {
											to.Ptr("tag1Value1"),
											to.Ptr("tag1Value2"),
											to.Ptr("tag1Value3")},
										"tag2": {
											to.Ptr("tag2Value1"),
											to.Ptr("tag2Value2"),
											to.Ptr("tag2Value3")},
									},
								},
							}},
						NonAzureQueries: []*armautomation.NonAzureQueryProperties{
							{
								FunctionAlias: to.Ptr("SavedSearch1"),
								WorkspaceID:   to.Ptr("WorkspaceId1"),
							},
							{
								FunctionAlias: to.Ptr("SavedSearch2"),
								WorkspaceID:   to.Ptr("WorkspaceId2"),
							}},
					},
					Windows: &armautomation.WindowsProperties{
						ExcludedKbNumbers: []*string{
							to.Ptr("168934"),
							to.Ptr("168973")},
						IncludedUpdateClassifications: to.Ptr(armautomation.WindowsUpdateClassesCritical),
						RebootSetting:                 to.Ptr("IfRequired"),
					},
				},
			},
		},
		&armautomation.SoftwareUpdateConfigurationsClientCreateOptions{ClientRequestID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfiguration/createSoftwareUpdateConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.SoftwareUpdateConfiguration{
			Name: to.Ptr("testpatch"),
			ID:   to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Automation/automationAccounts/myaccount/softwareUpdateConfigurations/testpatch"),
			Properties: &armautomation.SoftwareUpdateConfigurationProperties{
				CreatedBy:         to.Ptr("adam@contoso.com"),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T18:54:50.5233333+00:00"); return t }()),
				Error:             &armautomation.ErrorResponse{},
				LastModifiedBy:    to.Ptr("adam@contoso.com"),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T18:54:50.68+00:00"); return t }()),
				ProvisioningState: to.Ptr("Succeeded"),
				ScheduleInfo: &armautomation.SUCScheduleProperties{
					Description:             to.Ptr(""),
					AdvancedSchedule:        &armautomation.AdvancedSchedule{},
					CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T18:54:50.5233333+00:00"); return t }()),
					ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-09T11:22:00-08:00"); return t }()),
					ExpiryTimeOffsetMinutes: to.Ptr[float64](-480),
					Frequency:               to.Ptr(armautomation.ScheduleFrequencyWeek),
					Interval:                to.Ptr[int64](1),
					IsEnabled:               to.Ptr(true),
					LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T18:54:50.5233333+00:00"); return t }()),
					NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T12:22:00-07:00"); return t }()),
					NextRunOffsetMinutes:    to.Ptr[float64](-420),
					StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T12:22:00-07:00"); return t }()),
					StartTimeOffsetMinutes:  to.Ptr[float64](-420),
					TimeZone:                to.Ptr("America/Los_Angeles"),
				},
				Tasks: &armautomation.SoftwareUpdateConfigurationTasks{
					PostTask: &armautomation.TaskProperties{
						Source: to.Ptr("GetCache"),
					},
					PreTask: &armautomation.TaskProperties{
						Parameters: map[string]*string{
							"COMPUTERNAME": to.Ptr("Computer1"),
						},
						Source: to.Ptr("HelloWorld"),
					},
				},
				UpdateConfiguration: &armautomation.UpdateConfiguration{
					AzureVirtualMachines: []*string{
						to.Ptr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-01"),
						to.Ptr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-02"),
						to.Ptr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-03")},
					Duration: to.Ptr("PT2H"),
					Linux:    &armautomation.LinuxProperties{},
					NonAzureComputerNames: []*string{
						to.Ptr("box1.contoso.com"),
						to.Ptr("box2.contoso.com")},
					OperatingSystem: to.Ptr(armautomation.OperatingSystemTypeWindows),
					Targets: &armautomation.TargetProperties{
						AzureQueries: []*armautomation.AzureQueryProperties{
							{
								Locations: []*string{
									to.Ptr("Japan East"),
									to.Ptr("UK South")},
								Scope: []*string{
									to.Ptr("/subscriptions/422b6c61-95b0-4213-b3be-7282315df71d/resourceGroups/a-stasku-rg0"),
									to.Ptr("/subscriptions/422b6c61-95b0-4213-b3be-7282315df71d")},
								TagSettings: &armautomation.TagSettingsProperties{
									FilterOperator: to.Ptr(armautomation.TagOperatorsAll),
									Tags: map[string][]*string{
										"tag1": {
											to.Ptr("tag1Value1"),
											to.Ptr("tag1Value2")},
										"tag2": {
											to.Ptr("tag2Value1"),
											to.Ptr("tag2Value2")},
									},
								},
							}},
					},
					Windows: &armautomation.WindowsProperties{
						ExcludedKbNumbers: []*string{
							to.Ptr("168934"),
							to.Ptr("168973")},
						IncludedUpdateClassifications: to.Ptr(armautomation.WindowsUpdateClassesCritical),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SoftwareUpdateConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SoftwareUpdateConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfiguration/createSoftwareUpdateConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSoftwareUpdateConfigurations_GetByName(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfiguration/getSoftwareUpdateConfigurationByName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get software update configuration by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSoftwareUpdateConfigurationsClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.GetByName(ctx,
		"mygroup",
		"myaccount",
		"mypatch",
		&armautomation.SoftwareUpdateConfigurationsClientGetByNameOptions{ClientRequestID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfiguration/getSoftwareUpdateConfigurationByName.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.SoftwareUpdateConfiguration{
			Name: to.Ptr("testpatch"),
			ID:   to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Automation/automationAccounts/myaccount/softwareUpdateConfigurations/testpatch"),
			Properties: &armautomation.SoftwareUpdateConfigurationProperties{
				CreatedBy:         to.Ptr("eve@contoso.com"),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T18:54:50.5233333+00:00"); return t }()),
				Error:             &armautomation.ErrorResponse{},
				LastModifiedBy:    to.Ptr(""),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T18:54:50.68+00:00"); return t }()),
				ProvisioningState: to.Ptr("Succeeded"),
				ScheduleInfo: &armautomation.SUCScheduleProperties{
					Description:             to.Ptr(""),
					CreationTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T18:54:50.5233333+00:00"); return t }()),
					ExpiryTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-09T11:22:00-08:00"); return t }()),
					ExpiryTimeOffsetMinutes: to.Ptr[float64](-480),
					Frequency:               to.Ptr(armautomation.ScheduleFrequencyWeek),
					Interval:                to.Ptr[int64](1),
					IsEnabled:               to.Ptr(true),
					LastModifiedTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T18:54:50.5233333+00:00"); return t }()),
					NextRun:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T12:22:00-07:00"); return t }()),
					NextRunOffsetMinutes:    to.Ptr[float64](-420),
					StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T12:22:00-07:00"); return t }()),
					StartTimeOffsetMinutes:  to.Ptr[float64](-420),
					TimeZone:                to.Ptr("America/Los_Angeles"),
				},
				Tasks: &armautomation.SoftwareUpdateConfigurationTasks{
					PostTask: &armautomation.TaskProperties{
						Source: to.Ptr("GetCache"),
					},
					PreTask: &armautomation.TaskProperties{
						Parameters: map[string]*string{
							"COMPUTERNAME": to.Ptr("Computer1"),
						},
						Source: to.Ptr("HelloWorld"),
					},
				},
				UpdateConfiguration: &armautomation.UpdateConfiguration{
					AzureVirtualMachines: []*string{
						to.Ptr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-01"),
						to.Ptr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-02"),
						to.Ptr("/subscriptions/5ae68d89-69a4-454f-b5ce-e443cc4e0067/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-03")},
					Duration: to.Ptr("PT2H"),
					Linux:    &armautomation.LinuxProperties{},
					NonAzureComputerNames: []*string{
						to.Ptr("box1.contoso.com"),
						to.Ptr("box2.contoso.com")},
					OperatingSystem: to.Ptr(armautomation.OperatingSystemTypeWindows),
					Targets: &armautomation.TargetProperties{
						AzureQueries: []*armautomation.AzureQueryProperties{
							{
								Scope: []*string{
									to.Ptr("/subscriptions/422b6c61-95b0-4213-b3be-7282315df71d/resourceGroups/a-stasku-rg0"),
									to.Ptr("/subscriptions/422b6c61-95b0-4213-b3be-7282315df71d")},
								TagSettings: &armautomation.TagSettingsProperties{
									FilterOperator: to.Ptr(armautomation.TagOperatorsAll),
									Tags: map[string][]*string{
										"tag1": {
											to.Ptr("tag1Value1"),
											to.Ptr("tag1Value2")},
										"tag2": {
											to.Ptr("tag2Value1"),
											to.Ptr("tag2Value2")},
									},
								},
							}},
					},
					Windows: &armautomation.WindowsProperties{
						ExcludedKbNumbers: []*string{
							to.Ptr("168934"),
							to.Ptr("168973")},
						IncludedUpdateClassifications: to.Ptr(armautomation.WindowsUpdateClassesCritical),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SoftwareUpdateConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SoftwareUpdateConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfiguration/getSoftwareUpdateConfigurationByName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSoftwareUpdateConfigurations_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfiguration/deleteSoftwareUpdateConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete software update configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSoftwareUpdateConfigurationsClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	_, err := client.Delete(ctx,
		"mygroup",
		"myaccount",
		"mypatch",
		&armautomation.SoftwareUpdateConfigurationsClientDeleteOptions{ClientRequestID: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfiguration/deleteSoftwareUpdateConfiguration.json: %v", err)
	}
}

func TestSoftwareUpdateConfigurations_List(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfiguration/listSoftwareUpdateConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List software update configurations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSoftwareUpdateConfigurationsClient("1a7d4044-286c-4acb-969a-96639265bf2e", cred, &options)
	res, err := client.List(ctx,
		"mygroup",
		"myaccount",
		&armautomation.SoftwareUpdateConfigurationsClientListOptions{ClientRequestID: nil,
			Filter: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfiguration/listSoftwareUpdateConfigurations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.SoftwareUpdateConfigurationListResult{
			Value: []*armautomation.SoftwareUpdateConfigurationCollectionItem{
				{
					Name: to.Ptr("testpatch-01"),
					ID:   to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/Mo-Resources-WCUS/providers/Microsoft.Automation/automationAccounts/Mo-AAA-WCUS/softwareUpdateConfigurations/testpatch-01"),
					Properties: &armautomation.SoftwareUpdateConfigurationCollectionItemProperties{
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T18:54:50.5233333+00:00"); return t }()),
						Frequency:         to.Ptr(armautomation.ScheduleFrequencyWeek),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T18:54:50.68+00:00"); return t }()),
						NextRun:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T12:22:00-07:00"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T12:22:00-07:00"); return t }()),
						Tasks: &armautomation.SoftwareUpdateConfigurationTasks{
							PostTask: &armautomation.TaskProperties{
								Source: to.Ptr("GetCache"),
							},
							PreTask: &armautomation.TaskProperties{
								Parameters: map[string]*string{
									"COMPUTERNAME": to.Ptr("Computer1"),
								},
								Source: to.Ptr("HelloWorld"),
							},
						},
						UpdateConfiguration: &armautomation.UpdateConfiguration{
							AzureVirtualMachines: []*string{
								to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-01"),
								to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-02"),
								to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-03")},
							Duration:        to.Ptr("PT2H"),
							OperatingSystem: to.Ptr(armautomation.OperatingSystemTypeWindows),
							Targets: &armautomation.TargetProperties{
								AzureQueries: []*armautomation.AzureQueryProperties{
									{
										Scope: []*string{
											to.Ptr("/subscriptions/422b6c61-95b0-4213-b3be-7282315df71d/resourceGroups/a-stasku-rg0"),
											to.Ptr("/subscriptions/422b6c61-95b0-4213-b3be-7282315df71d")},
										TagSettings: &armautomation.TagSettingsProperties{
											FilterOperator: to.Ptr(armautomation.TagOperatorsAll),
											Tags: map[string][]*string{
												"tag1": {
													to.Ptr("tag1Value1"),
													to.Ptr("tag1Value2")},
												"tag2": {
													to.Ptr("tag2Value1"),
													to.Ptr("tag2Value2")},
											},
										},
									}},
							},
							Windows: &armautomation.WindowsProperties{
								IncludedUpdateClassifications: to.Ptr(armautomation.WindowsUpdateClasses("Critical, Security, UpdateRollup, FeaturePack, ServicePack, Definition, Tools, Updates")),
							},
						},
					},
				},
				{
					Name: to.Ptr("testpatch-02"),
					ID:   to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/Mo-Resources-WCUS/providers/Microsoft.Automation/automationAccounts/Mo-AAA-WCUS/softwareUpdateConfigurations/testpatch-02"),
					Properties: &armautomation.SoftwareUpdateConfigurationCollectionItemProperties{
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-11T21:52:02.7733333+00:00"); return t }()),
						Frequency:         to.Ptr(armautomation.ScheduleFrequencyHour),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-11T21:52:22.88+00:00"); return t }()),
						NextRun:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-05T12:26:00-07:00"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-05T12:26:00-07:00"); return t }()),
						Tasks: &armautomation.SoftwareUpdateConfigurationTasks{
							PostTask: &armautomation.TaskProperties{
								Source: to.Ptr("GetCache"),
							},
							PreTask: &armautomation.TaskProperties{
								Parameters: map[string]*string{
									"COMPUTERNAME": to.Ptr("Computer1"),
								},
								Source: to.Ptr("HelloWorld"),
							},
						},
						UpdateConfiguration: &armautomation.UpdateConfiguration{
							AzureVirtualMachines: []*string{
								to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-04"),
								to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-05"),
								to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-06")},
							Duration:        to.Ptr("PT2H30M"),
							OperatingSystem: to.Ptr(armautomation.OperatingSystemTypeWindows),
							Targets: &armautomation.TargetProperties{
								AzureQueries: []*armautomation.AzureQueryProperties{
									{
										Locations: []*string{
											to.Ptr("Japan East"),
											to.Ptr("UK South")},
										Scope: []*string{
											to.Ptr("/subscriptions/422b6c61-95b0-4213-b3be-7282315df71d/resourceGroups/a-stasku-rg0"),
											to.Ptr("/subscriptions/422b6c61-95b0-4213-b3be-7282315df71d")},
										TagSettings: &armautomation.TagSettingsProperties{
											FilterOperator: to.Ptr(armautomation.TagOperatorsAll),
											Tags: map[string][]*string{
												"tag1": {
													to.Ptr("tag1Value1"),
													to.Ptr("tag1Value2")},
												"tag2": {
													to.Ptr("tag2Value1"),
													to.Ptr("tag2Value2")},
											},
										},
									}},
							},
							Windows: &armautomation.WindowsProperties{
								IncludedUpdateClassifications: to.Ptr(armautomation.WindowsUpdateClasses("Critical, FeaturePack")),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SoftwareUpdateConfigurationListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SoftwareUpdateConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfiguration/listSoftwareUpdateConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfiguration/listSoftwareUpdateConfigurationsByVm.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List software update configurations Targeting a specific azure virtual machine"},
	})
	client = armautomation.NewSoftwareUpdateConfigurationsClient("1a7d4044-286c-4acb-969a-96639265bf2e", cred, &options)
	res, err = client.List(ctx,
		"mygroup",
		"myaccount",
		&armautomation.SoftwareUpdateConfigurationsClientListOptions{ClientRequestID: nil,
			Filter: to.Ptr("properties/updateConfiguration/azureVirtualMachines/any(m: m eq '/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-01')"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfiguration/listSoftwareUpdateConfigurationsByVm.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.SoftwareUpdateConfigurationListResult{
			Value: []*armautomation.SoftwareUpdateConfigurationCollectionItem{
				{
					Name: to.Ptr("testpatch-01"),
					ID:   to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/Mo-Resources-WCUS/providers/Microsoft.Automation/automationAccounts/Mo-AAA-WCUS/softwareUpdateConfigurations/testpatch-01"),
					Properties: &armautomation.SoftwareUpdateConfigurationCollectionItemProperties{
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T18:54:50.5233333+00:00"); return t }()),
						Frequency:         to.Ptr(armautomation.ScheduleFrequencyWeek),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T18:54:50.68+00:00"); return t }()),
						NextRun:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T12:22:00-07:00"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-19T12:22:00-07:00"); return t }()),
						Tasks: &armautomation.SoftwareUpdateConfigurationTasks{
							PostTask: &armautomation.TaskProperties{
								Source: to.Ptr("GetCache"),
							},
							PreTask: &armautomation.TaskProperties{
								Parameters: map[string]*string{
									"COMPUTERNAME": to.Ptr("Computer1"),
								},
								Source: to.Ptr("HelloWorld"),
							},
						},
						UpdateConfiguration: &armautomation.UpdateConfiguration{
							AzureVirtualMachines: []*string{
								to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-01"),
								to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-02"),
								to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-03")},
							Duration:        to.Ptr("PT2H"),
							OperatingSystem: to.Ptr(armautomation.OperatingSystemTypeWindows),
							Windows: &armautomation.WindowsProperties{
								IncludedUpdateClassifications: to.Ptr(armautomation.WindowsUpdateClasses("Critical, Security, UpdateRollup, FeaturePack, ServicePack, Definition, Tools, Updates")),
							},
						},
					},
				},
				{
					Name: to.Ptr("testpatch-02"),
					ID:   to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/Mo-Resources-WCUS/providers/Microsoft.Automation/automationAccounts/Mo-AAA-WCUS/softwareUpdateConfigurations/testpatch-02"),
					Properties: &armautomation.SoftwareUpdateConfigurationCollectionItemProperties{
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-11T21:52:02.7733333+00:00"); return t }()),
						Frequency:         to.Ptr(armautomation.ScheduleFrequencyHour),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-11T21:52:22.88+00:00"); return t }()),
						NextRun:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-05T12:26:00-07:00"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-05T12:26:00-07:00"); return t }()),
						Tasks: &armautomation.SoftwareUpdateConfigurationTasks{
							PostTask: &armautomation.TaskProperties{
								Source: to.Ptr("GetCache"),
							},
							PreTask: &armautomation.TaskProperties{
								Parameters: map[string]*string{
									"COMPUTERNAME": to.Ptr("Computer1"),
								},
								Source: to.Ptr("HelloWorld"),
							},
						},
						UpdateConfiguration: &armautomation.UpdateConfiguration{
							AzureVirtualMachines: []*string{
								to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-01"),
								to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-05"),
								to.Ptr("/subscriptions/1a7d4044-286c-4acb-969a-96639265bf2e/resourceGroups/myresources/providers/Microsoft.Compute/virtualMachines/vm-06")},
							Duration:        to.Ptr("PT2H30M"),
							OperatingSystem: to.Ptr(armautomation.OperatingSystemTypeWindows),
							Windows: &armautomation.WindowsProperties{
								IncludedUpdateClassifications: to.Ptr(armautomation.WindowsUpdateClasses("Critical, FeaturePack")),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SoftwareUpdateConfigurationListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SoftwareUpdateConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfiguration/listSoftwareUpdateConfigurationsByVm.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSoftwareUpdateConfigurationRuns_List(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfigurationRun/listFailedSoftwareUpdateConfigurationRuns.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List software update configuration machine run with status equal to 'Failed'"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSoftwareUpdateConfigurationRunsClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.List(ctx,
		"mygroup",
		"myaccount",
		&armautomation.SoftwareUpdateConfigurationRunsClientListOptions{ClientRequestID: nil,
			Filter: to.Ptr("properties/status%20eq%20'Failed'"),
			Skip:   nil,
			Top:    nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfigurationRun/listFailedSoftwareUpdateConfigurationRuns.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.SoftwareUpdateConfigurationRunListResult{
			Value: []*armautomation.SoftwareUpdateConfigurationRun{
				{
					Name: to.Ptr("2bd77cfa-2e9c-41b4-a45b-684a77cfeca9"),
					ID:   to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Automation/automationAccounts/myaccount/softwareUpdateConfigurationRuns/2bd77cfa-2e9c-41b4-a45b-684a77cfeca9"),
					Properties: &armautomation.SoftwareUpdateConfigurationRunProperties{
						ComputerCount:      to.Ptr[int32](1),
						ConfiguredDuration: to.Ptr("PT2H"),
						CreationTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:30:36.2401233+00:00"); return t }()),
						EndTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:30:42.8466667+00:00"); return t }()),
						FailedCount:        to.Ptr[int32](0),
						LastModifiedBy:     to.Ptr(""),
						LastModifiedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:31:39.3966667+00:00"); return t }()),
						OSType:             to.Ptr("Windows"),
						SoftwareUpdateConfiguration: &armautomation.UpdateConfigurationNavigation{
							Name: to.Ptr("mypatch"),
						},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:30:36.2401233+00:00"); return t }()),
						Status:    to.Ptr("Failed"),
						Tasks: &armautomation.SoftwareUpdateConfigurationRunTasks{
							PreTask: &armautomation.SoftwareUpdateConfigurationRunTaskProperties{
								JobID:  to.Ptr("be430e9e-2290-462e-8f86-686407c35fab"),
								Source: to.Ptr("preRunbook"),
								Status: to.Ptr("Completed"),
							},
						},
					},
				},
				{
					Name: to.Ptr("5dabff55-9812-4a58-af16-b0cb1d9384e8"),
					ID:   to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Automation/automationAccounts/myaccount/softwareUpdateConfigurationRuns/5dabff55-9812-4a58-af16-b0cb1d9384e8"),
					Properties: &armautomation.SoftwareUpdateConfigurationRunProperties{
						ComputerCount:      to.Ptr[int32](1),
						ConfiguredDuration: to.Ptr("PT2H"),
						CreationTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T01:33:01.8818952+00:00"); return t }()),
						EndTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T01:33:08.1133333+00:00"); return t }()),
						FailedCount:        to.Ptr[int32](0),
						LastModifiedBy:     to.Ptr(""),
						LastModifiedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T01:34:03.94+00:00"); return t }()),
						OSType:             to.Ptr("Windows"),
						SoftwareUpdateConfiguration: &armautomation.UpdateConfigurationNavigation{
							Name: to.Ptr("mypatch"),
						},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T01:33:01.8818952+00:00"); return t }()),
						Status:    to.Ptr("Failed"),
						Tasks: &armautomation.SoftwareUpdateConfigurationRunTasks{
							PreTask: &armautomation.SoftwareUpdateConfigurationRunTaskProperties{
								JobID:  to.Ptr("be430e9e-2290-462e-8f86-686407c35fab"),
								Source: to.Ptr("preRunbook"),
								Status: to.Ptr("Completed"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SoftwareUpdateConfigurationRunListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SoftwareUpdateConfigurationRunListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfigurationRun/listFailedSoftwareUpdateConfigurationRuns.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfigurationRun/listSoftwareUpdateConfigurationRuns.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List software update configuration machine runs"},
	})
	client = armautomation.NewSoftwareUpdateConfigurationRunsClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err = client.List(ctx,
		"mygroup",
		"myaccount",
		&armautomation.SoftwareUpdateConfigurationRunsClientListOptions{ClientRequestID: nil,
			Filter: nil,
			Skip:   nil,
			Top:    nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfigurationRun/listSoftwareUpdateConfigurationRuns.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.SoftwareUpdateConfigurationRunListResult{
			Value: []*armautomation.SoftwareUpdateConfigurationRun{
				{
					Name: to.Ptr("2bd77cfa-2e9c-41b4-a45b-684a77cfeca9"),
					ID:   to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Automation/automationAccounts/myaccount/softwareUpdateConfigurationRuns/2bd77cfa-2e9c-41b4-a45b-684a77cfeca9"),
					Properties: &armautomation.SoftwareUpdateConfigurationRunProperties{
						ComputerCount:      to.Ptr[int32](1),
						ConfiguredDuration: to.Ptr("PT2H"),
						CreationTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:30:36.2401233+00:00"); return t }()),
						EndTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:30:42.8466667+00:00"); return t }()),
						FailedCount:        to.Ptr[int32](0),
						LastModifiedBy:     to.Ptr(""),
						LastModifiedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:31:39.3966667+00:00"); return t }()),
						OSType:             to.Ptr("Windows"),
						SoftwareUpdateConfiguration: &armautomation.UpdateConfigurationNavigation{
							Name: to.Ptr("mypatch"),
						},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:30:36.2401233+00:00"); return t }()),
						Status:    to.Ptr("Succeeded"),
						Tasks: &armautomation.SoftwareUpdateConfigurationRunTasks{
							PreTask: &armautomation.SoftwareUpdateConfigurationRunTaskProperties{
								JobID:  to.Ptr("be430e9e-2290-462e-8f86-686407c35fab"),
								Source: to.Ptr("preRunbook"),
								Status: to.Ptr("Completed"),
							},
						},
					},
				},
				{
					Name: to.Ptr("5dabff55-9812-4a58-af16-b0cb1d9384e8"),
					ID:   to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Automation/automationAccounts/myaccount/softwareUpdateConfigurationRuns/5dabff55-9812-4a58-af16-b0cb1d9384e8"),
					Properties: &armautomation.SoftwareUpdateConfigurationRunProperties{
						ComputerCount:      to.Ptr[int32](1),
						ConfiguredDuration: to.Ptr("PT2H"),
						CreationTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T01:33:01.8818952+00:00"); return t }()),
						EndTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T01:33:08.1133333+00:00"); return t }()),
						FailedCount:        to.Ptr[int32](0),
						LastModifiedBy:     to.Ptr(""),
						LastModifiedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T01:34:03.94+00:00"); return t }()),
						OSType:             to.Ptr("Windows"),
						SoftwareUpdateConfiguration: &armautomation.UpdateConfigurationNavigation{
							Name: to.Ptr("mypatch"),
						},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T01:33:01.8818952+00:00"); return t }()),
						Status:    to.Ptr("Succeeded"),
						Tasks: &armautomation.SoftwareUpdateConfigurationRunTasks{
							PreTask: &armautomation.SoftwareUpdateConfigurationRunTaskProperties{
								JobID:  to.Ptr("be430e9e-2290-462e-8f86-686407c35fab"),
								Source: to.Ptr("preRunbook"),
								Status: to.Ptr("Completed"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SoftwareUpdateConfigurationRunListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SoftwareUpdateConfigurationRunListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfigurationRun/listSoftwareUpdateConfigurationRuns.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSoftwareUpdateConfigurationMachineRuns_List(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfigurationMachineRun/listSoftwareUpdateConfigurationMachineRuns.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List software update configuration machine runs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewSoftwareUpdateConfigurationMachineRunsClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.List(ctx,
		"mygroup",
		"myaccount",
		&armautomation.SoftwareUpdateConfigurationMachineRunsClientListOptions{ClientRequestID: nil,
			Filter: nil,
			Skip:   nil,
			Top:    nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfigurationMachineRun/listSoftwareUpdateConfigurationMachineRuns.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.SoftwareUpdateConfigurationMachineRunListResult{
			Value: []*armautomation.SoftwareUpdateConfigurationMachineRun{
				{
					Name: to.Ptr("ca440719-34a4-4234-a1a9-3f84faf7788f"),
					ID:   to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Automation/automationAccounts/myaccount/softwareUpdateConfigurationMachineRuns/ca440719-34a4-4234-a1a9-3f84faf7788f"),
					Properties: &armautomation.UpdateConfigurationMachineRunProperties{
						ConfiguredDuration: to.Ptr("PT2H"),
						CorrelationID:      to.Ptr("0b943e57-44d3-4f05-898c-6e92aa617e59"),
						CreationTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:33:30.7484961+00:00"); return t }()),
						EndTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:33:36.4166667+00:00"); return t }()),
						Error:              &armautomation.ErrorResponse{},
						Job:                &armautomation.JobNavigation{},
						LastModifiedBy:     to.Ptr(""),
						LastModifiedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:34:32.4366667+00:00"); return t }()),
						OSType:             to.Ptr("Windows"),
						SoftwareUpdateConfiguration: &armautomation.UpdateConfigurationNavigation{
							Name: to.Ptr("mypatch"),
						},
						SourceComputerID:   to.Ptr("3d3f24bf-7037-424e-bfba-aae3b9752f8e"),
						StartTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:33:30.7484961+00:00"); return t }()),
						Status:             to.Ptr("Succeeded"),
						TargetComputer:     to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Compute/virtualMachines/myvm"),
						TargetComputerType: to.Ptr("AzureVirtualMachines"),
					},
				},
				{
					Name: to.Ptr("ca440719-34a4-4234-a1a9-3f84faf7789f"),
					ID:   to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Automation/automationAccounts/myaccount/softwareUpdateConfigurationMachineRuns/ca440719-34a4-4234-a1a9-3f84faf7789f"),
					Properties: &armautomation.UpdateConfigurationMachineRunProperties{
						ConfiguredDuration: to.Ptr("PT2H"),
						CorrelationID:      to.Ptr("0b943e57-44d3-4f05-898c-6e92aa617e59"),
						CreationTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:33:30.7484961+00:00"); return t }()),
						EndTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:33:36.4166667+00:00"); return t }()),
						Error:              &armautomation.ErrorResponse{},
						Job:                &armautomation.JobNavigation{},
						LastModifiedBy:     to.Ptr(""),
						LastModifiedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:34:32.4366667+00:00"); return t }()),
						OSType:             to.Ptr("Windows"),
						SoftwareUpdateConfiguration: &armautomation.UpdateConfigurationNavigation{
							Name: to.Ptr("mypatch"),
						},
						SourceComputerID:   to.Ptr("3d3f24bf-7037-424e-bfba-aae3b9752f8e"),
						StartTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:33:30.7484961+00:00"); return t }()),
						Status:             to.Ptr("Succeeded"),
						TargetComputer:     to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Compute/virtualMachines/myvm2"),
						TargetComputerType: to.Ptr("AzureVirtualMachines"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SoftwareUpdateConfigurationMachineRunListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SoftwareUpdateConfigurationMachineRunListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfigurationMachineRun/listSoftwareUpdateConfigurationMachineRuns.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfigurationMachineRun/listSoftwareUpdateConfigurationMachineRunsByRun.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List software update configuration machine runs for a specific software update configuration run"},
	})
	client = armautomation.NewSoftwareUpdateConfigurationMachineRunsClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err = client.List(ctx,
		"mygroup",
		"myaccount",
		&armautomation.SoftwareUpdateConfigurationMachineRunsClientListOptions{ClientRequestID: nil,
			Filter: to.Ptr("$filter=properties/correlationId%20eq%200b943e57-44d3-4f05-898c-6e92aa617e59"),
			Skip:   nil,
			Top:    nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfigurationMachineRun/listSoftwareUpdateConfigurationMachineRunsByRun.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.SoftwareUpdateConfigurationMachineRunListResult{
			Value: []*armautomation.SoftwareUpdateConfigurationMachineRun{
				{
					Name: to.Ptr("ca440719-34a4-4234-a1a9-3f84faf7788f"),
					ID:   to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Automation/automationAccounts/myaccount/softwareUpdateConfigurationMachineRuns/ca440719-34a4-4234-a1a9-3f84faf7788f"),
					Properties: &armautomation.UpdateConfigurationMachineRunProperties{
						ConfiguredDuration: to.Ptr("PT2H"),
						CorrelationID:      to.Ptr("0b943e57-44d3-4f05-898c-6e92aa617e59"),
						CreationTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:33:30.7484961+00:00"); return t }()),
						EndTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:33:36.4166667+00:00"); return t }()),
						Error:              &armautomation.ErrorResponse{},
						Job:                &armautomation.JobNavigation{},
						LastModifiedBy:     to.Ptr(""),
						LastModifiedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:34:32.4366667+00:00"); return t }()),
						OSType:             to.Ptr("Windows"),
						SoftwareUpdateConfiguration: &armautomation.UpdateConfigurationNavigation{
							Name: to.Ptr("mypatch"),
						},
						SourceComputerID:   to.Ptr("3d3f24bf-7037-424e-bfba-aae3b9752f8e"),
						StartTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:33:30.7484961+00:00"); return t }()),
						Status:             to.Ptr("Succeeded"),
						TargetComputer:     to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Compute/virtualMachines/myvm"),
						TargetComputerType: to.Ptr("AzureVirtualMachines"),
					},
				},
				{
					Name: to.Ptr("ca440719-34a4-4234-a1a9-3f84faf7789f"),
					ID:   to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Automation/automationAccounts/myaccount/softwareUpdateConfigurationMachineRuns/ca440719-34a4-4234-a1a9-3f84faf7789f"),
					Properties: &armautomation.UpdateConfigurationMachineRunProperties{
						ConfiguredDuration: to.Ptr("PT2H"),
						CorrelationID:      to.Ptr("0b943e57-44d3-4f05-898c-6e92aa617e59"),
						CreationTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:33:30.7484961+00:00"); return t }()),
						EndTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:33:36.4166667+00:00"); return t }()),
						Error:              &armautomation.ErrorResponse{},
						Job:                &armautomation.JobNavigation{},
						LastModifiedBy:     to.Ptr(""),
						LastModifiedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:34:32.4366667+00:00"); return t }()),
						OSType:             to.Ptr("Windows"),
						SoftwareUpdateConfiguration: &armautomation.UpdateConfigurationNavigation{
							Name: to.Ptr("mypatch"),
						},
						SourceComputerID:   to.Ptr("3d3f24bf-7037-424e-bfba-aae3b9752f8e"),
						StartTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-23T02:33:30.7484961+00:00"); return t }()),
						Status:             to.Ptr("Succeeded"),
						TargetComputer:     to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourceGroups/mygroup/providers/Microsoft.Compute/virtualMachines/myvm2"),
						TargetComputerType: to.Ptr("AzureVirtualMachines"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SoftwareUpdateConfigurationMachineRunListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SoftwareUpdateConfigurationMachineRunListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2019-06-01/examples/softwareUpdateConfigurationMachineRun/listSoftwareUpdateConfigurationMachineRunsByRun.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRunbookDraft_GetContent(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getRunbookDraftContent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get runbook draft content"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewRunbookDraftClient("subid", cred, &options)
	_, err := client.GetContent(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getRunbookDraftContent.json: %v", err)
	}
}

func TestRunbookDraft_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getRunbookDraft.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get runbook draft"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewRunbookDraftClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getRunbookDraft.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.RunbookDraft{
			CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-09T03:25:59.11+00:00"); return t }()),
			InEdit:           to.Ptr(true),
			LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-09T04:48:56.43+00:00"); return t }()),
			OutputTypes:      []*string{},
			Parameters:       map[string]*armautomation.RunbookParameter{},
		}
		if !reflect.DeepEqual(exampleRes, res.RunbookDraft) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RunbookDraft)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getRunbookDraft.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRunbookDraft_UndoEdit(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/undoDraftEditToLastKnownPublishedState.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Undo draft edit to last known published state"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewRunbookDraftClient("subid", cred, &options)
	_, err := client.UndoEdit(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/undoDraftEditToLastKnownPublishedState.json: %v", err)
	}
}

func TestRunbook_Publish(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/publishRunbook.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Publish runbook draft"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewRunbookClient("subid", cred, &options)
	poller, err := client.BeginPublish(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		&armautomation.RunbookClientBeginPublishOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/publishRunbook.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/publishRunbook.json: %v", err)
	}
}

func TestRunbook_GetContent(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getRunbookContent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get runbook content"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewRunbookClient("subid", cred, &options)
	_, err := client.GetContent(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getRunbookContent.json: %v", err)
	}
}

func TestRunbook_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getRunbook.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get runbook"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewRunbookClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getRunbook.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Runbook{
			Name:     to.Ptr("Get-AzureVMTutorial"),
			Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Runbooks"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/runbooks/Get-AzureVMTutorial"),
			Location: to.Ptr("East US 2"),
			Tags: map[string]*string{
				"tag01": to.Ptr("value01"),
				"tag02": to.Ptr("value02"),
			},
			Etag: to.Ptr("\"636263335437500000\""),
			Properties: &armautomation.RunbookProperties{
				Description:       to.Ptr("Description of the Runbook"),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:32:23.75+00:00"); return t }()),
				JobCount:          to.Ptr[int32](0),
				LastModifiedBy:    to.Ptr("myEmaild@microsoft.com"),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:32:23.75+00:00"); return t }()),
				LogActivityTrace:  to.Ptr[int32](1),
				LogProgress:       to.Ptr(true),
				LogVerbose:        to.Ptr(false),
				OutputTypes:       []*string{},
				Parameters:        map[string]*armautomation.RunbookParameter{},
				ProvisioningState: to.Ptr("Succeeded"),
				RunbookType:       to.Ptr(armautomation.RunbookTypeEnumPowerShellWorkflow),
				State:             to.Ptr(armautomation.RunbookStatePublished),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Runbook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Runbook)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getRunbook.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRunbook_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/createOrUpdateRunbook.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update runbook and publish it"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewRunbookClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		armautomation.RunbookCreateOrUpdateParameters{
			Name:     to.Ptr("Get-AzureVMTutorial"),
			Location: to.Ptr("East US 2"),
			Properties: &armautomation.RunbookCreateOrUpdateProperties{
				Description:      to.Ptr("Description of the Runbook"),
				LogActivityTrace: to.Ptr[int32](1),
				LogProgress:      to.Ptr(true),
				LogVerbose:       to.Ptr(false),
				PublishContentLink: &armautomation.ContentLink{
					ContentHash: &armautomation.ContentHash{
						Algorithm: to.Ptr("SHA256"),
						Value:     to.Ptr("115775B8FF2BE672D8A946BD0B489918C724DDE15A440373CA54461D53010A80"),
					},
					URI: to.Ptr("https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/101-automation-runbook-getvms/Runbooks/Get-AzureVMTutorial.ps1"),
				},
				RunbookType: to.Ptr(armautomation.RunbookTypeEnumPowerShellWorkflow),
			},
			Tags: map[string]*string{
				"tag01": to.Ptr("value01"),
				"tag02": to.Ptr("value02"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/createOrUpdateRunbook.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Runbook{
			Name:     to.Ptr("Get-AzureVMTutorial"),
			Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Runbooks"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/runbooks/Get-AzureVMTutorial"),
			Location: to.Ptr("East US 2"),
			Tags: map[string]*string{
				"tag01": to.Ptr("value01"),
				"tag02": to.Ptr("value02"),
			},
			Etag: to.Ptr("\"636263318866000000\""),
			Properties: &armautomation.RunbookProperties{
				Description:       to.Ptr("Description of the Runbook"),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:04:43.66+00:00"); return t }()),
				JobCount:          to.Ptr[int32](0),
				LastModifiedBy:    to.Ptr("myEmaild@microsoft.com"),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:04:46.6+00:00"); return t }()),
				LogActivityTrace:  to.Ptr[int32](1),
				LogProgress:       to.Ptr(true),
				LogVerbose:        to.Ptr(true),
				OutputTypes:       []*string{},
				Parameters:        map[string]*armautomation.RunbookParameter{},
				ProvisioningState: to.Ptr("Succeeded"),
				RunbookType:       to.Ptr(armautomation.RunbookTypeEnumPowerShellWorkflow),
				State:             to.Ptr(armautomation.RunbookStatePublished),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Runbook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Runbook)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/createOrUpdateRunbook.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/createRunbookAsDraft.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create runbook as draft"},
	})
	client = armautomation.NewRunbookClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		armautomation.RunbookCreateOrUpdateParameters{
			Name:     to.Ptr("Get-AzureVMTutorial"),
			Location: to.Ptr("East US 2"),
			Properties: &armautomation.RunbookCreateOrUpdateProperties{
				Description: to.Ptr("Description of the Runbook"),
				Draft:       &armautomation.RunbookDraft{},
				LogProgress: to.Ptr(false),
				LogVerbose:  to.Ptr(false),
				RunbookType: to.Ptr(armautomation.RunbookTypeEnumPowerShellWorkflow),
			},
			Tags: map[string]*string{
				"tag01": to.Ptr("value01"),
				"tag02": to.Ptr("value02"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/createRunbookAsDraft.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Runbook{
			Name:     to.Ptr("Get-AzureVMTutorial"),
			Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Runbooks"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/runbooks/Get-AzureVMTutorial"),
			Location: to.Ptr("East US 2"),
			Tags: map[string]*string{
				"tag01": to.Ptr("value01"),
				"tag02": to.Ptr("value02"),
			},
			Etag: to.Ptr("\"636263318866000000\""),
			Properties: &armautomation.RunbookProperties{
				Description:       to.Ptr("Description of the Runbook"),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-09T03:25:59.097+00:00"); return t }()),
				JobCount:          to.Ptr[int32](0),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-09T03:25:59.097+00:00"); return t }()),
				LogActivityTrace:  to.Ptr[int32](0),
				LogProgress:       to.Ptr(false),
				LogVerbose:        to.Ptr(false),
				Parameters:        map[string]*armautomation.RunbookParameter{},
				ProvisioningState: to.Ptr("Succeeded"),
				RunbookType:       to.Ptr(armautomation.RunbookTypeEnumScript),
				State:             to.Ptr(armautomation.RunbookStateNew),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Runbook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Runbook)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/createRunbookAsDraft.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRunbook_Update(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/updateRunbook.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update runbook"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewRunbookClient("subid", cred, &options)
	_, err := client.Update(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		armautomation.RunbookUpdateParameters{
			Properties: &armautomation.RunbookUpdateProperties{
				Description:      to.Ptr("Updated Description of the Runbook"),
				LogActivityTrace: to.Ptr[int32](1),
				LogProgress:      to.Ptr(true),
				LogVerbose:       to.Ptr(false),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/updateRunbook.json: %v", err)
	}
}

func TestRunbook_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/deleteRunbook.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a runbook"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewRunbookClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/deleteRunbook.json: %v", err)
	}
}

func TestRunbook_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/listRunbooksByAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List runbooks by automation account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewRunbookClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"ContoseAutomationAccount",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/listRunbooksByAutomationAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.RunbookListResult{
			Value: []*armautomation.Runbook{
				{
					Name:     to.Ptr("ASR-AddPublicIp"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Runbooks"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/runbooks/ASR-AddPublicIp"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.RunbookProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:32:25.78+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:32:25.81+00:00"); return t }()),
						LogActivityTrace: to.Ptr[int32](1),
						LogProgress:      to.Ptr(true),
						LogVerbose:       to.Ptr(true),
						RunbookType:      to.Ptr(armautomation.RunbookTypeEnumPowerShell),
						State:            to.Ptr(armautomation.RunbookStatePublished),
					},
				},
				{
					Name:     to.Ptr("AutoExport"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Runbooks"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/runbooks/AutoExport"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.RunbookProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:32:27.327+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:32:27.327+00:00"); return t }()),
						LogActivityTrace: to.Ptr[int32](1),
						LogProgress:      to.Ptr(true),
						LogVerbose:       to.Ptr(true),
						RunbookType:      to.Ptr(armautomation.RunbookTypeEnumPowerShell),
						State:            to.Ptr(armautomation.RunbookStatePublished),
					},
				},
				{
					Name:     to.Ptr("Get-AzureVMTutorial"),
					Type:     to.Ptr("Microsoft.Automation/AutomationAccounts/Runbooks"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/runbooks/Get-AzureVMTutorial"),
					Location: to.Ptr("East US 2"),
					Properties: &armautomation.RunbookProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:32:23.75+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-28T21:32:23.75+00:00"); return t }()),
						LogActivityTrace: to.Ptr[int32](1),
						LogProgress:      to.Ptr(true),
						LogVerbose:       to.Ptr(false),
						RunbookType:      to.Ptr(armautomation.RunbookTypeEnumPowerShellWorkflow),
						State:            to.Ptr(armautomation.RunbookStatePublished),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RunbookListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RunbookListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/listRunbooksByAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestJobStreams_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getTestJobStream.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get test job stream"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewTestJobStreamsClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.Get(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		"851b2101-686f-40e2-8a4b-5b8df08afbd1_00636535684910693884_00000000000000000001",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getTestJobStream.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.JobStream{
			ID: to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourcegroups/mygroup/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/runbooks/foo/draft/testJob/streams/851b2101-686f-40e2-8a4b-5b8df08afbd1_00636535684910693884_00000000000000000001"),
			Properties: &armautomation.JobStreamProperties{
				JobStreamID: to.Ptr("851b2101-686f-40e2-8a4b-5b8df08afbd1:00636535684910693884:00000000000000000001"),
				StreamText:  to.Ptr(""),
				StreamType:  to.Ptr(armautomation.JobStreamTypeOutput),
				Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-07T02:48:11.0693884+00:00"); return t }()),
				Value:       map[string]interface{}{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JobStream) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobStream)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getTestJobStream.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestJobStreams_ListByTestJob(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/listTestJobStreamsByJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List job streams by job name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewTestJobStreamsClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	pager := client.ListByTestJob("mygroup",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		&armautomation.TestJobStreamsClientListByTestJobOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/listTestJobStreamsByJob.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.JobStreamListResult{
			Value: []*armautomation.JobStream{
				{
					ID: to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourcegroups/mygroup/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/jobs/jobName/streams/24456a8a-2857-4af6-932c-3455f38bd05e_00636535675981232703_00000000000000000001"),
					Properties: &armautomation.JobStreamProperties{
						JobStreamID: to.Ptr("24456a8a-2857-4af6-932c-3455f38bd05e_00636535675981232703_00000000000000000001"),
						StreamType:  to.Ptr(armautomation.JobStreamTypeOutput),
						Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-07T02:33:18.1232703+00:00"); return t }()),
					},
				},
				{
					ID: to.Ptr("/subscriptions/51766542-3ed7-4a72-a187-0c8ab644ddab/resourcegroups/mygroup/providers/Microsoft.Automation/automationAccounts/ContoseAutomationAccount/jobs/jobName/streams/24456a8a-2857-4af6-932c-3455f38bd05e_00636535675984691350_00000000000000000002"),
					Properties: &armautomation.JobStreamProperties{
						JobStreamID: to.Ptr("24456a8a-2857-4af6-932c-3455f38bd05e_00636535675984691350_00000000000000000002"),
						StreamType:  to.Ptr(armautomation.JobStreamTypeOutput),
						Time:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-07T02:33:18.469135+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobStreamListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobStreamListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/listTestJobStreamsByJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestJob_Create(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/createTestJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create test job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewTestJobClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	_, err := client.Create(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		armautomation.TestJobCreateParameters{
			Parameters: map[string]*string{
				"key01": to.Ptr("value01"),
				"key02": to.Ptr("value02"),
			},
			RunOn: to.Ptr(""),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/createTestJob.json: %v", err)
	}
}

func TestTestJob_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getTestJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get test job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewTestJobClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	res, err := client.Get(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getTestJob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.TestJob{
			CreationTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-09T05:52:00.9344172+00:00"); return t }()),
			EndTime:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-09T05:55:16.7827254+00:00"); return t }()),
			LastModifiedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-09T05:55:16.7827254+00:00"); return t }()),
			LastStatusModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-09T05:55:16.7827254+00:00"); return t }()),
			Parameters:             map[string]*string{},
			StartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-09T05:55:10.8344743+00:00"); return t }()),
			Status:                 to.Ptr("Completed"),
			StatusDetails:          to.Ptr("None"),
		}
		if !reflect.DeepEqual(exampleRes, res.TestJob) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TestJob)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/getTestJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTestJob_Resume(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/resumeTestJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resume test job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewTestJobClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	_, err := client.Resume(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/resumeTestJob.json: %v", err)
	}
}

func TestTestJob_Stop(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/stopTestJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop test job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewTestJobClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	_, err := client.Stop(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/stopTestJob.json: %v", err)
	}
}

func TestTestJob_Suspend(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/suspendTestJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Suspend test job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewTestJobClient("51766542-3ed7-4a72-a187-0c8ab644ddab", cred, &options)
	_, err := client.Suspend(ctx,
		"mygroup",
		"ContoseAutomationAccount",
		"Get-AzureVMTutorial",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2018-06-30/examples/suspendTestJob.json: %v", err)
	}
}

func TestWebhook_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/deleteWebhook.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete webhook"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewWebhookClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount33",
		"TestWebhook",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/deleteWebhook.json: %v", err)
	}
}

func TestWebhook_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/getWebhook.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get webhook"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewWebhookClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myAutomationAccount33",
		"TestWebhook",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/getWebhook.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Webhook{
			Name: to.Ptr("TestWebhook"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/webhooks/TestWebhook"),
			Properties: &armautomation.WebhookProperties{
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T22:18:14.6651862+00:00"); return t }()),
				ExpiryTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-29T22:18:13.7002872+00:00"); return t }()),
				IsEnabled:        to.Ptr(true),
				LastModifiedBy:   to.Ptr(""),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T22:18:14.6651862+00:00"); return t }()),
				Runbook: &armautomation.RunbookAssociationProperty{
					Name: to.Ptr("TestRunbook"),
				},
				URI: to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Webhook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Webhook)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/getWebhook.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebhook_CreateOrUpdate(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/createOrUpdateWebhook.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update webhook"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewWebhookClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg",
		"myAutomationAccount33",
		"TestWebhook",
		armautomation.WebhookCreateOrUpdateParameters{
			Name: to.Ptr("TestWebhook"),
			Properties: &armautomation.WebhookCreateOrUpdateProperties{
				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-29T22:18:13.7002872Z"); return t }()),
				IsEnabled:  to.Ptr(true),
				Runbook: &armautomation.RunbookAssociationProperty{
					Name: to.Ptr("TestRunbook"),
				},
				URI: to.Ptr("<uri>"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/createOrUpdateWebhook.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Webhook{
			Name: to.Ptr("TestWebhook"),
			Type: to.Ptr("Microsoft.Automation/AutomationAccounts/Webhooks"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/webhooks/TestWebhook"),
			Properties: &armautomation.WebhookProperties{
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T22:18:14.6651862+00:00"); return t }()),
				ExpiryTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-29T22:18:13.7002872+00:00"); return t }()),
				IsEnabled:        to.Ptr(true),
				LastModifiedBy:   to.Ptr(""),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T22:18:14.6651862+00:00"); return t }()),
				Runbook: &armautomation.RunbookAssociationProperty{
					Name: to.Ptr("TestRunbook"),
				},
				URI: to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Webhook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Webhook)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/createOrUpdateWebhook.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebhook_Update(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/updateWebhook.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update webhook"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewWebhookClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg",
		"myAutomationAccount33",
		"TestWebhook",
		armautomation.WebhookUpdateParameters{
			Name: to.Ptr("TestWebhook"),
			Properties: &armautomation.WebhookUpdateProperties{
				Description: to.Ptr("updated webhook"),
				IsEnabled:   to.Ptr(false),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/updateWebhook.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.Webhook{
			Name: to.Ptr("TestWebhook"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/webhooks/TestWebhook"),
			Properties: &armautomation.WebhookProperties{
				CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-30T21:52:01.272378+00:00"); return t }()),
				ExpiryTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-30T23:03:14.5752078+00:00"); return t }()),
				IsEnabled:        to.Ptr(false),
				LastModifiedBy:   to.Ptr(""),
				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-30T23:03:14.9069441+00:00"); return t }()),
				Runbook: &armautomation.RunbookAssociationProperty{
					Name: to.Ptr("TestRunbook"),
				},
				URI: to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Webhook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Webhook)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/updateWebhook.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebhook_ListByAutomationAccount(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/listWebhooksByAutomationAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List webhooks by Automation Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewWebhookClient("subid", cred, &options)
	pager := client.ListByAutomationAccount("rg",
		"myAutomationAccount33",
		&armautomation.WebhookClientListByAutomationAccountOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/listWebhooksByAutomationAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.WebhookListResult{
			Value: []*armautomation.Webhook{
				{
					Name: to.Ptr("TestWebhook"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/webhooks/TestWebhook"),
					Properties: &armautomation.WebhookProperties{
						CreationTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T22:18:14.6651862+00:00"); return t }()),
						ExpiryTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-29T22:18:13.7002872+00:00"); return t }()),
						IsEnabled:        to.Ptr(true),
						LastModifiedBy:   to.Ptr(""),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-29T22:18:14.6651862+00:00"); return t }()),
						Runbook: &armautomation.RunbookAssociationProperty{
							Name: to.Ptr("TestRunbook"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WebhookListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WebhookListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/listWebhooksByAutomationAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridRunbookWorkers_Delete(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/deleteHybridRunbookWorker.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a V2 hybrid runbook worker"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewHybridRunbookWorkersClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"myAutomationAccount20",
		"myGroup",
		"c010ad12-ef14-4a2a-aa9e-ef22c4745ddd",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/deleteHybridRunbookWorker.json: %v", err)
	}
}

func TestHybridRunbookWorkers_Get(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getHybridRunbookWorker.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a V2 hybrid runbook worker"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewHybridRunbookWorkersClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"testaccount",
		"TestHybridGroup",
		"c010ad12-ef14-4a2a-aa9e-ef22c4745ddd",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getHybridRunbookWorker.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.HybridRunbookWorker{
			Name: to.Ptr("c010ad12-ef14-4a2a-aa9e-ef22c4745ddd"),
			Type: to.Ptr("Microsoft.Automation/AutomationAccounts/HybridRunbookWorkerGroups/HybridRunbookWorkers"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/testaccount/hybridRunbookWorkerGroups/TestHybridGroup/hybridRunbookWorkers/c010ad12-ef14-4a2a-aa9e-ef22c4745ddd"),
			Properties: &armautomation.HybridRunbookWorkerProperties{
				IP:                 to.Ptr("10.0.0.0"),
				LastSeenDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				RegisteredDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				VMResourceID:       to.Ptr("/subscriptions/vmsubid/resourceGroups/vmrg/providers/Microsoft.Compute/virtualMachines/vmname"),
				WorkerName:         to.Ptr("vmname"),
				WorkerType:         to.Ptr(armautomation.WorkerTypeHybridV2),
			},
			SystemData: &armautomation.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				CreatedBy:          to.Ptr("foo@contoso.com"),
				CreatedByType:      to.Ptr(armautomation.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("foo@contoso.com"),
				LastModifiedByType: to.Ptr(armautomation.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HybridRunbookWorker) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HybridRunbookWorker)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/getHybridRunbookWorker.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridRunbookWorkers_Create(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/putHybridRunbookWorker.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a V2 hybrid runbook worker"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewHybridRunbookWorkersClient("subid", cred, &options)
	res, err := client.Create(ctx,
		"rg",
		"testaccount",
		"TestHybridGroup",
		"c010ad12-ef14-4a2a-aa9e-ef22c4745ddd",
		armautomation.HybridRunbookWorkerCreateParameters{
			Properties: &armautomation.HybridRunbookWorkerCreateOrUpdateParameters{
				VMResourceID: to.Ptr("/subscriptions/vmsubid/resourceGroups/vmrg/providers/Microsoft.Compute/virtualMachines/vmname"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/putHybridRunbookWorker.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomation.HybridRunbookWorker{
			Name: to.Ptr("c010ad12-ef14-4a2a-aa9e-ef22c4745ddd"),
			Type: to.Ptr("Microsoft.Automation/AutomationAccounts/HybridRunbookWorkerGroups/HybridRunbookWorkers"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/testaccount/hybridRunbookWorkerGroups/TestHybridGroup/hybridRunbookWorkers/c010ad12-ef14-4a2a-aa9e-ef22c4745ddd"),
			Properties: &armautomation.HybridRunbookWorkerProperties{
				IP:                 to.Ptr("10.0.0.0"),
				LastSeenDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				RegisteredDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				VMResourceID:       to.Ptr("/subscriptions/vmsubid/resourceGroups/vmrg/providers/Microsoft.Compute/virtualMachines/vmname"),
				WorkerName:         to.Ptr("vmname"),
				WorkerType:         to.Ptr(armautomation.WorkerTypeHybridV2),
			},
			SystemData: &armautomation.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				CreatedBy:          to.Ptr("foo@contoso.com"),
				CreatedByType:      to.Ptr(armautomation.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("foo@contoso.com"),
				LastModifiedByType: to.Ptr(armautomation.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HybridRunbookWorker) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HybridRunbookWorker)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/putHybridRunbookWorker.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridRunbookWorkers_Move(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/moveHybridRunbookWorker.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Move a V2 hybrid worker to a different group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewHybridRunbookWorkersClient("subid", cred, &options)
	_, err := client.Move(ctx,
		"rg",
		"testaccount",
		"TestHybridGroup",
		"c010ad12-ef14-4a2a-aa9e-ef22c4745ddd",
		armautomation.HybridRunbookWorkerMoveParameters{
			HybridRunbookWorkerGroupName: to.Ptr("TestHybridGroup2"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/moveHybridRunbookWorker.json: %v", err)
	}
}

func TestHybridRunbookWorkers_ListByHybridRunbookWorkerGroup(t *testing.T) {
	// From example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listHybridRunbookWorker.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List hybrid workers by hybrid runbook worker group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomation.NewHybridRunbookWorkersClient("subid", cred, &options)
	pager := client.ListByHybridRunbookWorkerGroup("rg",
		"testaccount",
		"TestHybridGroup",
		&armautomation.HybridRunbookWorkersClientListByHybridRunbookWorkerGroupOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listHybridRunbookWorker.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomation.HybridRunbookWorkersListResult{
			Value: []*armautomation.HybridRunbookWorker{
				{
					Name: to.Ptr("c010ad12-ef14-4a2a-aa9e-ef22c4745ddd"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/HybridRunbookWorkerGroups/HybridRunbookWorkers"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/testaccount/hybridRunbookWorkerGroups/TestHybridGroup/hybridRunbookWorkers/c010ad12-ef14-4a2a-aa9e-ef22c4745ddd"),
					Properties: &armautomation.HybridRunbookWorkerProperties{
						IP:                 to.Ptr("10.0.0.0"),
						LastSeenDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						RegisteredDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						VMResourceID:       to.Ptr("/subscriptions/vmsubid/resourceGroups/vmrg/providers/Microsoft.Compute/virtualMachines/vmname"),
						WorkerName:         to.Ptr("vmname"),
						WorkerType:         to.Ptr(armautomation.WorkerTypeHybridV2),
					},
					SystemData: &armautomation.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						CreatedBy:          to.Ptr("foo@contoso.com"),
						CreatedByType:      to.Ptr(armautomation.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("foo@contoso.com"),
						LastModifiedByType: to.Ptr(armautomation.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("e18fe971-75b1-4351-987f-6fe3604bc721"),
					Type: to.Ptr("Microsoft.Automation/AutomationAccounts/HybridRunbookWorkerGroups/HybridRunbookWorkers"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/testaccount/hybridRunbookWorkerGroups/TestHybridGroup/hybridRunbookWorkers/e18fe971-75b1-4351-987f-6fe3604bc721"),
					Properties: &armautomation.HybridRunbookWorkerProperties{
						IP:                 to.Ptr("10.0.0.1"),
						LastSeenDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-25T16:30:55+00:00"); return t }()),
						RegisteredDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-25T16:30:55+00:00"); return t }()),
						VMResourceID:       to.Ptr(""),
						WorkerName:         to.Ptr("myworker"),
						WorkerType:         to.Ptr(armautomation.WorkerTypeHybridV1),
					},
					SystemData: &armautomation.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						CreatedBy:          to.Ptr("foo@contoso.com"),
						CreatedByType:      to.Ptr(armautomation.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("foo@contoso.com"),
						LastModifiedByType: to.Ptr(armautomation.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HybridRunbookWorkersListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HybridRunbookWorkersListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automation/resource-manager/Microsoft.Automation/stable/2021-06-22/examples/listHybridRunbookWorker.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
