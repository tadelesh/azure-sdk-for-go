//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrate

import (
	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// AssessedDisk - A disk assessed for an assessment.
type AssessedDisk struct {
	// READ-ONLY; User friendly name of the assessed disk.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; Gigabytes of storage provided by the recommended Azure disk size.
	GigabytesForRecommendedDiskSize *int32 `json:"gigabytesForRecommendedDiskSize,omitempty" azure:"ro"`

	// READ-ONLY; Gigabytes of storage provisioned for this disk.
	GigabytesProvisioned *float64 `json:"gigabytesProvisioned,omitempty" azure:"ro"`

	// READ-ONLY; Disk throughput in MegaBytes per second.
	MegabytesPerSecondOfRead *float64 `json:"megabytesPerSecondOfRead,omitempty" azure:"ro"`

	// READ-ONLY; Disk throughput in MegaBytes per second.
	MegabytesPerSecondOfWrite *float64 `json:"megabytesPerSecondOfWrite,omitempty" azure:"ro"`

	// READ-ONLY; Estimated aggregate storage cost for a 31-day month for this disk.
	MonthlyStorageCost *float64 `json:"monthlyStorageCost,omitempty" azure:"ro"`

	// READ-ONLY; Name of the assessed disk.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Number of read operations per second for the disk.
	NumberOfReadOperationsPerSecond *float64 `json:"numberOfReadOperationsPerSecond,omitempty" azure:"ro"`

	// READ-ONLY; Number of read and write operations per second for the disk.
	NumberOfWriteOperationsPerSecond *float64 `json:"numberOfWriteOperationsPerSecond,omitempty" azure:"ro"`

	// READ-ONLY; Recommended Azure size for the disk, given utilization data and preferences set on Assessment.
	RecommendedDiskSize *AzureDiskSize `json:"recommendedDiskSize,omitempty" azure:"ro"`

	// READ-ONLY; Storage type selected for this disk.
	RecommendedDiskType *AzureDiskType `json:"recommendedDiskType,omitempty" azure:"ro"`

	// READ-ONLY; Whether this disk is suitable for Azure.
	Suitability *CloudSuitability `json:"suitability,omitempty" azure:"ro"`

	// READ-ONLY; If disk is suitable to be migrate but some conditions/checks were not considered while calculating suitability, this explains the details.
	SuitabilityDetail *AzureDiskSuitabilityDetail `json:"suitabilityDetail,omitempty" azure:"ro"`

	// READ-ONLY; If disk is not suitable to be migrated, this explains the reasons and mitigation steps.
	SuitabilityExplanation *AzureDiskSuitabilityExplanation `json:"suitabilityExplanation,omitempty" azure:"ro"`
}

// AssessedMachine - A machine evaluated as part of an assessment.
type AssessedMachine struct {
	// For optimistic concurrency control.
	ETag *string `json:"eTag,omitempty"`

	// Properties of an assessed machine.
	Properties *AssessedMachineProperties `json:"properties,omitempty"`

	// READ-ONLY; Path reference to this assessed machine.
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of the machine.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Type of the object = [Microsoft.Migrate/assessmentProjects/groups/assessments/assessedMachines].
	Type *string `json:"type,omitempty" azure:"ro"`
}

// AssessedMachineProperties - Properties of an assessed machine.
type AssessedMachineProperties struct {
	// READ-ONLY; Boot type of the machine.
	BootType *MachineBootType `json:"bootType,omitempty" azure:"ro"`

	// READ-ONLY; Confidence rating of assessed machine.
	ConfidenceRatingInPercentage *float64 `json:"confidenceRatingInPercentage,omitempty" azure:"ro"`

	// READ-ONLY; Time when this machine was created. Date-Time represented in ISO-8601 format.
	CreatedTimestamp *time.Time `json:"createdTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; ARM ID of the discovered machine.
	DatacenterMachineArmID *string `json:"datacenterMachineArmId,omitempty" azure:"ro"`

	// READ-ONLY; ARM ID of the discovered datacenter.
	DatacenterManagementServerArmID *string `json:"datacenterManagementServerArmId,omitempty" azure:"ro"`

	// READ-ONLY; Name of the server hosting the datacenter management solution.
	DatacenterManagementServerName *string `json:"datacenterManagementServerName,omitempty" azure:"ro"`

	// READ-ONLY; Description of the machine
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object.
	Disks map[string]*AssessedDisk `json:"disks,omitempty" azure:"ro"`

	// READ-ONLY; User readable name of the machine as defined by the user in their private datacenter.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; Memory in Megabytes.
	MegabytesOfMemory *float64 `json:"megabytesOfMemory,omitempty" azure:"ro"`

	// READ-ONLY; Megabytes of memory in the Recommended Azure VM Size.
	MegabytesOfMemoryForRecommendedSize *float64 `json:"megabytesOfMemoryForRecommendedSize,omitempty" azure:"ro"`

	// READ-ONLY; Monthly network cost estimate for the network adapters that are attached to this machine as a group, for a 31-day month.
	MonthlyBandwidthCost *float64 `json:"monthlyBandwidthCost,omitempty" azure:"ro"`

	// READ-ONLY; Compute Cost for a 31-day month, if the machine is migrated to Azure with the Recommended Size.
	MonthlyComputeCostForRecommendedSize *float64 `json:"monthlyComputeCostForRecommendedSize,omitempty" azure:"ro"`

	// READ-ONLY; Monthly premium storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.
	MonthlyPremiumStorageCost *float64 `json:"monthlyPremiumStorageCost,omitempty" azure:"ro"`

	// READ-ONLY; Monthly standard SSD storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.
	MonthlyStandardSSDStorageCost *float64 `json:"monthlyStandardSSDStorageCost,omitempty" azure:"ro"`

	// READ-ONLY; Monthly storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.
	MonthlyStorageCost *float64 `json:"monthlyStorageCost,omitempty" azure:"ro"`

	// READ-ONLY; Dictionary of network adapters attached to the machine. Key is name of the adapter. Value is a network adapter object.
	NetworkAdapters map[string]*AssessedNetworkAdapter `json:"networkAdapters,omitempty" azure:"ro"`

	// READ-ONLY; Processor count.
	NumberOfCores *int32 `json:"numberOfCores,omitempty" azure:"ro"`

	// READ-ONLY; Number of CPU cores in the Recommended Azure VM Size.
	NumberOfCoresForRecommendedSize *int32 `json:"numberOfCoresForRecommendedSize,omitempty" azure:"ro"`

	// READ-ONLY; Operating System name of the machine.
	OperatingSystemName *string `json:"operatingSystemName,omitempty" azure:"ro"`

	// READ-ONLY; Operating System type of the machine.
	OperatingSystemType *string `json:"operatingSystemType,omitempty" azure:"ro"`

	// READ-ONLY; Operating System version of the machine.
	OperatingSystemVersion *string `json:"operatingSystemVersion,omitempty" azure:"ro"`

	// READ-ONLY; Utilization percentage of the processor core as observed in the private data center, in the Time Range selected on Assessment, reported as
	// the Percentile value based on the percentile number selected
	// in assessment.
	PercentageCoresUtilization *float64 `json:"percentageCoresUtilization,omitempty" azure:"ro"`

	// READ-ONLY; Utilization percentage of the memory as observed in the private data center, in the Time Range selected on Assessment, reported as the Percentile
	// value based on the percentile number selected in
	// assessment.
	PercentageMemoryUtilization *float64 `json:"percentageMemoryUtilization,omitempty" azure:"ro"`

	// READ-ONLY; Recommended Azure size for this machine.
	RecommendedSize *AzureVMSize `json:"recommendedSize,omitempty" azure:"ro"`

	// READ-ONLY; Whether machine is suitable for migration to Azure.
	Suitability *CloudSuitability `json:"suitability,omitempty" azure:"ro"`

	// READ-ONLY; If machine is not suitable for cloud, this explains the reasons.
	SuitabilityDetail *AzureVMSuitabilityDetail `json:"suitabilityDetail,omitempty" azure:"ro"`

	// READ-ONLY; If machine is not ready to be migrated, this explains the reasons and mitigation steps.
	SuitabilityExplanation *AzureVMSuitabilityExplanation `json:"suitabilityExplanation,omitempty" azure:"ro"`

	// READ-ONLY; Time when this machine was last updated. Date-Time represented in ISO-8601 format.
	UpdatedTimestamp *time.Time `json:"updatedTimestamp,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AssessedMachineProperties.
func (a AssessedMachineProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bootType", a.BootType)
	populate(objectMap, "confidenceRatingInPercentage", a.ConfidenceRatingInPercentage)
	populate(objectMap, "createdTimestamp", (*timeRFC3339)(a.CreatedTimestamp))
	populate(objectMap, "datacenterMachineArmId", a.DatacenterMachineArmID)
	populate(objectMap, "datacenterManagementServerArmId", a.DatacenterManagementServerArmID)
	populate(objectMap, "datacenterManagementServerName", a.DatacenterManagementServerName)
	populate(objectMap, "description", a.Description)
	populate(objectMap, "disks", a.Disks)
	populate(objectMap, "displayName", a.DisplayName)
	populate(objectMap, "megabytesOfMemory", a.MegabytesOfMemory)
	populate(objectMap, "megabytesOfMemoryForRecommendedSize", a.MegabytesOfMemoryForRecommendedSize)
	populate(objectMap, "monthlyBandwidthCost", a.MonthlyBandwidthCost)
	populate(objectMap, "monthlyComputeCostForRecommendedSize", a.MonthlyComputeCostForRecommendedSize)
	populate(objectMap, "monthlyPremiumStorageCost", a.MonthlyPremiumStorageCost)
	populate(objectMap, "monthlyStandardSSDStorageCost", a.MonthlyStandardSSDStorageCost)
	populate(objectMap, "monthlyStorageCost", a.MonthlyStorageCost)
	populate(objectMap, "networkAdapters", a.NetworkAdapters)
	populate(objectMap, "numberOfCores", a.NumberOfCores)
	populate(objectMap, "numberOfCoresForRecommendedSize", a.NumberOfCoresForRecommendedSize)
	populate(objectMap, "operatingSystemName", a.OperatingSystemName)
	populate(objectMap, "operatingSystemType", a.OperatingSystemType)
	populate(objectMap, "operatingSystemVersion", a.OperatingSystemVersion)
	populate(objectMap, "percentageCoresUtilization", a.PercentageCoresUtilization)
	populate(objectMap, "percentageMemoryUtilization", a.PercentageMemoryUtilization)
	populate(objectMap, "recommendedSize", a.RecommendedSize)
	populate(objectMap, "suitability", a.Suitability)
	populate(objectMap, "suitabilityDetail", a.SuitabilityDetail)
	populate(objectMap, "suitabilityExplanation", a.SuitabilityExplanation)
	populate(objectMap, "updatedTimestamp", (*timeRFC3339)(a.UpdatedTimestamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AssessedMachineProperties.
func (a *AssessedMachineProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "bootType":
			err = unpopulate(val, &a.BootType)
			delete(rawMsg, key)
		case "confidenceRatingInPercentage":
			err = unpopulate(val, &a.ConfidenceRatingInPercentage)
			delete(rawMsg, key)
		case "createdTimestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.CreatedTimestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "datacenterMachineArmId":
			err = unpopulate(val, &a.DatacenterMachineArmID)
			delete(rawMsg, key)
		case "datacenterManagementServerArmId":
			err = unpopulate(val, &a.DatacenterManagementServerArmID)
			delete(rawMsg, key)
		case "datacenterManagementServerName":
			err = unpopulate(val, &a.DatacenterManagementServerName)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &a.Description)
			delete(rawMsg, key)
		case "disks":
			err = unpopulate(val, &a.Disks)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, &a.DisplayName)
			delete(rawMsg, key)
		case "megabytesOfMemory":
			err = unpopulate(val, &a.MegabytesOfMemory)
			delete(rawMsg, key)
		case "megabytesOfMemoryForRecommendedSize":
			err = unpopulate(val, &a.MegabytesOfMemoryForRecommendedSize)
			delete(rawMsg, key)
		case "monthlyBandwidthCost":
			err = unpopulate(val, &a.MonthlyBandwidthCost)
			delete(rawMsg, key)
		case "monthlyComputeCostForRecommendedSize":
			err = unpopulate(val, &a.MonthlyComputeCostForRecommendedSize)
			delete(rawMsg, key)
		case "monthlyPremiumStorageCost":
			err = unpopulate(val, &a.MonthlyPremiumStorageCost)
			delete(rawMsg, key)
		case "monthlyStandardSSDStorageCost":
			err = unpopulate(val, &a.MonthlyStandardSSDStorageCost)
			delete(rawMsg, key)
		case "monthlyStorageCost":
			err = unpopulate(val, &a.MonthlyStorageCost)
			delete(rawMsg, key)
		case "networkAdapters":
			err = unpopulate(val, &a.NetworkAdapters)
			delete(rawMsg, key)
		case "numberOfCores":
			err = unpopulate(val, &a.NumberOfCores)
			delete(rawMsg, key)
		case "numberOfCoresForRecommendedSize":
			err = unpopulate(val, &a.NumberOfCoresForRecommendedSize)
			delete(rawMsg, key)
		case "operatingSystemName":
			err = unpopulate(val, &a.OperatingSystemName)
			delete(rawMsg, key)
		case "operatingSystemType":
			err = unpopulate(val, &a.OperatingSystemType)
			delete(rawMsg, key)
		case "operatingSystemVersion":
			err = unpopulate(val, &a.OperatingSystemVersion)
			delete(rawMsg, key)
		case "percentageCoresUtilization":
			err = unpopulate(val, &a.PercentageCoresUtilization)
			delete(rawMsg, key)
		case "percentageMemoryUtilization":
			err = unpopulate(val, &a.PercentageMemoryUtilization)
			delete(rawMsg, key)
		case "recommendedSize":
			err = unpopulate(val, &a.RecommendedSize)
			delete(rawMsg, key)
		case "suitability":
			err = unpopulate(val, &a.Suitability)
			delete(rawMsg, key)
		case "suitabilityDetail":
			err = unpopulate(val, &a.SuitabilityDetail)
			delete(rawMsg, key)
		case "suitabilityExplanation":
			err = unpopulate(val, &a.SuitabilityExplanation)
			delete(rawMsg, key)
		case "updatedTimestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.UpdatedTimestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AssessedMachineResultList - List of assessed machines.
type AssessedMachineResultList struct {
	NextLink *string `json:"nextLink,omitempty"`

	// List of assessed machines.
	Value []*AssessedMachine `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AssessedMachineResultList.
func (a AssessedMachineResultList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AssessedMachinesGetOptions contains the optional parameters for the AssessedMachines.Get method.
type AssessedMachinesGetOptions struct {
	// placeholder for future optional parameters
}

// AssessedMachinesListByAssessmentOptions contains the optional parameters for the AssessedMachines.ListByAssessment method.
type AssessedMachinesListByAssessmentOptions struct {
	// placeholder for future optional parameters
}

// AssessedNetworkAdapter - A network adapter assessed for an assessment.
type AssessedNetworkAdapter struct {
	// Gigabytes transmitted through this adapter each month.
	NetGigabytesTransmittedPerMonth *float64 `json:"netGigabytesTransmittedPerMonth,omitempty"`

	// READ-ONLY; User friendly name of the assessed network adapter.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; List of IP Addresses on the network adapter.
	IPAddresses []*string `json:"ipAddresses,omitempty" azure:"ro"`

	// READ-ONLY; MAC Address of the network adapter.
	MacAddress *string `json:"macAddress,omitempty" azure:"ro"`

	// READ-ONLY; Adapter throughput for incoming traffic in MegaBytes per second.
	MegabytesPerSecondReceived *float64 `json:"megabytesPerSecondReceived,omitempty" azure:"ro"`

	// READ-ONLY; Adapter throughput for outgoing traffic in MegaBytes per second.
	MegabytesPerSecondTransmitted *float64 `json:"megabytesPerSecondTransmitted,omitempty" azure:"ro"`

	// READ-ONLY; Monthly cost estimate for network bandwidth used by this network adapter.
	MonthlyBandwidthCosts *float64 `json:"monthlyBandwidthCosts,omitempty" azure:"ro"`

	// READ-ONLY; Whether this adapter is suitable for Azure.
	Suitability *CloudSuitability `json:"suitability,omitempty" azure:"ro"`

	// READ-ONLY; If network adapter is not suitable for cloud, this explains the reasons.
	SuitabilityDetail *AzureNetworkAdapterSuitabilityDetail `json:"suitabilityDetail,omitempty" azure:"ro"`

	// READ-ONLY; If network adapter is suitable, this explains the reasons and mitigation steps.
	SuitabilityExplanation *AzureNetworkAdapterSuitabilityExplanation `json:"suitabilityExplanation,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AssessedNetworkAdapter.
func (a AssessedNetworkAdapter) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayName", a.DisplayName)
	populate(objectMap, "ipAddresses", a.IPAddresses)
	populate(objectMap, "macAddress", a.MacAddress)
	populate(objectMap, "megabytesPerSecondReceived", a.MegabytesPerSecondReceived)
	populate(objectMap, "megabytesPerSecondTransmitted", a.MegabytesPerSecondTransmitted)
	populate(objectMap, "monthlyBandwidthCosts", a.MonthlyBandwidthCosts)
	populate(objectMap, "netGigabytesTransmittedPerMonth", a.NetGigabytesTransmittedPerMonth)
	populate(objectMap, "suitability", a.Suitability)
	populate(objectMap, "suitabilityDetail", a.SuitabilityDetail)
	populate(objectMap, "suitabilityExplanation", a.SuitabilityExplanation)
	return json.Marshal(objectMap)
}

// Assessment - An assessment created for a group in the Migration project.
type Assessment struct {
	// REQUIRED; Properties of the assessment.
	Properties *AssessmentProperties `json:"properties,omitempty"`

	// For optimistic concurrency control.
	ETag *string `json:"eTag,omitempty"`

	// READ-ONLY; Path reference to this assessment.
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessment/{assessmentName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Unique name of an assessment.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Type of the object = [Microsoft.Migrate/assessmentProjects/groups/assessments].
	Type *string `json:"type,omitempty" azure:"ro"`
}

// AssessmentOptions - Assessment options.
type AssessmentOptions struct {
	// REQUIRED; Properties of the assessment options.
	Properties *AssessmentOptionsProperties `json:"properties,omitempty"`

	// READ-ONLY; Unique identifier of an assessment options.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Unique name of an assessment options.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// AssessmentOptionsProperties - Assessment options properties.
type AssessmentOptionsProperties struct {
	// READ-ONLY; List of supported currencies for reserved instances.
	ReservedInstanceSupportedCurrencies []*string `json:"reservedInstanceSupportedCurrencies,omitempty" azure:"ro"`

	// READ-ONLY; List of supported Azure regions for reserved instances.
	ReservedInstanceSupportedLocations []*string `json:"reservedInstanceSupportedLocations,omitempty" azure:"ro"`

	// READ-ONLY; List of supported Azure offer codes for reserved instances.
	ReservedInstanceSupportedOffers []*string `json:"reservedInstanceSupportedOffers,omitempty" azure:"ro"`

	// READ-ONLY; List of supported VM Families.
	ReservedInstanceVMFamilies []*string `json:"reservedInstanceVmFamilies,omitempty" azure:"ro"`

	// READ-ONLY; Dictionary of VM families grouped by vm family name describing the targeted azure locations of VM family and the category of the family.
	VMFamilies []*VMFamily `json:"vmFamilies,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AssessmentOptionsProperties.
func (a AssessmentOptionsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "reservedInstanceSupportedCurrencies", a.ReservedInstanceSupportedCurrencies)
	populate(objectMap, "reservedInstanceSupportedLocations", a.ReservedInstanceSupportedLocations)
	populate(objectMap, "reservedInstanceSupportedOffers", a.ReservedInstanceSupportedOffers)
	populate(objectMap, "reservedInstanceVmFamilies", a.ReservedInstanceVMFamilies)
	populate(objectMap, "vmFamilies", a.VMFamilies)
	return json.Marshal(objectMap)
}

// AssessmentOptionsResultList - List of API operations.
type AssessmentOptionsResultList struct {
	// List of operations.
	Value []*AssessmentOptions `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AssessmentOptionsResultList.
func (a AssessmentOptionsResultList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AssessmentProperties - Properties of an assessment.
type AssessmentProperties struct {
	// REQUIRED; Storage type selected for this disk.
	AzureDiskType *AzureDiskType `json:"azureDiskType,omitempty"`

	// REQUIRED; AHUB discount on windows virtual machines.
	AzureHybridUseBenefit *AzureHybridUseBenefit `json:"azureHybridUseBenefit,omitempty"`

	// REQUIRED; Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
	AzureLocation *AzureLocation `json:"azureLocation,omitempty"`

	// REQUIRED; Offer code according to which cost estimation is done.
	AzureOfferCode *AzureOfferCode `json:"azureOfferCode,omitempty"`

	// REQUIRED; Pricing tier for Size evaluation.
	AzurePricingTier *AzurePricingTier `json:"azurePricingTier,omitempty"`

	// REQUIRED; Storage Redundancy type offered by Azure.
	AzureStorageRedundancy *AzureStorageRedundancy `json:"azureStorageRedundancy,omitempty"`

	// REQUIRED; List of azure VM families.
	AzureVMFamilies []*AzureVMFamily `json:"azureVmFamilies,omitempty"`

	// REQUIRED; Currency to report prices in.
	Currency *Currency `json:"currency,omitempty"`

	// REQUIRED; Custom discount percentage to be applied on final costs. Can be in the range [0, 100].
	DiscountPercentage *float64 `json:"discountPercentage,omitempty"`

	// REQUIRED; Percentile of performance data used to recommend Azure size.
	Percentile *Percentile `json:"percentile,omitempty"`

	// REQUIRED; Azure reserved instance.
	ReservedInstance *ReservedInstance `json:"reservedInstance,omitempty"`

	// REQUIRED; Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value =
	// 1.9, Default = 1.3.
	ScalingFactor *float64 `json:"scalingFactor,omitempty"`

	// REQUIRED; Assessment sizing criterion.
	SizingCriterion *AssessmentSizingCriterion `json:"sizingCriterion,omitempty"`

	// REQUIRED; User configurable setting that describes the status of the assessment.
	Stage *AssessmentStage `json:"stage,omitempty"`

	// REQUIRED; Time range of performance data used to recommend a size.
	TimeRange *TimeRange `json:"timeRange,omitempty"`

	// REQUIRED; Specify the duration for which the VMs are up in the on-premises environment.
	VMUptime *VMUptime `json:"vmUptime,omitempty"`

	// READ-ONLY; Confidence rating percentage for assessment. Can be in the range [0, 100].
	ConfidenceRatingInPercentage *float64 `json:"confidenceRatingInPercentage,omitempty" azure:"ro"`

	// READ-ONLY; Time when this project was created. Date-Time represented in ISO-8601 format.
	CreatedTimestamp *time.Time `json:"createdTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Enterprise agreement subscription arm id.
	EaSubscriptionID *string `json:"eaSubscriptionId,omitempty" azure:"ro"`

	// READ-ONLY; Monthly network cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
	MonthlyBandwidthCost *float64 `json:"monthlyBandwidthCost,omitempty" azure:"ro"`

	// READ-ONLY; Monthly compute cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
	MonthlyComputeCost *float64 `json:"monthlyComputeCost,omitempty" azure:"ro"`

	// READ-ONLY; Monthly premium storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
	MonthlyPremiumStorageCost *float64 `json:"monthlyPremiumStorageCost,omitempty" azure:"ro"`

	// READ-ONLY; Monthly standard SSD storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
	MonthlyStandardSSDStorageCost *float64 `json:"monthlyStandardSSDStorageCost,omitempty" azure:"ro"`

	// READ-ONLY; Monthly storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
	MonthlyStorageCost *float64 `json:"monthlyStorageCost,omitempty" azure:"ro"`

	// READ-ONLY; Number of assessed machines part of this assessment.
	NumberOfMachines *int32 `json:"numberOfMachines,omitempty" azure:"ro"`

	// READ-ONLY; End time to consider performance data for assessment
	PerfDataEndTime *time.Time `json:"perfDataEndTime,omitempty" azure:"ro"`

	// READ-ONLY; Start time to consider performance data for assessment
	PerfDataStartTime *time.Time `json:"perfDataStartTime,omitempty" azure:"ro"`

	// READ-ONLY; Time when the Azure Prices were queried. Date-Time represented in ISO-8601 format.
	PricesTimestamp *time.Time `json:"pricesTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Whether the assessment has been created and is valid.
	Status *AssessmentStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Time when this project was last updated. Date-Time represented in ISO-8601 format.
	UpdatedTimestamp *time.Time `json:"updatedTimestamp,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AssessmentProperties.
func (a AssessmentProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "azureDiskType", a.AzureDiskType)
	populate(objectMap, "azureHybridUseBenefit", a.AzureHybridUseBenefit)
	populate(objectMap, "azureLocation", a.AzureLocation)
	populate(objectMap, "azureOfferCode", a.AzureOfferCode)
	populate(objectMap, "azurePricingTier", a.AzurePricingTier)
	populate(objectMap, "azureStorageRedundancy", a.AzureStorageRedundancy)
	populate(objectMap, "azureVmFamilies", a.AzureVMFamilies)
	populate(objectMap, "confidenceRatingInPercentage", a.ConfidenceRatingInPercentage)
	populate(objectMap, "createdTimestamp", (*timeRFC3339)(a.CreatedTimestamp))
	populate(objectMap, "currency", a.Currency)
	populate(objectMap, "discountPercentage", a.DiscountPercentage)
	populate(objectMap, "eaSubscriptionId", a.EaSubscriptionID)
	populate(objectMap, "monthlyBandwidthCost", a.MonthlyBandwidthCost)
	populate(objectMap, "monthlyComputeCost", a.MonthlyComputeCost)
	populate(objectMap, "monthlyPremiumStorageCost", a.MonthlyPremiumStorageCost)
	populate(objectMap, "monthlyStandardSSDStorageCost", a.MonthlyStandardSSDStorageCost)
	populate(objectMap, "monthlyStorageCost", a.MonthlyStorageCost)
	populate(objectMap, "numberOfMachines", a.NumberOfMachines)
	populate(objectMap, "percentile", a.Percentile)
	populate(objectMap, "perfDataEndTime", (*timeRFC3339)(a.PerfDataEndTime))
	populate(objectMap, "perfDataStartTime", (*timeRFC3339)(a.PerfDataStartTime))
	populate(objectMap, "pricesTimestamp", (*timeRFC3339)(a.PricesTimestamp))
	populate(objectMap, "reservedInstance", a.ReservedInstance)
	populate(objectMap, "scalingFactor", a.ScalingFactor)
	populate(objectMap, "sizingCriterion", a.SizingCriterion)
	populate(objectMap, "stage", a.Stage)
	populate(objectMap, "status", a.Status)
	populate(objectMap, "timeRange", a.TimeRange)
	populate(objectMap, "updatedTimestamp", (*timeRFC3339)(a.UpdatedTimestamp))
	populate(objectMap, "vmUptime", a.VMUptime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AssessmentProperties.
func (a *AssessmentProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "azureDiskType":
			err = unpopulate(val, &a.AzureDiskType)
			delete(rawMsg, key)
		case "azureHybridUseBenefit":
			err = unpopulate(val, &a.AzureHybridUseBenefit)
			delete(rawMsg, key)
		case "azureLocation":
			err = unpopulate(val, &a.AzureLocation)
			delete(rawMsg, key)
		case "azureOfferCode":
			err = unpopulate(val, &a.AzureOfferCode)
			delete(rawMsg, key)
		case "azurePricingTier":
			err = unpopulate(val, &a.AzurePricingTier)
			delete(rawMsg, key)
		case "azureStorageRedundancy":
			err = unpopulate(val, &a.AzureStorageRedundancy)
			delete(rawMsg, key)
		case "azureVmFamilies":
			err = unpopulate(val, &a.AzureVMFamilies)
			delete(rawMsg, key)
		case "confidenceRatingInPercentage":
			err = unpopulate(val, &a.ConfidenceRatingInPercentage)
			delete(rawMsg, key)
		case "createdTimestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.CreatedTimestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "currency":
			err = unpopulate(val, &a.Currency)
			delete(rawMsg, key)
		case "discountPercentage":
			err = unpopulate(val, &a.DiscountPercentage)
			delete(rawMsg, key)
		case "eaSubscriptionId":
			err = unpopulate(val, &a.EaSubscriptionID)
			delete(rawMsg, key)
		case "monthlyBandwidthCost":
			err = unpopulate(val, &a.MonthlyBandwidthCost)
			delete(rawMsg, key)
		case "monthlyComputeCost":
			err = unpopulate(val, &a.MonthlyComputeCost)
			delete(rawMsg, key)
		case "monthlyPremiumStorageCost":
			err = unpopulate(val, &a.MonthlyPremiumStorageCost)
			delete(rawMsg, key)
		case "monthlyStandardSSDStorageCost":
			err = unpopulate(val, &a.MonthlyStandardSSDStorageCost)
			delete(rawMsg, key)
		case "monthlyStorageCost":
			err = unpopulate(val, &a.MonthlyStorageCost)
			delete(rawMsg, key)
		case "numberOfMachines":
			err = unpopulate(val, &a.NumberOfMachines)
			delete(rawMsg, key)
		case "percentile":
			err = unpopulate(val, &a.Percentile)
			delete(rawMsg, key)
		case "perfDataEndTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.PerfDataEndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "perfDataStartTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.PerfDataStartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "pricesTimestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.PricesTimestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "reservedInstance":
			err = unpopulate(val, &a.ReservedInstance)
			delete(rawMsg, key)
		case "scalingFactor":
			err = unpopulate(val, &a.ScalingFactor)
			delete(rawMsg, key)
		case "sizingCriterion":
			err = unpopulate(val, &a.SizingCriterion)
			delete(rawMsg, key)
		case "stage":
			err = unpopulate(val, &a.Stage)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &a.Status)
			delete(rawMsg, key)
		case "timeRange":
			err = unpopulate(val, &a.TimeRange)
			delete(rawMsg, key)
		case "updatedTimestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.UpdatedTimestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "vmUptime":
			err = unpopulate(val, &a.VMUptime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AssessmentResultList - List of assessments.
type AssessmentResultList struct {
	// List of assessments.
	Value []*Assessment `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AssessmentResultList.
func (a AssessmentResultList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AssessmentsCreateOptions contains the optional parameters for the Assessments.Create method.
type AssessmentsCreateOptions struct {
	// New or Updated Assessment object.
	Assessment *Assessment
}

// AssessmentsDeleteOptions contains the optional parameters for the Assessments.Delete method.
type AssessmentsDeleteOptions struct {
	// placeholder for future optional parameters
}

// AssessmentsGetOptions contains the optional parameters for the Assessments.Get method.
type AssessmentsGetOptions struct {
	// placeholder for future optional parameters
}

// AssessmentsGetReportDownloadURLOptions contains the optional parameters for the Assessments.GetReportDownloadURL method.
type AssessmentsGetReportDownloadURLOptions struct {
	// placeholder for future optional parameters
}

// AssessmentsListByGroupOptions contains the optional parameters for the Assessments.ListByGroup method.
type AssessmentsListByGroupOptions struct {
	// placeholder for future optional parameters
}

// AssessmentsListByProjectOptions contains the optional parameters for the Assessments.ListByProject method.
type AssessmentsListByProjectOptions struct {
	// placeholder for future optional parameters
}

// CloudError - An error response from the Azure Migrate service.
// Implements the error and azcore.HTTPResponse interfaces.
type CloudError struct {
	raw string
	// An error response from the Azure Migrate service.
	InnerError *CloudErrorBody `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
// The contents of the error text are not contractual and subject to change.
func (e CloudError) Error() string {
	return e.raw
}

// CloudErrorBody - An error response from the Azure Migrate service.
type CloudErrorBody struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code *string `json:"code,omitempty"`

	// A list of additional details about the error.
	Details []*CloudErrorBody `json:"details,omitempty"`

	// A message describing the error, intended to be suitable for display in a user interface.
	Message *string `json:"message,omitempty"`

	// The target of the particular error. For example, the name of the property in error.
	Target *string `json:"target,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CloudErrorBody.
func (c CloudErrorBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "details", c.Details)
	populate(objectMap, "message", c.Message)
	populate(objectMap, "target", c.Target)
	return json.Marshal(objectMap)
}

type CollectorAgentProperties struct {
	SpnDetails *CollectorBodyAgentSpnProperties `json:"spnDetails,omitempty"`

	// READ-ONLY
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY
	LastHeartbeatUTC *time.Time `json:"lastHeartbeatUtc,omitempty" azure:"ro"`

	// READ-ONLY
	Version *string `json:"version,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CollectorAgentProperties.
func (c CollectorAgentProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "lastHeartbeatUtc", (*timeRFC3339)(c.LastHeartbeatUTC))
	populate(objectMap, "spnDetails", c.SpnDetails)
	populate(objectMap, "version", c.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CollectorAgentProperties.
func (c *CollectorAgentProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &c.ID)
			delete(rawMsg, key)
		case "lastHeartbeatUtc":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.LastHeartbeatUTC = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "spnDetails":
			err = unpopulate(val, &c.SpnDetails)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, &c.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

type CollectorBodyAgentSpnProperties struct {
	// Application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
	ApplicationID *string `json:"applicationId,omitempty"`

	// Intended audience for the service principal.
	Audience *string `json:"audience,omitempty"`

	// AAD Authority URL which was used to request the token for the service principal.
	Authority *string `json:"authority,omitempty"`

	// Object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
	ObjectID *string `json:"objectId,omitempty"`

	// Tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
	TenantID *string `json:"tenantId,omitempty"`
}

type CollectorProperties struct {
	AgentProperties *CollectorAgentProperties `json:"agentProperties,omitempty"`

	// The ARM id of the discovery service site.
	DiscoverySiteID *string `json:"discoverySiteId,omitempty"`

	// READ-ONLY; Time when this collector was created. Date-Time represented in ISO-8601 format.
	CreatedTimestamp *string `json:"createdTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Time when this collector was updated. Date-Time represented in ISO-8601 format.
	UpdatedTimestamp *string `json:"updatedTimestamp,omitempty" azure:"ro"`
}

// Disk - A disk discovered on a machine.
type Disk struct {
	// READ-ONLY; User friendly name of the disk.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; Gigabytes of storage provisioned for this disk.
	GigabytesAllocated *float64 `json:"gigabytesAllocated,omitempty" azure:"ro"`
}

// DownloadURL - Download URL for assessment report.
type DownloadURL struct {
	// READ-ONLY; Hyperlink to download report.
	AssessmentReportURL *string `json:"assessmentReportUrl,omitempty" azure:"ro"`

	// READ-ONLY; Expiry date of download url.
	ExpirationTime *time.Time `json:"expirationTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DownloadURL.
func (d DownloadURL) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "assessmentReportUrl", d.AssessmentReportURL)
	populate(objectMap, "expirationTime", (*timeRFC3339)(d.ExpirationTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DownloadURL.
func (d *DownloadURL) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "assessmentReportUrl":
			err = unpopulate(val, &d.AssessmentReportURL)
			delete(rawMsg, key)
		case "expirationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.ExpirationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Group - A group created in a Migration project.
type Group struct {
	// REQUIRED; Properties of the group.
	Properties *GroupProperties `json:"properties,omitempty"`

	// For optimistic concurrency control.
	ETag *string `json:"eTag,omitempty"`

	// READ-ONLY; Path reference to this group. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of the group.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Type of the object = [Microsoft.Migrate/assessmentProjects/groups].
	Type *string `json:"type,omitempty" azure:"ro"`
}

// GroupBodyProperties - Body properties of group update.
type GroupBodyProperties struct {
	// List of machine names that are part of this group.
	Machines []*string `json:"machines,omitempty"`

	// Whether to add or remove the machines.
	OperationType *GroupUpdateOperation `json:"operationType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GroupBodyProperties.
func (g GroupBodyProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "machines", g.Machines)
	populate(objectMap, "operationType", g.OperationType)
	return json.Marshal(objectMap)
}

// GroupProperties - Properties of group resource.
type GroupProperties struct {
	// The type of group.
	GroupType *string `json:"groupType,omitempty"`

	// READ-ONLY; If the assessments are in running state.
	AreAssessmentsRunning *bool `json:"areAssessmentsRunning,omitempty" azure:"ro"`

	// READ-ONLY; List of References to Assessments created on this group.
	Assessments []*string `json:"assessments,omitempty" azure:"ro"`

	// READ-ONLY; Time when this group was created. Date-Time represented in ISO-8601 format.
	CreatedTimestamp *time.Time `json:"createdTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Whether the group has been created and is valid.
	GroupStatus *GroupStatus `json:"groupStatus,omitempty" azure:"ro"`

	// READ-ONLY; Number of machines part of this group.
	MachineCount *int32 `json:"machineCount,omitempty" azure:"ro"`

	// READ-ONLY; Time when this group was last updated. Date-Time represented in ISO-8601 format.
	UpdatedTimestamp *time.Time `json:"updatedTimestamp,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type GroupProperties.
func (g GroupProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "areAssessmentsRunning", g.AreAssessmentsRunning)
	populate(objectMap, "assessments", g.Assessments)
	populate(objectMap, "createdTimestamp", (*timeRFC3339)(g.CreatedTimestamp))
	populate(objectMap, "groupStatus", g.GroupStatus)
	populate(objectMap, "groupType", g.GroupType)
	populate(objectMap, "machineCount", g.MachineCount)
	populate(objectMap, "updatedTimestamp", (*timeRFC3339)(g.UpdatedTimestamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GroupProperties.
func (g *GroupProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "areAssessmentsRunning":
			err = unpopulate(val, &g.AreAssessmentsRunning)
			delete(rawMsg, key)
		case "assessments":
			err = unpopulate(val, &g.Assessments)
			delete(rawMsg, key)
		case "createdTimestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			g.CreatedTimestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "groupStatus":
			err = unpopulate(val, &g.GroupStatus)
			delete(rawMsg, key)
		case "groupType":
			err = unpopulate(val, &g.GroupType)
			delete(rawMsg, key)
		case "machineCount":
			err = unpopulate(val, &g.MachineCount)
			delete(rawMsg, key)
		case "updatedTimestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			g.UpdatedTimestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GroupResultList - List of groups.
type GroupResultList struct {
	// List of groups.
	Value []*Group `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GroupResultList.
func (g GroupResultList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", g.Value)
	return json.Marshal(objectMap)
}

// GroupsCreateOptions contains the optional parameters for the Groups.Create method.
type GroupsCreateOptions struct {
	// New or Updated Group object.
	Group *Group
}

// GroupsDeleteOptions contains the optional parameters for the Groups.Delete method.
type GroupsDeleteOptions struct {
	// placeholder for future optional parameters
}

// GroupsGetOptions contains the optional parameters for the Groups.Get method.
type GroupsGetOptions struct {
	// placeholder for future optional parameters
}

// GroupsListByProjectOptions contains the optional parameters for the Groups.ListByProject method.
type GroupsListByProjectOptions struct {
	// placeholder for future optional parameters
}

// GroupsUpdateMachinesOptions contains the optional parameters for the Groups.UpdateMachines method.
type GroupsUpdateMachinesOptions struct {
	// Machines list to be added or removed from group.
	GroupUpdateProperties *UpdateGroupBody
}

type HyperVCollector struct {
	ETag       *string              `json:"eTag,omitempty"`
	Properties *CollectorProperties `json:"properties,omitempty"`

	// READ-ONLY
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY
	Type *string `json:"type,omitempty" azure:"ro"`
}

// HyperVCollectorList - List of Hyper-V collectors.
type HyperVCollectorList struct {
	// List of Hyper-V collectors.
	Value []*HyperVCollector `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HyperVCollectorList.
func (h HyperVCollectorList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", h.Value)
	return json.Marshal(objectMap)
}

// HyperVCollectorsCreateOptions contains the optional parameters for the HyperVCollectors.Create method.
type HyperVCollectorsCreateOptions struct {
	// New or Updated Hyper-V collector.
	CollectorBody *HyperVCollector
}

// HyperVCollectorsDeleteOptions contains the optional parameters for the HyperVCollectors.Delete method.
type HyperVCollectorsDeleteOptions struct {
	// placeholder for future optional parameters
}

// HyperVCollectorsGetOptions contains the optional parameters for the HyperVCollectors.Get method.
type HyperVCollectorsGetOptions struct {
	// placeholder for future optional parameters
}

// HyperVCollectorsListByProjectOptions contains the optional parameters for the HyperVCollectors.ListByProject method.
type HyperVCollectorsListByProjectOptions struct {
	// placeholder for future optional parameters
}

type ImportCollector struct {
	ETag       *string                    `json:"eTag,omitempty"`
	Properties *ImportCollectorProperties `json:"properties,omitempty"`

	// READ-ONLY
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ImportCollectorList - List of Import collectors.
type ImportCollectorList struct {
	// List of Import collectors.
	Value []*ImportCollector `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ImportCollectorList.
func (i ImportCollectorList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", i.Value)
	return json.Marshal(objectMap)
}

type ImportCollectorProperties struct {
	DiscoverySiteID *string `json:"discoverySiteId,omitempty"`

	// READ-ONLY
	CreatedTimestamp *string `json:"createdTimestamp,omitempty" azure:"ro"`

	// READ-ONLY
	UpdatedTimestamp *string `json:"updatedTimestamp,omitempty" azure:"ro"`
}

// ImportCollectorsCreateOptions contains the optional parameters for the ImportCollectors.Create method.
type ImportCollectorsCreateOptions struct {
	// New or Updated Import collector.
	CollectorBody *ImportCollector
}

// ImportCollectorsDeleteOptions contains the optional parameters for the ImportCollectors.Delete method.
type ImportCollectorsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ImportCollectorsGetOptions contains the optional parameters for the ImportCollectors.Get method.
type ImportCollectorsGetOptions struct {
	// placeholder for future optional parameters
}

// ImportCollectorsListByProjectOptions contains the optional parameters for the ImportCollectors.ListByProject method.
type ImportCollectorsListByProjectOptions struct {
	// placeholder for future optional parameters
}

// Machine - A machine in a migration project.
type Machine struct {
	// For optimistic concurrency control.
	ETag *string `json:"eTag,omitempty"`

	// Properties of the machine.
	Properties *MachineProperties `json:"properties,omitempty"`

	// READ-ONLY; Path reference to this machine. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines/{machineName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of the machine. It is a GUID which is unique identifier of machine in private data center. For user-readable name, we have a displayName
	// property on this machine.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Type of the object = [Microsoft.Migrate/assessmentProjects/machines].
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MachineProperties - Properties of a machine.
type MachineProperties struct {
	// READ-ONLY; Boot type of the machine.
	BootType *MachineBootType `json:"bootType,omitempty" azure:"ro"`

	// READ-ONLY; Time when this machine was created. Date-Time represented in ISO-8601 format.
	CreatedTimestamp *time.Time `json:"createdTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; ARM ID of the data center as tracked by the Microsoft.OffAzure.
	DatacenterManagementServerArmID *string `json:"datacenterManagementServerArmId,omitempty" azure:"ro"`

	// READ-ONLY; Name of the server hosting the datacenter management solution.
	DatacenterManagementServerName *string `json:"datacenterManagementServerName,omitempty" azure:"ro"`

	// READ-ONLY; Description of the machine
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; ARM ID of the machine as tracked by the Microsoft.OffAzure.
	DiscoveryMachineArmID *string `json:"discoveryMachineArmId,omitempty" azure:"ro"`

	// READ-ONLY; Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object
	Disks map[string]*Disk `json:"disks,omitempty" azure:"ro"`

	// READ-ONLY; User readable name of the machine as defined by the user in their private datacenter.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; List of references to the groups that the machine is member of.
	Groups []*string `json:"groups,omitempty" azure:"ro"`

	// READ-ONLY; Memory in Megabytes.
	MegabytesOfMemory *float32 `json:"megabytesOfMemory,omitempty" azure:"ro"`

	// READ-ONLY; Dictionary of network adapters attached to the machine. Key is ID of network adapter. Value is a network adapter object
	NetworkAdapters map[string]*NetworkAdapter `json:"networkAdapters,omitempty" azure:"ro"`

	// READ-ONLY; Processor count.
	NumberOfCores *int32 `json:"numberOfCores,omitempty" azure:"ro"`

	// READ-ONLY; Operating System name of the machine.
	OperatingSystemName *string `json:"operatingSystemName,omitempty" azure:"ro"`

	// READ-ONLY; Operating System type of the machine.
	OperatingSystemType *string `json:"operatingSystemType,omitempty" azure:"ro"`

	// READ-ONLY; Operating System version of the machine.
	OperatingSystemVersion *string `json:"operatingSystemVersion,omitempty" azure:"ro"`

	// READ-ONLY; Time when this machine was last updated. Date-Time represented in ISO-8601 format.
	UpdatedTimestamp *time.Time `json:"updatedTimestamp,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MachineProperties.
func (m MachineProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bootType", m.BootType)
	populate(objectMap, "createdTimestamp", (*timeRFC3339)(m.CreatedTimestamp))
	populate(objectMap, "datacenterManagementServerArmId", m.DatacenterManagementServerArmID)
	populate(objectMap, "datacenterManagementServerName", m.DatacenterManagementServerName)
	populate(objectMap, "description", m.Description)
	populate(objectMap, "discoveryMachineArmId", m.DiscoveryMachineArmID)
	populate(objectMap, "disks", m.Disks)
	populate(objectMap, "displayName", m.DisplayName)
	populate(objectMap, "groups", m.Groups)
	populate(objectMap, "megabytesOfMemory", m.MegabytesOfMemory)
	populate(objectMap, "networkAdapters", m.NetworkAdapters)
	populate(objectMap, "numberOfCores", m.NumberOfCores)
	populate(objectMap, "operatingSystemName", m.OperatingSystemName)
	populate(objectMap, "operatingSystemType", m.OperatingSystemType)
	populate(objectMap, "operatingSystemVersion", m.OperatingSystemVersion)
	populate(objectMap, "updatedTimestamp", (*timeRFC3339)(m.UpdatedTimestamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MachineProperties.
func (m *MachineProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "bootType":
			err = unpopulate(val, &m.BootType)
			delete(rawMsg, key)
		case "createdTimestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.CreatedTimestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "datacenterManagementServerArmId":
			err = unpopulate(val, &m.DatacenterManagementServerArmID)
			delete(rawMsg, key)
		case "datacenterManagementServerName":
			err = unpopulate(val, &m.DatacenterManagementServerName)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &m.Description)
			delete(rawMsg, key)
		case "discoveryMachineArmId":
			err = unpopulate(val, &m.DiscoveryMachineArmID)
			delete(rawMsg, key)
		case "disks":
			err = unpopulate(val, &m.Disks)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, &m.DisplayName)
			delete(rawMsg, key)
		case "groups":
			err = unpopulate(val, &m.Groups)
			delete(rawMsg, key)
		case "megabytesOfMemory":
			err = unpopulate(val, &m.MegabytesOfMemory)
			delete(rawMsg, key)
		case "networkAdapters":
			err = unpopulate(val, &m.NetworkAdapters)
			delete(rawMsg, key)
		case "numberOfCores":
			err = unpopulate(val, &m.NumberOfCores)
			delete(rawMsg, key)
		case "operatingSystemName":
			err = unpopulate(val, &m.OperatingSystemName)
			delete(rawMsg, key)
		case "operatingSystemType":
			err = unpopulate(val, &m.OperatingSystemType)
			delete(rawMsg, key)
		case "operatingSystemVersion":
			err = unpopulate(val, &m.OperatingSystemVersion)
			delete(rawMsg, key)
		case "updatedTimestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.UpdatedTimestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MachineResultList - List of machines.
type MachineResultList struct {
	NextLink *string `json:"nextLink,omitempty"`

	// List of machines.
	Value []*Machine `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MachineResultList.
func (m MachineResultList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", m.NextLink)
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// MachinesGetOptions contains the optional parameters for the Machines.Get method.
type MachinesGetOptions struct {
	// placeholder for future optional parameters
}

// MachinesListByProjectOptions contains the optional parameters for the Machines.ListByProject method.
type MachinesListByProjectOptions struct {
	// placeholder for future optional parameters
}

// NetworkAdapter - A network adapter discovered on a machine.
type NetworkAdapter struct {
	// READ-ONLY; User friendly name of the network adapter.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; List of IP Addresses on the network adapter.
	IPAddresses []*string `json:"ipAddresses,omitempty" azure:"ro"`

	// READ-ONLY; MAC Address of the network adapter.
	MacAddress *string `json:"macAddress,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkAdapter.
func (n NetworkAdapter) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayName", n.DisplayName)
	populate(objectMap, "ipAddresses", n.IPAddresses)
	populate(objectMap, "macAddress", n.MacAddress)
	return json.Marshal(objectMap)
}

// Operation - A REST API operation supported by the provider.
type Operation struct {
	// READ-ONLY; Displayable properties of the operation.
	Display *OperationDisplay `json:"display,omitempty" azure:"ro"`

	// READ-ONLY; Name of the operation.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Origin of the operation.
	Origin *string `json:"origin,omitempty" azure:"ro"`
}

// OperationDisplay - Displayable properties of the operation.
type OperationDisplay struct {
	// READ-ONLY; Description of the operation.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Operation Type.
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; Provider of the operation.
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; Resource operated on by the operation.
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationResultList - List of API operations.
type OperationResultList struct {
	// List of operations.
	Value []*Operation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationResultList.
func (o OperationResultList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnection - A private endpoint connection for a project.
type PrivateEndpointConnection struct {
	// REQUIRED; Properties of the private endpoint endpoint connection.
	Properties *PrivateEndpointConnectionProperties `json:"properties,omitempty"`

	// For optimistic concurrency control.
	ETag *string `json:"eTag,omitempty"`

	// READ-ONLY; Path reference to this private endpoint endpoint connection.
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/privateEndpointConnections/{privateEndpointConnectionName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of the private endpoint endpoint connection.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Type of the object = [Microsoft.Migrate/assessmentProjects/privateEndpointConnections].
	Type *string `json:"type,omitempty" azure:"ro"`
}

// PrivateEndpointConnectionCollection - A collection of private endpoint connections for a project.
type PrivateEndpointConnectionCollection struct {
	// READ-ONLY
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; A list of private endpoint connections for a project.
	Value []*PrivateEndpointConnection `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionCollection.
func (p PrivateEndpointConnectionCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateEndpointConnectionDeleteOptions contains the optional parameters for the PrivateEndpointConnection.Delete method.
type PrivateEndpointConnectionDeleteOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionGetOptions contains the optional parameters for the PrivateEndpointConnection.Get method.
type PrivateEndpointConnectionGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionListByProjectOptions contains the optional parameters for the PrivateEndpointConnection.ListByProject method.
type PrivateEndpointConnectionListByProjectOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionProperties - Private endpoint connection properties.
type PrivateEndpointConnectionProperties struct {
	// State of the private endpoint connection.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState `json:"privateLinkServiceConnectionState,omitempty"`

	// READ-ONLY; ARM id for the private endpoint resource corresponding to the connection.
	PrivateEndpoint *ResourceID `json:"privateEndpoint,omitempty" azure:"ro"`

	// READ-ONLY; Indicates whether there is an ongoing operation on the private endpoint.
	ProvisioningState *PrivateEndpointConnectionPropertiesProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// PrivateEndpointConnectionUpdateOptions contains the optional parameters for the PrivateEndpointConnection.Update method.
type PrivateEndpointConnectionUpdateOptions struct {
	// New or Updated Private Endpoint Connection object.
	PrivateEndpointConnectionBody *PrivateEndpointConnection
}

// PrivateLinkResource - A private link resource for a project for which a private endpoint can be created.
type PrivateLinkResource struct {
	// READ-ONLY; Path reference to this private link resource.
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/privateLinkResources/{privateLinkResourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of the private link resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Properties of the private link resource.
	Properties *PrivateLinkResourceProperties `json:"properties,omitempty" azure:"ro"`

	// READ-ONLY; Type of the object = [Microsoft.Migrate/assessmentProjects/privateLinkResources].
	Type *string `json:"type,omitempty" azure:"ro"`
}

// PrivateLinkResourceCollection - A list of private link resources
type PrivateLinkResourceCollection struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Array of results.
	Value []*PrivateLinkResource `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceCollection.
func (p PrivateLinkResourceCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateLinkResourceGetOptions contains the optional parameters for the PrivateLinkResource.Get method.
type PrivateLinkResourceGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkResourceListByProjectOptions contains the optional parameters for the PrivateLinkResource.ListByProject method.
type PrivateLinkResourceListByProjectOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkResourceProperties - Properties of a private link resource.
type PrivateLinkResourceProperties struct {
	// READ-ONLY; The private link resource group id.
	GroupID *string `json:"groupId,omitempty" azure:"ro"`

	// READ-ONLY; The private link resource required member names.
	RequiredMembers []*string `json:"requiredMembers,omitempty" azure:"ro"`

	// READ-ONLY; Required DNS zone names of the the private link resource.
	RequiredZoneNames []*string `json:"requiredZoneNames,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceProperties.
func (p PrivateLinkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupId", p.GroupID)
	populate(objectMap, "requiredMembers", p.RequiredMembers)
	populate(objectMap, "requiredZoneNames", p.RequiredZoneNames)
	return json.Marshal(objectMap)
}

// PrivateLinkServiceConnectionState - State of a private endpoint connection.
type PrivateLinkServiceConnectionState struct {
	// Actions required on the private endpoint connection.
	ActionsRequired *string `json:"actionsRequired,omitempty"`

	// Description of the private endpoint connection.
	Description *string `json:"description,omitempty"`

	// Connection status of the private endpoint connection.
	Status *PrivateLinkServiceConnectionStateStatus `json:"status,omitempty"`
}

// Project - Azure Migrate Project.
type Project struct {
	// For optimistic concurrency control.
	ETag *string `json:"eTag,omitempty"`

	// Azure location in which project is created.
	Location *string `json:"location,omitempty"`

	// Properties of the project.
	Properties *ProjectProperties `json:"properties,omitempty"`

	// Tags provided by Azure Tagging service.
	Tags map[string]interface{} `json:"tags,omitempty"`

	// READ-ONLY; Path reference to this project /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of the project.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Type of the object = [Microsoft.Migrate/assessmentProjects].
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Project.
func (p Project) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "eTag", p.ETag)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "tags", p.Tags)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// ProjectProperties - Properties of a project.
type ProjectProperties struct {
	// Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.
	AssessmentSolutionID *string `json:"assessmentSolutionId,omitempty"`

	// The ARM id of the storage account used for interactions when public access is disabled.
	CustomerStorageAccountArmID *string `json:"customerStorageAccountArmId,omitempty"`

	// The ARM id of service map workspace created by customer.
	CustomerWorkspaceID *string `json:"customerWorkspaceId,omitempty"`

	// Location of service map workspace created by customer.
	CustomerWorkspaceLocation *string `json:"customerWorkspaceLocation,omitempty"`

	// Assessment project status.
	ProjectStatus *ProjectStatus `json:"projectStatus,omitempty"`

	// This value can be set to 'enabled' to avoid breaking changes on existing customer resources and templates. If set to 'disabled', traffic over public
	// interface is not allowed, and private endpoint
	// connections would be the exclusive access method.
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty"`

	// READ-ONLY; Time when this project was created. Date-Time represented in ISO-8601 format.
	CreatedTimestamp *time.Time `json:"createdTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Time when last assessment was created. Date-Time represented in ISO-8601 format. This value will be null until assessment is created.
	LastAssessmentTimestamp *time.Time `json:"lastAssessmentTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Number of assessments created in the project.
	NumberOfAssessments *int32 `json:"numberOfAssessments,omitempty" azure:"ro"`

	// READ-ONLY; Number of groups created in the project.
	NumberOfGroups *int32 `json:"numberOfGroups,omitempty" azure:"ro"`

	// READ-ONLY; Number of machines in the project.
	NumberOfMachines *int32 `json:"numberOfMachines,omitempty" azure:"ro"`

	// READ-ONLY; The list of private endpoint connections to the project.
	PrivateEndpointConnections []*PrivateEndpointConnection `json:"privateEndpointConnections,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the project.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Endpoint at which the collector agent can call agent REST API.
	ServiceEndpoint *string `json:"serviceEndpoint,omitempty" azure:"ro"`

	// READ-ONLY; Time when this project was last updated. Date-Time represented in ISO-8601 format.
	UpdatedTimestamp *time.Time `json:"updatedTimestamp,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ProjectProperties.
func (p ProjectProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "assessmentSolutionId", p.AssessmentSolutionID)
	populate(objectMap, "createdTimestamp", (*timeRFC3339)(p.CreatedTimestamp))
	populate(objectMap, "customerStorageAccountArmId", p.CustomerStorageAccountArmID)
	populate(objectMap, "customerWorkspaceId", p.CustomerWorkspaceID)
	populate(objectMap, "customerWorkspaceLocation", p.CustomerWorkspaceLocation)
	populate(objectMap, "lastAssessmentTimestamp", (*timeRFC3339)(p.LastAssessmentTimestamp))
	populate(objectMap, "numberOfAssessments", p.NumberOfAssessments)
	populate(objectMap, "numberOfGroups", p.NumberOfGroups)
	populate(objectMap, "numberOfMachines", p.NumberOfMachines)
	populate(objectMap, "privateEndpointConnections", p.PrivateEndpointConnections)
	populate(objectMap, "projectStatus", p.ProjectStatus)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "publicNetworkAccess", p.PublicNetworkAccess)
	populate(objectMap, "serviceEndpoint", p.ServiceEndpoint)
	populate(objectMap, "updatedTimestamp", (*timeRFC3339)(p.UpdatedTimestamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ProjectProperties.
func (p *ProjectProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "assessmentSolutionId":
			err = unpopulate(val, &p.AssessmentSolutionID)
			delete(rawMsg, key)
		case "createdTimestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			p.CreatedTimestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "customerStorageAccountArmId":
			err = unpopulate(val, &p.CustomerStorageAccountArmID)
			delete(rawMsg, key)
		case "customerWorkspaceId":
			err = unpopulate(val, &p.CustomerWorkspaceID)
			delete(rawMsg, key)
		case "customerWorkspaceLocation":
			err = unpopulate(val, &p.CustomerWorkspaceLocation)
			delete(rawMsg, key)
		case "lastAssessmentTimestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			p.LastAssessmentTimestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "numberOfAssessments":
			err = unpopulate(val, &p.NumberOfAssessments)
			delete(rawMsg, key)
		case "numberOfGroups":
			err = unpopulate(val, &p.NumberOfGroups)
			delete(rawMsg, key)
		case "numberOfMachines":
			err = unpopulate(val, &p.NumberOfMachines)
			delete(rawMsg, key)
		case "privateEndpointConnections":
			err = unpopulate(val, &p.PrivateEndpointConnections)
			delete(rawMsg, key)
		case "projectStatus":
			err = unpopulate(val, &p.ProjectStatus)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &p.ProvisioningState)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, &p.PublicNetworkAccess)
			delete(rawMsg, key)
		case "serviceEndpoint":
			err = unpopulate(val, &p.ServiceEndpoint)
			delete(rawMsg, key)
		case "updatedTimestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			p.UpdatedTimestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ProjectResultList - List of projects.
type ProjectResultList struct {
	NextLink *string `json:"nextLink,omitempty"`

	// List of projects.
	Value []*Project `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ProjectResultList.
func (p ProjectResultList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// ProjectsAssessmentOptionsListOptions contains the optional parameters for the Projects.AssessmentOptionsList method.
type ProjectsAssessmentOptionsListOptions struct {
	// placeholder for future optional parameters
}

// ProjectsAssessmentOptionsOptions contains the optional parameters for the Projects.AssessmentOptions method.
type ProjectsAssessmentOptionsOptions struct {
	// placeholder for future optional parameters
}

// ProjectsCreateOptions contains the optional parameters for the Projects.Create method.
type ProjectsCreateOptions struct {
	// New or Updated project object.
	Project *Project
}

// ProjectsDeleteOptions contains the optional parameters for the Projects.Delete method.
type ProjectsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ProjectsGetOptions contains the optional parameters for the Projects.Get method.
type ProjectsGetOptions struct {
	// placeholder for future optional parameters
}

// ProjectsListBySubscriptionOptions contains the optional parameters for the Projects.ListBySubscription method.
type ProjectsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// ProjectsListOptions contains the optional parameters for the Projects.List method.
type ProjectsListOptions struct {
	// placeholder for future optional parameters
}

// ProjectsUpdateOptions contains the optional parameters for the Projects.Update method.
type ProjectsUpdateOptions struct {
	// Updated project object.
	Project *Project
}

// ResourceID - ARM id for a resource.
type ResourceID struct {
	// READ-ONLY
	ID *string `json:"id,omitempty" azure:"ro"`
}

type ServerCollector struct {
	ETag       *string              `json:"eTag,omitempty"`
	Properties *CollectorProperties `json:"properties,omitempty"`

	// READ-ONLY
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ServerCollectorList - List of Server collectors.
type ServerCollectorList struct {
	// List of Server collectors.
	Value []*ServerCollector `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerCollectorList.
func (s ServerCollectorList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServerCollectorsCreateOptions contains the optional parameters for the ServerCollectors.Create method.
type ServerCollectorsCreateOptions struct {
	// New or Updated Server collector.
	CollectorBody *ServerCollector
}

// ServerCollectorsDeleteOptions contains the optional parameters for the ServerCollectors.Delete method.
type ServerCollectorsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ServerCollectorsGetOptions contains the optional parameters for the ServerCollectors.Get method.
type ServerCollectorsGetOptions struct {
	// placeholder for future optional parameters
}

// ServerCollectorsListByProjectOptions contains the optional parameters for the ServerCollectors.ListByProject method.
type ServerCollectorsListByProjectOptions struct {
	// placeholder for future optional parameters
}

// UpdateGroupBody - Properties of group update.
type UpdateGroupBody struct {
	// For optimistic concurrency control.
	ETag *string `json:"eTag,omitempty"`

	// Properties of the group.
	Properties *GroupBodyProperties `json:"properties,omitempty"`
}

// VMFamily - VM family name, the list of targeted azure locations and the category of the family.
type VMFamily struct {
	// READ-ONLY; Category of the VM family.
	Category []*string `json:"category,omitempty" azure:"ro"`

	// READ-ONLY; Name of the VM family.
	FamilyName *string `json:"familyName,omitempty" azure:"ro"`

	// READ-ONLY; List of Azure regions.
	TargetLocations []*string `json:"targetLocations,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VMFamily.
func (v VMFamily) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "category", v.Category)
	populate(objectMap, "familyName", v.FamilyName)
	populate(objectMap, "targetLocations", v.TargetLocations)
	return json.Marshal(objectMap)
}

type VMUptime struct {
	// Number of days in a month for VM uptime.
	DaysPerMonth *int32 `json:"daysPerMonth,omitempty"`

	// Number of hours per day for VM uptime.
	HoursPerDay *int32 `json:"hoursPerDay,omitempty"`
}

type VMwareCollector struct {
	ETag       *string              `json:"eTag,omitempty"`
	Properties *CollectorProperties `json:"properties,omitempty"`

	// READ-ONLY
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY
	Type *string `json:"type,omitempty" azure:"ro"`
}

// VMwareCollectorList - List of VMware collectors.
type VMwareCollectorList struct {
	// List of VMware collectors.
	Value []*VMwareCollector `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VMwareCollectorList.
func (v VMwareCollectorList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", v.Value)
	return json.Marshal(objectMap)
}

// VMwareCollectorsCreateOptions contains the optional parameters for the VMwareCollectors.Create method.
type VMwareCollectorsCreateOptions struct {
	// New or Updated VMware collector.
	CollectorBody *VMwareCollector
}

// VMwareCollectorsDeleteOptions contains the optional parameters for the VMwareCollectors.Delete method.
type VMwareCollectorsDeleteOptions struct {
	// placeholder for future optional parameters
}

// VMwareCollectorsGetOptions contains the optional parameters for the VMwareCollectors.Get method.
type VMwareCollectorsGetOptions struct {
	// placeholder for future optional parameters
}

// VMwareCollectorsListByProjectOptions contains the optional parameters for the VMwareCollectors.ListByProject method.
type VMwareCollectorsListByProjectOptions struct {
	// placeholder for future optional parameters
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
