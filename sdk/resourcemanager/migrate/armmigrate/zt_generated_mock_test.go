//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrate_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/migrate/armmigrate"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestProjects_ListBySubscription(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ProjectsInSubscription_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Projects_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewProjectsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ProjectsInSubscription_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmigrate.ProjectResultList{
			Value: []*armmigrate.Project{
				{
					Name:     to.Ptr("site1493ae9ea68project"),
					Type:     to.Ptr("Microsoft.Migrate/assessmentprojects"),
					ETag:     to.Ptr("\"0500be57-0000-0300-0000-5cb893f70000\""),
					ID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/SMSValidations/providers/Microsoft.Migrate/assessmentprojects/site1493ae9ea68project"),
					Location: to.Ptr("centralus"),
					Properties: &armmigrate.ProjectProperties{
						AssessmentSolutionID:      to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/SMSValidations/providers/Microsoft.Migrate/MigrateProjects/SMSValidations-MigrateProject/Solutions/Servers-Assessment-ServerAssessment"),
						CreatedTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-02-15T09:18:02.572288Z"); return t }()),
						CustomerWorkspaceID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/SMSValidations/providers/Microsoft.OperationalInsights/workspaces/test-haili-01"),
						CustomerWorkspaceLocation: to.Ptr("southeastasia"),
						LastAssessmentTimestamp:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-18T15:12:55.2386626Z"); return t }()),
						NumberOfAssessments:       to.Ptr[int32](12),
						NumberOfGroups:            to.Ptr[int32](8),
						NumberOfMachines:          to.Ptr[int32](26),
						ProjectStatus:             to.Ptr(armmigrate.ProjectStatusActive),
						ProvisioningState:         to.Ptr(armmigrate.ProvisioningStateSucceeded),
						ServiceEndpoint:           to.Ptr("https://asmsrvprodcus.prod.migration.windowsazure.com/"),
						UpdatedTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-18T03:31:20.8362646Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("site1ad5aa6cc09project"),
					Type:     to.Ptr("Microsoft.Migrate/assessmentprojects"),
					ETag:     to.Ptr("\"8300bdec-0000-0300-0000-5cd678410000\""),
					ID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/ppValidation/providers/Microsoft.Migrate/assessmentprojects/site1ad5aa6cc09project"),
					Location: to.Ptr("centralus"),
					Properties: &armmigrate.ProjectProperties{
						AssessmentSolutionID:    to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/ppValidation/providers/Microsoft.Migrate/MigrateProjects/ppValidation-MigrateProject/Solutions/Servers-Assessment-ServerAssessment"),
						CreatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-02-18T16:46:46.0843984Z"); return t }()),
						LastAssessmentTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-11T07:22:41.5553328Z"); return t }()),
						NumberOfAssessments:     to.Ptr[int32](12),
						NumberOfGroups:          to.Ptr[int32](7),
						NumberOfMachines:        to.Ptr[int32](29),
						ProjectStatus:           to.Ptr(armmigrate.ProjectStatusActive),
						ProvisioningState:       to.Ptr(armmigrate.ProvisioningStateSucceeded),
						ServiceEndpoint:         to.Ptr("https://asmsrvprodcus.prod.migration.windowsazure.com/"),
						UpdatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-02-18T16:46:46.0843984Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("migrateproject0720project"),
					Type:     to.Ptr("Microsoft.Migrate/assessmentprojects"),
					ETag:     to.Ptr("\"0d00efcf-0000-0300-0000-5d6fdac70000\""),
					ID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/SDKUpgradeValidations/providers/Microsoft.Migrate/assessmentprojects/migrateproject0720project"),
					Location: to.Ptr("centralus"),
					Properties: &armmigrate.ProjectProperties{
						AssessmentSolutionID:    to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/SDKUpgradeValidations/providers/Microsoft.Migrate/MigrateProjects/SDKUpgradeValidations-MigrateProject/Solutions/Servers-Assessment-ServerAssessment"),
						CreatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-22T07:06:04.9725546Z"); return t }()),
						LastAssessmentTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T15:39:51.3046884Z"); return t }()),
						NumberOfAssessments:     to.Ptr[int32](2),
						NumberOfGroups:          to.Ptr[int32](1),
						NumberOfMachines:        to.Ptr[int32](24),
						ProjectStatus:           to.Ptr(armmigrate.ProjectStatusActive),
						ProvisioningState:       to.Ptr(armmigrate.ProvisioningStateSucceeded),
						ServiceEndpoint:         to.Ptr("https://asmsrvprodcus.prod.migration.windowsazure.com/"),
						UpdatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-22T07:06:04.9725546Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("migrateproject03acproject"),
					Type:     to.Ptr("Microsoft.Migrate/assessmentprojects"),
					ETag:     to.Ptr("\"00004d14-0000-0300-0000-5cb820290000\""),
					ID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/AccessibilityTesting/providers/Microsoft.Migrate/assessmentprojects/migrateproject03acproject"),
					Location: to.Ptr("centralus"),
					Properties: &armmigrate.ProjectProperties{
						AssessmentSolutionID: to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/AccessibilityTesting/providers/Microsoft.Migrate/MigrateProjects/AccessibilityTesting-MigrateProject/Solutions/Servers-Assessment-ServerAssessment"),
						CreatedTimestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-18T06:53:59.4191419Z"); return t }()),
						NumberOfAssessments:  to.Ptr[int32](0),
						NumberOfGroups:       to.Ptr[int32](0),
						NumberOfMachines:     to.Ptr[int32](16),
						ProjectStatus:        to.Ptr(armmigrate.ProjectStatusActive),
						ProvisioningState:    to.Ptr(armmigrate.ProvisioningStateSucceeded),
						ServiceEndpoint:      to.Ptr("https://asmsrvprodcus.prod.migration.windowsazure.com/"),
						UpdatedTimestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-18T06:53:59.4191419Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("migrateprojecta961project"),
					Type:     to.Ptr("Microsoft.Migrate/assessmentprojects"),
					ETag:     to.Ptr("\"1300df9f-0000-0300-0000-5d6e6d860000\""),
					ID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/vmwaretesting/providers/Microsoft.Migrate/assessmentprojects/migrateprojecta961project"),
					Location: to.Ptr("centralus"),
					Properties: &armmigrate.ProjectProperties{
						AssessmentSolutionID:      to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/vmwaretesting/providers/Microsoft.Migrate/MigrateProjects/vmwaretesting-MigrateProject/Solutions/Servers-Assessment-ServerAssessment"),
						CreatedTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-20T11:59:42.7355994Z"); return t }()),
						CustomerWorkspaceID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/vmwaretesting/providers/Microsoft.OperationalInsights/workspaces/mahpar324211"),
						CustomerWorkspaceLocation: to.Ptr("westeurope"),
						NumberOfAssessments:       to.Ptr[int32](0),
						NumberOfGroups:            to.Ptr[int32](1),
						NumberOfMachines:          to.Ptr[int32](47),
						ProjectStatus:             to.Ptr(armmigrate.ProjectStatusActive),
						ProvisioningState:         to.Ptr(armmigrate.ProvisioningStateSucceeded),
						ServiceEndpoint:           to.Ptr("https://asmsrvprodcus.prod.migration.windowsazure.com/"),
						UpdatedTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-03T13:41:26.6775107Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("PortalGAValidations43bbproject"),
					Type:     to.Ptr("Microsoft.Migrate/assessmentprojects"),
					ETag:     to.Ptr("\"02006b1f-0000-0300-0000-5d24a44a0000\""),
					ID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/GARegressionTesting/providers/Microsoft.Migrate/assessmentprojects/PortalGAValidations43bbproject"),
					Location: to.Ptr("centralus"),
					Properties: &armmigrate.ProjectProperties{
						AssessmentSolutionID:    to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/GARegressionTesting/providers/Microsoft.Migrate/MigrateProjects/PortalGAValidations/Solutions/Servers-Assessment-ServerAssessment"),
						CreatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-04T03:56:50.853542Z"); return t }()),
						LastAssessmentTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-09T14:27:22.8856571Z"); return t }()),
						NumberOfAssessments:     to.Ptr[int32](4),
						NumberOfGroups:          to.Ptr[int32](4),
						NumberOfMachines:        to.Ptr[int32](49),
						ProjectStatus:           to.Ptr(armmigrate.ProjectStatusActive),
						ProvisioningState:       to.Ptr(armmigrate.ProvisioningStateSucceeded),
						ServiceEndpoint:         to.Ptr("https://asmsrvprodcus.prod.migration.windowsazure.com/"),
						UpdatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-04T03:56:50.853542Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("vaindana-pre-ga120dproject"),
					Type:     to.Ptr("Microsoft.Migrate/assessmentprojects"),
					ETag:     to.Ptr("\"0400d98a-0000-0d00-0000-5cd3ff790000\""),
					ID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/vaindana-migrate-ga-rg/providers/Microsoft.Migrate/assessmentprojects/vaindana-pre-ga120dproject"),
					Location: to.Ptr("westeurope"),
					Properties: &armmigrate.ProjectProperties{
						AssessmentSolutionID:      to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/vaindana-migrate-ga-rg/providers/Microsoft.Migrate/MigrateProjects/vaindana-pre-ga/Solutions/Servers-Assessment-ServerAssessment"),
						CreatedTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-08T15:09:37.8565484Z"); return t }()),
						CustomerWorkspaceID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/vaindana-migrate-ga-rg/providers/Microsoft.OperationalInsights/workspaces/vaindana-pre-ga-oms"),
						CustomerWorkspaceLocation: to.Ptr("westeurope"),
						LastAssessmentTimestamp:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:22:48.9730444Z"); return t }()),
						NumberOfAssessments:       to.Ptr[int32](2),
						NumberOfGroups:            to.Ptr[int32](2),
						NumberOfMachines:          to.Ptr[int32](14),
						ProjectStatus:             to.Ptr(armmigrate.ProjectStatusActive),
						ProvisioningState:         to.Ptr(armmigrate.ProvisioningStateSucceeded),
						ServiceEndpoint:           to.Ptr("https://asmsrvprodwe.prod.migration.windowsazure.com/"),
						UpdatedTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-08T17:12:42.1788728Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("Mahesh-V2-Europe-Bugbash181eproject"),
					Type:     to.Ptr("Microsoft.Migrate/assessmentprojects"),
					ETag:     to.Ptr("\"0b00349d-0000-0d00-0000-5d22eb5b0000\""),
					ID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/Mahesh-RG-Eurpe-Bugbash/providers/Microsoft.Migrate/assessmentprojects/Mahesh-V2-Europe-Bugbash181eproject"),
					Location: to.Ptr("westeurope"),
					Properties: &armmigrate.ProjectProperties{
						AssessmentSolutionID:    to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/Mahesh-RG-Eurpe-Bugbash/providers/Microsoft.Migrate/MigrateProjects/Mahesh-V2-Europe-Bugbash/Solutions/Servers-Assessment-ServerAssessment"),
						CreatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T07:38:23.0345615Z"); return t }()),
						LastAssessmentTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-02T06:38:34.2815102Z"); return t }()),
						NumberOfAssessments:     to.Ptr[int32](6),
						NumberOfGroups:          to.Ptr[int32](3),
						NumberOfMachines:        to.Ptr[int32](36),
						ProjectStatus:           to.Ptr(armmigrate.ProjectStatusActive),
						ProvisioningState:       to.Ptr(armmigrate.ProvisioningStateSucceeded),
						ServiceEndpoint:         to.Ptr("https://asmsrvprodwe.prod.migration.windowsazure.com/"),
						UpdatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T07:38:23.0345615Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("abgoyalWEselfhostb72bproject"),
					Type:     to.Ptr("Microsoft.Migrate/assessmentprojects"),
					ETag:     to.Ptr("\"0600c777-0000-0d00-0000-5cdaa4170000\""),
					ID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject"),
					Location: to.Ptr("westeurope"),
					Properties: &armmigrate.ProjectProperties{
						AssessmentSolutionID:    to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/abgoyal-westeurope/providers/microsoft.migrate/migrateprojects/abgoyalweselfhost/Solutions/Servers-Assessment-ServerAssessment"),
						CreatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T08:28:53.3305058Z"); return t }()),
						LastAssessmentTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T11:18:47.7893715Z"); return t }()),
						NumberOfAssessments:     to.Ptr[int32](3),
						NumberOfGroups:          to.Ptr[int32](2),
						NumberOfMachines:        to.Ptr[int32](28),
						ProjectStatus:           to.Ptr(armmigrate.ProjectStatusActive),
						ProvisioningState:       to.Ptr(armmigrate.ProvisioningStateSucceeded),
						ServiceEndpoint:         to.Ptr("https://asmsrvprodwe.prod.migration.windowsazure.com/"),
						UpdatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:11:16.0228967Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("vaindana-pre-ga-10180project"),
					Type:     to.Ptr("Microsoft.Migrate/assessmentprojects"),
					ETag:     to.Ptr("\"01003c88-0000-0d00-0000-5d41601b0000\""),
					ID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/vaindana-migrate-ga-rg/providers/Microsoft.Migrate/assessmentprojects/vaindana-pre-ga-10180project"),
					Location: to.Ptr("westeurope"),
					Properties: &armmigrate.ProjectProperties{
						AssessmentSolutionID:    to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/vaindana-migrate-ga-rg/providers/Microsoft.Migrate/MigrateProjects/vaindana-pre-ga-1/Solutions/Servers-Assessment-ServerAssessment"),
						CreatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T11:58:13.0218178Z"); return t }()),
						LastAssessmentTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-31T09:32:11.4963946Z"); return t }()),
						NumberOfAssessments:     to.Ptr[int32](4),
						NumberOfGroups:          to.Ptr[int32](2),
						NumberOfMachines:        to.Ptr[int32](101),
						ProjectStatus:           to.Ptr(armmigrate.ProjectStatusActive),
						ProvisioningState:       to.Ptr(armmigrate.ProvisioningStateSucceeded),
						ServiceEndpoint:         to.Ptr("https://asmsrvprodwe.prod.migration.windowsazure.com/"),
						UpdatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-15T16:52:08.9189309Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProjectResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProjectResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ProjectsInSubscription_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_List(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Projects_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Projects_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewProjectsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	pager := client.List("abgoyal-westEurope",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Projects_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmigrate.ProjectResultList{
			Value: []*armmigrate.Project{
				{
					Name:     to.Ptr("abgoyalWEselfhostb72bproject"),
					Type:     to.Ptr("Microsoft.Migrate/assessmentprojects"),
					ETag:     to.Ptr("\"0600c777-0000-0d00-0000-5cdaa4170000\""),
					ID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject"),
					Location: to.Ptr("westeurope"),
					Properties: &armmigrate.ProjectProperties{
						AssessmentSolutionID:    to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/abgoyal-westeurope/providers/microsoft.migrate/migrateprojects/abgoyalweselfhost/Solutions/Servers-Assessment-ServerAssessment"),
						CreatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T08:28:53.3305058Z"); return t }()),
						LastAssessmentTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T11:18:47.7893715Z"); return t }()),
						NumberOfAssessments:     to.Ptr[int32](3),
						NumberOfGroups:          to.Ptr[int32](2),
						NumberOfMachines:        to.Ptr[int32](28),
						ProjectStatus:           to.Ptr(armmigrate.ProjectStatusActive),
						ProvisioningState:       to.Ptr(armmigrate.ProvisioningStateSucceeded),
						ServiceEndpoint:         to.Ptr("https://asmsrvprodwe.prod.migration.windowsazure.com/"),
						UpdatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:11:16.0228967Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProjectResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProjectResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Projects_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_Get(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Projects_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Projects_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewProjectsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.Get(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Projects_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.Project{
			Name:     to.Ptr("abgoyalWEselfhostb72bproject"),
			Type:     to.Ptr("Microsoft.Migrate/assessmentprojects"),
			ETag:     to.Ptr("\"0600c777-0000-0d00-0000-5cdaa4170000\""),
			ID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject"),
			Location: to.Ptr("westeurope"),
			Properties: &armmigrate.ProjectProperties{
				AssessmentSolutionID:    to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/abgoyal-westeurope/providers/microsoft.migrate/migrateprojects/abgoyalweselfhost/Solutions/Servers-Assessment-ServerAssessment"),
				CreatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T08:28:53.3305058Z"); return t }()),
				LastAssessmentTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T11:18:47.7893715Z"); return t }()),
				NumberOfAssessments:     to.Ptr[int32](3),
				NumberOfGroups:          to.Ptr[int32](2),
				NumberOfMachines:        to.Ptr[int32](28),
				ProjectStatus:           to.Ptr(armmigrate.ProjectStatusActive),
				ProvisioningState:       to.Ptr(armmigrate.ProvisioningStateSucceeded),
				ServiceEndpoint:         to.Ptr("https://asmsrvprodwe.prod.migration.windowsazure.com/"),
				UpdatedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:11:16.0228967Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Project) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Project)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Projects_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_Create(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Projects_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Projects_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewProjectsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.Create(ctx,
		"abgoyal-westEurope",
		"abGoyalProject2",
		&armmigrate.ProjectsClientCreateOptions{Project: &armmigrate.Project{
			ETag:     to.Ptr(""),
			Location: to.Ptr("West Europe"),
			Properties: &armmigrate.ProjectProperties{
				AssessmentSolutionID: to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/abgoyal-westeurope/providers/microsoft.migrate/migrateprojects/abgoyalweselfhost/Solutions/Servers-Assessment-ServerAssessment"),
				ProjectStatus:        to.Ptr(armmigrate.ProjectStatusActive),
			},
			Tags: map[string]interface{}{},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Projects_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.Project{
			Name:     to.Ptr("abGoyalProject2"),
			Type:     to.Ptr("Microsoft.Migrate/assessmentprojects"),
			ETag:     to.Ptr(""),
			ID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abGoyalProject2"),
			Location: to.Ptr("West Europe"),
			Properties: &armmigrate.ProjectProperties{
				AssessmentSolutionID: to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.Migrate/assessmentprojects/abGoyalProject2"),
				CreatedTimestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-26T05:56:58.7521828Z"); return t }()),
				NumberOfAssessments:  to.Ptr[int32](0),
				NumberOfGroups:       to.Ptr[int32](0),
				NumberOfMachines:     to.Ptr[int32](0),
				ProjectStatus:        to.Ptr(armmigrate.ProjectStatusActive),
				ServiceEndpoint:      to.Ptr("https://localhost/"),
				UpdatedTimestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-26T05:56:58.7990948Z"); return t }()),
			},
			Tags: map[string]interface{}{},
		}
		if !reflect.DeepEqual(exampleRes, res.Project) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Project)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Projects_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_Update(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Projects_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Projects_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewProjectsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.Update(ctx,
		"abgoyal-westEurope",
		"abGoyalProject2",
		&armmigrate.ProjectsClientUpdateOptions{Project: &armmigrate.Project{
			ETag:     to.Ptr(""),
			Location: to.Ptr("West Europe"),
			Properties: &armmigrate.ProjectProperties{
				AssessmentSolutionID: to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/abgoyal-westeurope/providers/microsoft.migrate/migrateprojects/abgoyalweselfhost/Solutions/Servers-Assessment-ServerAssessment"),
				ProjectStatus:        to.Ptr(armmigrate.ProjectStatusActive),
			},
			Tags: map[string]interface{}{},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Projects_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.Project{
			Name:     to.Ptr("abGoyalProject2"),
			Type:     to.Ptr("Microsoft.Migrate/assessmentprojects"),
			ETag:     to.Ptr(""),
			ID:       to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abGoyalProject2"),
			Location: to.Ptr("West Europe"),
			Properties: &armmigrate.ProjectProperties{
				AssessmentSolutionID: to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.Migrate/assessmentprojects/abGoyalProject2"),
				CreatedTimestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-26T05:56:58.7521828Z"); return t }()),
				NumberOfAssessments:  to.Ptr[int32](0),
				NumberOfGroups:       to.Ptr[int32](0),
				NumberOfMachines:     to.Ptr[int32](0),
				ProjectStatus:        to.Ptr(armmigrate.ProjectStatusActive),
				ServiceEndpoint:      to.Ptr("https://localhost/"),
				UpdatedTimestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-26T05:56:58.7990948Z"); return t }()),
			},
			Tags: map[string]interface{}{},
		}
		if !reflect.DeepEqual(exampleRes, res.Project) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Project)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Projects_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_Delete(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Projects_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Projects_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewProjectsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	_, err := client.Delete(ctx,
		"abgoyal-westEurope",
		"abGoyalProject2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Projects_Delete.json: %v", err)
	}
}

func TestProjects_AssessmentOptions(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/AssessmentOptions_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AssessmentOptions_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewProjectsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.AssessmentOptions(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/AssessmentOptions_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.AssessmentOptions{
			Name: to.Ptr("default"),
			ID:   to.Ptr("/subscriptions/5cbd71ba-5a65-4f0c-aea2-33dadde87b4e/resourceGroups/shsinglarg/providers/Microsoft.Migrate/assessmentprojects/shProject/assessmentOptions/default"),
			Properties: &armmigrate.AssessmentOptionsProperties{
				ReservedInstanceSupportedCurrencies: []*string{
					to.Ptr("USD"),
					to.Ptr("DKK"),
					to.Ptr("CAD"),
					to.Ptr("JPY"),
					to.Ptr("KRW"),
					to.Ptr("NZD"),
					to.Ptr("NOK"),
					to.Ptr("RUB"),
					to.Ptr("SEK"),
					to.Ptr("GBP"),
					to.Ptr("INR"),
					to.Ptr("BRL"),
					to.Ptr("TWD"),
					to.Ptr("EUR"),
					to.Ptr("CHF"),
					to.Ptr("AUD")},
				ReservedInstanceSupportedLocations: []*string{
					to.Ptr("EastAsia"),
					to.Ptr("SoutheastAsia"),
					to.Ptr("AustraliaEast"),
					to.Ptr("AustraliaSoutheast"),
					to.Ptr("BrazilSouth"),
					to.Ptr("CanadaCentral"),
					to.Ptr("CanadaEast"),
					to.Ptr("WestEurope"),
					to.Ptr("NorthEurope"),
					to.Ptr("CentralIndia"),
					to.Ptr("SouthIndia"),
					to.Ptr("WestIndia"),
					to.Ptr("JapanEast"),
					to.Ptr("JapanWest"),
					to.Ptr("KoreaCentral"),
					to.Ptr("KoreaSouth"),
					to.Ptr("UkWest"),
					to.Ptr("UkSouth"),
					to.Ptr("NorthCentralUs"),
					to.Ptr("EastUs"),
					to.Ptr("WestUs2"),
					to.Ptr("SouthCentralUs"),
					to.Ptr("CentralUs"),
					to.Ptr("EastUs2"),
					to.Ptr("WestUs"),
					to.Ptr("WestCentralUs")},
				ReservedInstanceSupportedOffers: []*string{
					to.Ptr("MSAZR0003P")},
				ReservedInstanceVMFamilies: []*string{
					to.Ptr("Dv2_series"),
					to.Ptr("F_series"),
					to.Ptr("Dv3_series"),
					to.Ptr("DS_series"),
					to.Ptr("DSv2_series"),
					to.Ptr("Fs_series"),
					to.Ptr("Dsv3_series"),
					to.Ptr("Ev3_series"),
					to.Ptr("Esv3_series"),
					to.Ptr("D_series"),
					to.Ptr("Fsv2_series"),
					to.Ptr("M_series"),
					to.Ptr("Ls_series"),
					to.Ptr("H_series")},
				VMFamilies: []*armmigrate.VMFamily{
					{
						Category: []*string{
							to.Ptr("GeneralPurpose")},
						FamilyName: to.Ptr("Standard_A0_A7"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("SouthIndia"),
							to.Ptr("WestIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("KoreaCentral"),
							to.Ptr("KoreaSouth"),
							to.Ptr("UkWest"),
							to.Ptr("UkSouth"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("WestCentralUs"),
							to.Ptr("FranceCentral"),
							to.Ptr("GermanyNortheast"),
							to.Ptr("GermanyCentral"),
							to.Ptr("USGovTexas"),
							to.Ptr("USGovArizona"),
							to.Ptr("USGovIowa"),
							to.Ptr("USGovVirginia"),
							to.Ptr("USDoDCentral"),
							to.Ptr("USDoDEast"),
							to.Ptr("ChinaNorth"),
							to.Ptr("ChinaEast")},
					},
					{
						Category: []*string{
							to.Ptr("GeneralPurpose")},
						FamilyName: to.Ptr("Basic_A0_A4"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("SouthIndia"),
							to.Ptr("WestIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("KoreaCentral"),
							to.Ptr("KoreaSouth"),
							to.Ptr("UkWest"),
							to.Ptr("UkSouth"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("WestCentralUs"),
							to.Ptr("FranceCentral"),
							to.Ptr("GermanyNortheast"),
							to.Ptr("GermanyCentral"),
							to.Ptr("USGovTexas"),
							to.Ptr("USGovArizona"),
							to.Ptr("USGovIowa"),
							to.Ptr("USGovVirginia"),
							to.Ptr("USDoDCentral"),
							to.Ptr("USDoDEast"),
							to.Ptr("ChinaNorth"),
							to.Ptr("ChinaEast")},
					},
					{
						Category: []*string{
							to.Ptr("GeneralPurpose"),
							to.Ptr("MemoryOptimized")},
						FamilyName: to.Ptr("Dv2_series"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("SouthIndia"),
							to.Ptr("WestIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("KoreaCentral"),
							to.Ptr("KoreaSouth"),
							to.Ptr("UkWest"),
							to.Ptr("UkSouth"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("WestCentralUs"),
							to.Ptr("FranceCentral"),
							to.Ptr("GermanyNortheast"),
							to.Ptr("GermanyCentral"),
							to.Ptr("USGovTexas"),
							to.Ptr("USGovArizona"),
							to.Ptr("USGovIowa"),
							to.Ptr("USGovVirginia"),
							to.Ptr("USDoDCentral"),
							to.Ptr("USDoDEast"),
							to.Ptr("ChinaNorth"),
							to.Ptr("ChinaEast")},
					},
					{
						Category: []*string{
							to.Ptr("ComputeOptimized")},
						FamilyName: to.Ptr("F_series"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("SouthIndia"),
							to.Ptr("WestIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("KoreaCentral"),
							to.Ptr("KoreaSouth"),
							to.Ptr("UkWest"),
							to.Ptr("UkSouth"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("WestCentralUs"),
							to.Ptr("FranceCentral"),
							to.Ptr("GermanyNortheast"),
							to.Ptr("GermanyCentral"),
							to.Ptr("USGovTexas"),
							to.Ptr("USGovArizona"),
							to.Ptr("USGovIowa"),
							to.Ptr("USGovVirginia"),
							to.Ptr("USDoDCentral"),
							to.Ptr("USDoDEast"),
							to.Ptr("ChinaNorth"),
							to.Ptr("ChinaEast")},
					},
					{
						Category: []*string{
							to.Ptr("GeneralPurpose")},
						FamilyName: to.Ptr("Av2_series"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("SouthIndia"),
							to.Ptr("WestIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("KoreaCentral"),
							to.Ptr("KoreaSouth"),
							to.Ptr("UkWest"),
							to.Ptr("UkSouth"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("WestCentralUs"),
							to.Ptr("FranceCentral"),
							to.Ptr("GermanyNortheast"),
							to.Ptr("GermanyCentral"),
							to.Ptr("USGovTexas"),
							to.Ptr("USGovArizona"),
							to.Ptr("USGovIowa"),
							to.Ptr("USGovVirginia"),
							to.Ptr("USDoDCentral"),
							to.Ptr("USDoDEast"),
							to.Ptr("ChinaNorth"),
							to.Ptr("ChinaEast")},
					},
					{
						Category: []*string{
							to.Ptr("GeneralPurpose")},
						FamilyName: to.Ptr("Dv3_series"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("SouthIndia"),
							to.Ptr("WestIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("KoreaCentral"),
							to.Ptr("KoreaSouth"),
							to.Ptr("UkWest"),
							to.Ptr("UkSouth"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("WestCentralUs"),
							to.Ptr("FranceCentral"),
							to.Ptr("GermanyNortheast"),
							to.Ptr("GermanyCentral"),
							to.Ptr("USGovTexas"),
							to.Ptr("USGovArizona"),
							to.Ptr("USGovIowa"),
							to.Ptr("USGovVirginia"),
							to.Ptr("ChinaEast")},
					},
					{
						Category: []*string{
							to.Ptr("GeneralPurpose"),
							to.Ptr("MemoryOptimized"),
							to.Ptr("SupportsPremiumStorage")},
						FamilyName: to.Ptr("DS_series"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("EastUs"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("USGovVirginia"),
							to.Ptr("ChinaNorth"),
							to.Ptr("ChinaEast")},
					},
					{
						Category: []*string{
							to.Ptr("GeneralPurpose"),
							to.Ptr("MemoryOptimized"),
							to.Ptr("SupportsPremiumStorage")},
						FamilyName: to.Ptr("DSv2_series"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("SouthIndia"),
							to.Ptr("WestIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("KoreaCentral"),
							to.Ptr("KoreaSouth"),
							to.Ptr("UkWest"),
							to.Ptr("UkSouth"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("WestCentralUs"),
							to.Ptr("FranceCentral"),
							to.Ptr("GermanyNortheast"),
							to.Ptr("GermanyCentral"),
							to.Ptr("USGovTexas"),
							to.Ptr("USGovArizona"),
							to.Ptr("USGovVirginia"),
							to.Ptr("USDoDCentral"),
							to.Ptr("USDoDEast"),
							to.Ptr("ChinaNorth"),
							to.Ptr("ChinaEast")},
					},
					{
						Category: []*string{
							to.Ptr("ComputeOptimized"),
							to.Ptr("SupportsPremiumStorage")},
						FamilyName: to.Ptr("Fs_series"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("SouthIndia"),
							to.Ptr("WestIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("KoreaCentral"),
							to.Ptr("KoreaSouth"),
							to.Ptr("UkWest"),
							to.Ptr("UkSouth"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("WestCentralUs"),
							to.Ptr("FranceCentral"),
							to.Ptr("GermanyNortheast"),
							to.Ptr("GermanyCentral"),
							to.Ptr("USGovTexas"),
							to.Ptr("USGovArizona"),
							to.Ptr("USGovVirginia"),
							to.Ptr("USDoDCentral"),
							to.Ptr("USDoDEast"),
							to.Ptr("ChinaNorth"),
							to.Ptr("ChinaEast")},
					},
					{
						Category: []*string{
							to.Ptr("GeneralPurpose"),
							to.Ptr("SupportsPremiumStorage")},
						FamilyName: to.Ptr("Dsv3_series"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("SouthIndia"),
							to.Ptr("WestIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("KoreaCentral"),
							to.Ptr("KoreaSouth"),
							to.Ptr("UkWest"),
							to.Ptr("UkSouth"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("WestCentralUs"),
							to.Ptr("FranceCentral"),
							to.Ptr("GermanyNortheast"),
							to.Ptr("GermanyCentral"),
							to.Ptr("USGovTexas"),
							to.Ptr("USGovArizona"),
							to.Ptr("USGovVirginia")},
					},
					{
						Category: []*string{
							to.Ptr("MemoryOptimized")},
						FamilyName: to.Ptr("Ev3_series"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("SouthIndia"),
							to.Ptr("WestIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("KoreaCentral"),
							to.Ptr("KoreaSouth"),
							to.Ptr("UkWest"),
							to.Ptr("UkSouth"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("WestCentralUs"),
							to.Ptr("FranceCentral"),
							to.Ptr("GermanyNortheast"),
							to.Ptr("GermanyCentral"),
							to.Ptr("USGovTexas"),
							to.Ptr("USGovArizona"),
							to.Ptr("USGovIowa"),
							to.Ptr("USGovVirginia"),
							to.Ptr("ChinaEast")},
					},
					{
						Category: []*string{
							to.Ptr("MemoryOptimized"),
							to.Ptr("SupportsPremiumStorage")},
						FamilyName: to.Ptr("Esv3_series"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("SouthIndia"),
							to.Ptr("WestIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("KoreaCentral"),
							to.Ptr("KoreaSouth"),
							to.Ptr("UkWest"),
							to.Ptr("UkSouth"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("WestCentralUs"),
							to.Ptr("FranceCentral"),
							to.Ptr("GermanyNortheast"),
							to.Ptr("GermanyCentral"),
							to.Ptr("USGovTexas"),
							to.Ptr("USGovArizona"),
							to.Ptr("USGovVirginia")},
					},
					{
						Category: []*string{
							to.Ptr("GeneralPurpose")},
						FamilyName: to.Ptr("D_series"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("USGovVirginia"),
							to.Ptr("ChinaNorth"),
							to.Ptr("ChinaEast")},
					},
					{
						Category: []*string{
							to.Ptr("ComputeOptimized"),
							to.Ptr("SupportsPremiumStorage")},
						FamilyName: to.Ptr("Fsv2_series"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("SouthIndia"),
							to.Ptr("WestIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("KoreaCentral"),
							to.Ptr("KoreaSouth"),
							to.Ptr("UkWest"),
							to.Ptr("UkSouth"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("FranceCentral"),
							to.Ptr("USGovArizona"),
							to.Ptr("USGovVirginia")},
					},
					{
						Category: []*string{
							to.Ptr("MemoryOptimized"),
							to.Ptr("SupportsPremiumStorage")},
						FamilyName: to.Ptr("M_series"),
						TargetLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("SouthIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("KoreaCentral"),
							to.Ptr("KoreaSouth"),
							to.Ptr("UkWest"),
							to.Ptr("UkSouth"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("USGovArizona"),
							to.Ptr("USGovVirginia")},
					},
					{
						Category: []*string{
							to.Ptr("MemoryOptimized")},
						FamilyName: to.Ptr("G_series"),
						TargetLocations: []*string{
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("JapanEast"),
							to.Ptr("UkSouth"),
							to.Ptr("WestUs2"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("GermanyCentral"),
							to.Ptr("USGovVirginia")},
					},
					{
						Category: []*string{
							to.Ptr("MemoryOptimized"),
							to.Ptr("SupportsPremiumStorage")},
						FamilyName: to.Ptr("GS_series"),
						TargetLocations: []*string{
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("JapanEast"),
							to.Ptr("UkSouth"),
							to.Ptr("WestUs2"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("GermanyCentral"),
							to.Ptr("USGovVirginia")},
					},
					{
						Category: []*string{
							to.Ptr("StorageOptimized"),
							to.Ptr("SupportsPremiumStorage")},
						FamilyName: to.Ptr("Ls_series"),
						TargetLocations: []*string{
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("JapanEast"),
							to.Ptr("UkSouth"),
							to.Ptr("WestUs2"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("GermanyCentral"),
							to.Ptr("USGovVirginia")},
					},
					{
						Category: []*string{
							to.Ptr("HighPerformanceCompute")},
						FamilyName: to.Ptr("H_series"),
						TargetLocations: []*string{
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("UkSouth"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("WestUs"),
							to.Ptr("USGovArizona")},
					},
					{
						Category: []*string{
							to.Ptr("GeneralPurpose"),
							to.Ptr("SupportsPremiumStorage"),
							to.Ptr("Confidential")},
						FamilyName: to.Ptr("DC_Series"),
						TargetLocations: []*string{
							to.Ptr("WestEurope"),
							to.Ptr("EastUs")},
					},
					{
						Category: []*string{
							to.Ptr("HighPerformanceCompute")},
						FamilyName: to.Ptr("Standard_A8_A11"),
						TargetLocations: []*string{
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("WestUs")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssessmentOptions) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssessmentOptions)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/AssessmentOptions_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_AssessmentOptionsList(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/AssessmentOptions_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AssessmentOptions_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewProjectsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	pager := client.AssessmentOptionsList("abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/AssessmentOptions_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmigrate.AssessmentOptionsResultList{
			Value: []*armmigrate.AssessmentOptions{
				{
					Name: to.Ptr("default"),
					ID:   to.Ptr("/subscriptions/5cbd71ba-5a65-4f0c-aea2-33dadde87b4e/resourceGroups/shsinglarg/providers/Microsoft.Migrate/assessmentprojects/shProject/assessmentOptions/default"),
					Properties: &armmigrate.AssessmentOptionsProperties{
						ReservedInstanceSupportedCurrencies: []*string{
							to.Ptr("USD"),
							to.Ptr("DKK"),
							to.Ptr("CAD"),
							to.Ptr("JPY"),
							to.Ptr("KRW"),
							to.Ptr("NZD"),
							to.Ptr("NOK"),
							to.Ptr("RUB"),
							to.Ptr("SEK"),
							to.Ptr("GBP"),
							to.Ptr("INR"),
							to.Ptr("BRL"),
							to.Ptr("TWD"),
							to.Ptr("EUR"),
							to.Ptr("CHF"),
							to.Ptr("AUD")},
						ReservedInstanceSupportedLocations: []*string{
							to.Ptr("EastAsia"),
							to.Ptr("SoutheastAsia"),
							to.Ptr("AustraliaEast"),
							to.Ptr("AustraliaSoutheast"),
							to.Ptr("BrazilSouth"),
							to.Ptr("CanadaCentral"),
							to.Ptr("CanadaEast"),
							to.Ptr("WestEurope"),
							to.Ptr("NorthEurope"),
							to.Ptr("CentralIndia"),
							to.Ptr("SouthIndia"),
							to.Ptr("WestIndia"),
							to.Ptr("JapanEast"),
							to.Ptr("JapanWest"),
							to.Ptr("KoreaCentral"),
							to.Ptr("KoreaSouth"),
							to.Ptr("UkWest"),
							to.Ptr("UkSouth"),
							to.Ptr("NorthCentralUs"),
							to.Ptr("EastUs"),
							to.Ptr("WestUs2"),
							to.Ptr("SouthCentralUs"),
							to.Ptr("CentralUs"),
							to.Ptr("EastUs2"),
							to.Ptr("WestUs"),
							to.Ptr("WestCentralUs")},
						ReservedInstanceSupportedOffers: []*string{
							to.Ptr("MSAZR0003P")},
						ReservedInstanceVMFamilies: []*string{
							to.Ptr("Dv2_series"),
							to.Ptr("F_series"),
							to.Ptr("Dv3_series"),
							to.Ptr("DS_series"),
							to.Ptr("DSv2_series"),
							to.Ptr("Fs_series"),
							to.Ptr("Dsv3_series"),
							to.Ptr("Ev3_series"),
							to.Ptr("Esv3_series"),
							to.Ptr("D_series"),
							to.Ptr("Fsv2_series"),
							to.Ptr("M_series"),
							to.Ptr("Ls_series"),
							to.Ptr("H_series")},
						VMFamilies: []*armmigrate.VMFamily{
							{
								Category: []*string{
									to.Ptr("GeneralPurpose")},
								FamilyName: to.Ptr("Standard_A0_A7"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("CentralIndia"),
									to.Ptr("SouthIndia"),
									to.Ptr("WestIndia"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("KoreaCentral"),
									to.Ptr("KoreaSouth"),
									to.Ptr("UkWest"),
									to.Ptr("UkSouth"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("WestUs2"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("CentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("WestCentralUs"),
									to.Ptr("FranceCentral"),
									to.Ptr("GermanyNortheast"),
									to.Ptr("GermanyCentral"),
									to.Ptr("USGovTexas"),
									to.Ptr("USGovArizona"),
									to.Ptr("USGovIowa"),
									to.Ptr("USGovVirginia"),
									to.Ptr("USDoDCentral"),
									to.Ptr("USDoDEast"),
									to.Ptr("ChinaNorth"),
									to.Ptr("ChinaEast")},
							},
							{
								Category: []*string{
									to.Ptr("GeneralPurpose")},
								FamilyName: to.Ptr("Basic_A0_A4"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("CentralIndia"),
									to.Ptr("SouthIndia"),
									to.Ptr("WestIndia"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("KoreaCentral"),
									to.Ptr("KoreaSouth"),
									to.Ptr("UkWest"),
									to.Ptr("UkSouth"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("WestUs2"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("CentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("WestCentralUs"),
									to.Ptr("FranceCentral"),
									to.Ptr("GermanyNortheast"),
									to.Ptr("GermanyCentral"),
									to.Ptr("USGovTexas"),
									to.Ptr("USGovArizona"),
									to.Ptr("USGovIowa"),
									to.Ptr("USGovVirginia"),
									to.Ptr("USDoDCentral"),
									to.Ptr("USDoDEast"),
									to.Ptr("ChinaNorth"),
									to.Ptr("ChinaEast")},
							},
							{
								Category: []*string{
									to.Ptr("GeneralPurpose"),
									to.Ptr("MemoryOptimized")},
								FamilyName: to.Ptr("Dv2_series"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("CentralIndia"),
									to.Ptr("SouthIndia"),
									to.Ptr("WestIndia"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("KoreaCentral"),
									to.Ptr("KoreaSouth"),
									to.Ptr("UkWest"),
									to.Ptr("UkSouth"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("WestUs2"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("CentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("WestCentralUs"),
									to.Ptr("FranceCentral"),
									to.Ptr("GermanyNortheast"),
									to.Ptr("GermanyCentral"),
									to.Ptr("USGovTexas"),
									to.Ptr("USGovArizona"),
									to.Ptr("USGovIowa"),
									to.Ptr("USGovVirginia"),
									to.Ptr("USDoDCentral"),
									to.Ptr("USDoDEast"),
									to.Ptr("ChinaNorth"),
									to.Ptr("ChinaEast")},
							},
							{
								Category: []*string{
									to.Ptr("ComputeOptimized")},
								FamilyName: to.Ptr("F_series"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("CentralIndia"),
									to.Ptr("SouthIndia"),
									to.Ptr("WestIndia"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("KoreaCentral"),
									to.Ptr("KoreaSouth"),
									to.Ptr("UkWest"),
									to.Ptr("UkSouth"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("WestUs2"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("CentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("WestCentralUs"),
									to.Ptr("FranceCentral"),
									to.Ptr("GermanyNortheast"),
									to.Ptr("GermanyCentral"),
									to.Ptr("USGovTexas"),
									to.Ptr("USGovArizona"),
									to.Ptr("USGovIowa"),
									to.Ptr("USGovVirginia"),
									to.Ptr("USDoDCentral"),
									to.Ptr("USDoDEast"),
									to.Ptr("ChinaNorth"),
									to.Ptr("ChinaEast")},
							},
							{
								Category: []*string{
									to.Ptr("GeneralPurpose")},
								FamilyName: to.Ptr("Av2_series"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("CentralIndia"),
									to.Ptr("SouthIndia"),
									to.Ptr("WestIndia"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("KoreaCentral"),
									to.Ptr("KoreaSouth"),
									to.Ptr("UkWest"),
									to.Ptr("UkSouth"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("WestUs2"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("CentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("WestCentralUs"),
									to.Ptr("FranceCentral"),
									to.Ptr("GermanyNortheast"),
									to.Ptr("GermanyCentral"),
									to.Ptr("USGovTexas"),
									to.Ptr("USGovArizona"),
									to.Ptr("USGovIowa"),
									to.Ptr("USGovVirginia"),
									to.Ptr("USDoDCentral"),
									to.Ptr("USDoDEast"),
									to.Ptr("ChinaNorth"),
									to.Ptr("ChinaEast")},
							},
							{
								Category: []*string{
									to.Ptr("GeneralPurpose")},
								FamilyName: to.Ptr("Dv3_series"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("CentralIndia"),
									to.Ptr("SouthIndia"),
									to.Ptr("WestIndia"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("KoreaCentral"),
									to.Ptr("KoreaSouth"),
									to.Ptr("UkWest"),
									to.Ptr("UkSouth"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("WestUs2"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("CentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("WestCentralUs"),
									to.Ptr("FranceCentral"),
									to.Ptr("GermanyNortheast"),
									to.Ptr("GermanyCentral"),
									to.Ptr("USGovTexas"),
									to.Ptr("USGovArizona"),
									to.Ptr("USGovIowa"),
									to.Ptr("USGovVirginia"),
									to.Ptr("ChinaEast")},
							},
							{
								Category: []*string{
									to.Ptr("GeneralPurpose"),
									to.Ptr("MemoryOptimized"),
									to.Ptr("SupportsPremiumStorage")},
								FamilyName: to.Ptr("DS_series"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("EastUs"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("CentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("USGovVirginia"),
									to.Ptr("ChinaNorth"),
									to.Ptr("ChinaEast")},
							},
							{
								Category: []*string{
									to.Ptr("GeneralPurpose"),
									to.Ptr("MemoryOptimized"),
									to.Ptr("SupportsPremiumStorage")},
								FamilyName: to.Ptr("DSv2_series"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("CentralIndia"),
									to.Ptr("SouthIndia"),
									to.Ptr("WestIndia"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("KoreaCentral"),
									to.Ptr("KoreaSouth"),
									to.Ptr("UkWest"),
									to.Ptr("UkSouth"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("WestUs2"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("CentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("WestCentralUs"),
									to.Ptr("FranceCentral"),
									to.Ptr("GermanyNortheast"),
									to.Ptr("GermanyCentral"),
									to.Ptr("USGovTexas"),
									to.Ptr("USGovArizona"),
									to.Ptr("USGovVirginia"),
									to.Ptr("USDoDCentral"),
									to.Ptr("USDoDEast"),
									to.Ptr("ChinaNorth"),
									to.Ptr("ChinaEast")},
							},
							{
								Category: []*string{
									to.Ptr("ComputeOptimized"),
									to.Ptr("SupportsPremiumStorage")},
								FamilyName: to.Ptr("Fs_series"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("CentralIndia"),
									to.Ptr("SouthIndia"),
									to.Ptr("WestIndia"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("KoreaCentral"),
									to.Ptr("KoreaSouth"),
									to.Ptr("UkWest"),
									to.Ptr("UkSouth"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("WestUs2"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("CentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("WestCentralUs"),
									to.Ptr("FranceCentral"),
									to.Ptr("GermanyNortheast"),
									to.Ptr("GermanyCentral"),
									to.Ptr("USGovTexas"),
									to.Ptr("USGovArizona"),
									to.Ptr("USGovVirginia"),
									to.Ptr("USDoDCentral"),
									to.Ptr("USDoDEast"),
									to.Ptr("ChinaNorth"),
									to.Ptr("ChinaEast")},
							},
							{
								Category: []*string{
									to.Ptr("GeneralPurpose"),
									to.Ptr("SupportsPremiumStorage")},
								FamilyName: to.Ptr("Dsv3_series"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("CentralIndia"),
									to.Ptr("SouthIndia"),
									to.Ptr("WestIndia"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("KoreaCentral"),
									to.Ptr("KoreaSouth"),
									to.Ptr("UkWest"),
									to.Ptr("UkSouth"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("WestUs2"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("CentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("WestCentralUs"),
									to.Ptr("FranceCentral"),
									to.Ptr("GermanyNortheast"),
									to.Ptr("GermanyCentral"),
									to.Ptr("USGovTexas"),
									to.Ptr("USGovArizona"),
									to.Ptr("USGovVirginia")},
							},
							{
								Category: []*string{
									to.Ptr("MemoryOptimized")},
								FamilyName: to.Ptr("Ev3_series"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("CentralIndia"),
									to.Ptr("SouthIndia"),
									to.Ptr("WestIndia"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("KoreaCentral"),
									to.Ptr("KoreaSouth"),
									to.Ptr("UkWest"),
									to.Ptr("UkSouth"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("WestUs2"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("CentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("WestCentralUs"),
									to.Ptr("FranceCentral"),
									to.Ptr("GermanyNortheast"),
									to.Ptr("GermanyCentral"),
									to.Ptr("USGovTexas"),
									to.Ptr("USGovArizona"),
									to.Ptr("USGovIowa"),
									to.Ptr("USGovVirginia"),
									to.Ptr("ChinaEast")},
							},
							{
								Category: []*string{
									to.Ptr("MemoryOptimized"),
									to.Ptr("SupportsPremiumStorage")},
								FamilyName: to.Ptr("Esv3_series"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("CentralIndia"),
									to.Ptr("SouthIndia"),
									to.Ptr("WestIndia"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("KoreaCentral"),
									to.Ptr("KoreaSouth"),
									to.Ptr("UkWest"),
									to.Ptr("UkSouth"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("WestUs2"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("CentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("WestCentralUs"),
									to.Ptr("FranceCentral"),
									to.Ptr("GermanyNortheast"),
									to.Ptr("GermanyCentral"),
									to.Ptr("USGovTexas"),
									to.Ptr("USGovArizona"),
									to.Ptr("USGovVirginia")},
							},
							{
								Category: []*string{
									to.Ptr("GeneralPurpose")},
								FamilyName: to.Ptr("D_series"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("CentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("USGovVirginia"),
									to.Ptr("ChinaNorth"),
									to.Ptr("ChinaEast")},
							},
							{
								Category: []*string{
									to.Ptr("ComputeOptimized"),
									to.Ptr("SupportsPremiumStorage")},
								FamilyName: to.Ptr("Fsv2_series"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("CentralIndia"),
									to.Ptr("SouthIndia"),
									to.Ptr("WestIndia"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("KoreaCentral"),
									to.Ptr("KoreaSouth"),
									to.Ptr("UkWest"),
									to.Ptr("UkSouth"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("WestUs2"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("CentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("FranceCentral"),
									to.Ptr("USGovArizona"),
									to.Ptr("USGovVirginia")},
							},
							{
								Category: []*string{
									to.Ptr("MemoryOptimized"),
									to.Ptr("SupportsPremiumStorage")},
								FamilyName: to.Ptr("M_series"),
								TargetLocations: []*string{
									to.Ptr("EastAsia"),
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("AustraliaSoutheast"),
									to.Ptr("BrazilSouth"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("CentralIndia"),
									to.Ptr("SouthIndia"),
									to.Ptr("JapanEast"),
									to.Ptr("JapanWest"),
									to.Ptr("KoreaCentral"),
									to.Ptr("KoreaSouth"),
									to.Ptr("UkWest"),
									to.Ptr("UkSouth"),
									to.Ptr("EastUs"),
									to.Ptr("WestUs2"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("EastUs2"),
									to.Ptr("USGovArizona"),
									to.Ptr("USGovVirginia")},
							},
							{
								Category: []*string{
									to.Ptr("MemoryOptimized")},
								FamilyName: to.Ptr("G_series"),
								TargetLocations: []*string{
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("JapanEast"),
									to.Ptr("UkSouth"),
									to.Ptr("WestUs2"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("GermanyCentral"),
									to.Ptr("USGovVirginia")},
							},
							{
								Category: []*string{
									to.Ptr("MemoryOptimized"),
									to.Ptr("SupportsPremiumStorage")},
								FamilyName: to.Ptr("GS_series"),
								TargetLocations: []*string{
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("JapanEast"),
									to.Ptr("UkSouth"),
									to.Ptr("WestUs2"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("GermanyCentral"),
									to.Ptr("USGovVirginia")},
							},
							{
								Category: []*string{
									to.Ptr("StorageOptimized"),
									to.Ptr("SupportsPremiumStorage")},
								FamilyName: to.Ptr("Ls_series"),
								TargetLocations: []*string{
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("CanadaCentral"),
									to.Ptr("CanadaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("JapanEast"),
									to.Ptr("UkSouth"),
									to.Ptr("WestUs2"),
									to.Ptr("EastUs2"),
									to.Ptr("WestUs"),
									to.Ptr("GermanyCentral"),
									to.Ptr("USGovVirginia")},
							},
							{
								Category: []*string{
									to.Ptr("HighPerformanceCompute")},
								FamilyName: to.Ptr("H_series"),
								TargetLocations: []*string{
									to.Ptr("SoutheastAsia"),
									to.Ptr("AustraliaEast"),
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("CentralIndia"),
									to.Ptr("JapanEast"),
									to.Ptr("UkSouth"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("WestUs2"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("WestUs"),
									to.Ptr("USGovArizona")},
							},
							{
								Category: []*string{
									to.Ptr("GeneralPurpose"),
									to.Ptr("SupportsPremiumStorage"),
									to.Ptr("Confidential")},
								FamilyName: to.Ptr("DC_Series"),
								TargetLocations: []*string{
									to.Ptr("WestEurope"),
									to.Ptr("EastUs")},
							},
							{
								Category: []*string{
									to.Ptr("HighPerformanceCompute")},
								FamilyName: to.Ptr("Standard_A8_A11"),
								TargetLocations: []*string{
									to.Ptr("WestEurope"),
									to.Ptr("NorthEurope"),
									to.Ptr("NorthCentralUs"),
									to.Ptr("EastUs"),
									to.Ptr("SouthCentralUs"),
									to.Ptr("WestUs")},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssessmentOptionsResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssessmentOptionsResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/AssessmentOptions_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMachines_ListByProject(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Machines_ListByProject.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Machines_ListByProject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewMachinesClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	pager := client.ListByProject("abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Machines_ListByProject.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmigrate.MachineResultList{
			Value: []*armmigrate.Machine{
				{
					Name: to.Ptr("269ef295-a38d-4f8f-9779-77ce79088311"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/machines"),
					ETag: to.Ptr("\"04006052-0000-0d00-0000-5cd4065a0000\""),
					ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/machines/269ef295-a38d-4f8f-9779-77ce79088311"),
					Properties: &armmigrate.MachineProperties{
						Description:                     to.Ptr("Microsoft Azure Migration Image on Windows Server 2016"),
						BootType:                        to.Ptr(armmigrate.MachineBootTypeBIOS),
						CreatedTimestamp:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T09:58:22.1734149Z"); return t }()),
						DatacenterManagementServerArmID: to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.OffAzure/VMwareSites/PortalvCenterbc2fsite/vcenters/idclab-a360-fareast-corp-micros-86617dcf-effe-59ad-8c3a-cdd3ea7300d3"),
						DatacenterManagementServerName:  to.Ptr("IDCLAB-A360.fareast.corp.microsoft.com"),
						DiscoveryMachineArmID:           to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/abgoyal-westeurope/providers/microsoft.offazure/vmwaresites/portalvcenterbc2fsite/machines/idclab-a360-fareast-corp-micros-86617dcf-effe-59ad-8c3a-cdd3ea7300d3_52bd4eeb-faf4-7d95-4dd5-5524350ce2bb"),
						Disks: map[string]*armmigrate.Disk{
							"6000C29f-9065-8fe0-ab83-7e58ff6ba442": {
								DisplayName:        to.Ptr("scsi0:0"),
								GigabytesAllocated: to.Ptr[float64](80),
							},
						},
						DisplayName: to.Ptr("ShubhamFirstAndThird"),
						Groups: []*string{
							to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/test1")},
						MegabytesOfMemory: to.Ptr[float32](16384),
						NetworkAdapters: map[string]*armmigrate.NetworkAdapter{
							"4000": {
								DisplayName: to.Ptr("VM Network"),
								IPAddresses: []*string{},
								MacAddress:  to.Ptr("00:0c:29:ac:e3:6d"),
							},
						},
						NumberOfCores:       to.Ptr[int32](8),
						OperatingSystemName: to.Ptr("Microsoft Windows Server 2016 (64-bit)"),
						OperatingSystemType: to.Ptr("windowsGuest"),
						UpdatedTimestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T09:58:22.2990529Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("3ad6c8b7-08d6-45dc-87f5-cd533501f553"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/machines"),
					ETag: to.Ptr("\"04005652-0000-0d00-0000-5cd4065a0000\""),
					ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/machines/3ad6c8b7-08d6-45dc-87f5-cd533501f553"),
					Properties: &armmigrate.MachineProperties{
						Description:                     to.Ptr("Microsoft Azure Migration Image on Windows Server 2016"),
						BootType:                        to.Ptr(armmigrate.MachineBootTypeBIOS),
						CreatedTimestamp:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T09:58:22.1734149Z"); return t }()),
						DatacenterManagementServerArmID: to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.OffAzure/VMwareSites/PortalvCenterbc2fsite/vcenters/idclab-a360-fareast-corp-micros-86617dcf-effe-59ad-8c3a-cdd3ea7300d3"),
						DatacenterManagementServerName:  to.Ptr("IDCLAB-A360.fareast.corp.microsoft.com"),
						DiscoveryMachineArmID:           to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/abgoyal-westeurope/providers/microsoft.offazure/vmwaresites/portalvcenterbc2fsite/machines/idclab-a360-fareast-corp-micros-86617dcf-effe-59ad-8c3a-cdd3ea7300d3_52e5be9c-2758-a483-c252-eeef7919095c"),
						Disks: map[string]*armmigrate.Disk{
							"6000C296-54c9-e29c-51be-125e76850958": {
								DisplayName:        to.Ptr("scsi0:0"),
								GigabytesAllocated: to.Ptr[float64](80),
							},
						},
						DisplayName: to.Ptr("shsinglaVM5"),
						Groups: []*string{
							to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/test1")},
						MegabytesOfMemory: to.Ptr[float32](16384),
						NetworkAdapters: map[string]*armmigrate.NetworkAdapter{
							"4000": {
								DisplayName: to.Ptr("VM Network"),
								IPAddresses: []*string{},
								MacAddress:  to.Ptr("00:0c:29:1f:ac:0a"),
							},
						},
						NumberOfCores:       to.Ptr[int32](8),
						OperatingSystemName: to.Ptr("Microsoft Windows Server 2016 (64-bit)"),
						OperatingSystemType: to.Ptr("windowsGuest"),
						UpdatedTimestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T09:58:22.3142054Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MachineResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MachineResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Machines_ListByProject.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMachines_Get(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Machines_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Machines_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewMachinesClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.Get(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"269ef295-a38d-4f8f-9779-77ce79088311",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Machines_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.Machine{
			Name: to.Ptr("269ef295-a38d-4f8f-9779-77ce79088311"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/machines"),
			ETag: to.Ptr("\"04006052-0000-0d00-0000-5cd4065a0000\""),
			ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/machines/269ef295-a38d-4f8f-9779-77ce79088311"),
			Properties: &armmigrate.MachineProperties{
				Description:                     to.Ptr("Microsoft Azure Migration Image on Windows Server 2016"),
				BootType:                        to.Ptr(armmigrate.MachineBootTypeBIOS),
				CreatedTimestamp:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T09:58:22.1734149Z"); return t }()),
				DatacenterManagementServerArmID: to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.OffAzure/VMwareSites/PortalvCenterbc2fsite/vcenters/idclab-a360-fareast-corp-micros-86617dcf-effe-59ad-8c3a-cdd3ea7300d3"),
				DatacenterManagementServerName:  to.Ptr("IDCLAB-A360.fareast.corp.microsoft.com"),
				DiscoveryMachineArmID:           to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/abgoyal-westeurope/providers/microsoft.offazure/vmwaresites/portalvcenterbc2fsite/machines/idclab-a360-fareast-corp-micros-86617dcf-effe-59ad-8c3a-cdd3ea7300d3_52bd4eeb-faf4-7d95-4dd5-5524350ce2bb"),
				Disks: map[string]*armmigrate.Disk{
					"6000C29f-9065-8fe0-ab83-7e58ff6ba442": {
						DisplayName:        to.Ptr("scsi0:0"),
						GigabytesAllocated: to.Ptr[float64](80),
					},
				},
				DisplayName: to.Ptr("ShubhamFirstAndThird"),
				Groups: []*string{
					to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/test1")},
				MegabytesOfMemory: to.Ptr[float32](16384),
				NetworkAdapters: map[string]*armmigrate.NetworkAdapter{
					"4000": {
						DisplayName: to.Ptr("VM Network"),
						IPAddresses: []*string{},
						MacAddress:  to.Ptr("00:0c:29:ac:e3:6d"),
					},
				},
				NumberOfCores:       to.Ptr[int32](8),
				OperatingSystemName: to.Ptr("Microsoft Windows Server 2016 (64-bit)"),
				OperatingSystemType: to.Ptr("windowsGuest"),
				UpdatedTimestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T09:58:22.2990529Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Machine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Machine)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Machines_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGroups_ListByProject(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Groups_ListByProject.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Groups_ListByProject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewGroupsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	pager := client.ListByProject("abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Groups_ListByProject.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmigrate.GroupResultList{
			Value: []*armmigrate.Group{
				{
					Name: to.Ptr("Test1"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/groups"),
					ETag: to.Ptr("\"21009c31-0000-0d00-0000-5cd585ad0000\""),
					ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Test1"),
					Properties: &armmigrate.GroupProperties{
						AreAssessmentsRunning: to.Ptr(false),
						Assessments: []*string{
							to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Test1/assessments/assessment_5_9_2019_16_22_14")},
						CreatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:07.7368474Z"); return t }()),
						GroupStatus:      to.Ptr(armmigrate.GroupStatusCompleted),
						MachineCount:     to.Ptr[int32](26),
						UpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-10T14:07:41.752989Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("Group2"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/groups"),
					ETag: to.Ptr("\"1e000c2c-0000-0d00-0000-5cdaa4190000\""),
					ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Group2"),
					Properties: &armmigrate.GroupProperties{
						AreAssessmentsRunning: to.Ptr(false),
						Assessments: []*string{
							to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Group2/assessments/assessment_5_9_2019_17_0_56"),
							to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Group2/assessments/assessment_5_14_2019_16_48_47")},
						CreatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:56.1574737Z"); return t }()),
						GroupStatus:      to.Ptr(armmigrate.GroupStatusCompleted),
						MachineCount:     to.Ptr[int32](5),
						UpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T11:18:49.5485462Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GroupResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GroupResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Groups_ListByProject.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGroups_Get(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Groups_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Groups_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewGroupsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.Get(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Groups_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.Group{
			Name: to.Ptr("Test1"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/groups"),
			ETag: to.Ptr("\"21009c31-0000-0d00-0000-5cd585ad0000\""),
			ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Test1"),
			Properties: &armmigrate.GroupProperties{
				AreAssessmentsRunning: to.Ptr(false),
				Assessments: []*string{
					to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Test1/assessments/assessment_5_9_2019_16_22_14")},
				CreatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:07.7368474Z"); return t }()),
				GroupStatus:      to.Ptr(armmigrate.GroupStatusCompleted),
				MachineCount:     to.Ptr[int32](26),
				UpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-10T14:07:41.752989Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Group) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Group)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Groups_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGroups_Create(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Groups_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Groups_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewGroupsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.Create(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Group2",
		&armmigrate.GroupsClientCreateOptions{Group: &armmigrate.Group{
			ETag:       to.Ptr("\"1e000c2c-0000-0d00-0000-5cdaa4190000\""),
			Properties: &armmigrate.GroupProperties{},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Groups_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.Group{
			Name: to.Ptr("Group2"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/groups"),
			ETag: to.Ptr("\"1e000c2c-0000-0d00-0000-5cdaa4190000\""),
			ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Group2"),
			Properties: &armmigrate.GroupProperties{
				AreAssessmentsRunning: to.Ptr(false),
				Assessments:           []*string{},
				CreatedTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:56.1574737Z"); return t }()),
				GroupStatus:           to.Ptr(armmigrate.GroupStatusCompleted),
				MachineCount:          to.Ptr[int32](0),
				UpdatedTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T11:18:49.5485462Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Group) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Group)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Groups_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGroups_Delete(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Groups_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Groups_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewGroupsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	_, err := client.Delete(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Groups_Delete.json: %v", err)
	}
}

func TestGroups_UpdateMachines(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Groups_UpdateMachines.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Groups_UpdateMachines"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewGroupsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.UpdateMachines(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Group2",
		&armmigrate.GroupsClientUpdateMachinesOptions{GroupUpdateProperties: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Groups_UpdateMachines.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.Group{
			Name: to.Ptr("Group2"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/groups"),
			ETag: to.Ptr("\"1e000c2c-0000-0d00-0000-5cdaa4190000\""),
			ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Test1"),
			Properties: &armmigrate.GroupProperties{
				AreAssessmentsRunning: to.Ptr(false),
				Assessments: []*string{
					to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Test1/assessments/assessment_5_9_2019_16_22_14")},
				CreatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:07.7368474Z"); return t }()),
				GroupStatus:      to.Ptr(armmigrate.GroupStatusCompleted),
				MachineCount:     to.Ptr[int32](26),
				UpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-10T14:07:41.752989Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Group) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Group)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Groups_UpdateMachines.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssessments_ListByGroup(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Assessments_ListByGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assessments_ListByGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewAssessmentsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	pager := client.ListByGroup("abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Assessments_ListByGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmigrate.AssessmentResultList{
			Value: []*armmigrate.Assessment{
				{
					Name: to.Ptr("assessment_5_9_2019_16_22_14"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/groups/assessments"),
					ETag: to.Ptr("\"21009c31-0000-0d00-0000-5cd585ad0000\""),
					ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Test1/assessments/assessment_5_9_2019_16_22_14"),
					Properties: &armmigrate.AssessmentProperties{
						AzureDiskType:          to.Ptr(armmigrate.AzureDiskTypeStandardOrPremium),
						AzureHybridUseBenefit:  to.Ptr(armmigrate.AzureHybridUseBenefitYes),
						AzureLocation:          to.Ptr(armmigrate.AzureLocationNorthEurope),
						AzureOfferCode:         to.Ptr(armmigrate.AzureOfferCodeMSAZR0003P),
						AzurePricingTier:       to.Ptr(armmigrate.AzurePricingTierStandard),
						AzureStorageRedundancy: to.Ptr(armmigrate.AzureStorageRedundancyLocallyRedundant),
						AzureVMFamilies: []*armmigrate.AzureVMFamily{
							to.Ptr(armmigrate.AzureVMFamilyDv2Series),
							to.Ptr(armmigrate.AzureVMFamilyFSeries),
							to.Ptr(armmigrate.AzureVMFamilyDv3Series),
							to.Ptr(armmigrate.AzureVMFamilyDSSeries),
							to.Ptr(armmigrate.AzureVMFamilyDSv2Series),
							to.Ptr(armmigrate.AzureVMFamilyFsSeries),
							to.Ptr(armmigrate.AzureVMFamilyDsv3Series),
							to.Ptr(armmigrate.AzureVMFamilyEv3Series),
							to.Ptr(armmigrate.AzureVMFamilyEsv3Series),
							to.Ptr(armmigrate.AzureVMFamilyDSeries),
							to.Ptr(armmigrate.AzureVMFamilyMSeries),
							to.Ptr(armmigrate.AzureVMFamilyFsv2Series),
							to.Ptr(armmigrate.AzureVMFamilyHSeries)},
						ConfidenceRatingInPercentage:  to.Ptr[float64](0),
						CreatedTimestamp:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:14.4896347Z"); return t }()),
						Currency:                      to.Ptr(armmigrate.CurrencyUSD),
						DiscountPercentage:            to.Ptr[float64](0),
						MonthlyBandwidthCost:          to.Ptr[float64](0),
						MonthlyComputeCost:            to.Ptr[float64](2588.830584),
						MonthlyPremiumStorageCost:     to.Ptr[float64](0),
						MonthlyStandardSSDStorageCost: to.Ptr[float64](0),
						MonthlyStorageCost:            to.Ptr[float64](238.016),
						NumberOfMachines:              to.Ptr[int32](26),
						Percentile:                    to.Ptr(armmigrate.PercentilePercentile95),
						PerfDataEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:14.4896347Z"); return t }()),
						PerfDataStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-08T10:52:14.4896347Z"); return t }()),
						PricesTimestamp:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-26T11:07:37.139768Z"); return t }()),
						ReservedInstance:              to.Ptr(armmigrate.ReservedInstanceRI3Year),
						ScalingFactor:                 to.Ptr[float64](1),
						SizingCriterion:               to.Ptr(armmigrate.AssessmentSizingCriterionPerformanceBased),
						Stage:                         to.Ptr(armmigrate.AssessmentStageInProgress),
						Status:                        to.Ptr(armmigrate.AssessmentStatusOutDated),
						TimeRange:                     to.Ptr(armmigrate.TimeRangeDay),
						UpdatedTimestamp:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:14.4896347Z"); return t }()),
						VMUptime: &armmigrate.VMUptime{
							DaysPerMonth: to.Ptr[int32](31),
							HoursPerDay:  to.Ptr[int32](24),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssessmentResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssessmentResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Assessments_ListByGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssessments_ListByProject(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Assessments_ListByProject.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assessments_ListByProject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewAssessmentsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	pager := client.ListByProject("abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Assessments_ListByProject.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmigrate.AssessmentResultList{
			Value: []*armmigrate.Assessment{
				{
					Name: to.Ptr("assessment_5_9_2019_16_22_14"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/groups/assessments"),
					ETag: to.Ptr("\"21009c31-0000-0d00-0000-5cd585ad0000\""),
					ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Test1/assessments/assessment_5_9_2019_16_22_14"),
					Properties: &armmigrate.AssessmentProperties{
						AzureDiskType:          to.Ptr(armmigrate.AzureDiskTypeStandardOrPremium),
						AzureHybridUseBenefit:  to.Ptr(armmigrate.AzureHybridUseBenefitYes),
						AzureLocation:          to.Ptr(armmigrate.AzureLocationNorthEurope),
						AzureOfferCode:         to.Ptr(armmigrate.AzureOfferCodeMSAZR0003P),
						AzurePricingTier:       to.Ptr(armmigrate.AzurePricingTierStandard),
						AzureStorageRedundancy: to.Ptr(armmigrate.AzureStorageRedundancyLocallyRedundant),
						AzureVMFamilies: []*armmigrate.AzureVMFamily{
							to.Ptr(armmigrate.AzureVMFamilyDv2Series),
							to.Ptr(armmigrate.AzureVMFamilyFSeries),
							to.Ptr(armmigrate.AzureVMFamilyDv3Series),
							to.Ptr(armmigrate.AzureVMFamilyDSSeries),
							to.Ptr(armmigrate.AzureVMFamilyDSv2Series),
							to.Ptr(armmigrate.AzureVMFamilyFsSeries),
							to.Ptr(armmigrate.AzureVMFamilyDsv3Series),
							to.Ptr(armmigrate.AzureVMFamilyEv3Series),
							to.Ptr(armmigrate.AzureVMFamilyEsv3Series),
							to.Ptr(armmigrate.AzureVMFamilyDSeries),
							to.Ptr(armmigrate.AzureVMFamilyMSeries),
							to.Ptr(armmigrate.AzureVMFamilyFsv2Series),
							to.Ptr(armmigrate.AzureVMFamilyHSeries)},
						ConfidenceRatingInPercentage:  to.Ptr[float64](0),
						CreatedTimestamp:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:14.4896347Z"); return t }()),
						Currency:                      to.Ptr(armmigrate.CurrencyUSD),
						DiscountPercentage:            to.Ptr[float64](0),
						MonthlyBandwidthCost:          to.Ptr[float64](0),
						MonthlyComputeCost:            to.Ptr[float64](2588.830584),
						MonthlyPremiumStorageCost:     to.Ptr[float64](0),
						MonthlyStandardSSDStorageCost: to.Ptr[float64](0),
						MonthlyStorageCost:            to.Ptr[float64](238.016),
						NumberOfMachines:              to.Ptr[int32](26),
						Percentile:                    to.Ptr(armmigrate.PercentilePercentile95),
						PerfDataEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:14.4896347Z"); return t }()),
						PerfDataStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-08T10:52:14.4896347Z"); return t }()),
						PricesTimestamp:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-26T11:07:37.139768Z"); return t }()),
						ReservedInstance:              to.Ptr(armmigrate.ReservedInstanceRI3Year),
						ScalingFactor:                 to.Ptr[float64](1),
						SizingCriterion:               to.Ptr(armmigrate.AssessmentSizingCriterionPerformanceBased),
						Stage:                         to.Ptr(armmigrate.AssessmentStageInProgress),
						Status:                        to.Ptr(armmigrate.AssessmentStatusOutDated),
						TimeRange:                     to.Ptr(armmigrate.TimeRangeDay),
						UpdatedTimestamp:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:14.4896347Z"); return t }()),
						VMUptime: &armmigrate.VMUptime{
							DaysPerMonth: to.Ptr[int32](31),
							HoursPerDay:  to.Ptr[int32](24),
						},
					},
				},
				{
					Name: to.Ptr("assessment_5_9_2019_17_0_56"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/groups/assessments"),
					ETag: to.Ptr("\"1e000c2c-0000-0d00-0000-5cdaa4190000\""),
					ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Group2/assessments/assessment_5_9_2019_17_0_56"),
					Properties: &armmigrate.AssessmentProperties{
						AzureDiskType:          to.Ptr(armmigrate.AzureDiskTypeStandardOrPremium),
						AzureHybridUseBenefit:  to.Ptr(armmigrate.AzureHybridUseBenefitYes),
						AzureLocation:          to.Ptr(armmigrate.AzureLocationNorthEurope),
						AzureOfferCode:         to.Ptr(armmigrate.AzureOfferCodeMSAZR0003P),
						AzurePricingTier:       to.Ptr(armmigrate.AzurePricingTierStandard),
						AzureStorageRedundancy: to.Ptr(armmigrate.AzureStorageRedundancyLocallyRedundant),
						AzureVMFamilies: []*armmigrate.AzureVMFamily{
							to.Ptr(armmigrate.AzureVMFamilyDv2Series),
							to.Ptr(armmigrate.AzureVMFamilyFSeries),
							to.Ptr(armmigrate.AzureVMFamilyDv3Series),
							to.Ptr(armmigrate.AzureVMFamilyDSSeries),
							to.Ptr(armmigrate.AzureVMFamilyDSv2Series),
							to.Ptr(armmigrate.AzureVMFamilyFsSeries),
							to.Ptr(armmigrate.AzureVMFamilyDsv3Series),
							to.Ptr(armmigrate.AzureVMFamilyEv3Series),
							to.Ptr(armmigrate.AzureVMFamilyEsv3Series),
							to.Ptr(armmigrate.AzureVMFamilyDSeries),
							to.Ptr(armmigrate.AzureVMFamilyMSeries),
							to.Ptr(armmigrate.AzureVMFamilyFsv2Series),
							to.Ptr(armmigrate.AzureVMFamilyHSeries)},
						ConfidenceRatingInPercentage:  to.Ptr[float64](0),
						CreatedTimestamp:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T11:30:57.0035869Z"); return t }()),
						Currency:                      to.Ptr(armmigrate.CurrencyUSD),
						DiscountPercentage:            to.Ptr[float64](0),
						MonthlyBandwidthCost:          to.Ptr[float64](0),
						MonthlyComputeCost:            to.Ptr[float64](607.443264),
						MonthlyPremiumStorageCost:     to.Ptr[float64](0),
						MonthlyStandardSSDStorageCost: to.Ptr[float64](0),
						MonthlyStorageCost:            to.Ptr[float64](111.36),
						NumberOfMachines:              to.Ptr[int32](5),
						Percentile:                    to.Ptr(armmigrate.PercentilePercentile95),
						PerfDataEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T11:30:57.0035869Z"); return t }()),
						PerfDataStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-08T11:30:57.0035869Z"); return t }()),
						PricesTimestamp:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-26T11:07:37.139768Z"); return t }()),
						ReservedInstance:              to.Ptr(armmigrate.ReservedInstanceRI3Year),
						ScalingFactor:                 to.Ptr[float64](1),
						SizingCriterion:               to.Ptr(armmigrate.AssessmentSizingCriterionPerformanceBased),
						Stage:                         to.Ptr(armmigrate.AssessmentStageInProgress),
						Status:                        to.Ptr(armmigrate.AssessmentStatusCompleted),
						TimeRange:                     to.Ptr(armmigrate.TimeRangeDay),
						UpdatedTimestamp:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T11:30:57.0035869Z"); return t }()),
						VMUptime: &armmigrate.VMUptime{
							DaysPerMonth: to.Ptr[int32](31),
							HoursPerDay:  to.Ptr[int32](24),
						},
					},
				},
				{
					Name: to.Ptr("assessment_5_14_2019_16_48_47"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/groups/assessments"),
					ETag: to.Ptr("\"1e000c2c-0000-0d00-0000-5cdaa4190000\""),
					ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Group2/assessments/assessment_5_14_2019_16_48_47"),
					Properties: &armmigrate.AssessmentProperties{
						AzureDiskType:          to.Ptr(armmigrate.AzureDiskTypeStandardOrPremium),
						AzureHybridUseBenefit:  to.Ptr(armmigrate.AzureHybridUseBenefitYes),
						AzureLocation:          to.Ptr(armmigrate.AzureLocationNorthEurope),
						AzureOfferCode:         to.Ptr(armmigrate.AzureOfferCodeMSAZR0003P),
						AzurePricingTier:       to.Ptr(armmigrate.AzurePricingTierStandard),
						AzureStorageRedundancy: to.Ptr(armmigrate.AzureStorageRedundancyLocallyRedundant),
						AzureVMFamilies: []*armmigrate.AzureVMFamily{
							to.Ptr(armmigrate.AzureVMFamilyDv2Series),
							to.Ptr(armmigrate.AzureVMFamilyFSeries),
							to.Ptr(armmigrate.AzureVMFamilyDv3Series),
							to.Ptr(armmigrate.AzureVMFamilyDSSeries),
							to.Ptr(armmigrate.AzureVMFamilyDSv2Series),
							to.Ptr(armmigrate.AzureVMFamilyFsSeries),
							to.Ptr(armmigrate.AzureVMFamilyDsv3Series),
							to.Ptr(armmigrate.AzureVMFamilyEv3Series),
							to.Ptr(armmigrate.AzureVMFamilyEsv3Series),
							to.Ptr(armmigrate.AzureVMFamilyDSeries),
							to.Ptr(armmigrate.AzureVMFamilyMSeries),
							to.Ptr(armmigrate.AzureVMFamilyFsv2Series),
							to.Ptr(armmigrate.AzureVMFamilyHSeries)},
						ConfidenceRatingInPercentage:  to.Ptr[float64](0),
						CreatedTimestamp:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T11:18:47.7893715Z"); return t }()),
						Currency:                      to.Ptr(armmigrate.CurrencyUSD),
						DiscountPercentage:            to.Ptr[float64](0),
						MonthlyBandwidthCost:          to.Ptr[float64](0),
						MonthlyComputeCost:            to.Ptr[float64](607.443264),
						MonthlyPremiumStorageCost:     to.Ptr[float64](0),
						MonthlyStandardSSDStorageCost: to.Ptr[float64](0),
						MonthlyStorageCost:            to.Ptr[float64](111.36),
						NumberOfMachines:              to.Ptr[int32](5),
						Percentile:                    to.Ptr(armmigrate.PercentilePercentile95),
						PerfDataEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T11:18:47.7893715Z"); return t }()),
						PerfDataStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-13T11:18:47.7893715Z"); return t }()),
						PricesTimestamp:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-26T11:07:37.139768Z"); return t }()),
						ReservedInstance:              to.Ptr(armmigrate.ReservedInstanceRI3Year),
						ScalingFactor:                 to.Ptr[float64](1),
						SizingCriterion:               to.Ptr(armmigrate.AssessmentSizingCriterionPerformanceBased),
						Stage:                         to.Ptr(armmigrate.AssessmentStageInProgress),
						Status:                        to.Ptr(armmigrate.AssessmentStatusCompleted),
						TimeRange:                     to.Ptr(armmigrate.TimeRangeDay),
						UpdatedTimestamp:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T11:18:47.7893715Z"); return t }()),
						VMUptime: &armmigrate.VMUptime{
							DaysPerMonth: to.Ptr[int32](31),
							HoursPerDay:  to.Ptr[int32](24),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssessmentResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssessmentResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Assessments_ListByProject.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssessments_Get(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Assessments_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assessments_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewAssessmentsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.Get(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		"assessment_5_9_2019_16_22_14",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Assessments_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.Assessment{
			Name: to.Ptr("assessment_5_9_2019_16_22_14"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/groups/assessments"),
			ETag: to.Ptr("\"21009c31-0000-0d00-0000-5cd585ad0000\""),
			ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Test1/assessments/assessment_5_9_2019_16_22_14"),
			Properties: &armmigrate.AssessmentProperties{
				AzureDiskType:          to.Ptr(armmigrate.AzureDiskTypeStandardOrPremium),
				AzureHybridUseBenefit:  to.Ptr(armmigrate.AzureHybridUseBenefitYes),
				AzureLocation:          to.Ptr(armmigrate.AzureLocationNorthEurope),
				AzureOfferCode:         to.Ptr(armmigrate.AzureOfferCodeMSAZR0003P),
				AzurePricingTier:       to.Ptr(armmigrate.AzurePricingTierStandard),
				AzureStorageRedundancy: to.Ptr(armmigrate.AzureStorageRedundancyLocallyRedundant),
				AzureVMFamilies: []*armmigrate.AzureVMFamily{
					to.Ptr(armmigrate.AzureVMFamilyDv2Series),
					to.Ptr(armmigrate.AzureVMFamilyFSeries),
					to.Ptr(armmigrate.AzureVMFamilyDv3Series),
					to.Ptr(armmigrate.AzureVMFamilyDSSeries),
					to.Ptr(armmigrate.AzureVMFamilyDSv2Series),
					to.Ptr(armmigrate.AzureVMFamilyFsSeries),
					to.Ptr(armmigrate.AzureVMFamilyDsv3Series),
					to.Ptr(armmigrate.AzureVMFamilyEv3Series),
					to.Ptr(armmigrate.AzureVMFamilyEsv3Series),
					to.Ptr(armmigrate.AzureVMFamilyDSeries),
					to.Ptr(armmigrate.AzureVMFamilyMSeries),
					to.Ptr(armmigrate.AzureVMFamilyFsv2Series),
					to.Ptr(armmigrate.AzureVMFamilyHSeries)},
				ConfidenceRatingInPercentage:  to.Ptr[float64](0),
				CreatedTimestamp:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:14.4896347Z"); return t }()),
				Currency:                      to.Ptr(armmigrate.CurrencyUSD),
				DiscountPercentage:            to.Ptr[float64](0),
				MonthlyBandwidthCost:          to.Ptr[float64](0),
				MonthlyComputeCost:            to.Ptr[float64](2588.830584),
				MonthlyPremiumStorageCost:     to.Ptr[float64](0),
				MonthlyStandardSSDStorageCost: to.Ptr[float64](0),
				MonthlyStorageCost:            to.Ptr[float64](238.016),
				NumberOfMachines:              to.Ptr[int32](26),
				Percentile:                    to.Ptr(armmigrate.PercentilePercentile95),
				PerfDataEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:14.4896347Z"); return t }()),
				PerfDataStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-08T10:52:14.4896347Z"); return t }()),
				PricesTimestamp:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-26T11:07:37.139768Z"); return t }()),
				ReservedInstance:              to.Ptr(armmigrate.ReservedInstanceRI3Year),
				ScalingFactor:                 to.Ptr[float64](1),
				SizingCriterion:               to.Ptr(armmigrate.AssessmentSizingCriterionPerformanceBased),
				Stage:                         to.Ptr(armmigrate.AssessmentStageInProgress),
				Status:                        to.Ptr(armmigrate.AssessmentStatusOutDated),
				TimeRange:                     to.Ptr(armmigrate.TimeRangeDay),
				UpdatedTimestamp:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:14.4896347Z"); return t }()),
				VMUptime: &armmigrate.VMUptime{
					DaysPerMonth: to.Ptr[int32](31),
					HoursPerDay:  to.Ptr[int32](24),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Assessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Assessment)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Assessments_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssessments_Create(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Assessments_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assessments_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewAssessmentsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.Create(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Group2",
		"assessment_5_14_2019_16_48_47",
		&armmigrate.AssessmentsClientCreateOptions{Assessment: &armmigrate.Assessment{
			ETag: to.Ptr("\"1e000c2c-0000-0d00-0000-5cdaa4190000\""),
			Properties: &armmigrate.AssessmentProperties{
				AzureDiskType:          to.Ptr(armmigrate.AzureDiskTypeStandardOrPremium),
				AzureHybridUseBenefit:  to.Ptr(armmigrate.AzureHybridUseBenefitYes),
				AzureLocation:          to.Ptr(armmigrate.AzureLocationNorthEurope),
				AzureOfferCode:         to.Ptr(armmigrate.AzureOfferCodeMSAZR0003P),
				AzurePricingTier:       to.Ptr(armmigrate.AzurePricingTierStandard),
				AzureStorageRedundancy: to.Ptr(armmigrate.AzureStorageRedundancyLocallyRedundant),
				AzureVMFamilies: []*armmigrate.AzureVMFamily{
					to.Ptr(armmigrate.AzureVMFamilyDv2Series),
					to.Ptr(armmigrate.AzureVMFamilyFSeries),
					to.Ptr(armmigrate.AzureVMFamilyDv3Series),
					to.Ptr(armmigrate.AzureVMFamilyDSSeries),
					to.Ptr(armmigrate.AzureVMFamilyDSv2Series),
					to.Ptr(armmigrate.AzureVMFamilyFsSeries),
					to.Ptr(armmigrate.AzureVMFamilyDsv3Series),
					to.Ptr(armmigrate.AzureVMFamilyEv3Series),
					to.Ptr(armmigrate.AzureVMFamilyEsv3Series),
					to.Ptr(armmigrate.AzureVMFamilyDSeries),
					to.Ptr(armmigrate.AzureVMFamilyMSeries),
					to.Ptr(armmigrate.AzureVMFamilyFsv2Series),
					to.Ptr(armmigrate.AzureVMFamilyHSeries)},
				Currency:           to.Ptr(armmigrate.CurrencyUSD),
				DiscountPercentage: to.Ptr[float64](100),
				Percentile:         to.Ptr(armmigrate.PercentilePercentile95),
				ReservedInstance:   to.Ptr(armmigrate.ReservedInstanceRI3Year),
				ScalingFactor:      to.Ptr[float64](1),
				SizingCriterion:    to.Ptr(armmigrate.AssessmentSizingCriterionPerformanceBased),
				Stage:              to.Ptr(armmigrate.AssessmentStageInProgress),
				TimeRange:          to.Ptr(armmigrate.TimeRangeDay),
				VMUptime: &armmigrate.VMUptime{
					DaysPerMonth: to.Ptr[int32](31),
					HoursPerDay:  to.Ptr[int32](24),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Assessments_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.Assessment{
			Name: to.Ptr("assessment_5_14_2019_16_48_47"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/groups/assessments"),
			ETag: to.Ptr("\"1e000c2c-0000-0d00-0000-5cdaa4190000\""),
			ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Group2/assessments/assessment_5_14_2019_16_48_47"),
			Properties: &armmigrate.AssessmentProperties{
				AzureDiskType:          to.Ptr(armmigrate.AzureDiskTypeStandardOrPremium),
				AzureHybridUseBenefit:  to.Ptr(armmigrate.AzureHybridUseBenefitYes),
				AzureLocation:          to.Ptr(armmigrate.AzureLocationNorthEurope),
				AzureOfferCode:         to.Ptr(armmigrate.AzureOfferCodeMSAZR0003P),
				AzurePricingTier:       to.Ptr(armmigrate.AzurePricingTierStandard),
				AzureStorageRedundancy: to.Ptr(armmigrate.AzureStorageRedundancyLocallyRedundant),
				AzureVMFamilies: []*armmigrate.AzureVMFamily{
					to.Ptr(armmigrate.AzureVMFamilyDv2Series),
					to.Ptr(armmigrate.AzureVMFamilyFSeries),
					to.Ptr(armmigrate.AzureVMFamilyDv3Series),
					to.Ptr(armmigrate.AzureVMFamilyDSSeries),
					to.Ptr(armmigrate.AzureVMFamilyDSv2Series),
					to.Ptr(armmigrate.AzureVMFamilyFsSeries),
					to.Ptr(armmigrate.AzureVMFamilyDsv3Series),
					to.Ptr(armmigrate.AzureVMFamilyEv3Series),
					to.Ptr(armmigrate.AzureVMFamilyEsv3Series),
					to.Ptr(armmigrate.AzureVMFamilyDSeries),
					to.Ptr(armmigrate.AzureVMFamilyMSeries),
					to.Ptr(armmigrate.AzureVMFamilyFsv2Series),
					to.Ptr(armmigrate.AzureVMFamilyHSeries)},
				ConfidenceRatingInPercentage:  to.Ptr[float64](0),
				CreatedTimestamp:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T11:18:47.7893715Z"); return t }()),
				Currency:                      to.Ptr(armmigrate.CurrencyUSD),
				DiscountPercentage:            to.Ptr[float64](0),
				MonthlyBandwidthCost:          to.Ptr[float64](0),
				MonthlyComputeCost:            to.Ptr[float64](607.443264),
				MonthlyPremiumStorageCost:     to.Ptr[float64](0),
				MonthlyStandardSSDStorageCost: to.Ptr[float64](0),
				MonthlyStorageCost:            to.Ptr[float64](111.36),
				NumberOfMachines:              to.Ptr[int32](5),
				Percentile:                    to.Ptr(armmigrate.PercentilePercentile95),
				PerfDataEndTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T11:18:47.7893715Z"); return t }()),
				PerfDataStartTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-13T11:18:47.7893715Z"); return t }()),
				PricesTimestamp:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-26T11:07:37.139768Z"); return t }()),
				ReservedInstance:              to.Ptr(armmigrate.ReservedInstanceRI3Year),
				ScalingFactor:                 to.Ptr[float64](1),
				SizingCriterion:               to.Ptr(armmigrate.AssessmentSizingCriterionPerformanceBased),
				Stage:                         to.Ptr(armmigrate.AssessmentStageInProgress),
				Status:                        to.Ptr(armmigrate.AssessmentStatusCompleted),
				TimeRange:                     to.Ptr(armmigrate.TimeRangeDay),
				UpdatedTimestamp:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-14T11:18:47.7893715Z"); return t }()),
				VMUptime: &armmigrate.VMUptime{
					DaysPerMonth: to.Ptr[int32](31),
					HoursPerDay:  to.Ptr[int32](24),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Assessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Assessment)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Assessments_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssessments_Delete(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Assessments_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assessments_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewAssessmentsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	_, err := client.Delete(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		"assessment_5_9_2019_16_22_14",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Assessments_Delete.json: %v", err)
	}
}

func TestAssessedMachines_ListByAssessment(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/AssessedMachines_ListByAssessment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AssessedMachines_ListByAssessment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewAssessedMachinesClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	pager := client.ListByAssessment("abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		"assessment_5_9_2019_16_22_14",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/AssessedMachines_ListByAssessment.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmigrate.AssessedMachineResultList{
			Value: []*armmigrate.AssessedMachine{
				{
					Name: to.Ptr("f57fe432-3bd2-486a-a83a-6f4d99f1a952"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/groups/assessments/assessedMachines"),
					ETag: to.Ptr("\"b300e5dd-0000-0d00-0000-5cd4065f0000\""),
					ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Test1/assessments/assessment_5_9_2019_16_22_14/assessedMachines/f57fe432-3bd2-486a-a83a-6f4d99f1a952"),
					Properties: &armmigrate.AssessedMachineProperties{
						Description:                     to.Ptr("Microsoft Azure Migration Image on Windows Server 2016"),
						BootType:                        to.Ptr(armmigrate.MachineBootTypeBIOS),
						ConfidenceRatingInPercentage:    to.Ptr[float64](0),
						CreatedTimestamp:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:15.7789159Z"); return t }()),
						DatacenterMachineArmID:          to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/abgoyal-westeurope/providers/microsoft.offazure/vmwaresites/portalvcenterbc2fsite/machines/idclab-a360-fareast-corp-micros-86617dcf-effe-59ad-8c3a-cdd3ea7300d3_52e1f68c-bea5-19ff-d0ad-6a94b79a286f"),
						DatacenterManagementServerArmID: to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.OffAzure/VMwareSites/PortalvCenterbc2fsite/vcenters/idclab-a360-fareast-corp-micros-86617dcf-effe-59ad-8c3a-cdd3ea7300d3"),
						DatacenterManagementServerName:  to.Ptr("IDCLAB-A360.fareast.corp.microsoft.com"),
						Disks: map[string]*armmigrate.AssessedDisk{
							"6000C299-02f5-d137-9bab-8a8ee7b192a0": {
								Name:                             to.Ptr("6000C299-02f5-d137-9bab-8a8ee7b192a0"),
								DisplayName:                      to.Ptr("scsi0:0"),
								GigabytesForRecommendedDiskSize:  to.Ptr[int32](128),
								GigabytesProvisioned:             to.Ptr[float64](80),
								MegabytesPerSecondOfRead:         to.Ptr[float64](0),
								MegabytesPerSecondOfWrite:        to.Ptr[float64](0),
								MonthlyStorageCost:               to.Ptr[float64](5.888),
								NumberOfReadOperationsPerSecond:  to.Ptr[float64](0),
								NumberOfWriteOperationsPerSecond: to.Ptr[float64](0),
								RecommendedDiskSize:              to.Ptr(armmigrate.AzureDiskSizeStandardS10),
								RecommendedDiskType:              to.Ptr(armmigrate.AzureDiskTypeStandard),
								Suitability:                      to.Ptr(armmigrate.CloudSuitabilitySuitable),
								SuitabilityDetail:                to.Ptr(armmigrate.AzureDiskSuitabilityDetail("NumberOfReadOperationsPerSecondMissing, NumberOfWriteOperationsPerSecondMissing, MegabytesPerSecondOfReadMissing, MegabytesPerSecondOfWriteMissing")),
								SuitabilityExplanation:           to.Ptr(armmigrate.AzureDiskSuitabilityExplanationNotApplicable),
							},
						},
						DisplayName:                          to.Ptr("SHubhamVMNew"),
						MegabytesOfMemory:                    to.Ptr[float64](16384),
						MegabytesOfMemoryForRecommendedSize:  to.Ptr[float64](16384),
						MonthlyBandwidthCost:                 to.Ptr[float64](0),
						MonthlyComputeCostForRecommendedSize: to.Ptr[float64](101.138616),
						MonthlyPremiumStorageCost:            to.Ptr[float64](0),
						MonthlyStandardSSDStorageCost:        to.Ptr[float64](0),
						MonthlyStorageCost:                   to.Ptr[float64](5.888),
						NetworkAdapters: map[string]*armmigrate.AssessedNetworkAdapter{
							"4000": {
								DisplayName:                     to.Ptr("VM Network"),
								IPAddresses:                     []*string{},
								MacAddress:                      to.Ptr("00:0c:29:ad:13:d3"),
								MegabytesPerSecondReceived:      to.Ptr[float64](0),
								MegabytesPerSecondTransmitted:   to.Ptr[float64](0),
								MonthlyBandwidthCosts:           to.Ptr[float64](0),
								NetGigabytesTransmittedPerMonth: to.Ptr[float64](0),
								Suitability:                     to.Ptr(armmigrate.CloudSuitabilitySuitable),
								SuitabilityDetail:               to.Ptr(armmigrate.AzureNetworkAdapterSuitabilityDetailMegabytesOfDataTransmittedMissing),
								SuitabilityExplanation:          to.Ptr(armmigrate.AzureNetworkAdapterSuitabilityExplanationNotApplicable),
							},
						},
						NumberOfCores:                   to.Ptr[int32](8),
						NumberOfCoresForRecommendedSize: to.Ptr[int32](8),
						OperatingSystemName:             to.Ptr("Microsoft Windows Server 2016 (64-bit)"),
						OperatingSystemType:             to.Ptr("windowsGuest"),
						PercentageCoresUtilization:      to.Ptr[float64](0),
						PercentageMemoryUtilization:     to.Ptr[float64](0),
						RecommendedSize:                 to.Ptr(armmigrate.AzureVMSizeStandardF8SV2),
						Suitability:                     to.Ptr(armmigrate.CloudSuitabilitySuitable),
						SuitabilityDetail:               to.Ptr(armmigrate.AzureVMSuitabilityDetail("PercentageOfCoresUtilizedMissing, PercentageOfMemoryUtilizedMissing")),
						SuitabilityExplanation:          to.Ptr(armmigrate.AzureVMSuitabilityExplanationNotApplicable),
						UpdatedTimestamp:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:15.7789159Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("3b4a34a6-c729-46d2-bfd1-bcb52cc4935e"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/groups/assessments/assessedMachines"),
					ETag: to.Ptr("\"b300e6dd-0000-0d00-0000-5cd4065f0000\""),
					ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Test1/assessments/assessment_5_9_2019_16_22_14/assessedMachines/3b4a34a6-c729-46d2-bfd1-bcb52cc4935e"),
					Properties: &armmigrate.AssessedMachineProperties{
						Description:                     to.Ptr("Microsoft Azure Migration Image on Windows Server 2016"),
						BootType:                        to.Ptr(armmigrate.MachineBootTypeBIOS),
						ConfidenceRatingInPercentage:    to.Ptr[float64](0),
						CreatedTimestamp:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:15.7789159Z"); return t }()),
						DatacenterMachineArmID:          to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/abgoyal-westeurope/providers/microsoft.offazure/vmwaresites/portalvcenterbc2fsite/machines/idclab-a360-fareast-corp-micros-86617dcf-effe-59ad-8c3a-cdd3ea7300d3_50296915-8b4b-5c82-79a1-adf3966acb6b"),
						DatacenterManagementServerArmID: to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.OffAzure/VMwareSites/PortalvCenterbc2fsite/vcenters/idclab-a360-fareast-corp-micros-86617dcf-effe-59ad-8c3a-cdd3ea7300d3"),
						DatacenterManagementServerName:  to.Ptr("IDCLAB-A360.fareast.corp.microsoft.com"),
						Disks: map[string]*armmigrate.AssessedDisk{
							"6000C298-8305-5635-e618-3a8675c42495": {
								Name:                             to.Ptr("6000C298-8305-5635-e618-3a8675c42495"),
								DisplayName:                      to.Ptr("scsi0:0"),
								GigabytesForRecommendedDiskSize:  to.Ptr[int32](128),
								GigabytesProvisioned:             to.Ptr[float64](80),
								MegabytesPerSecondOfRead:         to.Ptr[float64](0),
								MegabytesPerSecondOfWrite:        to.Ptr[float64](0),
								MonthlyStorageCost:               to.Ptr[float64](5.888),
								NumberOfReadOperationsPerSecond:  to.Ptr[float64](0),
								NumberOfWriteOperationsPerSecond: to.Ptr[float64](0),
								RecommendedDiskSize:              to.Ptr(armmigrate.AzureDiskSizeStandardS10),
								RecommendedDiskType:              to.Ptr(armmigrate.AzureDiskTypeStandard),
								Suitability:                      to.Ptr(armmigrate.CloudSuitabilitySuitable),
								SuitabilityDetail:                to.Ptr(armmigrate.AzureDiskSuitabilityDetail("NumberOfReadOperationsPerSecondMissing, NumberOfWriteOperationsPerSecondMissing, MegabytesPerSecondOfReadMissing, MegabytesPerSecondOfWriteMissing")),
								SuitabilityExplanation:           to.Ptr(armmigrate.AzureDiskSuitabilityExplanationNotApplicable),
							},
						},
						DisplayName:                          to.Ptr("testfpl1"),
						MegabytesOfMemory:                    to.Ptr[float64](16384),
						MegabytesOfMemoryForRecommendedSize:  to.Ptr[float64](16384),
						MonthlyBandwidthCost:                 to.Ptr[float64](0),
						MonthlyComputeCostForRecommendedSize: to.Ptr[float64](101.138616),
						MonthlyPremiumStorageCost:            to.Ptr[float64](0),
						MonthlyStandardSSDStorageCost:        to.Ptr[float64](0),
						MonthlyStorageCost:                   to.Ptr[float64](5.888),
						NetworkAdapters: map[string]*armmigrate.AssessedNetworkAdapter{
							"4000": {
								DisplayName:                     to.Ptr("VM Network"),
								IPAddresses:                     []*string{},
								MacAddress:                      to.Ptr("00:50:56:a9:35:ca"),
								MegabytesPerSecondReceived:      to.Ptr[float64](0),
								MegabytesPerSecondTransmitted:   to.Ptr[float64](0),
								MonthlyBandwidthCosts:           to.Ptr[float64](0),
								NetGigabytesTransmittedPerMonth: to.Ptr[float64](0),
								Suitability:                     to.Ptr(armmigrate.CloudSuitabilitySuitable),
								SuitabilityDetail:               to.Ptr(armmigrate.AzureNetworkAdapterSuitabilityDetailMegabytesOfDataTransmittedMissing),
								SuitabilityExplanation:          to.Ptr(armmigrate.AzureNetworkAdapterSuitabilityExplanationNotApplicable),
							},
						},
						NumberOfCores:                   to.Ptr[int32](8),
						NumberOfCoresForRecommendedSize: to.Ptr[int32](8),
						OperatingSystemName:             to.Ptr("Microsoft Windows Server 2016 (64-bit)"),
						OperatingSystemType:             to.Ptr("windowsguest"),
						PercentageCoresUtilization:      to.Ptr[float64](0),
						PercentageMemoryUtilization:     to.Ptr[float64](0),
						RecommendedSize:                 to.Ptr(armmigrate.AzureVMSizeStandardF8SV2),
						Suitability:                     to.Ptr(armmigrate.CloudSuitabilitySuitable),
						SuitabilityDetail:               to.Ptr(armmigrate.AzureVMSuitabilityDetail("PercentageOfCoresUtilizedMissing, PercentageOfMemoryUtilizedMissing")),
						SuitabilityExplanation:          to.Ptr(armmigrate.AzureVMSuitabilityExplanationNotApplicable),
						UpdatedTimestamp:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:15.7789159Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssessedMachineResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssessedMachineResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/AssessedMachines_ListByAssessment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssessedMachines_Get(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/AssessedMachines_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AssessedMachines_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewAssessedMachinesClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.Get(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		"assessment_5_9_2019_16_22_14",
		"f57fe432-3bd2-486a-a83a-6f4d99f1a952",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/AssessedMachines_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.AssessedMachine{
			Name: to.Ptr("f57fe432-3bd2-486a-a83a-6f4d99f1a952"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/groups/assessments/assessedMachines"),
			ETag: to.Ptr("\"b300e5dd-0000-0d00-0000-5cd4065f0000\""),
			ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/groups/Test1/assessments/assessment_5_9_2019_16_22_14/assessedMachines/f57fe432-3bd2-486a-a83a-6f4d99f1a952"),
			Properties: &armmigrate.AssessedMachineProperties{
				Description:                     to.Ptr("Microsoft Azure Migration Image on Windows Server 2016"),
				BootType:                        to.Ptr(armmigrate.MachineBootTypeBIOS),
				ConfidenceRatingInPercentage:    to.Ptr[float64](0),
				CreatedTimestamp:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:15.7789159Z"); return t }()),
				DatacenterMachineArmID:          to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/abgoyal-westeurope/providers/microsoft.offazure/vmwaresites/portalvcenterbc2fsite/machines/idclab-a360-fareast-corp-micros-86617dcf-effe-59ad-8c3a-cdd3ea7300d3_52e1f68c-bea5-19ff-d0ad-6a94b79a286f"),
				DatacenterManagementServerArmID: to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.OffAzure/VMwareSites/PortalvCenterbc2fsite/vcenters/idclab-a360-fareast-corp-micros-86617dcf-effe-59ad-8c3a-cdd3ea7300d3"),
				DatacenterManagementServerName:  to.Ptr("IDCLAB-A360.fareast.corp.microsoft.com"),
				Disks: map[string]*armmigrate.AssessedDisk{
					"6000C299-02f5-d137-9bab-8a8ee7b192a0": {
						Name:                             to.Ptr("6000C299-02f5-d137-9bab-8a8ee7b192a0"),
						DisplayName:                      to.Ptr("scsi0:0"),
						GigabytesForRecommendedDiskSize:  to.Ptr[int32](128),
						GigabytesProvisioned:             to.Ptr[float64](80),
						MegabytesPerSecondOfRead:         to.Ptr[float64](0),
						MegabytesPerSecondOfWrite:        to.Ptr[float64](0),
						MonthlyStorageCost:               to.Ptr[float64](5.888),
						NumberOfReadOperationsPerSecond:  to.Ptr[float64](0),
						NumberOfWriteOperationsPerSecond: to.Ptr[float64](0),
						RecommendedDiskSize:              to.Ptr(armmigrate.AzureDiskSizeStandardS10),
						RecommendedDiskType:              to.Ptr(armmigrate.AzureDiskTypeStandard),
						Suitability:                      to.Ptr(armmigrate.CloudSuitabilitySuitable),
						SuitabilityDetail:                to.Ptr(armmigrate.AzureDiskSuitabilityDetail("NumberOfReadOperationsPerSecondMissing, NumberOfWriteOperationsPerSecondMissing, MegabytesPerSecondOfReadMissing, MegabytesPerSecondOfWriteMissing")),
						SuitabilityExplanation:           to.Ptr(armmigrate.AzureDiskSuitabilityExplanationNotApplicable),
					},
				},
				DisplayName:                          to.Ptr("SHubhamVMNew"),
				MegabytesOfMemory:                    to.Ptr[float64](16384),
				MegabytesOfMemoryForRecommendedSize:  to.Ptr[float64](16384),
				MonthlyBandwidthCost:                 to.Ptr[float64](0),
				MonthlyComputeCostForRecommendedSize: to.Ptr[float64](101.138616),
				MonthlyPremiumStorageCost:            to.Ptr[float64](0),
				MonthlyStandardSSDStorageCost:        to.Ptr[float64](0),
				MonthlyStorageCost:                   to.Ptr[float64](5.888),
				NetworkAdapters: map[string]*armmigrate.AssessedNetworkAdapter{
					"4000": {
						DisplayName:                     to.Ptr("VM Network"),
						IPAddresses:                     []*string{},
						MacAddress:                      to.Ptr("00:0c:29:ad:13:d3"),
						MegabytesPerSecondReceived:      to.Ptr[float64](0),
						MegabytesPerSecondTransmitted:   to.Ptr[float64](0),
						MonthlyBandwidthCosts:           to.Ptr[float64](0),
						NetGigabytesTransmittedPerMonth: to.Ptr[float64](0),
						Suitability:                     to.Ptr(armmigrate.CloudSuitabilitySuitable),
						SuitabilityDetail:               to.Ptr(armmigrate.AzureNetworkAdapterSuitabilityDetailMegabytesOfDataTransmittedMissing),
						SuitabilityExplanation:          to.Ptr(armmigrate.AzureNetworkAdapterSuitabilityExplanationNotApplicable),
					},
				},
				NumberOfCores:                   to.Ptr[int32](8),
				NumberOfCoresForRecommendedSize: to.Ptr[int32](8),
				OperatingSystemName:             to.Ptr("Microsoft Windows Server 2016 (64-bit)"),
				OperatingSystemType:             to.Ptr("windowsGuest"),
				PercentageCoresUtilization:      to.Ptr[float64](0),
				PercentageMemoryUtilization:     to.Ptr[float64](0),
				RecommendedSize:                 to.Ptr(armmigrate.AzureVMSizeStandardF8SV2),
				Suitability:                     to.Ptr(armmigrate.CloudSuitabilitySuitable),
				SuitabilityDetail:               to.Ptr(armmigrate.AzureVMSuitabilityDetail("PercentageOfCoresUtilizedMissing, PercentageOfMemoryUtilizedMissing")),
				SuitabilityExplanation:          to.Ptr(armmigrate.AzureVMSuitabilityExplanationNotApplicable),
				UpdatedTimestamp:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T10:52:15.7789159Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssessedMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssessedMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/AssessedMachines_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHyperVCollectors_ListByProject(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/HyperVCollectors_ListByProject.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HyperVCollectors_ListByProject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewHyperVCollectorsClient("8c3c936a-c09b-4de3-830b-3f5f244d72e9", cred, &options)
	pager := client.ListByProject("contosoithyperv",
		"migrateprojectce73project",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/HyperVCollectors_ListByProject.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmigrate.HyperVCollectorList{
			Value: []*armmigrate.HyperVCollector{
				{
					Name: to.Ptr("migrateprojectce73collector"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/hypervcollectors"),
					ETag: to.Ptr("\"00000981-0000-0300-0000-5d74cd5f0000\""),
					ID:   to.Ptr("/subscriptions/8c3c936a-c09b-4de3-830b-3f5f244d72e9/resourceGroups/contosoithyperv/providers/Microsoft.Migrate/assessmentprojects/migrateprojectce73project/hypervcollectors/migrateprojectce73collector"),
					Properties: &armmigrate.CollectorProperties{
						AgentProperties: &armmigrate.CollectorAgentProperties{
							ID:               to.Ptr("d86c7d5a-2103-5157-bb20-9026b75e5de8"),
							LastHeartbeatUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-08T09:43:59.0573145Z"); return t }()),
							SpnDetails: &armmigrate.CollectorBodyAgentSpnProperties{
								ApplicationID: to.Ptr("827f1053-44dc-439f-b832-05416dcce12b"),
								Audience:      to.Ptr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/migrateprojectce73agentauthaadapp"),
								Authority:     to.Ptr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
								ObjectID:      to.Ptr("be75098e-c0fc-4ac4-98c7-282ebbcf8370"),
								TenantID:      to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							},
							Version: to.Ptr("1.0.8.218"),
						},
						CreatedTimestamp: to.Ptr("2019-04-10T10:22:51.6271816Z"),
						DiscoverySiteID:  to.Ptr("/subscriptions/8c3c936a-c09b-4de3-830b-3f5f244d72e9/resourceGroups/ContosoITHyperV/providers/Microsoft.OffAzure/HyperVSites/migrateprojectce73site"),
						UpdatedTimestamp: to.Ptr("2019-09-08T09:43:59.0573145Z"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.HyperVCollectorList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.HyperVCollectorList)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/HyperVCollectors_ListByProject.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHyperVCollectors_Get(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/HyperVCollectors_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HyperVCollectors_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewHyperVCollectorsClient("8c3c936a-c09b-4de3-830b-3f5f244d72e9", cred, &options)
	res, err := client.Get(ctx,
		"contosoithyperv",
		"migrateprojectce73project",
		"migrateprojectce73collector",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/HyperVCollectors_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.HyperVCollector{
			Name: to.Ptr("migrateprojectce73collector"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/hypervcollectors"),
			ETag: to.Ptr("\"00000981-0000-0300-0000-5d74cd5f0000\""),
			ID:   to.Ptr("/subscriptions/8c3c936a-c09b-4de3-830b-3f5f244d72e9/resourceGroups/contosoithyperv/providers/Microsoft.Migrate/assessmentprojects/migrateprojectce73project/hypervcollectors/migrateprojectce73collector"),
			Properties: &armmigrate.CollectorProperties{
				AgentProperties: &armmigrate.CollectorAgentProperties{
					ID:               to.Ptr("d86c7d5a-2103-5157-bb20-9026b75e5de8"),
					LastHeartbeatUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-08T09:43:59.0573145Z"); return t }()),
					SpnDetails: &armmigrate.CollectorBodyAgentSpnProperties{
						ApplicationID: to.Ptr("827f1053-44dc-439f-b832-05416dcce12b"),
						Audience:      to.Ptr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/migrateprojectce73agentauthaadapp"),
						Authority:     to.Ptr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
						ObjectID:      to.Ptr("be75098e-c0fc-4ac4-98c7-282ebbcf8370"),
						TenantID:      to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Version: to.Ptr("1.0.8.218"),
				},
				CreatedTimestamp: to.Ptr("2019-04-10T10:22:51.6271816Z"),
				DiscoverySiteID:  to.Ptr("/subscriptions/8c3c936a-c09b-4de3-830b-3f5f244d72e9/resourceGroups/ContosoITHyperV/providers/Microsoft.OffAzure/HyperVSites/migrateprojectce73site"),
				UpdatedTimestamp: to.Ptr("2019-09-08T09:43:59.0573145Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HyperVCollector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HyperVCollector)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/HyperVCollectors_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHyperVCollectors_Create(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/HyperVCollectors_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HyperVCollectors_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewHyperVCollectorsClient("8c3c936a-c09b-4de3-830b-3f5f244d72e9", cred, &options)
	res, err := client.Create(ctx,
		"contosoithyperv",
		"migrateprojectce73project",
		"migrateprojectce73collector",
		&armmigrate.HyperVCollectorsClientCreateOptions{CollectorBody: &armmigrate.HyperVCollector{
			ETag: to.Ptr("\"00000981-0000-0300-0000-5d74cd5f0000\""),
			Properties: &armmigrate.CollectorProperties{
				AgentProperties: &armmigrate.CollectorAgentProperties{
					SpnDetails: &armmigrate.CollectorBodyAgentSpnProperties{
						ApplicationID: to.Ptr("827f1053-44dc-439f-b832-05416dcce12b"),
						Audience:      to.Ptr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/migrateprojectce73agentauthaadapp"),
						Authority:     to.Ptr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
						ObjectID:      to.Ptr("be75098e-c0fc-4ac4-98c7-282ebbcf8370"),
						TenantID:      to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
				},
				DiscoverySiteID: to.Ptr("/subscriptions/8c3c936a-c09b-4de3-830b-3f5f244d72e9/resourceGroups/ContosoITHyperV/providers/Microsoft.OffAzure/HyperVSites/migrateprojectce73site"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/HyperVCollectors_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.HyperVCollector{
			Name: to.Ptr("migrateprojectce73collector"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/hypervcollectors"),
			ETag: to.Ptr("\"00000981-0000-0300-0000-5d74cd5f0000\""),
			ID:   to.Ptr("/subscriptions/8c3c936a-c09b-4de3-830b-3f5f244d72e9/resourceGroups/contosoithyperv/providers/Microsoft.Migrate/assessmentprojects/migrateprojectce73project/hypervcollectors/migrateprojectce73collector"),
			Properties: &armmigrate.CollectorProperties{
				AgentProperties: &armmigrate.CollectorAgentProperties{
					ID:               to.Ptr("d86c7d5a-2103-5157-bb20-9026b75e5de8"),
					LastHeartbeatUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-08T09:43:59.0573145Z"); return t }()),
					SpnDetails: &armmigrate.CollectorBodyAgentSpnProperties{
						ApplicationID: to.Ptr("827f1053-44dc-439f-b832-05416dcce12b"),
						Audience:      to.Ptr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/migrateprojectce73agentauthaadapp"),
						Authority:     to.Ptr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
						ObjectID:      to.Ptr("be75098e-c0fc-4ac4-98c7-282ebbcf8370"),
						TenantID:      to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Version: to.Ptr("1.0.8.218"),
				},
				CreatedTimestamp: to.Ptr("2019-04-10T10:22:51.6271816Z"),
				DiscoverySiteID:  to.Ptr("/subscriptions/8c3c936a-c09b-4de3-830b-3f5f244d72e9/resourceGroups/ContosoITHyperV/providers/Microsoft.OffAzure/HyperVSites/migrateprojectce73site"),
				UpdatedTimestamp: to.Ptr("2019-09-08T09:43:59.0573145Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HyperVCollector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HyperVCollector)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/HyperVCollectors_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHyperVCollectors_Delete(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/HyperVCollectors_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HyperVCollectors_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewHyperVCollectorsClient("8c3c936a-c09b-4de3-830b-3f5f244d72e9", cred, &options)
	_, err := client.Delete(ctx,
		"contosoithyperv",
		"migrateprojectce73project",
		"migrateprojectce73collector",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/HyperVCollectors_Delete.json: %v", err)
	}
}

func TestServerCollectors_ListByProject(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ServerCollectors_ListByProject.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerCollectors_ListByProject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewServerCollectorsClient("4bd2aa0f-2bd2-4d67-91a8-5a4533d58600", cred, &options)
	pager := client.ListByProject("pajindtest",
		"app11141project",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ServerCollectors_ListByProject.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmigrate.ServerCollectorList{
			Value: []*armmigrate.ServerCollector{
				{
					Name: to.Ptr("app23df4collector"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/servercollectors"),
					ETag: to.Ptr("\"00000606-0000-0d00-0000-605999bf0000\""),
					ID:   to.Ptr("/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/pajindtest/providers/Microsoft.Migrate/assessmentprojects/app11141project/servercollectors/app23df4collector"),
					Properties: &armmigrate.CollectorProperties{
						AgentProperties: &armmigrate.CollectorAgentProperties{
							ID:               to.Ptr("dc984f5a-58a3-4f84-818c-a19febefa66a"),
							LastHeartbeatUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-17T03:51:30.2069337Z"); return t }()),
							SpnDetails: &armmigrate.CollectorBodyAgentSpnProperties{
								ApplicationID: to.Ptr("ad9f701a-cc08-4421-b51f-b5762d58e9ba"),
								Audience:      to.Ptr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/app23df4authandaccessaadapp"),
								Authority:     to.Ptr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
								ObjectID:      to.Ptr("b4975e42-9248-4a36-b99f-37eca377ea00"),
								TenantID:      to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							},
							Version: to.Ptr("1.0.8.393"),
						},
						CreatedTimestamp: to.Ptr("2020-09-11T07:15:52.4361521Z"),
						DiscoverySiteID:  to.Ptr("/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/pajindTest/providers/Microsoft.OffAzure/ServerSites/app21141site"),
						UpdatedTimestamp: to.Ptr("2021-03-23T07:33:19.697297Z"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerCollectorList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerCollectorList)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ServerCollectors_ListByProject.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerCollectors_Get(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ServerCollectors_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerCollectors_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewServerCollectorsClient("4bd2aa0f-2bd2-4d67-91a8-5a4533d58600", cred, &options)
	res, err := client.Get(ctx,
		"pajindtest",
		"app11141project",
		"app23df4collector",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ServerCollectors_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.ServerCollector{
			Name: to.Ptr("app23df4collector"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/servercollectors"),
			ETag: to.Ptr("\"00000606-0000-0d00-0000-605999bf0000\""),
			ID:   to.Ptr("/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/pajindtest/providers/Microsoft.Migrate/assessmentprojects/app11141project/servercollectors/app23df4collector"),
			Properties: &armmigrate.CollectorProperties{
				AgentProperties: &armmigrate.CollectorAgentProperties{
					ID:               to.Ptr("dc984f5a-58a3-4f84-818c-a19febefa66a"),
					LastHeartbeatUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-17T03:51:30.2069337Z"); return t }()),
					SpnDetails: &armmigrate.CollectorBodyAgentSpnProperties{
						ApplicationID: to.Ptr("ad9f701a-cc08-4421-b51f-b5762d58e9ba"),
						Audience:      to.Ptr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/app23df4authandaccessaadapp"),
						Authority:     to.Ptr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
						ObjectID:      to.Ptr("b4975e42-9248-4a36-b99f-37eca377ea00"),
						TenantID:      to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Version: to.Ptr("1.0.8.393"),
				},
				CreatedTimestamp: to.Ptr("2020-09-11T07:15:52.4361521Z"),
				DiscoverySiteID:  to.Ptr("/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/pajindTest/providers/Microsoft.OffAzure/ServerSites/app21141site"),
				UpdatedTimestamp: to.Ptr("2021-03-23T07:33:19.697297Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerCollector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerCollector)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ServerCollectors_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerCollectors_Create(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ServerCollectors_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerCollectors_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewServerCollectorsClient("4bd2aa0f-2bd2-4d67-91a8-5a4533d58600", cred, &options)
	res, err := client.Create(ctx,
		"pajindtest",
		"app11141project",
		"app23df4collector",
		&armmigrate.ServerCollectorsClientCreateOptions{CollectorBody: &armmigrate.ServerCollector{
			ETag: to.Ptr("\"00000606-0000-0d00-0000-605999bf0000\""),
			Properties: &armmigrate.CollectorProperties{
				AgentProperties: &armmigrate.CollectorAgentProperties{
					SpnDetails: &armmigrate.CollectorBodyAgentSpnProperties{
						ApplicationID: to.Ptr("ad9f701a-cc08-4421-b51f-b5762d58e9ba"),
						Audience:      to.Ptr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/app23df4authandaccessaadapp"),
						Authority:     to.Ptr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
						ObjectID:      to.Ptr("b4975e42-9248-4a36-b99f-37eca377ea00"),
						TenantID:      to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
				},
				DiscoverySiteID: to.Ptr("/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/pajindTest/providers/Microsoft.OffAzure/ServerSites/app21141site"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ServerCollectors_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.ServerCollector{
			Name: to.Ptr("app23df4collector"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/servercollectors"),
			ETag: to.Ptr("\"00000606-0000-0d00-0000-605999bf0000\""),
			ID:   to.Ptr("/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/pajindtest/providers/Microsoft.Migrate/assessmentprojects/app11141project/servercollectors/app23df4collector"),
			Properties: &armmigrate.CollectorProperties{
				AgentProperties: &armmigrate.CollectorAgentProperties{
					ID:               to.Ptr("dc984f5a-58a3-4f84-818c-a19febefa66a"),
					LastHeartbeatUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-17T03:51:30.2069337Z"); return t }()),
					SpnDetails: &armmigrate.CollectorBodyAgentSpnProperties{
						ApplicationID: to.Ptr("ad9f701a-cc08-4421-b51f-b5762d58e9ba"),
						Audience:      to.Ptr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/app23df4authandaccessaadapp"),
						Authority:     to.Ptr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
						ObjectID:      to.Ptr("b4975e42-9248-4a36-b99f-37eca377ea00"),
						TenantID:      to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Version: to.Ptr("1.0.8.393"),
				},
				CreatedTimestamp: to.Ptr("2020-09-11T07:15:52.4361521Z"),
				DiscoverySiteID:  to.Ptr("/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/pajindTest/providers/Microsoft.OffAzure/ServerSites/app21141site"),
				UpdatedTimestamp: to.Ptr("2021-03-23T07:33:19.697297Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerCollector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerCollector)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ServerCollectors_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerCollectors_Delete(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ServerCollectors_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerCollectors_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewServerCollectorsClient("4bd2aa0f-2bd2-4d67-91a8-5a4533d58600", cred, &options)
	_, err := client.Delete(ctx,
		"pajindtest",
		"app11141project",
		"app23df4collector",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ServerCollectors_Delete.json: %v", err)
	}
}

func TestVMwareCollectors_ListByProject(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/VMwareCollectors_ListByProject.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VMwareCollectors_ListByProject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewVMwareCollectorsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	pager := client.ListByProject("abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/VMwareCollectors_ListByProject.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmigrate.VMwareCollectorList{
			Value: []*armmigrate.VMwareCollector{
				{
					Name: to.Ptr("PortalvCenterbc2fcollector"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/vmwarecollectors"),
					ETag: to.Ptr("\"01003d32-0000-0d00-0000-5d74d2e50000\""),
					ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/vmwarecollectors/PortalvCenterbc2fcollector"),
					Properties: &armmigrate.CollectorProperties{
						AgentProperties: &armmigrate.CollectorAgentProperties{
							ID:               to.Ptr("75b0f71e-1272-4f29-a801-29cfa4b34a6e"),
							LastHeartbeatUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-28T06:21:28.7794661Z"); return t }()),
							SpnDetails: &armmigrate.CollectorBodyAgentSpnProperties{
								ApplicationID: to.Ptr("fc717575-8173-4b21-92a5-658b655e613e"),
								Audience:      to.Ptr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/PortalvCenterbc2fagentauthaadapp"),
								Authority:     to.Ptr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
								ObjectID:      to.Ptr("29d94f38-db94-4980-aec0-0cfd55ab1cd0"),
								TenantID:      to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
							},
							Version: to.Ptr("1.0.8.227"),
						},
						CreatedTimestamp: to.Ptr("2019-05-09T09:58:21.4988104Z"),
						DiscoverySiteID:  to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.OffAzure/VMwareSites/PortalvCenterbc2fsite"),
						UpdatedTimestamp: to.Ptr("2019-09-08T10:07:33.1996006Z"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VMwareCollectorList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VMwareCollectorList)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/VMwareCollectors_ListByProject.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVMwareCollectors_Get(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/VMwareCollectors_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VMwareCollectors_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewVMwareCollectorsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.Get(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"PortalvCenterbc2fcollector",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/VMwareCollectors_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.VMwareCollector{
			Name: to.Ptr("PortalvCenterbc2fcollector"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/vmwarecollectors"),
			ETag: to.Ptr("\"01003d32-0000-0d00-0000-5d74d2e50000\""),
			ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/vmwarecollectors/PortalvCenterbc2fcollector"),
			Properties: &armmigrate.CollectorProperties{
				AgentProperties: &armmigrate.CollectorAgentProperties{
					ID:               to.Ptr("75b0f71e-1272-4f29-a801-29cfa4b34a6e"),
					LastHeartbeatUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-28T06:21:28.7794661Z"); return t }()),
					SpnDetails: &armmigrate.CollectorBodyAgentSpnProperties{
						ApplicationID: to.Ptr("fc717575-8173-4b21-92a5-658b655e613e"),
						Audience:      to.Ptr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/PortalvCenterbc2fagentauthaadapp"),
						Authority:     to.Ptr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
						ObjectID:      to.Ptr("29d94f38-db94-4980-aec0-0cfd55ab1cd0"),
						TenantID:      to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Version: to.Ptr("1.0.8.227"),
				},
				CreatedTimestamp: to.Ptr("2019-05-09T09:58:21.4988104Z"),
				DiscoverySiteID:  to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.OffAzure/VMwareSites/PortalvCenterbc2fsite"),
				UpdatedTimestamp: to.Ptr("2019-09-08T10:07:33.1996006Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VMwareCollector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VMwareCollector)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/VMwareCollectors_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVMwareCollectors_Create(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/VMwareCollectors_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VMwareCollectors_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewVMwareCollectorsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.Create(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"PortalvCenterbc2fcollector",
		&armmigrate.VMwareCollectorsClientCreateOptions{CollectorBody: &armmigrate.VMwareCollector{
			ETag: to.Ptr("\"01003d32-0000-0d00-0000-5d74d2e50000\""),
			Properties: &armmigrate.CollectorProperties{
				AgentProperties: &armmigrate.CollectorAgentProperties{
					SpnDetails: &armmigrate.CollectorBodyAgentSpnProperties{
						ApplicationID: to.Ptr("fc717575-8173-4b21-92a5-658b655e613e"),
						Audience:      to.Ptr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/PortalvCenterbc2fagentauthaadapp"),
						Authority:     to.Ptr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
						ObjectID:      to.Ptr("29d94f38-db94-4980-aec0-0cfd55ab1cd0"),
						TenantID:      to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
				},
				DiscoverySiteID: to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.OffAzure/VMwareSites/PortalvCenterbc2fsite"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/VMwareCollectors_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.VMwareCollector{
			Name: to.Ptr("PortalvCenterbc2fcollector"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/vmwarecollectors"),
			ETag: to.Ptr("\"01003d32-0000-0d00-0000-5d74d2e50000\""),
			ID:   to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westeurope/providers/Microsoft.Migrate/assessmentprojects/abgoyalWEselfhostb72bproject/vmwarecollectors/PortalvCenterbc2fcollector"),
			Properties: &armmigrate.CollectorProperties{
				AgentProperties: &armmigrate.CollectorAgentProperties{
					ID:               to.Ptr("75b0f71e-1272-4f29-a801-29cfa4b34a6e"),
					LastHeartbeatUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-28T06:21:28.7794661Z"); return t }()),
					SpnDetails: &armmigrate.CollectorBodyAgentSpnProperties{
						ApplicationID: to.Ptr("fc717575-8173-4b21-92a5-658b655e613e"),
						Audience:      to.Ptr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/PortalvCenterbc2fagentauthaadapp"),
						Authority:     to.Ptr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
						ObjectID:      to.Ptr("29d94f38-db94-4980-aec0-0cfd55ab1cd0"),
						TenantID:      to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Version: to.Ptr("1.0.8.227"),
				},
				CreatedTimestamp: to.Ptr("2019-05-09T09:58:21.4988104Z"),
				DiscoverySiteID:  to.Ptr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.OffAzure/VMwareSites/PortalvCenterbc2fsite"),
				UpdatedTimestamp: to.Ptr("2019-09-08T10:07:33.1996006Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VMwareCollector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VMwareCollector)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/VMwareCollectors_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVMwareCollectors_Delete(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/VMwareCollectors_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VMwareCollectors_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewVMwareCollectorsClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	_, err := client.Delete(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"PortalvCenterbc2fcollector",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/VMwareCollectors_Delete.json: %v", err)
	}
}

func TestImportCollectors_ListByProject(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ImportCollectors_ListByProject.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportCollectors_ListByProject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewImportCollectorsClient("31be0ff4-c932-4cb3-8efc-efa411d79280", cred, &options)
	pager := client.ListByProject("markusavstestrg",
		"rajoshCCY9671project",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ImportCollectors_ListByProject.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmigrate.ImportCollectorList{
			Value: []*armmigrate.ImportCollector{
				{
					Name: to.Ptr("importCollector2951"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/importcollectors"),
					ETag: to.Ptr("\"000098a2-0000-3300-0000-605995620000\""),
					ID:   to.Ptr("/subscriptions/31be0ff4-c932-4cb3-8efc-efa411d79280/resourceGroups/markusavstestrg/providers/Microsoft.Migrate/assessmentprojects/rajoshCCY9671project/importcollectors/importCollector2951"),
					Properties: &armmigrate.ImportCollectorProperties{
						CreatedTimestamp: to.Ptr("2021-02-11T04:46:54.9582099Z"),
						DiscoverySiteID:  to.Ptr("/subscriptions/31be0ff4-c932-4cb3-8efc-efa411d79280/resourcegroups/MarkusAVStestRG/providers/microsoft.offazure/importsites/rajoshCCY54cbimportSite"),
						UpdatedTimestamp: to.Ptr("2021-03-23T07:14:42.9238657Z"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ImportCollectorList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ImportCollectorList)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ImportCollectors_ListByProject.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImportCollectors_Get(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ImportCollectors_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportCollectors_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewImportCollectorsClient("31be0ff4-c932-4cb3-8efc-efa411d79280", cred, &options)
	res, err := client.Get(ctx,
		"markusavstestrg",
		"rajoshCCY9671project",
		"importCollector2951",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ImportCollectors_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.ImportCollector{
			Name: to.Ptr("importCollector2951"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/importcollectors"),
			ETag: to.Ptr("\"000064a2-0000-3300-0000-605994800000\""),
			ID:   to.Ptr("/subscriptions/31be0ff4-c932-4cb3-8efc-efa411d79280/resourceGroups/markusavstestrg/providers/Microsoft.Migrate/assessmentprojects/rajoshCCY9671project/importcollectors/importCollector2951"),
			Properties: &armmigrate.ImportCollectorProperties{
				CreatedTimestamp: to.Ptr("2021-02-11T04:46:54.9582099Z"),
				DiscoverySiteID:  to.Ptr("/subscriptions/31be0ff4-c932-4cb3-8efc-efa411d79280/resourcegroups/MarkusAVStestRG/providers/microsoft.offazure/importsites/rajoshCCY54cbimportSite"),
				UpdatedTimestamp: to.Ptr("2021-03-23T07:10:56.3588497Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImportCollector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImportCollector)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ImportCollectors_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImportCollectors_Create(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ImportCollectors_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportCollectors_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewImportCollectorsClient("31be0ff4-c932-4cb3-8efc-efa411d79280", cred, &options)
	res, err := client.Create(ctx,
		"markusavstestrg",
		"rajoshCCY9671project",
		"importCollector2952",
		&armmigrate.ImportCollectorsClientCreateOptions{CollectorBody: &armmigrate.ImportCollector{
			Name: to.Ptr("importCollector2951"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/importcollectors"),
			ETag: to.Ptr("\"000064a2-0000-3300-0000-605994800000\""),
			ID:   to.Ptr("/subscriptions/31be0ff4-c932-4cb3-8efc-efa411d79280/resourceGroups/markusavstestrg/providers/Microsoft.Migrate/assessmentprojects/rajoshCCY9671project/importcollectors/importCollector2951"),
			Properties: &armmigrate.ImportCollectorProperties{
				DiscoverySiteID: to.Ptr("/subscriptions/31be0ff4-c932-4cb3-8efc-efa411d79280/resourcegroups/MarkusAVStestRG/providers/microsoft.offazure/importsites/rajoshCCY54cbimportSite"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ImportCollectors_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.ImportCollector{
			Name: to.Ptr("importCollector2952"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/importcollectors"),
			ETag: to.Ptr("\"0000a7a2-0000-3300-0000-6059964d0000\""),
			ID:   to.Ptr("/subscriptions/31be0ff4-c932-4cb3-8efc-efa411d79280/resourceGroups/markusavstestrg/providers/Microsoft.Migrate/assessmentprojects/rajoshCCY9671project/importcollectors/importCollector2952"),
			Properties: &armmigrate.ImportCollectorProperties{
				CreatedTimestamp: to.Ptr("2021-03-23T07:18:37.2247735Z"),
				DiscoverySiteID:  to.Ptr("/subscriptions/31be0ff4-c932-4cb3-8efc-efa411d79280/resourcegroups/MarkusAVStestRG/providers/microsoft.offazure/importsites/rajoshCCY54cbimportSite"),
				UpdatedTimestamp: to.Ptr("2021-03-23T07:18:37.2247735Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImportCollector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImportCollector)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ImportCollectors_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImportCollectors_Delete(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ImportCollectors_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportCollectors_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewImportCollectorsClient("31be0ff4-c932-4cb3-8efc-efa411d79280", cred, &options)
	_, err := client.Delete(ctx,
		"markusavstestrg",
		"rajoshCCY9671project",
		"importCollector2952",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/ImportCollectors_Delete.json: %v", err)
	}
}

func TestPrivateEndpointConnection_ListByProject(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateEndpointConnections_ListByProject.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_ListByProject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewPrivateEndpointConnectionClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.ListByProject(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateEndpointConnections_ListByProject.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.PrivateEndpointConnectionCollection{
			Value: []*armmigrate.PrivateEndpointConnection{
				{
					Name: to.Ptr("custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/privateEndpointConnections"),
					ETag: to.Ptr("\"00009300-0000-0300-0000-602b967b0000\""),
					ID:   to.Ptr("/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/madhavicus/providers/Microsoft.Migrate/assessmentprojects/custestpece80project/privateEndpointConnections/custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43"),
					Properties: &armmigrate.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armmigrate.ResourceID{
							ID: to.Ptr("/subscriptions/31be0ff4-c932-4cb3-8efc-efa411d79280/resourceGroups/PrivLink-SelfHost/providers/Microsoft.Network/privateEndpoints/custestpece80project3980pe"),
						},
						PrivateLinkServiceConnectionState: &armmigrate.PrivateLinkServiceConnectionState{
							ActionsRequired: to.Ptr(""),
							Status:          to.Ptr(armmigrate.PrivateLinkServiceConnectionStateStatusApproved),
						},
						ProvisioningState: to.Ptr(armmigrate.PrivateEndpointConnectionPropertiesProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateEndpointConnections_ListByProject.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_Get(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateEndpointConnections_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewPrivateEndpointConnectionClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.Get(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateEndpointConnections_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.PrivateEndpointConnection{
			Name: to.Ptr("custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/privateEndpointConnections"),
			ETag: to.Ptr("\"00009300-0000-0300-0000-602b967b0000\""),
			ID:   to.Ptr("/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/madhavicus/providers/Microsoft.Migrate/assessmentprojects/custestpece80project/privateEndpointConnections/custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43"),
			Properties: &armmigrate.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armmigrate.ResourceID{
					ID: to.Ptr("/subscriptions/31be0ff4-c932-4cb3-8efc-efa411d79280/resourceGroups/PrivLink-SelfHost/providers/Microsoft.Network/privateEndpoints/custestpece80project3980pe"),
				},
				PrivateLinkServiceConnectionState: &armmigrate.PrivateLinkServiceConnectionState{
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr(armmigrate.PrivateLinkServiceConnectionStateStatusApproved),
				},
				ProvisioningState: to.Ptr(armmigrate.PrivateEndpointConnectionPropertiesProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateEndpointConnections_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_Update(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateEndpointConnections_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewPrivateEndpointConnectionClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	res, err := client.Update(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43",
		&armmigrate.PrivateEndpointConnectionClientUpdateOptions{PrivateEndpointConnectionBody: &armmigrate.PrivateEndpointConnection{
			ETag: to.Ptr("\"00009300-0000-0300-0000-602b967b0000\""),
			Properties: &armmigrate.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armmigrate.PrivateLinkServiceConnectionState{
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr(armmigrate.PrivateLinkServiceConnectionStateStatusApproved),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateEndpointConnections_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.PrivateEndpointConnection{
			Name: to.Ptr("custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/privateEndpointConnections"),
			ETag: to.Ptr("\"00009300-0000-0300-0000-602b967b0000\""),
			ID:   to.Ptr("/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/madhavicus/providers/Microsoft.Migrate/assessmentprojects/custestpece80project/privateEndpointConnections/custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43"),
			Properties: &armmigrate.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armmigrate.ResourceID{
					ID: to.Ptr("/subscriptions/31be0ff4-c932-4cb3-8efc-efa411d79280/resourceGroups/PrivLink-SelfHost/providers/Microsoft.Network/privateEndpoints/custestpece80project3980pe"),
				},
				PrivateLinkServiceConnectionState: &armmigrate.PrivateLinkServiceConnectionState{
					ActionsRequired: to.Ptr(""),
					Status:          to.Ptr(armmigrate.PrivateLinkServiceConnectionStateStatusPending),
				},
				ProvisioningState: to.Ptr(armmigrate.PrivateEndpointConnectionPropertiesProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateEndpointConnections_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnection_Delete(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateEndpointConnections_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewPrivateEndpointConnectionClient("6393a73f-8d55-47ef-b6dd-179b3e0c7910", cred, &options)
	_, err := client.Delete(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateEndpointConnections_Delete.json: %v", err)
	}
}

func TestPrivateLinkResource_Get(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateLinkResources_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewPrivateLinkResourceClient("4bd2aa0f-2bd2-4d67-91a8-5a4533d58600", cred, &options)
	res, err := client.Get(ctx,
		"madhavicus",
		"custestpece80project",
		"Default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateLinkResources_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.PrivateLinkResource{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Migrate/assessmentprojects/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/madhavicus/providers/Microsoft.Migrate/assessmentprojects/custestpece80project/privateLinkResources/Default"),
			Properties: &armmigrate.PrivateLinkResourceProperties{
				GroupID: to.Ptr("Default"),
				RequiredMembers: []*string{
					to.Ptr("CollectorAgent")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.prod.migration.windowsazure.com")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateLinkResources_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResource_ListByProject(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateLinkResources_ListByProject.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListByProject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewPrivateLinkResourceClient("4bd2aa0f-2bd2-4d67-91a8-5a4533d58600", cred, &options)
	res, err := client.ListByProject(ctx,
		"madhavicus",
		"custestpece80project",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateLinkResources_ListByProject.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmigrate.PrivateLinkResourceCollection{
			Value: []*armmigrate.PrivateLinkResource{
				{
					Name: to.Ptr("Default"),
					Type: to.Ptr("Microsoft.Migrate/assessmentprojects/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/madhavicus/providers/Microsoft.Migrate/assessmentprojects/custestpece80project/privateLinkResources/Default"),
					Properties: &armmigrate.PrivateLinkResourceProperties{
						GroupID: to.Ptr("Default"),
						RequiredMembers: []*string{
							to.Ptr("CollectorAgent")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.prod.migration.windowsazure.com")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/PrivateLinkResources_ListByProject.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmigrate.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmigrate.OperationResultList{
			Value: []*armmigrate.Operation{
				{
					Name: to.Ptr("Read"),
					Display: &armmigrate.OperationDisplay{
						Description: to.Ptr("Reads a project"),
						Operation:   to.Ptr("Read"),
						Provider:    to.Ptr("Microsoft.Migrate"),
						Resource:    to.Ptr("Microsoft.Migrate/assessmentProjects"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Write"),
					Display: &armmigrate.OperationDisplay{
						Description: to.Ptr("Creates or updates a project"),
						Operation:   to.Ptr("Write"),
						Provider:    to.Ptr("Microsoft.Migrate"),
						Resource:    to.Ptr("Microsoft.Migrate/assessmentProjects"),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/migrate/resource-manager/Microsoft.Migrate/stable/2019-10-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
