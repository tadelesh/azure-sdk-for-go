//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrate

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestProjects_ListBySubscription(t *testing.T) {
	// From example Projects_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProjectsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	pager := client.ListBySubscription(&ProjectsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Project.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Project.ID should not be nil!")
			}
		}
	}
}

func TestProjects_List(t *testing.T) {
	// From example Projects_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProjectsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	pager := client.List("abgoyal-westEurope",
		&ProjectsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Project.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Project.ID should not be nil!")
			}
		}
	}
}

func TestProjects_Get(t *testing.T) {
	// From example Projects_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProjectsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.Get(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		&ProjectsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Project.ID == nil {
		t.Fatal("Project.ID should not be nil!")
	}
}

func TestProjects_Create(t *testing.T) {
	// From example Projects_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProjectsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.Create(ctx,
		"abgoyal-westEurope",
		"abGoyalProject2",
		&ProjectsCreateOptions{Project: &Project{
			ETag:     to.StringPtr(""),
			Location: to.StringPtr("West Europe"),
			Properties: &ProjectProperties{
				AssessmentSolutionID:      to.StringPtr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/abgoyal-westeurope/providers/microsoft.migrate/migrateprojects/abgoyalweselfhost/Solutions/Servers-Assessment-ServerAssessment"),
				CustomerWorkspaceID:       to.StringPtr("null"),
				CustomerWorkspaceLocation: to.StringPtr("null"),
				ProjectStatus:             ProjectStatusActive.ToPtr(),
			},
			Tags: map[string]interface{}{},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.Project.ID == nil {
		t.Fatal("Project.ID should not be nil!")
	}
}

func TestProjects_Update(t *testing.T) {
	// From example Projects_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProjectsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.Update(ctx,
		"abgoyal-westEurope",
		"abGoyalProject2",
		&ProjectsUpdateOptions{Project: &Project{
			ETag:     to.StringPtr(""),
			Location: to.StringPtr("West Europe"),
			Properties: &ProjectProperties{
				AssessmentSolutionID:      to.StringPtr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourcegroups/abgoyal-westeurope/providers/microsoft.migrate/migrateprojects/abgoyalweselfhost/Solutions/Servers-Assessment-ServerAssessment"),
				CustomerWorkspaceID:       to.StringPtr("null"),
				CustomerWorkspaceLocation: to.StringPtr("null"),
				ProjectStatus:             ProjectStatusActive.ToPtr(),
			},
			Tags: map[string]interface{}{},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.Project.ID == nil {
		t.Fatal("Project.ID should not be nil!")
	}
}

func TestProjects_Delete(t *testing.T) {
	// From example Projects_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProjectsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	_, err := client.Delete(ctx,
		"abgoyal-westEurope",
		"abGoyalProject2",
		&ProjectsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProjects_AssessmentOptions(t *testing.T) {
	// From example AssessmentOptions_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProjectsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.AssessmentOptions(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"default",
		&ProjectsAssessmentOptionsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AssessmentOptions.ID == nil {
		t.Fatal("AssessmentOptions.ID should not be nil!")
	}
}

func TestProjects_AssessmentOptionsList(t *testing.T) {
	// From example AssessmentOptions_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProjectsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	_, err := client.AssessmentOptionsList(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		&ProjectsAssessmentOptionsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMachines_ListByProject(t *testing.T) {
	// From example Machines_ListByProject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMachinesClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	pager := client.ListByProject("abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		&MachinesListByProjectOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Machine.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Machine.ID should not be nil!")
			}
		}
	}
}

func TestMachines_Get(t *testing.T) {
	// From example Machines_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMachinesClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.Get(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"269ef295-a38d-4f8f-9779-77ce79088311",
		&MachinesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Machine.ID == nil {
		t.Fatal("Machine.ID should not be nil!")
	}
}

func TestGroups_ListByProject(t *testing.T) {
	// From example Groups_ListByProject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	_, err := client.ListByProject(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		&GroupsListByProjectOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGroups_Get(t *testing.T) {
	// From example Groups_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.Get(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		&GroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Group.ID == nil {
		t.Fatal("Group.ID should not be nil!")
	}
}

func TestGroups_Create(t *testing.T) {
	// From example Groups_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.Create(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Group2",
		&GroupsCreateOptions{Group: &Group{
			ETag:       to.StringPtr("\"1e000c2c-0000-0d00-0000-5cdaa4190000\""),
			Properties: &GroupProperties{},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.Group.ID == nil {
		t.Fatal("Group.ID should not be nil!")
	}
}

func TestGroups_Delete(t *testing.T) {
	// From example Groups_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	_, err := client.Delete(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		&GroupsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGroups_UpdateMachines(t *testing.T) {
	// From example Groups_UpdateMachines
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGroupsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.UpdateMachines(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Group2",
		&GroupsUpdateMachinesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Group.ID == nil {
		t.Fatal("Group.ID should not be nil!")
	}
}

func TestAssessments_ListByGroup(t *testing.T) {
	// From example Assessments_ListByGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssessmentsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	_, err := client.ListByGroup(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		&AssessmentsListByGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAssessments_ListByProject(t *testing.T) {
	// From example Assessments_ListByProject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssessmentsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	_, err := client.ListByProject(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		&AssessmentsListByProjectOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAssessments_Get(t *testing.T) {
	// From example Assessments_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssessmentsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.Get(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		"assessment_5_9_2019_16_22_14",
		&AssessmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Assessment.ID == nil {
		t.Fatal("Assessment.ID should not be nil!")
	}
}

func TestAssessments_Create(t *testing.T) {
	// From example Assessments_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssessmentsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.Create(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Group2",
		"assessment_5_14_2019_16_48_47",
		&AssessmentsCreateOptions{Assessment: &Assessment{
			ETag: to.StringPtr("\"1e000c2c-0000-0d00-0000-5cdaa4190000\""),
			Properties: &AssessmentProperties{
				AzureDiskType:          AzureDiskTypeStandardOrPremium.ToPtr(),
				AzureHybridUseBenefit:  AzureHybridUseBenefitYes.ToPtr(),
				AzureLocation:          AzureLocationNorthEurope.ToPtr(),
				AzureOfferCode:         AzureOfferCodeMSAZR0003P.ToPtr(),
				AzurePricingTier:       AzurePricingTierStandard.ToPtr(),
				AzureStorageRedundancy: AzureStorageRedundancyLocallyRedundant.ToPtr(),
				AzureVMFamilies: []*AzureVMFamily{
					AzureVMFamilyDv2Series.ToPtr(),
					AzureVMFamilyFSeries.ToPtr(),
					AzureVMFamilyDv3Series.ToPtr(),
					AzureVMFamilyDSSeries.ToPtr(),
					AzureVMFamilyDSv2Series.ToPtr(),
					AzureVMFamilyFsSeries.ToPtr(),
					AzureVMFamilyDsv3Series.ToPtr(),
					AzureVMFamilyEv3Series.ToPtr(),
					AzureVMFamilyEsv3Series.ToPtr(),
					AzureVMFamilyDSeries.ToPtr(),
					AzureVMFamilyMSeries.ToPtr(),
					AzureVMFamilyFsv2Series.ToPtr(),
					AzureVMFamilyHSeries.ToPtr()},
				Currency:           CurrencyUSD.ToPtr(),
				DiscountPercentage: to.Float64Ptr(100),
				Percentile:         PercentilePercentile95.ToPtr(),
				ReservedInstance:   ReservedInstanceRI3Year.ToPtr(),
				ScalingFactor:      to.Float64Ptr(1),
				SizingCriterion:    AssessmentSizingCriterionPerformanceBased.ToPtr(),
				Stage:              AssessmentStageInProgress.ToPtr(),
				TimeRange:          TimeRangeDay.ToPtr(),
				VMUptime: &VMUptime{
					DaysPerMonth: to.Int32Ptr(31),
					HoursPerDay:  to.Int32Ptr(24),
				},
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.Assessment.ID == nil {
		t.Fatal("Assessment.ID should not be nil!")
	}
}

func TestAssessments_Delete(t *testing.T) {
	// From example Assessments_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssessmentsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	_, err := client.Delete(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		"assessment_5_9_2019_16_22_14",
		&AssessmentsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAssessments_GetReportDownloadUrl(t *testing.T) {
	// From example Assessments_GetReportDownloadUrl
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssessmentsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	_, err := client.GetReportDownloadURL(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		"assessment_5_9_2019_16_22_14",
		&AssessmentsGetReportDownloadURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAssessedMachines_ListByAssessment(t *testing.T) {
	// From example AssessedMachines_ListByAssessment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssessedMachinesClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	pager := client.ListByAssessment("abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		"assessment_5_9_2019_16_22_14",
		&AssessedMachinesListByAssessmentOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AssessedMachine.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AssessedMachine.ID should not be nil!")
			}
		}
	}
}

func TestAssessedMachines_Get(t *testing.T) {
	// From example AssessedMachines_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssessedMachinesClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.Get(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"Test1",
		"assessment_5_9_2019_16_22_14",
		"f57fe432-3bd2-486a-a83a-6f4d99f1a952",
		&AssessedMachinesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AssessedMachine.ID == nil {
		t.Fatal("AssessedMachine.ID should not be nil!")
	}
}

func TestHyperVCollectors_ListByProject(t *testing.T) {
	// From example HyperVCollectors_ListByProject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHyperVCollectorsClient(con,
		"8c3c936a-c09b-4de3-830b-3f5f244d72e9")
	_, err := client.ListByProject(ctx,
		"contosoithyperv",
		"migrateprojectce73project",
		&HyperVCollectorsListByProjectOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestHyperVCollectors_Get(t *testing.T) {
	// From example HyperVCollectors_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHyperVCollectorsClient(con,
		"8c3c936a-c09b-4de3-830b-3f5f244d72e9")
	res, err := client.Get(ctx,
		"contosoithyperv",
		"migrateprojectce73project",
		"migrateprojectce73collector",
		&HyperVCollectorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HyperVCollector.ID == nil {
		t.Fatal("HyperVCollector.ID should not be nil!")
	}
}

func TestHyperVCollectors_Create(t *testing.T) {
	// From example HyperVCollectors_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHyperVCollectorsClient(con,
		"8c3c936a-c09b-4de3-830b-3f5f244d72e9")
	res, err := client.Create(ctx,
		"contosoithyperv",
		"migrateprojectce73project",
		"migrateprojectce73collector",
		&HyperVCollectorsCreateOptions{CollectorBody: &HyperVCollector{
			ETag: to.StringPtr("\"00000981-0000-0300-0000-5d74cd5f0000\""),
			Properties: &CollectorProperties{
				AgentProperties: &CollectorAgentProperties{
					SpnDetails: &CollectorBodyAgentSpnProperties{
						ApplicationID: to.StringPtr("827f1053-44dc-439f-b832-05416dcce12b"),
						Audience:      to.StringPtr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/migrateprojectce73agentauthaadapp"),
						Authority:     to.StringPtr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
						ObjectID:      to.StringPtr("be75098e-c0fc-4ac4-98c7-282ebbcf8370"),
						TenantID:      to.StringPtr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
				},
				DiscoverySiteID: to.StringPtr("/subscriptions/8c3c936a-c09b-4de3-830b-3f5f244d72e9/resourceGroups/ContosoITHyperV/providers/Microsoft.OffAzure/HyperVSites/migrateprojectce73site"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.HyperVCollector.ID == nil {
		t.Fatal("HyperVCollector.ID should not be nil!")
	}
}

func TestHyperVCollectors_Delete(t *testing.T) {
	// From example HyperVCollectors_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHyperVCollectorsClient(con,
		"8c3c936a-c09b-4de3-830b-3f5f244d72e9")
	_, err := client.Delete(ctx,
		"contosoithyperv",
		"migrateprojectce73project",
		"migrateprojectce73collector",
		&HyperVCollectorsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServerCollectors_ListByProject(t *testing.T) {
	// From example ServerCollectors_ListByProject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerCollectorsClient(con,
		"4bd2aa0f-2bd2-4d67-91a8-5a4533d58600")
	_, err := client.ListByProject(ctx,
		"pajindtest",
		"app11141project",
		&ServerCollectorsListByProjectOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServerCollectors_Get(t *testing.T) {
	// From example ServerCollectors_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerCollectorsClient(con,
		"4bd2aa0f-2bd2-4d67-91a8-5a4533d58600")
	res, err := client.Get(ctx,
		"pajindtest",
		"app11141project",
		"app23df4collector",
		&ServerCollectorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerCollector.ID == nil {
		t.Fatal("ServerCollector.ID should not be nil!")
	}
}

func TestServerCollectors_Create(t *testing.T) {
	// From example ServerCollectors_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerCollectorsClient(con,
		"4bd2aa0f-2bd2-4d67-91a8-5a4533d58600")
	res, err := client.Create(ctx,
		"pajindtest",
		"app11141project",
		"app23df4collector",
		&ServerCollectorsCreateOptions{CollectorBody: &ServerCollector{
			ETag: to.StringPtr("\"00000606-0000-0d00-0000-605999bf0000\""),
			Properties: &CollectorProperties{
				AgentProperties: &CollectorAgentProperties{
					SpnDetails: &CollectorBodyAgentSpnProperties{
						ApplicationID: to.StringPtr("ad9f701a-cc08-4421-b51f-b5762d58e9ba"),
						Audience:      to.StringPtr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/app23df4authandaccessaadapp"),
						Authority:     to.StringPtr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
						ObjectID:      to.StringPtr("b4975e42-9248-4a36-b99f-37eca377ea00"),
						TenantID:      to.StringPtr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
				},
				DiscoverySiteID: to.StringPtr("/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/pajindTest/providers/Microsoft.OffAzure/ServerSites/app21141site"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerCollector.ID == nil {
		t.Fatal("ServerCollector.ID should not be nil!")
	}
}

func TestServerCollectors_Delete(t *testing.T) {
	// From example ServerCollectors_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServerCollectorsClient(con,
		"4bd2aa0f-2bd2-4d67-91a8-5a4533d58600")
	_, err := client.Delete(ctx,
		"pajindtest",
		"app11141project",
		"app23df4collector",
		&ServerCollectorsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVMwareCollectors_ListByProject(t *testing.T) {
	// From example VMwareCollectors_ListByProject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVMwareCollectorsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	_, err := client.ListByProject(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		&VMwareCollectorsListByProjectOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVMwareCollectors_Get(t *testing.T) {
	// From example VMwareCollectors_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVMwareCollectorsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.Get(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"PortalvCenterbc2fcollector",
		&VMwareCollectorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VMwareCollector.ID == nil {
		t.Fatal("VMwareCollector.ID should not be nil!")
	}
}

func TestVMwareCollectors_Create(t *testing.T) {
	// From example VMwareCollectors_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVMwareCollectorsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.Create(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"PortalvCenterbc2fcollector",
		&VMwareCollectorsCreateOptions{CollectorBody: &VMwareCollector{
			ETag: to.StringPtr("\"01003d32-0000-0d00-0000-5d74d2e50000\""),
			Properties: &CollectorProperties{
				AgentProperties: &CollectorAgentProperties{
					SpnDetails: &CollectorBodyAgentSpnProperties{
						ApplicationID: to.StringPtr("fc717575-8173-4b21-92a5-658b655e613e"),
						Audience:      to.StringPtr("https://72f988bf-86f1-41af-91ab-2d7cd011db47/PortalvCenterbc2fagentauthaadapp"),
						Authority:     to.StringPtr("https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47"),
						ObjectID:      to.StringPtr("29d94f38-db94-4980-aec0-0cfd55ab1cd0"),
						TenantID:      to.StringPtr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
				},
				DiscoverySiteID: to.StringPtr("/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.OffAzure/VMwareSites/PortalvCenterbc2fsite"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.VMwareCollector.ID == nil {
		t.Fatal("VMwareCollector.ID should not be nil!")
	}
}

func TestVMwareCollectors_Delete(t *testing.T) {
	// From example VMwareCollectors_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVMwareCollectorsClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	_, err := client.Delete(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"PortalvCenterbc2fcollector",
		&VMwareCollectorsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestImportCollectors_ListByProject(t *testing.T) {
	// From example ImportCollectors_ListByProject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewImportCollectorsClient(con,
		"31be0ff4-c932-4cb3-8efc-efa411d79280")
	_, err := client.ListByProject(ctx,
		"markusavstestrg",
		"rajoshCCY9671project",
		&ImportCollectorsListByProjectOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestImportCollectors_Get(t *testing.T) {
	// From example ImportCollectors_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewImportCollectorsClient(con,
		"31be0ff4-c932-4cb3-8efc-efa411d79280")
	res, err := client.Get(ctx,
		"markusavstestrg",
		"rajoshCCY9671project",
		"importCollector2951",
		&ImportCollectorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ImportCollector.ID == nil {
		t.Fatal("ImportCollector.ID should not be nil!")
	}
}

func TestImportCollectors_Create(t *testing.T) {
	// From example ImportCollectors_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewImportCollectorsClient(con,
		"31be0ff4-c932-4cb3-8efc-efa411d79280")
	res, err := client.Create(ctx,
		"markusavstestrg",
		"rajoshCCY9671project",
		"importCollector2952",
		&ImportCollectorsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ImportCollector.ID == nil {
		t.Fatal("ImportCollector.ID should not be nil!")
	}
}

func TestImportCollectors_Delete(t *testing.T) {
	// From example ImportCollectors_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewImportCollectorsClient(con,
		"31be0ff4-c932-4cb3-8efc-efa411d79280")
	_, err := client.Delete(ctx,
		"markusavstestrg",
		"rajoshCCY9671project",
		"importCollector2952",
		&ImportCollectorsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnection_ListByProject(t *testing.T) {
	// From example PrivateEndpointConnections_ListByProject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	_, err := client.ListByProject(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		&PrivateEndpointConnectionListByProjectOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnection_Get(t *testing.T) {
	// From example PrivateEndpointConnections_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.Get(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43",
		&PrivateEndpointConnectionGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnection_Update(t *testing.T) {
	// From example PrivateEndpointConnections_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	res, err := client.Update(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43",
		&PrivateEndpointConnectionUpdateOptions{PrivateEndpointConnectionBody: &PrivateEndpointConnection{
			ETag: to.StringPtr("\"00009300-0000-0300-0000-602b967b0000\""),
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description:     to.StringPtr("null"),
					ActionsRequired: to.StringPtr(""),
					Status:          PrivateLinkServiceConnectionStateStatusApproved.ToPtr(),
				},
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnection_Delete(t *testing.T) {
	// From example PrivateEndpointConnections_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionClient(con,
		"6393a73f-8d55-47ef-b6dd-179b3e0c7910")
	_, err := client.Delete(ctx,
		"abgoyal-westEurope",
		"abgoyalWEselfhostb72bproject",
		"custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43",
		&PrivateEndpointConnectionDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResource_Get(t *testing.T) {
	// From example PrivateLinkResources_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourceClient(con,
		"4bd2aa0f-2bd2-4d67-91a8-5a4533d58600")
	res, err := client.Get(ctx,
		"madhavicus",
		"custestpece80project",
		"Default",
		&PrivateLinkResourceGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

func TestPrivateLinkResource_ListByProject(t *testing.T) {
	// From example PrivateLinkResources_ListByProject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourceClient(con,
		"4bd2aa0f-2bd2-4d67-91a8-5a4533d58600")
	_, err := client.ListByProject(ctx,
		"madhavicus",
		"custestpece80project",
		&PrivateLinkResourceListByProjectOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example Operations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	_, err := client.List(ctx,
		&OperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
