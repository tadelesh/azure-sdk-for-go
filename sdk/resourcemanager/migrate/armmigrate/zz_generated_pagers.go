//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrate

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AssessedMachinesClientListByAssessmentPager provides operations for iterating over paged responses.
type AssessedMachinesClientListByAssessmentPager struct {
	client    *AssessedMachinesClient
	current   AssessedMachinesClientListByAssessmentResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AssessedMachinesClientListByAssessmentResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AssessedMachinesClientListByAssessmentPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AssessedMachineResultList.NextLink == nil || len(*p.current.AssessedMachineResultList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AssessedMachinesClientListByAssessmentPager) NextPage(ctx context.Context) (AssessedMachinesClientListByAssessmentResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AssessedMachinesClientListByAssessmentResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AssessedMachinesClientListByAssessmentResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AssessedMachinesClientListByAssessmentResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AssessedMachinesClientListByAssessmentResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByAssessmentHandleResponse(resp)
	if err != nil {
		return AssessedMachinesClientListByAssessmentResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AssessmentsClientListByGroupPager provides operations for iterating over paged responses.
type AssessmentsClientListByGroupPager struct {
	client    *AssessmentsClient
	current   AssessmentsClientListByGroupResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AssessmentsClientListByGroupPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *AssessmentsClientListByGroupPager) NextPage(ctx context.Context) (AssessmentsClientListByGroupResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return AssessmentsClientListByGroupResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AssessmentsClientListByGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AssessmentsClientListByGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AssessmentsClientListByGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByGroupHandleResponse(resp)
	if err != nil {
		return AssessmentsClientListByGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AssessmentsClientListByProjectPager provides operations for iterating over paged responses.
type AssessmentsClientListByProjectPager struct {
	client    *AssessmentsClient
	current   AssessmentsClientListByProjectResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AssessmentsClientListByProjectPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *AssessmentsClientListByProjectPager) NextPage(ctx context.Context) (AssessmentsClientListByProjectResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return AssessmentsClientListByProjectResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AssessmentsClientListByProjectResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AssessmentsClientListByProjectResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AssessmentsClientListByProjectResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByProjectHandleResponse(resp)
	if err != nil {
		return AssessmentsClientListByProjectResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// GroupsClientListByProjectPager provides operations for iterating over paged responses.
type GroupsClientListByProjectPager struct {
	client    *GroupsClient
	current   GroupsClientListByProjectResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *GroupsClientListByProjectPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *GroupsClientListByProjectPager) NextPage(ctx context.Context) (GroupsClientListByProjectResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return GroupsClientListByProjectResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return GroupsClientListByProjectResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return GroupsClientListByProjectResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return GroupsClientListByProjectResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByProjectHandleResponse(resp)
	if err != nil {
		return GroupsClientListByProjectResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// HyperVCollectorsClientListByProjectPager provides operations for iterating over paged responses.
type HyperVCollectorsClientListByProjectPager struct {
	client    *HyperVCollectorsClient
	current   HyperVCollectorsClientListByProjectResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *HyperVCollectorsClientListByProjectPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *HyperVCollectorsClientListByProjectPager) NextPage(ctx context.Context) (HyperVCollectorsClientListByProjectResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return HyperVCollectorsClientListByProjectResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return HyperVCollectorsClientListByProjectResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return HyperVCollectorsClientListByProjectResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return HyperVCollectorsClientListByProjectResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByProjectHandleResponse(resp)
	if err != nil {
		return HyperVCollectorsClientListByProjectResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ImportCollectorsClientListByProjectPager provides operations for iterating over paged responses.
type ImportCollectorsClientListByProjectPager struct {
	client    *ImportCollectorsClient
	current   ImportCollectorsClientListByProjectResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ImportCollectorsClientListByProjectPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ImportCollectorsClientListByProjectPager) NextPage(ctx context.Context) (ImportCollectorsClientListByProjectResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ImportCollectorsClientListByProjectResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ImportCollectorsClientListByProjectResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ImportCollectorsClientListByProjectResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ImportCollectorsClientListByProjectResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByProjectHandleResponse(resp)
	if err != nil {
		return ImportCollectorsClientListByProjectResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MachinesClientListByProjectPager provides operations for iterating over paged responses.
type MachinesClientListByProjectPager struct {
	client    *MachinesClient
	current   MachinesClientListByProjectResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MachinesClientListByProjectResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MachinesClientListByProjectPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MachineResultList.NextLink == nil || len(*p.current.MachineResultList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MachinesClientListByProjectPager) NextPage(ctx context.Context) (MachinesClientListByProjectResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MachinesClientListByProjectResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MachinesClientListByProjectResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MachinesClientListByProjectResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MachinesClientListByProjectResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByProjectHandleResponse(resp)
	if err != nil {
		return MachinesClientListByProjectResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return OperationsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ProjectsClientAssessmentOptionsListPager provides operations for iterating over paged responses.
type ProjectsClientAssessmentOptionsListPager struct {
	client    *ProjectsClient
	current   ProjectsClientAssessmentOptionsListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ProjectsClientAssessmentOptionsListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ProjectsClientAssessmentOptionsListPager) NextPage(ctx context.Context) (ProjectsClientAssessmentOptionsListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ProjectsClientAssessmentOptionsListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ProjectsClientAssessmentOptionsListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ProjectsClientAssessmentOptionsListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ProjectsClientAssessmentOptionsListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.assessmentOptionsListHandleResponse(resp)
	if err != nil {
		return ProjectsClientAssessmentOptionsListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ProjectsClientListBySubscriptionPager provides operations for iterating over paged responses.
type ProjectsClientListBySubscriptionPager struct {
	client    *ProjectsClient
	current   ProjectsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProjectsClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ProjectsClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProjectResultList.NextLink == nil || len(*p.current.ProjectResultList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ProjectsClientListBySubscriptionPager) NextPage(ctx context.Context) (ProjectsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ProjectsClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ProjectsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ProjectsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ProjectsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ProjectsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ProjectsClientListPager provides operations for iterating over paged responses.
type ProjectsClientListPager struct {
	client    *ProjectsClient
	current   ProjectsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProjectsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ProjectsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProjectResultList.NextLink == nil || len(*p.current.ProjectResultList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ProjectsClientListPager) NextPage(ctx context.Context) (ProjectsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ProjectsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ProjectsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ProjectsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ProjectsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ProjectsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ServerCollectorsClientListByProjectPager provides operations for iterating over paged responses.
type ServerCollectorsClientListByProjectPager struct {
	client    *ServerCollectorsClient
	current   ServerCollectorsClientListByProjectResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ServerCollectorsClientListByProjectPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ServerCollectorsClientListByProjectPager) NextPage(ctx context.Context) (ServerCollectorsClientListByProjectResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ServerCollectorsClientListByProjectResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ServerCollectorsClientListByProjectResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ServerCollectorsClientListByProjectResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ServerCollectorsClientListByProjectResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByProjectHandleResponse(resp)
	if err != nil {
		return ServerCollectorsClientListByProjectResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VMwareCollectorsClientListByProjectPager provides operations for iterating over paged responses.
type VMwareCollectorsClientListByProjectPager struct {
	client    *VMwareCollectorsClient
	current   VMwareCollectorsClientListByProjectResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VMwareCollectorsClientListByProjectPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *VMwareCollectorsClientListByProjectPager) NextPage(ctx context.Context) (VMwareCollectorsClientListByProjectResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return VMwareCollectorsClientListByProjectResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VMwareCollectorsClientListByProjectResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VMwareCollectorsClientListByProjectResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VMwareCollectorsClientListByProjectResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByProjectHandleResponse(resp)
	if err != nil {
		return VMwareCollectorsClientListByProjectResponse{}, err
	}
	p.current = result
	return p.current, nil
}
