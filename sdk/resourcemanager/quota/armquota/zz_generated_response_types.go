//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armquota

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"time"
)

// ClientCreateOrUpdatePollerResponse contains the response from method Client.CreateOrUpdate.
type ClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ClientCreateOrUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ClientCreateOrUpdateResponse, error) {
	respType := ClientCreateOrUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.CurrentQuotaLimitBase)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *Client, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("Client.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ClientCreateOrUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ClientCreateOrUpdateResponse contains the response from method Client.CreateOrUpdate.
type ClientCreateOrUpdateResponse struct {
	CurrentQuotaLimitBase
}

// ClientGetResponse contains the response from method Client.Get.
type ClientGetResponse struct {
	CurrentQuotaLimitBase
	// ETag contains the information returned from the ETag header response.
	ETag *string
}

// ClientListResponse contains the response from method Client.List.
type ClientListResponse struct {
	Limits
	// ETag contains the information returned from the ETag header response.
	ETag *string
}

// ClientUpdatePollerResponse contains the response from method Client.Update.
type ClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ClientUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ClientUpdateResponse, error) {
	respType := ClientUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.CurrentQuotaLimitBase)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ClientUpdatePollerResponse from the provided client and resume token.
func (l *ClientUpdatePollerResponse) Resume(ctx context.Context, client *Client, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("Client.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ClientUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ClientUpdateResponse contains the response from method Client.Update.
type ClientUpdateResponse struct {
	CurrentQuotaLimitBase
}

// OperationClientListResponse contains the response from method OperationClient.List.
type OperationClientListResponse struct {
	OperationList
}

// RequestStatusClientGetResponse contains the response from method RequestStatusClient.Get.
type RequestStatusClientGetResponse struct {
	RequestDetails
}

// RequestStatusClientListResponse contains the response from method RequestStatusClient.List.
type RequestStatusClientListResponse struct {
	RequestDetailsList
}

// UsagesClientGetResponse contains the response from method UsagesClient.Get.
type UsagesClientGetResponse struct {
	CurrentUsagesBase
	// ETag contains the information returned from the ETag header response.
	ETag *string
}

// UsagesClientListResponse contains the response from method UsagesClient.List.
type UsagesClientListResponse struct {
	UsagesLimits
	// ETag contains the information returned from the ETag header response.
	ETag *string
}
