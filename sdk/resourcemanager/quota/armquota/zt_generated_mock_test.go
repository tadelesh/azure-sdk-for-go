//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armquota_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/quota/armquota"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestUsages_Get(t *testing.T) {
	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getComputeOneSkuUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_UsagesRequest_ForCompute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquota.NewUsagesClient(cred, &options)
	res, err := client.Get(ctx,
		"standardNDSFamily",
		"subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getComputeOneSkuUsages.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquota.CurrentUsagesBase{
			Name: to.Ptr("standardNDSFamily"),
			Type: to.Ptr("Microsoft.Quota/Usages"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Usages/standardNDSFamily"),
			Properties: &armquota.UsagesProperties{
				Name: &armquota.ResourceName{
					LocalizedValue: to.Ptr("Standard NDS Family vCPUs"),
					Value:          to.Ptr("standardNDSFamily"),
				},
				IsQuotaApplicable: to.Ptr(true),
				Unit:              to.Ptr("Count"),
				Usages: &armquota.UsagesObject{
					UsagesType: to.Ptr(armquota.UsagesTypesIndividual),
					Value:      to.Ptr[int32](10),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CurrentUsagesBase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CurrentUsagesBase)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getComputeOneSkuUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getNetworkOneSkuUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_UsagesRequest_ForNetwork"},
	})
	client = armquota.NewUsagesClient(cred, &options)
	res, err = client.Get(ctx,
		"MinPublicIpInterNetworkPrefixLength",
		"subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getNetworkOneSkuUsages.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquota.CurrentUsagesBase{
			Name: to.Ptr("MinPublicIpInterNetworkPrefixLength"),
			Type: to.Ptr("Microsoft.Quota/usages"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/MinPublicIpInterNetworkPrefixLength"),
			Properties: &armquota.UsagesProperties{
				Name: &armquota.ResourceName{
					LocalizedValue: to.Ptr("Min Public Ip InterNetwork Prefix Length"),
					Value:          to.Ptr("MinPublicIpInterNetworkPrefixLength"),
				},
				IsQuotaApplicable: to.Ptr(true),
				ResourceType:      to.Ptr("MinPublicIpInterNetworkPrefixLength"),
				Unit:              to.Ptr("Count"),
				Usages: &armquota.UsagesObject{
					Value: to.Ptr[int32](10),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CurrentUsagesBase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CurrentUsagesBase)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getNetworkOneSkuUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsages_List(t *testing.T) {
	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getComputeUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_listUsagesForCompute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquota.NewUsagesClient(cred, &options)
	pager := client.List("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getComputeUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armquota.UsagesLimits{
			Value: []*armquota.CurrentUsagesBase{
				{
					Name: to.Ptr("standardFSv2Family"),
					Type: to.Ptr("Microsoft.Quota/Usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Usages/standardFSv2Family"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard FSv2 Family vCPUs"),
							Value:          to.Ptr("standardFSv2Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("standardNDSFamily"),
					Type: to.Ptr("Microsoft.Quota/Usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Usages/standardNDSFamily"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard NDS Family vCPUs"),
							Value:          to.Ptr("standardNDSFamily"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("standardNCSv2Family"),
					Type: to.Ptr("Microsoft.Quota/Usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Usages/standardNCSv2Family"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard NCSv2 Family vCPUs"),
							Value:          to.Ptr("standardNCSv2Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("standardNCSv3Family"),
					Type: to.Ptr("Microsoft.Quota/Usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Usages/standardNCSv3Family"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard NCSv3 Family vCPUs"),
							Value:          to.Ptr("standardNCSv3Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("standardLSv2Family"),
					Type: to.Ptr("Microsoft.Quota/Usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Usages/standardLSv2Family"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard LSv2 Family vCPUs"),
							Value:          to.Ptr("standardLSv2Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("standardPBSFamily"),
					Type: to.Ptr("Microsoft.Quota/Usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Usages/standardPBSFamily"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard PBS Family vCPUs"),
							Value:          to.Ptr("standardPBSFamily"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("standardEIv3Family"),
					Type: to.Ptr("Microsoft.Quota/Usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Usages/standardEIv3Family"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard EIv3 Family vCPUs"),
							Value:          to.Ptr("standardEIv3Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("standardEISv3Family"),
					Type: to.Ptr("Microsoft.Quota/Usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Usages/standardEISv3Family"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard EISv3 Family vCPUs"),
							Value:          to.Ptr("standardEISv3Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("standardDCSFamily"),
					Type: to.Ptr("Microsoft.Quota/Usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Usages/standardDCSFamily"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard DCS Family vCPUs"),
							Value:          to.Ptr("standardDCSFamily"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("standardNVSv2Family"),
					Type: to.Ptr("Microsoft.Quota/Usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Usages/standardNVSv2Family"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard NVSv2 Family vCPUs"),
							Value:          to.Ptr("standardNVSv2Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("standardMSv2Family"),
					Type: to.Ptr("Microsoft.Quota/Usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Usages/standardMSv2Family"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard MSv2 Family vCPUs"),
							Value:          to.Ptr("standardMSv2Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("availabilitySets"),
					Type: to.Ptr("Microsoft.Quota/Usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Usages/availabilitySets"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Availability Sets"),
							Value:          to.Ptr("availabilitySets"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsagesLimits) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsagesLimits)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getComputeUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getNetworkUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_listUsagesForNetwork"},
	})
	client = armquota.NewUsagesClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getNetworkUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armquota.UsagesLimits{
			Value: []*armquota.CurrentUsagesBase{
				{
					Name: to.Ptr("VirtualNetworks"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Virtual Networks"),
							Value:          to.Ptr("VirtualNetworks"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("StaticPublicIPAddresses"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Static Public IP Addresses"),
							Value:          to.Ptr("StaticPublicIPAddresses"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("NetworkSecurityGroups"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Network Security Groups"),
							Value:          to.Ptr("NetworkSecurityGroups"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("PublicIPAddresses"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Public IP Addresses - Basic"),
							Value:          to.Ptr("PublicIPAddresses"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Properties:        map[string]interface{}{},
						ResourceType:      to.Ptr("PublicIpAddresses"),
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("PublicIpPrefixes"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Public Ip Prefixes"),
							Value:          to.Ptr("PublicIpPrefixes"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("NatGateways"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Nat Gateways"),
							Value:          to.Ptr("NatGateways"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("NetworkInterfaces"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Network Interfaces"),
							Value:          to.Ptr("NetworkInterfaces"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("PrivateEndpoints"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Private Endpoints"),
							Value:          to.Ptr("PrivateEndpoints"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("PrivateEndpointRedirectMaps"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Private Endpoint Redirect Maps"),
							Value:          to.Ptr("PrivateEndpointRedirectMaps"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("LoadBalancers"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Load Balancers"),
							Value:          to.Ptr("LoadBalancers"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("PrivateLinkServices"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Private Link Services"),
							Value:          to.Ptr("PrivateLinkServices"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("ApplicationGateways"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Application Gateways"),
							Value:          to.Ptr("ApplicationGateways"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("RouteTables"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Route Tables"),
							Value:          to.Ptr("RouteTables"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("RouteFilters"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Route Filters"),
							Value:          to.Ptr("RouteFilters"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("NetworkWatchers"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Network Watchers"),
							Value:          to.Ptr("NetworkWatchers"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("PacketCaptures"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Packet Captures"),
							Value:          to.Ptr("PacketCaptures"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("ApplicationSecurityGroups"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Application Security Groups."),
							Value:          to.Ptr("ApplicationSecurityGroups"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("StandardSkuLoadBalancers"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard Sku Load Balancers"),
							Value:          to.Ptr("StandardSkuLoadBalancers"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("StandardSkuPublicIpAddresses"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Public IP Addresses - Standard"),
							Value:          to.Ptr("StandardSkuPublicIpAddresses"),
						},
						IsQuotaApplicable: to.Ptr(true),
						ResourceType:      to.Ptr("PublicIpAddresses"),
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("DnsServersPerVirtualNetwork"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("DNS servers per Virtual Network"),
							Value:          to.Ptr("DnsServersPerVirtualNetwork"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("MinPublicIpInterNetworkPrefixLength"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/usages/"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Min Public Ip InterNetwork Prefix Length"),
							Value:          to.Ptr("MinPublicIpInterNetworkPrefixLength"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Properties:        map[string]interface{}{},
						Unit:              to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsagesLimits) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsagesLimits)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getNetworkUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getMachineLearningServicesUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_listUsagesMachineLearningServices"},
	})
	client = armquota.NewUsagesClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.MachineLearningServices/locations/eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getMachineLearningServicesUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armquota.UsagesLimits{
			Value: []*armquota.CurrentUsagesBase{
				{
					Name: to.Ptr("standardDv2Family"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.MachineLearningServices/locations/eastus/providers/Microsoft.Quota/usages/standardDv2Family"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard Dv2 Family vCPUs"),
							Value:          to.Ptr("standardDv2Family"),
						},
						ResourceType: to.Ptr("dedicated"),
						Unit:         to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				},
				{
					Name: to.Ptr("totalLowPriorityCores"),
					Type: to.Ptr("Microsoft.Quota/usages"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.MachineLearningServices/locations/eastus/providers/Microsoft.Quota/usages/totalLowPriorityCores"),
					Properties: &armquota.UsagesProperties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Total Regional Low-priority vCPUs"),
							Value:          to.Ptr("totalLowPriorityCores"),
						},
						ResourceType: to.Ptr("lowPriority"),
						Unit:         to.Ptr("Count"),
						Usages: &armquota.UsagesObject{
							Value: to.Ptr[int32](10),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsagesLimits) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsagesLimits)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getMachineLearningServicesUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuota_Get(t *testing.T) {
	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getComputeOneSkuQuotaLimit.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_Get_Request_ForCompute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquota.NewClient(cred, &options)
	res, err := client.Get(ctx,
		"standardNDSFamily",
		"subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getComputeOneSkuQuotaLimit.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquota.CurrentQuotaLimitBase{
			Name: to.Ptr("standardNDSFamily"),
			Type: to.Ptr("Microsoft.Quota/Quotas"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Quotas/standardNDSFamily"),
			Properties: &armquota.Properties{
				Name: &armquota.ResourceName{
					LocalizedValue: to.Ptr("Standard NDS Family vCPUs"),
					Value:          to.Ptr("standardNDSFamily"),
				},
				IsQuotaApplicable: to.Ptr(true),
				Limit: &armquota.LimitObject{
					LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
					LimitType:       to.Ptr(armquota.QuotaLimitTypesIndependent),
					Value:           to.Ptr[int32](100),
				},
				Unit: to.Ptr("Count"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CurrentQuotaLimitBase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CurrentQuotaLimitBase)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getComputeOneSkuQuotaLimit.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getNetworkOneSkuQuotaLimit.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_UsagesRequest_ForNetwork"},
	})
	client = armquota.NewClient(cred, &options)
	res, err = client.Get(ctx,
		"MinPublicIpInterNetworkPrefixLength",
		"subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getNetworkOneSkuQuotaLimit.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquota.CurrentQuotaLimitBase{
			Name: to.Ptr("MinPublicIpInterNetworkPrefixLength"),
			Type: to.Ptr("Microsoft.Quota/Quotas"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/MinPublicIpInterNetworkPrefixLength"),
			Properties: &armquota.Properties{
				Name: &armquota.ResourceName{
					LocalizedValue: to.Ptr("Min Public Ip InterNetwork Prefix Length"),
					Value:          to.Ptr("MinPublicIpInterNetworkPrefixLength"),
				},
				IsQuotaApplicable: to.Ptr(true),
				Limit: &armquota.LimitObject{
					LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
					Value:           to.Ptr[int32](10),
				},
				ResourceType: to.Ptr("MinPublicIpInterNetworkPrefixLength"),
				Unit:         to.Ptr("Count"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CurrentQuotaLimitBase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CurrentQuotaLimitBase)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getNetworkOneSkuQuotaLimit.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuota_CreateOrUpdate(t *testing.T) {
	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putNetworkOneSkuQuotaRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_PutRequest_ForNetwork"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquota.NewClient(cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"MinPublicIpInterNetworkPrefixLength",
		"subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Network/locations/eastus",
		armquota.CurrentQuotaLimitBase{
			Properties: &armquota.Properties{
				Name: &armquota.ResourceName{
					Value: to.Ptr("MinPublicIpInterNetworkPrefixLength"),
				},
				Limit: &armquota.LimitObject{
					LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
					Value:           to.Ptr[int32](10),
				},
				ResourceType: to.Ptr("MinPublicIpInterNetworkPrefixLength"),
			},
		},
		&armquota.ClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putNetworkOneSkuQuotaRequest.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putNetworkOneSkuQuotaRequest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquota.CurrentQuotaLimitBase{
			Name: to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Type: to.Ptr("Microsoft.Quota/quotas"),
			ID:   to.Ptr("/subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/quotaRequests/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Properties: &armquota.Properties{
				Name: &armquota.ResourceName{
					Value: to.Ptr("MinPublicIpInterNetworkPrefixLength"),
				},
				Limit: &armquota.LimitObject{
					LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
					Value:           to.Ptr[int32](10),
				},
				ResourceType: to.Ptr("MinPublicIpInterNetworkPrefixLength"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CurrentQuotaLimitBase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CurrentQuotaLimitBase)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putNetworkOneSkuQuotaRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putNetworkOneSkuQuotaRequestStandardSkuPublicIpAddresses.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_PutRequest_ForNetwork_StandardSkuPublicIpAddressesResource"},
	})
	client = armquota.NewClient(cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"StandardSkuPublicIpAddresses",
		"subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Network/locations/eastus",
		armquota.CurrentQuotaLimitBase{
			Properties: &armquota.Properties{
				Name: &armquota.ResourceName{
					Value: to.Ptr("StandardSkuPublicIpAddresses"),
				},
				Limit: &armquota.LimitObject{
					LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
					Value:           to.Ptr[int32](10),
				},
				ResourceType: to.Ptr("PublicIpAddresses"),
			},
		},
		&armquota.ClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putNetworkOneSkuQuotaRequestStandardSkuPublicIpAddresses.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putNetworkOneSkuQuotaRequestStandardSkuPublicIpAddresses.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquota.CurrentQuotaLimitBase{
			Name: to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Type: to.Ptr("Microsoft.Quota/quotas"),
			ID:   to.Ptr("/subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/quotaRequests/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Properties: &armquota.Properties{
				Name: &armquota.ResourceName{
					Value: to.Ptr("StandardSkuPublicIpAddresses"),
				},
				Limit: &armquota.LimitObject{
					LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
					Value:           to.Ptr[int32](10),
				},
				ResourceType: to.Ptr("PublicIpAddresses"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CurrentQuotaLimitBase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CurrentQuotaLimitBase)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putNetworkOneSkuQuotaRequestStandardSkuPublicIpAddresses.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putComputeOneSkuQuotaRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_Put_Request_ForCompute"},
	})
	client = armquota.NewClient(cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"standardFSv2Family",
		"subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Compute/locations/eastus",
		armquota.CurrentQuotaLimitBase{
			Properties: &armquota.Properties{
				Name: &armquota.ResourceName{
					Value: to.Ptr("standardFSv2Family"),
				},
				Limit: &armquota.LimitObject{
					LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
					Value:           to.Ptr[int32](10),
				},
			},
		},
		&armquota.ClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putComputeOneSkuQuotaRequest.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putComputeOneSkuQuotaRequest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquota.CurrentQuotaLimitBase{
			Name: to.Ptr("standardFSv2Family"),
			Type: to.Ptr("Microsoft.Quota/quotas"),
			ID:   to.Ptr("/subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/quotas/standardFSv2Family"),
			Properties: &armquota.Properties{
				Name: &armquota.ResourceName{
					Value: to.Ptr("standardFSv2Family"),
				},
				Limit: &armquota.LimitObject{
					LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
					Value:           to.Ptr[int32](10),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CurrentQuotaLimitBase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CurrentQuotaLimitBase)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putComputeOneSkuQuotaRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putMachineLearningServicesQuotaRequestLowPriority.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_Request_ForMachineLearningServices_LowPriorityResource"},
	})
	client = armquota.NewClient(cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"TotalLowPriorityCores",
		"subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.MachineLearningServices/locations/eastus",
		armquota.CurrentQuotaLimitBase{
			Properties: &armquota.Properties{
				Name: &armquota.ResourceName{
					Value: to.Ptr("TotalLowPriorityCores"),
				},
				Limit: &armquota.LimitObject{
					LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
					Value:           to.Ptr[int32](10),
				},
				ResourceType: to.Ptr("lowPriority"),
			},
		},
		&armquota.ClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putMachineLearningServicesQuotaRequestLowPriority.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putMachineLearningServicesQuotaRequestLowPriority.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquota.CurrentQuotaLimitBase{
			Name: to.Ptr("TotalLowPriorityCores"),
			Type: to.Ptr("Microsoft.Quota/quotas"),
			ID:   to.Ptr("/subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.MachineLearningServices/locations/eastus/providers/Microsoft.Quota/quotas/TotalLowPriorityCores"),
			Properties: &armquota.Properties{
				Name: &armquota.ResourceName{
					Value: to.Ptr("TotalLowPriorityCores"),
				},
				Limit: &armquota.LimitObject{
					LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
					Value:           to.Ptr[int32](10),
				},
				ResourceType: to.Ptr("lowPriority"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CurrentQuotaLimitBase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CurrentQuotaLimitBase)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/putMachineLearningServicesQuotaRequestLowPriority.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuota_Update(t *testing.T) {
	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/patchComputeQuotaRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_Request_PatchForCompute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquota.NewClient(cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"standardFSv2Family",
		"subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Compute/locations/eastus",
		armquota.CurrentQuotaLimitBase{
			Properties: &armquota.Properties{
				Name: &armquota.ResourceName{
					Value: to.Ptr("standardFSv2Family"),
				},
				Limit: &armquota.LimitObject{
					LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
					Value:           to.Ptr[int32](10),
				},
			},
		},
		&armquota.ClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/patchComputeQuotaRequest.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/patchComputeQuotaRequest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquota.CurrentQuotaLimitBase{
			Name: to.Ptr("standardFSv2Family"),
			Type: to.Ptr("Microsoft.Quota/quotas"),
			ID:   to.Ptr("/subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/quotas/standardFSv2Family"),
			Properties: &armquota.Properties{
				Name: &armquota.ResourceName{
					LocalizedValue: to.Ptr("Standard FSv2 Family vCPUs"),
					Value:          to.Ptr("standardFSv2Family"),
				},
				Limit: &armquota.LimitObject{
					LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
					Value:           to.Ptr[int32](10),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CurrentQuotaLimitBase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CurrentQuotaLimitBase)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/patchComputeQuotaRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/patchNetworkOneSkuQuotaRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_Request_PatchForNetwork"},
	})
	client = armquota.NewClient(cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"MinPublicIpInterNetworkPrefixLength",
		"subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Network/locations/eastus",
		armquota.CurrentQuotaLimitBase{
			Properties: &armquota.Properties{
				Name: &armquota.ResourceName{
					Value: to.Ptr("MinPublicIpInterNetworkPrefixLength"),
				},
				Limit: &armquota.LimitObject{
					LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
					Value:           to.Ptr[int32](10),
				},
				ResourceType: to.Ptr("MinPublicIpInterNetworkPrefixLength"),
			},
		},
		&armquota.ClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/patchNetworkOneSkuQuotaRequest.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/patchNetworkOneSkuQuotaRequest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquota.CurrentQuotaLimitBase{
			Name: to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Type: to.Ptr("Microsoft.Quota/quotas"),
			ID:   to.Ptr("/subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/quotaRequests/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Properties: &armquota.Properties{
				Name: &armquota.ResourceName{
					Value: to.Ptr("MinPublicIpInterNetworkPrefixLength"),
				},
				Limit: &armquota.LimitObject{
					LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
					Value:           to.Ptr[int32](10),
				},
				ResourceType: to.Ptr("MinPublicIpInterNetworkPrefixLength"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CurrentQuotaLimitBase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CurrentQuotaLimitBase)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/patchNetworkOneSkuQuotaRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuota_List(t *testing.T) {
	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getComputeQuotaLimits.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_listQuotaLimitsForCompute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquota.NewClient(cred, &options)
	pager := client.List("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getComputeQuotaLimits.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armquota.Limits{
			Value: []*armquota.CurrentQuotaLimitBase{
				{
					Name: to.Ptr("standardFSv2Family"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Quotas/standardFSv2Family"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard FSv2 Family vCPUs"),
							Value:          to.Ptr("standardFSv2Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Unit: to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("standardNDSFamily"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Quotas/standardNDSFamily"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard NDS Family vCPUs"),
							Value:          to.Ptr("standardNDSFamily"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Unit: to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("standardNCSv2Family"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Quotas/standardNCSv2Family"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard NCSv2 Family vCPUs"),
							Value:          to.Ptr("standardNCSv2Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Unit: to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("standardNCSv3Family"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Quotas/standardNCSv3Family"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard NCSv3 Family vCPUs"),
							Value:          to.Ptr("standardNCSv3Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Unit: to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("standardLSv2Family"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Quotas/standardLSv2Family"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard LSv2 Family vCPUs"),
							Value:          to.Ptr("standardLSv2Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Unit: to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("standardPBSFamily"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Quotas/standardPBSFamily"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard PBS Family vCPUs"),
							Value:          to.Ptr("standardPBSFamily"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Unit: to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("standardEIv3Family"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Quotas/standardEIv3Family"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard EIv3 Family vCPUs"),
							Value:          to.Ptr("standardEIv3Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Unit: to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("standardEISv3Family"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Quotas/standardEISv3Family"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard EISv3 Family vCPUs"),
							Value:          to.Ptr("standardEISv3Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Unit: to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("standardDCSFamily"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Quotas/standardDCSFamily"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard DCS Family vCPUs"),
							Value:          to.Ptr("standardDCSFamily"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Unit: to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("standardNVSv2Family"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Quotas/standardNVSv2Family"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard NVSv2 Family vCPUs"),
							Value:          to.Ptr("standardNVSv2Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Unit: to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("standardMSv2Family"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Quotas/standardMSv2Family"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard MSv2 Family vCPUs"),
							Value:          to.Ptr("standardMSv2Family"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Unit: to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("availabilitySets"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/Quotas/availabilitySets"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Availability Sets"),
							Value:          to.Ptr("availabilitySets"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Unit: to.Ptr("Count"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Limits) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Limits)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getComputeQuotaLimits.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getNetworkQuotaLimits.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_listQuotaLimitsForNetwork"},
	})
	client = armquota.NewClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getNetworkQuotaLimits.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armquota.Limits{
			Value: []*armquota.CurrentQuotaLimitBase{
				{
					Name: to.Ptr("VirtualNetworks"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Virtual Networks"),
							Value:          to.Ptr("VirtualNetworks"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("StaticPublicIPAddresses"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Static Public IP Addresses"),
							Value:          to.Ptr("StaticPublicIPAddresses"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("NetworkSecurityGroups"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Network Security Groups"),
							Value:          to.Ptr("NetworkSecurityGroups"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("PublicIPAddresses"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Public IP Addresses - Basic"),
							Value:          to.Ptr("PublicIPAddresses"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("PublicIpPrefixes"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Public Ip Prefixes"),
							Value:          to.Ptr("PublicIpPrefixes"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("NatGateways"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Nat Gateways"),
							Value:          to.Ptr("NatGateways"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("NetworkInterfaces"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Network Interfaces"),
							Value:          to.Ptr("NetworkInterfaces"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("PrivateEndpoints"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Private Endpoints"),
							Value:          to.Ptr("PrivateEndpoints"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("PrivateEndpointRedirectMaps"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Private Endpoint Redirect Maps"),
							Value:          to.Ptr("PrivateEndpointRedirectMaps"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("LoadBalancers"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Load Balancers"),
							Value:          to.Ptr("LoadBalancers"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("PrivateLinkServices"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Private Link Services"),
							Value:          to.Ptr("PrivateLinkServices"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("ApplicationGateways"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Application Gateways"),
							Value:          to.Ptr("ApplicationGateways"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("RouteTables"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Route Tables"),
							Value:          to.Ptr("RouteTables"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("RouteFilters"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Route Filters"),
							Value:          to.Ptr("RouteFilters"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("NetworkWatchers"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Network Watchers"),
							Value:          to.Ptr("NetworkWatchers"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("PacketCaptures"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Packet Captures"),
							Value:          to.Ptr("PacketCaptures"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("ApplicationSecurityGroups"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Application Security Groups."),
							Value:          to.Ptr("ApplicationSecurityGroups"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("DdosProtectionPlans"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("DDoS Protection Plans."),
							Value:          to.Ptr("DdosProtectionPlans"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("DdosCustomPolicies"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("DDoS customized policies"),
							Value:          to.Ptr("DdosCustomPolicies"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("ServiceEndpointPolicies"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Service Endpoint Policies"),
							Value:          to.Ptr("ServiceEndpointPolicies"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("NetworkIntentPolicies"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Network Intent Policies"),
							Value:          to.Ptr("NetworkIntentPolicies"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("StandardSkuLoadBalancers"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard Sku Load Balancers"),
							Value:          to.Ptr("StandardSkuLoadBalancers"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("StandardSkuPublicIpAddresses"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Public IP Addresses - Standard"),
							Value:          to.Ptr("StandardSkuPublicIpAddresses"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("DnsServersPerVirtualNetwork"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("DNS servers per Virtual Network"),
							Value:          to.Ptr("DnsServersPerVirtualNetwork"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("CustomDnsServersPerP2SVpnGateway"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Custom DNS servers per P2SVpnGateway"),
							Value:          to.Ptr("CustomDnsServersPerP2SVpnGateway"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("SubnetsPerVirtualNetwork"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Subnets per Virtual Network"),
							Value:          to.Ptr("SubnetsPerVirtualNetwork"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("IPConfigurationsPerVirtualNetwork"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("IP Configurations per Virtual Network"),
							Value:          to.Ptr("IPConfigurationsPerVirtualNetwork"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("PeeringsPerVirtualNetwork"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Peerings per Virtual Network"),
							Value:          to.Ptr("PeeringsPerVirtualNetwork"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("SecurityRulesPerNetworkSecurityGroup"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Security rules per Network Security Group"),
							Value:          to.Ptr("SecurityRulesPerNetworkSecurityGroup"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("SecurityRulesPerNetworkIntentPolicy"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Security rules per Network Intent Policy"),
							Value:          to.Ptr("SecurityRulesPerNetworkIntentPolicy"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("RoutesPerNetworkIntentPolicy"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Routes per Network Intent Policy"),
							Value:          to.Ptr("RoutesPerNetworkIntentPolicy"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("SecurityRuleAddressesOrPortsPerNetworkSecurityGroup"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Security rules addresses or ports per Network Security Group"),
							Value:          to.Ptr("SecurityRuleAddressesOrPortsPerNetworkSecurityGroup"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("InboundRulesPerLoadBalancer"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Inbound Rules per Load Balancer"),
							Value:          to.Ptr("InboundRulesPerLoadBalancer"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("FrontendIPConfigurationPerLoadBalancer"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Frontend IP Configurations per Load Balancer"),
							Value:          to.Ptr("FrontendIPConfigurationPerLoadBalancer"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("OutboundRulesPerLoadBalancer"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Outbound Rules per Load Balancer"),
							Value:          to.Ptr("OutboundRulesPerLoadBalancer"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("RoutesPerRouteTable"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Routes per Route Table"),
							Value:          to.Ptr("RoutesPerRouteTable"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("RoutesWithServiceTagPerRouteTable"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Routes with service tag per Route Table"),
							Value:          to.Ptr("RoutesWithServiceTagPerRouteTable"),
						},
						IsQuotaApplicable: to.Ptr(false),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties: map[string]interface{}{},
						Unit:       to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("MinPublicIpInterNetworkPrefixLength"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/Quotas/"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Min Public Ip InterNetwork Prefix Length"),
							Value:          to.Ptr("MinPublicIpInterNetworkPrefixLength"),
						},
						IsQuotaApplicable: to.Ptr(true),
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						Properties:   map[string]interface{}{},
						ResourceType: to.Ptr("MinPublicIpInterNetworkPrefixLength"),
						Unit:         to.Ptr("Count"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Limits) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Limits)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getNetworkQuotaLimits.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getMachineLearningServicesQuotaLimits.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_listQuotaLimitsMachineLearningServices"},
	})
	client = armquota.NewClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.MachineLearningServices/locations/eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getMachineLearningServicesQuotaLimits.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armquota.Limits{
			Value: []*armquota.CurrentQuotaLimitBase{
				{
					Name: to.Ptr("standardDv2Family"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.MachineLearningServices/locations/eastus/providers/Microsoft.Quota/Quotas/standardDv2Family"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard Dv2 Family vCPUs"),
							Value:          to.Ptr("standardDv2Family"),
						},
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						ResourceType: to.Ptr("dedicated"),
						Unit:         to.Ptr("Count"),
					},
				},
				{
					Name: to.Ptr("totalLowPriorityCores"),
					Type: to.Ptr("Microsoft.Quota/Quotas"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.MachineLearningServices/locations/eastus/providers/Microsoft.Quota/Quotas/totalLowPriorityCores"),
					Properties: &armquota.Properties{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Total Regional Low-priority vCPUs"),
							Value:          to.Ptr("totalLowPriorityCores"),
						},
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](10),
						},
						ResourceType: to.Ptr("lowPriority"),
						Unit:         to.Ptr("Count"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Limits) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Limits)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getMachineLearningServicesQuotaLimits.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuotaRequestStatus_Get(t *testing.T) {
	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getQuotaRequestStatusFailed.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuotaRequestFailed"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquota.NewRequestStatusClient(cred, &options)
	res, err := client.Get(ctx,
		"2B5C8515-37D8-4B6A-879B-CD641A2CF605",
		"subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getQuotaRequestStatusFailed.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquota.RequestDetails{
			Name: to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Type: to.Ptr("Microsoft.Quota/quotaRequests"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/quotaRequests/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Properties: &armquota.RequestProperties{
				Error: &armquota.ServiceErrorDetail{
					Code:    to.Ptr("ContactSupport"),
					Message: to.Ptr("Request failed, please contact support."),
				},
				Message:           to.Ptr("Request failed, please contact support."),
				ProvisioningState: to.Ptr(armquota.QuotaRequestStateSucceeded),
				RequestSubmitTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-19T19:23:17.904Z"); return t }()),
				Value: []*armquota.SubRequest{
					{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard NC Promo Family vCPUs"),
							Value:          to.Ptr("standardNCPromoFamily"),
						},
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](50),
						},
						Message:           to.Ptr("Request failed, please contact support."),
						ProvisioningState: to.Ptr(armquota.QuotaRequestStateSucceeded),
						SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RequestDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RequestDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getQuotaRequestStatusFailed.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getQuotaRequestStatusInProgress.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuotaRequestInProgress"},
	})
	client = armquota.NewRequestStatusClient(cred, &options)
	res, err = client.Get(ctx,
		"2B5C8515-37D8-4B6A-879B-CD641A2CF605",
		"subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getQuotaRequestStatusInProgress.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquota.RequestDetails{
			Name: to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Type: to.Ptr("Microsoft.Quota/quotaRequests"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus/providers/Microsoft.Quota/quotaRequests/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Properties: &armquota.RequestProperties{
				Message:           to.Ptr("Request processing"),
				ProvisioningState: to.Ptr(armquota.QuotaRequestStateSucceeded),
				RequestSubmitTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-19T19:23:17.904Z"); return t }()),
				Value: []*armquota.SubRequest{
					{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard HCS Family vCPUs"),
							Value:          to.Ptr("standardHCSFamily"),
						},
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](50),
						},
						Message:           to.Ptr("Request completed"),
						ProvisioningState: to.Ptr(armquota.QuotaRequestStateSucceeded),
						SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
					},
					{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard NC Promo Family vCPUs"),
							Value:          to.Ptr("standardNCPromoFamily"),
						},
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](50),
						},
						Message:           to.Ptr("Request processing"),
						ProvisioningState: to.Ptr(armquota.QuotaRequestStateSucceeded),
						SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RequestDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RequestDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getQuotaRequestStatusInProgress.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getQuotaRequestStatusById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuotaRequestStatus"},
	})
	client = armquota.NewRequestStatusClient(cred, &options)
	res, err = client.Get(ctx,
		"2B5C8515-37D8-4B6A-879B-CD641A2CF605",
		"subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Compute/locations/eastus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getQuotaRequestStatusById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquota.RequestDetails{
			Name: to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Type: to.Ptr("Microsoft.Quota/quotaRequests"),
			ID:   to.Ptr("/subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/quotaRequests/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Properties: &armquota.RequestProperties{
				Message:           to.Ptr("Request completed"),
				ProvisioningState: to.Ptr(armquota.QuotaRequestStateSucceeded),
				RequestSubmitTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-19T19:23:17.904Z"); return t }()),
				Value: []*armquota.SubRequest{
					{
						Name: &armquota.ResourceName{
							LocalizedValue: to.Ptr("Standard NC Promo Family vCPUs"),
							Value:          to.Ptr("standardNCPromoFamily"),
						},
						Limit: &armquota.LimitObject{
							LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
							Value:           to.Ptr[int32](50),
						},
						Message:           to.Ptr("Request completed"),
						ProvisioningState: to.Ptr(armquota.QuotaRequestStateSucceeded),
						Unit:              to.Ptr("Count"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RequestDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RequestDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getQuotaRequestStatusById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuotaRequestStatus_List(t *testing.T) {
	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getQuotaRequestsHistory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuotaRequestHistory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquota.NewRequestStatusClient(cred, &options)
	pager := client.List("subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Compute/locations/eastus",
		&armquota.RequestStatusClientListOptions{Filter: nil,
			Top:       nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getQuotaRequestsHistory.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armquota.RequestDetailsList{
			Value: []*armquota.RequestDetails{
				{
					Name: to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
					Type: to.Ptr("Microsoft.Quota/quotaRequests"),
					ID:   to.Ptr("/subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/quotaRequests/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
					Properties: &armquota.RequestProperties{
						Message:           to.Ptr("Request completed"),
						ProvisioningState: to.Ptr(armquota.QuotaRequestStateSucceeded),
						RequestSubmitTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-19T19:23:17.904Z"); return t }()),
						Value: []*armquota.SubRequest{
							{
								Name: &armquota.ResourceName{
									LocalizedValue: to.Ptr("Standard NC Promo Family vCPUs"),
									Value:          to.Ptr("standardNCPromoFamily"),
								},
								Limit: &armquota.LimitObject{
									LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
									Value:           to.Ptr[int32](50),
								},
								Message:           to.Ptr("Request completed"),
								ProvisioningState: to.Ptr(armquota.QuotaRequestStateSucceeded),
								SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
							}},
					},
				},
				{
					Name: to.Ptr("7E73A85C-83BB-4DE4-903F-076F1A2B91D6"),
					Type: to.Ptr("Microsoft.Quota/quotaRequests"),
					ID:   to.Ptr("/subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/quotaRequests/7E73A85C-83BB-4DE4-903F-076F1A2B91D6"),
					Properties: &armquota.RequestProperties{
						Message:           to.Ptr("Request completed"),
						ProvisioningState: to.Ptr(armquota.QuotaRequestStateSucceeded),
						RequestSubmitTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-18T19:23:17.904Z"); return t }()),
						Value: []*armquota.SubRequest{
							{
								Name: &armquota.ResourceName{
									LocalizedValue: to.Ptr("Standard NV Promo Family vCPUs"),
									Value:          to.Ptr("standardNVPromoFamily"),
								},
								Limit: &armquota.LimitObject{
									LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
									Value:           to.Ptr[int32](150),
								},
								Message:           to.Ptr("Request completed"),
								ProvisioningState: to.Ptr(armquota.QuotaRequestStateSucceeded),
								SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
							}},
					},
				},
				{
					Name: to.Ptr("5E460077-AB53-4802-8997-A6940E0B7649"),
					Type: to.Ptr("Microsoft.Quota/quotaRequests"),
					ID:   to.Ptr("/subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Compute/locations/eastus/providers/Microsoft.Quota/quotaRequests/5E460077-AB53-4802-8997-A6940E0B7649"),
					Properties: &armquota.RequestProperties{
						Error: &armquota.ServiceErrorDetail{
							Code:    to.Ptr("ResourceNotAvailableForOffer"),
							Message: to.Ptr("The resource is currently unavailable in the location for the offer type."),
						},
						Message:           to.Ptr("The resource is currently unavailable in the location for the offer type."),
						ProvisioningState: to.Ptr(armquota.QuotaRequestStateSucceeded),
						RequestSubmitTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-17T19:23:17.904Z"); return t }()),
						Value: []*armquota.SubRequest{
							{
								Name: &armquota.ResourceName{
									LocalizedValue: to.Ptr("Standard HBS Family vCPUs"),
									Value:          to.Ptr("standardHBSFamily"),
								},
								Limit: &armquota.LimitObject{
									LimitObjectType: to.Ptr(armquota.LimitTypeLimitValue),
									Value:           to.Ptr[int32](52),
								},
								Message:           to.Ptr("Request failed, please contact support."),
								ProvisioningState: to.Ptr(armquota.QuotaRequestStateSucceeded),
								SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RequestDetailsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RequestDetailsList)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/getQuotaRequestsHistory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuotaOperation_List(t *testing.T) {
	// From example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/GetOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetOperations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquota.NewOperationClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/GetOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armquota.OperationList{
			Value: []*armquota.OperationResponse{
				{
					Name: to.Ptr("Microsoft.Quota/usages/read"),
					Display: &armquota.OperationDisplay{
						Description: to.Ptr("Get the current usages of the specified resource and location"),
						Operation:   to.Ptr("Get resource usages"),
						Provider:    to.Ptr("Microsoft Quota"),
						Resource:    to.Ptr("Resource current usages"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Quota/quotas/read"),
					Display: &armquota.OperationDisplay{
						Description: to.Ptr("Get the current service limit or quota of the specified resource and location"),
						Operation:   to.Ptr("Get resource quota limit"),
						Provider:    to.Ptr("Microsoft Quota"),
						Resource:    to.Ptr("Resource quota limit"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Quota/quotas/write"),
					Display: &armquota.OperationDisplay{
						Description: to.Ptr("Create service limit or quota for the specified resource and location"),
						Operation:   to.Ptr("Create resource quota limit"),
						Provider:    to.Ptr("Microsoft Quota"),
						Resource:    to.Ptr("Resource quota limit"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Quota/quotaRequests/read"),
					Display: &armquota.OperationDisplay{
						Description: to.Ptr("Get any quota request for the specified resource and location"),
						Operation:   to.Ptr("Get quota request"),
						Provider:    to.Ptr("Microsoft Quota"),
						Resource:    to.Ptr("Resource quota request"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/quota/resource-manager/Microsoft.Quota/preview/2021-03-15-preview/examples/GetOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
