//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlogic_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/logic/armlogic"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestWorkflows_ListBySubscription(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all workflows in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListBySubscription(&armlogic.WorkflowsClientListBySubscriptionOptions{Top: nil,
		Filter: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.WorkflowListResult{
			Value: []*armlogic.Workflow{
				{
					Name:     to.Ptr("test-workflow"),
					Type:     to.Ptr("Microsoft.Logic/workflows"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow"),
					Location: to.Ptr("brazilsouth"),
					Tags:     map[string]*string{},
					Properties: &armlogic.WorkflowProperties{
						AccessControl:  &armlogic.FlowAccessControlConfiguration{},
						AccessEndpoint: to.Ptr("http://tempuri.org"),
						ChangedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-09T22:54:54.3533634Z"); return t }()),
						CreatedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-25T01:39:21.4365247Z"); return t }()),
						Definition: map[string]interface{}{
							"$schema":        "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
							"actions":        map[string]interface{}{},
							"contentVersion": "1.0.0.0",
							"outputs":        map[string]interface{}{},
							"parameters":     map[string]interface{}{},
							"triggers":       map[string]interface{}{},
						},
						EndpointsConfiguration: &armlogic.FlowEndpointsConfiguration{
							Connector: &armlogic.FlowEndpoints{
								OutgoingIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("40.84.145.61"),
									}},
							},
							Workflow: &armlogic.FlowEndpoints{
								AccessEndpointIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("104.210.153.89"),
									},
									{
										Address: to.Ptr("13.85.79.155"),
									},
									{
										Address: to.Ptr("13.65.39.247"),
									}},
								OutgoingIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("13.84.159.168"),
									},
									{
										Address: to.Ptr("13.65.86.56"),
									},
									{
										Address: to.Ptr("13.65.82.190"),
									}},
							},
						},
						IntegrationAccount: &armlogic.ResourceReference{
							Name: to.Ptr("test-integration-account"),
							Type: to.Ptr("Microsoft.Logic/integrationAccounts"),
							ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationAccounts/test-integration-account"),
						},
						Parameters:        map[string]*armlogic.WorkflowParameter{},
						ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
						State:             to.Ptr(armlogic.WorkflowStateEnabled),
						Version:           to.Ptr("08586677515911718341"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkflowListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkflowListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflows_ListByResourceGroup(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all workflows in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByResourceGroup("test-resource-group",
		&armlogic.WorkflowsClientListByResourceGroupOptions{Top: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.WorkflowListResult{
			Value: []*armlogic.Workflow{
				{
					Name:     to.Ptr("test-workflow"),
					Type:     to.Ptr("Microsoft.Logic/workflows"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow"),
					Location: to.Ptr("brazilsouth"),
					Tags:     map[string]*string{},
					Properties: &armlogic.WorkflowProperties{
						AccessControl:  &armlogic.FlowAccessControlConfiguration{},
						AccessEndpoint: to.Ptr("http://tempuri.org"),
						ChangedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-09T22:54:54.3533634Z"); return t }()),
						CreatedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-25T01:39:21.4365247Z"); return t }()),
						Definition: map[string]interface{}{
							"$schema":        "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
							"actions":        map[string]interface{}{},
							"contentVersion": "1.0.0.0",
							"outputs":        map[string]interface{}{},
							"parameters":     map[string]interface{}{},
							"triggers":       map[string]interface{}{},
						},
						EndpointsConfiguration: &armlogic.FlowEndpointsConfiguration{
							Connector: &armlogic.FlowEndpoints{
								OutgoingIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("40.84.145.61"),
									}},
							},
							Workflow: &armlogic.FlowEndpoints{
								AccessEndpointIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("104.210.153.89"),
									},
									{
										Address: to.Ptr("13.85.79.155"),
									},
									{
										Address: to.Ptr("13.65.39.247"),
									}},
								OutgoingIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("13.84.159.168"),
									},
									{
										Address: to.Ptr("13.65.86.56"),
									},
									{
										Address: to.Ptr("13.65.82.190"),
									}},
							},
						},
						IntegrationAccount: &armlogic.ResourceReference{
							Name: to.Ptr("test-integration-account"),
							Type: to.Ptr("Microsoft.Logic/integrationAccounts"),
							ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationAccounts/test-integration-account"),
						},
						Parameters:        map[string]*armlogic.WorkflowParameter{},
						ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
						State:             to.Ptr(armlogic.WorkflowStateEnabled),
						Version:           to.Ptr("08586677515911718341"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkflowListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkflowListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflows_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a workflow"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"test-resource-group",
		"test-workflow",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.Workflow{
			Name:     to.Ptr("test-workflow"),
			Type:     to.Ptr("Microsoft.Logic/workflows"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow"),
			Location: to.Ptr("brazilsouth"),
			Tags:     map[string]*string{},
			Properties: &armlogic.WorkflowProperties{
				AccessEndpoint: to.Ptr("http://tempuri.org"),
				ChangedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-09T22:54:54.3533634Z"); return t }()),
				CreatedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-25T01:39:21.4365247Z"); return t }()),
				Definition: map[string]interface{}{
					"$schema":        "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2018-07-01-preview/workflowdefinition.json#",
					"actions":        map[string]interface{}{},
					"contentVersion": "1.0.0.0",
					"outputs":        map[string]interface{}{},
					"parameters":     map[string]interface{}{},
					"triggers":       map[string]interface{}{},
				},
				EndpointsConfiguration: &armlogic.FlowEndpointsConfiguration{
					Connector: &armlogic.FlowEndpoints{
						OutgoingIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("40.84.145.61"),
							}},
					},
					Workflow: &armlogic.FlowEndpoints{
						AccessEndpointIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("104.210.153.89"),
							},
							{
								Address: to.Ptr("13.85.79.155"),
							},
							{
								Address: to.Ptr("13.65.39.247"),
							}},
						OutgoingIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("13.84.159.168"),
							},
							{
								Address: to.Ptr("13.65.86.56"),
							},
							{
								Address: to.Ptr("13.65.82.190"),
							}},
					},
				},
				IntegrationAccount: &armlogic.ResourceReference{
					Name: to.Ptr("test-integration-account"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationAccounts/test-integration-account"),
				},
				IntegrationServiceEnvironment: &armlogic.ResourceReference{
					Name: to.Ptr("test-integration-service-environment"),
					Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationServiceEnvironments/test-integration-service-environment"),
				},
				Parameters:        map[string]*armlogic.WorkflowParameter{},
				ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
				State:             to.Ptr(armlogic.WorkflowStateEnabled),
				Version:           to.Ptr("08586677515911718341"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workflow) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workflow)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflows_CreateOrUpdate(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a workflow"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"test-resource-group",
		"test-workflow",
		armlogic.Workflow{
			Location: to.Ptr("brazilsouth"),
			Tags:     map[string]*string{},
			Properties: &armlogic.WorkflowProperties{
				Definition: map[string]interface{}{
					"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"actions": map[string]interface{}{
						"Find_pet_by_ID": map[string]interface{}{
							"type": "ApiConnection",
							"inputs": map[string]interface{}{
								"path":   "/pet/@{encodeURIComponent('1')}",
								"method": "get",
								"host": map[string]interface{}{
									"connection": map[string]interface{}{
										"name": "@parameters('$connections')['test-custom-connector']['connectionId']",
									},
								},
							},
							"runAfter": map[string]interface{}{},
						},
					},
					"contentVersion": "1.0.0.0",
					"outputs":        map[string]interface{}{},
					"parameters": map[string]interface{}{
						"$connections": map[string]interface{}{
							"type":         "Object",
							"defaultValue": map[string]interface{}{},
						},
					},
					"triggers": map[string]interface{}{
						"manual": map[string]interface{}{
							"type": "Request",
							"inputs": map[string]interface{}{
								"schema": map[string]interface{}{},
							},
							"kind": "Http",
						},
					},
				},
				IntegrationAccount: &armlogic.ResourceReference{
					ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationAccounts/test-integration-account"),
				},
				Parameters: map[string]*armlogic.WorkflowParameter{
					"$connections": {
						Value: map[string]interface{}{
							"test-custom-connector": map[string]interface{}{
								"connectionId":   "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Web/connections/test-custom-connector",
								"connectionName": "test-custom-connector",
								"id":             "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.Web/locations/brazilsouth/managedApis/test-custom-connector",
							},
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.Workflow{
			Properties: &armlogic.WorkflowProperties{
				AccessEndpoint: to.Ptr("http://tempuri.org"),
				ChangedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-09T22:54:54.3533634Z"); return t }()),
				CreatedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-25T01:39:21.4365247Z"); return t }()),
				Definition: map[string]interface{}{
					"$schema":        "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"actions":        map[string]interface{}{},
					"contentVersion": "1.0.0.0",
					"outputs":        map[string]interface{}{},
					"parameters":     map[string]interface{}{},
					"triggers":       map[string]interface{}{},
				},
				EndpointsConfiguration: &armlogic.FlowEndpointsConfiguration{
					Connector: &armlogic.FlowEndpoints{
						OutgoingIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("40.84.145.61"),
							}},
					},
					Workflow: &armlogic.FlowEndpoints{
						AccessEndpointIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("104.210.153.89"),
							},
							{
								Address: to.Ptr("13.85.79.155"),
							},
							{
								Address: to.Ptr("13.65.39.247"),
							}},
						OutgoingIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("13.84.159.168"),
							},
							{
								Address: to.Ptr("13.65.86.56"),
							},
							{
								Address: to.Ptr("13.65.82.190"),
							}},
					},
				},
				IntegrationAccount: &armlogic.ResourceReference{
					Name: to.Ptr("test-integration-account"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationAccounts/test-integration-account"),
				},
				IntegrationServiceEnvironment: &armlogic.ResourceReference{
					Name: to.Ptr("test-integration-service-environment"),
					Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationServiceEnvironments/test-integration-service-environment"),
				},
				Parameters:        map[string]*armlogic.WorkflowParameter{},
				ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
				State:             to.Ptr(armlogic.WorkflowStateEnabled),
				Version:           to.Ptr("08586677515911718341"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workflow) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workflow)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflows_Update(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch a workflow"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Update(ctx,
		"test-resource-group",
		"test-workflow",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.Workflow{
			Properties: &armlogic.WorkflowProperties{
				AccessEndpoint: to.Ptr("http://tempuri.org"),
				ChangedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-09T22:54:54.3533634Z"); return t }()),
				CreatedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-25T01:39:21.4365247Z"); return t }()),
				Definition: map[string]interface{}{
					"$schema":        "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"actions":        map[string]interface{}{},
					"contentVersion": "1.0.0.0",
					"outputs":        map[string]interface{}{},
					"parameters":     map[string]interface{}{},
					"triggers":       map[string]interface{}{},
				},
				EndpointsConfiguration: &armlogic.FlowEndpointsConfiguration{
					Connector: &armlogic.FlowEndpoints{
						OutgoingIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("40.84.145.61"),
							}},
					},
					Workflow: &armlogic.FlowEndpoints{
						AccessEndpointIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("104.210.153.89"),
							},
							{
								Address: to.Ptr("13.85.79.155"),
							},
							{
								Address: to.Ptr("13.65.39.247"),
							}},
						OutgoingIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("13.84.159.168"),
							},
							{
								Address: to.Ptr("13.65.86.56"),
							},
							{
								Address: to.Ptr("13.65.82.190"),
							}},
					},
				},
				IntegrationAccount: &armlogic.ResourceReference{
					Name: to.Ptr("test-integration-account"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationAccounts/test-integration-account"),
				},
				Parameters:        map[string]*armlogic.WorkflowParameter{},
				ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
				State:             to.Ptr(armlogic.WorkflowStateEnabled),
				Version:           to.Ptr("08586677515911718341"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workflow) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workflow)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflows_Delete(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a workflow"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"test-resource-group",
		"test-workflow",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Delete.json: %v", err)
	}
}

func TestWorkflows_Disable(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Disable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disable a workflow"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Disable(ctx,
		"test-resource-group",
		"test-workflow",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Disable.json: %v", err)
	}
}

func TestWorkflows_Enable(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Enable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable a workflow"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Enable(ctx,
		"test-resource-group",
		"test-workflow",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Enable.json: %v", err)
	}
}

func TestWorkflows_GenerateUpgradedDefinition(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_GenerateUpgradedDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate an upgraded definition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GenerateUpgradedDefinition(ctx,
		"test-resource-group",
		"test-workflow",
		armlogic.GenerateUpgradedDefinitionParameters{
			TargetSchemaVersion: to.Ptr("2016-06-01"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_GenerateUpgradedDefinition.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{
			"$schema":        "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
			"actions":        map[string]interface{}{},
			"contentVersion": "1.0.0.0",
			"outputs":        map[string]interface{}{},
			"parameters": map[string]interface{}{
				"$connections": map[string]interface{}{
					"type":         "Object",
					"defaultValue": map[string]interface{}{},
				},
			},
			"triggers": map[string]interface{}{},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_GenerateUpgradedDefinition.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflows_ListSwagger(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_ListSwagger.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the swagger for a workflow"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.ListSwagger(ctx,
		"testResourceGroup",
		"testWorkflowName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_ListSwagger.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{
			"info": map[string]interface{}{
				"description": "Azure Logic App.",
				"title":       "flow",
			},
			"basePath": "/workflows/2e420261710e423490d5d502fe9c4abb/triggers",
			"consumes": []interface{}{
				"application/json",
			},
			"host": "test-host",
			"paths": map[string]interface{}{
				"/simpleManualTrigger/paths/invoke": map[string]interface{}{
					"post": map[string]interface{}{
						"operationId": "simpleManualTrigger-invoke",
						"description": "Trigger a run of the logic app.",
						"parameters": []interface{}{
							map[string]interface{}{
								"name":        "api-version",
								"type":        "string",
								"description": "The service API version.",
								"in":          "query",
								"required":    true,
							},
							map[string]interface{}{
								"name":        "sp",
								"type":        "string",
								"description": "The permissions; generally 'read' or 'write'.",
								"in":          "query",
								"required":    true,
							},
							map[string]interface{}{
								"name":        "sv",
								"type":        "string",
								"description": "The version number of the query parameters.",
								"in":          "query",
								"required":    true,
							},
							map[string]interface{}{
								"name":        "sig",
								"type":        "string",
								"description": "The SHA 256 hash of the entire request URI with an internal key.",
								"in":          "query",
								"required":    true,
							},
						},
						"responses": map[string]interface{}{
							"default": map[string]interface{}{
								"schema": map[string]interface{}{
									"type": "object",
								},
								"description": "The Logic App Response.",
							},
						},
					},
				},
			},
			"produces": []interface{}{
				"application/json",
			},
			"schemes": []interface{}{
				"http",
			},
			"swagger": "2.0",
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_ListSwagger.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflows_Move(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Move.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Move a workflow"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginMove(ctx,
		"testResourceGroup",
		"testWorkflow",
		armlogic.WorkflowReference{
			ID: to.Ptr("subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/newResourceGroup/providers/Microsoft.Logic/workflows/newWorkflowName"),
		},
		&armlogic.WorkflowsClientBeginMoveOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Move.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_Move.json: %v", err)
	}
}

func TestWorkflows_RegenerateAccessKey(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_RegenerateAccessKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Regenerate the callback URL access key for request triggers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.RegenerateAccessKey(ctx,
		"testResourceGroup",
		"testWorkflowName",
		armlogic.RegenerateActionParameter{
			KeyType: to.Ptr(armlogic.KeyTypePrimary),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_RegenerateAccessKey.json: %v", err)
	}
}

func TestWorkflows_ValidateByResourceGroup(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_ValidateByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Validate a workflow"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.ValidateByResourceGroup(ctx,
		"test-resource-group",
		"test-workflow",
		armlogic.Workflow{
			Location: to.Ptr("brazilsouth"),
			Tags:     map[string]*string{},
			Properties: &armlogic.WorkflowProperties{
				Definition: map[string]interface{}{
					"$schema":        "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"actions":        map[string]interface{}{},
					"contentVersion": "1.0.0.0",
					"outputs":        map[string]interface{}{},
					"parameters":     map[string]interface{}{},
					"triggers":       map[string]interface{}{},
				},
				IntegrationAccount: &armlogic.ResourceReference{
					ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationAccounts/test-integration-account"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_ValidateByResourceGroup.json: %v", err)
	}
}

func TestWorkflows_ValidateByLocation(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_ValidateByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Validate a workflow"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.ValidateByLocation(ctx,
		"test-resource-group",
		"brazilsouth",
		"test-workflow",
		armlogic.Workflow{
			Location: to.Ptr("brazilsouth"),
			Tags:     map[string]*string{},
			Properties: &armlogic.WorkflowProperties{
				Definition: map[string]interface{}{
					"$schema":        "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"actions":        map[string]interface{}{},
					"contentVersion": "1.0.0.0",
					"outputs":        map[string]interface{}{},
					"parameters":     map[string]interface{}{},
					"triggers":       map[string]interface{}{},
				},
				IntegrationAccount: &armlogic.ResourceReference{
					ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationAccounts/test-integration-account"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Workflows_ValidateByLocation.json: %v", err)
	}
}

func TestWorkflowVersions_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowVersions_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List a workflows versions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowVersionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("test-resource-group",
		"test-workflow",
		&armlogic.WorkflowVersionsClientListOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowVersions_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.WorkflowVersionListResult{
			Value: []*armlogic.WorkflowVersion{
				{
					Name:     to.Ptr("test-workflow"),
					Type:     to.Ptr("Microsoft.Logic/workflows"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow"),
					Location: to.Ptr("brazilsouth"),
					Tags:     map[string]*string{},
					Properties: &armlogic.WorkflowVersionProperties{
						AccessEndpoint: to.Ptr("http://tempuri.org"),
						ChangedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-09T22:54:54.3533634Z"); return t }()),
						CreatedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-25T01:39:21.4365247Z"); return t }()),
						Definition: map[string]interface{}{
							"$schema":        "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
							"actions":        map[string]interface{}{},
							"contentVersion": "1.0.0.0",
							"outputs":        map[string]interface{}{},
							"parameters":     map[string]interface{}{},
							"triggers":       map[string]interface{}{},
						},
						EndpointsConfiguration: &armlogic.FlowEndpointsConfiguration{
							Connector: &armlogic.FlowEndpoints{
								OutgoingIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("40.84.145.61"),
									}},
							},
							Workflow: &armlogic.FlowEndpoints{
								AccessEndpointIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("104.210.153.89"),
									},
									{
										Address: to.Ptr("13.85.79.155"),
									},
									{
										Address: to.Ptr("13.65.39.247"),
									}},
								OutgoingIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("13.84.159.168"),
									},
									{
										Address: to.Ptr("13.65.86.56"),
									},
									{
										Address: to.Ptr("13.65.82.190"),
									}},
							},
						},
						IntegrationAccount: &armlogic.ResourceReference{
							Name: to.Ptr("test-integration-account"),
							Type: to.Ptr("Microsoft.Logic/integrationAccounts"),
							ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationAccounts/test-integration-account"),
						},
						Parameters:        map[string]*armlogic.WorkflowParameter{},
						ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
						State:             to.Ptr(armlogic.WorkflowStateEnabled),
						Version:           to.Ptr("08586677515911718341"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkflowVersionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkflowVersionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowVersions_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowVersions_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowVersions_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a workflow version"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowVersionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"test-resource-group",
		"test-workflow",
		"08586676824806722526",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowVersions_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.WorkflowVersion{
			Name:     to.Ptr("test-workflow"),
			Type:     to.Ptr("Microsoft.Logic/workflows"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow"),
			Location: to.Ptr("brazilsouth"),
			Tags:     map[string]*string{},
			Properties: &armlogic.WorkflowVersionProperties{
				AccessEndpoint: to.Ptr("http://tempuri.org"),
				ChangedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-09T22:54:54.3533634Z"); return t }()),
				CreatedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-25T01:39:21.4365247Z"); return t }()),
				Definition: map[string]interface{}{
					"$schema":        "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"actions":        map[string]interface{}{},
					"contentVersion": "1.0.0.0",
					"outputs":        map[string]interface{}{},
					"parameters":     map[string]interface{}{},
					"triggers":       map[string]interface{}{},
				},
				EndpointsConfiguration: &armlogic.FlowEndpointsConfiguration{
					Connector: &armlogic.FlowEndpoints{
						OutgoingIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("40.84.145.61"),
							}},
					},
					Workflow: &armlogic.FlowEndpoints{
						AccessEndpointIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("104.210.153.89"),
							},
							{
								Address: to.Ptr("13.85.79.155"),
							},
							{
								Address: to.Ptr("13.65.39.247"),
							}},
						OutgoingIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("13.84.159.168"),
							},
							{
								Address: to.Ptr("13.65.86.56"),
							},
							{
								Address: to.Ptr("13.65.82.190"),
							}},
					},
				},
				IntegrationAccount: &armlogic.ResourceReference{
					Name: to.Ptr("test-integration-account"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationAccounts/test-integration-account"),
				},
				Parameters:        map[string]*armlogic.WorkflowParameter{},
				ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
				State:             to.Ptr(armlogic.WorkflowStateEnabled),
				Version:           to.Ptr("08586677515911718341"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkflowVersion) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkflowVersion)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowVersions_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowTriggers_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggers_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List workflow triggers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowTriggersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("test-resource-group",
		"test-workflow",
		&armlogic.WorkflowTriggersClientListOptions{Top: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggers_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.WorkflowTriggerListResult{
			Value: []*armlogic.WorkflowTrigger{
				{
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow/triggers/manual"),
					Name: to.Ptr("manual"),
					Type: to.Ptr("Microsoft.Logic/workflows/triggers"),
					Properties: &armlogic.WorkflowTriggerProperties{
						ChangedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T18:47:49.5288666Z"); return t }()),
						CreatedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T17:32:30.2496336Z"); return t }()),
						ProvisioningState: to.Ptr(armlogic.WorkflowTriggerProvisioningStateSucceeded),
						State:             to.Ptr(armlogic.WorkflowStateEnabled),
						Workflow: &armlogic.ResourceReference{
							Name: to.Ptr("08586676800160476478"),
							Type: to.Ptr("Microsoft.Logic/workflows/versions"),
							ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow/versions/08586676800160476478"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkflowTriggerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkflowTriggerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggers_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowTriggers_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggers_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a workflow trigger"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowTriggersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"test-resource-group",
		"test-workflow",
		"manual",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggers_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.WorkflowTrigger{
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow/triggers/manual"),
			Name: to.Ptr("manual"),
			Type: to.Ptr("Microsoft.Logic/workflows/triggers"),
			Properties: &armlogic.WorkflowTriggerProperties{
				ChangedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T18:47:49.5288666Z"); return t }()),
				CreatedTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T17:32:30.2496336Z"); return t }()),
				ProvisioningState: to.Ptr(armlogic.WorkflowTriggerProvisioningStateSucceeded),
				State:             to.Ptr(armlogic.WorkflowStateEnabled),
				Workflow: &armlogic.ResourceReference{
					Name: to.Ptr("08586676800160476478"),
					Type: to.Ptr("Microsoft.Logic/workflows/versions"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow/versions/08586676800160476478"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkflowTrigger) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkflowTrigger)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggers_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowTriggers_Reset(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggers_Reset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reset trigger"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowTriggersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Reset(ctx,
		"testResourceGroup",
		"testWorkflow",
		"testTrigger",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggers_Reset.json: %v", err)
	}
}

func TestWorkflowTriggers_Run(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggers_Run.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Run a workflow trigger"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowTriggersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Run(ctx,
		"test-resource-group",
		"test-workflow",
		"manual",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggers_Run.json: %v", err)
	}
}

func TestWorkflowTriggers_SetState(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggers_SetState.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Set trigger state"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowTriggersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.SetState(ctx,
		"testResourceGroup",
		"testWorkflow",
		"testTrigger",
		armlogic.SetTriggerStateActionDefinition{
			Source: &armlogic.WorkflowTriggerReference{
				ID: to.Ptr("subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sourceResGroup/providers/Microsoft.Logic/workflows/sourceWorkflow/triggers/sourceTrigger"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggers_SetState.json: %v", err)
	}
}

func TestWorkflowTriggerHistories_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggerHistories_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List a workflow trigger history"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowTriggerHistoriesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("testResourceGroup",
		"testWorkflowName",
		"testTriggerName",
		&armlogic.WorkflowTriggerHistoriesClientListOptions{Top: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggerHistories_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.WorkflowTriggerHistoryListResult{
			Value: []*armlogic.WorkflowTriggerHistory{
				{
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/workflows/testWorkflowName/triggers/testTriggerName/histories/08586676746934337772206998657CU22"),
					Name: to.Ptr("08586676746934337772206998657CU22"),
					Type: to.Ptr("Microsoft.Logic/workflows/triggers/histories"),
					Properties: &armlogic.WorkflowTriggerHistoryProperties{
						Code: to.Ptr("OK"),
						Correlation: &armlogic.Correlation{
							ClientTrackingID: to.Ptr("08586676746934337772206998657CU22"),
						},
						EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.2987996Z"); return t }()),
						Fired:   to.Ptr(true),
						Run: &armlogic.ResourceReference{
							Name: to.Ptr("08586676746934337772206998657CU22"),
							Type: to.Ptr("Microsoft.Logic/workflows/runs"),
							ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/workflows/testWorkflowName/runs/08586676746934337772206998657CU22"),
						},
						ScheduledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:31.6344174Z"); return t }()),
						StartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.0387927Z"); return t }()),
						Status:        to.Ptr(armlogic.WorkflowStatusSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkflowTriggerHistoryListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkflowTriggerHistoryListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggerHistories_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowTriggerHistories_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggerHistories_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a workflow trigger history"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowTriggerHistoriesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testWorkflowName",
		"testTriggerName",
		"08586676746934337772206998657CU22",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggerHistories_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.WorkflowTriggerHistory{
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/workflows/testWorkflowName/triggers/testTriggerName/histories/08586676746934337772206998657CU22"),
			Name: to.Ptr("08586676746934337772206998657CU22"),
			Type: to.Ptr("Microsoft.Logic/workflows/triggers/histories"),
			Properties: &armlogic.WorkflowTriggerHistoryProperties{
				Code: to.Ptr("OK"),
				Correlation: &armlogic.Correlation{
					ClientTrackingID: to.Ptr("08586676746934337772206998657CU22"),
				},
				EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.2987996Z"); return t }()),
				Fired:   to.Ptr(true),
				Run: &armlogic.ResourceReference{
					Name: to.Ptr("08586676746934337772206998657CU22"),
					Type: to.Ptr("Microsoft.Logic/workflows/runs"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/workflows/testWorkflowName/runs/08586676746934337772206998657CU22"),
				},
				ScheduledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:31.6344174Z"); return t }()),
				StartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.0387927Z"); return t }()),
				Status:        to.Ptr(armlogic.WorkflowStatusSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkflowTriggerHistory) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkflowTriggerHistory)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggerHistories_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowTriggerHistories_Resubmit(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggerHistories_Resubmit.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resubmit a workflow run based on the trigger history"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowTriggerHistoriesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Resubmit(ctx,
		"testResourceGroup",
		"testWorkflowName",
		"testTriggerName",
		"testHistoryName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowTriggerHistories_Resubmit.json: %v", err)
	}
}

func TestWorkflowRuns_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRuns_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List workflow runs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("test-resource-group",
		"test-workflow",
		&armlogic.WorkflowRunsClientListOptions{Top: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRuns_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.WorkflowRunListResult{
			Value: []*armlogic.WorkflowRun{
				{
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow/runs/08586676746934337772206998657CU22"),
					Name: to.Ptr("08586676746934337772206998657CU22"),
					Type: to.Ptr("Microsoft.Logic/workflows/runs"),
					Properties: &armlogic.WorkflowRunProperties{
						Correlation: &armlogic.Correlation{
							ClientTrackingID: to.Ptr("08586676746934337772206998657CU22"),
						},
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.5779999Z"); return t }()),
						Outputs:   map[string]*armlogic.WorkflowOutputParameter{},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.044238Z"); return t }()),
						Status:    to.Ptr(armlogic.WorkflowStatusSucceeded),
						Trigger: &armlogic.WorkflowRunTrigger{
							Name: to.Ptr("Recurrence"),
							Code: to.Ptr("OK"),
							Correlation: &armlogic.Correlation{
								ClientTrackingID: to.Ptr("08586676746934337772206998657CU22"),
							},
							EndTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.0387927Z"); return t }()),
							ScheduledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:31.6344174Z"); return t }()),
							StartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.0387927Z"); return t }()),
							Status:        to.Ptr(armlogic.WorkflowStatusSucceeded),
						},
						WaitEndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.044238Z"); return t }()),
						Workflow: &armlogic.ResourceReference{
							Name: to.Ptr("08586676754160363885"),
							Type: to.Ptr("Microsoft.Logic/workflows/versions"),
							ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow/versions/08586676754160363885"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkflowRunListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkflowRunListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRuns_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowRuns_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRuns_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a run for a workflow"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"test-resource-group",
		"test-workflow",
		"08586676746934337772206998657CU22",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRuns_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.WorkflowRun{
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow/runs/08586676746934337772206998657CU22"),
			Name: to.Ptr("08586676746934337772206998657CU22"),
			Type: to.Ptr("Microsoft.Logic/workflows/runs"),
			Properties: &armlogic.WorkflowRunProperties{
				Correlation: &armlogic.Correlation{
					ClientTrackingID: to.Ptr("08586676746934337772206998657CU22"),
				},
				EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.5779999Z"); return t }()),
				Outputs:   map[string]*armlogic.WorkflowOutputParameter{},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.044238Z"); return t }()),
				Status:    to.Ptr(armlogic.WorkflowStatusSucceeded),
				Trigger: &armlogic.WorkflowRunTrigger{
					Name: to.Ptr("Recurrence"),
					Code: to.Ptr("OK"),
					Correlation: &armlogic.Correlation{
						ClientTrackingID: to.Ptr("08586676746934337772206998657CU22"),
					},
					EndTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.0387927Z"); return t }()),
					ScheduledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:31.6344174Z"); return t }()),
					StartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.0387927Z"); return t }()),
					Status:        to.Ptr(armlogic.WorkflowStatusSucceeded),
				},
				WaitEndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.044238Z"); return t }()),
				Workflow: &armlogic.ResourceReference{
					Name: to.Ptr("08586676754160363885"),
					Type: to.Ptr("Microsoft.Logic/workflows/versions"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow/versions/08586676754160363885"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkflowRun) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkflowRun)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRuns_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowRuns_Cancel(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRuns_Cancel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cancel a workflow run"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Cancel(ctx,
		"test-resource-group",
		"test-workflow",
		"08586676746934337772206998657CU22",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRuns_Cancel.json: %v", err)
	}
}

func TestWorkflowRunActions_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActions_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List a workflow run actions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunActionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("test-resource-group",
		"test-workflow",
		"08586676746934337772206998657CU22",
		&armlogic.WorkflowRunActionsClientListOptions{Top: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActions_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.WorkflowRunActionListResult{
			Value: []*armlogic.WorkflowRunAction{
				{
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow/runs/08586676746934337772206998657CU22/actions/HTTP"),
					Name: to.Ptr("HTTP"),
					Type: to.Ptr("Microsoft.Logic/workflows/runs/actions"),
					Properties: &armlogic.WorkflowRunActionProperties{
						Code: to.Ptr("OK"),
						Correlation: &armlogic.RunActionCorrelation{
							ClientTrackingID: to.Ptr("08586676746934337772206998657CU22"),
							ActionTrackingID: to.Ptr("56063357-45dd-4278-9be5-8220ce0cc9ca"),
						},
						EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.5450625Z"); return t }()),
						InputsLink: &armlogic.ContentLink{
							ContentHash: &armlogic.ContentHash{
								Algorithm: to.Ptr("md5"),
								Value:     to.Ptr("XXUACojv0aBfuP56os3CWw=="),
							},
							ContentSize:    to.Ptr[int64](46),
							ContentVersion: to.Ptr("5XUACojv0aBfuP56os3CWw=="),
							URI:            to.Ptr("https://tempuri.org"),
						},
						OutputsLink: &armlogic.ContentLink{
							ContentHash: &armlogic.ContentHash{
								Algorithm: to.Ptr("md5"),
								Value:     to.Ptr("XX6KRrevI6AAxEvo9FeBYQ=="),
							},
							ContentSize:    to.Ptr[int64](11873),
							ContentVersion: to.Ptr("6X6KRrevI6AAxEvo9FeBYQ=="),
							URI:            to.Ptr("https://tempuri.org"),
						},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.305236Z"); return t }()),
						Status:    to.Ptr(armlogic.WorkflowStatusSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkflowRunActionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkflowRunActionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActions_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowRunActions_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActions_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a workflow run action"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunActionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"test-resource-group",
		"test-workflow",
		"08586676746934337772206998657CU22",
		"HTTP",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActions_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.WorkflowRunAction{
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow/runs/08586676746934337772206998657CU22/actions/HTTP"),
			Name: to.Ptr("HTTP"),
			Type: to.Ptr("Microsoft.Logic/workflows/runs/actions"),
			Properties: &armlogic.WorkflowRunActionProperties{
				Code: to.Ptr("OK"),
				Correlation: &armlogic.RunActionCorrelation{
					ClientTrackingID: to.Ptr("08586676746934337772206998657CU22"),
					ActionTrackingID: to.Ptr("56063357-45dd-4278-9be5-8220ce0cc9ca"),
				},
				EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.5450625Z"); return t }()),
				InputsLink: &armlogic.ContentLink{
					ContentHash: &armlogic.ContentHash{
						Algorithm: to.Ptr("md5"),
						Value:     to.Ptr("XXUACojv0aBfuP56os3CWw=="),
					},
					ContentSize:    to.Ptr[int64](46),
					ContentVersion: to.Ptr("5XUACojv0aBfuP56os3CWw=="),
					URI:            to.Ptr("https://tempuri.org"),
				},
				OutputsLink: &armlogic.ContentLink{
					ContentHash: &armlogic.ContentHash{
						Algorithm: to.Ptr("md5"),
						Value:     to.Ptr("XX6KRrevI6AAxEvo9FeBYQ=="),
					},
					ContentSize:    to.Ptr[int64](11873),
					ContentVersion: to.Ptr("6X6KRrevI6AAxEvo9FeBYQ=="),
					URI:            to.Ptr("https://tempuri.org"),
				},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-10T20:16:32.305236Z"); return t }()),
				Status:    to.Ptr(armlogic.WorkflowStatusSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkflowRunAction) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkflowRunAction)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActions_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowRunActions_ListExpressionTraces(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActions_ListExpressionTraces.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List expression traces"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunActionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListExpressionTraces("testResourceGroup",
		"testFlow",
		"08586776228332053161046300351",
		"testAction",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActions_ListExpressionTraces.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.ExpressionTraces{
			Inputs: []*armlogic.ExpressionRoot{
				{
					Text:  to.Ptr("add(4, 4)"),
					Value: float64(8),
					Path:  to.Ptr(""),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressionTraces) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressionTraces)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActions_ListExpressionTraces.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowRunActionRepetitions_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitions_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List repetitions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunActionRepetitionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("testResourceGroup",
		"testFlow",
		"08586776228332053161046300351",
		"testAction",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitions_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.WorkflowRunActionRepetitionDefinitionCollection{
			Value: []*armlogic.WorkflowRunActionRepetitionDefinition{
				{
					Name: to.Ptr("000000"),
					Type: to.Ptr("Microsoft.Logic/workflows/runs/actions/repetitions"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/workflows/testFlow/runs/08586776228332053161046300351/actions/testAction/repetitions/000000"),
					Properties: &armlogic.WorkflowRunActionRepetitionProperties{
						Code: to.Ptr("OK"),
						Correlation: &armlogic.RunActionCorrelation{
							ClientTrackingID: to.Ptr("08586775357427610445444523191"),
							ActionTrackingID: to.Ptr("0d8152bb-e198-44a9-bde8-5138eea16dd4"),
						},
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-18T17:05:57.2264835Z"); return t }()),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-18T17:05:57.217991Z"); return t }()),
						Status:    to.Ptr(armlogic.WorkflowStatusSucceeded),
						InputsLink: &armlogic.ContentLink{
							ContentHash: &armlogic.ContentHash{
								Algorithm: to.Ptr("md5"),
								Value:     to.Ptr("8q1zMKS5ZyHBrPF+qF1xXw=="),
							},
							ContentSize:    to.Ptr[int64](8),
							ContentVersion: to.Ptr("8q1zMKS5ZyHBrPF+qF1xXw=="),
							URI:            to.Ptr("https://prod-08.northcentralus.logic.azure.com:443/workflows/2dfde2fce2584c49bea17ef0b04c95f4/runs/08586776228332053161046300351/actions/testAction/repetitions/000000/contents/ActionInputs?api-version=2016-10-01&se=2018-04-18T21%3A00%3A00.0000000Z&sp=%2Fruns%2F08586776228332053161046300351%2Factions%2FtestAction%2Frepetitions%2F000000%2Fcontents%2FActionInputs%2Fread&sv=1.0&sig=vw4BDdYp4Ap5RXdM7tY_wl9C38DeAHfnixLBEOpideA"),
						},
						OutputsLink: &armlogic.ContentLink{
							ContentHash: &armlogic.ContentHash{
								Algorithm: to.Ptr("md5"),
								Value:     to.Ptr("8q1zMKS5ZyHBrPF+qF1xXw=="),
							},
							ContentSize:    to.Ptr[int64](8),
							ContentVersion: to.Ptr("8q1zMKS5ZyHBrPF+qF1xXw=="),
							URI:            to.Ptr("https://prod-08.northcentralus.logic.azure.com:443/workflows/2dfde2fce2584c49bea17ef0b04c95f4/runs/08586776228332053161046300351/actions/testAction/repetitions/000000/contents/ActionOutputs?api-version=2016-10-01&se=2018-04-18T21%3A00%3A00.0000000Z&sp=%2Fruns%2F08586776228332053161046300351%2Factions%2FtestAction%2Frepetitions%2F000000%2Fcontents%2FActionOutputs%2Fread&sv=1.0&sig=y8Wq7jbu85tmlMo_1zpRyqNJuoCaQCFQtZ3bgSovLY0"),
						},
						TrackingID: to.Ptr("0d8152bb-e198-44a9-bde8-5138eea16dd4"),
						RepetitionIndexes: []*armlogic.RepetitionIndex{
							{
								ItemIndex: to.Ptr[int32](0),
								ScopeName: to.Ptr("For_each"),
							}},
					},
				},
				{
					Name: to.Ptr("000001"),
					Type: to.Ptr("Microsoft.Logic/workflows/runs/actions/repetitions"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/workflows/testFlow/runs/08586776228332053161046300351/actions/testAction/repetitions/000001"),
					Properties: &armlogic.WorkflowRunActionRepetitionProperties{
						Code: to.Ptr("OK"),
						Correlation: &armlogic.RunActionCorrelation{
							ClientTrackingID: to.Ptr("08586775357427610445444523191"),
							ActionTrackingID: to.Ptr("f84f23eb-b331-4772-9f39-cc307fa83bc3"),
						},
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-18T17:05:57.1015421Z"); return t }()),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-18T17:05:57.0929911Z"); return t }()),
						Status:    to.Ptr(armlogic.WorkflowStatusSucceeded),
						InputsLink: &armlogic.ContentLink{
							ContentHash: &armlogic.ContentHash{
								Algorithm: to.Ptr("md5"),
								Value:     to.Ptr("OA3i83YHGYVch+N8BQJIRQ=="),
							},
							ContentSize:    to.Ptr[int64](6),
							ContentVersion: to.Ptr("OA3i83YHGYVch+N8BQJIRQ=="),
							URI:            to.Ptr("https://prod-08.northcentralus.logic.azure.com:443/workflows/2dfde2fce2584c49bea17ef0b04c95f4/runs/08586776228332053161046300351/actions/testAction/repetitions/000001/contents/ActionInputs?api-version=2016-10-01&se=2018-04-18T21%3A00%3A00.0000000Z&sp=%2Fruns%2F08586776228332053161046300351%2Factions%2FtestAction%2Frepetitions%2F000001%2Fcontents%2FActionInputs%2Fread&sv=1.0&sig=dLmnt50joimEMK4k9rR6njHQh94iSFJ9rrDxFbkEg5M"),
						},
						OutputsLink: &armlogic.ContentLink{
							ContentHash: &armlogic.ContentHash{
								Algorithm: to.Ptr("md5"),
								Value:     to.Ptr("OA3i83YHGYVch+N8BQJIRQ=="),
							},
							ContentSize:    to.Ptr[int64](6),
							ContentVersion: to.Ptr("OA3i83YHGYVch+N8BQJIRQ=="),
							URI:            to.Ptr("https://prod-08.northcentralus.logic.azure.com:443/workflows/2dfde2fce2584c49bea17ef0b04c95f4/runs/08586776228332053161046300351/actions/testAction/repetitions/000001/contents/ActionOutputs?api-version=2016-10-01&se=2018-04-18T21%3A00%3A00.0000000Z&sp=%2Fruns%2F08586776228332053161046300351%2Factions%2FtestAction%2Frepetitions%2F000001%2Fcontents%2FActionOutputs%2Fread&sv=1.0&sig=B3-X5sqIAv1Lb31GOD34ZgIRUXGuiM2QllWiNwXFYAw"),
						},
						TrackingID: to.Ptr("f84f23eb-b331-4772-9f39-cc307fa83bc3"),
						RepetitionIndexes: []*armlogic.RepetitionIndex{
							{
								ItemIndex: to.Ptr[int32](1),
								ScopeName: to.Ptr("For_each"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkflowRunActionRepetitionDefinitionCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkflowRunActionRepetitionDefinitionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitions_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowRunActionRepetitions_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitions_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a repetition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunActionRepetitionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testFlow",
		"08586776228332053161046300351",
		"testAction",
		"000001",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitions_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.WorkflowRunActionRepetitionDefinition{
			Name: to.Ptr("000001"),
			Type: to.Ptr("Microsoft.Logic/workflows/runs/actions/repetitions"),
			ID:   to.Ptr("api/management/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/workflows/testFlow/runs/08586776228332053161046300351/actions/testAction/repetitions/000001"),
			Properties: &armlogic.WorkflowRunActionRepetitionProperties{
				Code: to.Ptr("OK"),
				Correlation: &armlogic.RunActionCorrelation{
					ClientTrackingID: to.Ptr("08586775357427610445444523191"),
					ActionTrackingID: to.Ptr("f84f23eb-b331-4772-9f39-cc307fa83bc3"),
				},
				EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-18T17:05:57.1015421Z"); return t }()),
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-18T17:05:57.0929911Z"); return t }()),
				Status:    to.Ptr(armlogic.WorkflowStatusSucceeded),
				InputsLink: &armlogic.ContentLink{
					ContentHash: &armlogic.ContentHash{
						Algorithm: to.Ptr("md5"),
						Value:     to.Ptr("OA3i83YHGYVch+N8BQJIRQ=="),
					},
					ContentSize:    to.Ptr[int64](6),
					ContentVersion: to.Ptr("OA3i83YHGYVch+N8BQJIRQ=="),
					URI:            to.Ptr("https://prod-08.northcentralus.logic.azure.com:443/workflows/2dfde2fce2584c49bea17ef0b04c95f4/runs/08586776228332053161046300351/actions/testAction/repetitions/000001/contents/ActionInputs?api-version=2016-10-01&se=2018-04-18T21%3A00%3A00.0000000Z&sp=%2Fruns%2F08586776228332053161046300351%2Factions%2FtestAction%2Frepetitions%2F000001%2Fcontents%2FActionInputs%2Fread&sv=1.0&sig=dLmnt50joimEMK4k9rR6njHQh94iSFJ9rrDxFbkEg5M"),
				},
				OutputsLink: &armlogic.ContentLink{
					ContentHash: &armlogic.ContentHash{
						Algorithm: to.Ptr("md5"),
						Value:     to.Ptr("OA3i83YHGYVch+N8BQJIRQ=="),
					},
					ContentSize:    to.Ptr[int64](6),
					ContentVersion: to.Ptr("OA3i83YHGYVch+N8BQJIRQ=="),
					URI:            to.Ptr("https://prod-08.northcentralus.logic.azure.com:443/workflows/2dfde2fce2584c49bea17ef0b04c95f4/runs/08586776228332053161046300351/actions/testAction/repetitions/000001/contents/ActionOutputs?api-version=2016-10-01&se=2018-04-18T21%3A00%3A00.0000000Z&sp=%2Fruns%2F08586776228332053161046300351%2Factions%2FtestAction%2Frepetitions%2F000001%2Fcontents%2FActionOutputs%2Fread&sv=1.0&sig=B3-X5sqIAv1Lb31GOD34ZgIRUXGuiM2QllWiNwXFYAw"),
				},
				TrackingID: to.Ptr("f84f23eb-b331-4772-9f39-cc307fa83bc3"),
				RepetitionIndexes: []*armlogic.RepetitionIndex{
					{
						ItemIndex: to.Ptr[int32](1),
						ScopeName: to.Ptr("For_each"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkflowRunActionRepetitionDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkflowRunActionRepetitionDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitions_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowRunActionRepetitions_ListExpressionTraces(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitions_ListExpressionTraces.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List expression traces for a repetition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunActionRepetitionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListExpressionTraces("testResourceGroup",
		"testFlow",
		"08586776228332053161046300351",
		"testAction",
		"000001",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitions_ListExpressionTraces.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.ExpressionTraces{
			Inputs: []*armlogic.ExpressionRoot{
				{
					Text:  to.Ptr("items('For_each')?['OccuringLocation']?['Environment']"),
					Value: "PROD",
					Path:  to.Ptr(""),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExpressionTraces) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExpressionTraces)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitions_ListExpressionTraces.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowRunActionRepetitionsRequestHistories_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitionsRequestHistories_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List repetition request history"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunActionRepetitionsRequestHistoriesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("test-resource-group",
		"test-workflow",
		"08586776228332053161046300351",
		"HTTP_Webhook",
		"000001",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitionsRequestHistories_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.RequestHistoryListResult{
			Value: []*armlogic.RequestHistory{
				{
					Name: to.Ptr("08586611142732800686"),
					Type: to.Ptr("Microsoft.Logic/workflows/runs/actions/requestHistories"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow/runs/08586611142736787787412824395CU21/actions/HTTP_Webhook/requestHistories/08586611142732800686"),
					Properties: &armlogic.RequestHistoryProperties{
						EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-25T18:36:52.1863033Z"); return t }()),
						Response: &armlogic.Response{
							BodyLink: &armlogic.ContentLink{
								ContentHash: &armlogic.ContentHash{
									Algorithm: to.Ptr("md5"),
									Value:     to.Ptr("2LOOAR8Eh2pd7AvRHXUhRg=="),
								},
								ContentSize:    to.Ptr[int64](137),
								ContentVersion: to.Ptr("2LOOAR8Eh2pd7AvRHXUhRg=="),
								URI:            to.Ptr("https://tempuri.org"),
							},
							Headers: map[string]interface{}{
								"Cache-Control":    "private",
								"Date":             "Thu, 25 Oct 2018 18:36:51 GMT",
								"Location":         "http://www.bing.com/",
								"Server":           "Microsoft-IIS/10.0",
								"X-AspNet-Version": "4.0.30319",
								"X-Powered-By":     "ASP.NET",
							},
							StatusCode: to.Ptr[int32](302),
						},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-25T18:36:51.9206732Z"); return t }()),
						Request: &armlogic.Request{
							Method: to.Ptr("GET"),
							Headers: map[string]interface{}{
								"Accept-Language":                     "en-US",
								"User-Agent":                          "azure-logic-apps/1.0,(workflow 80244732be3648f59d2084fd979cdd56; version 08586611142904036539)",
								"x-ms-action-tracking-id":             "ad27f634-6523-492f-924e-9a75e28619c8",
								"x-ms-client-request-id":              "ad484925-4148-4dd0-9488-07aed418b256",
								"x-ms-client-tracking-id":             "08586611142736787787412824395CU21",
								"x-ms-correlation-id":                 "ad484925-4148-4dd0-9488-07aed418b256",
								"x-ms-execution-location":             "brazilsouth",
								"x-ms-tracking-id":                    "ad484925-4148-4dd0-9488-07aed418b256",
								"x-ms-workflow-id":                    "80244732be3648f59d2084fd979cdd56",
								"x-ms-workflow-name":                  "test-workflow",
								"x-ms-workflow-operation-name":        "HTTP_Webhook",
								"x-ms-workflow-resourcegroup-name":    "test-resource-group",
								"x-ms-workflow-run-id":                "08586611142736787787412824395CU21",
								"x-ms-workflow-run-tracking-id":       "b4cd2e77-f949-4d8c-8753-791407aebde8",
								"x-ms-workflow-subscription-capacity": "Large",
								"x-ms-workflow-subscription-id":       "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345",
								"x-ms-workflow-system-id":             "/locations/brazilsouth/scaleunits/prod-17/workflows/80244732be3648f59d2084fd979cdd56",
								"x-ms-workflow-version":               "08586611142904036539",
							},
							URI: to.Ptr("http://tempuri.org"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RequestHistoryListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RequestHistoryListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitionsRequestHistories_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowRunActionRepetitionsRequestHistories_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitionsRequestHistories_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a repetition request history"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunActionRepetitionsRequestHistoriesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"test-resource-group",
		"test-workflow",
		"08586776228332053161046300351",
		"HTTP_Webhook",
		"000001",
		"08586611142732800686",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitionsRequestHistories_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.RequestHistory{
			Name: to.Ptr("08586611142732800686"),
			Type: to.Ptr("Microsoft.Logic/workflows/runs/actions/requestHistories"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow/runs/08586611142736787787412824395CU21/actions/HTTP_Webhook/requestHistories/08586611142732800686"),
			Properties: &armlogic.RequestHistoryProperties{
				EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-25T18:36:52.1863033Z"); return t }()),
				Response: &armlogic.Response{
					BodyLink: &armlogic.ContentLink{
						ContentHash: &armlogic.ContentHash{
							Algorithm: to.Ptr("md5"),
							Value:     to.Ptr("2LOOAR8Eh2pd7AvRHXUhRg=="),
						},
						ContentSize:    to.Ptr[int64](137),
						ContentVersion: to.Ptr("2LOOAR8Eh2pd7AvRHXUhRg=="),
						URI:            to.Ptr("https://tempuri.org"),
					},
					Headers: map[string]interface{}{
						"Cache-Control":    "private",
						"Date":             "Thu, 25 Oct 2018 18:36:51 GMT",
						"Location":         "http://www.bing.com/",
						"Server":           "Microsoft-IIS/10.0",
						"X-AspNet-Version": "4.0.30319",
						"X-Powered-By":     "ASP.NET",
					},
					StatusCode: to.Ptr[int32](302),
				},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-25T18:36:51.9206732Z"); return t }()),
				Request: &armlogic.Request{
					Method: to.Ptr("GET"),
					Headers: map[string]interface{}{
						"Accept-Language":                     "en-US",
						"User-Agent":                          "azure-logic-apps/1.0,(workflow 80244732be3648f59d2084fd979cdd56; version 08586611142904036539)",
						"x-ms-action-tracking-id":             "ad27f634-6523-492f-924e-9a75e28619c8",
						"x-ms-client-request-id":              "ad484925-4148-4dd0-9488-07aed418b256",
						"x-ms-client-tracking-id":             "08586611142736787787412824395CU21",
						"x-ms-correlation-id":                 "ad484925-4148-4dd0-9488-07aed418b256",
						"x-ms-execution-location":             "brazilsouth",
						"x-ms-tracking-id":                    "ad484925-4148-4dd0-9488-07aed418b256",
						"x-ms-workflow-id":                    "80244732be3648f59d2084fd979cdd56",
						"x-ms-workflow-name":                  "test-workflow",
						"x-ms-workflow-operation-name":        "HTTP_Webhook",
						"x-ms-workflow-resourcegroup-name":    "test-resource-group",
						"x-ms-workflow-run-id":                "08586611142736787787412824395CU21",
						"x-ms-workflow-run-tracking-id":       "b4cd2e77-f949-4d8c-8753-791407aebde8",
						"x-ms-workflow-subscription-capacity": "Large",
						"x-ms-workflow-subscription-id":       "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345",
						"x-ms-workflow-system-id":             "/locations/brazilsouth/scaleunits/prod-17/workflows/80244732be3648f59d2084fd979cdd56",
						"x-ms-workflow-version":               "08586611142904036539",
					},
					URI: to.Ptr("http://tempuri.org"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RequestHistory) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RequestHistory)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRepetitionsRequestHistories_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowRunActionRequestHistories_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRequestHistories_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List a request history"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunActionRequestHistoriesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("test-resource-group",
		"test-workflow",
		"08586776228332053161046300351",
		"HTTP_Webhook",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRequestHistories_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.RequestHistoryListResult{
			Value: []*armlogic.RequestHistory{
				{
					Name: to.Ptr("08586611142732800686"),
					Type: to.Ptr("Microsoft.Logic/workflows/runs/actions/requestHistories"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow/runs/08586611142736787787412824395CU21/actions/HTTP_Webhook/requestHistories/08586611142732800686"),
					Properties: &armlogic.RequestHistoryProperties{
						EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-25T18:36:52.1863033Z"); return t }()),
						Response: &armlogic.Response{
							BodyLink: &armlogic.ContentLink{
								ContentHash: &armlogic.ContentHash{
									Algorithm: to.Ptr("md5"),
									Value:     to.Ptr("2LOOAR8Eh2pd7AvRHXUhRg=="),
								},
								ContentSize:    to.Ptr[int64](137),
								ContentVersion: to.Ptr("2LOOAR8Eh2pd7AvRHXUhRg=="),
								URI:            to.Ptr("https://tempuri.org"),
							},
							Headers: map[string]interface{}{
								"Cache-Control":    "private",
								"Date":             "Thu, 25 Oct 2018 18:36:51 GMT",
								"Location":         "http://www.bing.com/",
								"Server":           "Microsoft-IIS/10.0",
								"X-AspNet-Version": "4.0.30319",
								"X-Powered-By":     "ASP.NET",
							},
							StatusCode: to.Ptr[int32](302),
						},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-25T18:36:51.9206732Z"); return t }()),
						Request: &armlogic.Request{
							Method: to.Ptr("GET"),
							Headers: map[string]interface{}{
								"Accept-Language":                     "en-US",
								"User-Agent":                          "azure-logic-apps/1.0,(workflow 80244732be3648f59d2084fd979cdd56; version 08586611142904036539)",
								"x-ms-action-tracking-id":             "ad27f634-6523-492f-924e-9a75e28619c8",
								"x-ms-client-request-id":              "ad484925-4148-4dd0-9488-07aed418b256",
								"x-ms-client-tracking-id":             "08586611142736787787412824395CU21",
								"x-ms-correlation-id":                 "ad484925-4148-4dd0-9488-07aed418b256",
								"x-ms-execution-location":             "brazilsouth",
								"x-ms-tracking-id":                    "ad484925-4148-4dd0-9488-07aed418b256",
								"x-ms-workflow-id":                    "80244732be3648f59d2084fd979cdd56",
								"x-ms-workflow-name":                  "test-workflow",
								"x-ms-workflow-operation-name":        "HTTP_Webhook",
								"x-ms-workflow-resourcegroup-name":    "test-resource-group",
								"x-ms-workflow-run-id":                "08586611142736787787412824395CU21",
								"x-ms-workflow-run-tracking-id":       "b4cd2e77-f949-4d8c-8753-791407aebde8",
								"x-ms-workflow-subscription-capacity": "Large",
								"x-ms-workflow-subscription-id":       "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345",
								"x-ms-workflow-system-id":             "/locations/brazilsouth/scaleunits/prod-17/workflows/80244732be3648f59d2084fd979cdd56",
								"x-ms-workflow-version":               "08586611142904036539",
							},
							URI: to.Ptr("http://tempuri.org"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RequestHistoryListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RequestHistoryListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRequestHistories_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowRunActionRequestHistories_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRequestHistories_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a request history"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunActionRequestHistoriesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"test-resource-group",
		"test-workflow",
		"08586776228332053161046300351",
		"HTTP_Webhook",
		"08586611142732800686",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRequestHistories_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.RequestHistory{
			Name: to.Ptr("08586611142732800686"),
			Type: to.Ptr("Microsoft.Logic/workflows/runs/actions/requestHistories"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/workflows/test-workflow/runs/08586611142736787787412824395CU21/actions/HTTP_Webhook/requestHistories/08586611142732800686"),
			Properties: &armlogic.RequestHistoryProperties{
				EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-25T18:36:52.1863033Z"); return t }()),
				Response: &armlogic.Response{
					BodyLink: &armlogic.ContentLink{
						ContentHash: &armlogic.ContentHash{
							Algorithm: to.Ptr("md5"),
							Value:     to.Ptr("2LOOAR8Eh2pd7AvRHXUhRg=="),
						},
						ContentSize:    to.Ptr[int64](137),
						ContentVersion: to.Ptr("2LOOAR8Eh2pd7AvRHXUhRg=="),
						URI:            to.Ptr("https://tempuri.org"),
					},
					Headers: map[string]interface{}{
						"Cache-Control":    "private",
						"Date":             "Thu, 25 Oct 2018 18:36:51 GMT",
						"Location":         "http://www.bing.com/",
						"Server":           "Microsoft-IIS/10.0",
						"X-AspNet-Version": "4.0.30319",
						"X-Powered-By":     "ASP.NET",
					},
					StatusCode: to.Ptr[int32](302),
				},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-25T18:36:51.9206732Z"); return t }()),
				Request: &armlogic.Request{
					Method: to.Ptr("GET"),
					Headers: map[string]interface{}{
						"Accept-Language":                     "en-US",
						"User-Agent":                          "azure-logic-apps/1.0,(workflow 80244732be3648f59d2084fd979cdd56; version 08586611142904036539)",
						"x-ms-action-tracking-id":             "ad27f634-6523-492f-924e-9a75e28619c8",
						"x-ms-client-request-id":              "ad484925-4148-4dd0-9488-07aed418b256",
						"x-ms-client-tracking-id":             "08586611142736787787412824395CU21",
						"x-ms-correlation-id":                 "ad484925-4148-4dd0-9488-07aed418b256",
						"x-ms-execution-location":             "brazilsouth",
						"x-ms-tracking-id":                    "ad484925-4148-4dd0-9488-07aed418b256",
						"x-ms-workflow-id":                    "80244732be3648f59d2084fd979cdd56",
						"x-ms-workflow-name":                  "test-workflow",
						"x-ms-workflow-operation-name":        "HTTP_Webhook",
						"x-ms-workflow-resourcegroup-name":    "test-resource-group",
						"x-ms-workflow-run-id":                "08586611142736787787412824395CU21",
						"x-ms-workflow-run-tracking-id":       "b4cd2e77-f949-4d8c-8753-791407aebde8",
						"x-ms-workflow-subscription-capacity": "Large",
						"x-ms-workflow-subscription-id":       "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345",
						"x-ms-workflow-system-id":             "/locations/brazilsouth/scaleunits/prod-17/workflows/80244732be3648f59d2084fd979cdd56",
						"x-ms-workflow-version":               "08586611142904036539",
					},
					URI: to.Ptr("http://tempuri.org"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RequestHistory) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RequestHistory)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionRequestHistories_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowRunActionScopeRepetitions_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionScopeRepetitions_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the scoped repetitions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunActionScopeRepetitionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("testResourceGroup",
		"testFlow",
		"08586776228332053161046300351",
		"for_each",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionScopeRepetitions_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.WorkflowRunActionRepetitionDefinitionCollection{
			Value: []*armlogic.WorkflowRunActionRepetitionDefinition{
				{
					Name: to.Ptr("000000"),
					Type: to.Ptr("Microsoft.Logic/workflows/runs/actions/scopeRepetitions"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/workflows/testFlow/runs/08586776228332053161046300351/actions/for_each/scopeRepetitions/000000"),
					Properties: &armlogic.WorkflowRunActionRepetitionProperties{
						Code: to.Ptr("NotSpecified"),
						Correlation: &armlogic.RunActionCorrelation{
							ClientTrackingID: to.Ptr("08586775357427610445444523191"),
							ActionTrackingID: to.Ptr("5c0e7c24-4891-44e8-b631-8084c5531dd5"),
						},
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-18T17:05:57.6240967Z"); return t }()),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-18T17:05:57.209588Z"); return t }()),
						Status:    to.Ptr(armlogic.WorkflowStatusSucceeded),
						RepetitionIndexes: []*armlogic.RepetitionIndex{
							{
								ItemIndex: to.Ptr[int32](0),
								ScopeName: to.Ptr("For_each"),
							}},
					},
				},
				{
					Name: to.Ptr("000001"),
					Type: to.Ptr("Microsoft.Logic/workflows/runs/actions/scopeRepetitions"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/workflows/testFlow/runs/08586776228332053161046300351/actions/for_each/scopeRepetitions/000001"),
					Properties: &armlogic.WorkflowRunActionRepetitionProperties{
						Code: to.Ptr("NotSpecified"),
						Correlation: &armlogic.RunActionCorrelation{
							ClientTrackingID: to.Ptr("08586775357427610445444523191"),
							ActionTrackingID: to.Ptr("1682d0bd-7189-4478-b333-fe364a80bd69"),
						},
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-18T17:05:57.2272796Z"); return t }()),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-18T17:05:57.0686808Z"); return t }()),
						Status:    to.Ptr(armlogic.WorkflowStatusSucceeded),
						RepetitionIndexes: []*armlogic.RepetitionIndex{
							{
								ItemIndex: to.Ptr[int32](1),
								ScopeName: to.Ptr("For_each"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkflowRunActionRepetitionDefinitionCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkflowRunActionRepetitionDefinitionCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionScopeRepetitions_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowRunActionScopeRepetitions_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionScopeRepetitions_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a scoped repetition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunActionScopeRepetitionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testFlow",
		"08586776228332053161046300351",
		"for_each",
		"000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionScopeRepetitions_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.WorkflowRunActionRepetitionDefinition{
			Name: to.Ptr("000000"),
			Type: to.Ptr("Microsoft.Logic/workflows/runs/actions/scopeRepetitions"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/workflows/testFlow/runs/08586776228332053161046300351/actions/for_each/scopeRepetitions/000000"),
			Properties: &armlogic.WorkflowRunActionRepetitionProperties{
				Code: to.Ptr("NotSpecified"),
				Correlation: &armlogic.RunActionCorrelation{
					ClientTrackingID: to.Ptr("08586775357427610445444523191"),
					ActionTrackingID: to.Ptr("5c0e7c24-4891-44e8-b631-8084c5531dd5"),
				},
				EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-18T17:05:57.6240967Z"); return t }()),
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-18T17:05:57.209588Z"); return t }()),
				Status:    to.Ptr(armlogic.WorkflowStatusSucceeded),
				RepetitionIndexes: []*armlogic.RepetitionIndex{
					{
						ItemIndex: to.Ptr[int32](0),
						ScopeName: to.Ptr("For_each"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkflowRunActionRepetitionDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkflowRunActionRepetitionDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunActionScopeRepetitions_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflowRunOperations_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunOperations_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a run operation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewWorkflowRunOperationsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testFlow",
		"08586774142730039209110422528",
		"ebdcbbde-c4db-43ec-987c-fd0f7726f43b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunOperations_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.WorkflowRun{
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/workflows/testFlow/runs/08586774142730039209110422528"),
			Name: to.Ptr("08586774142730039209110422528"),
			Type: to.Ptr("Microsoft.Logic/workflows/runs"),
			Properties: &armlogic.WorkflowRunProperties{
				Correlation: &armlogic.Correlation{
					ClientTrackingID: to.Ptr("08586774142730039209110422528"),
				},
				EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-20T02:50:13.7177644Z"); return t }()),
				Outputs:   map[string]*armlogic.WorkflowOutputParameter{},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-20T02:50:12.4741081Z"); return t }()),
				Status:    to.Ptr(armlogic.WorkflowStatusSucceeded),
				Trigger: &armlogic.WorkflowRunTrigger{
					Name: to.Ptr("Recurrence"),
					Code: to.Ptr("OK"),
					Correlation: &armlogic.Correlation{
						ClientTrackingID: to.Ptr("08586774142730039209110422528"),
					},
					EndTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-20T02:50:12.460076Z"); return t }()),
					ScheduledTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-20T02:50:12.1412543Z"); return t }()),
					StartTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-20T02:50:12.460076Z"); return t }()),
					Status:        to.Ptr(armlogic.WorkflowStatusSucceeded),
				},
				WaitEndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-20T02:50:12.4741081Z"); return t }()),
				Workflow: &armlogic.ResourceReference{
					Name: to.Ptr("08586993867806980512"),
					Type: to.Ptr("Microsoft.Logic/workflows/versions"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/workflows/testFlow/versions/08586993867806980512"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkflowRun) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkflowRun)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/WorkflowRunOperations_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccounts_ListBySubscription(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List integration accounts by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListBySubscription(&armlogic.IntegrationAccountsClientListBySubscriptionOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.IntegrationAccountListResult{
			Value: []*armlogic.IntegrationAccount{
				{
					Name:       to.Ptr("daviburgIAFabrikam"),
					Type:       to.Ptr("Microsoft.Logic/integrationAccounts"),
					ID:         to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount"),
					Location:   to.Ptr("northcentralus"),
					Properties: &armlogic.IntegrationAccountProperties{},
					SKU: &armlogic.IntegrationAccountSKU{
						Name: to.Ptr(armlogic.IntegrationAccountSKUNameFree),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IntegrationAccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IntegrationAccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List integration accounts by resource group name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByResourceGroup("testResourceGroup",
		&armlogic.IntegrationAccountsClientListByResourceGroupOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.IntegrationAccountListResult{
			Value: []*armlogic.IntegrationAccount{
				{
					Name:       to.Ptr("IntegrationAccount9020"),
					Type:       to.Ptr("Microsoft.Logic/integrationAccounts"),
					ID:         to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/IntegrationAccount9020"),
					Location:   to.Ptr("westus"),
					Properties: &armlogic.IntegrationAccountProperties{},
					SKU: &armlogic.IntegrationAccountSKU{
						Name: to.Ptr(armlogic.IntegrationAccountSKUNameStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IntegrationAccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IntegrationAccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccounts_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get integration account by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccount{
			Name:     to.Ptr("IntegrationAccount5892"),
			Type:     to.Ptr("Microsoft.Logic/integrationAccounts"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount"),
			Location: to.Ptr("westus"),
			Properties: &armlogic.IntegrationAccountProperties{
				IntegrationServiceEnvironment: &armlogic.ResourceReference{
					Name: to.Ptr("test-integration-service-environment"),
					Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/test-integration-service-environment"),
				},
				State: to.Ptr(armlogic.WorkflowStateEnabled),
			},
			SKU: &armlogic.IntegrationAccountSKU{
				Name: to.Ptr(armlogic.IntegrationAccountSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccounts_CreateOrUpdate(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an integration account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		armlogic.IntegrationAccount{
			Location:   to.Ptr("westus"),
			Properties: &armlogic.IntegrationAccountProperties{},
			SKU: &armlogic.IntegrationAccountSKU{
				Name: to.Ptr(armlogic.IntegrationAccountSKUNameStandard),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccount{
			Name:       to.Ptr("testIntegrationAccount"),
			Type:       to.Ptr("Microsoft.Logic/integrationAccounts"),
			ID:         to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount"),
			Location:   to.Ptr("westus"),
			Properties: &armlogic.IntegrationAccountProperties{},
			SKU: &armlogic.IntegrationAccountSKU{
				Name: to.Ptr(armlogic.IntegrationAccountSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccounts_Update(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch an integration account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Update(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		armlogic.IntegrationAccount{
			Location:   to.Ptr("westus"),
			Properties: &armlogic.IntegrationAccountProperties{},
			SKU: &armlogic.IntegrationAccountSKU{
				Name: to.Ptr(armlogic.IntegrationAccountSKUNameStandard),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccount{
			Name:       to.Ptr("testIntegrationAccount"),
			Type:       to.Ptr("Microsoft.Logic/integrationAccounts"),
			ID:         to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount"),
			Location:   to.Ptr("westus"),
			Properties: &armlogic.IntegrationAccountProperties{},
			SKU: &armlogic.IntegrationAccountSKU{
				Name: to.Ptr(armlogic.IntegrationAccountSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccounts_Delete(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an integration account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_Delete.json: %v", err)
	}
}

func TestIntegrationAccounts_ListKeyVaultKeys(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_ListKeyVaultKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Integration Account callback URL"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListKeyVaultKeys("testResourceGroup",
		"testIntegrationAccount",
		armlogic.ListKeyVaultKeysDefinition{
			KeyVault: &armlogic.KeyVaultReference{
				ID: to.Ptr("subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.KeyVault/vaults/testKeyVault"),
			},
			SkipToken: to.Ptr("testSkipToken"),
		},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_ListKeyVaultKeys.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.KeyVaultKeyCollection{
			SkipToken: to.Ptr("testSkipToken"),
			Value: []*armlogic.KeyVaultKey{
				{
					Attributes: &armlogic.KeyVaultKeyAttributes{
						Created: to.Ptr[int64](1498072075),
						Enabled: to.Ptr(true),
						Updated: to.Ptr[int64](1498072075),
					},
					Kid: to.Ptr("https://testKeyVault.vault.azure.net/keys/testkey"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.KeyVaultKeyCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.KeyVaultKeyCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_ListKeyVaultKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccounts_LogTrackingEvents(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_LogTrackingEvents.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Log a tracked event"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.LogTrackingEvents(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		armlogic.TrackingEventsDefinition{
			Events: []*armlogic.TrackingEvent{
				{
					Error: &armlogic.TrackingEventErrorInfo{
						Code:    to.Ptr("NotFound"),
						Message: to.Ptr("Some error occurred"),
					},
					EventLevel: to.Ptr(armlogic.EventLevelInformational),
					EventTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-05T01:54:49.505567Z"); return t }()),
					Record: map[string]interface{}{
						"agreementProperties": map[string]interface{}{
							"agreementName":       "testAgreement",
							"as2From":             "testas2from",
							"as2To":               "testas2to",
							"receiverPartnerName": "testPartner2",
							"senderPartnerName":   "testPartner1",
						},
						"messageProperties": map[string]interface{}{
							"IsMessageEncrypted":   false,
							"IsMessageSigned":      false,
							"correlationMessageId": "Unique message identifier",
							"direction":            "Receive",
							"dispositionType":      "received-success",
							"fileName":             "test",
							"isMdnExpected":        true,
							"isMessageCompressed":  false,
							"isMessageFailed":      false,
							"isNrrEnabled":         true,
							"mdnType":              "Async",
							"messageId":            "12345",
						},
					},
					RecordType: to.Ptr(armlogic.TrackingRecordTypeAS2Message),
				}},
			SourceType: to.Ptr("Microsoft.Logic/workflows"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_LogTrackingEvents.json: %v", err)
	}
}

func TestIntegrationAccounts_RegenerateAccessKey(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_RegenerateAccessKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Regenerate access key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.RegenerateAccessKey(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		armlogic.RegenerateActionParameter{
			KeyType: to.Ptr(armlogic.KeyTypePrimary),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_RegenerateAccessKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccount{
			Name:       to.Ptr("testIntegrationAccount"),
			Type:       to.Ptr("Microsoft.Logic/integrationAccounts"),
			ID:         to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount"),
			Location:   to.Ptr("westus"),
			Properties: &armlogic.IntegrationAccountProperties{},
			SKU: &armlogic.IntegrationAccountSKU{
				Name: to.Ptr(armlogic.IntegrationAccountSKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccounts_RegenerateAccessKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountAssemblies_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAssemblies_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List integration account assemblies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountAssembliesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("testResourceGroup",
		"testIntegrationAccount",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAssemblies_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.AssemblyCollection{
			Value: []*armlogic.AssemblyDefinition{
				{
					Name: to.Ptr("testAssembly"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts/assemblies"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/assemblies/testAssembly"),
					Properties: &armlogic.AssemblyProperties{
						ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T18:45:23.4137139Z"); return t }()),
						CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T18:45:23.4129778Z"); return t }()),
						Metadata:    map[string]interface{}{},
						ContentLink: &armlogic.ContentLink{
							ContentHash: &armlogic.ContentHash{
								Algorithm: to.Ptr("md5"),
								Value:     to.Ptr("A2avz/M0ov2FPI3+Je8vDw=="),
							},
							ContentSize:    to.Ptr[int64](3056),
							ContentVersion: to.Ptr("\"0x8D45CE54B058881\""),
							URI:            to.Ptr("<Uri>"),
						},
						AssemblyName:    to.Ptr("System.IdentityModel.Tokens.Jwt"),
						AssemblyVersion: to.Ptr("0.0.0.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssemblyCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssemblyCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAssemblies_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountAssemblies_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAssemblies_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an integration account assembly"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountAssembliesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testAssembly",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAssemblies_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.AssemblyDefinition{
			Name: to.Ptr("testAssembly"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/assemblies"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/assemblies/testAssembly"),
			Properties: &armlogic.AssemblyProperties{
				ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T18:45:23.4137139Z"); return t }()),
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T18:45:23.4129778Z"); return t }()),
				Metadata:    map[string]interface{}{},
				ContentLink: &armlogic.ContentLink{
					ContentHash: &armlogic.ContentHash{
						Algorithm: to.Ptr("md5"),
						Value:     to.Ptr("A2avz/M0ov2FPI3+Je8vDw=="),
					},
					ContentSize:    to.Ptr[int64](3056),
					ContentVersion: to.Ptr("\"0x8D45CE54B058881\""),
					URI:            to.Ptr("<Uri>"),
				},
				AssemblyName:    to.Ptr("System.IdentityModel.Tokens.Jwt"),
				AssemblyVersion: to.Ptr("0.0.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssemblyDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssemblyDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAssemblies_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountAssemblies_CreateOrUpdate(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAssemblies_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an account assembly"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountAssembliesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testAssembly",
		armlogic.AssemblyDefinition{
			Location: to.Ptr("westus"),
			Properties: &armlogic.AssemblyProperties{
				Metadata:     map[string]interface{}{},
				Content:      "Base64 encoded Assembly Content",
				AssemblyName: to.Ptr("System.IdentityModel.Tokens.Jwt"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAssemblies_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.AssemblyDefinition{
			Name: to.Ptr("testAssembly"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/assemblies"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/assemblies/testAssembly"),
			Properties: &armlogic.AssemblyProperties{
				ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T18:45:23.4137139Z"); return t }()),
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T18:45:23.4129778Z"); return t }()),
				Metadata:    map[string]interface{}{},
				ContentLink: &armlogic.ContentLink{
					ContentHash: &armlogic.ContentHash{
						Algorithm: to.Ptr("md5"),
						Value:     to.Ptr("A2avz/M0ov2FPI3+Je8vDw=="),
					},
					ContentSize:    to.Ptr[int64](3056),
					ContentVersion: to.Ptr("\"0x8D45CE54B058881\""),
					URI:            to.Ptr("<Uri>"),
				},
				AssemblyName:    to.Ptr("System.IdentityModel.Tokens.Jwt"),
				AssemblyVersion: to.Ptr("0.0.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssemblyDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssemblyDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAssemblies_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountAssemblies_Delete(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAssemblies_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an integration account assembly"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountAssembliesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testAssembly",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAssemblies_Delete.json: %v", err)
	}
}

func TestIntegrationAccountBatchConfigurations_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountBatchConfigurations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List batch configurations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountBatchConfigurationsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("testResourceGroup",
		"testIntegrationAccount",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountBatchConfigurations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.BatchConfigurationCollection{
			Value: []*armlogic.BatchConfiguration{
				{
					Name: to.Ptr("testBatchConfiguration"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts/batchConfigurations"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/batchConfigurations/testBatchConfiguration"),
					Properties: &armlogic.BatchConfigurationProperties{
						ChangedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T06:14:16.7042301Z"); return t }()),
						CreatedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T06:14:16.6518552Z"); return t }()),
						BatchGroupName: to.Ptr("DEFAULT"),
						ReleaseCriteria: &armlogic.BatchReleaseCriteria{
							BatchSize:    to.Ptr[int32](234567),
							MessageCount: to.Ptr[int32](10),
							Recurrence: &armlogic.WorkflowTriggerRecurrence{
								Frequency: to.Ptr(armlogic.RecurrenceFrequencyMinute),
								Interval:  to.Ptr[int32](1),
								StartTime: to.Ptr("2017-03-24T11:43:00"),
								TimeZone:  to.Ptr("India Standard Time"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BatchConfigurationCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BatchConfigurationCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountBatchConfigurations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountBatchConfigurations_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountBatchConfigurations_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a batch configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountBatchConfigurationsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testBatchConfiguration",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountBatchConfigurations_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.BatchConfiguration{
			Name: to.Ptr("testBatchConfiguration"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/batchConfigurations"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/batchConfigurations/testBatchConfiguration"),
			Properties: &armlogic.BatchConfigurationProperties{
				ChangedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T06:14:16.7042301Z"); return t }()),
				CreatedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T06:14:16.6518552Z"); return t }()),
				BatchGroupName: to.Ptr("DEFAULT"),
				ReleaseCriteria: &armlogic.BatchReleaseCriteria{
					BatchSize:    to.Ptr[int32](234567),
					MessageCount: to.Ptr[int32](10),
					Recurrence: &armlogic.WorkflowTriggerRecurrence{
						Frequency: to.Ptr(armlogic.RecurrenceFrequencyMinute),
						Interval:  to.Ptr[int32](1),
						StartTime: to.Ptr("2017-03-24T11:43:00"),
						TimeZone:  to.Ptr("India Standard Time"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BatchConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BatchConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountBatchConfigurations_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountBatchConfigurations_CreateOrUpdate(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountBatchConfigurations_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a batch configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountBatchConfigurationsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testBatchConfiguration",
		armlogic.BatchConfiguration{
			Location: to.Ptr("westus"),
			Properties: &armlogic.BatchConfigurationProperties{
				BatchGroupName: to.Ptr("DEFAULT"),
				ReleaseCriteria: &armlogic.BatchReleaseCriteria{
					BatchSize:    to.Ptr[int32](234567),
					MessageCount: to.Ptr[int32](10),
					Recurrence: &armlogic.WorkflowTriggerRecurrence{
						Frequency: to.Ptr(armlogic.RecurrenceFrequencyMinute),
						Interval:  to.Ptr[int32](1),
						StartTime: to.Ptr("2017-03-24T11:43:00"),
						TimeZone:  to.Ptr("India Standard Time"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountBatchConfigurations_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.BatchConfiguration{
			Name: to.Ptr("testBatchConfiguration"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/batchConfigurations"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/batchConfigurations/testBatchConfiguration"),
			Properties: &armlogic.BatchConfigurationProperties{
				ChangedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T06:14:16.7042301Z"); return t }()),
				CreatedTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-26T06:14:16.6518552Z"); return t }()),
				BatchGroupName: to.Ptr("DEFAULT"),
				ReleaseCriteria: &armlogic.BatchReleaseCriteria{
					BatchSize:    to.Ptr[int32](234567),
					MessageCount: to.Ptr[int32](10),
					Recurrence: &armlogic.WorkflowTriggerRecurrence{
						Frequency: to.Ptr(armlogic.RecurrenceFrequencyMinute),
						Interval:  to.Ptr[int32](1),
						StartTime: to.Ptr("2017-03-24T11:43:00"),
						TimeZone:  to.Ptr("India Standard Time"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BatchConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BatchConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountBatchConfigurations_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountBatchConfigurations_Delete(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountBatchConfigurations_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a batch configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountBatchConfigurationsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testBatchConfiguration",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountBatchConfigurations_Delete.json: %v", err)
	}
}

func TestIntegrationAccountSchemas_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSchemas_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get schemas by integration account name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountSchemasClient("<subscriptionId>", cred, &options)
	pager := client.List("testResourceGroup",
		"<integrationAccountName>",
		&armlogic.IntegrationAccountSchemasClientListOptions{Top: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSchemas_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.IntegrationAccountSchemaListResult{
			Value: []*armlogic.IntegrationAccountSchema{
				{
					Name: to.Ptr("IntegrationAccountSchema3944"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts/schemas"),
					ID:   to.Ptr("/subscriptions/<subscriptionId>/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/<integrationAccountName>/schemas/IntegrationAccountSchema3944"),
					Properties: &armlogic.IntegrationAccountSchemaProperties{
						ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T01:34:16.7098626Z"); return t }()),
						ContentLink: &armlogic.ContentLink{
							ContentHash: &armlogic.ContentHash{
								Algorithm: to.Ptr("md5"),
								Value:     to.Ptr("<Value>"),
							},
							ContentSize:    to.Ptr[int64](7901),
							ContentVersion: to.Ptr("\"0x8D45C553EECEB76\""),
							URI:            to.Ptr("<contentLinkUri>"),
						},
						CreatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T01:34:16.7088958Z"); return t }()),
						DocumentName:    to.Ptr("OrderFile"),
						Metadata:        map[string]interface{}{},
						SchemaType:      to.Ptr(armlogic.SchemaTypeXML),
						TargetNamespace: to.Ptr("http://Inbound_EDI.OrderFile"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IntegrationAccountSchemaListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IntegrationAccountSchemaListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSchemas_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountSchemas_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSchemas_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get schema by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountSchemasClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testSchema",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSchemas_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccountSchema{
			Name: to.Ptr("IntegrationAccountSchema5349"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/schemas"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/schemas/testSchema"),
			Properties: &armlogic.IntegrationAccountSchemaProperties{
				ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T01:46:48.0847046Z"); return t }()),
				ContentLink: &armlogic.ContentLink{
					ContentHash: &armlogic.ContentHash{
						Algorithm: to.Ptr("md5"),
						Value:     to.Ptr("<value>"),
					},
					ContentSize:    to.Ptr[int64](7901),
					ContentVersion: to.Ptr("\"0x8D45C56FEDFCB45\""),
					URI:            to.Ptr("<contentLinkUrl>"),
				},
				CreatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T01:46:48.0837583Z"); return t }()),
				DocumentName:    to.Ptr("OrderFile"),
				Metadata:        map[string]interface{}{},
				SchemaType:      to.Ptr(armlogic.SchemaTypeXML),
				TargetNamespace: to.Ptr("http://Inbound_EDI.OrderFile"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccountSchema) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccountSchema)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSchemas_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountSchemas_CreateOrUpdate(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSchemas_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update schema"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountSchemasClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testSchema",
		armlogic.IntegrationAccountSchema{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"integrationAccountSchemaName": to.Ptr("IntegrationAccountSchema8120"),
			},
			Properties: &armlogic.IntegrationAccountSchemaProperties{
				Content:     to.Ptr("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<xs:schema xmlns:b=\"http://schemas.microsoft.com/BizTalk/2003\" xmlns=\"http://Inbound_EDI.OrderFile\" targetNamespace=\"http://Inbound_EDI.OrderFile\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:annotation>\r\n    <xs:appinfo>\r\n      <b:schemaInfo default_pad_char=\" \" count_positions_by_byte=\"false\" parser_optimization=\"speed\" lookahead_depth=\"3\" suppress_empty_nodes=\"false\" generate_empty_nodes=\"true\" allow_early_termination=\"false\" early_terminate_optional_fields=\"false\" allow_message_breakup_of_infix_root=\"false\" compile_parse_tables=\"false\" standard=\"Flat File\" root_reference=\"OrderFile\" />\r\n      <schemaEditorExtension:schemaInfo namespaceAlias=\"b\" extensionClass=\"Microsoft.BizTalk.FlatFileExtension.FlatFileExtension\" standardName=\"Flat File\" xmlns:schemaEditorExtension=\"http://schemas.microsoft.com/BizTalk/2003/SchemaEditorExtensions\" />\r\n    </xs:appinfo>\r\n  </xs:annotation>\r\n  <xs:element name=\"OrderFile\">\r\n    <xs:annotation>\r\n      <xs:appinfo>\r\n        <b:recordInfo structure=\"delimited\" preserve_delimiter_for_empty_data=\"true\" suppress_trailing_delimiters=\"false\" sequence_number=\"1\" />\r\n      </xs:appinfo>\r\n    </xs:annotation>\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:annotation>\r\n          <xs:appinfo>\r\n            <b:groupInfo sequence_number=\"0\" />\r\n          </xs:appinfo>\r\n        </xs:annotation>\r\n        <xs:element name=\"Order\">\r\n          <xs:annotation>\r\n            <xs:appinfo>\r\n              <b:recordInfo sequence_number=\"1\" structure=\"delimited\" preserve_delimiter_for_empty_data=\"true\" suppress_trailing_delimiters=\"false\" child_delimiter_type=\"hex\" child_delimiter=\"0x0D 0x0A\" child_order=\"infix\" />\r\n            </xs:appinfo>\r\n          </xs:annotation>\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:annotation>\r\n                <xs:appinfo>\r\n                  <b:groupInfo sequence_number=\"0\" />\r\n                </xs:appinfo>\r\n              </xs:annotation>\r\n              <xs:element name=\"Header\">\r\n                <xs:annotation>\r\n                  <xs:appinfo>\r\n                    <b:recordInfo sequence_number=\"1\" structure=\"delimited\" preserve_delimiter_for_empty_data=\"true\" suppress_trailing_delimiters=\"false\" child_delimiter_type=\"char\" child_delimiter=\"|\" child_order=\"infix\" tag_name=\"HDR|\" />\r\n                  </xs:appinfo>\r\n                </xs:annotation>\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:annotation>\r\n                      <xs:appinfo>\r\n                        <b:groupInfo sequence_number=\"0\" />\r\n                      </xs:appinfo>\r\n                    </xs:annotation>\r\n                    <xs:element name=\"PODate\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"1\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"PONumber\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo justification=\"left\" sequence_number=\"2\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"CustomerID\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"3\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"CustomerContactName\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"4\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"CustomerContactPhone\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"5\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n              <xs:element minOccurs=\"1\" maxOccurs=\"unbounded\" name=\"LineItems\">\r\n                <xs:annotation>\r\n                  <xs:appinfo>\r\n                    <b:recordInfo sequence_number=\"2\" structure=\"delimited\" preserve_delimiter_for_empty_data=\"true\" suppress_trailing_delimiters=\"false\" child_delimiter_type=\"char\" child_delimiter=\"|\" child_order=\"infix\" tag_name=\"DTL|\" />\r\n                  </xs:appinfo>\r\n                </xs:annotation>\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:annotation>\r\n                      <xs:appinfo>\r\n                        <b:groupInfo sequence_number=\"0\" />\r\n                      </xs:appinfo>\r\n                    </xs:annotation>\r\n                    <xs:element name=\"PONumber\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"1\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"ItemOrdered\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"2\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"Quantity\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"3\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"UOM\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"4\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"Price\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"5\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"ExtendedPrice\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"6\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"Description\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"7\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"),
				ContentType: to.Ptr("application/xml"),
				Metadata:    map[string]interface{}{},
				SchemaType:  to.Ptr(armlogic.SchemaTypeXML),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSchemas_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccountSchema{
			Name: to.Ptr("IntegrationAccountSchema5349"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/schemas"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/schemas/testSchema"),
			Properties: &armlogic.IntegrationAccountSchemaProperties{
				ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T01:46:48.0847046Z"); return t }()),
				ContentLink: &armlogic.ContentLink{
					ContentHash: &armlogic.ContentHash{
						Algorithm: to.Ptr("md5"),
						Value:     to.Ptr("<value>"),
					},
					ContentSize:    to.Ptr[int64](7901),
					ContentVersion: to.Ptr("\"0x8D45C56FEDFCB45\""),
					URI:            to.Ptr("<contentLinkUrl>"),
				},
				CreatedTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T01:46:48.0837583Z"); return t }()),
				DocumentName:    to.Ptr("OrderFile"),
				Metadata:        map[string]interface{}{},
				SchemaType:      to.Ptr(armlogic.SchemaTypeXML),
				TargetNamespace: to.Ptr("http://Inbound_EDI.OrderFile"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccountSchema) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccountSchema)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSchemas_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountSchemas_Delete(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSchemas_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a schema by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountSchemasClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testSchema",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSchemas_Delete.json: %v", err)
	}
}

func TestIntegrationAccountMaps_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountMaps_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get maps by integration account name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountMapsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("testResourceGroup",
		"testIntegrationAccount",
		&armlogic.IntegrationAccountMapsClientListOptions{Top: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountMaps_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.IntegrationAccountMapListResult{
			Value: []*armlogic.IntegrationAccountMap{
				{
					Name: to.Ptr("IntegrationAccountMap9943"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts/maps"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/maps/IntegrationAccountMap9943"),
					Properties: &armlogic.IntegrationAccountMapProperties{
						ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T18:34:32.390576Z"); return t }()),
						ContentLink: &armlogic.ContentLink{
							ContentHash: &armlogic.ContentHash{
								Algorithm: to.Ptr("md5"),
								Value:     to.Ptr("A2avz/M0ov2FPI3+Je8vDw=="),
							},
							ContentSize:    to.Ptr[int64](3056),
							ContentVersion: to.Ptr("\"0x8D45CE3C6D23B4B\""),
							URI:            to.Ptr("<Uri>"),
						},
						CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T18:34:32.3902373Z"); return t }()),
						MapType:     to.Ptr(armlogic.MapTypeXslt),
						Metadata:    map[string]interface{}{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IntegrationAccountMapListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IntegrationAccountMapListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountMaps_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountMaps_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountMaps_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get map by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountMapsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testMap",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountMaps_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccountMap{
			Name: to.Ptr("testMap"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/maps"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/maps/testMap"),
			Properties: &armlogic.IntegrationAccountMapProperties{
				ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T18:45:23.4137139Z"); return t }()),
				ContentLink: &armlogic.ContentLink{
					ContentHash: &armlogic.ContentHash{
						Algorithm: to.Ptr("md5"),
						Value:     to.Ptr("A2avz/M0ov2FPI3+Je8vDw=="),
					},
					ContentSize:    to.Ptr[int64](3056),
					ContentVersion: to.Ptr("\"0x8D45CE54B058881\""),
					URI:            to.Ptr("<Uri>"),
				},
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-24T18:45:23.4129778Z"); return t }()),
				MapType:     to.Ptr(armlogic.MapTypeXslt),
				Metadata:    map[string]interface{}{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccountMap) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccountMap)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountMaps_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountMaps_CreateOrUpdate(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountMaps_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a map"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountMapsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testMap",
		armlogic.IntegrationAccountMap{
			Location: to.Ptr("westus"),
			Properties: &armlogic.IntegrationAccountMapProperties{
				Content:     to.Ptr("<?xml version=\"1.0\" encoding=\"UTF-16\"?>\r\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\" xmlns:var=\"http://schemas.microsoft.com/BizTalk/2003/var\" exclude-result-prefixes=\"msxsl var s0 userCSharp\" version=\"1.0\" xmlns:ns0=\"http://BizTalk_Server_Project4.StringFunctoidsDestinationSchema\" xmlns:s0=\"http://BizTalk_Server_Project4.StringFunctoidsSourceSchema\" xmlns:userCSharp=\"http://schemas.microsoft.com/BizTalk/2003/userCSharp\">\r\n  <xsl:import href=\"http://btsfunctoids.blob.core.windows.net/functoids/functoids.xslt\" />\r\n  <xsl:output omit-xml-declaration=\"yes\" method=\"xml\" version=\"1.0\" />\r\n  <xsl:template match=\"/\">\r\n    <xsl:apply-templates select=\"/s0:Root\" />\r\n  </xsl:template>\r\n  <xsl:template match=\"/s0:Root\">\r\n    <xsl:variable name=\"var:v1\" select=\"userCSharp:StringFind(string(StringFindSource/text()) , &quot;SearchString&quot;)\" />\r\n    <xsl:variable name=\"var:v2\" select=\"userCSharp:StringLeft(string(StringLeftSource/text()) , &quot;2&quot;)\" />\r\n    <xsl:variable name=\"var:v3\" select=\"userCSharp:StringRight(string(StringRightSource/text()) , &quot;2&quot;)\" />\r\n    <xsl:variable name=\"var:v4\" select=\"userCSharp:StringUpperCase(string(UppercaseSource/text()))\" />\r\n    <xsl:variable name=\"var:v5\" select=\"userCSharp:StringLowerCase(string(LowercaseSource/text()))\" />\r\n    <xsl:variable name=\"var:v6\" select=\"userCSharp:StringSize(string(SizeSource/text()))\" />\r\n    <xsl:variable name=\"var:v7\" select=\"userCSharp:StringSubstring(string(StringExtractSource/text()) , &quot;0&quot; , &quot;2&quot;)\" />\r\n    <xsl:variable name=\"var:v8\" select=\"userCSharp:StringConcat(string(StringConcatSource/text()))\" />\r\n    <xsl:variable name=\"var:v9\" select=\"userCSharp:StringTrimLeft(string(StringLeftTrimSource/text()))\" />\r\n    <xsl:variable name=\"var:v10\" select=\"userCSharp:StringTrimRight(string(StringRightTrimSource/text()))\" />\r\n    <ns0:Root>\r\n      <StringFindDestination>\r\n        <xsl:value-of select=\"$var:v1\" />\r\n      </StringFindDestination>\r\n      <StringLeftDestination>\r\n        <xsl:value-of select=\"$var:v2\" />\r\n      </StringLeftDestination>\r\n      <StringRightDestination>\r\n        <xsl:value-of select=\"$var:v3\" />\r\n      </StringRightDestination>\r\n      <UppercaseDestination>\r\n        <xsl:value-of select=\"$var:v4\" />\r\n      </UppercaseDestination>\r\n      <LowercaseDestination>\r\n        <xsl:value-of select=\"$var:v5\" />\r\n      </LowercaseDestination>\r\n      <SizeDestination>\r\n        <xsl:value-of select=\"$var:v6\" />\r\n      </SizeDestination>\r\n      <StringExtractDestination>\r\n        <xsl:value-of select=\"$var:v7\" />\r\n      </StringExtractDestination>\r\n      <StringConcatDestination>\r\n        <xsl:value-of select=\"$var:v8\" />\r\n      </StringConcatDestination>\r\n      <StringLeftTrimDestination>\r\n        <xsl:value-of select=\"$var:v9\" />\r\n      </StringLeftTrimDestination>\r\n      <StringRightTrimDestination>\r\n        <xsl:value-of select=\"$var:v10\" />\r\n      </StringRightTrimDestination>\r\n    </ns0:Root>\r\n  </xsl:template>\r\n</xsl:stylesheet>"),
				ContentType: to.Ptr("application/xml"),
				MapType:     to.Ptr(armlogic.MapTypeXslt),
				Metadata:    map[string]interface{}{},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountMaps_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccountMap{
			Name: to.Ptr("IntegrationAccountMap291"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/maps"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/<resourceGroup>/providers/Microsoft.Logic/integrationAccounts/<IntegrationAccount>/maps/testMap"),
			Properties: &armlogic.IntegrationAccountMapProperties{
				ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T18:41:04.4088605Z"); return t }()),
				ContentLink: &armlogic.ContentLink{
					ContentHash: &armlogic.ContentHash{
						Algorithm: to.Ptr("md5"),
						Value:     to.Ptr("A2avz/M0ov2FPI3+Je8vDw=="),
					},
					ContentSize:    to.Ptr[int64](3056),
					ContentVersion: to.Ptr("\"0x8D464C057F22E5F\""),
					URI:            to.Ptr("<Uri>"),
				},
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T18:41:03.7366103Z"); return t }()),
				MapType:     to.Ptr(armlogic.MapTypeXslt),
				Metadata:    map[string]interface{}{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccountMap) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccountMap)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountMaps_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountMaps_Delete(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountMaps_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a map"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountMapsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testMap",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountMaps_Delete.json: %v", err)
	}
}

func TestIntegrationAccountPartners_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountPartners_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get partners by integration account name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountPartnersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("testResourceGroup",
		"testIntegrationAccount",
		&armlogic.IntegrationAccountPartnersClientListOptions{Top: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountPartners_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.IntegrationAccountPartnerListResult{
			Value: []*armlogic.IntegrationAccountPartner{
				{
					Name: to.Ptr("IntegrationAccountPartner947"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts/partners"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/IntegrationAccount2431/partners/testIntegrationAccount"),
					Properties: &armlogic.IntegrationAccountPartnerProperties{
						ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T19:42:59.1987212Z"); return t }()),
						Content: &armlogic.PartnerContent{
							B2B: &armlogic.B2BPartnerContent{
								BusinessIdentities: []*armlogic.BusinessIdentity{
									{
										Qualifier: to.Ptr("AA"),
										Value:     to.Ptr("ZZ"),
									}},
							},
						},
						CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T19:42:59.197919Z"); return t }()),
						Metadata:    map[string]interface{}{},
						PartnerType: to.Ptr(armlogic.PartnerTypeB2B),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IntegrationAccountPartnerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IntegrationAccountPartnerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountPartners_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountPartners_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountPartners_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get partner by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountPartnersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testPartner",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountPartners_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccountPartner{
			Name: to.Ptr("testIntegrationAccount"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/partners"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/partners/testPartner"),
			Properties: &armlogic.IntegrationAccountPartnerProperties{
				ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T20:01:24.0525141Z"); return t }()),
				Content: &armlogic.PartnerContent{
					B2B: &armlogic.B2BPartnerContent{
						BusinessIdentities: []*armlogic.BusinessIdentity{
							{
								Qualifier: to.Ptr("AA"),
								Value:     to.Ptr("ZZ"),
							}},
					},
				},
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T20:01:24.0517156Z"); return t }()),
				Metadata:    map[string]interface{}{},
				PartnerType: to.Ptr(armlogic.PartnerTypeB2B),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccountPartner) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccountPartner)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountPartners_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountPartners_CreateOrUpdate(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountPartners_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a partner"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountPartnersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testPartner",
		armlogic.IntegrationAccountPartner{
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armlogic.IntegrationAccountPartnerProperties{
				Content: &armlogic.PartnerContent{
					B2B: &armlogic.B2BPartnerContent{
						BusinessIdentities: []*armlogic.BusinessIdentity{
							{
								Qualifier: to.Ptr("AA"),
								Value:     to.Ptr("ZZ"),
							}},
					},
				},
				Metadata:    map[string]interface{}{},
				PartnerType: to.Ptr(armlogic.PartnerTypeB2B),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountPartners_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccountPartner{
			Name: to.Ptr("testPartner"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/partners"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/flowrg/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/partners/testPartner"),
			Properties: &armlogic.IntegrationAccountPartnerProperties{
				ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T20:06:23.5904806Z"); return t }()),
				Content: &armlogic.PartnerContent{
					B2B: &armlogic.B2BPartnerContent{
						BusinessIdentities: []*armlogic.BusinessIdentity{
							{
								Qualifier: to.Ptr("AA"),
								Value:     to.Ptr("ZZ"),
							}},
					},
				},
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T20:06:23.5895246Z"); return t }()),
				Metadata:    map[string]interface{}{},
				PartnerType: to.Ptr(armlogic.PartnerTypeB2B),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccountPartner) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccountPartner)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountPartners_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountPartners_Delete(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountPartners_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a partner"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountPartnersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testPartner",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountPartners_Delete.json: %v", err)
	}
}

func TestIntegrationAccountAgreements_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAgreements_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get agreements by integration account name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountAgreementsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("testResourceGroup",
		"testIntegrationAccount",
		&armlogic.IntegrationAccountAgreementsClientListOptions{Top: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAgreements_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.IntegrationAccountAgreementListResult{
			Value: []*armlogic.IntegrationAccountAgreement{
				{
					Name: to.Ptr("<IntegrationAccountAgreementName>"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts/agreements"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/<IntegrationAccountName>/agreements/<IntegrationAccountAgreementName>"),
					Properties: &armlogic.IntegrationAccountAgreementProperties{
						AgreementType: to.Ptr(armlogic.AgreementTypeX12),
						ChangedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T22:00:54.1520445Z"); return t }()),
						Content: &armlogic.AgreementContent{
							X12: &armlogic.X12AgreementContent{
								ReceiveAgreement: &armlogic.X12OneWayAgreement{
									ProtocolSettings: &armlogic.X12ProtocolSettings{
										AcknowledgementSettings: &armlogic.X12AcknowledgementSettings{
											AcknowledgementControlNumberLowerBound: to.Ptr[int32](1),
											AcknowledgementControlNumberUpperBound: to.Ptr[int32](999999999),
											BatchFunctionalAcknowledgements:        to.Ptr(true),
											BatchImplementationAcknowledgements:    to.Ptr(false),
											BatchTechnicalAcknowledgements:         to.Ptr(true),
											NeedFunctionalAcknowledgement:          to.Ptr(false),
											NeedImplementationAcknowledgement:      to.Ptr(false),
											NeedLoopForValidMessages:               to.Ptr(false),
											NeedTechnicalAcknowledgement:           to.Ptr(false),
											RolloverAcknowledgementControlNumber:   to.Ptr(true),
											SendSynchronousAcknowledgement:         to.Ptr(true),
										},
										EnvelopeSettings: &armlogic.X12EnvelopeSettings{
											ControlStandardsID:                           to.Ptr[int32](85),
											ControlVersionNumber:                         to.Ptr("00401"),
											EnableDefaultGroupHeaders:                    to.Ptr(true),
											GroupControlNumberLowerBound:                 to.Ptr[int32](1),
											GroupControlNumberUpperBound:                 to.Ptr[int32](999999999),
											GroupHeaderAgencyCode:                        to.Ptr("T"),
											GroupHeaderDateFormat:                        to.Ptr(armlogic.X12DateFormatCCYYMMDD),
											GroupHeaderTimeFormat:                        to.Ptr(armlogic.X12TimeFormatHHMM),
											GroupHeaderVersion:                           to.Ptr("00401"),
											InterchangeControlNumberLowerBound:           to.Ptr[int32](1),
											InterchangeControlNumberUpperBound:           to.Ptr[int32](999999999),
											OverwriteExistingTransactionSetControlNumber: to.Ptr(true),
											ReceiverApplicationID:                        to.Ptr("RECEIVE-APP"),
											RolloverGroupControlNumber:                   to.Ptr(true),
											RolloverInterchangeControlNumber:             to.Ptr(true),
											RolloverTransactionSetControlNumber:          to.Ptr(true),
											SenderApplicationID:                          to.Ptr("BTS-SENDER"),
											TransactionSetControlNumberLowerBound:        to.Ptr[int32](1),
											TransactionSetControlNumberUpperBound:        to.Ptr[int32](999999999),
											UsageIndicator:                               to.Ptr(armlogic.UsageIndicatorTest),
											UseControlStandardsIDAsRepetitionCharacter:   to.Ptr(false),
										},
										FramingSettings: &armlogic.X12FramingSettings{
											CharacterSet:               to.Ptr(armlogic.X12CharacterSetUTF8),
											ComponentSeparator:         to.Ptr[int32](58),
											DataElementSeparator:       to.Ptr[int32](42),
											ReplaceCharacter:           to.Ptr[int32](36),
											ReplaceSeparatorsInPayload: to.Ptr(false),
											SegmentTerminator:          to.Ptr[int32](126),
											SegmentTerminatorSuffix:    to.Ptr(armlogic.SegmentTerminatorSuffixNone),
										},
										MessageFilter: &armlogic.X12MessageFilter{
											MessageFilterType: to.Ptr(armlogic.MessageFilterTypeExclude),
										},
										ProcessingSettings: &armlogic.X12ProcessingSettings{
											ConvertImpliedDecimal:                   to.Ptr(true),
											CreateEmptyXMLTagsForTrailingSeparators: to.Ptr(true),
											MaskSecurityInfo:                        to.Ptr(true),
											PreserveInterchange:                     to.Ptr(true),
											SuspendInterchangeOnError:               to.Ptr(true),
											UseDotAsDecimalSeparator:                to.Ptr(true),
										},
										SchemaReferences: []*armlogic.X12SchemaReference{},
										SecuritySettings: &armlogic.X12SecuritySettings{
											AuthorizationQualifier: to.Ptr("00"),
											SecurityQualifier:      to.Ptr("00"),
										},
										ValidationSettings: &armlogic.X12ValidationSettings{
											AllowLeadingAndTrailingSpacesAndZeroes:    to.Ptr(false),
											CheckDuplicateGroupControlNumber:          to.Ptr(false),
											CheckDuplicateInterchangeControlNumber:    to.Ptr(false),
											CheckDuplicateTransactionSetControlNumber: to.Ptr(false),
											InterchangeControlNumberValidityDays:      to.Ptr[int32](30),
											TrailingSeparatorPolicy:                   to.Ptr(armlogic.TrailingSeparatorPolicyNotAllowed),
											TrimLeadingAndTrailingSpacesAndZeroes:     to.Ptr(false),
											ValidateCharacterSet:                      to.Ptr(true),
											ValidateEDITypes:                          to.Ptr(true),
											ValidateXSDTypes:                          to.Ptr(false),
										},
									},
									ReceiverBusinessIdentity: &armlogic.BusinessIdentity{
										Qualifier: to.Ptr("ZZ"),
										Value:     to.Ptr("ZZ"),
									},
									SenderBusinessIdentity: &armlogic.BusinessIdentity{
										Qualifier: to.Ptr("AA"),
										Value:     to.Ptr("AA"),
									},
								},
								SendAgreement: &armlogic.X12OneWayAgreement{
									ProtocolSettings: &armlogic.X12ProtocolSettings{
										AcknowledgementSettings: &armlogic.X12AcknowledgementSettings{
											AcknowledgementControlNumberLowerBound: to.Ptr[int32](1),
											AcknowledgementControlNumberUpperBound: to.Ptr[int32](999999999),
											BatchFunctionalAcknowledgements:        to.Ptr(true),
											BatchImplementationAcknowledgements:    to.Ptr(false),
											BatchTechnicalAcknowledgements:         to.Ptr(true),
											NeedFunctionalAcknowledgement:          to.Ptr(false),
											NeedImplementationAcknowledgement:      to.Ptr(false),
											NeedLoopForValidMessages:               to.Ptr(false),
											NeedTechnicalAcknowledgement:           to.Ptr(false),
											RolloverAcknowledgementControlNumber:   to.Ptr(true),
											SendSynchronousAcknowledgement:         to.Ptr(true),
										},
										EnvelopeSettings: &armlogic.X12EnvelopeSettings{
											ControlStandardsID:                           to.Ptr[int32](100),
											ControlVersionNumber:                         to.Ptr("0.0"),
											EnableDefaultGroupHeaders:                    to.Ptr(true),
											FunctionalGroupID:                            to.Ptr("1"),
											GroupControlNumberLowerBound:                 to.Ptr[int32](1),
											GroupControlNumberUpperBound:                 to.Ptr[int32](999999999),
											GroupHeaderAgencyCode:                        to.Ptr("T"),
											GroupHeaderDateFormat:                        to.Ptr(armlogic.X12DateFormatCCYYMMDD),
											GroupHeaderTimeFormat:                        to.Ptr(armlogic.X12TimeFormatHHMM),
											GroupHeaderVersion:                           to.Ptr("0.0"),
											InterchangeControlNumberLowerBound:           to.Ptr[int32](1),
											InterchangeControlNumberUpperBound:           to.Ptr[int32](999999999),
											OverwriteExistingTransactionSetControlNumber: to.Ptr(true),
											ReceiverApplicationID:                        to.Ptr("100"),
											RolloverGroupControlNumber:                   to.Ptr(true),
											RolloverInterchangeControlNumber:             to.Ptr(true),
											RolloverTransactionSetControlNumber:          to.Ptr(true),
											SenderApplicationID:                          to.Ptr("100"),
											TransactionSetControlNumberLowerBound:        to.Ptr[int32](1),
											TransactionSetControlNumberPrefix:            to.Ptr(""),
											TransactionSetControlNumberSuffix:            to.Ptr(""),
											TransactionSetControlNumberUpperBound:        to.Ptr[int32](999999999),
											UsageIndicator:                               to.Ptr(armlogic.UsageIndicatorInformation),
											UseControlStandardsIDAsRepetitionCharacter:   to.Ptr(true),
										},
										FramingSettings: &armlogic.X12FramingSettings{
											CharacterSet:               to.Ptr(armlogic.X12CharacterSetUTF8),
											ComponentSeparator:         to.Ptr[int32](58),
											DataElementSeparator:       to.Ptr[int32](42),
											ReplaceCharacter:           to.Ptr[int32](36),
											ReplaceSeparatorsInPayload: to.Ptr(false),
											SegmentTerminator:          to.Ptr[int32](126),
											SegmentTerminatorSuffix:    to.Ptr(armlogic.SegmentTerminatorSuffixNone),
										},
										MessageFilter: &armlogic.X12MessageFilter{
											MessageFilterType: to.Ptr(armlogic.MessageFilterTypeExclude),
										},
										ProcessingSettings: &armlogic.X12ProcessingSettings{
											ConvertImpliedDecimal:                   to.Ptr(true),
											CreateEmptyXMLTagsForTrailingSeparators: to.Ptr(true),
											MaskSecurityInfo:                        to.Ptr(true),
											PreserveInterchange:                     to.Ptr(true),
											SuspendInterchangeOnError:               to.Ptr(true),
											UseDotAsDecimalSeparator:                to.Ptr(true),
										},
										SchemaReferences: []*armlogic.X12SchemaReference{},
										SecuritySettings: &armlogic.X12SecuritySettings{
											AuthorizationQualifier: to.Ptr("00"),
											SecurityQualifier:      to.Ptr("00"),
										},
										ValidationSettings: &armlogic.X12ValidationSettings{
											AllowLeadingAndTrailingSpacesAndZeroes:    to.Ptr(false),
											CheckDuplicateGroupControlNumber:          to.Ptr(false),
											CheckDuplicateInterchangeControlNumber:    to.Ptr(false),
											CheckDuplicateTransactionSetControlNumber: to.Ptr(false),
											InterchangeControlNumberValidityDays:      to.Ptr[int32](30),
											TrailingSeparatorPolicy:                   to.Ptr(armlogic.TrailingSeparatorPolicyNotAllowed),
											TrimLeadingAndTrailingSpacesAndZeroes:     to.Ptr(false),
											ValidateCharacterSet:                      to.Ptr(true),
											ValidateEDITypes:                          to.Ptr(true),
											ValidateXSDTypes:                          to.Ptr(false),
										},
									},
									ReceiverBusinessIdentity: &armlogic.BusinessIdentity{
										Qualifier: to.Ptr("AA"),
										Value:     to.Ptr("AA"),
									},
									SenderBusinessIdentity: &armlogic.BusinessIdentity{
										Qualifier: to.Ptr("ZZ"),
										Value:     to.Ptr("ZZ"),
									},
								},
							},
						},
						CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T22:00:54.1516558Z"); return t }()),
						GuestIdentity: &armlogic.BusinessIdentity{
							Qualifier: to.Ptr("AA"),
							Value:     to.Ptr("AA"),
						},
						GuestPartner: to.Ptr("GuestPartner"),
						HostIdentity: &armlogic.BusinessIdentity{
							Qualifier: to.Ptr("ZZ"),
							Value:     to.Ptr("ZZ"),
						},
						HostPartner: to.Ptr("HostPartner"),
						Metadata:    map[string]interface{}{},
					},
				},
				{
					Name: to.Ptr("<IntegrationAccountAgreementName>"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts/agreements"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/<IntegrationAccountName>/agreements/<IntegrationAccountAgreementName>"),
					Properties: &armlogic.IntegrationAccountAgreementProperties{
						AgreementType: to.Ptr(armlogic.AgreementTypeAS2),
						ChangedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T22:00:53.4140804Z"); return t }()),
						Content: &armlogic.AgreementContent{
							AS2: &armlogic.AS2AgreementContent{
								ReceiveAgreement: &armlogic.AS2OneWayAgreement{
									ProtocolSettings: &armlogic.AS2ProtocolSettings{
										AcknowledgementConnectionSettings: &armlogic.AS2AcknowledgementConnectionSettings{
											IgnoreCertificateNameMismatch: to.Ptr(true),
											KeepHTTPConnectionAlive:       to.Ptr(true),
											SupportHTTPStatusCodeContinue: to.Ptr(true),
											UnfoldHTTPHeaders:             to.Ptr(true),
										},
										EnvelopeSettings: &armlogic.AS2EnvelopeSettings{
											AutogenerateFileName:                    to.Ptr(true),
											FileNameTemplate:                        to.Ptr("Test"),
											MessageContentType:                      to.Ptr("text/plain"),
											SuspendMessageOnFileNameGenerationError: to.Ptr(true),
											TransmitFileNameInMimeHeader:            to.Ptr(true),
										},
										ErrorSettings: &armlogic.AS2ErrorSettings{
											ResendIfMDNNotReceived:  to.Ptr(true),
											SuspendDuplicateMessage: to.Ptr(true),
										},
										MdnSettings: &armlogic.AS2MdnSettings{
											DispositionNotificationTo:  to.Ptr("http://tempuri.org"),
											MdnText:                    to.Ptr("Sample"),
											MicHashingAlgorithm:        to.Ptr(armlogic.HashingAlgorithmNone),
											NeedMDN:                    to.Ptr(true),
											ReceiptDeliveryURL:         to.Ptr("http://tempuri.org"),
											SendInboundMDNToMessageBox: to.Ptr(true),
											SendMDNAsynchronously:      to.Ptr(true),
											SignMDN:                    to.Ptr(true),
											SignOutboundMDNIfOptional:  to.Ptr(true),
										},
										MessageConnectionSettings: &armlogic.AS2MessageConnectionSettings{
											IgnoreCertificateNameMismatch: to.Ptr(true),
											KeepHTTPConnectionAlive:       to.Ptr(true),
											SupportHTTPStatusCodeContinue: to.Ptr(true),
											UnfoldHTTPHeaders:             to.Ptr(true),
										},
										SecuritySettings: &armlogic.AS2SecuritySettings{
											EnableNRRForInboundDecodedMessages:  to.Ptr(true),
											EnableNRRForInboundEncodedMessages:  to.Ptr(true),
											EnableNRRForInboundMDN:              to.Ptr(true),
											EnableNRRForOutboundDecodedMessages: to.Ptr(true),
											EnableNRRForOutboundEncodedMessages: to.Ptr(true),
											EnableNRRForOutboundMDN:             to.Ptr(true),
											OverrideGroupSigningCertificate:     to.Ptr(false),
										},
										ValidationSettings: &armlogic.AS2ValidationSettings{
											CheckCertificateRevocationListOnReceive: to.Ptr(true),
											CheckCertificateRevocationListOnSend:    to.Ptr(true),
											CheckDuplicateMessage:                   to.Ptr(true),
											CompressMessage:                         to.Ptr(true),
											EncryptMessage:                          to.Ptr(false),
											EncryptionAlgorithm:                     to.Ptr(armlogic.EncryptionAlgorithmAES128),
											InterchangeDuplicatesValidityDays:       to.Ptr[int32](100),
											OverrideMessageProperties:               to.Ptr(true),
											SignMessage:                             to.Ptr(false),
										},
									},
									ReceiverBusinessIdentity: &armlogic.BusinessIdentity{
										Qualifier: to.Ptr("ZZ"),
										Value:     to.Ptr("ZZ"),
									},
									SenderBusinessIdentity: &armlogic.BusinessIdentity{
										Qualifier: to.Ptr("AA"),
										Value:     to.Ptr("AA"),
									},
								},
								SendAgreement: &armlogic.AS2OneWayAgreement{
									ProtocolSettings: &armlogic.AS2ProtocolSettings{
										AcknowledgementConnectionSettings: &armlogic.AS2AcknowledgementConnectionSettings{
											IgnoreCertificateNameMismatch: to.Ptr(true),
											KeepHTTPConnectionAlive:       to.Ptr(true),
											SupportHTTPStatusCodeContinue: to.Ptr(true),
											UnfoldHTTPHeaders:             to.Ptr(true),
										},
										EnvelopeSettings: &armlogic.AS2EnvelopeSettings{
											AutogenerateFileName:                    to.Ptr(true),
											FileNameTemplate:                        to.Ptr("Test"),
											MessageContentType:                      to.Ptr("text/plain"),
											SuspendMessageOnFileNameGenerationError: to.Ptr(true),
											TransmitFileNameInMimeHeader:            to.Ptr(true),
										},
										ErrorSettings: &armlogic.AS2ErrorSettings{
											ResendIfMDNNotReceived:  to.Ptr(true),
											SuspendDuplicateMessage: to.Ptr(true),
										},
										MdnSettings: &armlogic.AS2MdnSettings{
											DispositionNotificationTo:  to.Ptr("http://tempuri.org"),
											MdnText:                    to.Ptr("Sample"),
											MicHashingAlgorithm:        to.Ptr(armlogic.HashingAlgorithmNone),
											NeedMDN:                    to.Ptr(true),
											ReceiptDeliveryURL:         to.Ptr("http://tempuri.org"),
											SendInboundMDNToMessageBox: to.Ptr(true),
											SendMDNAsynchronously:      to.Ptr(true),
											SignMDN:                    to.Ptr(true),
											SignOutboundMDNIfOptional:  to.Ptr(true),
										},
										MessageConnectionSettings: &armlogic.AS2MessageConnectionSettings{
											IgnoreCertificateNameMismatch: to.Ptr(true),
											KeepHTTPConnectionAlive:       to.Ptr(true),
											SupportHTTPStatusCodeContinue: to.Ptr(true),
											UnfoldHTTPHeaders:             to.Ptr(true),
										},
										SecuritySettings: &armlogic.AS2SecuritySettings{
											EnableNRRForInboundDecodedMessages:  to.Ptr(true),
											EnableNRRForInboundEncodedMessages:  to.Ptr(true),
											EnableNRRForInboundMDN:              to.Ptr(true),
											EnableNRRForOutboundDecodedMessages: to.Ptr(true),
											EnableNRRForOutboundEncodedMessages: to.Ptr(true),
											EnableNRRForOutboundMDN:             to.Ptr(true),
											OverrideGroupSigningCertificate:     to.Ptr(false),
										},
										ValidationSettings: &armlogic.AS2ValidationSettings{
											CheckCertificateRevocationListOnReceive: to.Ptr(true),
											CheckCertificateRevocationListOnSend:    to.Ptr(true),
											CheckDuplicateMessage:                   to.Ptr(true),
											CompressMessage:                         to.Ptr(true),
											EncryptMessage:                          to.Ptr(false),
											EncryptionAlgorithm:                     to.Ptr(armlogic.EncryptionAlgorithmAES128),
											InterchangeDuplicatesValidityDays:       to.Ptr[int32](100),
											OverrideMessageProperties:               to.Ptr(true),
											SignMessage:                             to.Ptr(false),
										},
									},
									ReceiverBusinessIdentity: &armlogic.BusinessIdentity{
										Qualifier: to.Ptr("AA"),
										Value:     to.Ptr("AA"),
									},
									SenderBusinessIdentity: &armlogic.BusinessIdentity{
										Qualifier: to.Ptr("ZZ"),
										Value:     to.Ptr("ZZ"),
									},
								},
							},
						},
						CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T22:00:53.4134038Z"); return t }()),
						GuestIdentity: &armlogic.BusinessIdentity{
							Qualifier: to.Ptr("AA"),
							Value:     to.Ptr("AA"),
						},
						GuestPartner: to.Ptr("GuestPartner"),
						HostIdentity: &armlogic.BusinessIdentity{
							Qualifier: to.Ptr("ZZ"),
							Value:     to.Ptr("ZZ"),
						},
						HostPartner: to.Ptr("HostPartner"),
						Metadata:    map[string]interface{}{},
					},
				},
				{
					Name: to.Ptr("<IntegrationAccountAgreementName>"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts/agreements"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/<IntegrationAccountName>/agreements/<IntegrationAccountAgreementName>"),
					Properties: &armlogic.IntegrationAccountAgreementProperties{
						AgreementType: to.Ptr(armlogic.AgreementTypeEdifact),
						ChangedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T22:00:53.8212345Z"); return t }()),
						Content: &armlogic.AgreementContent{
							Edifact: &armlogic.EdifactAgreementContent{
								ReceiveAgreement: &armlogic.EdifactOneWayAgreement{
									ProtocolSettings: &armlogic.EdifactProtocolSettings{
										AcknowledgementSettings: &armlogic.EdifactAcknowledgementSettings{
											AcknowledgementControlNumberLowerBound: to.Ptr[int32](1),
											AcknowledgementControlNumberPrefix:     to.Ptr(""),
											AcknowledgementControlNumberSuffix:     to.Ptr(""),
											AcknowledgementControlNumberUpperBound: to.Ptr[int32](99999999),
											BatchFunctionalAcknowledgements:        to.Ptr(true),
											BatchTechnicalAcknowledgements:         to.Ptr(true),
											NeedFunctionalAcknowledgement:          to.Ptr(false),
											NeedLoopForValidMessages:               to.Ptr(false),
											NeedTechnicalAcknowledgement:           to.Ptr(true),
											RolloverAcknowledgementControlNumber:   to.Ptr(true),
											SendSynchronousAcknowledgement:         to.Ptr(true),
										},
										EnvelopeSettings: &armlogic.EdifactEnvelopeSettings{
											ApplicationReferenceID:                       to.Ptr("0"),
											ApplyDelimiterStringAdvice:                   to.Ptr(true),
											CommunicationAgreementID:                     to.Ptr("0"),
											CreateGroupingSegments:                       to.Ptr(true),
											EnableDefaultGroupHeaders:                    to.Ptr(true),
											FunctionalGroupID:                            to.Ptr("0"),
											GroupApplicationPassword:                     to.Ptr("0"),
											GroupApplicationReceiverID:                   to.Ptr("0"),
											GroupApplicationReceiverQualifier:            to.Ptr("ZZZ"),
											GroupApplicationSenderID:                     to.Ptr("AAA"),
											GroupApplicationSenderQualifier:              to.Ptr("ZZZ"),
											GroupAssociationAssignedCode:                 to.Ptr("0"),
											GroupControlNumberLowerBound:                 to.Ptr[int64](1),
											GroupControlNumberPrefix:                     to.Ptr("CU"),
											GroupControlNumberSuffix:                     to.Ptr("NUM"),
											GroupControlNumberUpperBound:                 to.Ptr[int64](99999999),
											GroupControllingAgencyCode:                   to.Ptr("0"),
											GroupMessageRelease:                          to.Ptr("0.0"),
											GroupMessageVersion:                          to.Ptr("0.0"),
											InterchangeControlNumberLowerBound:           to.Ptr[int64](1),
											InterchangeControlNumberPrefix:               to.Ptr("CU"),
											InterchangeControlNumberSuffix:               to.Ptr("NUM"),
											InterchangeControlNumberUpperBound:           to.Ptr[int64](99999999),
											IsTestInterchange:                            to.Ptr(true),
											OverwriteExistingTransactionSetControlNumber: to.Ptr(true),
											ProcessingPriorityCode:                       to.Ptr("0"),
											ReceiverInternalIdentification:               to.Ptr("0"),
											ReceiverInternalSubIdentification:            to.Ptr("0"),
											RecipientReferencePasswordQualifier:          to.Ptr("ZZ"),
											RecipientReferencePasswordValue:              to.Ptr("AA"),
											RolloverGroupControlNumber:                   to.Ptr(true),
											RolloverInterchangeControlNumber:             to.Ptr(true),
											RolloverTransactionSetControlNumber:          to.Ptr(true),
											SenderInternalIdentification:                 to.Ptr("AA"),
											SenderInternalSubIdentification:              to.Ptr("AA"),
											TransactionSetControlNumberLowerBound:        to.Ptr[int64](1),
											TransactionSetControlNumberPrefix:            to.Ptr(""),
											TransactionSetControlNumberSuffix:            to.Ptr(""),
											TransactionSetControlNumberUpperBound:        to.Ptr[int64](99999999),
										},
										FramingSettings: &armlogic.EdifactFramingSettings{
											CharacterEncoding:       to.Ptr("UTF"),
											CharacterSet:            to.Ptr(armlogic.EdifactCharacterSetUNOC),
											ComponentSeparator:      to.Ptr[int32](58),
											DataElementSeparator:    to.Ptr[int32](53),
											DecimalPointIndicator:   to.Ptr(armlogic.EdifactDecimalIndicatorComma),
											ProtocolVersion:         to.Ptr[int32](4),
											ReleaseIndicator:        to.Ptr[int32](63),
											RepetitionSeparator:     to.Ptr[int32](42),
											SegmentTerminator:       to.Ptr[int32](39),
											SegmentTerminatorSuffix: to.Ptr(armlogic.SegmentTerminatorSuffixNone),
										},
										MessageFilter: &armlogic.EdifactMessageFilter{
											MessageFilterType: to.Ptr(armlogic.MessageFilterTypeExclude),
										},
										ProcessingSettings: &armlogic.EdifactProcessingSettings{
											CreateEmptyXMLTagsForTrailingSeparators: to.Ptr(true),
											MaskSecurityInfo:                        to.Ptr(true),
											PreserveInterchange:                     to.Ptr(true),
											SuspendInterchangeOnError:               to.Ptr(true),
											UseDotAsDecimalSeparator:                to.Ptr(true),
										},
										SchemaReferences: []*armlogic.EdifactSchemaReference{},
										ValidationSettings: &armlogic.EdifactValidationSettings{
											AllowLeadingAndTrailingSpacesAndZeroes:    to.Ptr(true),
											CheckDuplicateGroupControlNumber:          to.Ptr(true),
											CheckDuplicateInterchangeControlNumber:    to.Ptr(true),
											CheckDuplicateTransactionSetControlNumber: to.Ptr(true),
											InterchangeControlNumberValidityDays:      to.Ptr[int32](30),
											TrailingSeparatorPolicy:                   to.Ptr(armlogic.TrailingSeparatorPolicyOptional),
											TrimLeadingAndTrailingSpacesAndZeroes:     to.Ptr(true),
											ValidateCharacterSet:                      to.Ptr(true),
											ValidateEDITypes:                          to.Ptr(true),
											ValidateXSDTypes:                          to.Ptr(true),
										},
									},
									ReceiverBusinessIdentity: &armlogic.BusinessIdentity{
										Qualifier: to.Ptr("ZZ"),
										Value:     to.Ptr("ZZ"),
									},
									SenderBusinessIdentity: &armlogic.BusinessIdentity{
										Qualifier: to.Ptr("AA"),
										Value:     to.Ptr("AA"),
									},
								},
								SendAgreement: &armlogic.EdifactOneWayAgreement{
									ProtocolSettings: &armlogic.EdifactProtocolSettings{
										AcknowledgementSettings: &armlogic.EdifactAcknowledgementSettings{
											AcknowledgementControlNumberLowerBound: to.Ptr[int32](1),
											AcknowledgementControlNumberPrefix:     to.Ptr("CN"),
											AcknowledgementControlNumberSuffix:     to.Ptr("NUM"),
											AcknowledgementControlNumberUpperBound: to.Ptr[int32](999999999),
											BatchFunctionalAcknowledgements:        to.Ptr(true),
											BatchTechnicalAcknowledgements:         to.Ptr(true),
											NeedFunctionalAcknowledgement:          to.Ptr(true),
											NeedLoopForValidMessages:               to.Ptr(true),
											NeedTechnicalAcknowledgement:           to.Ptr(true),
											RolloverAcknowledgementControlNumber:   to.Ptr(true),
											SendSynchronousAcknowledgement:         to.Ptr(true),
										},
										EnvelopeSettings: &armlogic.EdifactEnvelopeSettings{
											ApplicationReferenceID:                       to.Ptr("0"),
											ApplyDelimiterStringAdvice:                   to.Ptr(true),
											CommunicationAgreementID:                     to.Ptr("0"),
											CreateGroupingSegments:                       to.Ptr(true),
											EnableDefaultGroupHeaders:                    to.Ptr(true),
											FunctionalGroupID:                            to.Ptr("0"),
											GroupApplicationPassword:                     to.Ptr("0"),
											GroupApplicationReceiverID:                   to.Ptr("0"),
											GroupApplicationReceiverQualifier:            to.Ptr("ZZ"),
											GroupApplicationSenderID:                     to.Ptr("AA"),
											GroupApplicationSenderQualifier:              to.Ptr("ZZ"),
											GroupAssociationAssignedCode:                 to.Ptr("0"),
											GroupControlNumberLowerBound:                 to.Ptr[int64](1),
											GroupControlNumberPrefix:                     to.Ptr(""),
											GroupControlNumberSuffix:                     to.Ptr(""),
											GroupControlNumberUpperBound:                 to.Ptr[int64](999999999),
											GroupControllingAgencyCode:                   to.Ptr("0"),
											GroupMessageRelease:                          to.Ptr("0.0"),
											GroupMessageVersion:                          to.Ptr("0.0"),
											InterchangeControlNumberLowerBound:           to.Ptr[int64](1),
											InterchangeControlNumberPrefix:               to.Ptr("CU"),
											InterchangeControlNumberSuffix:               to.Ptr("NUM"),
											InterchangeControlNumberUpperBound:           to.Ptr[int64](999999999),
											IsTestInterchange:                            to.Ptr(true),
											OverwriteExistingTransactionSetControlNumber: to.Ptr(true),
											ProcessingPriorityCode:                       to.Ptr("0"),
											ReceiverInternalIdentification:               to.Ptr("0"),
											ReceiverInternalSubIdentification:            to.Ptr("0"),
											RecipientReferencePasswordQualifier:          to.Ptr("ZZ"),
											RecipientReferencePasswordValue:              to.Ptr("AA"),
											RolloverGroupControlNumber:                   to.Ptr(true),
											RolloverInterchangeControlNumber:             to.Ptr(true),
											RolloverTransactionSetControlNumber:          to.Ptr(true),
											SenderInternalIdentification:                 to.Ptr("AA"),
											SenderInternalSubIdentification:              to.Ptr("AA"),
											TransactionSetControlNumberLowerBound:        to.Ptr[int64](1),
											TransactionSetControlNumberPrefix:            to.Ptr(""),
											TransactionSetControlNumberSuffix:            to.Ptr(""),
											TransactionSetControlNumberUpperBound:        to.Ptr[int64](999999999),
										},
										FramingSettings: &armlogic.EdifactFramingSettings{
											CharacterEncoding:       to.Ptr("UTF"),
											CharacterSet:            to.Ptr(armlogic.EdifactCharacterSetUNOC),
											ComponentSeparator:      to.Ptr[int32](58),
											DataElementSeparator:    to.Ptr[int32](53),
											DecimalPointIndicator:   to.Ptr(armlogic.EdifactDecimalIndicatorComma),
											ProtocolVersion:         to.Ptr[int32](4),
											ReleaseIndicator:        to.Ptr[int32](63),
											RepetitionSeparator:     to.Ptr[int32](42),
											SegmentTerminator:       to.Ptr[int32](39),
											SegmentTerminatorSuffix: to.Ptr(armlogic.SegmentTerminatorSuffixNone),
										},
										MessageFilter: &armlogic.EdifactMessageFilter{
											MessageFilterType: to.Ptr(armlogic.MessageFilterTypeExclude),
										},
										ProcessingSettings: &armlogic.EdifactProcessingSettings{
											CreateEmptyXMLTagsForTrailingSeparators: to.Ptr(true),
											MaskSecurityInfo:                        to.Ptr(true),
											PreserveInterchange:                     to.Ptr(true),
											SuspendInterchangeOnError:               to.Ptr(true),
											UseDotAsDecimalSeparator:                to.Ptr(true),
										},
										SchemaReferences: []*armlogic.EdifactSchemaReference{},
										ValidationSettings: &armlogic.EdifactValidationSettings{
											AllowLeadingAndTrailingSpacesAndZeroes:    to.Ptr(true),
											CheckDuplicateGroupControlNumber:          to.Ptr(true),
											CheckDuplicateInterchangeControlNumber:    to.Ptr(true),
											CheckDuplicateTransactionSetControlNumber: to.Ptr(true),
											InterchangeControlNumberValidityDays:      to.Ptr[int32](30),
											TrailingSeparatorPolicy:                   to.Ptr(armlogic.TrailingSeparatorPolicyOptional),
											TrimLeadingAndTrailingSpacesAndZeroes:     to.Ptr(true),
											ValidateCharacterSet:                      to.Ptr(true),
											ValidateEDITypes:                          to.Ptr(true),
											ValidateXSDTypes:                          to.Ptr(true),
										},
									},
									ReceiverBusinessIdentity: &armlogic.BusinessIdentity{
										Qualifier: to.Ptr("ZZ"),
										Value:     to.Ptr("ZZ"),
									},
									SenderBusinessIdentity: &armlogic.BusinessIdentity{
										Qualifier: to.Ptr("AA"),
										Value:     to.Ptr("AA"),
									},
								},
							},
						},
						CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T22:00:53.8205121Z"); return t }()),
						GuestIdentity: &armlogic.BusinessIdentity{
							Qualifier: to.Ptr("AA"),
							Value:     to.Ptr("AA"),
						},
						GuestPartner: to.Ptr("GuestPartner"),
						HostIdentity: &armlogic.BusinessIdentity{
							Qualifier: to.Ptr("ZZ"),
							Value:     to.Ptr("ZZ"),
						},
						HostPartner: to.Ptr("HostPartner"),
						Metadata:    map[string]interface{}{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IntegrationAccountAgreementListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IntegrationAccountAgreementListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAgreements_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountAgreements_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAgreements_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get agreement by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountAgreementsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testAgreement",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAgreements_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccountAgreement{
			Name: to.Ptr("<IntegrationAccountAgreementName>"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/agreements"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/<IntegrationAccountName>/agreements/<IntegrationAccountAgreementName>"),
			Properties: &armlogic.IntegrationAccountAgreementProperties{
				AgreementType: to.Ptr(armlogic.AgreementTypeAS2),
				ChangedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T22:32:54.2945291Z"); return t }()),
				Content: &armlogic.AgreementContent{
					AS2: &armlogic.AS2AgreementContent{
						ReceiveAgreement: &armlogic.AS2OneWayAgreement{
							ProtocolSettings: &armlogic.AS2ProtocolSettings{
								AcknowledgementConnectionSettings: &armlogic.AS2AcknowledgementConnectionSettings{
									IgnoreCertificateNameMismatch: to.Ptr(true),
									KeepHTTPConnectionAlive:       to.Ptr(true),
									SupportHTTPStatusCodeContinue: to.Ptr(true),
									UnfoldHTTPHeaders:             to.Ptr(true),
								},
								EnvelopeSettings: &armlogic.AS2EnvelopeSettings{
									AutogenerateFileName:                    to.Ptr(true),
									FileNameTemplate:                        to.Ptr("Test"),
									MessageContentType:                      to.Ptr("text/plain"),
									SuspendMessageOnFileNameGenerationError: to.Ptr(true),
									TransmitFileNameInMimeHeader:            to.Ptr(true),
								},
								ErrorSettings: &armlogic.AS2ErrorSettings{
									ResendIfMDNNotReceived:  to.Ptr(true),
									SuspendDuplicateMessage: to.Ptr(true),
								},
								MdnSettings: &armlogic.AS2MdnSettings{
									DispositionNotificationTo:  to.Ptr("http://tempuri.org"),
									MdnText:                    to.Ptr("Sample"),
									MicHashingAlgorithm:        to.Ptr(armlogic.HashingAlgorithmSHA1),
									NeedMDN:                    to.Ptr(true),
									ReceiptDeliveryURL:         to.Ptr("http://tempuri.org"),
									SendInboundMDNToMessageBox: to.Ptr(true),
									SendMDNAsynchronously:      to.Ptr(true),
									SignMDN:                    to.Ptr(true),
									SignOutboundMDNIfOptional:  to.Ptr(true),
								},
								MessageConnectionSettings: &armlogic.AS2MessageConnectionSettings{
									IgnoreCertificateNameMismatch: to.Ptr(true),
									KeepHTTPConnectionAlive:       to.Ptr(true),
									SupportHTTPStatusCodeContinue: to.Ptr(true),
									UnfoldHTTPHeaders:             to.Ptr(true),
								},
								SecuritySettings: &armlogic.AS2SecuritySettings{
									EnableNRRForInboundDecodedMessages:  to.Ptr(true),
									EnableNRRForInboundEncodedMessages:  to.Ptr(true),
									EnableNRRForInboundMDN:              to.Ptr(true),
									EnableNRRForOutboundDecodedMessages: to.Ptr(true),
									EnableNRRForOutboundEncodedMessages: to.Ptr(true),
									EnableNRRForOutboundMDN:             to.Ptr(true),
									OverrideGroupSigningCertificate:     to.Ptr(false),
								},
								ValidationSettings: &armlogic.AS2ValidationSettings{
									CheckCertificateRevocationListOnReceive: to.Ptr(true),
									CheckCertificateRevocationListOnSend:    to.Ptr(true),
									CheckDuplicateMessage:                   to.Ptr(true),
									CompressMessage:                         to.Ptr(true),
									EncryptMessage:                          to.Ptr(false),
									EncryptionAlgorithm:                     to.Ptr(armlogic.EncryptionAlgorithmAES128),
									InterchangeDuplicatesValidityDays:       to.Ptr[int32](100),
									OverrideMessageProperties:               to.Ptr(true),
									SignMessage:                             to.Ptr(false),
								},
							},
							ReceiverBusinessIdentity: &armlogic.BusinessIdentity{
								Qualifier: to.Ptr("ZZ"),
								Value:     to.Ptr("ZZ"),
							},
							SenderBusinessIdentity: &armlogic.BusinessIdentity{
								Qualifier: to.Ptr("AA"),
								Value:     to.Ptr("AA"),
							},
						},
						SendAgreement: &armlogic.AS2OneWayAgreement{
							ProtocolSettings: &armlogic.AS2ProtocolSettings{
								AcknowledgementConnectionSettings: &armlogic.AS2AcknowledgementConnectionSettings{
									IgnoreCertificateNameMismatch: to.Ptr(true),
									KeepHTTPConnectionAlive:       to.Ptr(true),
									SupportHTTPStatusCodeContinue: to.Ptr(true),
									UnfoldHTTPHeaders:             to.Ptr(true),
								},
								EnvelopeSettings: &armlogic.AS2EnvelopeSettings{
									AutogenerateFileName:                    to.Ptr(true),
									FileNameTemplate:                        to.Ptr("Test"),
									MessageContentType:                      to.Ptr("text/plain"),
									SuspendMessageOnFileNameGenerationError: to.Ptr(true),
									TransmitFileNameInMimeHeader:            to.Ptr(true),
								},
								ErrorSettings: &armlogic.AS2ErrorSettings{
									ResendIfMDNNotReceived:  to.Ptr(true),
									SuspendDuplicateMessage: to.Ptr(true),
								},
								MdnSettings: &armlogic.AS2MdnSettings{
									DispositionNotificationTo:  to.Ptr("http://tempuri.org"),
									MdnText:                    to.Ptr("Sample"),
									MicHashingAlgorithm:        to.Ptr(armlogic.HashingAlgorithmSHA1),
									NeedMDN:                    to.Ptr(true),
									ReceiptDeliveryURL:         to.Ptr("http://tempuri.org"),
									SendInboundMDNToMessageBox: to.Ptr(true),
									SendMDNAsynchronously:      to.Ptr(true),
									SignMDN:                    to.Ptr(true),
									SignOutboundMDNIfOptional:  to.Ptr(true),
								},
								MessageConnectionSettings: &armlogic.AS2MessageConnectionSettings{
									IgnoreCertificateNameMismatch: to.Ptr(true),
									KeepHTTPConnectionAlive:       to.Ptr(true),
									SupportHTTPStatusCodeContinue: to.Ptr(true),
									UnfoldHTTPHeaders:             to.Ptr(true),
								},
								SecuritySettings: &armlogic.AS2SecuritySettings{
									EnableNRRForInboundDecodedMessages:  to.Ptr(true),
									EnableNRRForInboundEncodedMessages:  to.Ptr(true),
									EnableNRRForInboundMDN:              to.Ptr(true),
									EnableNRRForOutboundDecodedMessages: to.Ptr(true),
									EnableNRRForOutboundEncodedMessages: to.Ptr(true),
									EnableNRRForOutboundMDN:             to.Ptr(true),
									OverrideGroupSigningCertificate:     to.Ptr(false),
								},
								ValidationSettings: &armlogic.AS2ValidationSettings{
									CheckCertificateRevocationListOnReceive: to.Ptr(true),
									CheckCertificateRevocationListOnSend:    to.Ptr(true),
									CheckDuplicateMessage:                   to.Ptr(true),
									CompressMessage:                         to.Ptr(true),
									EncryptMessage:                          to.Ptr(false),
									EncryptionAlgorithm:                     to.Ptr(armlogic.EncryptionAlgorithmAES128),
									InterchangeDuplicatesValidityDays:       to.Ptr[int32](100),
									OverrideMessageProperties:               to.Ptr(true),
									SignMessage:                             to.Ptr(false),
								},
							},
							ReceiverBusinessIdentity: &armlogic.BusinessIdentity{
								Qualifier: to.Ptr("AA"),
								Value:     to.Ptr("AA"),
							},
							SenderBusinessIdentity: &armlogic.BusinessIdentity{
								Qualifier: to.Ptr("ZZ"),
								Value:     to.Ptr("ZZ"),
							},
						},
					},
				},
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T22:32:54.2938748Z"); return t }()),
				GuestIdentity: &armlogic.BusinessIdentity{
					Qualifier: to.Ptr("AA"),
					Value:     to.Ptr("AA"),
				},
				GuestPartner: to.Ptr("GuestPartner"),
				HostIdentity: &armlogic.BusinessIdentity{
					Qualifier: to.Ptr("ZZ"),
					Value:     to.Ptr("ZZ"),
				},
				HostPartner: to.Ptr("HostPartner"),
				Metadata:    map[string]interface{}{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccountAgreement) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccountAgreement)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAgreements_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountAgreements_CreateOrUpdate(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAgreements_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an agreement"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountAgreementsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testAgreement",
		armlogic.IntegrationAccountAgreement{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"IntegrationAccountAgreement": to.Ptr("<IntegrationAccountAgreementName>"),
			},
			Properties: &armlogic.IntegrationAccountAgreementProperties{
				AgreementType: to.Ptr(armlogic.AgreementTypeAS2),
				Content: &armlogic.AgreementContent{
					AS2: &armlogic.AS2AgreementContent{
						ReceiveAgreement: &armlogic.AS2OneWayAgreement{
							ProtocolSettings: &armlogic.AS2ProtocolSettings{
								AcknowledgementConnectionSettings: &armlogic.AS2AcknowledgementConnectionSettings{
									IgnoreCertificateNameMismatch: to.Ptr(true),
									KeepHTTPConnectionAlive:       to.Ptr(true),
									SupportHTTPStatusCodeContinue: to.Ptr(true),
									UnfoldHTTPHeaders:             to.Ptr(true),
								},
								EnvelopeSettings: &armlogic.AS2EnvelopeSettings{
									AutogenerateFileName:                    to.Ptr(true),
									FileNameTemplate:                        to.Ptr("Test"),
									MessageContentType:                      to.Ptr("text/plain"),
									SuspendMessageOnFileNameGenerationError: to.Ptr(true),
									TransmitFileNameInMimeHeader:            to.Ptr(true),
								},
								ErrorSettings: &armlogic.AS2ErrorSettings{
									ResendIfMDNNotReceived:  to.Ptr(true),
									SuspendDuplicateMessage: to.Ptr(true),
								},
								MdnSettings: &armlogic.AS2MdnSettings{
									DispositionNotificationTo:  to.Ptr("http://tempuri.org"),
									MdnText:                    to.Ptr("Sample"),
									MicHashingAlgorithm:        to.Ptr(armlogic.HashingAlgorithmSHA1),
									NeedMDN:                    to.Ptr(true),
									ReceiptDeliveryURL:         to.Ptr("http://tempuri.org"),
									SendInboundMDNToMessageBox: to.Ptr(true),
									SendMDNAsynchronously:      to.Ptr(true),
									SignMDN:                    to.Ptr(true),
									SignOutboundMDNIfOptional:  to.Ptr(true),
								},
								MessageConnectionSettings: &armlogic.AS2MessageConnectionSettings{
									IgnoreCertificateNameMismatch: to.Ptr(true),
									KeepHTTPConnectionAlive:       to.Ptr(true),
									SupportHTTPStatusCodeContinue: to.Ptr(true),
									UnfoldHTTPHeaders:             to.Ptr(true),
								},
								SecuritySettings: &armlogic.AS2SecuritySettings{
									EnableNRRForInboundDecodedMessages:  to.Ptr(true),
									EnableNRRForInboundEncodedMessages:  to.Ptr(true),
									EnableNRRForInboundMDN:              to.Ptr(true),
									EnableNRRForOutboundDecodedMessages: to.Ptr(true),
									EnableNRRForOutboundEncodedMessages: to.Ptr(true),
									EnableNRRForOutboundMDN:             to.Ptr(true),
									OverrideGroupSigningCertificate:     to.Ptr(false),
								},
								ValidationSettings: &armlogic.AS2ValidationSettings{
									CheckCertificateRevocationListOnReceive: to.Ptr(true),
									CheckCertificateRevocationListOnSend:    to.Ptr(true),
									CheckDuplicateMessage:                   to.Ptr(true),
									CompressMessage:                         to.Ptr(true),
									EncryptMessage:                          to.Ptr(false),
									EncryptionAlgorithm:                     to.Ptr(armlogic.EncryptionAlgorithmAES128),
									InterchangeDuplicatesValidityDays:       to.Ptr[int32](100),
									OverrideMessageProperties:               to.Ptr(true),
									SignMessage:                             to.Ptr(false),
								},
							},
							ReceiverBusinessIdentity: &armlogic.BusinessIdentity{
								Qualifier: to.Ptr("ZZ"),
								Value:     to.Ptr("ZZ"),
							},
							SenderBusinessIdentity: &armlogic.BusinessIdentity{
								Qualifier: to.Ptr("AA"),
								Value:     to.Ptr("AA"),
							},
						},
						SendAgreement: &armlogic.AS2OneWayAgreement{
							ProtocolSettings: &armlogic.AS2ProtocolSettings{
								AcknowledgementConnectionSettings: &armlogic.AS2AcknowledgementConnectionSettings{
									IgnoreCertificateNameMismatch: to.Ptr(true),
									KeepHTTPConnectionAlive:       to.Ptr(true),
									SupportHTTPStatusCodeContinue: to.Ptr(true),
									UnfoldHTTPHeaders:             to.Ptr(true),
								},
								EnvelopeSettings: &armlogic.AS2EnvelopeSettings{
									AutogenerateFileName:                    to.Ptr(true),
									FileNameTemplate:                        to.Ptr("Test"),
									MessageContentType:                      to.Ptr("text/plain"),
									SuspendMessageOnFileNameGenerationError: to.Ptr(true),
									TransmitFileNameInMimeHeader:            to.Ptr(true),
								},
								ErrorSettings: &armlogic.AS2ErrorSettings{
									ResendIfMDNNotReceived:  to.Ptr(true),
									SuspendDuplicateMessage: to.Ptr(true),
								},
								MdnSettings: &armlogic.AS2MdnSettings{
									DispositionNotificationTo:  to.Ptr("http://tempuri.org"),
									MdnText:                    to.Ptr("Sample"),
									MicHashingAlgorithm:        to.Ptr(armlogic.HashingAlgorithmSHA1),
									NeedMDN:                    to.Ptr(true),
									ReceiptDeliveryURL:         to.Ptr("http://tempuri.org"),
									SendInboundMDNToMessageBox: to.Ptr(true),
									SendMDNAsynchronously:      to.Ptr(true),
									SignMDN:                    to.Ptr(true),
									SignOutboundMDNIfOptional:  to.Ptr(true),
								},
								MessageConnectionSettings: &armlogic.AS2MessageConnectionSettings{
									IgnoreCertificateNameMismatch: to.Ptr(true),
									KeepHTTPConnectionAlive:       to.Ptr(true),
									SupportHTTPStatusCodeContinue: to.Ptr(true),
									UnfoldHTTPHeaders:             to.Ptr(true),
								},
								SecuritySettings: &armlogic.AS2SecuritySettings{
									EnableNRRForInboundDecodedMessages:  to.Ptr(true),
									EnableNRRForInboundEncodedMessages:  to.Ptr(true),
									EnableNRRForInboundMDN:              to.Ptr(true),
									EnableNRRForOutboundDecodedMessages: to.Ptr(true),
									EnableNRRForOutboundEncodedMessages: to.Ptr(true),
									EnableNRRForOutboundMDN:             to.Ptr(true),
									OverrideGroupSigningCertificate:     to.Ptr(false),
								},
								ValidationSettings: &armlogic.AS2ValidationSettings{
									CheckCertificateRevocationListOnReceive: to.Ptr(true),
									CheckCertificateRevocationListOnSend:    to.Ptr(true),
									CheckDuplicateMessage:                   to.Ptr(true),
									CompressMessage:                         to.Ptr(true),
									EncryptMessage:                          to.Ptr(false),
									EncryptionAlgorithm:                     to.Ptr(armlogic.EncryptionAlgorithmAES128),
									InterchangeDuplicatesValidityDays:       to.Ptr[int32](100),
									OverrideMessageProperties:               to.Ptr(true),
									SignMessage:                             to.Ptr(false),
								},
							},
							ReceiverBusinessIdentity: &armlogic.BusinessIdentity{
								Qualifier: to.Ptr("AA"),
								Value:     to.Ptr("AA"),
							},
							SenderBusinessIdentity: &armlogic.BusinessIdentity{
								Qualifier: to.Ptr("ZZ"),
								Value:     to.Ptr("ZZ"),
							},
						},
					},
				},
				GuestIdentity: &armlogic.BusinessIdentity{
					Qualifier: to.Ptr("AA"),
					Value:     to.Ptr("AA"),
				},
				GuestPartner: to.Ptr("GuestPartner"),
				HostIdentity: &armlogic.BusinessIdentity{
					Qualifier: to.Ptr("ZZ"),
					Value:     to.Ptr("ZZ"),
				},
				HostPartner: to.Ptr("HostPartner"),
				Metadata:    map[string]interface{}{},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAgreements_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccountAgreement{
			Name: to.Ptr("<IntegrationAccountAgreementName>"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/agreements"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/IntegrationAccount4533/agreements/<IntegrationAccountAgreementName>"),
			Properties: &armlogic.IntegrationAccountAgreementProperties{
				AgreementType: to.Ptr(armlogic.AgreementTypeAS2),
				ChangedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T22:32:54.2945291Z"); return t }()),
				Content: &armlogic.AgreementContent{
					AS2: &armlogic.AS2AgreementContent{
						ReceiveAgreement: &armlogic.AS2OneWayAgreement{
							ProtocolSettings: &armlogic.AS2ProtocolSettings{
								AcknowledgementConnectionSettings: &armlogic.AS2AcknowledgementConnectionSettings{
									IgnoreCertificateNameMismatch: to.Ptr(true),
									KeepHTTPConnectionAlive:       to.Ptr(true),
									SupportHTTPStatusCodeContinue: to.Ptr(true),
									UnfoldHTTPHeaders:             to.Ptr(true),
								},
								EnvelopeSettings: &armlogic.AS2EnvelopeSettings{
									AutogenerateFileName:                    to.Ptr(true),
									FileNameTemplate:                        to.Ptr("Test"),
									MessageContentType:                      to.Ptr("text/plain"),
									SuspendMessageOnFileNameGenerationError: to.Ptr(true),
									TransmitFileNameInMimeHeader:            to.Ptr(true),
								},
								ErrorSettings: &armlogic.AS2ErrorSettings{
									ResendIfMDNNotReceived:  to.Ptr(true),
									SuspendDuplicateMessage: to.Ptr(true),
								},
								MdnSettings: &armlogic.AS2MdnSettings{
									DispositionNotificationTo:  to.Ptr("http://tempuri.org"),
									MdnText:                    to.Ptr("Sample"),
									MicHashingAlgorithm:        to.Ptr(armlogic.HashingAlgorithmSHA1),
									NeedMDN:                    to.Ptr(true),
									ReceiptDeliveryURL:         to.Ptr("http://tempuri.org"),
									SendInboundMDNToMessageBox: to.Ptr(true),
									SendMDNAsynchronously:      to.Ptr(true),
									SignMDN:                    to.Ptr(true),
									SignOutboundMDNIfOptional:  to.Ptr(true),
								},
								MessageConnectionSettings: &armlogic.AS2MessageConnectionSettings{
									IgnoreCertificateNameMismatch: to.Ptr(true),
									KeepHTTPConnectionAlive:       to.Ptr(true),
									SupportHTTPStatusCodeContinue: to.Ptr(true),
									UnfoldHTTPHeaders:             to.Ptr(true),
								},
								SecuritySettings: &armlogic.AS2SecuritySettings{
									EnableNRRForInboundDecodedMessages:  to.Ptr(true),
									EnableNRRForInboundEncodedMessages:  to.Ptr(true),
									EnableNRRForInboundMDN:              to.Ptr(true),
									EnableNRRForOutboundDecodedMessages: to.Ptr(true),
									EnableNRRForOutboundEncodedMessages: to.Ptr(true),
									EnableNRRForOutboundMDN:             to.Ptr(true),
									OverrideGroupSigningCertificate:     to.Ptr(false),
								},
								ValidationSettings: &armlogic.AS2ValidationSettings{
									CheckCertificateRevocationListOnReceive: to.Ptr(true),
									CheckCertificateRevocationListOnSend:    to.Ptr(true),
									CheckDuplicateMessage:                   to.Ptr(true),
									CompressMessage:                         to.Ptr(true),
									EncryptMessage:                          to.Ptr(false),
									EncryptionAlgorithm:                     to.Ptr(armlogic.EncryptionAlgorithmAES128),
									InterchangeDuplicatesValidityDays:       to.Ptr[int32](100),
									OverrideMessageProperties:               to.Ptr(true),
									SignMessage:                             to.Ptr(false),
								},
							},
							ReceiverBusinessIdentity: &armlogic.BusinessIdentity{
								Qualifier: to.Ptr("ZZ"),
								Value:     to.Ptr("ZZ"),
							},
							SenderBusinessIdentity: &armlogic.BusinessIdentity{
								Qualifier: to.Ptr("AA"),
								Value:     to.Ptr("AA"),
							},
						},
						SendAgreement: &armlogic.AS2OneWayAgreement{
							ProtocolSettings: &armlogic.AS2ProtocolSettings{
								AcknowledgementConnectionSettings: &armlogic.AS2AcknowledgementConnectionSettings{
									IgnoreCertificateNameMismatch: to.Ptr(true),
									KeepHTTPConnectionAlive:       to.Ptr(true),
									SupportHTTPStatusCodeContinue: to.Ptr(true),
									UnfoldHTTPHeaders:             to.Ptr(true),
								},
								EnvelopeSettings: &armlogic.AS2EnvelopeSettings{
									AutogenerateFileName:                    to.Ptr(true),
									FileNameTemplate:                        to.Ptr("Test"),
									MessageContentType:                      to.Ptr("text/plain"),
									SuspendMessageOnFileNameGenerationError: to.Ptr(true),
									TransmitFileNameInMimeHeader:            to.Ptr(true),
								},
								ErrorSettings: &armlogic.AS2ErrorSettings{
									ResendIfMDNNotReceived:  to.Ptr(true),
									SuspendDuplicateMessage: to.Ptr(true),
								},
								MdnSettings: &armlogic.AS2MdnSettings{
									DispositionNotificationTo:  to.Ptr("http://tempuri.org"),
									MdnText:                    to.Ptr("Sample"),
									MicHashingAlgorithm:        to.Ptr(armlogic.HashingAlgorithmSHA1),
									NeedMDN:                    to.Ptr(true),
									ReceiptDeliveryURL:         to.Ptr("http://tempuri.org"),
									SendInboundMDNToMessageBox: to.Ptr(true),
									SendMDNAsynchronously:      to.Ptr(true),
									SignMDN:                    to.Ptr(true),
									SignOutboundMDNIfOptional:  to.Ptr(true),
								},
								MessageConnectionSettings: &armlogic.AS2MessageConnectionSettings{
									IgnoreCertificateNameMismatch: to.Ptr(true),
									KeepHTTPConnectionAlive:       to.Ptr(true),
									SupportHTTPStatusCodeContinue: to.Ptr(true),
									UnfoldHTTPHeaders:             to.Ptr(true),
								},
								SecuritySettings: &armlogic.AS2SecuritySettings{
									EnableNRRForInboundDecodedMessages:  to.Ptr(true),
									EnableNRRForInboundEncodedMessages:  to.Ptr(true),
									EnableNRRForInboundMDN:              to.Ptr(true),
									EnableNRRForOutboundDecodedMessages: to.Ptr(true),
									EnableNRRForOutboundEncodedMessages: to.Ptr(true),
									EnableNRRForOutboundMDN:             to.Ptr(true),
									OverrideGroupSigningCertificate:     to.Ptr(false),
								},
								ValidationSettings: &armlogic.AS2ValidationSettings{
									CheckCertificateRevocationListOnReceive: to.Ptr(true),
									CheckCertificateRevocationListOnSend:    to.Ptr(true),
									CheckDuplicateMessage:                   to.Ptr(true),
									CompressMessage:                         to.Ptr(true),
									EncryptMessage:                          to.Ptr(false),
									EncryptionAlgorithm:                     to.Ptr(armlogic.EncryptionAlgorithmAES128),
									InterchangeDuplicatesValidityDays:       to.Ptr[int32](100),
									OverrideMessageProperties:               to.Ptr(true),
									SignMessage:                             to.Ptr(false),
								},
							},
							ReceiverBusinessIdentity: &armlogic.BusinessIdentity{
								Qualifier: to.Ptr("AA"),
								Value:     to.Ptr("AA"),
							},
							SenderBusinessIdentity: &armlogic.BusinessIdentity{
								Qualifier: to.Ptr("ZZ"),
								Value:     to.Ptr("ZZ"),
							},
						},
					},
				},
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T22:32:54.2938748Z"); return t }()),
				GuestIdentity: &armlogic.BusinessIdentity{
					Qualifier: to.Ptr("AA"),
					Value:     to.Ptr("AA"),
				},
				GuestPartner: to.Ptr("GuestPartner"),
				HostIdentity: &armlogic.BusinessIdentity{
					Qualifier: to.Ptr("ZZ"),
					Value:     to.Ptr("ZZ"),
				},
				HostPartner: to.Ptr("HostPartner"),
				Metadata:    map[string]interface{}{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccountAgreement) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccountAgreement)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAgreements_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountAgreements_Delete(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAgreements_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an agreement"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountAgreementsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testAgreement",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountAgreements_Delete.json: %v", err)
	}
}

func TestIntegrationAccountCertificates_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountCertificates_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get certificates by integration account name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountCertificatesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("testResourceGroup",
		"testIntegrationAccount",
		&armlogic.IntegrationAccountCertificatesClientListOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountCertificates_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.IntegrationAccountCertificateListResult{
			Value: []*armlogic.IntegrationAccountCertificate{
				{
					Name: to.Ptr("<IntegrationAccountCertificateName>"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts/certificates"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/certificates/<integrationAccountCertificateName>"),
					Properties: &armlogic.IntegrationAccountCertificateProperties{
						ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T20:33:09.7032076Z"); return t }()),
						CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T20:33:09.7022471Z"); return t }()),
						Key: &armlogic.KeyVaultKeyReference{
							KeyName: to.Ptr("<keyName>"),
							KeyVault: &armlogic.KeyVaultKeyReferenceKeyVault{
								Name: to.Ptr("AzureSdkTestKeyVault"),
								Type: to.Ptr("Microsoft.KeyVault/vaults"),
								ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testResourceGroup/providers/microsoft.keyvault/vaults/<keyVaultName>"),
							},
							KeyVersion: to.Ptr("87d9764197604449b9b8eb7bd8710868"),
						},
						PublicCertificate: to.Ptr("<publicCertificate>"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IntegrationAccountCertificateListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IntegrationAccountCertificateListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountCertificates_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountCertificates_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountCertificates_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get certificate by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountCertificatesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testCertificate",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountCertificates_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccountCertificate{
			Name: to.Ptr("testCertificate"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/certificates"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/IntegrationAccount9472/certificates/testCertificate"),
			Properties: &armlogic.IntegrationAccountCertificateProperties{
				ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T20:42:21.051317Z"); return t }()),
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T20:42:21.0510202Z"); return t }()),
				Key: &armlogic.KeyVaultKeyReference{
					KeyName: to.Ptr("<keyName>"),
					KeyVault: &armlogic.KeyVaultKeyReferenceKeyVault{
						Name: to.Ptr("<keyVaultName>"),
						Type: to.Ptr("Microsoft.KeyVault/vaults"),
						ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testResourceGroup/providers/microsoft.keyvault/vaults/<keyVaultName>"),
					},
					KeyVersion: to.Ptr("87d9764197604449b9b8eb7bd8710868"),
				},
				PublicCertificate: to.Ptr("<publicCertificate>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccountCertificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccountCertificate)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountCertificates_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountCertificates_CreateOrUpdate(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountCertificates_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a certificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountCertificatesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testCertificate",
		armlogic.IntegrationAccountCertificate{
			Location: to.Ptr("brazilsouth"),
			Properties: &armlogic.IntegrationAccountCertificateProperties{
				Key: &armlogic.KeyVaultKeyReference{
					KeyName: to.Ptr("<keyName>"),
					KeyVault: &armlogic.KeyVaultKeyReferenceKeyVault{
						ID: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testResourceGroup/providers/microsoft.keyvault/vaults/<keyVaultName>"),
					},
					KeyVersion: to.Ptr("87d9764197604449b9b8eb7bd8710868"),
				},
				PublicCertificate: to.Ptr("<publicCertificateValue>"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountCertificates_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccountCertificate{
			Name: to.Ptr("testCertificate"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/certificates"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/certificates/testCertificate"),
			Properties: &armlogic.IntegrationAccountCertificateProperties{
				ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T20:42:21.051317Z"); return t }()),
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-06T20:42:21.0510202Z"); return t }()),
				Key: &armlogic.KeyVaultKeyReference{
					KeyName: to.Ptr("<keyName>"),
					KeyVault: &armlogic.KeyVaultKeyReferenceKeyVault{
						Name: to.Ptr("<keyVaultName>"),
						Type: to.Ptr("Microsoft.KeyVault/vaults"),
						ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourcegroups/flowrg/providers/microsoft.keyvault/vaults/<keyVaultName>"),
					},
					KeyVersion: to.Ptr("87d9764197604449b9b8eb7bd8710868"),
				},
				PublicCertificate: to.Ptr("<publicCertificateValue>"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccountCertificate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccountCertificate)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountCertificates_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountCertificates_Delete(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountCertificates_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a certificate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountCertificatesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testCertificate",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountCertificates_Delete.json: %v", err)
	}
}

func TestIntegrationAccountSessions_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSessions_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of integration account sessions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountSessionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("testrg123",
		"testia123",
		&armlogic.IntegrationAccountSessionsClientListOptions{Top: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSessions_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.IntegrationAccountSessionListResult{
			Value: []*armlogic.IntegrationAccountSession{
				{
					Name: to.Ptr("IntegrationAccountSession1662"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts/sessions"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Logic/integrationAccounts/testia123/sessions/IntegrationAccountSession1662"),
					Properties: &armlogic.IntegrationAccountSessionProperties{
						ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-21T23:06:24.0158575Z"); return t }()),
						Content: map[string]interface{}{
							"controlNumber":            "1234",
							"controlNumberChangedTime": "2017-02-21T22:30:11.9923759Z",
						},
						CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-21T23:06:24.0152955Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("IntegrationAccountSession6808"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts/sessions"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Logic/integrationAccounts/testia123/sessions/IntegrationAccountSession6808"),
					Properties: &armlogic.IntegrationAccountSessionProperties{
						ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-21T23:06:23.7540113Z"); return t }()),
						Content: map[string]interface{}{
							"controlNumber":            "1234",
							"controlNumberChangedTime": "2017-02-21T22:30:11.9923759Z",
						},
						CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-21T23:06:23.7535558Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("IntegrationAccountSession7315"),
					Type: to.Ptr("Microsoft.Logic/integrationAccounts/sessions"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Logic/integrationAccounts/testia123/sessions/IntegrationAccountSession7315"),
					Properties: &armlogic.IntegrationAccountSessionProperties{
						ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-21T23:06:23.8370161Z"); return t }()),
						Content: map[string]interface{}{
							"controlNumber":            "1234",
							"controlNumberChangedTime": "2017-02-21T22:30:11.9923759Z",
						},
						CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-21T23:06:23.8367926Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IntegrationAccountSessionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IntegrationAccountSessionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSessions_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountSessions_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSessions_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an integration account session"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountSessionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"testrg123",
		"testia123",
		"testsession123-ICN",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSessions_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccountSession{
			Name: to.Ptr("testsession123-ICN"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/sessions"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Logic/integrationAccounts/testia123/sessions/testsession123-ICN"),
			Properties: &armlogic.IntegrationAccountSessionProperties{
				ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-21T20:41:35.9796534Z"); return t }()),
				Content: map[string]interface{}{
					"controlNumber":            "1234",
					"controlNumberChangedTime": "2017-02-21T22:30:11.9923759Z",
				},
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-21T20:41:35.9789189Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccountSession) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccountSession)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSessions_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountSessions_CreateOrUpdate(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSessions_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an integration account session"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountSessionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testrg123",
		"testia123",
		"testsession123-ICN",
		armlogic.IntegrationAccountSession{
			Properties: &armlogic.IntegrationAccountSessionProperties{
				Content: map[string]interface{}{
					"controlNumber":            "1234",
					"controlNumberChangedTime": "2017-02-21T22:30:11.9923759Z",
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSessions_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationAccountSession{
			Name: to.Ptr("testsession123-ICN"),
			Type: to.Ptr("Microsoft.Logic/integrationAccounts/sessions"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Logic/integrationAccounts/testia123/sessions/testsession123-ICN"),
			Properties: &armlogic.IntegrationAccountSessionProperties{
				ChangedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-21T20:41:35.9796534Z"); return t }()),
				Content: map[string]interface{}{
					"controlNumber":            "1234",
					"controlNumberChangedTime": "2017-02-21T22:30:11.9923759Z",
				},
				CreatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-21T20:41:35.9789189Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationAccountSession) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationAccountSession)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSessions_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationAccountSessions_Delete(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSessions_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an integration account session"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationAccountSessionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"testrg123",
		"testia123",
		"testsession123-ICN",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationAccountSessions_Delete.json: %v", err)
	}
}

func TestIntegrationServiceEnvironments_ListBySubscription(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List integration service environments by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationServiceEnvironmentsClient("f34b22a3-2202-4fb1-b040-1332bd928c84", cred, &options)
	pager := client.ListBySubscription(&armlogic.IntegrationServiceEnvironmentsClientListBySubscriptionOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.IntegrationServiceEnvironmentListResult{
			Value: []*armlogic.IntegrationServiceEnvironment{
				{
					Name:     to.Ptr("ISE-ILB-NU"),
					Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
					ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/ISE-ILB-NU"),
					Location: to.Ptr("northeurope"),
					Properties: &armlogic.IntegrationServiceEnvironmentProperties{
						EncryptionConfiguration: &armlogic.IntegrationServiceEnvironmenEncryptionConfiguration{
							EncryptionKeyReference: &armlogic.IntegrationServiceEnvironmenEncryptionKeyReference{
								KeyName: to.Ptr("testKeyName"),
								KeyVault: &armlogic.ResourceReference{
									ID: to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.KeyVault/vaults/testKeyVault"),
								},
								KeyVersion: to.Ptr("13b261d30b984753869902d7f47f4d55"),
							},
						},
						EndpointsConfiguration: &armlogic.FlowEndpointsConfiguration{
							Connector: &armlogic.FlowEndpoints{
								OutgoingIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("40.127.188.117"),
									},
									{
										Address: to.Ptr("40.85.114.29"),
									},
									{
										Address: to.Ptr("10.43.2.0/24"),
									},
									{
										Address: to.Ptr("10.43.3.0/24"),
									}},
							},
							Workflow: &armlogic.FlowEndpoints{
								AccessEndpointIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("10.43.1.6"),
									}},
								OutgoingIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("40.69.195.162"),
									},
									{
										Address: to.Ptr("10.43.1.0/24"),
									}},
							},
						},
						IntegrationServiceEnvironmentID: to.Ptr("13b261d30b984753869902d7f47f4d55"),
						NetworkConfiguration: &armlogic.NetworkConfiguration{
							AccessEndpoint: &armlogic.IntegrationServiceEnvironmentAccessEndpoint{
								Type: to.Ptr(armlogic.IntegrationServiceEnvironmentAccessEndpointTypeInternal),
							},
							Subnets: []*armlogic.ResourceReference{
								{
									Name: to.Ptr("VNET-ILB-NorthEurope/s1"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s1"),
								},
								{
									Name: to.Ptr("VNET-ILB-NorthEurope/s2"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s2"),
								},
								{
									Name: to.Ptr("VNET-ILB-NorthEurope/s3"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s3"),
								},
								{
									Name: to.Ptr("VNET-ILB-NorthEurope/s4"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s4"),
								}},
						},
						ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
						State:             to.Ptr(armlogic.WorkflowStateEnabled),
					},
					SKU: &armlogic.IntegrationServiceEnvironmentSKU{
						Name:     to.Ptr(armlogic.IntegrationServiceEnvironmentSKUNameDeveloper),
						Capacity: to.Ptr[int32](0),
					},
				},
				{
					Name:     to.Ptr("TestISE-WCentralUS"),
					Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
					ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/TestISE-WCentralUS"),
					Location: to.Ptr("westcentralus"),
					Properties: &armlogic.IntegrationServiceEnvironmentProperties{
						EncryptionConfiguration: &armlogic.IntegrationServiceEnvironmenEncryptionConfiguration{
							EncryptionKeyReference: &armlogic.IntegrationServiceEnvironmenEncryptionKeyReference{
								KeyName: to.Ptr("testKeyName"),
								KeyVault: &armlogic.ResourceReference{
									ID: to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.KeyVault/vaults/testKeyVault"),
								},
								KeyVersion: to.Ptr("13b261d30b984753869902d7f47f4d55"),
							},
						},
						EndpointsConfiguration: &armlogic.FlowEndpointsConfiguration{
							Connector: &armlogic.FlowEndpoints{
								OutgoingIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("13.77.201.181"),
									},
									{
										Address: to.Ptr("13.77.203.57"),
									},
									{
										Address: to.Ptr("10.37.4.0/24"),
									},
									{
										Address: to.Ptr("10.37.3.0/24"),
									}},
							},
							Workflow: &armlogic.FlowEndpoints{
								AccessEndpointIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("13.77.204.22"),
									}},
								OutgoingIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("52.161.103.0"),
									},
									{
										Address: to.Ptr("10.37.1.0/24"),
									}},
							},
						},
						IntegrationServiceEnvironmentID: to.Ptr("dd470721b5b14148b9bf5b4d1ff27407"),
						NetworkConfiguration: &armlogic.NetworkConfiguration{
							AccessEndpoint: &armlogic.IntegrationServiceEnvironmentAccessEndpoint{
								Type: to.Ptr(armlogic.IntegrationServiceEnvironmentAccessEndpointTypeExternal),
							},
							Subnets: []*armlogic.ResourceReference{
								{
									Name: to.Ptr("VNET-wCUS/s4"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-wCUS/subnets/s4"),
								},
								{
									Name: to.Ptr("VNET-wCUS/s3"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-wCUS/subnets/s3"),
								},
								{
									Name: to.Ptr("VNET-wCUS/s2"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-wCUS/subnets/s2"),
								},
								{
									Name: to.Ptr("VNET-wCUS/s1"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-wCUS/subnets/s1"),
								}},
						},
						ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
						State:             to.Ptr(armlogic.WorkflowStateEnabled),
					},
					SKU: &armlogic.IntegrationServiceEnvironmentSKU{
						Name:     to.Ptr(armlogic.IntegrationServiceEnvironmentSKUNamePremium),
						Capacity: to.Ptr[int32](1),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IntegrationServiceEnvironmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IntegrationServiceEnvironmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationServiceEnvironments_ListByResourceGroup(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List integration service environments by resource group name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationServiceEnvironmentsClient("f34b22a3-2202-4fb1-b040-1332bd928c84", cred, &options)
	pager := client.ListByResourceGroup("testResourceGroup",
		&armlogic.IntegrationServiceEnvironmentsClientListByResourceGroupOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.IntegrationServiceEnvironmentListResult{
			Value: []*armlogic.IntegrationServiceEnvironment{
				{
					Name:     to.Ptr("ISE-ILB-NU"),
					Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
					ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/ISE-ILB-NU"),
					Location: to.Ptr("northeurope"),
					Properties: &armlogic.IntegrationServiceEnvironmentProperties{
						EncryptionConfiguration: &armlogic.IntegrationServiceEnvironmenEncryptionConfiguration{
							EncryptionKeyReference: &armlogic.IntegrationServiceEnvironmenEncryptionKeyReference{
								KeyName: to.Ptr("testKeyName"),
								KeyVault: &armlogic.ResourceReference{
									ID: to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.KeyVault/vaults/testKeyVault"),
								},
								KeyVersion: to.Ptr("13b261d30b984753869902d7f47f4d55"),
							},
						},
						EndpointsConfiguration: &armlogic.FlowEndpointsConfiguration{
							Connector: &armlogic.FlowEndpoints{
								OutgoingIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("40.127.188.117"),
									},
									{
										Address: to.Ptr("40.85.114.29"),
									},
									{
										Address: to.Ptr("10.43.2.0/24"),
									},
									{
										Address: to.Ptr("10.43.3.0/24"),
									}},
							},
							Workflow: &armlogic.FlowEndpoints{
								AccessEndpointIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("10.43.1.6"),
									}},
								OutgoingIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("40.69.195.162"),
									},
									{
										Address: to.Ptr("10.43.1.0/24"),
									}},
							},
						},
						IntegrationServiceEnvironmentID: to.Ptr("13b261d30b984753869902d7f47f4d55"),
						NetworkConfiguration: &armlogic.NetworkConfiguration{
							AccessEndpoint: &armlogic.IntegrationServiceEnvironmentAccessEndpoint{
								Type: to.Ptr(armlogic.IntegrationServiceEnvironmentAccessEndpointTypeInternal),
							},
							Subnets: []*armlogic.ResourceReference{
								{
									Name: to.Ptr("VNET-ILB-NorthEurope/s1"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s1"),
								},
								{
									Name: to.Ptr("VNET-ILB-NorthEurope/s2"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s2"),
								},
								{
									Name: to.Ptr("VNET-ILB-NorthEurope/s3"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s3"),
								},
								{
									Name: to.Ptr("VNET-ILB-NorthEurope/s4"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s4"),
								}},
						},
						ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
						State:             to.Ptr(armlogic.WorkflowStateEnabled),
					},
					SKU: &armlogic.IntegrationServiceEnvironmentSKU{
						Name:     to.Ptr(armlogic.IntegrationServiceEnvironmentSKUNameDeveloper),
						Capacity: to.Ptr[int32](0),
					},
				},
				{
					Name:     to.Ptr("ISE-ILB-WCentralUS"),
					Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
					ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/ISE-ILB-WCentralUS"),
					Location: to.Ptr("westcentralus"),
					Properties: &armlogic.IntegrationServiceEnvironmentProperties{
						EncryptionConfiguration: &armlogic.IntegrationServiceEnvironmenEncryptionConfiguration{
							EncryptionKeyReference: &armlogic.IntegrationServiceEnvironmenEncryptionKeyReference{
								KeyName: to.Ptr("testKeyName"),
								KeyVault: &armlogic.ResourceReference{
									ID: to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.KeyVault/vaults/testKeyVault"),
								},
								KeyVersion: to.Ptr("13b261d30b984753869902d7f47f4d55"),
							},
						},
						EndpointsConfiguration: &armlogic.FlowEndpointsConfiguration{
							Connector: &armlogic.FlowEndpoints{
								OutgoingIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("13.78.134.201"),
									},
									{
										Address: to.Ptr("13.77.206.166"),
									},
									{
										Address: to.Ptr("10.42.2.0/24"),
									},
									{
										Address: to.Ptr("10.42.3.0/24"),
									}},
							},
							Workflow: &armlogic.FlowEndpoints{
								AccessEndpointIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("10.42.1.5"),
									}},
								OutgoingIPAddresses: []*armlogic.IPAddress{
									{
										Address: to.Ptr("13.78.237.166"),
									},
									{
										Address: to.Ptr("10.42.1.0/24"),
									}},
							},
						},
						IntegrationServiceEnvironmentID: to.Ptr("08bdba07c6b34ad6a263fc0152ff1735"),
						NetworkConfiguration: &armlogic.NetworkConfiguration{
							AccessEndpoint: &armlogic.IntegrationServiceEnvironmentAccessEndpoint{
								Type: to.Ptr(armlogic.IntegrationServiceEnvironmentAccessEndpointTypeInternal),
							},
							Subnets: []*armlogic.ResourceReference{
								{
									Name: to.Ptr("VNET-ILB-WCentralUS/s1"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-WCentralUS/subnets/s1"),
								},
								{
									Name: to.Ptr("VNET-ILB-WCentralUS/s2"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-WCentralUS/subnets/s2"),
								},
								{
									Name: to.Ptr("VNET-ILB-WCentralUS/s3"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-WCentralUS/subnets/s3"),
								},
								{
									Name: to.Ptr("VNET-ILB-WCentralUS/s4"),
									Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
									ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-WCentralUS/subnets/s4"),
								}},
						},
						ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
						State:             to.Ptr(armlogic.WorkflowStateEnabled),
					},
					SKU: &armlogic.IntegrationServiceEnvironmentSKU{
						Name:     to.Ptr(armlogic.IntegrationServiceEnvironmentSKUNameDeveloper),
						Capacity: to.Ptr[int32](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IntegrationServiceEnvironmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IntegrationServiceEnvironmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationServiceEnvironments_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get integration service environment by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationServiceEnvironmentsClient("f34b22a3-2202-4fb1-b040-1332bd928c84", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationServiceEnvironment{
			Name:     to.Ptr("testIntegrationServiceEnvironment"),
			Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
			ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
			Location: to.Ptr("northeurope"),
			Properties: &armlogic.IntegrationServiceEnvironmentProperties{
				EncryptionConfiguration: &armlogic.IntegrationServiceEnvironmenEncryptionConfiguration{
					EncryptionKeyReference: &armlogic.IntegrationServiceEnvironmenEncryptionKeyReference{
						KeyName: to.Ptr("testKeyName"),
						KeyVault: &armlogic.ResourceReference{
							ID: to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.KeyVault/vaults/testKeyVault"),
						},
						KeyVersion: to.Ptr("13b261d30b984753869902d7f47f4d55"),
					},
				},
				EndpointsConfiguration: &armlogic.FlowEndpointsConfiguration{
					Connector: &armlogic.FlowEndpoints{
						OutgoingIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("40.127.188.117"),
							},
							{
								Address: to.Ptr("40.85.114.29"),
							},
							{
								Address: to.Ptr("10.43.2.0/24"),
							},
							{
								Address: to.Ptr("10.43.3.0/24"),
							}},
					},
					Workflow: &armlogic.FlowEndpoints{
						AccessEndpointIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("10.43.1.6"),
							}},
						OutgoingIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("40.69.195.162"),
							},
							{
								Address: to.Ptr("10.43.1.0/24"),
							}},
					},
				},
				IntegrationServiceEnvironmentID: to.Ptr("13b261d30b984753869902d7f47f4d55"),
				NetworkConfiguration: &armlogic.NetworkConfiguration{
					AccessEndpoint: &armlogic.IntegrationServiceEnvironmentAccessEndpoint{
						Type: to.Ptr(armlogic.IntegrationServiceEnvironmentAccessEndpointTypeInternal),
					},
					Subnets: []*armlogic.ResourceReference{
						{
							Name: to.Ptr("VNET-ILB-NorthEurope/s1"),
							Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s1"),
						},
						{
							Name: to.Ptr("VNET-ILB-NorthEurope/s2"),
							Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s2"),
						},
						{
							Name: to.Ptr("VNET-ILB-NorthEurope/s3"),
							Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s3"),
						},
						{
							Name: to.Ptr("VNET-ILB-NorthEurope/s4"),
							Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s4"),
						}},
				},
				ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
				State:             to.Ptr(armlogic.WorkflowStateEnabled),
			},
			SKU: &armlogic.IntegrationServiceEnvironmentSKU{
				Name:     to.Ptr(armlogic.IntegrationServiceEnvironmentSKUNameDeveloper),
				Capacity: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationServiceEnvironment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationServiceEnvironment)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationServiceEnvironments_CreateOrUpdate(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an integration service environment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationServiceEnvironmentsClient("f34b22a3-2202-4fb1-b040-1332bd928c84", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		armlogic.IntegrationServiceEnvironment{
			Location: to.Ptr("brazilsouth"),
			Properties: &armlogic.IntegrationServiceEnvironmentProperties{
				EncryptionConfiguration: &armlogic.IntegrationServiceEnvironmenEncryptionConfiguration{
					EncryptionKeyReference: &armlogic.IntegrationServiceEnvironmenEncryptionKeyReference{
						KeyName: to.Ptr("testKeyName"),
						KeyVault: &armlogic.ResourceReference{
							ID: to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.KeyVault/vaults/testKeyVault"),
						},
						KeyVersion: to.Ptr("13b261d30b984753869902d7f47f4d55"),
					},
				},
				NetworkConfiguration: &armlogic.NetworkConfiguration{
					AccessEndpoint: &armlogic.IntegrationServiceEnvironmentAccessEndpoint{
						Type: to.Ptr(armlogic.IntegrationServiceEnvironmentAccessEndpointTypeInternal),
					},
					Subnets: []*armlogic.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/testVNET/subnets/s1"),
						},
						{
							ID: to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/testVNET/subnets/s2"),
						},
						{
							ID: to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/testVNET/subnets/s3"),
						},
						{
							ID: to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/testVNET/subnets/s4"),
						}},
				},
			},
			SKU: &armlogic.IntegrationServiceEnvironmentSKU{
				Name:     to.Ptr(armlogic.IntegrationServiceEnvironmentSKUNamePremium),
				Capacity: to.Ptr[int32](2),
			},
		},
		&armlogic.IntegrationServiceEnvironmentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Put.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationServiceEnvironment{
			Name:     to.Ptr("testIntegrationServiceEnvironment"),
			Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
			ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
			Location: to.Ptr("northeurope"),
			Properties: &armlogic.IntegrationServiceEnvironmentProperties{
				EndpointsConfiguration: &armlogic.FlowEndpointsConfiguration{
					Connector: &armlogic.FlowEndpoints{
						OutgoingIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("40.127.188.117"),
							},
							{
								Address: to.Ptr("40.85.114.29"),
							},
							{
								Address: to.Ptr("10.43.2.0/24"),
							},
							{
								Address: to.Ptr("10.43.3.0/24"),
							}},
					},
					Workflow: &armlogic.FlowEndpoints{
						AccessEndpointIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("10.43.1.6"),
							}},
						OutgoingIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("40.69.195.162"),
							},
							{
								Address: to.Ptr("10.43.1.0/24"),
							}},
					},
				},
				IntegrationServiceEnvironmentID: to.Ptr("13b261d30b984753869902d7f47f4d55"),
				NetworkConfiguration: &armlogic.NetworkConfiguration{
					AccessEndpoint: &armlogic.IntegrationServiceEnvironmentAccessEndpoint{
						Type: to.Ptr(armlogic.IntegrationServiceEnvironmentAccessEndpointTypeInternal),
					},
					Subnets: []*armlogic.ResourceReference{
						{
							Name: to.Ptr("testVNET/s1"),
							Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/testVNET/subnets/s1"),
						},
						{
							Name: to.Ptr("testVNET/s2"),
							Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/testVNET/subnets/s2"),
						},
						{
							Name: to.Ptr("testVNET/s3"),
							Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/testVNET/subnets/s3"),
						},
						{
							Name: to.Ptr("testVNET/s4"),
							Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/testVNET/subnets/s4"),
						}},
				},
				ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
				State:             to.Ptr(armlogic.WorkflowStateEnabled),
			},
			SKU: &armlogic.IntegrationServiceEnvironmentSKU{
				Name:     to.Ptr(armlogic.IntegrationServiceEnvironmentSKUNameDeveloper),
				Capacity: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationServiceEnvironment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationServiceEnvironment)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationServiceEnvironments_Update(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch an integration service environment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationServiceEnvironmentsClient("f34b22a3-2202-4fb1-b040-1332bd928c84", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		armlogic.IntegrationServiceEnvironment{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
			},
			SKU: &armlogic.IntegrationServiceEnvironmentSKU{
				Name:     to.Ptr(armlogic.IntegrationServiceEnvironmentSKUNameDeveloper),
				Capacity: to.Ptr[int32](0),
			},
		},
		&armlogic.IntegrationServiceEnvironmentsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Patch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationServiceEnvironment{
			Name:     to.Ptr("testIntegrationServiceEnvironment"),
			Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
			ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
			Location: to.Ptr("northeurope"),
			Properties: &armlogic.IntegrationServiceEnvironmentProperties{
				EncryptionConfiguration: &armlogic.IntegrationServiceEnvironmenEncryptionConfiguration{
					EncryptionKeyReference: &armlogic.IntegrationServiceEnvironmenEncryptionKeyReference{
						KeyName: to.Ptr("testKeyName"),
						KeyVault: &armlogic.ResourceReference{
							ID: to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.KeyVault/vaults/testKeyVault"),
						},
						KeyVersion: to.Ptr("13b261d30b984753869902d7f47f4d55"),
					},
				},
				EndpointsConfiguration: &armlogic.FlowEndpointsConfiguration{
					Connector: &armlogic.FlowEndpoints{
						OutgoingIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("40.127.188.117"),
							},
							{
								Address: to.Ptr("40.85.114.29"),
							},
							{
								Address: to.Ptr("10.43.2.0/24"),
							},
							{
								Address: to.Ptr("10.43.3.0/24"),
							}},
					},
					Workflow: &armlogic.FlowEndpoints{
						AccessEndpointIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("10.43.1.6"),
							}},
						OutgoingIPAddresses: []*armlogic.IPAddress{
							{
								Address: to.Ptr("40.69.195.162"),
							},
							{
								Address: to.Ptr("10.43.1.0/24"),
							}},
					},
				},
				IntegrationServiceEnvironmentID: to.Ptr("13b261d30b984753869902d7f47f4d55"),
				NetworkConfiguration: &armlogic.NetworkConfiguration{
					AccessEndpoint: &armlogic.IntegrationServiceEnvironmentAccessEndpoint{
						Type: to.Ptr(armlogic.IntegrationServiceEnvironmentAccessEndpointTypeInternal),
					},
					Subnets: []*armlogic.ResourceReference{
						{
							Name: to.Ptr("VNET-ILB-NorthEurope/s1"),
							Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s1"),
						},
						{
							Name: to.Ptr("VNET-ILB-NorthEurope/s2"),
							Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s2"),
						},
						{
							Name: to.Ptr("VNET-ILB-NorthEurope/s3"),
							Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s3"),
						},
						{
							Name: to.Ptr("VNET-ILB-NorthEurope/s4"),
							Type: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/VNET-ILB-NorthEurope/subnets/s4"),
						}},
				},
				ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
				State:             to.Ptr(armlogic.WorkflowStateEnabled),
			},
			SKU: &armlogic.IntegrationServiceEnvironmentSKU{
				Name:     to.Ptr(armlogic.IntegrationServiceEnvironmentSKUNameDeveloper),
				Capacity: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationServiceEnvironment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationServiceEnvironment)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationServiceEnvironments_Delete(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an integration account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationServiceEnvironmentsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Delete.json: %v", err)
	}
}

func TestIntegrationServiceEnvironments_Restart(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restarts an integration service environment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationServiceEnvironmentsClient("f34b22a3-2202-4fb1-b040-1332bd928c84", cred, &options)
	_, err := client.Restart(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Restart.json: %v", err)
	}
}

func TestIntegrationServiceEnvironmentSKUs_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Skus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List integration service environment skus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationServiceEnvironmentSKUsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List("testResourceGroup",
		"testIntegrationServiceEnvironment",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Skus.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.IntegrationServiceEnvironmentSKUList{
			Value: []*armlogic.IntegrationServiceEnvironmentSKUDefinition{
				{
					Capacity: &armlogic.IntegrationServiceEnvironmentSKUCapacity{
						Default:   to.Ptr[int32](0),
						Maximum:   to.Ptr[int32](10),
						Minimum:   to.Ptr[int32](0),
						ScaleType: to.Ptr(armlogic.IntegrationServiceEnvironmentSKUScaleTypeAutomatic),
					},
					ResourceType: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
					SKU: &armlogic.IntegrationServiceEnvironmentSKUDefinitionSKU{
						Name: to.Ptr(armlogic.IntegrationServiceEnvironmentSKUNamePremium),
					},
				},
				{
					Capacity: &armlogic.IntegrationServiceEnvironmentSKUCapacity{
						Default:   to.Ptr[int32](0),
						Maximum:   to.Ptr[int32](0),
						Minimum:   to.Ptr[int32](0),
						ScaleType: to.Ptr(armlogic.IntegrationServiceEnvironmentSKUScaleTypeNone),
					},
					ResourceType: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
					SKU: &armlogic.IntegrationServiceEnvironmentSKUDefinitionSKU{
						Name: to.Ptr(armlogic.IntegrationServiceEnvironmentSKUNameDeveloper),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IntegrationServiceEnvironmentSKUList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IntegrationServiceEnvironmentSKUList)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_Skus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationServiceEnvironmentNetworkHealth_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_NetworkHealth.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the integration service environment network health"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationServiceEnvironmentNetworkHealthClient("f34b22a3-2202-4fb1-b040-1332bd928c84", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_NetworkHealth.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]*armlogic.IntegrationServiceEnvironmentSubnetNetworkHealth{
			"LA1": {
				NetworkDependencyHealthState: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityState("Healthy")),
				OutboundNetworkDependencies: []*armlogic.IntegrationServiceEnvironmentNetworkDependency{
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureStorage),
						DisplayName: to.Ptr("Azure Storage"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("www.table.core.windows.net"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("www.blob.core.windows.net"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("www.queue.core.windows.net"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							}},
					},
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureActiveDirectory),
						DisplayName: to.Ptr("Azure Active Directory"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("graph.windows.net"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							}},
					},
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeSSLCertificateVerification),
						DisplayName: to.Ptr("SSL Certificate Verification"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("ocsp.msocsp.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("mscrl.microsoft.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("crl.microsoft.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("www.microsoft.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("crl3.digicert.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("ocsp.digicert.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("cacerts.digicert.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("www.thawte.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							}},
					},
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeDiagnosticLogsAndMetrics),
						DisplayName: to.Ptr("Diagnostic Logs And Metrics"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("az-prod.metrics.nsatc.net"),
								Ports: []*string{
									to.Ptr("443")},
							}},
					},
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeIntegrationServiceEnvironmentConnectors),
						DisplayName: to.Ptr("Integration Service Environment Connectors"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("flow-yticlpbiumhig-cqsn-apim-runtime.brazilus.environments.microsoftazurelogicapps.net"),
								Ports: []*string{
									to.Ptr("443")},
							}},
					},
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRedisCache),
						DisplayName: to.Ptr("Redis Cache"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("flowyticlpbiumhigcqsn.redis.cache.windows.net"),
								Ports: []*string{
									to.Ptr("6380")},
							}},
					}},
				OutboundNetworkHealth: &armlogic.IntegrationServiceEnvironmentNetworkDependencyHealth{
					State: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyHealthStateHealthy),
				},
			},
			"LA2": {
				NetworkDependencyHealthState: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityState("Healthy")),
				OutboundNetworkDependencies: []*armlogic.IntegrationServiceEnvironmentNetworkDependency{
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureStorage),
						DisplayName: to.Ptr("Azure Storage"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("blob.core.windows.net"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("queue.core.windows.net"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("table.core.windows.net"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("file.core.windows.net"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							}},
					},
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeSQL),
						DisplayName: to.Ptr("Azure SQL Database"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("database.windows.net"),
								Ports: []*string{
									to.Ptr("1433")},
							}},
					},
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureManagement),
						DisplayName: to.Ptr("Azure Management"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("management.core.windows.net"),
								Ports: []*string{
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("admin.core.windows.net"),
								Ports: []*string{
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("management.azure.com"),
								Ports: []*string{
									to.Ptr("443")},
							}},
					},
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureActiveDirectory),
						DisplayName: to.Ptr("Azure Active Directory"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("graph.windows.net"),
								Ports: []*string{
									to.Ptr("443")},
							}},
					},
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRegionalService),
						DisplayName: to.Ptr("Regional Service"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("gr-prod-sn1.cloudapp.net"),
								Ports: []*string{
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("az-prod.metrics.nsatc.net"),
								Ports: []*string{
									to.Ptr("443")},
							}},
					},
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeSSLCertificateVerification),
						DisplayName: to.Ptr("SSL Certificate Verification"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("ocsp.msocsp.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("mscrl.microsoft.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("crl.microsoft.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("www.microsoft.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("crl3.digicert.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("ocsp.digicert.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("cacerts.digicert.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("www.thawte.com"),
								Ports: []*string{
									to.Ptr("80"),
									to.Ptr("443")},
							}},
					}},
				OutboundNetworkHealth: &armlogic.IntegrationServiceEnvironmentNetworkDependencyHealth{
					State: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyHealthStateHealthy),
				},
			},
			"LA3": {
				NetworkDependencyHealthState: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityState("Healthy")),
				OutboundNetworkDependencies: []*armlogic.IntegrationServiceEnvironmentNetworkDependency{
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRecoveryService),
						DisplayName: to.Ptr("Recovery Service"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("https://prod3.metrics.nsatc.net:1886/RecoveryService"),
								Ports: []*string{
									to.Ptr("1886")},
							}},
					},
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeSQL),
						DisplayName: to.Ptr("SQL"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("jnb6zdnqth.database.windows.net"),
								Ports: []*string{
									to.Ptr("1443")},
							}},
					},
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeDiagnosticLogsAndMetrics),
						DisplayName: to.Ptr("Diagnostic Logs And Metrics"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("prod.warmpath.msftcloudes.com"),
								Ports: []*string{
									to.Ptr("443")},
							}},
					},
					{
						Category:    to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureStorage),
						DisplayName: to.Ptr("Azure Storage"),
						Endpoints: []*armlogic.IntegrationServiceEnvironmentNetworkEndpoint{
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("apimgmtstcfpq5vx3sh9wdme.blob.core.windows.net"),
								Ports: []*string{
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("apimgmtstcfpq5vx3sh9wdme.file.core.windows.net"),
								Ports: []*string{
									to.Ptr("445")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("apimgmtstcfpq5vx3sh9wdme.queue.core.windows.net"),
								Ports: []*string{
									to.Ptr("443")},
							},
							{
								Accessibility: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable),
								DomainName:    to.Ptr("apimgmtstcfpq5vx3sh9wdme.table.core.windows.net"),
								Ports: []*string{
									to.Ptr("443")},
							}},
					}},
				OutboundNetworkHealth: &armlogic.IntegrationServiceEnvironmentNetworkDependencyHealth{
					State: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkDependencyHealthStateHealthy),
				},
			},
			"LA4": {
				NetworkDependencyHealthState: to.Ptr(armlogic.IntegrationServiceEnvironmentNetworkEndPointAccessibilityState("Healthy")),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Value) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Value)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_NetworkHealth.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationServiceEnvironmentManagedApis_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the integration service environment managed Apis"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationServiceEnvironmentManagedApisClient("f34b22a3-2202-4fb1-b040-1332bd928c84", cred, &options)
	pager := client.List("testResourceGroup",
		"testIntegrationServiceEnvironment",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.IntegrationServiceEnvironmentManagedAPIListResult{
			Value: []*armlogic.IntegrationServiceEnvironmentManagedAPI{
				{
					Name:     to.Ptr("azurefile"),
					Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
					ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/azurefile"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armlogic.IntegrationServiceEnvironmentManagedAPIProperties{
						Name: to.Ptr("azurefile"),
						Capabilities: []*string{
							to.Ptr("blob")},
						ConnectionParameters: map[string]interface{}{
							"accessKey": map[string]interface{}{
								"type": "securestring",
								"uiDefinition": map[string]interface{}{
									"description": "Specify a valid primary/secondary storage account access key.",
									"constraints": map[string]interface{}{
										"required": "true",
									},
									"displayName": "Azure Storage Account Access Key",
									"tooltip":     "Specify a valid primary/secondary storage account access key.",
								},
							},
							"accountName": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "Name of the storage account the connector should use.",
									"constraints": map[string]interface{}{
										"required": "true",
									},
									"displayName": "Azure Storage Account name",
									"tooltip":     "Provide the storage account name",
								},
							},
						},
						GeneralInformation: &armlogic.APIResourceGeneralInformation{
							Description: to.Ptr("Microsoft Azure Storage provides a massively scalable, durable, and highly available storage for data on the cloud, and serves as the data storage solution for modern applications. Connect to File Storage to perform various operations such as create, update, get and delete on files in your Azure Storage account."),
							DisplayName: to.Ptr("Azure File Storage"),
							IconURL:     to.Ptr("https://powerappsconnectorsdf.blob.core.windows.net/officialicons/azurefile/icon_1.0.1216.1605.png"),
							ReleaseTag:  to.Ptr("Preview"),
							Tier:        to.Ptr(armlogic.APITierStandard),
						},
						IntegrationServiceEnvironment: &armlogic.ResourceReference{
							Name: to.Ptr("tes-ise-ga"),
							Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
						},
						Metadata: &armlogic.APIResourceMetadata{
							BrandColor: to.Ptr("#804998"),
							Source:     to.Ptr("marketplace"),
						},
						ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
						RuntimeUrls: []*string{
							to.Ptr("https://flow-yticlpbiumhig-cqsn-apim-runtime.brazilus.environments.microsoftazurelogicapps.net/apim/azurefile")},
					},
				},
				{
					Name:     to.Ptr("azuretables"),
					Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
					ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/azuretables"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armlogic.IntegrationServiceEnvironmentManagedAPIProperties{
						Name: to.Ptr("azuretables"),
						Capabilities: []*string{
							to.Ptr("actions")},
						ConnectionParameters: map[string]interface{}{
							"sharedkey": map[string]interface{}{
								"type": "securestring",
								"uiDefinition": map[string]interface{}{
									"description": "The shared storage key of your storage account",
									"constraints": map[string]interface{}{
										"required": "true",
									},
									"displayName": "Shared Storage Key",
									"tooltip":     "Provide a shared storage key for the storage account used for tables as it appears in the Azure portal",
								},
							},
							"storageaccount": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The name of your storage account",
									"constraints": map[string]interface{}{
										"required": "true",
									},
									"displayName": "Storage Account Name",
									"tooltip":     "Provide the name of the storage account used for tables as it appears in the Azure portal",
								},
							},
						},
						GeneralInformation: &armlogic.APIResourceGeneralInformation{
							Description: to.Ptr("Azure Table storage is a service that stores structured NoSQL data in the cloud, providing a key/attribute store with a schemaless design. Sign into your Storage account to create, update, and query tables and more."),
							DisplayName: to.Ptr("Azure Table Storage"),
							IconURL:     to.Ptr("https://powerappsconnectorsdf.blob.core.windows.net/officialicons/azuretables/icon_1.0.1216.1605.png"),
							ReleaseTag:  to.Ptr("Production"),
							Tier:        to.Ptr(armlogic.APITierStandard),
						},
						IntegrationServiceEnvironment: &armlogic.ResourceReference{
							Name: to.Ptr("testIntegrationServiceEnvironment"),
							Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
						},
						Metadata: &armlogic.APIResourceMetadata{
							BrandColor: to.Ptr("#804998"),
							Source:     to.Ptr("marketplace"),
						},
						ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
						RuntimeUrls: []*string{
							to.Ptr("https://flow-yticlpbiumhig-cqsn-apim-runtime.brazilus.environments.microsoftazurelogicapps.net/apim/azuretables")},
					},
				},
				{
					Name:     to.Ptr("eventhubs"),
					Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
					ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/eventhubs"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armlogic.IntegrationServiceEnvironmentManagedAPIProperties{
						Name: to.Ptr("eventhubs"),
						Capabilities: []*string{
							to.Ptr("actions")},
						ConnectionParameters: map[string]interface{}{
							"connectionString": map[string]interface{}{
								"type": "securestring",
								"uiDefinition": map[string]interface{}{
									"description": "Azure Event Hubs Connection String",
									"constraints": map[string]interface{}{
										"required": "true",
									},
									"displayName": "Connection String",
									"tooltip":     "Provide Azure Event Hubs Connection String",
								},
							},
						},
						GeneralInformation: &armlogic.APIResourceGeneralInformation{
							Description: to.Ptr("Connect to Azure Event Hubs to send and receive events."),
							DisplayName: to.Ptr("Event Hubs"),
							IconURL:     to.Ptr("https://connectoricons-df.azureedge.net/eventhubs/icon_1.0.1228.1637.png"),
							ReleaseTag:  to.Ptr("Production"),
							Tier:        to.Ptr(armlogic.APITierStandard),
						},
						IntegrationServiceEnvironment: &armlogic.ResourceReference{
							Name: to.Ptr("testIntegrationServiceEnvironment"),
							Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
						},
						Metadata: &armlogic.APIResourceMetadata{
							BrandColor: to.Ptr("#c4d5ff"),
							Source:     to.Ptr("marketplace"),
						},
						ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
						RuntimeUrls: []*string{
							to.Ptr("https://flow-yticlpbiumhig-cqsn-apim-runtime.brazilus.environments.microsoftazurelogicapps.net/apim/eventhubs")},
					},
				},
				{
					Name:     to.Ptr("mq"),
					Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
					ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/mq"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armlogic.IntegrationServiceEnvironmentManagedAPIProperties{
						Name: to.Ptr("mq"),
						Capabilities: []*string{
							to.Ptr("actions"),
							to.Ptr("cloud")},
						ConnectionParameters: map[string]interface{}{
							"authType": map[string]interface{}{
								"type": "string",
								"allowedValues": []interface{}{
									map[string]interface{}{
										"value": "basic",
									},
									map[string]interface{}{
										"value": "anonymous",
									},
								},
								"uiDefinition": map[string]interface{}{
									"description": "Authentication type to connect to your Queue Manager",
									"constraints": map[string]interface{}{
										"allowedValues": []interface{}{
											map[string]interface{}{
												"text":  "Basic",
												"value": "basic",
											},
											map[string]interface{}{
												"text":  "Anonymous",
												"value": "anonymous",
											},
										},
										"capability": []interface{}{},
										"required":   "true",
										"tabIndex":   float64(6),
									},
									"displayName": "Authentication",
									"tooltip":     "Authentication type to connect to your Queue Manager",
								},
							},
							"channel": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The channel to connect to the Queue Manager on.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"cloud",
										},
										"required": "true",
										"tabIndex": float64(3),
									},
									"displayName": "Channel name",
									"tooltip":     "Channel name",
								},
							},
							"effectiveUserName": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The user name to use when connecting to MQ.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"cloud",
										},
										"clearText": true,
										"required":  "true",
										"tabIndex":  float64(5),
									},
									"displayName": "Connect As",
									"tooltip":     "Connect As",
								},
							},
							"enableSSL": map[string]interface{}{
								"type": "bool",
								"uiDefinition": map[string]interface{}{
									"description": "Enable SSL? (True/False)",
									"constraints": map[string]interface{}{
										"capability": []interface{}{},
										"required":   "false",
										"tabIndex":   float64(9),
									},
									"displayName": "Enable SSL?",
									"tooltip":     "Specify if SSL needs to be enabled",
								},
							},
							"password": map[string]interface{}{
								"type": "securestring",
								"uiDefinition": map[string]interface{}{
									"description": "Password credential",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"cloud",
										},
										"required": "false",
										"tabIndex": float64(8),
									},
									"displayName": "Password",
									"tooltip":     "Password credential",
								},
							},
							"queue": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The name of the default queue, may be overriden.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"cloud",
										},
										"required": "true",
										"tabIndex": float64(4),
									},
									"displayName": "Default queue name",
									"tooltip":     "Default queue name",
								},
							},
							"queueManager": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The name of the Queue Manager to connect to.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"cloud",
										},
										"required": "true",
										"tabIndex": float64(2),
									},
									"displayName": "Queue Manager name",
									"tooltip":     "Queue Manager name",
								},
							},
							"server": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The host name and port the MQ server is running on (host:port).",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"cloud",
										},
										"required": "true",
										"tabIndex": float64(1),
									},
									"displayName": "Server",
									"tooltip":     "Server:Port",
								},
							},
							"username": map[string]interface{}{
								"type": "securestring",
								"uiDefinition": map[string]interface{}{
									"description": "Username credential",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"cloud",
										},
										"clearText": true,
										"required":  "false",
										"tabIndex":  float64(7),
									},
									"displayName": "Username",
									"tooltip":     "Username credential",
								},
							},
						},
						GeneralInformation: &armlogic.APIResourceGeneralInformation{
							Description: to.Ptr("Microsoft Connector for MQ integrates Azure applications with resources stored in an IBM WebSphere MQ server. Supports message send and receive operations."),
							DisplayName: to.Ptr("MQ"),
							IconURL:     to.Ptr("https://powerappsconnectorsdf.blob.core.windows.net/officialicons/mq/icon_1.0.1216.1605.png"),
							ReleaseTag:  to.Ptr("Production"),
							Tier:        to.Ptr(armlogic.APITierEnterprise),
						},
						IntegrationServiceEnvironment: &armlogic.ResourceReference{
							Name: to.Ptr("testIntegrationServiceEnvironment"),
							Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
						},
						Metadata: &armlogic.APIResourceMetadata{
							BrandColor: to.Ptr("#466BB0"),
							Source:     to.Ptr("marketplace"),
						},
						ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
						RuntimeUrls: []*string{
							to.Ptr("https://flow-yticlpbiumhig-cqsn-apim-runtime.brazilus.environments.microsoftazurelogicapps.net/apim/mq")},
					},
				},
				{
					Name:     to.Ptr("sap"),
					Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
					ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/sap"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armlogic.IntegrationServiceEnvironmentManagedAPIProperties{
						Name: to.Ptr("sap"),
						Capabilities: []*string{
							to.Ptr("actions"),
							to.Ptr("triggers"),
							to.Ptr("integrationServiceEnvironment")},
						ConnectionParameters: map[string]interface{}{
							"appServerHost": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The hostname of the SAP Application Server. ",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"integrationServiceEnvironment",
										},
										"dependencies": map[string]interface{}{
											"LogonType": map[string]interface{}{
												"values": []interface{}{
													"ApplicationServer",
												},
											},
										},
										"required": "false",
										"tabIndex": float64(7),
									},
									"displayName": "AS Host",
									"tooltip":     "The hostname of the specific SAP Application Server to connect to.",
								},
							},
							"appServerService": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The service name or port number of the SAP Application Server.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"integrationServiceEnvironment",
										},
										"dependencies": map[string]interface{}{
											"LogonType": map[string]interface{}{
												"values": []interface{}{
													"ApplicationServer",
												},
											},
										},
										"required": "false",
										"tabIndex": float64(8),
									},
									"displayName": "AS Service",
									"tooltip":     "The service name or port numbe of the specific SAP Application Server to connect to (Optional for connection type (Logon) A - Application Server).",
								},
							},
							"authType": map[string]interface{}{
								"type": "string",
								"allowedValues": []interface{}{
									map[string]interface{}{
										"value": "basic",
									},
								},
								"defaultValue": "basic",
								"uiDefinition": map[string]interface{}{
									"description": "Authentication type to connect to the SAP System. Must be basic (username and password).",
									"constraints": map[string]interface{}{
										"allowedValues": []interface{}{
											map[string]interface{}{
												"text":  "Basic",
												"value": "basic",
											},
										},
										"capability": []interface{}{
											"integrationServiceEnvironment",
										},
										"required": "true",
										"tabIndex": float64(3),
									},
									"displayName": "Authentication Type",
									"tooltip":     "Authentication type to connect to the SAP System.",
								},
							},
							"client": map[string]interface{}{
								"type": "int",
								"uiDefinition": map[string]interface{}{
									"description": "The SAP client ID to connect to the SAP system.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"integrationServiceEnvironment",
										},
										"required": "true",
										"tabIndex": float64(2),
									},
									"displayName": "Client",
									"tooltip":     "The SAP backend's client (or 'Mandant') into which to log in. It is a number ranging from 000 to 999.",
								},
							},
							"logonGroup": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The Logon Group for the SAP System.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"integrationServiceEnvironment",
										},
										"dependencies": map[string]interface{}{
											"LogonType": map[string]interface{}{
												"values": []interface{}{
													"Group",
												},
											},
										},
										"required": "false",
										"tabIndex": float64(13),
									},
									"displayName": "MS Logon Group",
									"tooltip":     "The Logon Group for the SAP System, from which the Message Server shall select an Application Server (Only available if connection type (Logon) is B - Message Server (Group))",
								},
							},
							"logonType": map[string]interface{}{
								"type": "string",
								"allowedValues": []interface{}{
									map[string]interface{}{
										"uiDefinition": map[string]interface{}{
											"description": "Application Server Logon (Type A)",
											"displayName": "Application Server (Type A)",
										},
										"value": "ApplicationServer",
									},
									map[string]interface{}{
										"uiDefinition": map[string]interface{}{
											"description": "Group Logon (Type B aka Message Server)",
											"displayName": "Group (Type B aka Message Server)",
										},
										"value": "Group",
									},
								},
								"defaultValue": "Group",
								"uiDefinition": map[string]interface{}{
									"description": "The type of logon to the SAP System, either Application Server Logon (Type A) or Group Logon (Type B aka Message Server).",
									"constraints": map[string]interface{}{
										"allowedValues": []interface{}{
											map[string]interface{}{
												"text":  "Application Server",
												"value": "ApplicationServer",
											},
											map[string]interface{}{
												"text":  "Group",
												"value": "Group",
											},
										},
										"capability": []interface{}{
											"integrationServiceEnvironment",
										},
										"required": "true",
										"tabIndex": float64(6),
									},
									"displayName": "Logon Type",
									"tooltip":     "The type of logon to the SAP System.",
								},
							},
							"messageServerHost": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The hostname of the SAP Message Server aka R3 System Name.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"integrationServiceEnvironment",
										},
										"dependencies": map[string]interface{}{
											"LogonType": map[string]interface{}{
												"values": []interface{}{
													"Group",
												},
											},
										},
										"required": "false",
										"tabIndex": float64(10),
									},
									"displayName": "MS Server Host",
									"tooltip":     "The hostname of the SAP System’s Message Server (central instance) aka R3 System Name (Mandatory if connection type (Logon) is B - Message Server (Group)).",
								},
							},
							"messageServerService": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The service name or port number of the Message Server.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"integrationServiceEnvironment",
										},
										"dependencies": map[string]interface{}{
											"LogonType": map[string]interface{}{
												"values": []interface{}{
													"Group",
												},
											},
										},
										"required": "false",
										"tabIndex": float64(11),
									},
									"displayName": "MS Service Name or Port Number",
									"tooltip":     "The Service Name (as defined in etc/services) or the Port Number under which the Message Server is listening for load-balancing requests (Mandatory if connection type (Logon) is B - Message Server (Group) and System ID is not present)",
								},
							},
							"password": map[string]interface{}{
								"type": "securestring",
								"uiDefinition": map[string]interface{}{
									"description": "The password to be used for log in to the SAP System.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"integrationServiceEnvironment",
										},
										"clearText": false,
										"required":  "false",
										"tabIndex":  float64(5),
									},
									"displayName": "SAP Password",
									"tooltip":     "The password to be used for log in to the SAP System.",
								},
							},
							"safeTyping": map[string]interface{}{
								"type": "bool",
								"uiDefinition": map[string]interface{}{
									"description": "Use strong types if false, otherwise use string as safe type.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"integrationServiceEnvironment",
										},
										"required": "false",
										"tabIndex": float64(14),
									},
									"displayName": "Safe Typing",
									"tooltip":     "Enables safe typing, which treats types as string instead of strong types (e.g. Date, Time, Datetime), relaxing type and value validations.",
								},
							},
							"sncLibraryPath": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "Name or path of the SNC library to be used.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{},
										"dependencies": map[string]interface{}{
											"UseSnc": map[string]interface{}{
												"values": []interface{}{
													"true",
												},
											},
										},
										"required": "false",
										"tabIndex": float64(16),
									},
									"displayName": "SNC Library",
									"tooltip":     "Name or path of the SNC library to be used. Path can be absolute path or relative to the NCo library",
								},
							},
							"sncMyName": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "Identity to be used for this particular destination/server (optional).",
									"constraints": map[string]interface{}{
										"capability": []interface{}{},
										"dependencies": map[string]interface{}{
											"UseSnc": map[string]interface{}{
												"values": []interface{}{
													"true",
												},
											},
										},
										"required": "false",
										"tabIndex": float64(18),
									},
									"displayName": "SNC My Name",
									"tooltip":     "The installed SNC solution usually knows its own SNC name. Only for solutions supporting 'multiple identities', you may need to specify the identity to be used for this particular destination/server (optional)",
								},
							},
							"sncPartnerName": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The backend's SNC name (Required when Logon Type is Application Server).",
									"constraints": map[string]interface{}{
										"capability": []interface{}{},
										"dependencies": map[string]interface{}{
											"UseSnc": map[string]interface{}{
												"values": []interface{}{
													"true",
												},
											},
										},
										"required": "false",
										"tabIndex": float64(19),
									},
									"displayName": "SNC Partner Name",
									"tooltip":     "The backend's SNC name (Required when Logon Type is Application Server)",
								},
							},
							"sncQop": map[string]interface{}{
								"type": "string",
								"allowedValues": []interface{}{
									map[string]interface{}{
										"value": "Authentication",
									},
									map[string]interface{}{
										"value": "Integrity",
									},
									map[string]interface{}{
										"value": "Privacy",
									},
									map[string]interface{}{
										"value": "Default",
									},
									map[string]interface{}{
										"value": "Maximum",
									},
								},
								"defaultValue": "Default",
								"uiDefinition": map[string]interface{}{
									"description": "Quality of Service to be used for SNC communication of this particular destination/server.",
									"constraints": map[string]interface{}{
										"allowedValues": []interface{}{
											map[string]interface{}{
												"text":  "Authentication only",
												"value": "Authentication",
											},
											map[string]interface{}{
												"text":  "Authentication and integrity protection",
												"value": "Integrity",
											},
											map[string]interface{}{
												"text":  "Authentication, integrity and privacy protection (encryption)",
												"value": "Privacy",
											},
											map[string]interface{}{
												"text":  "Default protection",
												"value": "Default",
											},
											map[string]interface{}{
												"text":  "Maximum protection",
												"value": "Maximum",
											},
										},
										"capability": []interface{}{},
										"dependencies": map[string]interface{}{
											"UseSnc": map[string]interface{}{
												"values": []interface{}{
													"true",
												},
											},
										},
										"required": "false",
										"tabIndex": float64(20),
									},
									"displayName": "SNC Quality of Protection",
									"tooltip":     "Quality of Service to be used for SNC communication of this particular destination/server",
								},
							},
							"sncSso": map[string]interface{}{
								"type": "string",
								"allowedValues": []interface{}{
									map[string]interface{}{
										"value": "On",
									},
									map[string]interface{}{
										"value": "Off",
									},
								},
								"defaultValue": "On",
								"uiDefinition": map[string]interface{}{
									"description": "The SNC SSO specifies whether to use SNC identity or credentials provided on RFC level.",
									"constraints": map[string]interface{}{
										"allowedValues": []interface{}{
											map[string]interface{}{
												"text":  "Logon using the SNC identity",
												"value": "On",
											},
											map[string]interface{}{
												"text":  "Logon with the username/password information provided on RFC level",
												"value": "Off",
											},
										},
										"capability": []interface{}{},
										"dependencies": map[string]interface{}{
											"UseSnc": map[string]interface{}{
												"values": []interface{}{
													"true",
												},
											},
										},
										"required": "false",
										"tabIndex": float64(17),
									},
									"displayName": "SNC SSO",
									"tooltip":     "The SNC SSO specifies whether to use SNC identity or credentials provided on RFC level.",
								},
							},
							"systemID": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The System ID of the SAP system.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"integrationServiceEnvironment",
										},
										"dependencies": map[string]interface{}{
											"LogonType": map[string]interface{}{
												"values": []interface{}{
													"Group",
												},
											},
										},
										"required": "false",
										"tabIndex": float64(12),
									},
									"displayName": "MS System ID",
									"tooltip":     "The SAP system’s three-letter system ID (Mandatory if connection type (Logon) is B - Message Server (Group) and Message Server Service is not present)",
								},
							},
							"systemNumber": map[string]interface{}{
								"type": "int",
								"uiDefinition": map[string]interface{}{
									"description": "The SAP System’s System Number. It is a number ranging from 00 to 99.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"integrationServiceEnvironment",
										},
										"dependencies": map[string]interface{}{
											"LogonType": map[string]interface{}{
												"values": []interface{}{
													"ApplicationServer",
												},
											},
										},
										"required": "false",
										"tabIndex": float64(9),
									},
									"displayName": "AS System Number",
									"tooltip":     "The SAP System’s System Number. It is a number ranging from 00 to 99 (Mandatory if connection type (Logon) is A - Application Server).",
								},
							},
							"useSnc": map[string]interface{}{
								"type":         "bool",
								"defaultValue": "false",
								"uiDefinition": map[string]interface{}{
									"description": "When selected, the connections will be secured with SNC.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{},
										"tabIndex":   float64(15),
									},
									"displayName": "Use SNC",
									"tooltip":     "When selected, the connections will be secured with SNC",
								},
							},
							"username": map[string]interface{}{
								"type": "securestring",
								"uiDefinition": map[string]interface{}{
									"description": "The username to be used for log in to the SAP System.",
									"constraints": map[string]interface{}{
										"capability": []interface{}{
											"integrationServiceEnvironment",
										},
										"clearText": true,
										"required":  "false",
										"tabIndex":  float64(4),
									},
									"displayName": "SAP Username",
									"tooltip":     "The username to be used for log in to the SAP System.",
								},
							},
						},
						GeneralInformation: &armlogic.APIResourceGeneralInformation{
							Description: to.Ptr("SAP connector is part of Microsoft’s hybrid integration platform. Use this connector to run SAP based applications side by side with Logic Apps to connect with On-Premise Line of Business systems."),
							DisplayName: to.Ptr("SAP"),
							IconURL:     to.Ptr("https://connectoricons-df.azureedge.net/sap/icon_1.0.1224.1629.png"),
							ReleaseTag:  to.Ptr("Production"),
							Tier:        to.Ptr(armlogic.APITierEnterprise),
						},
						IntegrationServiceEnvironment: &armlogic.ResourceReference{
							Name: to.Ptr("testIntegrationServiceEnvironment"),
							Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
						},
						Metadata: &armlogic.APIResourceMetadata{
							BrandColor: to.Ptr("#99e7ff"),
							DeploymentParameters: &armlogic.APIDeploymentParameterMetadataSet{
								PackageContentLink: &armlogic.APIDeploymentParameterMetadata{
									Type:        to.Ptr("blob"),
									Description: to.Ptr("Upload package containing SAP NCo components and optionally SNC components."),
									DisplayName: to.Ptr("SAP package"),
									IsRequired:  to.Ptr(true),
									Visibility:  to.Ptr(armlogic.APIDeploymentParameterVisibilityDefault),
								},
								RedisCacheConnectionString: &armlogic.APIDeploymentParameterMetadata{
									Type:        to.Ptr("string"),
									Description: to.Ptr("Redis connection string"),
									DisplayName: to.Ptr("Redis connection string"),
									IsRequired:  to.Ptr(true),
									Visibility:  to.Ptr(armlogic.APIDeploymentParameterVisibilityInternal),
								},
							},
							Source: to.Ptr("marketplace"),
						},
						ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
						RuntimeUrls: []*string{
							to.Ptr("https://flow-yticlpbiumhig-cqsn-apim-runtime.brazilus.environments.microsoftazurelogicapps.net/apim/sap")},
					},
				},
				{
					Name:     to.Ptr("servicebus"),
					Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
					ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/servicebus"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armlogic.IntegrationServiceEnvironmentManagedAPIProperties{
						Name: to.Ptr("servicebus"),
						Capabilities: []*string{
							to.Ptr("actions")},
						ConnectionParameters: map[string]interface{}{
							"connectionString": map[string]interface{}{
								"type": "securestring",
								"uiDefinition": map[string]interface{}{
									"description": "Azure Service Bus Connection String",
									"constraints": map[string]interface{}{
										"required": "true",
									},
									"displayName": "Connection String",
									"tooltip":     "Provide Azure Service Bus Connection String",
								},
							},
						},
						GeneralInformation: &armlogic.APIResourceGeneralInformation{
							Description: to.Ptr("Connect to Azure Service Bus to send and receive messages. You can perform actions such as send to queue, send to topic, receive from queue, receive from subscription, etc."),
							DisplayName: to.Ptr("Service Bus"),
							IconURL:     to.Ptr("https://powerappsconnectorsdf.blob.core.windows.net/officialicons/servicebus/icon_1.0.1216.1605.png"),
							ReleaseTag:  to.Ptr("Production"),
							Tier:        to.Ptr(armlogic.APITierStandard),
						},
						IntegrationServiceEnvironment: &armlogic.ResourceReference{
							Name: to.Ptr("testIntegrationServiceEnvironment"),
							Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
						},
						Metadata: &armlogic.APIResourceMetadata{
							BrandColor: to.Ptr("#c4d5ff"),
							Source:     to.Ptr("marketplace"),
						},
						ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
						RuntimeUrls: []*string{
							to.Ptr("https://flow-yticlpbiumhig-cqsn-apim-runtime.brazilus.environments.microsoftazurelogicapps.net/apim/servicebus")},
					},
				},
				{
					Name:     to.Ptr("si3270"),
					Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
					ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/si3270"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armlogic.IntegrationServiceEnvironmentManagedAPIProperties{
						Name: to.Ptr("si3270"),
						Capabilities: []*string{
							to.Ptr("actions")},
						ConnectionParameters: map[string]interface{}{
							"codePage": map[string]interface{}{
								"type":         "int",
								"defaultValue": float64(37),
								"uiDefinition": map[string]interface{}{
									"description": "Specifies the code page of the host.",
									"constraints": map[string]interface{}{
										"required": "false",
										"tabIndex": float64(4),
									},
									"displayName": "Code Page",
									"tooltip":     "Code Page",
								},
							},
							"deviceType": map[string]interface{}{
								"type": "string",
								"allowedValues": []interface{}{
									map[string]interface{}{
										"value": "IBM-3278-2",
									},
									map[string]interface{}{
										"value": "IBM-3278-2-E",
									},
									map[string]interface{}{
										"value": "IBM-3279-2",
									},
									map[string]interface{}{
										"value": "IBM-3279-2-E",
									},
									map[string]interface{}{
										"value": "IBM-3278-3",
									},
									map[string]interface{}{
										"value": "IBM-3278-3-E",
									},
									map[string]interface{}{
										"value": "IBM-3279-3",
									},
									map[string]interface{}{
										"value": "IBM-3279-3-E",
									},
									map[string]interface{}{
										"value": "IBM-3278-4",
									},
									map[string]interface{}{
										"value": "IBM-3278-4-E",
									},
									map[string]interface{}{
										"value": "IBM-3279-4",
									},
									map[string]interface{}{
										"value": "IBM-3279-4-E",
									},
									map[string]interface{}{
										"value": "IBM-3278-5",
									},
									map[string]interface{}{
										"value": "IBM-3278-5-E",
									},
									map[string]interface{}{
										"value": "IBM-3279-5",
									},
									map[string]interface{}{
										"value": "IBM-3279-5-E",
									},
								},
								"defaultValue": "IBM-3278-2",
								"uiDefinition": map[string]interface{}{
									"description": "The 3270 model to use.",
									"constraints": map[string]interface{}{
										"allowedValues": []interface{}{
											map[string]interface{}{
												"text":  "IBM-3278-2",
												"value": "IBM-3278-2",
											},
											map[string]interface{}{
												"text":  "IBM-3278-2-E",
												"value": "IBM-3278-2-E",
											},
											map[string]interface{}{
												"text":  "IBM-3279-2",
												"value": "IBM-3279-2",
											},
											map[string]interface{}{
												"text":  "IBM-3279-2-E",
												"value": "IBM-3279-2-E",
											},
											map[string]interface{}{
												"text":  "IBM-3278-3",
												"value": "IBM-3278-3",
											},
											map[string]interface{}{
												"text":  "IBM-3278-3-E",
												"value": "IBM-3278-3-E",
											},
											map[string]interface{}{
												"text":  "IBM-3279-3",
												"value": "IBM-3279-3",
											},
											map[string]interface{}{
												"text":  "IBM-3279-3-E",
												"value": "IBM-3279-3-E",
											},
											map[string]interface{}{
												"text":  "IBM-3278-4",
												"value": "IBM-3278-4",
											},
											map[string]interface{}{
												"text":  "IBM-3278-4-E",
												"value": "IBM-3278-4-E",
											},
											map[string]interface{}{
												"text":  "IBM-3279-4",
												"value": "IBM-3279-4",
											},
											map[string]interface{}{
												"text":  "IBM-3279-4-E",
												"value": "IBM-3279-4-E",
											},
											map[string]interface{}{
												"text":  "IBM-3278-5",
												"value": "IBM-3278-5",
											},
											map[string]interface{}{
												"text":  "IBM-3278-5-E",
												"value": "IBM-3278-5-E",
											},
											map[string]interface{}{
												"text":  "IBM-3279-5",
												"value": "IBM-3279-5",
											},
											map[string]interface{}{
												"text":  "IBM-3279-5-E",
												"value": "IBM-3279-5-E",
											},
										},
										"required": "false",
										"tabIndex": float64(3),
									},
									"displayName": "Device Type",
									"tooltip":     "Device Type",
								},
							},
							"integrationAccountId": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "Integration Account ID",
									"constraints": map[string]interface{}{
										"required": "true",
									},
									"displayName": "Integration Account ID",
									"tooltip":     "Provide Resource ID for the integration account",
								},
							},
							"integrationAccountUrl": map[string]interface{}{
								"type": "securestring",
								"uiDefinition": map[string]interface{}{
									"description": "Integration Account SAS URL",
									"constraints": map[string]interface{}{
										"required": "true",
									},
									"displayName": "Integration Account SAS URL",
									"tooltip":     "Provide SAS URL for the integration account",
								},
							},
							"logicalUnitName": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The name of specific logical unit to request from the TN 3270 server.",
									"constraints": map[string]interface{}{
										"required": "false",
										"tabIndex": float64(5),
									},
									"displayName": "Logical Unit Name",
									"tooltip":     "Logical Unit Name",
								},
							},
							"port": map[string]interface{}{
								"type":         "int",
								"defaultValue": float64(23),
								"uiDefinition": map[string]interface{}{
									"description": "Specifies the port for the TN 3270 server.",
									"constraints": map[string]interface{}{
										"required": "false",
										"tabIndex": float64(2),
									},
									"displayName": "Port",
									"tooltip":     "Specifies the port for the TN 3270 server",
								},
							},
							"server": map[string]interface{}{
								"type": "string",
								"uiDefinition": map[string]interface{}{
									"description": "The name of the host running a TN 3270 server.",
									"constraints": map[string]interface{}{
										"required": "true",
										"tabIndex": float64(1),
									},
									"displayName": "Server",
									"tooltip":     "Server",
								},
							},
							"useSsl": map[string]interface{}{
								"type":         "bool",
								"defaultValue": "false",
								"uiDefinition": map[string]interface{}{
									"description": "Enable SSL? (True/False)",
									"constraints": map[string]interface{}{
										"required": "false",
										"tabIndex": float64(6),
									},
									"displayName": "Enable SSL?",
									"tooltip":     "Specify if SSL needs to be enabled",
								},
							},
							"validateCertificate": map[string]interface{}{
								"type":         "bool",
								"defaultValue": "false",
								"uiDefinition": map[string]interface{}{
									"description": "Validate host ssl certificate? (True/False)",
									"constraints": map[string]interface{}{
										"required": "false",
										"tabIndex": float64(7),
									},
									"displayName": "Validate host ssl certificate?",
									"tooltip":     "Specify if host ssl certificate should be validated",
								},
							},
						},
						GeneralInformation: &armlogic.APIResourceGeneralInformation{
							Description: to.Ptr("Microsoft Connector for 3270 integrates Azure applications with resources available via TN 3270 Screen Scraping."),
							DisplayName: to.Ptr("IBM 3270"),
							IconURL:     to.Ptr("https://connectoricons-df.azureedge.net/si3270/icon_1.0.1228.1636.png"),
							ReleaseTag:  to.Ptr("Preview"),
							Tier:        to.Ptr(armlogic.APITierEnterprise),
						},
						IntegrationServiceEnvironment: &armlogic.ResourceReference{
							Name: to.Ptr("testIntegrationServiceEnvironment"),
							Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
							ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
						},
						Metadata: &armlogic.APIResourceMetadata{
							BrandColor:     to.Ptr("#59b4d9"),
							ConnectionType: to.Ptr("integrationAccount"),
							Source:         to.Ptr("marketplace"),
						},
						ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
						RuntimeUrls: []*string{
							to.Ptr("https://flow-yticlpbiumhig-cqsn-apim-runtime.brazilus.environments.microsoftazurelogicapps.net/apim/si3270")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IntegrationServiceEnvironmentManagedAPIListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IntegrationServiceEnvironmentManagedAPIListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationServiceEnvironmentManagedApis_Get(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the integration service environment managed Apis"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationServiceEnvironmentManagedApisClient("f34b22a3-2202-4fb1-b040-1332bd928c84", cred, &options)
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		"servicebus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationServiceEnvironmentManagedAPI{
			Name:     to.Ptr("servicebus"),
			Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
			ID:       to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/servicebus"),
			Location: to.Ptr("northeurope"),
			Properties: &armlogic.IntegrationServiceEnvironmentManagedAPIProperties{
				Name: to.Ptr("servicebus"),
				Capabilities: []*string{
					to.Ptr("actions")},
				ConnectionParameters: map[string]interface{}{
					"connectionString": map[string]interface{}{
						"type": "securestring",
						"uiDefinition": map[string]interface{}{
							"description": "Azure Service Bus Connection String",
							"constraints": map[string]interface{}{
								"required": "true",
							},
							"displayName": "Connection String",
							"tooltip":     "Provide Azure Service Bus Connection String",
						},
					},
				},
				GeneralInformation: &armlogic.APIResourceGeneralInformation{
					Description: to.Ptr("Connect to Azure Service Bus to send and receive messages. You can perform actions such as send to queue, send to topic, receive from queue, receive from subscription, etc."),
					DisplayName: to.Ptr("Service Bus"),
					IconURL:     to.Ptr("https://cpgeneralstore.blob.core.windows.net/officialicons/servicebus/icon_1.0.1206.1574.png"),
					ReleaseTag:  to.Ptr("Production"),
					Tier:        to.Ptr(armlogic.APITierStandard),
				},
				IntegrationServiceEnvironment: &armlogic.ResourceReference{
					Name: to.Ptr("testIntegrationServiceEnvironment"),
					Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
					ID:   to.Ptr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
				},
				Metadata: &armlogic.APIResourceMetadata{
					BrandColor: to.Ptr("#c4d5ff"),
					Source:     to.Ptr("marketplace"),
				},
				ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
				RuntimeUrls: []*string{
					to.Ptr("https://flow-weiroa6odksti-db-apim-runtime.northeurope.environments.microsoftazurelogicapps.net/apim/servicebus")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationServiceEnvironmentManagedAPI) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationServiceEnvironmentManagedAPI)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationServiceEnvironmentManagedApis_Put(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the integration service environment managed Apis"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationServiceEnvironmentManagedApisClient("f34b22a3-2202-4fb1-b040-1332bd928c84", cred, &options)
	poller, err := client.BeginPut(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		"servicebus",
		armlogic.IntegrationServiceEnvironmentManagedAPI{
			Location:   to.Ptr("brazilsouth"),
			Properties: &armlogic.IntegrationServiceEnvironmentManagedAPIProperties{},
		},
		&armlogic.IntegrationServiceEnvironmentManagedApisClientBeginPutOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_Put.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogic.IntegrationServiceEnvironmentManagedAPI{
			Name:     to.Ptr("servicebus"),
			Type:     to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
			ID:       to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/rohithah-ise/providers/Microsoft.Logic/integrationServiceEnvironments/tes-ise-ga/managedApis/servicebus"),
			Location: to.Ptr("brazilsouth"),
			Properties: &armlogic.IntegrationServiceEnvironmentManagedAPIProperties{
				Category: to.Ptr(armlogic.APITierStandard),
				GeneralInformation: &armlogic.APIResourceGeneralInformation{
					Description: to.Ptr("Connect to Azure Service Bus to send and receive messages. You can perform actions such as send to queue, send to topic, receive from queue, receive from subscription, etc."),
					DisplayName: to.Ptr("Service Bus"),
					IconURL:     to.Ptr("https://connectoricons-df.azureedge.net/servicebus/icon_1.0.1223.1623.png"),
					ReleaseTag:  to.Ptr("Production"),
					Tier:        to.Ptr(armlogic.APITierStandard),
				},
				IntegrationServiceEnvironment: &armlogic.ResourceReference{
					Name: to.Ptr("tes-ise-ga"),
					Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
					ID:   to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/rohithah-ise/providers/Microsoft.Logic/integrationServiceEnvironments/tes-ise-ga"),
				},
				ProvisioningState: to.Ptr(armlogic.WorkflowProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationServiceEnvironmentManagedAPI) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationServiceEnvironmentManagedAPI)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationServiceEnvironmentManagedApis_Delete(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the integration service environment managed Apis"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationServiceEnvironmentManagedApisClient("f34b22a3-2202-4fb1-b040-1332bd928c84", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		"servicebus",
		&armlogic.IntegrationServiceEnvironmentManagedApisClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_Delete.json: %v", err)
	}
}

func TestIntegrationServiceEnvironmentManagedAPIOperations_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_ListApiOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the integration service environment managed Apis"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewIntegrationServiceEnvironmentManagedAPIOperationsClient("80d4fe69-c95b-4dd2-a938-9250f1c8ab03", cred, &options)
	pager := client.List("testResourceGroup",
		"testIntegrationServiceEnvironment",
		"servicebus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_ListApiOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.APIOperationListResult{
			Value: []*armlogic.APIOperation{
				{
					Name:     to.Ptr("SendMessage"),
					ID:       to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/servicebus/apiOperations/SendMessage"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armlogic.APIOperationPropertiesDefinition{
						Description: to.Ptr("This operation sends a message to a queue or topic."),
						Annotation: &armlogic.APIOperationAnnotation{
							Family:   to.Ptr("SendMessage"),
							Revision: to.Ptr[int32](1),
							Status:   to.Ptr(armlogic.StatusAnnotationProduction),
						},
						API: &armlogic.APIReference{
							Type:        to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
							ID:          to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/servicebus"),
							Description: to.Ptr("Connect to Azure Service Bus to send and receive messages. You can perform actions such as send to queue, send to topic, receive from queue, receive from subscription, etc."),
							BrandColor:  to.Ptr("#c4d5ff"),
							Category:    to.Ptr(armlogic.APITierStandard),
							DisplayName: to.Ptr("Service Bus"),
							IconURI:     to.Ptr("https://powerappsconnectorsdf.blob.core.windows.net/officialicons/servicebus/icon_1.0.1216.1605.png"),
							IntegrationServiceEnvironment: &armlogic.ResourceReference{
								Name: to.Ptr("testIntegrationServiceEnvironment"),
								Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
								ID:   to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
							},
						},
						IsNotification: to.Ptr(false),
						IsWebhook:      to.Ptr(false),
						Pageable:       to.Ptr(false),
						Summary:        to.Ptr("Send message"),
						Visibility:     to.Ptr("important"),
					},
				},
				{
					Name:     to.Ptr("SendMessages"),
					ID:       to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/servicebus/apiOperations/SendMessages"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armlogic.APIOperationPropertiesDefinition{
						Description: to.Ptr("This operation sends one or more messages to a queue or topic."),
						Annotation: &armlogic.APIOperationAnnotation{
							Family:   to.Ptr("SendMessages"),
							Revision: to.Ptr[int32](1),
							Status:   to.Ptr(armlogic.StatusAnnotationProduction),
						},
						API: &armlogic.APIReference{
							Type:        to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
							ID:          to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/servicebus"),
							Description: to.Ptr("Connect to Azure Service Bus to send and receive messages. You can perform actions such as send to queue, send to topic, receive from queue, receive from subscription, etc."),
							BrandColor:  to.Ptr("#c4d5ff"),
							Category:    to.Ptr(armlogic.APITierStandard),
							DisplayName: to.Ptr("Service Bus"),
							IconURI:     to.Ptr("https://powerappsconnectorsdf.blob.core.windows.net/officialicons/servicebus/icon_1.0.1216.1605.png"),
							IntegrationServiceEnvironment: &armlogic.ResourceReference{
								Name: to.Ptr("testIntegrationServiceEnvironment"),
								Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
								ID:   to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
							},
						},
						IsNotification: to.Ptr(false),
						IsWebhook:      to.Ptr(false),
						Pageable:       to.Ptr(false),
						Summary:        to.Ptr("Send one or more messages"),
						Visibility:     to.Ptr("important"),
					},
				},
				{
					Name:     to.Ptr("GetMessageFromQueue"),
					ID:       to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/servicebus/apiOperations/GetMessageFromQueue"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armlogic.APIOperationPropertiesDefinition{
						Description: to.Ptr("This operation triggers a flow when a message is received in a queue and auto completes the message."),
						Annotation: &armlogic.APIOperationAnnotation{
							Family:   to.Ptr("GetMessageFromQueue"),
							Revision: to.Ptr[int32](1),
							Status:   to.Ptr(armlogic.StatusAnnotationProduction),
						},
						API: &armlogic.APIReference{
							Type:        to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
							ID:          to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/servicebus"),
							Description: to.Ptr("Connect to Azure Service Bus to send and receive messages. You can perform actions such as send to queue, send to topic, receive from queue, receive from subscription, etc."),
							BrandColor:  to.Ptr("#c4d5ff"),
							Category:    to.Ptr(armlogic.APITierStandard),
							DisplayName: to.Ptr("Service Bus"),
							IconURI:     to.Ptr("https://powerappsconnectorsdf.blob.core.windows.net/officialicons/servicebus/icon_1.0.1216.1605.png"),
							IntegrationServiceEnvironment: &armlogic.ResourceReference{
								Name: to.Ptr("testIntegrationServiceEnvironment"),
								Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
								ID:   to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
							},
						},
						IsNotification: to.Ptr(false),
						IsWebhook:      to.Ptr(false),
						Pageable:       to.Ptr(false),
						Summary:        to.Ptr("When a message is received in a queue (auto-complete)"),
						Trigger:        to.Ptr("single"),
						Visibility:     to.Ptr("important"),
					},
				},
				{
					Name:     to.Ptr("GetNewMessageFromQueueWithPeekLock"),
					ID:       to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/servicebus/apiOperations/GetNewMessageFromQueueWithPeekLock"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armlogic.APIOperationPropertiesDefinition{
						Description: to.Ptr("The operation triggers a flow when a message received in a queue with peek-lock mode."),
						Annotation: &armlogic.APIOperationAnnotation{
							Family:   to.Ptr("GetNewMessageFromQueueWithPeekLock"),
							Revision: to.Ptr[int32](1),
							Status:   to.Ptr(armlogic.StatusAnnotationProduction),
						},
						API: &armlogic.APIReference{
							Type:        to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
							ID:          to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/servicebus"),
							Description: to.Ptr("Connect to Azure Service Bus to send and receive messages. You can perform actions such as send to queue, send to topic, receive from queue, receive from subscription, etc."),
							BrandColor:  to.Ptr("#c4d5ff"),
							Category:    to.Ptr(armlogic.APITierStandard),
							DisplayName: to.Ptr("Service Bus"),
							IconURI:     to.Ptr("https://powerappsconnectorsdf.blob.core.windows.net/officialicons/servicebus/icon_1.0.1216.1605.png"),
							IntegrationServiceEnvironment: &armlogic.ResourceReference{
								Name: to.Ptr("testIntegrationServiceEnvironment"),
								Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
								ID:   to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
							},
						},
						IsNotification: to.Ptr(false),
						IsWebhook:      to.Ptr(false),
						Pageable:       to.Ptr(false),
						Summary:        to.Ptr("When a message is received in a queue (peek-lock)"),
						Trigger:        to.Ptr("single"),
						Visibility:     to.Ptr("important"),
					},
				},
				{
					Name:     to.Ptr("GetMessageFromTopic"),
					ID:       to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/servicebus/apiOperations/GetMessageFromTopic"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armlogic.APIOperationPropertiesDefinition{
						Description: to.Ptr("This operation triggers a flow when a message is received in a topic subscription and auto completes the message."),
						Annotation: &armlogic.APIOperationAnnotation{
							Family:   to.Ptr("GetMessageFromTopic"),
							Revision: to.Ptr[int32](1),
							Status:   to.Ptr(armlogic.StatusAnnotationProduction),
						},
						API: &armlogic.APIReference{
							Type:        to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
							ID:          to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/servicebus"),
							Description: to.Ptr("Connect to Azure Service Bus to send and receive messages. You can perform actions such as send to queue, send to topic, receive from queue, receive from subscription, etc."),
							BrandColor:  to.Ptr("#c4d5ff"),
							Category:    to.Ptr(armlogic.APITierStandard),
							DisplayName: to.Ptr("Service Bus"),
							IconURI:     to.Ptr("https://powerappsconnectorsdf.blob.core.windows.net/officialicons/servicebus/icon_1.0.1216.1605.png"),
							IntegrationServiceEnvironment: &armlogic.ResourceReference{
								Name: to.Ptr("testIntegrationServiceEnvironment"),
								Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
								ID:   to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
							},
						},
						IsNotification: to.Ptr(false),
						IsWebhook:      to.Ptr(false),
						Pageable:       to.Ptr(false),
						Summary:        to.Ptr("When a message is received in a topic subscription (auto-complete)"),
						Trigger:        to.Ptr("single"),
						Visibility:     to.Ptr("important"),
					},
				},
				{
					Name:     to.Ptr("GetNewMessageFromTopicWithPeekLock"),
					ID:       to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/servicebus/apiOperations/GetNewMessageFromTopicWithPeekLock"),
					Location: to.Ptr("brazilsouth"),
					Properties: &armlogic.APIOperationPropertiesDefinition{
						Description: to.Ptr("The operation triggers a flow when a message received in a topic subscription with peek-lock mode."),
						Annotation: &armlogic.APIOperationAnnotation{
							Family:   to.Ptr("GetNewMessageFromTopicWithPeekLock"),
							Revision: to.Ptr[int32](1),
							Status:   to.Ptr(armlogic.StatusAnnotationProduction),
						},
						API: &armlogic.APIReference{
							Type:        to.Ptr("Microsoft.Logic/integrationServiceEnvironments/managedApis"),
							ID:          to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment/managedApis/servicebus"),
							Description: to.Ptr("Connect to Azure Service Bus to send and receive messages. You can perform actions such as send to queue, send to topic, receive from queue, receive from subscription, etc."),
							BrandColor:  to.Ptr("#c4d5ff"),
							Category:    to.Ptr(armlogic.APITierStandard),
							DisplayName: to.Ptr("Service Bus"),
							IconURI:     to.Ptr("https://powerappsconnectorsdf.blob.core.windows.net/officialicons/servicebus/icon_1.0.1216.1605.png"),
							IntegrationServiceEnvironment: &armlogic.ResourceReference{
								Name: to.Ptr("testIntegrationServiceEnvironment"),
								Type: to.Ptr("Microsoft.Logic/integrationServiceEnvironments"),
								ID:   to.Ptr("/subscriptions/80d4fe69-c95b-4dd2-a938-9250f1c8ab03/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationServiceEnvironments/testIntegrationServiceEnvironment"),
							},
						},
						IsNotification: to.Ptr(false),
						IsWebhook:      to.Ptr(false),
						Pageable:       to.Ptr(false),
						Summary:        to.Ptr("When a message is received in a topic subscription (peek-lock)"),
						Trigger:        to.Ptr("single"),
						Visibility:     to.Ptr("important"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.APIOperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.APIOperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/IntegrationServiceEnvironments_ManagedApis_ListApiOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Microsoft.Logic operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogic.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogic.OperationListResult{
			Value: []*armlogic.Operation{
				{
					Name: to.Ptr("Microsoft.Logic/operations/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Gets the operation."),
						Operation:   to.Ptr("Get Operation"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Operation"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/register/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Registers the Microsoft.Logic resource provider for a given subscription."),
						Operation:   to.Ptr("Register Resource Provider"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Resource Provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/locations/workflows/validate/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Validates the workflow."),
						Operation:   to.Ptr("Validate Workflow"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the workflow."),
						Operation:   to.Ptr("Get Workflow"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/write"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Creates or updates the workflow."),
						Operation:   to.Ptr("Set Workflow"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/delete"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Deletes the workflow."),
						Operation:   to.Ptr("Delete Workflow"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/run/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Starts a run of the workflow."),
						Operation:   to.Ptr("Run Workflow"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/disable/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Disables the workflow."),
						Operation:   to.Ptr("Disable Workflow"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/enable/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Enables the workflow."),
						Operation:   to.Ptr("Enable Workflow"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/suspend/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Suspends the workflow."),
						Operation:   to.Ptr("Suspend Workflow"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/validate/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Validates the workflow."),
						Operation:   to.Ptr("Validate Workflow"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/move/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Moves Workflow from its existing subscription id, resource group, and/or name to a different subscription id, resource group, and/or name."),
						Operation:   to.Ptr("Move Workflow"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/listSwagger/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Gets the workflow swagger definitions."),
						Operation:   to.Ptr("Get workflow swagger"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/versions/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the workflow version."),
						Operation:   to.Ptr("Get Workflow Version"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow Version"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/versions/triggers/listCallbackUrl/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Gets the callback URL for trigger."),
						Operation:   to.Ptr("List Trigger Callback URL"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Trigger"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/accessKeys/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the access key."),
						Operation:   to.Ptr("Get Access Key"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Access Key"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/accessKeys/write"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Creates or updates the access key."),
						Operation:   to.Ptr("Set Access Key"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Access Key"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/accessKeys/delete"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Deletes the access key."),
						Operation:   to.Ptr("Delete Access Key"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Access Key"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/accessKeys/list/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Lists the access key secrets."),
						Operation:   to.Ptr("List Access Key"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Access Key"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/accessKeys/regenerate/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Regenerates the access key secrets."),
						Operation:   to.Ptr("Regenerate Access Key"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Access Key"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/regenerateAccessKey/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Regenerates the access key secrets."),
						Operation:   to.Ptr("Regenerate Access Key"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Access Key"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/listCallbackUrl/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Gets the callback URL for workflow."),
						Operation:   to.Ptr("List workflow callback URL"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/triggers/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the trigger."),
						Operation:   to.Ptr("Get Trigger"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Trigger"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/triggers/run/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Executes the trigger."),
						Operation:   to.Ptr("Trigger Run"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Trigger"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/triggers/reset/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Resets the trigger."),
						Operation:   to.Ptr("Trigger Reset"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Trigger"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/triggers/setState/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Sets the trigger state."),
						Operation:   to.Ptr("Set Trigger State"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Trigger"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/triggers/histories/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the trigger histories."),
						Operation:   to.Ptr("Get Trigger Histories"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Trigger Histories"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/triggers/histories/resubmit/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Resubmits the workflow trigger."),
						Operation:   to.Ptr("Resubmit trigger"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Trigger Histories"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/triggers/listCallbackUrl/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Gets the callback URL for trigger."),
						Operation:   to.Ptr("List Trigger Callback URL"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Trigger"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/runs/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the workflow run."),
						Operation:   to.Ptr("Get Workflow Run"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow Run"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/runs/cancel/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Cancels the run of a workflow."),
						Operation:   to.Ptr("Cancel Workflow Run"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow Run"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/runs/operations/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the workflow run operation status."),
						Operation:   to.Ptr("Get Workflow Run Operation Status"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow Run Operation"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/runs/actions/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the workflow run action."),
						Operation:   to.Ptr("Get Workflow Run Action"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow Run Action"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/runs/actions/repetitions/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the workflow run action repetition."),
						Operation:   to.Ptr("Get Workflow Run Action Repetition"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow Run Action Repetition"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/runs/actions/scoperepetitions/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the workflow run action scope repetition."),
						Operation:   to.Ptr("Get Workflow Run Action Scope Repetition"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow Run Action Scope Repetition"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/runs/actions/requestHistories/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the workflow run action request history."),
						Operation:   to.Ptr("Gets the workflow run action request history"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow run action request history"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/runs/actions/repetitions/requestHistories/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the workflow run repetition action request history."),
						Operation:   to.Ptr("Gets the workflow run repetition action request history"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow run repetition action request history"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the workflow diagnostic settings."),
						Operation:   to.Ptr("Get Workflow Diagnostic Setting"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow Diagnostic Setting"),
					},
					Origin: to.Ptr("System"),
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Creates or updates the workflow diagnostic setting."),
						Operation:   to.Ptr("Set Workflow Diagnostic Setting"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow Diagnostic Setting"),
					},
					Origin: to.Ptr("System"),
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the workflow metric definitions."),
						Operation:   to.Ptr("Get Workflow Metric Definition"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow Metric Definition"),
					},
					Origin: to.Ptr("System"),
					Properties: map[string]interface{}{
						"serviceSpecification": map[string]interface{}{
							"metricSpecifications": []interface{}{
								map[string]interface{}{
									"name":            "RunsStarted",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow runs started.",
									"displayName":        "Runs Started",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "RunsCompleted",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow runs completed.",
									"displayName":        "Runs Completed",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "RunsSucceeded",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow runs succeeded.",
									"displayName":        "Runs Succeeded",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "RunsFailed",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow runs failed.",
									"displayName":        "Runs Failed",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "RunsCancelled",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow runs cancelled.",
									"displayName":        "Runs Cancelled",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "RunLatency",
									"aggregationType": "Average",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Latency of completed workflow runs.",
									"displayName":        "Run Latency",
									"fillGapWithZero":    false,
									"unit":               "Seconds",
								},
								map[string]interface{}{
									"name":            "RunSuccessLatency",
									"aggregationType": "Average",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Latency of succeeded workflow runs.",
									"displayName":        "Run Success Latency",
									"fillGapWithZero":    false,
									"unit":               "Seconds",
								},
								map[string]interface{}{
									"name":            "RunThrottledEvents",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow action or trigger throttled events.",
									"displayName":        "Run Throttled Events",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "RunFailurePercentage",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Percentage of workflow runs failed.",
									"displayName":        "Run Failure Percentage",
									"fillGapWithZero":    true,
									"unit":               "Percent",
								},
								map[string]interface{}{
									"name":            "ActionsStarted",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow actions started.",
									"displayName":        "Actions Started ",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "ActionsCompleted",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow actions completed.",
									"displayName":        "Actions Completed ",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "ActionsSucceeded",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow actions succeeded.",
									"displayName":        "Actions Succeeded ",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "ActionsFailed",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow actions failed.",
									"displayName":        "Actions Failed ",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "ActionsSkipped",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow actions skipped.",
									"displayName":        "Actions Skipped ",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "ActionLatency",
									"aggregationType": "Average",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Latency of completed workflow actions.",
									"displayName":        "Action Latency ",
									"fillGapWithZero":    false,
									"unit":               "Seconds",
								},
								map[string]interface{}{
									"name":            "ActionSuccessLatency",
									"aggregationType": "Average",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Latency of succeeded workflow actions.",
									"displayName":        "Action Success Latency ",
									"fillGapWithZero":    false,
									"unit":               "Seconds",
								},
								map[string]interface{}{
									"name":            "ActionThrottledEvents",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow action throttled events..",
									"displayName":        "Action Throttled Events",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "TriggersStarted",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow triggers started.",
									"displayName":        "Triggers Started ",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "TriggersCompleted",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow triggers completed.",
									"displayName":        "Triggers Completed ",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "TriggersSucceeded",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow triggers succeeded.",
									"displayName":        "Triggers Succeeded ",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "TriggersFailed",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow triggers failed.",
									"displayName":        "Triggers Failed ",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "TriggersSkipped",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow triggers skipped.",
									"displayName":        "Triggers Skipped",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "TriggersFired",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow triggers fired.",
									"displayName":        "Triggers Fired ",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "TriggerLatency",
									"aggregationType": "Average",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Latency of completed workflow triggers.",
									"displayName":        "Trigger Latency ",
									"fillGapWithZero":    false,
									"unit":               "Seconds",
								},
								map[string]interface{}{
									"name":            "TriggerFireLatency",
									"aggregationType": "Average",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Latency of fired workflow triggers.",
									"displayName":        "Trigger Fire Latency ",
									"fillGapWithZero":    false,
									"unit":               "Seconds",
								},
								map[string]interface{}{
									"name":            "TriggerSuccessLatency",
									"aggregationType": "Average",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Latency of succeeded workflow triggers.",
									"displayName":        "Trigger Success Latency ",
									"fillGapWithZero":    false,
									"unit":               "Seconds",
								},
								map[string]interface{}{
									"name":            "TriggerThrottledEvents",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow trigger throttled events.",
									"displayName":        "Trigger Throttled Events",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "BillableActionExecutions",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow action executions getting billed.",
									"displayName":        "Billable Action Executions",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "BillableTriggerExecutions",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow trigger executions getting billed.",
									"displayName":        "Billable Trigger Executions",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "TotalBillableExecutions",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of workflow executions getting billed.",
									"displayName":        "Total Billable Executions",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "BillableNativeActionExecutions",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of native workflow action executions getting billed.",
									"displayName":        "Billable Native Action Executions",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "BillableNativeTriggerExecutions",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of native workflow trigger executions getting billed.",
									"displayName":        "Billable Native Trigger Executions",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "TotalBillableNativeExecutions",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of native workflow executions getting billed.",
									"displayName":        "Total Native Billable Executions",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "BillableStandardActionExecutions",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of standard workflow action executions getting billed.",
									"displayName":        "Billable Standard Action Executions",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "BillableStandardTriggerExecutions",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of standard workflow trigger executions getting billed.",
									"displayName":        "Billable Standard Trigger Executions",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":            "TotalBillableStandardExecutions",
									"aggregationType": "Total",
									"availabilities": []interface{}{
										map[string]interface{}{
											"blobDuration": "PT1H",
											"timeGrain":    "PT1M",
										},
									},
									"dimensions":         []interface{}{},
									"displayDescription": "Number of standard workflow executions getting billed.",
									"displayName":        "Total Standard Billable Executions",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
							},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/providers/Microsoft.Insights/logDefinitions/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the workflow log definitions."),
						Operation:   to.Ptr("Get Workflow Log Definition"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow Log Definition"),
					},
					Origin: to.Ptr("System"),
					Properties: map[string]interface{}{
						"serviceSpecification": map[string]interface{}{
							"logSpecifications": []interface{}{
								map[string]interface{}{
									"name":         "WorkflowRuntime",
									"description":  "Diagnostic events related to workflow runtime executions.",
									"blobDuration": "PT1H",
									"displayName":  "Workflow runtime diagnostic events",
								},
							},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/runs/actions/listExpressionTraces/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Gets the workflow run action expression traces."),
						Operation:   to.Ptr("List Workflow Run Action Expression Traces"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow Run Action"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/workflows/runs/actions/repetitions/listExpressionTraces/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Gets the workflow run action repetition expression traces."),
						Operation:   to.Ptr("List Workflow Run Action Repetition Expression Traces"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Workflow Run Action Repetition"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/providers/Microsoft.Insights/logDefinitions/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the Integration Account log definitions."),
						Operation:   to.Ptr("Get Integration Account Log Definition"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Log Definition"),
					},
					Origin: to.Ptr("System"),
					Properties: map[string]interface{}{
						"serviceSpecification": map[string]interface{}{
							"logSpecifications": []interface{}{
								map[string]interface{}{
									"name":         "IntegrationAccountTrackingEvents",
									"description":  "Track events related to Integration Account.",
									"blobDuration": "PT1H",
									"displayName":  "Integration Account track events",
								},
							},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the integration account."),
						Operation:   to.Ptr("Get Integration Account"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/write"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Creates or updates the integration account."),
						Operation:   to.Ptr("Set Integration Account"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/delete"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Deletes the integration account."),
						Operation:   to.Ptr("Delete Integration Account"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/regenerateAccessKey/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Regenerates the access key secrets."),
						Operation:   to.Ptr("Regenerate Access Key"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/listCallbackUrl/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Gets the callback URL for integration account."),
						Operation:   to.Ptr("List Integration Account Callback URL"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/listKeyVaultKeys/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Gets the keys in the key vault."),
						Operation:   to.Ptr("List Key Vault Keys"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/logTrackingEvents/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Logs the tracking events in the integration account."),
						Operation:   to.Ptr("Log Integration Account Tracking Events"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/join/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Joins the Integration Account."),
						Operation:   to.Ptr("Join Integration Account"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/partners/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the parter in integration account."),
						Operation:   to.Ptr("Get Integration Account Partner"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Partner"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/partners/write"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Creates or updates the partner in integration account."),
						Operation:   to.Ptr("Set Integration Account Partner"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Partner"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/partners/delete"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Deletes the partner in integration account."),
						Operation:   to.Ptr("Delete Integration Account Partner"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Partner"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/partners/listContentCallbackUrl/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Gets the callback URL for partner content in integration account."),
						Operation:   to.Ptr("List Integration Account Partner Content Callback URL"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Partner"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/agreements/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the agreement in integration account."),
						Operation:   to.Ptr("Get Integration Account Agreement"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Agreement"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/agreements/write"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Creates or updates the agreement in integration account."),
						Operation:   to.Ptr("Set Integration Account Agreement"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Agreement"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/agreements/delete"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Deletes the agreement in integration account."),
						Operation:   to.Ptr("Delete Integration Account Agreement"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Agreement"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/agreements/listContentCallbackUrl/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Gets the callback URL for agreement content in integration account."),
						Operation:   to.Ptr("List Integration Account Agreement Content Callback URL"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Agreement"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/certificates/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the certificate in integration account."),
						Operation:   to.Ptr("Get Integration Account Certificate"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Certificate"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/certificates/write"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Creates or updates the certificate in integration account."),
						Operation:   to.Ptr("Set Integration Account Certificate"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Certificate"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/certificates/delete"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Deletes the certificate in integration account."),
						Operation:   to.Ptr("Delete Integration Account Certificate"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Certificate"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/schemas/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the schema in integration account."),
						Operation:   to.Ptr("Get Integration Account Schema"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Schema"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/schemas/write"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Creates or updates the schema in integration account."),
						Operation:   to.Ptr("Set Integration Account Schema"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Schema"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/schemas/delete"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Deletes the schema in integration account."),
						Operation:   to.Ptr("Delete Integration Account Schema"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Schema"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/schemas/listContentCallbackUrl/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Gets the callback URL for schema content in integration account."),
						Operation:   to.Ptr("List Integration Account Schema Content Callback URL"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Schema"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/maps/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the map in integration account."),
						Operation:   to.Ptr("Get Integration Account Map"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Map"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/maps/write"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Creates or updates the map in integration account."),
						Operation:   to.Ptr("Set Integration Account Map"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Map"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/maps/delete"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Deletes the map in integration account."),
						Operation:   to.Ptr("Delete Integration Account Map"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Map"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/maps/listContentCallbackUrl/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Gets the callback URL for map content in integration account."),
						Operation:   to.Ptr("List Integration Account Map Content Callback URL"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Map"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/assemblies/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the assembly in integration account."),
						Operation:   to.Ptr("Get Integration Account Assembly"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Assembly"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/assemblies/write"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Creates or updates the assembly in integration account."),
						Operation:   to.Ptr("Set Integration Account Assembly"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Assembly"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/assemblies/delete"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Deletes the assembly in integration account."),
						Operation:   to.Ptr("Delete Integration Account Assembly"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Assembly"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/assemblies/listContentCallbackUrl/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Gets the callback URL for assembly content in integration account."),
						Operation:   to.Ptr("List Integration Account Assembly Content Callback URL"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Assembly"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/batchConfigurations/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the batch configuration in integration account."),
						Operation:   to.Ptr("Get Integration Account Batch Configuration"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Batch Configuration"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/batchConfigurations/write"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Creates or updates the batch configuration in integration account."),
						Operation:   to.Ptr("Set Integration Account Batch Configuration"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Batch Configuration"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/batchConfigurations/delete"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Deletes the batch configuration in integration account."),
						Operation:   to.Ptr("Delete Integration Account Batch Configuration"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Batch Configuration"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/sessions/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the batch configuration in integration account."),
						Operation:   to.Ptr("Get Integration Account Session"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Session"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/sessions/write"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Creates or updates the session in integration account."),
						Operation:   to.Ptr("Set Integration Account Session"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Session"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationAccounts/sessions/delete"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Deletes the session in integration account."),
						Operation:   to.Ptr("Delete Integration Account Session"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Account Session"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationServiceEnvironments/read"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Reads the integration service environment."),
						Operation:   to.Ptr("Get Integration Service Environment"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Service Environment"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationServiceEnvironments/write"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Creates or updates the integration service environment."),
						Operation:   to.Ptr("Set Integration Service Environment"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Service Environment"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationServiceEnvironments/delete"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Deletes the integration service environment."),
						Operation:   to.Ptr("Delete Integration Service Environment"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Service Environment"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Logic/integrationServiceEnvironments/join/action"),
					Display: &armlogic.OperationDisplay{
						Description: to.Ptr("Joins the Integration Service Environment."),
						Operation:   to.Ptr("Join Integration Service Environment"),
						Provider:    to.Ptr("Microsoft Logic"),
						Resource:    to.Ptr("Integration Service Environment"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logic/resource-manager/Microsoft.Logic/stable/2019-05-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
