//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlogic

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestWorkflows_ListBySubscription(t *testing.T) {
	// From example List all workflows in a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListBySubscription(&WorkflowsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Workflow.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Workflow.ID should not be nil!")
			}
		}
	}
}

func TestWorkflows_ListByResourceGroup(t *testing.T) {
	// From example List all workflows in a resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByResourceGroup("test-resource-group",
		&WorkflowsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Workflow.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Workflow.ID should not be nil!")
			}
		}
	}
}

func TestWorkflows_Get(t *testing.T) {
	// From example Get a workflow
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"test-resource-group",
		"test-workflow",
		&WorkflowsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Workflow.ID == nil {
		t.Fatal("Workflow.ID should not be nil!")
	}
}

func TestWorkflows_CreateOrUpdate(t *testing.T) {
	// From example Create or update a workflow
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"test-resource-group",
		"test-workflow",
		Workflow{
			Resource: Resource{
				Location: to.StringPtr("brazilsouth"),
				Tags:     map[string]*string{},
			},
			Properties: &WorkflowProperties{
				Definition: map[string]interface{}{
					"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"actions": map[string]interface{}{
						"Find_pet_by_ID": map[string]interface{}{
							"type": "ApiConnection",
							"inputs": map[string]interface{}{
								"path":   "/pet/@{encodeURIComponent('1')}",
								"method": "get",
								"host": map[string]interface{}{
									"connection": map[string]interface{}{
										"name": "@parameters('$connections')['test-custom-connector']['connectionId']",
									},
								},
							},
							"runAfter": map[string]interface{}{},
						},
					},
					"contentVersion": "1.0.0.0",
					"outputs":        map[string]interface{}{},
					"parameters": map[string]interface{}{
						"$connections": map[string]interface{}{
							"type":         "Object",
							"defaultValue": map[string]interface{}{},
						},
					},
					"triggers": map[string]interface{}{
						"manual": map[string]interface{}{
							"type": "Request",
							"inputs": map[string]interface{}{
								"schema": map[string]interface{}{},
							},
							"kind": "Http",
						},
					},
				},
				IntegrationAccount: &ResourceReference{
					ID: to.StringPtr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationAccounts/test-integration-account"),
				},
				Parameters: map[string]*WorkflowParameter{
					"$connections": &WorkflowParameter{
						Value: map[string]interface{}{
							"test-custom-connector": map[string]interface{}{
								"connectionId":   "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Web/connections/test-custom-connector",
								"connectionName": "test-custom-connector",
								"id":             "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.Web/locations/brazilsouth/managedApis/test-custom-connector",
							},
						},
					},
				},
			},
		},
		&WorkflowsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Workflow.ID == nil {
		t.Fatal("Workflow.ID should not be nil!")
	}
}

func TestWorkflows_Update(t *testing.T) {
	// From example Patch a workflow
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Update(ctx,
		"test-resource-group",
		"test-workflow",
		&WorkflowsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Workflow.ID == nil {
		t.Fatal("Workflow.ID should not be nil!")
	}
}

func TestWorkflows_Delete(t *testing.T) {
	// From example Delete a workflow
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"test-resource-group",
		"test-workflow",
		&WorkflowsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflows_Disable(t *testing.T) {
	// From example Disable a workflow
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Disable(ctx,
		"test-resource-group",
		"test-workflow",
		&WorkflowsDisableOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflows_Enable(t *testing.T) {
	// From example Enable a workflow
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Enable(ctx,
		"test-resource-group",
		"test-workflow",
		&WorkflowsEnableOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflows_GenerateUpgradedDefinition(t *testing.T) {
	// From example Generate an upgraded definition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GenerateUpgradedDefinition(ctx,
		"test-resource-group",
		"test-workflow",
		GenerateUpgradedDefinitionParameters{
			TargetSchemaVersion: to.StringPtr("2016-06-01"),
		},
		&WorkflowsGenerateUpgradedDefinitionOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflows_ListCallbackUrl(t *testing.T) {
	// From example Get callback url
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ListCallbackURL(ctx,
		"testResourceGroup",
		"testWorkflow",
		GetCallbackURLParameters{
			KeyType:  KeyTypePrimary.ToPtr(),
			NotAfter: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-19T16:00:00Z"); return t }()),
		},
		&WorkflowsListCallbackURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflows_ListSwagger(t *testing.T) {
	// From example Get the swagger for a workflow
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ListSwagger(ctx,
		"testResourceGroup",
		"testWorkflowName",
		&WorkflowsListSwaggerOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflows_Move(t *testing.T) {
	// From example Move a workflow
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginMove(ctx,
		"testResourceGroup",
		"testWorkflow",
		WorkflowReference{
			ResourceReference: ResourceReference{
				ID: to.StringPtr("subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/newResourceGroup/providers/Microsoft.Logic/workflows/newWorkflowName"),
			},
		},
		&WorkflowsBeginMoveOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflows_RegenerateAccessKey(t *testing.T) {
	// From example Regenerate the callback URL access key for request triggers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.RegenerateAccessKey(ctx,
		"testResourceGroup",
		"testWorkflowName",
		RegenerateActionParameter{
			KeyType: KeyTypePrimary.ToPtr(),
		},
		&WorkflowsRegenerateAccessKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflows_ValidateByResourceGroup(t *testing.T) {
	// From example Validate a workflow
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ValidateByResourceGroup(ctx,
		"test-resource-group",
		"test-workflow",
		Workflow{
			Resource: Resource{
				Location: to.StringPtr("brazilsouth"),
				Tags:     map[string]*string{},
			},
			Properties: &WorkflowProperties{
				Definition: map[string]interface{}{
					"$schema":        "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"actions":        map[string]interface{}{},
					"contentVersion": "1.0.0.0",
					"outputs":        map[string]interface{}{},
					"parameters":     map[string]interface{}{},
					"triggers":       map[string]interface{}{},
				},
				IntegrationAccount: &ResourceReference{
					ID: to.StringPtr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationAccounts/test-integration-account"),
				},
			},
		},
		&WorkflowsValidateByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflows_ValidateByLocation(t *testing.T) {
	// From example Validate a workflow
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ValidateByLocation(ctx,
		"test-resource-group",
		"brazilsouth",
		"test-workflow",
		Workflow{
			Resource: Resource{
				Location: to.StringPtr("brazilsouth"),
				Tags:     map[string]*string{},
			},
			Properties: &WorkflowProperties{
				Definition: map[string]interface{}{
					"$schema":        "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"actions":        map[string]interface{}{},
					"contentVersion": "1.0.0.0",
					"outputs":        map[string]interface{}{},
					"parameters":     map[string]interface{}{},
					"triggers":       map[string]interface{}{},
				},
				IntegrationAccount: &ResourceReference{
					ID: to.StringPtr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationAccounts/test-integration-account"),
				},
			},
		},
		&WorkflowsValidateByLocationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflowVersions_List(t *testing.T) {
	// From example List a workflows versions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowVersionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List("test-resource-group",
		"test-workflow",
		&WorkflowVersionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WorkflowVersion.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WorkflowVersion.ID should not be nil!")
			}
		}
	}
}

func TestWorkflowVersions_Get(t *testing.T) {
	// From example Get a workflow version
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowVersionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"test-resource-group",
		"test-workflow",
		"08586676824806722526",
		&WorkflowVersionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkflowVersion.ID == nil {
		t.Fatal("WorkflowVersion.ID should not be nil!")
	}
}

func TestWorkflowTriggers_List(t *testing.T) {
	// From example List workflow triggers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowTriggersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List("test-resource-group",
		"test-workflow",
		&WorkflowTriggersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WorkflowTrigger.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WorkflowTrigger.ID should not be nil!")
			}
		}
	}
}

func TestWorkflowTriggers_Get(t *testing.T) {
	// From example Get a workflow trigger
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowTriggersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"test-resource-group",
		"test-workflow",
		"manual",
		&WorkflowTriggersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkflowTrigger.ID == nil {
		t.Fatal("WorkflowTrigger.ID should not be nil!")
	}
}

func TestWorkflowTriggers_Reset(t *testing.T) {
	// From example Reset trigger
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowTriggersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Reset(ctx,
		"testResourceGroup",
		"testWorkflow",
		"testTrigger",
		&WorkflowTriggersResetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflowTriggers_Run(t *testing.T) {
	// From example Run a workflow trigger
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowTriggersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Run(ctx,
		"test-resource-group",
		"test-workflow",
		"manual",
		&WorkflowTriggersRunOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflowTriggers_GetSchemaJson(t *testing.T) {
	// From example Get trigger schema
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowTriggersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetSchemaJSON(ctx,
		"testResourceGroup",
		"testWorkflow",
		"testTrigger",
		&WorkflowTriggersGetSchemaJSONOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflowTriggers_SetState(t *testing.T) {
	// From example Set trigger state
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowTriggersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.SetState(ctx,
		"testResourceGroup",
		"testWorkflow",
		"testTrigger",
		SetTriggerStateActionDefinition{
			Source: &WorkflowTriggerReference{
				ResourceReference: ResourceReference{
					ID: to.StringPtr("subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sourceResGroup/providers/Microsoft.Logic/workflows/sourceWorkflow/triggers/sourceTrigger"),
				},
			},
		},
		&WorkflowTriggersSetStateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflowTriggers_ListCallbackUrl(t *testing.T) {
	// From example Get the callback URL for a trigger
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowTriggersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ListCallbackURL(ctx,
		"test-resource-group",
		"test-workflow",
		"manual",
		&WorkflowTriggersListCallbackURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflowVersionTriggers_ListCallbackUrl(t *testing.T) {
	// From example Get the callback url for a trigger of a workflow version
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowVersionTriggersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ListCallbackURL(ctx,
		"testResourceGroup",
		"testWorkflowName",
		"testWorkflowVersionId",
		"testTriggerName",
		&WorkflowVersionTriggersListCallbackURLOptions{Parameters: &GetCallbackURLParameters{
			KeyType:  KeyTypePrimary.ToPtr(),
			NotAfter: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-05T08:00:00Z"); return t }()),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflowTriggerHistories_List(t *testing.T) {
	// From example List a workflow trigger history
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowTriggerHistoriesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List("testResourceGroup",
		"testWorkflowName",
		"testTriggerName",
		&WorkflowTriggerHistoriesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WorkflowTriggerHistory.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WorkflowTriggerHistory.ID should not be nil!")
			}
		}
	}
}

func TestWorkflowTriggerHistories_Get(t *testing.T) {
	// From example Get a workflow trigger history
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowTriggerHistoriesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testWorkflowName",
		"testTriggerName",
		"08586676746934337772206998657CU22",
		&WorkflowTriggerHistoriesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkflowTriggerHistory.ID == nil {
		t.Fatal("WorkflowTriggerHistory.ID should not be nil!")
	}
}

func TestWorkflowTriggerHistories_Resubmit(t *testing.T) {
	// From example Resubmit a workflow run based on the trigger history
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowTriggerHistoriesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Resubmit(ctx,
		"testResourceGroup",
		"testWorkflowName",
		"testTriggerName",
		"testHistoryName",
		&WorkflowTriggerHistoriesResubmitOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflowRuns_List(t *testing.T) {
	// From example List workflow runs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List("test-resource-group",
		"test-workflow",
		&WorkflowRunsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WorkflowRun.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WorkflowRun.ID should not be nil!")
			}
		}
	}
}

func TestWorkflowRuns_Get(t *testing.T) {
	// From example Get a run for a workflow
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"test-resource-group",
		"test-workflow",
		"08586676746934337772206998657CU22",
		&WorkflowRunsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkflowRun.ID == nil {
		t.Fatal("WorkflowRun.ID should not be nil!")
	}
}

func TestWorkflowRuns_Cancel(t *testing.T) {
	// From example Cancel a workflow run
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Cancel(ctx,
		"test-resource-group",
		"test-workflow",
		"08586676746934337772206998657CU22",
		&WorkflowRunsCancelOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflowRunActions_List(t *testing.T) {
	// From example List a workflow run actions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunActionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List("test-resource-group",
		"test-workflow",
		"08586676746934337772206998657CU22",
		&WorkflowRunActionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WorkflowRunAction.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WorkflowRunAction.ID should not be nil!")
			}
		}
	}
}

func TestWorkflowRunActions_Get(t *testing.T) {
	// From example Get a workflow run action
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunActionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"test-resource-group",
		"test-workflow",
		"08586676746934337772206998657CU22",
		"HTTP",
		&WorkflowRunActionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkflowRunAction.ID == nil {
		t.Fatal("WorkflowRunAction.ID should not be nil!")
	}
}

func TestWorkflowRunActions_ListExpressionTraces(t *testing.T) {
	// From example List expression traces
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunActionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ListExpressionTraces(ctx,
		"testResourceGroup",
		"testFlow",
		"08586776228332053161046300351",
		"testAction",
		&WorkflowRunActionsListExpressionTracesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflowRunActionRepetitions_List(t *testing.T) {
	// From example List repetitions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunActionRepetitionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.List(ctx,
		"testResourceGroup",
		"testFlow",
		"08586776228332053161046300351",
		"testAction",
		&WorkflowRunActionRepetitionsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflowRunActionRepetitions_Get(t *testing.T) {
	// From example Get a repetition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunActionRepetitionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testFlow",
		"08586776228332053161046300351",
		"testAction",
		"000001",
		&WorkflowRunActionRepetitionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkflowRunActionRepetitionDefinition.ID == nil {
		t.Fatal("WorkflowRunActionRepetitionDefinition.ID should not be nil!")
	}
}

func TestWorkflowRunActionRepetitions_ListExpressionTraces(t *testing.T) {
	// From example List expression traces for a repetition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunActionRepetitionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ListExpressionTraces(ctx,
		"testResourceGroup",
		"testFlow",
		"08586776228332053161046300351",
		"testAction",
		"000001",
		&WorkflowRunActionRepetitionsListExpressionTracesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflowRunActionRepetitionsRequestHistories_List(t *testing.T) {
	// From example List repetition request history
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunActionRepetitionsRequestHistoriesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List("test-resource-group",
		"test-workflow",
		"08586776228332053161046300351",
		"HTTP_Webhook",
		"000001",
		&WorkflowRunActionRepetitionsRequestHistoriesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RequestHistory.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RequestHistory.ID should not be nil!")
			}
		}
	}
}

func TestWorkflowRunActionRepetitionsRequestHistories_Get(t *testing.T) {
	// From example Get a repetition request history
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunActionRepetitionsRequestHistoriesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"test-resource-group",
		"test-workflow",
		"08586776228332053161046300351",
		"HTTP_Webhook",
		"000001",
		"08586611142732800686",
		&WorkflowRunActionRepetitionsRequestHistoriesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RequestHistory.ID == nil {
		t.Fatal("RequestHistory.ID should not be nil!")
	}
}

func TestWorkflowRunActionRequestHistories_List(t *testing.T) {
	// From example List a request history
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunActionRequestHistoriesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List("test-resource-group",
		"test-workflow",
		"08586776228332053161046300351",
		"HTTP_Webhook",
		&WorkflowRunActionRequestHistoriesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RequestHistory.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RequestHistory.ID should not be nil!")
			}
		}
	}
}

func TestWorkflowRunActionRequestHistories_Get(t *testing.T) {
	// From example Get a request history
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunActionRequestHistoriesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"test-resource-group",
		"test-workflow",
		"08586776228332053161046300351",
		"HTTP_Webhook",
		"08586611142732800686",
		&WorkflowRunActionRequestHistoriesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RequestHistory.ID == nil {
		t.Fatal("RequestHistory.ID should not be nil!")
	}
}

func TestWorkflowRunActionScopeRepetitions_List(t *testing.T) {
	// From example List the scoped repetitions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunActionScopeRepetitionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.List(ctx,
		"testResourceGroup",
		"testFlow",
		"08586776228332053161046300351",
		"for_each",
		&WorkflowRunActionScopeRepetitionsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkflowRunActionScopeRepetitions_Get(t *testing.T) {
	// From example Get a scoped repetition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunActionScopeRepetitionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testFlow",
		"08586776228332053161046300351",
		"for_each",
		"000000",
		&WorkflowRunActionScopeRepetitionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkflowRunActionRepetitionDefinition.ID == nil {
		t.Fatal("WorkflowRunActionRepetitionDefinition.ID should not be nil!")
	}
}

func TestWorkflowRunOperations_Get(t *testing.T) {
	// From example Get a run operation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkflowRunOperationsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testFlow",
		"08586774142730039209110422528",
		"ebdcbbde-c4db-43ec-987c-fd0f7726f43b",
		&WorkflowRunOperationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkflowRun.ID == nil {
		t.Fatal("WorkflowRun.ID should not be nil!")
	}
}

func TestIntegrationAccounts_ListBySubscription(t *testing.T) {
	// From example List integration accounts by subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListBySubscription(&IntegrationAccountsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IntegrationAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IntegrationAccount.ID should not be nil!")
			}
		}
	}
}

func TestIntegrationAccounts_ListByResourceGroup(t *testing.T) {
	// From example List integration accounts by resource group name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByResourceGroup("testResourceGroup",
		&IntegrationAccountsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IntegrationAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IntegrationAccount.ID should not be nil!")
			}
		}
	}
}

func TestIntegrationAccounts_Get(t *testing.T) {
	// From example Get integration account by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		&IntegrationAccountsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccount.ID == nil {
		t.Fatal("IntegrationAccount.ID should not be nil!")
	}
}

func TestIntegrationAccounts_CreateOrUpdate(t *testing.T) {
	// From example Create or update an integration account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		IntegrationAccount{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &IntegrationAccountProperties{},
			SKU: &IntegrationAccountSKU{
				Name: IntegrationAccountSKUNameStandard.ToPtr(),
			},
		},
		&IntegrationAccountsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccount.ID == nil {
		t.Fatal("IntegrationAccount.ID should not be nil!")
	}
}

func TestIntegrationAccounts_Update(t *testing.T) {
	// From example Patch an integration account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Update(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		IntegrationAccount{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &IntegrationAccountProperties{},
			SKU: &IntegrationAccountSKU{
				Name: IntegrationAccountSKUNameStandard.ToPtr(),
			},
		},
		&IntegrationAccountsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccount.ID == nil {
		t.Fatal("IntegrationAccount.ID should not be nil!")
	}
}

func TestIntegrationAccounts_Delete(t *testing.T) {
	// From example Delete an integration account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		&IntegrationAccountsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccounts_ListCallbackUrl(t *testing.T) {
	// From example List IntegrationAccount callback URL
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ListCallbackURL(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		GetCallbackURLParameters{
			KeyType:  KeyTypePrimary.ToPtr(),
			NotAfter: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-05T08:00:00Z"); return t }()),
		},
		&IntegrationAccountsListCallbackURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccounts_ListKeyVaultKeys(t *testing.T) {
	// From example Get Integration Account callback URL
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ListKeyVaultKeys(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		ListKeyVaultKeysDefinition{
			KeyVault: &KeyVaultReference{
				ResourceReference: ResourceReference{
					ID: to.StringPtr("subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.KeyVault/vaults/testKeyVault"),
				},
			},
			SkipToken: to.StringPtr("testSkipToken"),
		},
		&IntegrationAccountsListKeyVaultKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccounts_LogTrackingEvents(t *testing.T) {
	// From example Log a tracked event
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.LogTrackingEvents(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		TrackingEventsDefinition{
			Events: []*TrackingEvent{
				{
					Error: &TrackingEventErrorInfo{
						Code:    to.StringPtr("NotFound"),
						Message: to.StringPtr("Some error occurred"),
					},
					EventLevel: EventLevelInformational.ToPtr(),
					EventTime:  to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-05T01:54:49.505567Z"); return t }()),
					Record: map[string]interface{}{
						"agreementProperties": map[string]interface{}{
							"agreementName":       "testAgreement",
							"as2From":             "testas2from",
							"as2To":               "testas2to",
							"receiverPartnerName": "testPartner2",
							"senderPartnerName":   "testPartner1",
						},
						"messageProperties": map[string]interface{}{
							"IsMessageEncrypted":   false,
							"IsMessageSigned":      false,
							"correlationMessageId": "Unique message identifier",
							"direction":            "Receive",
							"dispositionType":      "received-success",
							"fileName":             "test",
							"isMdnExpected":        true,
							"isMessageCompressed":  false,
							"isMessageFailed":      false,
							"isNrrEnabled":         true,
							"mdnType":              "Async",
							"messageId":            "12345",
						},
					},
					RecordType: TrackingRecordTypeAS2Message.ToPtr(),
				}},
			SourceType: to.StringPtr("Microsoft.Logic/workflows"),
		},
		&IntegrationAccountsLogTrackingEventsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccounts_RegenerateAccessKey(t *testing.T) {
	// From example Regenerate access key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.RegenerateAccessKey(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		RegenerateActionParameter{
			KeyType: KeyTypePrimary.ToPtr(),
		},
		&IntegrationAccountsRegenerateAccessKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccount.ID == nil {
		t.Fatal("IntegrationAccount.ID should not be nil!")
	}
}

func TestIntegrationAccountAssemblies_List(t *testing.T) {
	// From example List integration account assemblies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountAssembliesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.List(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		&IntegrationAccountAssembliesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccountAssemblies_Get(t *testing.T) {
	// From example Get an integration account assembly
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountAssembliesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testAssembly",
		&IntegrationAccountAssembliesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AssemblyDefinition.ID == nil {
		t.Fatal("AssemblyDefinition.ID should not be nil!")
	}
}

func TestIntegrationAccountAssemblies_CreateOrUpdate(t *testing.T) {
	// From example Create or update an account assembly
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountAssembliesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testAssembly",
		AssemblyDefinition{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &AssemblyProperties{
				ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition{
					ArtifactProperties: ArtifactProperties{
						Metadata: `{}`,
					},
					Content: "Base64 encoded Assembly Content",
				},
				AssemblyName: to.StringPtr("System.IdentityModel.Tokens.Jwt"),
			},
		},
		&IntegrationAccountAssembliesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AssemblyDefinition.ID == nil {
		t.Fatal("AssemblyDefinition.ID should not be nil!")
	}
}

func TestIntegrationAccountAssemblies_Delete(t *testing.T) {
	// From example Delete an integration account assembly
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountAssembliesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testAssembly",
		&IntegrationAccountAssembliesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccountAssemblies_ListContentCallbackUrl(t *testing.T) {
	// From example Get the callback url for an integration account assembly
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountAssembliesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ListContentCallbackURL(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testAssembly",
		&IntegrationAccountAssembliesListContentCallbackURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccountBatchConfigurations_List(t *testing.T) {
	// From example List batch configurations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountBatchConfigurationsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.List(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		&IntegrationAccountBatchConfigurationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccountBatchConfigurations_Get(t *testing.T) {
	// From example Get a batch configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountBatchConfigurationsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testBatchConfiguration",
		&IntegrationAccountBatchConfigurationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BatchConfiguration.ID == nil {
		t.Fatal("BatchConfiguration.ID should not be nil!")
	}
}

func TestIntegrationAccountBatchConfigurations_CreateOrUpdate(t *testing.T) {
	// From example Create or update a batch configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountBatchConfigurationsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testBatchConfiguration",
		BatchConfiguration{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &BatchConfigurationProperties{
				BatchGroupName: to.StringPtr("DEFAULT"),
				ReleaseCriteria: &BatchReleaseCriteria{
					BatchSize:    to.Int32Ptr(234567),
					MessageCount: to.Int32Ptr(10),
					Recurrence: &WorkflowTriggerRecurrence{
						Frequency: RecurrenceFrequencyMinute.ToPtr(),
						Interval:  to.Int32Ptr(1),
						StartTime: to.StringPtr("2017-03-24T11:43:00"),
						TimeZone:  to.StringPtr("India Standard Time"),
					},
				},
			},
		},
		&IntegrationAccountBatchConfigurationsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BatchConfiguration.ID == nil {
		t.Fatal("BatchConfiguration.ID should not be nil!")
	}
}

func TestIntegrationAccountBatchConfigurations_Delete(t *testing.T) {
	// From example Delete a batch configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountBatchConfigurationsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testBatchConfiguration",
		&IntegrationAccountBatchConfigurationsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccountSchemas_List(t *testing.T) {
	// From example Get schemas by integration account name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountSchemasClient(con,
		"<subscriptionId>")
	pager := client.List("testResourceGroup",
		"<integrationAccountName>",
		&IntegrationAccountSchemasListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IntegrationAccountSchema.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IntegrationAccountSchema.ID should not be nil!")
			}
		}
	}
}

func TestIntegrationAccountSchemas_Get(t *testing.T) {
	// From example Get schema by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountSchemasClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testSchema",
		&IntegrationAccountSchemasGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccountSchema.ID == nil {
		t.Fatal("IntegrationAccountSchema.ID should not be nil!")
	}
}

func TestIntegrationAccountSchemas_CreateOrUpdate(t *testing.T) {
	// From example Create or update schema
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountSchemasClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testSchema",
		IntegrationAccountSchema{
			Resource: Resource{
				Location: to.StringPtr("westus"),
				Tags: map[string]*string{
					"integrationAccountSchemaName": to.StringPtr("IntegrationAccountSchema8120"),
				},
			},
			Properties: &IntegrationAccountSchemaProperties{
				Content:     to.StringPtr("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<xs:schema xmlns:b=\"http://schemas.microsoft.com/BizTalk/2003\" xmlns=\"http://Inbound_EDI.OrderFile\" targetNamespace=\"http://Inbound_EDI.OrderFile\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  <xs:annotation>\r\n    <xs:appinfo>\r\n      <b:schemaInfo default_pad_char=\" \" count_positions_by_byte=\"false\" parser_optimization=\"speed\" lookahead_depth=\"3\" suppress_empty_nodes=\"false\" generate_empty_nodes=\"true\" allow_early_termination=\"false\" early_terminate_optional_fields=\"false\" allow_message_breakup_of_infix_root=\"false\" compile_parse_tables=\"false\" standard=\"Flat File\" root_reference=\"OrderFile\" />\r\n      <schemaEditorExtension:schemaInfo namespaceAlias=\"b\" extensionClass=\"Microsoft.BizTalk.FlatFileExtension.FlatFileExtension\" standardName=\"Flat File\" xmlns:schemaEditorExtension=\"http://schemas.microsoft.com/BizTalk/2003/SchemaEditorExtensions\" />\r\n    </xs:appinfo>\r\n  </xs:annotation>\r\n  <xs:element name=\"OrderFile\">\r\n    <xs:annotation>\r\n      <xs:appinfo>\r\n        <b:recordInfo structure=\"delimited\" preserve_delimiter_for_empty_data=\"true\" suppress_trailing_delimiters=\"false\" sequence_number=\"1\" />\r\n      </xs:appinfo>\r\n    </xs:annotation>\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:annotation>\r\n          <xs:appinfo>\r\n            <b:groupInfo sequence_number=\"0\" />\r\n          </xs:appinfo>\r\n        </xs:annotation>\r\n        <xs:element name=\"Order\">\r\n          <xs:annotation>\r\n            <xs:appinfo>\r\n              <b:recordInfo sequence_number=\"1\" structure=\"delimited\" preserve_delimiter_for_empty_data=\"true\" suppress_trailing_delimiters=\"false\" child_delimiter_type=\"hex\" child_delimiter=\"0x0D 0x0A\" child_order=\"infix\" />\r\n            </xs:appinfo>\r\n          </xs:annotation>\r\n          <xs:complexType>\r\n            <xs:sequence>\r\n              <xs:annotation>\r\n                <xs:appinfo>\r\n                  <b:groupInfo sequence_number=\"0\" />\r\n                </xs:appinfo>\r\n              </xs:annotation>\r\n              <xs:element name=\"Header\">\r\n                <xs:annotation>\r\n                  <xs:appinfo>\r\n                    <b:recordInfo sequence_number=\"1\" structure=\"delimited\" preserve_delimiter_for_empty_data=\"true\" suppress_trailing_delimiters=\"false\" child_delimiter_type=\"char\" child_delimiter=\"|\" child_order=\"infix\" tag_name=\"HDR|\" />\r\n                  </xs:appinfo>\r\n                </xs:annotation>\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:annotation>\r\n                      <xs:appinfo>\r\n                        <b:groupInfo sequence_number=\"0\" />\r\n                      </xs:appinfo>\r\n                    </xs:annotation>\r\n                    <xs:element name=\"PODate\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"1\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"PONumber\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo justification=\"left\" sequence_number=\"2\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"CustomerID\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"3\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"CustomerContactName\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"4\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"CustomerContactPhone\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"5\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n              <xs:element minOccurs=\"1\" maxOccurs=\"unbounded\" name=\"LineItems\">\r\n                <xs:annotation>\r\n                  <xs:appinfo>\r\n                    <b:recordInfo sequence_number=\"2\" structure=\"delimited\" preserve_delimiter_for_empty_data=\"true\" suppress_trailing_delimiters=\"false\" child_delimiter_type=\"char\" child_delimiter=\"|\" child_order=\"infix\" tag_name=\"DTL|\" />\r\n                  </xs:appinfo>\r\n                </xs:annotation>\r\n                <xs:complexType>\r\n                  <xs:sequence>\r\n                    <xs:annotation>\r\n                      <xs:appinfo>\r\n                        <b:groupInfo sequence_number=\"0\" />\r\n                      </xs:appinfo>\r\n                    </xs:annotation>\r\n                    <xs:element name=\"PONumber\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"1\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"ItemOrdered\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"2\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"Quantity\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"3\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"UOM\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"4\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"Price\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"5\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"ExtendedPrice\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"6\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                    <xs:element name=\"Description\" type=\"xs:string\">\r\n                      <xs:annotation>\r\n                        <xs:appinfo>\r\n                          <b:fieldInfo sequence_number=\"7\" justification=\"left\" />\r\n                        </xs:appinfo>\r\n                      </xs:annotation>\r\n                    </xs:element>\r\n                  </xs:sequence>\r\n                </xs:complexType>\r\n              </xs:element>\r\n            </xs:sequence>\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>"),
				ContentType: to.StringPtr("application/xml"),
				Metadata:    map[string]interface{}{},
				SchemaType:  SchemaTypeXML.ToPtr(),
			},
		},
		&IntegrationAccountSchemasCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccountSchema.ID == nil {
		t.Fatal("IntegrationAccountSchema.ID should not be nil!")
	}
}

func TestIntegrationAccountSchemas_Delete(t *testing.T) {
	// From example Delete a schema by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountSchemasClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testSchema",
		&IntegrationAccountSchemasDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccountSchemas_ListContentCallbackUrl(t *testing.T) {
	// From example Get the content callback url
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountSchemasClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ListContentCallbackURL(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testSchema",
		GetCallbackURLParameters{
			KeyType:  KeyTypePrimary.ToPtr(),
			NotAfter: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-19T16:00:00Z"); return t }()),
		},
		&IntegrationAccountSchemasListContentCallbackURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccountMaps_List(t *testing.T) {
	// From example Get maps by integration account name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountMapsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List("testResourceGroup",
		"testIntegrationAccount",
		&IntegrationAccountMapsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IntegrationAccountMap.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IntegrationAccountMap.ID should not be nil!")
			}
		}
	}
}

func TestIntegrationAccountMaps_Get(t *testing.T) {
	// From example Get map by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountMapsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testMap",
		&IntegrationAccountMapsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccountMap.ID == nil {
		t.Fatal("IntegrationAccountMap.ID should not be nil!")
	}
}

func TestIntegrationAccountMaps_CreateOrUpdate(t *testing.T) {
	// From example Create or update a map
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountMapsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testMap",
		IntegrationAccountMap{
			Resource: Resource{
				Location: to.StringPtr("westus"),
			},
			Properties: &IntegrationAccountMapProperties{
				Content:     to.StringPtr("<?xml version=\"1.0\" encoding=\"UTF-16\"?>\r\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\" xmlns:var=\"http://schemas.microsoft.com/BizTalk/2003/var\" exclude-result-prefixes=\"msxsl var s0 userCSharp\" version=\"1.0\" xmlns:ns0=\"http://BizTalk_Server_Project4.StringFunctoidsDestinationSchema\" xmlns:s0=\"http://BizTalk_Server_Project4.StringFunctoidsSourceSchema\" xmlns:userCSharp=\"http://schemas.microsoft.com/BizTalk/2003/userCSharp\">\r\n  <xsl:import href=\"http://btsfunctoids.blob.core.windows.net/functoids/functoids.xslt\" />\r\n  <xsl:output omit-xml-declaration=\"yes\" method=\"xml\" version=\"1.0\" />\r\n  <xsl:template match=\"/\">\r\n    <xsl:apply-templates select=\"/s0:Root\" />\r\n  </xsl:template>\r\n  <xsl:template match=\"/s0:Root\">\r\n    <xsl:variable name=\"var:v1\" select=\"userCSharp:StringFind(string(StringFindSource/text()) , &quot;SearchString&quot;)\" />\r\n    <xsl:variable name=\"var:v2\" select=\"userCSharp:StringLeft(string(StringLeftSource/text()) , &quot;2&quot;)\" />\r\n    <xsl:variable name=\"var:v3\" select=\"userCSharp:StringRight(string(StringRightSource/text()) , &quot;2&quot;)\" />\r\n    <xsl:variable name=\"var:v4\" select=\"userCSharp:StringUpperCase(string(UppercaseSource/text()))\" />\r\n    <xsl:variable name=\"var:v5\" select=\"userCSharp:StringLowerCase(string(LowercaseSource/text()))\" />\r\n    <xsl:variable name=\"var:v6\" select=\"userCSharp:StringSize(string(SizeSource/text()))\" />\r\n    <xsl:variable name=\"var:v7\" select=\"userCSharp:StringSubstring(string(StringExtractSource/text()) , &quot;0&quot; , &quot;2&quot;)\" />\r\n    <xsl:variable name=\"var:v8\" select=\"userCSharp:StringConcat(string(StringConcatSource/text()))\" />\r\n    <xsl:variable name=\"var:v9\" select=\"userCSharp:StringTrimLeft(string(StringLeftTrimSource/text()))\" />\r\n    <xsl:variable name=\"var:v10\" select=\"userCSharp:StringTrimRight(string(StringRightTrimSource/text()))\" />\r\n    <ns0:Root>\r\n      <StringFindDestination>\r\n        <xsl:value-of select=\"$var:v1\" />\r\n      </StringFindDestination>\r\n      <StringLeftDestination>\r\n        <xsl:value-of select=\"$var:v2\" />\r\n      </StringLeftDestination>\r\n      <StringRightDestination>\r\n        <xsl:value-of select=\"$var:v3\" />\r\n      </StringRightDestination>\r\n      <UppercaseDestination>\r\n        <xsl:value-of select=\"$var:v4\" />\r\n      </UppercaseDestination>\r\n      <LowercaseDestination>\r\n        <xsl:value-of select=\"$var:v5\" />\r\n      </LowercaseDestination>\r\n      <SizeDestination>\r\n        <xsl:value-of select=\"$var:v6\" />\r\n      </SizeDestination>\r\n      <StringExtractDestination>\r\n        <xsl:value-of select=\"$var:v7\" />\r\n      </StringExtractDestination>\r\n      <StringConcatDestination>\r\n        <xsl:value-of select=\"$var:v8\" />\r\n      </StringConcatDestination>\r\n      <StringLeftTrimDestination>\r\n        <xsl:value-of select=\"$var:v9\" />\r\n      </StringLeftTrimDestination>\r\n      <StringRightTrimDestination>\r\n        <xsl:value-of select=\"$var:v10\" />\r\n      </StringRightTrimDestination>\r\n    </ns0:Root>\r\n  </xsl:template>\r\n</xsl:stylesheet>"),
				ContentType: to.StringPtr("application/xml"),
				MapType:     MapTypeXslt.ToPtr(),
				Metadata:    map[string]interface{}{},
			},
		},
		&IntegrationAccountMapsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccountMap.ID == nil {
		t.Fatal("IntegrationAccountMap.ID should not be nil!")
	}
}

func TestIntegrationAccountMaps_Delete(t *testing.T) {
	// From example Delete a map
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountMapsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testMap",
		&IntegrationAccountMapsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccountMaps_ListContentCallbackUrl(t *testing.T) {
	// From example Get the content callback url
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountMapsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ListContentCallbackURL(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testMap",
		GetCallbackURLParameters{
			KeyType:  KeyTypePrimary.ToPtr(),
			NotAfter: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-19T16:00:00Z"); return t }()),
		},
		&IntegrationAccountMapsListContentCallbackURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccountPartners_List(t *testing.T) {
	// From example Get partners by integration account name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountPartnersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List("testResourceGroup",
		"testIntegrationAccount",
		&IntegrationAccountPartnersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IntegrationAccountPartner.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IntegrationAccountPartner.ID should not be nil!")
			}
		}
	}
}

func TestIntegrationAccountPartners_Get(t *testing.T) {
	// From example Get partner by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountPartnersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testPartner",
		&IntegrationAccountPartnersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccountPartner.ID == nil {
		t.Fatal("IntegrationAccountPartner.ID should not be nil!")
	}
}

func TestIntegrationAccountPartners_CreateOrUpdate(t *testing.T) {
	// From example Create or update a partner
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountPartnersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testPartner",
		IntegrationAccountPartner{
			Resource: Resource{
				Location: to.StringPtr("westus"),
				Tags:     map[string]*string{},
			},
			Properties: &IntegrationAccountPartnerProperties{
				Content: &PartnerContent{
					B2B: &B2BPartnerContent{
						BusinessIdentities: []*BusinessIdentity{
							{
								Qualifier: to.StringPtr("AA"),
								Value:     to.StringPtr("ZZ"),
							}},
					},
				},
				Metadata:    map[string]interface{}{},
				PartnerType: PartnerTypeB2B.ToPtr(),
			},
		},
		&IntegrationAccountPartnersCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccountPartner.ID == nil {
		t.Fatal("IntegrationAccountPartner.ID should not be nil!")
	}
}

func TestIntegrationAccountPartners_Delete(t *testing.T) {
	// From example Delete a partner
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountPartnersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testPartner",
		&IntegrationAccountPartnersDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccountPartners_ListContentCallbackUrl(t *testing.T) {
	// From example Get the content callback url
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountPartnersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ListContentCallbackURL(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testPartner",
		GetCallbackURLParameters{
			KeyType:  KeyTypePrimary.ToPtr(),
			NotAfter: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-19T16:00:00Z"); return t }()),
		},
		&IntegrationAccountPartnersListContentCallbackURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccountAgreements_List(t *testing.T) {
	// From example Get agreements by integration account name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountAgreementsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List("testResourceGroup",
		"testIntegrationAccount",
		&IntegrationAccountAgreementsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IntegrationAccountAgreement.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IntegrationAccountAgreement.ID should not be nil!")
			}
		}
	}
}

func TestIntegrationAccountAgreements_Get(t *testing.T) {
	// From example Get agreement by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountAgreementsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testAgreement",
		&IntegrationAccountAgreementsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccountAgreement.ID == nil {
		t.Fatal("IntegrationAccountAgreement.ID should not be nil!")
	}
}

func TestIntegrationAccountAgreements_CreateOrUpdate(t *testing.T) {
	// From example Create or update an agreement
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountAgreementsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testAgreement",
		IntegrationAccountAgreement{
			Resource: Resource{
				Location: to.StringPtr("westus"),
				Tags: map[string]*string{
					"IntegrationAccountAgreement": to.StringPtr("<IntegrationAccountAgreementName>"),
				},
			},
			Properties: &IntegrationAccountAgreementProperties{
				AgreementType: AgreementTypeAS2.ToPtr(),
				Content: &AgreementContent{
					AS2: &AS2AgreementContent{
						ReceiveAgreement: &AS2OneWayAgreement{
							ProtocolSettings: &AS2ProtocolSettings{
								AcknowledgementConnectionSettings: &AS2AcknowledgementConnectionSettings{
									IgnoreCertificateNameMismatch: to.BoolPtr(true),
									KeepHTTPConnectionAlive:       to.BoolPtr(true),
									SupportHTTPStatusCodeContinue: to.BoolPtr(true),
									UnfoldHTTPHeaders:             to.BoolPtr(true),
								},
								EnvelopeSettings: &AS2EnvelopeSettings{
									AutogenerateFileName:                    to.BoolPtr(true),
									FileNameTemplate:                        to.StringPtr("Test"),
									MessageContentType:                      to.StringPtr("text/plain"),
									SuspendMessageOnFileNameGenerationError: to.BoolPtr(true),
									TransmitFileNameInMimeHeader:            to.BoolPtr(true),
								},
								ErrorSettings: &AS2ErrorSettings{
									ResendIfMDNNotReceived:  to.BoolPtr(true),
									SuspendDuplicateMessage: to.BoolPtr(true),
								},
								MdnSettings: &AS2MdnSettings{
									DispositionNotificationTo:  to.StringPtr("http://tempuri.org"),
									MdnText:                    to.StringPtr("Sample"),
									MicHashingAlgorithm:        HashingAlgorithmSHA1.ToPtr(),
									NeedMDN:                    to.BoolPtr(true),
									ReceiptDeliveryURL:         to.StringPtr("http://tempuri.org"),
									SendInboundMDNToMessageBox: to.BoolPtr(true),
									SendMDNAsynchronously:      to.BoolPtr(true),
									SignMDN:                    to.BoolPtr(true),
									SignOutboundMDNIfOptional:  to.BoolPtr(true),
								},
								MessageConnectionSettings: &AS2MessageConnectionSettings{
									IgnoreCertificateNameMismatch: to.BoolPtr(true),
									KeepHTTPConnectionAlive:       to.BoolPtr(true),
									SupportHTTPStatusCodeContinue: to.BoolPtr(true),
									UnfoldHTTPHeaders:             to.BoolPtr(true),
								},
								SecuritySettings: &AS2SecuritySettings{
									EnableNRRForInboundDecodedMessages:  to.BoolPtr(true),
									EnableNRRForInboundEncodedMessages:  to.BoolPtr(true),
									EnableNRRForInboundMDN:              to.BoolPtr(true),
									EnableNRRForOutboundDecodedMessages: to.BoolPtr(true),
									EnableNRRForOutboundEncodedMessages: to.BoolPtr(true),
									EnableNRRForOutboundMDN:             to.BoolPtr(true),
									OverrideGroupSigningCertificate:     to.BoolPtr(false),
								},
								ValidationSettings: &AS2ValidationSettings{
									CheckCertificateRevocationListOnReceive: to.BoolPtr(true),
									CheckCertificateRevocationListOnSend:    to.BoolPtr(true),
									CheckDuplicateMessage:                   to.BoolPtr(true),
									CompressMessage:                         to.BoolPtr(true),
									EncryptMessage:                          to.BoolPtr(false),
									EncryptionAlgorithm:                     EncryptionAlgorithmAES128.ToPtr(),
									InterchangeDuplicatesValidityDays:       to.Int32Ptr(100),
									OverrideMessageProperties:               to.BoolPtr(true),
									SignMessage:                             to.BoolPtr(false),
								},
							},
							ReceiverBusinessIdentity: &BusinessIdentity{
								Qualifier: to.StringPtr("ZZ"),
								Value:     to.StringPtr("ZZ"),
							},
							SenderBusinessIdentity: &BusinessIdentity{
								Qualifier: to.StringPtr("AA"),
								Value:     to.StringPtr("AA"),
							},
						},
						SendAgreement: &AS2OneWayAgreement{
							ProtocolSettings: &AS2ProtocolSettings{
								AcknowledgementConnectionSettings: &AS2AcknowledgementConnectionSettings{
									IgnoreCertificateNameMismatch: to.BoolPtr(true),
									KeepHTTPConnectionAlive:       to.BoolPtr(true),
									SupportHTTPStatusCodeContinue: to.BoolPtr(true),
									UnfoldHTTPHeaders:             to.BoolPtr(true),
								},
								EnvelopeSettings: &AS2EnvelopeSettings{
									AutogenerateFileName:                    to.BoolPtr(true),
									FileNameTemplate:                        to.StringPtr("Test"),
									MessageContentType:                      to.StringPtr("text/plain"),
									SuspendMessageOnFileNameGenerationError: to.BoolPtr(true),
									TransmitFileNameInMimeHeader:            to.BoolPtr(true),
								},
								ErrorSettings: &AS2ErrorSettings{
									ResendIfMDNNotReceived:  to.BoolPtr(true),
									SuspendDuplicateMessage: to.BoolPtr(true),
								},
								MdnSettings: &AS2MdnSettings{
									DispositionNotificationTo:  to.StringPtr("http://tempuri.org"),
									MdnText:                    to.StringPtr("Sample"),
									MicHashingAlgorithm:        HashingAlgorithmSHA1.ToPtr(),
									NeedMDN:                    to.BoolPtr(true),
									ReceiptDeliveryURL:         to.StringPtr("http://tempuri.org"),
									SendInboundMDNToMessageBox: to.BoolPtr(true),
									SendMDNAsynchronously:      to.BoolPtr(true),
									SignMDN:                    to.BoolPtr(true),
									SignOutboundMDNIfOptional:  to.BoolPtr(true),
								},
								MessageConnectionSettings: &AS2MessageConnectionSettings{
									IgnoreCertificateNameMismatch: to.BoolPtr(true),
									KeepHTTPConnectionAlive:       to.BoolPtr(true),
									SupportHTTPStatusCodeContinue: to.BoolPtr(true),
									UnfoldHTTPHeaders:             to.BoolPtr(true),
								},
								SecuritySettings: &AS2SecuritySettings{
									EnableNRRForInboundDecodedMessages:  to.BoolPtr(true),
									EnableNRRForInboundEncodedMessages:  to.BoolPtr(true),
									EnableNRRForInboundMDN:              to.BoolPtr(true),
									EnableNRRForOutboundDecodedMessages: to.BoolPtr(true),
									EnableNRRForOutboundEncodedMessages: to.BoolPtr(true),
									EnableNRRForOutboundMDN:             to.BoolPtr(true),
									OverrideGroupSigningCertificate:     to.BoolPtr(false),
								},
								ValidationSettings: &AS2ValidationSettings{
									CheckCertificateRevocationListOnReceive: to.BoolPtr(true),
									CheckCertificateRevocationListOnSend:    to.BoolPtr(true),
									CheckDuplicateMessage:                   to.BoolPtr(true),
									CompressMessage:                         to.BoolPtr(true),
									EncryptMessage:                          to.BoolPtr(false),
									EncryptionAlgorithm:                     EncryptionAlgorithmAES128.ToPtr(),
									InterchangeDuplicatesValidityDays:       to.Int32Ptr(100),
									OverrideMessageProperties:               to.BoolPtr(true),
									SignMessage:                             to.BoolPtr(false),
								},
							},
							ReceiverBusinessIdentity: &BusinessIdentity{
								Qualifier: to.StringPtr("AA"),
								Value:     to.StringPtr("AA"),
							},
							SenderBusinessIdentity: &BusinessIdentity{
								Qualifier: to.StringPtr("ZZ"),
								Value:     to.StringPtr("ZZ"),
							},
						},
					},
				},
				GuestIdentity: &BusinessIdentity{
					Qualifier: to.StringPtr("AA"),
					Value:     to.StringPtr("AA"),
				},
				GuestPartner: to.StringPtr("GuestPartner"),
				HostIdentity: &BusinessIdentity{
					Qualifier: to.StringPtr("ZZ"),
					Value:     to.StringPtr("ZZ"),
				},
				HostPartner: to.StringPtr("HostPartner"),
				Metadata:    map[string]interface{}{},
			},
		},
		&IntegrationAccountAgreementsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccountAgreement.ID == nil {
		t.Fatal("IntegrationAccountAgreement.ID should not be nil!")
	}
}

func TestIntegrationAccountAgreements_Delete(t *testing.T) {
	// From example Delete an agreement
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountAgreementsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testAgreement",
		&IntegrationAccountAgreementsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccountAgreements_ListContentCallbackUrl(t *testing.T) {
	// From example Get the content callback url
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountAgreementsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ListContentCallbackURL(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testAgreement",
		GetCallbackURLParameters{
			KeyType:  KeyTypePrimary.ToPtr(),
			NotAfter: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-19T16:00:00Z"); return t }()),
		},
		&IntegrationAccountAgreementsListContentCallbackURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccountCertificates_List(t *testing.T) {
	// From example Get certificates by integration account name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountCertificatesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List("testResourceGroup",
		"testIntegrationAccount",
		&IntegrationAccountCertificatesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IntegrationAccountCertificate.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IntegrationAccountCertificate.ID should not be nil!")
			}
		}
	}
}

func TestIntegrationAccountCertificates_Get(t *testing.T) {
	// From example Get certificate by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountCertificatesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testCertificate",
		&IntegrationAccountCertificatesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccountCertificate.ID == nil {
		t.Fatal("IntegrationAccountCertificate.ID should not be nil!")
	}
}

func TestIntegrationAccountCertificates_CreateOrUpdate(t *testing.T) {
	// From example Create or update a certificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountCertificatesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testCertificate",
		IntegrationAccountCertificate{
			Resource: Resource{
				Location: to.StringPtr("brazilsouth"),
			},
			Properties: &IntegrationAccountCertificateProperties{
				Key: &KeyVaultKeyReference{
					KeyName: to.StringPtr("<keyName>"),
					KeyVault: &KeyVaultKeyReferenceKeyVault{
						ID: to.StringPtr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testResourceGroup/providers/microsoft.keyvault/vaults/<keyVaultName>"),
					},
					KeyVersion: to.StringPtr("87d9764197604449b9b8eb7bd8710868"),
				},
				PublicCertificate: to.StringPtr("<publicCertificateValue>"),
			},
		},
		&IntegrationAccountCertificatesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccountCertificate.ID == nil {
		t.Fatal("IntegrationAccountCertificate.ID should not be nil!")
	}
}

func TestIntegrationAccountCertificates_Delete(t *testing.T) {
	// From example Delete a certificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountCertificatesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationAccount",
		"testCertificate",
		&IntegrationAccountCertificatesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationAccountSessions_List(t *testing.T) {
	// From example Get a list of integration account sessions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountSessionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List("testrg123",
		"testia123",
		&IntegrationAccountSessionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IntegrationAccountSession.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IntegrationAccountSession.ID should not be nil!")
			}
		}
	}
}

func TestIntegrationAccountSessions_Get(t *testing.T) {
	// From example Get an integration account session
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountSessionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testrg123",
		"testia123",
		"testsession123-ICN",
		&IntegrationAccountSessionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccountSession.ID == nil {
		t.Fatal("IntegrationAccountSession.ID should not be nil!")
	}
}

func TestIntegrationAccountSessions_CreateOrUpdate(t *testing.T) {
	// From example Create or update an integration account session
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountSessionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"testrg123",
		"testia123",
		"testsession123-ICN",
		IntegrationAccountSession{
			Properties: &IntegrationAccountSessionProperties{
				Content: map[string]interface{}{
					"controlNumber":            "1234",
					"controlNumberChangedTime": "2017-02-21T22:30:11.9923759Z",
				},
			},
		},
		&IntegrationAccountSessionsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationAccountSession.ID == nil {
		t.Fatal("IntegrationAccountSession.ID should not be nil!")
	}
}

func TestIntegrationAccountSessions_Delete(t *testing.T) {
	// From example Delete an integration account session
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationAccountSessionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"testrg123",
		"testia123",
		"testsession123-ICN",
		&IntegrationAccountSessionsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationServiceEnvironments_ListBySubscription(t *testing.T) {
	// From example List integration service environments by subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationServiceEnvironmentsClient(con,
		"f34b22a3-2202-4fb1-b040-1332bd928c84")
	pager := client.ListBySubscription(&IntegrationServiceEnvironmentsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IntegrationServiceEnvironment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IntegrationServiceEnvironment.ID should not be nil!")
			}
		}
	}
}

func TestIntegrationServiceEnvironments_ListByResourceGroup(t *testing.T) {
	// From example List integration service environments by resource group name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationServiceEnvironmentsClient(con,
		"f34b22a3-2202-4fb1-b040-1332bd928c84")
	pager := client.ListByResourceGroup("testResourceGroup",
		&IntegrationServiceEnvironmentsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IntegrationServiceEnvironment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IntegrationServiceEnvironment.ID should not be nil!")
			}
		}
	}
}

func TestIntegrationServiceEnvironments_Get(t *testing.T) {
	// From example Get integration service environment by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationServiceEnvironmentsClient(con,
		"f34b22a3-2202-4fb1-b040-1332bd928c84")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		&IntegrationServiceEnvironmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationServiceEnvironment.ID == nil {
		t.Fatal("IntegrationServiceEnvironment.ID should not be nil!")
	}
}

func TestIntegrationServiceEnvironments_CreateOrUpdate(t *testing.T) {
	// From example Create or update an integration service environment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationServiceEnvironmentsClient(con,
		"f34b22a3-2202-4fb1-b040-1332bd928c84")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		IntegrationServiceEnvironment{
			Resource: Resource{
				Location: to.StringPtr("brazilsouth"),
			},
			Properties: &IntegrationServiceEnvironmentProperties{
				EncryptionConfiguration: &IntegrationServiceEnvironmenEncryptionConfiguration{
					EncryptionKeyReference: &IntegrationServiceEnvironmenEncryptionKeyReference{
						KeyName: to.StringPtr("testKeyName"),
						KeyVault: &ResourceReference{
							ID: to.StringPtr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.KeyVault/vaults/testKeyVault"),
						},
						KeyVersion: to.StringPtr("13b261d30b984753869902d7f47f4d55"),
					},
				},
				NetworkConfiguration: &NetworkConfiguration{
					AccessEndpoint: &IntegrationServiceEnvironmentAccessEndpoint{
						Type: IntegrationServiceEnvironmentAccessEndpointTypeInternal.ToPtr(),
					},
					Subnets: []*ResourceReference{
						{
							ID: to.StringPtr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/testVNET/subnets/s1"),
						},
						{
							ID: to.StringPtr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/testVNET/subnets/s2"),
						},
						{
							ID: to.StringPtr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/testVNET/subnets/s3"),
						},
						{
							ID: to.StringPtr("/subscriptions/f34b22a3-2202-4fb1-b040-1332bd928c84/resourceGroups/testResourceGroup/providers/Microsoft.Network/virtualNetworks/testVNET/subnets/s4"),
						}},
				},
			},
			SKU: &IntegrationServiceEnvironmentSKU{
				Name:     IntegrationServiceEnvironmentSKUNamePremium.ToPtr(),
				Capacity: to.Int32Ptr(2),
			},
		},
		&IntegrationServiceEnvironmentsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationServiceEnvironment.ID == nil {
		t.Fatal("IntegrationServiceEnvironment.ID should not be nil!")
	}
}

func TestIntegrationServiceEnvironments_Update(t *testing.T) {
	// From example Patch an integration service environment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationServiceEnvironmentsClient(con,
		"f34b22a3-2202-4fb1-b040-1332bd928c84")
	poller, err := client.BeginUpdate(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		IntegrationServiceEnvironment{
			Resource: Resource{
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
				},
			},
			SKU: &IntegrationServiceEnvironmentSKU{
				Name:     IntegrationServiceEnvironmentSKUNameDeveloper.ToPtr(),
				Capacity: to.Int32Ptr(0),
			},
		},
		&IntegrationServiceEnvironmentsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationServiceEnvironment.ID == nil {
		t.Fatal("IntegrationServiceEnvironment.ID should not be nil!")
	}
}

func TestIntegrationServiceEnvironments_Delete(t *testing.T) {
	// From example Delete an integration account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationServiceEnvironmentsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		&IntegrationServiceEnvironmentsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationServiceEnvironments_Restart(t *testing.T) {
	// From example Restarts an integration service environment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationServiceEnvironmentsClient(con,
		"f34b22a3-2202-4fb1-b040-1332bd928c84")
	_, err := client.Restart(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		&IntegrationServiceEnvironmentsRestartOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationServiceEnvironmentSkus_List(t *testing.T) {
	// From example List integration service environment skus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationServiceEnvironmentSKUsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List("testResourceGroup",
		"testIntegrationServiceEnvironment",
		&IntegrationServiceEnvironmentSKUsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestIntegrationServiceEnvironmentNetworkHealth_Get(t *testing.T) {
	// From example Gets the integration service environment network health
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationServiceEnvironmentNetworkHealthClient(con,
		"f34b22a3-2202-4fb1-b040-1332bd928c84")
	_, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		&IntegrationServiceEnvironmentNetworkHealthGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationServiceEnvironmentManagedApis_List(t *testing.T) {
	// From example Gets the integration service environment managed Apis
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationServiceEnvironmentManagedApisClient(con,
		"f34b22a3-2202-4fb1-b040-1332bd928c84")
	pager := client.List("testResourceGroup",
		"testIntegrationServiceEnvironment",
		&IntegrationServiceEnvironmentManagedApisListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ManagedAPI.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ManagedAPI.ID should not be nil!")
			}
		}
	}
}

func TestIntegrationServiceEnvironmentManagedApis_Get(t *testing.T) {
	// From example Gets the integration service environment managed Apis
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationServiceEnvironmentManagedApisClient(con,
		"f34b22a3-2202-4fb1-b040-1332bd928c84")
	res, err := client.Get(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		"servicebus",
		&IntegrationServiceEnvironmentManagedApisGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedAPI.ID == nil {
		t.Fatal("ManagedAPI.ID should not be nil!")
	}
}

func TestIntegrationServiceEnvironmentManagedApis_Put(t *testing.T) {
	// From example Gets the integration service environment managed Apis
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationServiceEnvironmentManagedApisClient(con,
		"f34b22a3-2202-4fb1-b040-1332bd928c84")
	poller, err := client.BeginPut(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		"servicebus",
		&IntegrationServiceEnvironmentManagedApisBeginPutOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedAPI.ID == nil {
		t.Fatal("ManagedAPI.ID should not be nil!")
	}
}

func TestIntegrationServiceEnvironmentManagedApis_Delete(t *testing.T) {
	// From example Deletes the integration service environment managed Apis
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationServiceEnvironmentManagedApisClient(con,
		"f34b22a3-2202-4fb1-b040-1332bd928c84")
	poller, err := client.BeginDelete(ctx,
		"testResourceGroup",
		"testIntegrationServiceEnvironment",
		"servicebus",
		&IntegrationServiceEnvironmentManagedApisBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationServiceEnvironmentManagedApiOperations_List(t *testing.T) {
	// From example Gets the integration service environment managed Apis
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationServiceEnvironmentManagedAPIOperationsClient(con,
		"80d4fe69-c95b-4dd2-a938-9250f1c8ab03")
	pager := client.List("testResourceGroup",
		"testIntegrationServiceEnvironment",
		"servicebus",
		&IntegrationServiceEnvironmentManagedAPIOperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("APIOperation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("APIOperation.ID should not be nil!")
			}
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example List Microsoft.Logic operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
