//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstoragesync_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storagesync/armstoragesync"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragesync.OperationEntityListResult{
			Value: []*armstoragesync.OperationEntity{
				{
					Name: to.Ptr("microsoft.storagesync/register/action"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Registers the subscription for the Storage Sync Provider"),
						Operation:   to.Ptr("Registers the Storage Sync Provider"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Storage Sync Provider"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/unregister/action"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Unregisters the subscription for the Storage Sync Provider"),
						Operation:   to.Ptr("Unregisters the Storage Sync Provider"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Storage Sync Provider"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/operations/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Gets a list of the Supported Operations"),
						Operation:   to.Ptr("Gets the Supported Operations"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Supported Operations"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Read any Storage Sync Services"),
						Operation:   to.Ptr("Read Storage Sync Services"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Storage Sync Services"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/write"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Create or Update any Storage Sync Services"),
						Operation:   to.Ptr("Create or Update Storage Sync Services"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Storage Sync Services"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/delete"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Delete any Storage Sync Services"),
						Operation:   to.Ptr("Delete Storage Sync Services"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Storage Sync Services"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Gets the available metrics for Storage Sync Services"),
						Operation:   to.Ptr("Read Storage Sync Services metric definitions"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Storage Sync Metrics"),
					},
					Origin: to.Ptr("System"),
					Properties: &armstoragesync.OperationProperties{
						ServiceSpecification: &armstoragesync.OperationResourceServiceSpecification{
							MetricSpecifications: []*armstoragesync.OperationResourceMetricSpecification{
								{
									Name:            to.Ptr("ServerSyncSessionResult"),
									AggregationType: to.Ptr("Average"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("SyncGroupName"),
											DisplayName:            to.Ptr("Sync Group Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ServerEndpointName"),
											DisplayName:            to.Ptr("Server Endpoint Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("SyncDirection"),
											DisplayName:            to.Ptr("Sync Direction"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Metric that logs a value of 1 each time the Server Endpoint successfully completes a Sync Session with the Cloud Endpoint"),
									DisplayName:        to.Ptr("Sync Session Result"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("StorageSyncSyncSessionAppliedFilesCount"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("SyncGroupName"),
											DisplayName:            to.Ptr("Sync Group Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ServerEndpointName"),
											DisplayName:            to.Ptr("Server Endpoint Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("SyncDirection"),
											DisplayName:            to.Ptr("Sync Direction"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Count of Files synced"),
									DisplayName:        to.Ptr("Files Synced"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("StorageSyncSyncSessionPerItemErrorsCount"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("SyncGroupName"),
											DisplayName:            to.Ptr("Sync Group Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ServerEndpointName"),
											DisplayName:            to.Ptr("Server Endpoint Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("SyncDirection"),
											DisplayName:            to.Ptr("Sync Direction"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Count of files failed to sync"),
									DisplayName:        to.Ptr("Files not syncing"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("StorageSyncBatchTransferredFileBytes"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("SyncGroupName"),
											DisplayName:            to.Ptr("Sync Group Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ServerEndpointName"),
											DisplayName:            to.Ptr("Server Endpoint Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("SyncDirection"),
											DisplayName:            to.Ptr("Sync Direction"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Total file size transferred for Sync Sessions"),
									DisplayName:        to.Ptr("Bytes synced"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("StorageSyncServerHeartbeat"),
									AggregationType: to.Ptr("Maximum"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("ServerName"),
											DisplayName:            to.Ptr("Server Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Metric that logs a value of 1 each time the resigtered server successfully records a heartbeat with the Cloud Endpoint"),
									DisplayName:        to.Ptr("Server Online Status"),
									FillGapWithZero:    to.Ptr(true),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("StorageSyncRecallIOTotalSizeBytes"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("ServerName"),
											DisplayName:            to.Ptr("Server Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Total size of data recalled by the server"),
									DisplayName:        to.Ptr("Cloud tiering recall"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("StorageSyncRecalledTotalNetworkBytes"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("SyncGroupName"),
											DisplayName:            to.Ptr("Sync Group Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ServerName"),
											DisplayName:            to.Ptr("Server Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Size of data recalled"),
									DisplayName:        to.Ptr("Cloud tiering recall size"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("StorageSyncRecallThroughputBytesPerSecond"),
									AggregationType: to.Ptr("Average"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("SyncGroupName"),
											DisplayName:            to.Ptr("Sync Group Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ServerName"),
											DisplayName:            to.Ptr("Server Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Size of data recall throughput"),
									DisplayName:        to.Ptr("Cloud tiering recall throughput"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("BytesPerSecond"),
								},
								{
									Name:            to.Ptr("StorageSyncRecalledNetworkBytesByApplication"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("SyncGroupName"),
											DisplayName:            to.Ptr("Sync Group Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ServerName"),
											DisplayName:            to.Ptr("Server Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ApplicationName"),
											DisplayName:            to.Ptr("Application Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Size of data recalled by application"),
									DisplayName:        to.Ptr("Cloud tiering recall size by application"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Bytes"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/privateLinkResources/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Read any Private Link Resources"),
						Operation:   to.Ptr("Read Private Link Resources"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Private Link Resources"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/privateEndpointConnections/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Read any Private Endpoint Connections"),
						Operation:   to.Ptr("Read Private Endpoint Connections"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Private Endpoint Connections"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/privateEndpointConnections/write"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Create or Update any Private Endpoint Connections"),
						Operation:   to.Ptr("Create or Update Private Endpoint Connections"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Private Endpoint Connections"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/privateEndpointConnections/delete"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Delete any Private Endpoint Connections"),
						Operation:   to.Ptr("Delete Private Endpoint Connections"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Private Endpoint Connections"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/privateEndpointConnectionProxies/validate/action"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Validate any Private Endpoint ConnectionProxies"),
						Operation:   to.Ptr("Validate Private Endpoint ConnectionProxies"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Private Endpoint ConnectionProxies"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/privateEndpointConnectionProxies/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Read any Private Endpoint ConnectionProxies"),
						Operation:   to.Ptr("Read Private Endpoint ConnectionProxies"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Private Endpoint ConnectionProxies"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/privateEndpointConnectionProxies/write"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Create or Update any Private Endpoint ConnectionProxies"),
						Operation:   to.Ptr("Create or Update Private Endpoint ConnectionProxies"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Private Endpoint ConnectionProxies"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/privateEndpointConnectionProxies/delete"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Delete any Private Endpoint ConnectionProxies"),
						Operation:   to.Ptr("Delete Private Endpoint ConnectionProxies"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Private Endpoint ConnectionProxies"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Read any Sync Groups"),
						Operation:   to.Ptr("Read Sync Groups"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Sync Groups"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/write"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Create or Update any Sync Groups"),
						Operation:   to.Ptr("Create or Update Sync Groups"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Sync Groups"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/delete"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Delete any Sync Groups"),
						Operation:   to.Ptr("Delete Sync Groups"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Sync Groups"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Gets the available metrics for Sync Groups"),
						Operation:   to.Ptr("Read Sync Groups metric definitions"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Sync Group Metrics"),
					},
					Origin: to.Ptr("System"),
					Properties: &armstoragesync.OperationProperties{
						ServiceSpecification: &armstoragesync.OperationResourceServiceSpecification{
							MetricSpecifications: []*armstoragesync.OperationResourceMetricSpecification{
								{
									Name:            to.Ptr("SyncGroupSyncSessionAppliedFilesCount"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("SyncGroupName"),
											DisplayName:            to.Ptr("Sync Group Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ServerEndpointName"),
											DisplayName:            to.Ptr("Server Endpoint Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("SyncDirection"),
											DisplayName:            to.Ptr("Sync Direction"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Count of Files synced"),
									DisplayName:        to.Ptr("Files Synced"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("SyncGroupSyncSessionPerItemErrorsCount"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("SyncGroupName"),
											DisplayName:            to.Ptr("Sync Group Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ServerEndpointName"),
											DisplayName:            to.Ptr("Server Endpoint Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("SyncDirection"),
											DisplayName:            to.Ptr("Sync Direction"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Count of files failed to sync"),
									DisplayName:        to.Ptr("Files not syncing"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("SyncGroupBatchTransferredFileBytes"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("SyncGroupName"),
											DisplayName:            to.Ptr("Sync Group Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ServerEndpointName"),
											DisplayName:            to.Ptr("Server Endpoint Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("SyncDirection"),
											DisplayName:            to.Ptr("Sync Direction"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Total file size transferred for Sync Sessions"),
									DisplayName:        to.Ptr("Bytes synced"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Bytes"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/cloudEndpoints/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Read any Cloud Endpoints"),
						Operation:   to.Ptr("Read Cloud Endpoints"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Cloud Endpoints"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/cloudEndpoints/write"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Create or Update any Cloud Endpoints"),
						Operation:   to.Ptr("Create or Update Cloud Endpoints"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Cloud Endpoints"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/cloudEndpoints/delete"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Delete any Cloud Endpoints"),
						Operation:   to.Ptr("Delete Cloud Endpoints"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Cloud Endpoints"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/cloudEndpoints/prebackup/action"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Call this action before backup"),
						Operation:   to.Ptr("prebackup"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Cloud Endpoints"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/cloudEndpoints/postbackup/action"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Call this action after backup"),
						Operation:   to.Ptr("postbackup"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Cloud Endpoints"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/cloudEndpoints/prerestore/action"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Call this action before restore"),
						Operation:   to.Ptr("prerestore"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Cloud Endpoints"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/cloudEndpoints/postrestore/action"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Call this action after restore"),
						Operation:   to.Ptr("postrestore"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Cloud Endpoints"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/cloudEndpoints/restoreheartbeat/action"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Restore heartbeat"),
						Operation:   to.Ptr("restoreheartbeat"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Cloud Endpoints"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/cloudEndpoints/operationresults/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Gets the status of an asynchronous backup/restore operation"),
						Operation:   to.Ptr("Read cloudEndpoints/operationresults"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Cloud Endpoints"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/cloudEndpoints/triggerChangeDetection/action"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Call this action to trigger detection of changes on a cloud endpoint's file share"),
						Operation:   to.Ptr("triggerChangeDetection"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Cloud Endpoints"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/serverEndpoints/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Read any Server Endpoints"),
						Operation:   to.Ptr("Read Server Endpoints"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Server Endpoints"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/serverEndpoints/write"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Create or Update any Server Endpoints"),
						Operation:   to.Ptr("Create or Update Server Endpoints"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Server Endpoints"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/serverEndpoints/delete"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Delete any Server Endpoints"),
						Operation:   to.Ptr("Delete Server Endpoints"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Server Endpoints"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/serverEndpoints/recallAction/action"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Call this action to recall files to a server"),
						Operation:   to.Ptr("recallAction"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Server Endpoints"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/syncGroups/serverEndpoints/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Gets the available metrics for Server Endpoints"),
						Operation:   to.Ptr("Read Server Endpoints metric definitions"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Server Endpoint Metrics"),
					},
					Origin: to.Ptr("System"),
					Properties: &armstoragesync.OperationProperties{
						ServiceSpecification: &armstoragesync.OperationResourceServiceSpecification{
							MetricSpecifications: []*armstoragesync.OperationResourceMetricSpecification{
								{
									Name:            to.Ptr("ServerEndpointSyncSessionAppliedFilesCount"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("ServerEndpointName"),
											DisplayName:            to.Ptr("Server Endpoint Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("SyncDirection"),
											DisplayName:            to.Ptr("Sync Direction"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Count of Files synced"),
									DisplayName:        to.Ptr("Files Synced"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("ServerEndpointSyncSessionPerItemErrorsCount"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("ServerEndpointName"),
											DisplayName:            to.Ptr("Server Endpoint Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("SyncDirection"),
											DisplayName:            to.Ptr("Sync Direction"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Count of files failed to sync"),
									DisplayName:        to.Ptr("Files not syncing"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("ServerEndpointBatchTransferredFileBytes"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("ServerEndpointName"),
											DisplayName:            to.Ptr("Server Endpoint Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("SyncDirection"),
											DisplayName:            to.Ptr("Sync Direction"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Total file size transferred for Sync Sessions"),
									DisplayName:        to.Ptr("Bytes synced"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Bytes"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/registeredServers/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Read any Registered Server"),
						Operation:   to.Ptr("Read Registered Server"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Registered Server"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/registeredServers/write"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Create or Update any Registered Server"),
						Operation:   to.Ptr("Create or Update Registered Server"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Registered Server"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/registeredServers/delete"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Delete any Registered Server"),
						Operation:   to.Ptr("Delete Registered Server"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Registered Server"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/registeredServers/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Gets the available metrics for Registered Server"),
						Operation:   to.Ptr("Read Registered Server metric definitions"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Registered Server Metrics"),
					},
					Origin: to.Ptr("System"),
					Properties: &armstoragesync.OperationProperties{
						ServiceSpecification: &armstoragesync.OperationResourceServiceSpecification{
							MetricSpecifications: []*armstoragesync.OperationResourceMetricSpecification{
								{
									Name:            to.Ptr("ServerHeartbeat"),
									AggregationType: to.Ptr("Maximum"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("ServerResourceId"),
											DisplayName:            to.Ptr("Registered Server Id"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ServerName"),
											DisplayName:            to.Ptr("Server Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Metric that logs a value of 1 each time the resigtered server successfully records a heartbeat with the Cloud Endpoint"),
									DisplayName:        to.Ptr("Server Online Status"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("ServerRecallIOTotalSizeBytes"),
									AggregationType: to.Ptr("Total"),
									Dimensions: []*armstoragesync.OperationResourceMetricSpecificationDimension{
										{
											Name:                   to.Ptr("ServerResourceId"),
											DisplayName:            to.Ptr("Registered Server Id"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ServerName"),
											DisplayName:            to.Ptr("Server Name"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("Total size of data recalled by the server"),
									DisplayName:        to.Ptr("Cloud tiering recall"),
									FillGapWithZero:    to.Ptr(false),
									Unit:               to.Ptr("Bytes"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/workflows/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Read Workflows"),
						Operation:   to.Ptr("Read Workflows"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Workflow"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/workflows/operationresults/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Gets the status of an asynchronous operation"),
						Operation:   to.Ptr("Read workflows/operationresults"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Workflow"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/storageSyncServices/workflows/operations/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Gets the status of an asynchronous operation"),
						Operation:   to.Ptr("Read workflows/operations"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Workflow"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/locations/checkNameAvailability/action"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Checks that storage sync service name is valid and is not in use."),
						Operation:   to.Ptr("Check Name Availability"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Name Availability"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/locations/workflows/operations/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Gets the status of an asynchronous operation"),
						Operation:   to.Ptr("Read locations/workflows/operations"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("Workflow"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/locations/operationresults/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Gets the result for an asynchronous operation"),
						Operation:   to.Ptr("Read locations/operationresults"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("operationresults"),
					},
					Origin: to.Ptr("User"),
				},
				{
					Name: to.Ptr("microsoft.storagesync/locations/operations/read"),
					Display: &armstoragesync.OperationDisplayInfo{
						Description: to.Ptr("Gets the status for an azure asynchronous operation"),
						Operation:   to.Ptr("Read locations/operations"),
						Provider:    to.Ptr("microsoft.storagesync"),
						Resource:    to.Ptr("operations"),
					},
					Origin: to.Ptr("User"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationEntityListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationEntityListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageSyncServices_CheckNameAvailability(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServiceCheckNameAvailability_AlreadyExists.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageSyncServiceCheckNameAvailability_AlreadyExists"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewServicesClient("5c6bc8e1-1eaf-4192-94d8-58ce463ac86c", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"westus",
		armstoragesync.CheckNameAvailabilityParameters{
			Name: to.Ptr("newstoragesyncservicename"),
			Type: to.Ptr("Microsoft.StorageSync/storageSyncServices"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServiceCheckNameAvailability_AlreadyExists.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.CheckNameAvailabilityResult{
			Message:       to.Ptr("An account named 'newstoragesyncservicename' is already in use."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr(armstoragesync.NameAvailabilityReasonAlreadyExists),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServiceCheckNameAvailability_AlreadyExists.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServiceCheckNameAvailability_Available.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageSyncServiceCheckNameAvailability_Available"},
	})
	client = armstoragesync.NewServicesClient("5c6bc8e1-1eaf-4192-94d8-58ce463ac86c", cred, &options)
	res, err = client.CheckNameAvailability(ctx,
		"westus",
		armstoragesync.CheckNameAvailabilityParameters{
			Name: to.Ptr("newstoragesyncservicename"),
			Type: to.Ptr("Microsoft.StorageSync/storageSyncServices"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServiceCheckNameAvailability_Available.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.CheckNameAvailabilityResult{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServiceCheckNameAvailability_Available.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageSyncServices_Create(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageSyncServices_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewServicesClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		armstoragesync.ServiceCreateParameters{
			Location: to.Ptr("WestUS"),
			Properties: &armstoragesync.ServiceCreateParametersProperties{
				IncomingTrafficPolicy: to.Ptr(armstoragesync.IncomingTrafficPolicyAllowAllTraffic),
			},
			Tags: map[string]*string{},
		},
		&armstoragesync.ServicesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.Service{
			Name:     to.Ptr("SampleStorageSyncService_1"),
			Type:     to.Ptr("Microsoft.StorageSync/storageSyncServices"),
			ID:       to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1"),
			Location: to.Ptr("WestUS"),
			Tags:     map[string]*string{},
			Properties: &armstoragesync.ServiceProperties{
				IncomingTrafficPolicy: to.Ptr(armstoragesync.IncomingTrafficPolicyAllowAllTraffic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageSyncServices_Get(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageSyncServices_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewServicesClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.Service{
			Name:     to.Ptr("SampleStorageSyncService_1"),
			Type:     to.Ptr("Microsoft.StorageSync/storageSyncServices"),
			ID:       to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1"),
			Location: to.Ptr("WestUS"),
			Tags:     map[string]*string{},
			Properties: &armstoragesync.ServiceProperties{
				IncomingTrafficPolicy: to.Ptr(armstoragesync.IncomingTrafficPolicyAllowAllTraffic),
				PrivateEndpointConnections: []*armstoragesync.PrivateEndpointConnection{
					{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/{resource}/{resourceName}/privateEndpointConnections/SampleStorageSyncService_1.cd99f12ba6f3483f9292229e4f822258"),
						Properties: &armstoragesync.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armstoragesync.PrivateEndpoint{
								ID: to.Ptr("subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_2/providers/Microsoft.Network/privateEndpoints/testpe01"),
							},
							PrivateLinkServiceConnectionState: &armstoragesync.PrivateLinkServiceConnectionState{
								Description: to.Ptr("Please approve my request, thanks."),
								Status:      to.Ptr(armstoragesync.PrivateEndpointServiceConnectionStatusPending),
							},
						},
					}},
				StorageSyncServiceStatus: to.Ptr[int32](0),
				StorageSyncServiceUID:    to.Ptr("\"2de01144-72da-4d7f-9d0c-e858855114a8\""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageSyncServices_Update(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageSyncServices_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewServicesClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		&armstoragesync.ServicesClientBeginUpdateOptions{Parameters: &armstoragesync.ServiceUpdateParameters{
			Properties: &armstoragesync.ServiceUpdateProperties{
				IncomingTrafficPolicy: to.Ptr(armstoragesync.IncomingTrafficPolicyAllowAllTraffic),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("IT"),
				"Environment": to.Ptr("Test"),
			},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.Service{
			Name:     to.Ptr("SampleStorageSyncService_1"),
			Type:     to.Ptr("Microsoft.StorageSync/storageSyncServices"),
			ID:       to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1"),
			Location: to.Ptr("WestUS"),
			Tags: map[string]*string{
				"Dept":        to.Ptr("IT"),
				"Environment": to.Ptr("Test"),
			},
			Properties: &armstoragesync.ServiceProperties{
				IncomingTrafficPolicy: to.Ptr(armstoragesync.IncomingTrafficPolicyAllowAllTraffic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageSyncServices_Delete(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageSyncServices_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewServicesClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		&armstoragesync.ServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_Delete.json: %v", err)
	}
}

func TestStorageSyncServices_ListByResourceGroup(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageSyncServices_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewServicesClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	pager := client.ListByResourceGroup("SampleResourceGroup_1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragesync.ServiceArray{
			Value: []*armstoragesync.Service{
				{
					Name:     to.Ptr("SampleStorageSyncService_1"),
					Type:     to.Ptr("Microsoft.StorageSync/storageSyncServices"),
					ID:       to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1"),
					Location: to.Ptr("WestUS"),
					Tags:     map[string]*string{},
					Properties: &armstoragesync.ServiceProperties{
						IncomingTrafficPolicy:    to.Ptr(armstoragesync.IncomingTrafficPolicyAllowAllTraffic),
						StorageSyncServiceStatus: to.Ptr[int32](0),
						StorageSyncServiceUID:    to.Ptr("\"3d1bf292-0f2a-4cc1-a3e1-60f35800e40c\""),
					},
				},
				{
					Name:     to.Ptr("SampleStorageSyncService_2"),
					Type:     to.Ptr("Microsoft.StorageSync/storageSyncServices"),
					ID:       to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_2"),
					Location: to.Ptr("WestUS"),
					Tags:     map[string]*string{},
					Properties: &armstoragesync.ServiceProperties{
						IncomingTrafficPolicy:    to.Ptr(armstoragesync.IncomingTrafficPolicyAllowAllTraffic),
						StorageSyncServiceStatus: to.Ptr[int32](0),
						StorageSyncServiceUID:    to.Ptr("\"2de01144-72da-4d7f-9d0c-e858855114a8\""),
					},
				},
				{
					Name:     to.Ptr("SampleStorageSyncService_3"),
					Type:     to.Ptr("Microsoft.StorageSync/storageSyncServices"),
					ID:       to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_3"),
					Location: to.Ptr("WestUS"),
					Tags:     map[string]*string{},
					Properties: &armstoragesync.ServiceProperties{
						IncomingTrafficPolicy:    to.Ptr(armstoragesync.IncomingTrafficPolicyAllowAllTraffic),
						StorageSyncServiceStatus: to.Ptr[int32](0),
						StorageSyncServiceUID:    to.Ptr("\"b2c58ee5-933e-462c-8a9e-b30f2bdd8fa3\""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceArray) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageSyncServices_ListBySubscription(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageSyncServices_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewServicesClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragesync.ServiceArray{
			Value: []*armstoragesync.Service{
				{
					Name:     to.Ptr("SampleStorageSyncService_1"),
					Type:     to.Ptr("Microsoft.StorageSync/storageSyncServices"),
					ID:       to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1"),
					Location: to.Ptr("WestUS"),
					Tags:     map[string]*string{},
					Properties: &armstoragesync.ServiceProperties{
						IncomingTrafficPolicy:    to.Ptr(armstoragesync.IncomingTrafficPolicyAllowAllTraffic),
						StorageSyncServiceStatus: to.Ptr[int32](0),
						StorageSyncServiceUID:    to.Ptr("\"3d1bf292-0f2a-4cc1-a3e1-60f35800e40c\""),
					},
				},
				{
					Name:     to.Ptr("SampleStorageSyncService_2"),
					Type:     to.Ptr("Microsoft.StorageSync/storageSyncServices"),
					ID:       to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_2"),
					Location: to.Ptr("WestUS"),
					Tags:     map[string]*string{},
					Properties: &armstoragesync.ServiceProperties{
						IncomingTrafficPolicy:    to.Ptr(armstoragesync.IncomingTrafficPolicyAllowAllTraffic),
						StorageSyncServiceStatus: to.Ptr[int32](0),
						StorageSyncServiceUID:    to.Ptr("\"2de01144-72da-4d7f-9d0c-e858855114a8\""),
					},
				},
				{
					Name:     to.Ptr("SampleStorageSyncService_3"),
					Type:     to.Ptr("Microsoft.StorageSync/storageSyncServices"),
					ID:       to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_3"),
					Location: to.Ptr("WestUS"),
					Tags:     map[string]*string{},
					Properties: &armstoragesync.ServiceProperties{
						IncomingTrafficPolicy:    to.Ptr(armstoragesync.IncomingTrafficPolicyAllowAllTraffic),
						StorageSyncServiceStatus: to.Ptr[int32](0),
						StorageSyncServiceUID:    to.Ptr("\"b2c58ee5-933e-462c-8a9e-b30f2bdd8fa3\""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceArray) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/StorageSyncServices_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_ListByStorageSyncService(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateLinkResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewPrivateLinkResourcesClient("{subscription-id}", cred, &options)
	res, err := client.ListByStorageSyncService(ctx,
		"res6977",
		"sss2527",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateLinkResources_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.PrivateLinkResourceListResult{
			Value: []*armstoragesync.PrivateLinkResource{
				{
					Name: to.Ptr("afs"),
					Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.StorageSync/storageSyncServices/sss2527/privateLinkResources/afs"),
					Properties: &armstoragesync.PrivateLinkResourceProperties{
						GroupID: to.Ptr("afs"),
						RequiredMembers: []*string{
							to.Ptr("management"),
							to.Ptr("sync.primary"),
							to.Ptr("sync.secondary")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.afs.azure.net")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateLinkResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateEndpointConnections_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"res6977",
		"sss2527",
		"{privateEndpointConnectionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateEndpointConnections_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.PrivateEndpointConnection{
			Name: to.Ptr("{privateEndpointConnectionName}"),
			Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.StorageSync/storageSyncServices/sss2527/privateEndpointConnections/{privateEndpointConnectionName}"),
			Properties: &armstoragesync.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armstoragesync.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
				},
				PrivateLinkServiceConnectionState: &armstoragesync.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armstoragesync.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armstoragesync.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateEndpointConnections_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Create(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateEndpointConnections_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"res7687",
		"sss2527",
		"{privateEndpointConnectionName}",
		armstoragesync.PrivateEndpointConnection{
			Properties: &armstoragesync.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armstoragesync.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armstoragesync.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		&armstoragesync.PrivateEndpointConnectionsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateEndpointConnections_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateEndpointConnections_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.PrivateEndpointConnection{
			Name: to.Ptr("{privateEndpointConnectionName}"),
			Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.StorageSync/storageSyncServices/sss2527/privateEndpointConnections/{privateEndpointConnectionName}"),
			Properties: &armstoragesync.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armstoragesync.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
				},
				PrivateLinkServiceConnectionState: &armstoragesync.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armstoragesync.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armstoragesync.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateEndpointConnections_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateEndpointConnections_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"res6977",
		"sss2527",
		"{privateEndpointConnectionName}",
		&armstoragesync.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateEndpointConnections_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateEndpointConnections_Delete.json: %v", err)
	}
}

func TestPrivateEndpointConnections_ListByStorageSyncService(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateEndpointConnections_ListByStorageSyncService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_ListByStorageSyncService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	pager := client.ListByStorageSyncService("res6977",
		"sss2527",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateEndpointConnections_ListByStorageSyncService.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragesync.PrivateEndpointConnectionListResult{
			Value: []*armstoragesync.PrivateEndpointConnection{
				{
					Name: to.Ptr("{privateEndpointConnectionName}"),
					Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.StorageSync/storageSyncServices/sss2527/privateEndpointConnections/{privateEndpointConnectionName}"),
					Properties: &armstoragesync.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armstoragesync.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
						},
						PrivateLinkServiceConnectionState: &armstoragesync.PrivateLinkServiceConnectionState{
							Description: to.Ptr("Auto-Approved"),
							Status:      to.Ptr(armstoragesync.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armstoragesync.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("{privateEndpointConnectionName}"),
					Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.StorageSync/storageSyncServices/sss2527/privateEndpointConnections/{privateEndpointConnectionName}"),
					Properties: &armstoragesync.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armstoragesync.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest02"),
						},
						PrivateLinkServiceConnectionState: &armstoragesync.PrivateLinkServiceConnectionState{
							Description: to.Ptr("Auto-Approved"),
							Status:      to.Ptr(armstoragesync.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armstoragesync.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/PrivateEndpointConnections_ListByStorageSyncService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncGroups_ListByStorageSyncService(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/SyncGroups_ListByStorageSyncService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SyncGroups_ListByStorageSyncService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewSyncGroupsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	pager := client.ListByStorageSyncService("SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/SyncGroups_ListByStorageSyncService.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragesync.SyncGroupArray{
			Value: []*armstoragesync.SyncGroup{
				{
					Name: to.Ptr("SampleSyncGroup_1"),
					Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/syncGroups"),
					ID:   to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SSS_Restore_08-08_Test112/syncGroups/SampleSyncGroup_1"),
					Properties: &armstoragesync.SyncGroupProperties{
						SyncGroupStatus: to.Ptr("0"),
						UniqueID:        to.Ptr("191660cd-6a1a-4f8c-9787-a6bed206a1dd"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SyncGroupArray) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SyncGroupArray)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/SyncGroups_ListByStorageSyncService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncGroups_Create(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/SyncGroups_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SyncGroups_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewSyncGroupsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	res, err := client.Create(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		armstoragesync.SyncGroupCreateParameters{
			Properties: map[string]interface{}{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/SyncGroups_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.SyncGroup{
			Name: to.Ptr("SampleSyncGroup_1"),
			Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/syncGroups"),
			ID:   to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/syncGroups/SampleSyncGroup_1"),
			Properties: &armstoragesync.SyncGroupProperties{
				UniqueID: to.Ptr("7868e4ee-8ddd-4a2d-941b-0041f6052a8a"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SyncGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SyncGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/SyncGroups_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncGroups_Get(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/SyncGroups_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SyncGroups_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewSyncGroupsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/SyncGroups_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.SyncGroup{
			Name: to.Ptr("SampleSyncGroup_1"),
			Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/syncGroups"),
			ID:   to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SSS_Restore_08-08_Test112/syncGroups/SampleSyncGroup_1"),
			Properties: &armstoragesync.SyncGroupProperties{
				SyncGroupStatus: to.Ptr("0"),
				UniqueID:        to.Ptr("191660cd-6a1a-4f8c-9787-a6bed206a1dd"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SyncGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SyncGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/SyncGroups_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSyncGroups_Delete(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/SyncGroups_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SyncGroups_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewSyncGroupsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	_, err := client.Delete(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/SyncGroups_Delete.json: %v", err)
	}
}

func TestCloudEndpoints_Create(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CloudEndpoints_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewCloudEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		"SampleCloudEndpoint_1",
		armstoragesync.CloudEndpointCreateParameters{
			Properties: &armstoragesync.CloudEndpointCreateParametersProperties{
				AzureFileShareName:       to.Ptr("cvcloud-afscv-0719-058-a94a1354-a1fd-4e9a-9a50-919fad8c4ba4"),
				FriendlyName:             to.Ptr("ankushbsubscriptionmgmtmab"),
				StorageAccountResourceID: to.Ptr("/subscriptions/744f4d70-6d17-4921-8970-a765d14f763f/resourceGroups/tminienv59svc/providers/Microsoft.Storage/storageAccounts/tminienv59storage"),
				StorageAccountTenantID:   to.Ptr("\"72f988bf-86f1-41af-91ab-2d7cd011db47\""),
			},
		},
		&armstoragesync.CloudEndpointsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.CloudEndpoint{
			Name: to.Ptr("SampleCloudEndpoint_1"),
			Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/syncGroups/cloudEndpoints"),
			ID:   to.Ptr("/subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/syncGroups/SampleSyncGroup_1/cloudEndpoints/SampleCloudEndpoint_1"),
			Properties: &armstoragesync.CloudEndpointProperties{
				AzureFileShareName:       to.Ptr("cvcloud-afscv-0719-058-a94a1354-a1fd-4e9a-9a50-919fad8c4ba4"),
				BackupEnabled:            to.Ptr("false"),
				FriendlyName:             to.Ptr("ankushbsubscriptionmgmtmab"),
				LastOperationName:        to.Ptr("ICreateCloudEndpointWorkflow"),
				LastWorkflowID:           to.Ptr("storageSyncServices/GATest/workflows/24ba0c4a-348e-419b-8f7a-091d0d9f07a4"),
				PartnershipID:            to.Ptr("1|U0VSVkVSQVNTWU5DQ0xJRU5USEZTVjJ8RjhDODcwQTItMkFGNi00NDUyLTgzMDgtRjJCQTZEQjI3RkEwfEdFTkVSSUN8NTJCOERBMkYtNjFFMC00QTFGLThEREUtMzM2OTExRjM2N0ZC"),
				ProvisioningState:        to.Ptr("Succeeded"),
				StorageAccountResourceID: to.Ptr("/subscriptions/744f4d70-6d17-4921-8970-a765d14f763f/resourceGroups/tminienv59svc/providers/Microsoft.Storage/storageAccounts/tminienv59storage"),
				StorageAccountTenantID:   to.Ptr("\"72f988bf-86f1-41af-91ab-2d7cd011db47\""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CloudEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CloudEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudEndpoints_Get(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CloudEndpoints_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewCloudEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		"SampleCloudEndpoint_1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.CloudEndpoint{
			Name: to.Ptr("SampleCloudEndpoint_1"),
			Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/syncGroups/cloudEndpoints"),
			ID:   to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/syncGroups/SyncGroup_Restore_08-08_Test112/cloudEndpoints/CEP_Restore_08-08_Test112"),
			Properties: &armstoragesync.CloudEndpointProperties{
				AzureFileShareName: to.Ptr(""),
				ChangeEnumerationStatus: &armstoragesync.CloudEndpointChangeEnumerationStatus{
					Activity: &armstoragesync.CloudEndpointChangeEnumerationActivity{
						DeletesProgressPercent:    to.Ptr[int32](12),
						LastUpdatedTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:14:59.0961891Z"); return t }()),
						MinutesRemaining:          to.Ptr[int32](589),
						OperationState:            to.Ptr(armstoragesync.CloudEndpointChangeEnumerationActivityStateEnumerationInProgress),
						ProcessedDirectoriesCount: to.Ptr[int64](364),
						ProcessedFilesCount:       to.Ptr[int64](6948),
						ProgressPercent:           to.Ptr[int32](67),
						StartedTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:14:59.0961891Z"); return t }()),
						StatusCode:                to.Ptr[int32](0),
						TotalCountsState:          to.Ptr(armstoragesync.CloudEndpointChangeEnumerationTotalCountsStateFinal),
						TotalDirectoriesCount:     to.Ptr[int64](694),
						TotalFilesCount:           to.Ptr[int64](12834),
						TotalSizeBytes:            to.Ptr[int64](5782301239408),
					},
					LastEnumerationStatus: &armstoragesync.CloudEndpointLastChangeEnumerationStatus{
						CompletedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:14:59.0961891Z"); return t }()),
						NamespaceDirectoriesCount: to.Ptr[int64](28),
						NamespaceFilesCount:       to.Ptr[int64](3489),
						NamespaceSizeBytes:        to.Ptr[int64](3248804),
						NextRunTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:14:59.0961891Z"); return t }()),
						StartedTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:14:59.0961891Z"); return t }()),
					},
					LastUpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:14:59.0961891Z"); return t }()),
				},
				FriendlyName:             to.Ptr("SampleAzureFileShareName_1"),
				LastOperationName:        to.Ptr("ICreateCloudEndpointWorkflow"),
				LastWorkflowID:           to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/workflows/a377fdd5-949a-40ab-9629-06cd0e9852f9"),
				PartnershipID:            to.Ptr("1|U0VSVkVSQVNTWU5DQ0xJRU5USEZTVjJ8MTkxNjYwQ0QtNkExQS00RjhDLTk3ODctQTZCRUQyMDZBMUREfEdFTkVSSUN8M0EwNDgyODMtMzM4Ri00MDAyLUE5REQtQTUwRkRBRENCMzky"),
				ProvisioningState:        to.Ptr("Succeeded"),
				StorageAccountResourceID: to.Ptr(""),
				StorageAccountTenantID:   to.Ptr("\"a4d1b191-c1af-4cef-a14b-f670e0beea52\""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CloudEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CloudEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudEndpoints_Delete(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CloudEndpoints_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewCloudEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		"SampleCloudEndpoint_1",
		&armstoragesync.CloudEndpointsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_Delete.json: %v", err)
	}
}

func TestCloudEndpoints_ListBySyncGroup(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_ListBySyncGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CloudEndpoints_ListBySyncGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewCloudEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	pager := client.ListBySyncGroup("SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_ListBySyncGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragesync.CloudEndpointArray{
			Value: []*armstoragesync.CloudEndpoint{
				{
					Name: to.Ptr("CEP_Restore_08-08_Test112"),
					Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/syncGroups/cloudEndpoints"),
					ID:   to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/syncGroups/SyncGroup_Restore_08-08_Test112/cloudEndpoints/CEP_Restore_08-08_Test112"),
					Properties: &armstoragesync.CloudEndpointProperties{
						AzureFileShareName: to.Ptr(""),
						ChangeEnumerationStatus: &armstoragesync.CloudEndpointChangeEnumerationStatus{
							Activity: &armstoragesync.CloudEndpointChangeEnumerationActivity{
								LastUpdatedTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:14:59.0961891Z"); return t }()),
								MinutesRemaining:          to.Ptr[int32](589),
								OperationState:            to.Ptr(armstoragesync.CloudEndpointChangeEnumerationActivityState("Delayed")),
								ProcessedDirectoriesCount: to.Ptr[int64](364),
								ProcessedFilesCount:       to.Ptr[int64](6948),
								ProgressPercent:           to.Ptr[int32](67),
								StartedTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:14:59.0961891Z"); return t }()),
								StatusCode:                to.Ptr[int32](-1),
								TotalCountsState:          to.Ptr(armstoragesync.CloudEndpointChangeEnumerationTotalCountsStateCalculating),
								TotalDirectoriesCount:     to.Ptr[int64](694),
								TotalFilesCount:           to.Ptr[int64](12834),
								TotalSizeBytes:            to.Ptr[int64](5782301239408),
							},
							LastEnumerationStatus: &armstoragesync.CloudEndpointLastChangeEnumerationStatus{
								CompletedTimestamp:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:14:59.0961891Z"); return t }()),
								NamespaceDirectoriesCount: to.Ptr[int64](28),
								NamespaceFilesCount:       to.Ptr[int64](3489),
								NamespaceSizeBytes:        to.Ptr[int64](3248804),
								NextRunTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:14:59.0961891Z"); return t }()),
								StartedTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:14:59.0961891Z"); return t }()),
							},
							LastUpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:14:59.0961891Z"); return t }()),
						},
						FriendlyName:             to.Ptr("SampleAzureFileShareName_1"),
						LastOperationName:        to.Ptr("ICreateCloudEndpointWorkflow"),
						LastWorkflowID:           to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/workflows/a377fdd5-949a-40ab-9629-06cd0e9852f9"),
						PartnershipID:            to.Ptr("1|U0VSVkVSQVNTWU5DQ0xJRU5Udfsdfdsfs8MTkxNjYwQ0QtNkExQS00RjhDLTk3ODctQTZCRUQyMDZBMUREfEdFTkVSSUN8M0EwNDgyODMtMzM4Ri00MDAyLUE5REQtQTUwRkRBRENCMzky"),
						ProvisioningState:        to.Ptr("Succeeded"),
						StorageAccountResourceID: to.Ptr(""),
						StorageAccountTenantID:   to.Ptr("\"a4d1b191-c1af-4cef-a14b-f670e0beea52\""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CloudEndpointArray) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CloudEndpointArray)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_ListBySyncGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudEndpoints_PreBackup(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PreBackup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CloudEndpoints_PreBackup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewCloudEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginPreBackup(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		"SampleCloudEndpoint_1",
		armstoragesync.BackupRequest{
			AzureFileShare: to.Ptr("https://sampleserver.file.core.test-cint.azure-test.net/sampleFileShare"),
		},
		&armstoragesync.CloudEndpointsClientBeginPreBackupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PreBackup.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PreBackup.json: %v", err)
	}
}

func TestCloudEndpoints_PostBackup(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PostBackup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CloudEndpoints_PostBackup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewCloudEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginPostBackup(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		"SampleCloudEndpoint_1",
		armstoragesync.BackupRequest{
			AzureFileShare: to.Ptr("https://sampleserver.file.core.test-cint.azure-test.net/sampleFileShare"),
		},
		&armstoragesync.CloudEndpointsClientBeginPostBackupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PostBackup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PostBackup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.PostBackupResponse{
			BackupMetadata: &armstoragesync.PostBackupResponseProperties{
				CloudEndpointName: to.Ptr("subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/syncGroups/SampleSyncGroup_1/cloudEndpoints/SampleCloudEndpoint_1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PostBackupResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PostBackupResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PostBackup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudEndpoints_PreRestore(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PreRestore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CloudEndpoints_PreRestore"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewCloudEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginPreRestore(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		"SampleCloudEndpoint_1",
		armstoragesync.PreRestoreRequest{
			AzureFileShareURI: to.Ptr("https://hfsazbackupdevintncus2.file.core.test-cint.azure-test.net/sampleFileShare"),
			RestoreFileSpec: []*armstoragesync.RestoreFileSpec{
				{
					Path:  to.Ptr("text1.txt"),
					Isdir: to.Ptr(false),
				},
				{
					Path:  to.Ptr("MyDir"),
					Isdir: to.Ptr(true),
				},
				{
					Path:  to.Ptr("MyDir/SubDir"),
					Isdir: to.Ptr(false),
				},
				{
					Path:  to.Ptr("MyDir/SubDir/File1.pdf"),
					Isdir: to.Ptr(false),
				}},
		},
		&armstoragesync.CloudEndpointsClientBeginPreRestoreOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PreRestore.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PreRestore.json: %v", err)
	}
}

func TestCloudEndpoints_Restoreheartbeat(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_RestoreHeatbeat.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CloudEndpoints_restoreheartbeat"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewCloudEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	_, err := client.Restoreheartbeat(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		"SampleCloudEndpoint_1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_RestoreHeatbeat.json: %v", err)
	}
}

func TestCloudEndpoints_PostRestore(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PostRestore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CloudEndpoints_PostRestore"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewCloudEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginPostRestore(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		"SampleCloudEndpoint_1",
		armstoragesync.PostRestoreRequest{
			AzureFileShareURI: to.Ptr("https://hfsazbackupdevintncus2.file.core.test-cint.azure-test.net/sampleFileShare"),
			RestoreFileSpec: []*armstoragesync.RestoreFileSpec{
				{
					Path:  to.Ptr("text1.txt"),
					Isdir: to.Ptr(false),
				},
				{
					Path:  to.Ptr("MyDir"),
					Isdir: to.Ptr(true),
				},
				{
					Path:  to.Ptr("MyDir/SubDir"),
					Isdir: to.Ptr(false),
				},
				{
					Path:  to.Ptr("MyDir/SubDir/File1.pdf"),
					Isdir: to.Ptr(false),
				}},
			SourceAzureFileShareURI: to.Ptr("https://hfsazbackupdevintncus2.file.core.test-cint.azure-test.net/sampleFileShare"),
			Status:                  to.Ptr("Succeeded"),
		},
		&armstoragesync.CloudEndpointsClientBeginPostRestoreOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PostRestore.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PostRestore.json: %v", err)
	}
}

func TestCloudEndpoints_TriggerChangeDetection(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_TriggerChangeDetection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CloudEndpoints_TriggerChangeDetection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewCloudEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginTriggerChangeDetection(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		"SampleCloudEndpoint_1",
		armstoragesync.TriggerChangeDetectionParameters{
			ChangeDetectionMode: to.Ptr(armstoragesync.ChangeDetectionModeRecursive),
			DirectoryPath:       to.Ptr("NewDirectory"),
		},
		&armstoragesync.CloudEndpointsClientBeginTriggerChangeDetectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_TriggerChangeDetection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_TriggerChangeDetection.json: %v", err)
	}
}

func TestServerEndpoints_Create(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerEndpoints_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewServerEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		"SampleServerEndpoint_1",
		armstoragesync.ServerEndpointCreateParameters{
			Properties: &armstoragesync.ServerEndpointCreateParametersProperties{
				CloudTiering:                 to.Ptr(armstoragesync.FeatureStatusOff),
				InitialDownloadPolicy:        to.Ptr(armstoragesync.InitialDownloadPolicyNamespaceThenModifiedFiles),
				InitialUploadPolicy:          to.Ptr(armstoragesync.InitialUploadPolicyServerAuthoritative),
				LocalCacheMode:               to.Ptr(armstoragesync.LocalCacheModeUpdateLocallyCachedFiles),
				OfflineDataTransfer:          to.Ptr(armstoragesync.FeatureStatusOn),
				OfflineDataTransferShareName: to.Ptr("myfileshare"),
				ServerLocalPath:              to.Ptr("D:\\SampleServerEndpoint_1"),
				ServerResourceID:             to.Ptr("/subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/registeredServers/080d4133-bdb5-40a0-96a0-71a6057bfe9a"),
				TierFilesOlderThanDays:       to.Ptr[int32](0),
				VolumeFreeSpacePercent:       to.Ptr[int32](100),
			},
		},
		&armstoragesync.ServerEndpointsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.ServerEndpoint{
			Name: to.Ptr("SampleServerEndpoint_1"),
			Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/syncGroups/serverEndpoints"),
			ID:   to.Ptr("/subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/syncGroups/SampleSyncGroup_1/serverEndpoints/SampleServerEndpoint_1"),
			Properties: &armstoragesync.ServerEndpointProperties{
				CloudTiering:                 to.Ptr(armstoragesync.FeatureStatusOff),
				FriendlyName:                 to.Ptr("somemachine.redmond.corp.microsoft.com"),
				InitialDownloadPolicy:        to.Ptr(armstoragesync.InitialDownloadPolicyNamespaceThenModifiedFiles),
				InitialUploadPolicy:          to.Ptr(armstoragesync.InitialUploadPolicyServerAuthoritative),
				LastOperationName:            to.Ptr("ICreateServerEndpointWorkflow"),
				LastWorkflowID:               to.Ptr("storageSyncServices/healthDemo1/workflows/569afb5c-7172-4cf8-a8ea-d987f727f11a"),
				LocalCacheMode:               to.Ptr(armstoragesync.LocalCacheModeUpdateLocallyCachedFiles),
				OfflineDataTransfer:          to.Ptr(armstoragesync.FeatureStatusOn),
				OfflineDataTransferShareName: to.Ptr("myfileshare"),
				OfflineDataTransferStorageAccountResourceID: to.Ptr("/subscriptions/744f4d70-6d17-4921-8970-a765d14f763f/resourceGroups/myRG/providers/Microsoft.Storage/storageAccounts/mysa"),
				OfflineDataTransferStorageAccountTenantID:   to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
				ProvisioningState:                           to.Ptr("Succeeded"),
				ServerLocalPath:                             to.Ptr("D:\\SampleServerEndpoint_1"),
				ServerName:                                  to.Ptr("somemachine.redmond.corp.microsoft.com"),
				ServerResourceID:                            to.Ptr("/subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/registeredServers/080d4133-bdb5-40a0-96a0-71a6057bfe9a"),
				TierFilesOlderThanDays:                      to.Ptr[int32](0),
				VolumeFreeSpacePercent:                      to.Ptr[int32](100),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerEndpoints_Update(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerEndpoints_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewServerEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		"SampleServerEndpoint_1",
		&armstoragesync.ServerEndpointsClientBeginUpdateOptions{Parameters: &armstoragesync.ServerEndpointUpdateParameters{
			Properties: &armstoragesync.ServerEndpointUpdateProperties{
				CloudTiering:           to.Ptr(armstoragesync.FeatureStatusOff),
				LocalCacheMode:         to.Ptr(armstoragesync.LocalCacheModeUpdateLocallyCachedFiles),
				OfflineDataTransfer:    to.Ptr(armstoragesync.FeatureStatusOff),
				TierFilesOlderThanDays: to.Ptr[int32](0),
				VolumeFreeSpacePercent: to.Ptr[int32](100),
			},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.ServerEndpoint{
			Name: to.Ptr("SampleServerEndpoint_1"),
			Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/syncGroups/serverEndpoints"),
			ID:   to.Ptr("/subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/syncGroups/SampleSyncGroup_1/serverEndpoints/SampleServerEndpoint_1"),
			Properties: &armstoragesync.ServerEndpointProperties{
				CloudTiering:                 to.Ptr(armstoragesync.FeatureStatusOff),
				FriendlyName:                 to.Ptr("somemachine2.redmond.corp.microsoft.com"),
				InitialDownloadPolicy:        to.Ptr(armstoragesync.InitialDownloadPolicyNamespaceThenModifiedFiles),
				InitialUploadPolicy:          to.Ptr(armstoragesync.InitialUploadPolicyMerge),
				LastOperationName:            to.Ptr("ICreateServerEndpointWorkflow"),
				LastWorkflowID:               to.Ptr("storageSyncServices/healthDemo1/workflows/569afb5c-7172-4cf8-a8ea-d987f727f11b"),
				LocalCacheMode:               to.Ptr(armstoragesync.LocalCacheModeUpdateLocallyCachedFiles),
				OfflineDataTransfer:          to.Ptr(armstoragesync.FeatureStatusOff),
				OfflineDataTransferShareName: to.Ptr("myfileshare"),
				OfflineDataTransferStorageAccountResourceID: to.Ptr("/subscriptions/744f4d70-6d17-4921-8970-a765d14f763f/resourceGroups/myRG/providers/Microsoft.Storage/storageAccounts/mysa"),
				OfflineDataTransferStorageAccountTenantID:   to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
				ProvisioningState:                           to.Ptr("Succeeded"),
				ServerLocalPath:                             to.Ptr("C:\\data_quota2"),
				ServerName:                                  to.Ptr("somemachine2.redmond.corp.microsoft.com"),
				ServerResourceID:                            to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/anpintDemoRG/providers/kailanitest07.one.microsoft.com/storageSyncServices/healthdemo1/registeredServers/f94e2944-b48d-4e5b-bdc7-c48ab3712659"),
				SyncStatus: &armstoragesync.ServerEndpointSyncStatus{
					CombinedHealth: to.Ptr(armstoragesync.ServerEndpointHealthStateError),
					DownloadHealth: to.Ptr(armstoragesync.ServerEndpointHealthStateHealthy),
					DownloadStatus: &armstoragesync.ServerEndpointSyncSessionStatus{
						LastSyncPerItemErrorCount: to.Ptr[int64](0),
						LastSyncResult:            to.Ptr[int32](0),
						LastSyncSuccessTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:28:33.9217334Z"); return t }()),
						LastSyncTimestamp:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:28:33.9217334Z"); return t }()),
					},
					LastUpdatedTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
					OfflineDataTransferStatus: to.Ptr(armstoragesync.ServerEndpointOfflineDataTransferStateStopping),
					UploadHealth:              to.Ptr(armstoragesync.ServerEndpointHealthStateError),
					UploadStatus: &armstoragesync.ServerEndpointSyncSessionStatus{
						LastSyncPerItemErrorCount: to.Ptr[int64](0),
						LastSyncResult:            to.Ptr[int32](-2134351810),
						LastSyncTimestamp:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
					},
				},
				TierFilesOlderThanDays: to.Ptr[int32](0),
				VolumeFreeSpacePercent: to.Ptr[int32](20),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerEndpoints_Get(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerEndpoints_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewServerEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		"SampleServerEndpoint_1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.ServerEndpoint{
			Name: to.Ptr("SampleServerEndpoint_1"),
			Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/syncGroups/serverEndpoints"),
			ID:   to.Ptr("/subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/syncGroups/SampleSyncGroup_1/serverEndpoints/SampleServerEndpoint_1"),
			Properties: &armstoragesync.ServerEndpointProperties{
				CloudTiering: to.Ptr(armstoragesync.FeatureStatusOn),
				CloudTieringStatus: &armstoragesync.ServerEndpointCloudTieringStatus{
					CachePerformance: &armstoragesync.CloudTieringCachePerformance{
						CacheHitBytes:        to.Ptr[int64](922337203685477600),
						CacheHitBytesPercent: to.Ptr[int32](50),
						CacheMissBytes:       to.Ptr[int64](922337203685477600),
						LastUpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:04:59.1959227Z"); return t }()),
					},
					DatePolicyStatus: &armstoragesync.CloudTieringDatePolicyStatus{
						LastUpdatedTimestamp:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:04:59.1959227Z"); return t }()),
						TieredFilesMostRecentAccessTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:04:59.1959227Z"); return t }()),
					},
					FilesNotTiering: &armstoragesync.CloudTieringFilesNotTiering{
						Errors: []*armstoragesync.FilesNotTieringError{
							{
								ErrorCode: to.Ptr[int32](-2134347771),
								FileCount: to.Ptr[int64](10),
							},
							{
								ErrorCode: to.Ptr[int32](-2134347770),
								FileCount: to.Ptr[int64](20),
							},
							{
								ErrorCode: to.Ptr[int32](-2134347769),
								FileCount: to.Ptr[int64](30),
							}},
						LastUpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:04:59.1959227Z"); return t }()),
						TotalFileCount:       to.Ptr[int64](60),
					},
					Health:                     to.Ptr(armstoragesync.ServerEndpointHealthStateError),
					HealthLastUpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
					LastCloudTieringResult:     to.Ptr[int32](-2134347771),
					LastSuccessTimestamp:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
					LastUpdatedTimestamp:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
					SpaceSavings: &armstoragesync.CloudTieringSpaceSavings{
						CachedSizeBytes:      to.Ptr[int64](50000000),
						LastUpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:04:59.1959227Z"); return t }()),
						SpaceSavingsBytes:    to.Ptr[int64](50000000),
						SpaceSavingsPercent:  to.Ptr[int32](50),
						TotalSizeCloudBytes:  to.Ptr[int64](100000000),
						VolumeSizeBytes:      to.Ptr[int64](922337203685477600),
					},
					VolumeFreeSpacePolicyStatus: &armstoragesync.CloudTieringVolumeFreeSpacePolicyStatus{
						CurrentVolumeFreeSpacePercent:  to.Ptr[int32](5),
						EffectiveVolumeFreeSpacePolicy: to.Ptr[int32](30),
						LastUpdatedTimestamp:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:04:59.1959227Z"); return t }()),
					},
				},
				FriendlyName:                                to.Ptr("somemachine.redmond.corp.microsoft.com"),
				InitialDownloadPolicy:                       to.Ptr(armstoragesync.InitialDownloadPolicyNamespaceThenModifiedFiles),
				InitialUploadPolicy:                         to.Ptr(armstoragesync.InitialUploadPolicyMerge),
				LastOperationName:                           to.Ptr("ICreateServerEndpointWorkflow"),
				LastWorkflowID:                              to.Ptr("storageSyncServices/healthDemo1/workflows/569afb5c-7172-4cf8-a8ea-d987f727f11a"),
				LocalCacheMode:                              to.Ptr(armstoragesync.LocalCacheModeUpdateLocallyCachedFiles),
				OfflineDataTransfer:                         to.Ptr(armstoragesync.FeatureStatusOn),
				OfflineDataTransferShareName:                to.Ptr("myfileshare"),
				OfflineDataTransferStorageAccountResourceID: to.Ptr("/subscriptions/744f4d70-6d17-4921-8970-a765d14f763f/resourceGroups/myRG/providers/Microsoft.Storage/storageAccounts/mysa"),
				OfflineDataTransferStorageAccountTenantID:   to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
				ProvisioningState:                           to.Ptr("Succeeded"),
				RecallStatus: &armstoragesync.ServerEndpointRecallStatus{
					LastUpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
					RecallErrors: []*armstoragesync.ServerEndpointRecallError{
						{
							Count:     to.Ptr[int64](5),
							ErrorCode: to.Ptr[int32](-2134347775),
						},
						{
							Count:     to.Ptr[int64](10),
							ErrorCode: to.Ptr[int32](-2134347774),
						},
						{
							Count:     to.Ptr[int64](15),
							ErrorCode: to.Ptr[int32](-2134347773),
						}},
					TotalRecallErrorsCount: to.Ptr[int64](30),
				},
				ServerLocalPath:  to.Ptr("D:\\SampleServerEndpoint_1"),
				ServerName:       to.Ptr("somemachine.redmond.corp.microsoft.com"),
				ServerResourceID: to.Ptr("/subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/registeredServers/080d4133-bdb5-40a0-96a0-71a6057bfe9a"),
				SyncStatus: &armstoragesync.ServerEndpointSyncStatus{
					CombinedHealth: to.Ptr(armstoragesync.ServerEndpointHealthStateError),
					DownloadActivity: &armstoragesync.ServerEndpointSyncActivityStatus{
						AppliedBytes:      to.Ptr[int64](94805587),
						AppliedItemCount:  to.Ptr[int64](100),
						PerItemErrorCount: to.Ptr[int64](0),
						Timestamp:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
						TotalBytes:        to.Ptr[int64](19583674),
						TotalItemCount:    to.Ptr[int64](300),
					},
					DownloadHealth: to.Ptr(armstoragesync.ServerEndpointHealthStateHealthy),
					DownloadStatus: &armstoragesync.ServerEndpointSyncSessionStatus{
						LastSyncPerItemErrorCount: to.Ptr[int64](0),
						LastSyncResult:            to.Ptr[int32](0),
						LastSyncSuccessTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:28:33.9217334Z"); return t }()),
						LastSyncTimestamp:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:28:33.9217334Z"); return t }()),
					},
					LastUpdatedTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
					OfflineDataTransferStatus: to.Ptr(armstoragesync.ServerEndpointOfflineDataTransferStateInProgress),
					SyncActivity:              to.Ptr(armstoragesync.ServerEndpointSyncActivityStateUploadAndDownload),
					UploadActivity: &armstoragesync.ServerEndpointSyncActivityStatus{
						AppliedBytes:      to.Ptr[int64](57348983),
						AppliedItemCount:  to.Ptr[int64](1000),
						PerItemErrorCount: to.Ptr[int64](300),
						Timestamp:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
						TotalBytes:        to.Ptr[int64](1958367412),
						TotalItemCount:    to.Ptr[int64](2300),
					},
					UploadHealth: to.Ptr(armstoragesync.ServerEndpointHealthStateError),
					UploadStatus: &armstoragesync.ServerEndpointSyncSessionStatus{
						LastSyncPerItemErrorCount: to.Ptr[int64](1000),
						LastSyncResult:            to.Ptr[int32](-2134351810),
						LastSyncTimestamp:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
					},
				},
				TierFilesOlderThanDays: to.Ptr[int32](0),
				VolumeFreeSpacePercent: to.Ptr[int32](100),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerEndpoints_Delete(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerEndpoints_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewServerEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		"SampleServerEndpoint_1",
		&armstoragesync.ServerEndpointsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Delete.json: %v", err)
	}
}

func TestServerEndpoints_ListBySyncGroup(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_ListBySyncGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerEndpoints_ListBySyncGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewServerEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	pager := client.ListBySyncGroup("SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_ListBySyncGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragesync.ServerEndpointArray{
			Value: []*armstoragesync.ServerEndpoint{
				{
					Name: to.Ptr("SampleServerEndpoint_1"),
					Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/syncGroups/serverEndpoints"),
					ID:   to.Ptr("/subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/syncGroups/SampleSyncGroup_1/serverEndpoints/SampleServerEndpoint_1"),
					Properties: &armstoragesync.ServerEndpointProperties{
						CloudTiering:                 to.Ptr(armstoragesync.FeatureStatusOff),
						FriendlyName:                 to.Ptr("somemachine.redmond.corp.microsoft.com"),
						InitialDownloadPolicy:        to.Ptr(armstoragesync.InitialDownloadPolicyNamespaceThenModifiedFiles),
						InitialUploadPolicy:          to.Ptr(armstoragesync.InitialUploadPolicyMerge),
						LastOperationName:            to.Ptr("ICreateServerEndpointWorkflow"),
						LastWorkflowID:               to.Ptr("storageSyncServices/healthDemo1/workflows/569afb5c-7172-4cf8-a8ea-d987f727f11a"),
						LocalCacheMode:               to.Ptr(armstoragesync.LocalCacheModeUpdateLocallyCachedFiles),
						OfflineDataTransfer:          to.Ptr(armstoragesync.FeatureStatusOn),
						OfflineDataTransferShareName: to.Ptr("myfileshare"),
						OfflineDataTransferStorageAccountResourceID: to.Ptr("/subscriptions/744f4d70-6d17-4921-8970-a765d14f763f/resourceGroups/myRG/providers/Microsoft.Storage/storageAccounts/mysa"),
						OfflineDataTransferStorageAccountTenantID:   to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
						ProvisioningState:                           to.Ptr("Succeeded"),
						ServerLocalPath:                             to.Ptr("D:\\SampleServerEndpoint_1"),
						ServerName:                                  to.Ptr("somemachine.redmond.corp.microsoft.com"),
						ServerResourceID:                            to.Ptr("/subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/registeredServers/080d4133-bdb5-40a0-96a0-71a6057bfe9a"),
						SyncStatus: &armstoragesync.ServerEndpointSyncStatus{
							CombinedHealth: to.Ptr(armstoragesync.ServerEndpointHealthStateError),
							DownloadHealth: to.Ptr(armstoragesync.ServerEndpointHealthStateHealthy),
							DownloadStatus: &armstoragesync.ServerEndpointSyncSessionStatus{
								LastSyncPerItemErrorCount: to.Ptr[int64](1000),
								LastSyncResult:            to.Ptr[int32](0),
								LastSyncSuccessTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:28:33.9217334Z"); return t }()),
								LastSyncTimestamp:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:28:33.9217334Z"); return t }()),
							},
							LastUpdatedTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
							OfflineDataTransferStatus: to.Ptr(armstoragesync.ServerEndpointOfflineDataTransferStateComplete),
							UploadHealth:              to.Ptr(armstoragesync.ServerEndpointHealthStateError),
							UploadStatus: &armstoragesync.ServerEndpointSyncSessionStatus{
								LastSyncPerItemErrorCount: to.Ptr[int64](0),
								LastSyncResult:            to.Ptr[int32](0),
								LastSyncSuccessTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
								LastSyncTimestamp:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
							},
						},
						TierFilesOlderThanDays: to.Ptr[int32](0),
						VolumeFreeSpacePercent: to.Ptr[int32](100),
					},
				},
				{
					Name: to.Ptr("SampleServerEndpoint_2"),
					Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/syncGroups/serverEndpoints"),
					ID:   to.Ptr("/subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/syncGroups/SampleSyncGroup_1/serverEndpoints/SampleServerEndpoint_2"),
					Properties: &armstoragesync.ServerEndpointProperties{
						CloudTiering: to.Ptr(armstoragesync.FeatureStatusOn),
						CloudTieringStatus: &armstoragesync.ServerEndpointCloudTieringStatus{
							CachePerformance: &armstoragesync.CloudTieringCachePerformance{
								CacheHitBytes:        to.Ptr[int64](922337203685477600),
								CacheHitBytesPercent: to.Ptr[int32](50),
								CacheMissBytes:       to.Ptr[int64](922337203685477600),
								LastUpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:04:59.1959227Z"); return t }()),
							},
							DatePolicyStatus: &armstoragesync.CloudTieringDatePolicyStatus{
								LastUpdatedTimestamp:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:04:59.1959227Z"); return t }()),
								TieredFilesMostRecentAccessTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:04:59.1959227Z"); return t }()),
							},
							FilesNotTiering: &armstoragesync.CloudTieringFilesNotTiering{
								Errors: []*armstoragesync.FilesNotTieringError{
									{
										ErrorCode: to.Ptr[int32](-2134347771),
										FileCount: to.Ptr[int64](10),
									},
									{
										ErrorCode: to.Ptr[int32](-2134347770),
										FileCount: to.Ptr[int64](20),
									},
									{
										ErrorCode: to.Ptr[int32](-2134347769),
										FileCount: to.Ptr[int64](30),
									}},
								LastUpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:04:59.1959227Z"); return t }()),
								TotalFileCount:       to.Ptr[int64](60),
							},
							Health:                     to.Ptr(armstoragesync.ServerEndpointHealthStateError),
							HealthLastUpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
							LastCloudTieringResult:     to.Ptr[int32](-2134347771),
							LastSuccessTimestamp:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
							LastUpdatedTimestamp:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
							SpaceSavings: &armstoragesync.CloudTieringSpaceSavings{
								CachedSizeBytes:      to.Ptr[int64](50000000),
								LastUpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:04:59.1959227Z"); return t }()),
								SpaceSavingsBytes:    to.Ptr[int64](50000000),
								SpaceSavingsPercent:  to.Ptr[int32](50),
								TotalSizeCloudBytes:  to.Ptr[int64](100000000),
								VolumeSizeBytes:      to.Ptr[int64](922337203685477600),
							},
							VolumeFreeSpacePolicyStatus: &armstoragesync.CloudTieringVolumeFreeSpacePolicyStatus{
								CurrentVolumeFreeSpacePercent:  to.Ptr[int32](5),
								EffectiveVolumeFreeSpacePolicy: to.Ptr[int32](30),
								LastUpdatedTimestamp:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:04:59.1959227Z"); return t }()),
							},
						},
						FriendlyName:          to.Ptr("somemachine2.redmond.corp.microsoft.com"),
						InitialDownloadPolicy: to.Ptr(armstoragesync.InitialDownloadPolicyNamespaceThenModifiedFiles),
						InitialUploadPolicy:   to.Ptr(armstoragesync.InitialUploadPolicyMerge),
						LastOperationName:     to.Ptr("ICreateServerEndpointWorkflow"),
						LastWorkflowID:        to.Ptr("storageSyncServices/healthDemo1/workflows/40b1dc00-d7d9-4721-a1e9-ab60139b830a"),
						LocalCacheMode:        to.Ptr(armstoragesync.LocalCacheModeUpdateLocallyCachedFiles),
						OfflineDataTransfer:   to.Ptr(armstoragesync.FeatureStatusOff),
						ProvisioningState:     to.Ptr("Succeeded"),
						RecallStatus: &armstoragesync.ServerEndpointRecallStatus{
							LastUpdatedTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
							RecallErrors: []*armstoragesync.ServerEndpointRecallError{
								{
									Count:     to.Ptr[int64](5),
									ErrorCode: to.Ptr[int32](-2134347775),
								},
								{
									Count:     to.Ptr[int64](10),
									ErrorCode: to.Ptr[int32](-2134347774),
								},
								{
									Count:     to.Ptr[int64](15),
									ErrorCode: to.Ptr[int32](-2134347773),
								}},
							TotalRecallErrorsCount: to.Ptr[int64](30),
						},
						ServerLocalPath:  to.Ptr("D:\\SampleServerEndpoint_2"),
						ServerName:       to.Ptr("somemachine2.redmond.corp.microsoft.com"),
						ServerResourceID: to.Ptr("/subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/registeredServers/f94e2944-b48d-4e5b-bdc7-c48ab3712659"),
						SyncStatus: &armstoragesync.ServerEndpointSyncStatus{
							CombinedHealth: to.Ptr(armstoragesync.ServerEndpointHealthStateHealthy),
							DownloadHealth: to.Ptr(armstoragesync.ServerEndpointHealthStateHealthy),
							DownloadStatus: &armstoragesync.ServerEndpointSyncSessionStatus{
								LastSyncPerItemErrorCount: to.Ptr[int64](0),
								LastSyncResult:            to.Ptr[int32](0),
								LastSyncSuccessTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:28:33.9217334Z"); return t }()),
								LastSyncTimestamp:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:28:33.9217334Z"); return t }()),
							},
							LastUpdatedTimestamp:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
							OfflineDataTransferStatus: to.Ptr(armstoragesync.ServerEndpointOfflineDataTransferStateNotRunning),
							SyncActivity:              to.Ptr(armstoragesync.ServerEndpointSyncActivityStateUpload),
							UploadActivity: &armstoragesync.ServerEndpointSyncActivityStatus{
								AppliedBytes:      to.Ptr[int64](57348983),
								AppliedItemCount:  to.Ptr[int64](1000),
								PerItemErrorCount: to.Ptr[int64](300),
								Timestamp:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
								TotalBytes:        to.Ptr[int64](1958367412),
								TotalItemCount:    to.Ptr[int64](2300),
							},
							UploadHealth: to.Ptr(armstoragesync.ServerEndpointHealthStateHealthy),
							UploadStatus: &armstoragesync.ServerEndpointSyncSessionStatus{
								LastSyncPerItemErrorCount: to.Ptr[int64](0),
								LastSyncResult:            to.Ptr[int32](0),
								LastSyncSuccessTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:28:33.9217334Z"); return t }()),
								LastSyncTimestamp:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T23:32:51.1057915Z"); return t }()),
							},
						},
						TierFilesOlderThanDays: to.Ptr[int32](5),
						VolumeFreeSpacePercent: to.Ptr[int32](80),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerEndpointArray) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerEndpointArray)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_ListBySyncGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerEndpoints_RecallAction(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Recall.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerEndpoints_recallAction"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewServerEndpointsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginRecallAction(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"SampleSyncGroup_1",
		"SampleServerEndpoint_1",
		armstoragesync.RecallActionParameters{
			Pattern:    to.Ptr(""),
			RecallPath: to.Ptr(""),
		},
		&armstoragesync.ServerEndpointsClientBeginRecallActionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Recall.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/ServerEndpoints_Recall.json: %v", err)
	}
}

func TestRegisteredServers_ListByStorageSyncService(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_ListByStorageSyncService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegisteredServers_ListByStorageSyncService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewRegisteredServersClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	pager := client.ListByStorageSyncService("SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_ListByStorageSyncService.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragesync.RegisteredServerArray{
			Value: []*armstoragesync.RegisteredServer{
				{
					Name: to.Ptr("SampleRegisteredServer_1.redmond.corp.microsoft.com"),
					Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/registeredServers"),
					ID:   to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/registeredServers/080d4133-bdb5-40a0-96a0-71a6057bfe9a"),
					Properties: &armstoragesync.RegisteredServerProperties{
						AgentVersion:               to.Ptr("3.1.5.0"),
						AgentVersionExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T21:50:40.5840543Z"); return t }()),
						AgentVersionStatus:         to.Ptr(armstoragesync.RegisteredServerAgentVersionStatusOk),
						ClusterID:                  to.Ptr("00000000-0000-0000-0000-000000000000"),
						ClusterName:                to.Ptr(""),
						DiscoveryEndpointURI:       to.Ptr("https://kailanitest99.one.microsoft.com:443"),
						FriendlyName:               to.Ptr("afscv-2304-139"),
						LastHeartBeat:              to.Ptr("2018-06-11T21:50:40.5840543Z"),
						LastOperationName:          to.Ptr("ICreateRegisteredServerWorkflow"),
						LastWorkflowID:             to.Ptr("storageSyncServices/CV_FileStore_F1D485AA/workflows/4eecfbcf-9537-4b61-8fee-aaa3ace11c44"),
						ManagementEndpointURI:      to.Ptr("https://kailanitest99.one.microsoft.com:443/"),
						MonitoringEndpointURI:      to.Ptr("https://kailanitest99.one.microsoft.com:443/"),
						ProvisioningState:          to.Ptr("Succeeded"),
						ResourceLocation:           to.Ptr("westus"),
						ServerID:                   to.Ptr("3635ca8b-5cc8-4a5c-bd43-c2de5ad8dc64"),
						ServerManagementErrorCode:  to.Ptr[int32](0),
						ServerName:                 to.Ptr("afscv-2304-139"),
						ServerOSVersion:            to.Ptr("10.0.14393.0"),
						ServerRole:                 to.Ptr("Standalone"),
						ServiceLocation:            to.Ptr("westus"),
						StorageSyncServiceUID:      to.Ptr("4aa14534-1c61-483b-b6a6-9630a76f109a"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RegisteredServerArray) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RegisteredServerArray)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_ListByStorageSyncService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegisteredServers_Get(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegisteredServers_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewRegisteredServersClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"080d4133-bdb5-40a0-96a0-71a6057bfe9a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.RegisteredServer{
			Name: to.Ptr("SampleRegisteredServer_1.redmond.corp.microsoft.com"),
			Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/registeredServers"),
			ID:   to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/registeredServers/080d4133-bdb5-40a0-96a0-71a6057bfe9a"),
			Properties: &armstoragesync.RegisteredServerProperties{
				AgentVersion:               to.Ptr("3.1.5.0"),
				AgentVersionExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T21:50:40.5840543Z"); return t }()),
				AgentVersionStatus:         to.Ptr(armstoragesync.RegisteredServerAgentVersionStatusOk),
				ClusterID:                  to.Ptr("00000000-0000-0000-0000-000000000000"),
				ClusterName:                to.Ptr(""),
				DiscoveryEndpointURI:       to.Ptr("https://kailanitest99.one.microsoft.com:443"),
				FriendlyName:               to.Ptr("afscv-2304-139"),
				LastHeartBeat:              to.Ptr("2018-06-11T21:50:40.5840543Z"),
				LastOperationName:          to.Ptr("ICreateRegisteredServerWorkflow"),
				LastWorkflowID:             to.Ptr("storageSyncServices/CV_FileStore_F1D485AA/workflows/4eecfbcf-9537-4b61-8fee-aaa3ace11c44"),
				ManagementEndpointURI:      to.Ptr("https://kailanitest99.one.microsoft.com:443/"),
				MonitoringEndpointURI:      to.Ptr("https://kailanitest99.one.microsoft.com:443/"),
				ProvisioningState:          to.Ptr("Succeeded"),
				ResourceLocation:           to.Ptr("westus"),
				ServerID:                   to.Ptr("3635ca8b-5cc8-4a5c-bd43-c2de5ad8dc64"),
				ServerManagementErrorCode:  to.Ptr[int32](0),
				ServerName:                 to.Ptr("afscv-2304-139"),
				ServerOSVersion:            to.Ptr("10.0.14393.0"),
				ServerRole:                 to.Ptr("Standalone"),
				ServiceLocation:            to.Ptr("westus"),
				StorageSyncServiceUID:      to.Ptr("4aa14534-1c61-483b-b6a6-9630a76f109a"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RegisteredServer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegisteredServer)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegisteredServers_Create(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegisteredServers_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewRegisteredServersClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"080d4133-bdb5-40a0-96a0-71a6057bfe9a",
		armstoragesync.RegisteredServerCreateParameters{
			Properties: &armstoragesync.RegisteredServerCreateParametersProperties{
				AgentVersion:      to.Ptr("1.0.277.0"),
				FriendlyName:      to.Ptr("afscv-2304-139"),
				ServerCertificate: to.Ptr("MIIDFjCCAf6gAwIBAgIQQS+DS8uhc4VNzUkTw7wbRjANBgkqhkiG9w0BAQ0FADAzMTEwLwYDVQQDEyhhbmt1c2hiLXByb2QzLnJlZG1vbmQuY29ycC5taWNyb3NvZnQuY29tMB4XDTE3MDgwMzE3MDQyNFoXDTE4MDgwNDE3MDQyNFowMzExMC8GA1UEAxMoYW5rdXNoYi1wcm9kMy5yZWRtb25kLmNvcnAubWljcm9zb2Z0LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALDRvV4gmsIy6jGDPiHsXmvgVP749NNP7DopdlbHaNhjFmYINHl0uWylyaZmgJrROt2mnxN/zEyJtGnqYHlzUr4xvGq/qV5pqgdB9tag/sw9i22gfe9PRZ0FmSOZnXMbLYgLiDFqLtut5gHcOuWMj03YnkfoBEKlFBxWbagvW2yxz/Sxi9OVSJOKCaXra0RpcIHrO/KFl6ho2eE1/7Ykmfa8hZvSdoPd5gHdLiQcMB/pxq+mWp1fI6c8vFZoDu7Atn+NXTzYPKUxKzaisF12TsaKpohUsJpbB3Wocb0F5frn614D2pg14ERB5otjAMWw1m65csQWPI6dP8KIYe0+QPkCAwEAAaMmMCQwIgYDVR0lAQH/BBgwFgYIKwYBBQUHAwIGCisGAQQBgjcKAwwwDQYJKoZIhvcNAQENBQADggEBAA4RhVIBkw34M1RwakJgHvtjsOFxF1tVQA941NtLokx1l2Z8+GFQkcG4xpZSt+UN6wLerdCbnNhtkCErWUDeaT0jxk4g71Ofex7iM04crT4iHJr8mi96/XnhnkTUs+GDk12VgdeeNEczMZz+8Mxw9dJ5NCnYgTwO0SzGlclRsDvjzkLo8rh2ZG6n/jKrEyNXXo+hOqhupij0QbRP2Tvexdfw201kgN1jdZify8XzJ8Oi0bTS0KpJf2pNPOlooK2bjMUei9ANtEdXwwfVZGWvVh6tJjdv6k14wWWJ1L7zhA1IIVb1J+sQUzJji5iX0DrezjTz1Fg+gAzITaA/WsuujlM="),
				ServerID:          to.Ptr("080d4133-bdb5-40a0-96a0-71a6057bfe9a"),
				ServerOSVersion:   to.Ptr("10.0.14393.0"),
				ServerRole:        to.Ptr("Standalone"),
			},
		},
		&armstoragesync.RegisteredServersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.RegisteredServer{
			Name: to.Ptr("ankushb-prod3.redmond.corp.microsoft.com"),
			Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/registeredServers"),
			ID:   to.Ptr("/subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/registeredServers/530a0384-50ac-456d-8240-9d6621404151"),
			Properties: &armstoragesync.RegisteredServerProperties{
				AgentVersion:               to.Ptr("3.1.5.0"),
				AgentVersionExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T21:50:40.5840543Z"); return t }()),
				AgentVersionStatus:         to.Ptr(armstoragesync.RegisteredServerAgentVersionStatusOk),
				ClusterID:                  to.Ptr("00000000-0000-0000-0000-000000000000"),
				ClusterName:                to.Ptr(""),
				DiscoveryEndpointURI:       to.Ptr("https://kailanitest99.one.microsoft.com:443"),
				FriendlyName:               to.Ptr("afscv-2304-139"),
				LastHeartBeat:              to.Ptr("2018-06-11T21:50:40.5840543Z"),
				LastOperationName:          to.Ptr("ICreateRegisteredServerWorkflow"),
				LastWorkflowID:             to.Ptr("storageSyncServices/CV_FileStore_F1D485AA/workflows/4eecfbcf-9537-4b61-8fee-aaa3ace11c44"),
				ManagementEndpointURI:      to.Ptr("https://kailanitest99.one.microsoft.com:443/"),
				MonitoringEndpointURI:      to.Ptr("https://kailanitest99.one.microsoft.com:443/"),
				ProvisioningState:          to.Ptr("Succeeded"),
				ResourceLocation:           to.Ptr("westus"),
				ServerID:                   to.Ptr("3635ca8b-5cc8-4a5c-bd43-c2de5ad8dc64"),
				ServerManagementErrorCode:  to.Ptr[int32](0),
				ServerName:                 to.Ptr("afscv-2304-139"),
				ServerOSVersion:            to.Ptr("10.0.14393.0"),
				ServerRole:                 to.Ptr("Standalone"),
				ServiceLocation:            to.Ptr("westus"),
				StorageSyncServiceUID:      to.Ptr("4aa14534-1c61-483b-b6a6-9630a76f109a"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RegisteredServer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegisteredServer)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegisteredServers_Delete(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegisteredServers_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewRegisteredServersClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"41166691-ab03-43e9-ab3e-0330eda162ac",
		&armstoragesync.RegisteredServersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_Delete.json: %v", err)
	}
}

func TestRegisteredServers_TriggerRollover(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_TriggerRollover.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegisteredServers_triggerRollover"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewRegisteredServersClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	poller, err := client.BeginTriggerRollover(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"d166ca76-dad2-49df-b409-12345642d730",
		armstoragesync.TriggerRolloverRequest{
			ServerCertificate: to.Ptr("\"MIIDFjCCAf6gAwIBAgIQQS+DS8uhc4VNzUkTw7wbRjANBgkqhkiG9w0BAQ0FADAzMTEwLwYDVQQDEyhhbmt1c2hiLXByb2QzLnJlZG1vbmQuY29ycC5taWNyb3NvZnQuY29tMB4XDTE3MDgwMzE3MDQyNFoXDTE4MDgwNDE3MDQyNFowMzExMC8GA1UEAxMoYW5rdXNoYi1wcm9kMy5yZWRtb25kLmNvcnAubWljcm9zb2Z0LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALDRvV4gmsIy6jGDPiHsXmvgVP749NNP7DopdlbHaNhjFmYINHl0uWylyaZmgJrROt2mnxN/zEyJtGnqYHlzUr4xvGq/qV5pqgdB9tag/sw9i22gfe9PRZ0FmSOZnXMbLYgLiDFqLtut5gHcOuWMj03YnkfoBEKlFBxWbagvW2yxz/Sxi9OVSJOKCaXra0RpcIHrO/KFl6ho2eE1/7Ykmfa8hZvSdoPd5gHdLiQcMB/pxq+mWp1fI6c8vFZoDu7Atn+NXTzYPKUxKzaisF12TsaKpohUsJpbB3Wocb0F5frn614D2pg14ERB5otjAMWw1m65csQWPI6dP8KIYe0+QPkCAwEAAaMmMCQwIgYDVR0lAQH/BBgwFgYIKwYBBQUHAwIGCisGAQQBgjcKAwwwDQYJKoZIhvcNAQENBQADggEBAA4RhVIBkw34M1RwakJgHvtjsOFxF1tVQA941NtLokx1l2Z8+GFQkcG4xpZSt+UN6wLerdCbnNhtkCErWUDeaT0jxk4g71Ofex7iM04crT4iHJr8mi96/XnhnkTUs+GDk12VgdeeNEczMZz+8Mxw9dJ5NCnYgTwO0SzGlclRsDvjzkLo8rh2ZG6n/jKrEyNXXo+hOqhupij0QbRP2Tvexdfw201kgN1jdZify8XzJ8Oi0bTS0KpJf2pNPOlooK2bjMUei9ANtEdXwwfVZGWvVh6tJjdv6k14wWWJ1L7zhA1IIVb1J+sQUzJji5iX0DrezjTz1Fg+gAzITaA/WsuujlM=\""),
		},
		&armstoragesync.RegisteredServersClientBeginTriggerRolloverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_TriggerRollover.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/RegisteredServers_TriggerRollover.json: %v", err)
	}
}

func TestWorkflows_ListByStorageSyncService(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/Workflows_ListByStorageSyncService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Workflows_ListByStorageSyncService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewWorkflowsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	pager := client.ListByStorageSyncService("SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/Workflows_ListByStorageSyncService.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstoragesync.WorkflowArray{
			Value: []*armstoragesync.Workflow{
				{
					Name: to.Ptr("828219ea-083e-48b5-89ea-8fd9991b2e75"),
					Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/workflows"),
					ID:   to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/workflows/828219ea-083e-48b5-89ea-8fd9991b2e75"),
					Properties: &armstoragesync.WorkflowProperties{
						LastOperationID: to.Ptr("\"fe680c98-5725-49c8-b0dc-5e29745f752b\""),
						LastStepName:    to.Ptr("runServerJob"),
						Operation:       to.Ptr(armstoragesync.OperationDirectionDo),
						Status:          to.Ptr(armstoragesync.WorkflowStatusSucceeded),
						Steps:           to.Ptr("[{\"name\":\"validateInput\",\"friendlyName\":\"validateInput\",\"status\":\"Succeeded\",\"error\":null},{\"name\":\"newServerEndpoint\",\"friendlyName\":\"newServerEndpoint\",\"status\":\"Succeeded\",\"error\":null},{\"name\":\"updateReplicaGroupCertificates\",\"friendlyName\":\"updateReplicaGroupCertificates\",\"status\":\"Succeeded\",\"error\":null},{\"name\":\"runServerJob\",\"friendlyName\":\"runServerJob\",\"status\":\"Succeeded\",\"error\":null}]"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkflowArray) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkflowArray)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/Workflows_ListByStorageSyncService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflows_Get(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/Workflows_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Workflows_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewWorkflowsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"828219ea-083e-48b5-89ea-8fd9991b2e75",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/Workflows_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.Workflow{
			Name: to.Ptr("828219ea-083e-48b5-89ea-8fd9991b2e75"),
			Type: to.Ptr("Microsoft.StorageSync/storageSyncServices/workflows"),
			ID:   to.Ptr("/subscriptions/3a048283-338f-4002-a9dd-a50fdadcb392/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/workflows/828219ea-083e-48b5-89ea-8fd9991b2e75"),
			Properties: &armstoragesync.WorkflowProperties{
				CommandName:         to.Ptr("ICreateServerEndpointWorkflow"),
				CreatedTimestamp:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:04:59.1959227Z"); return t }()),
				LastOperationID:     to.Ptr("\"fe680c98-5725-49c8-b0dc-5e29745f752b\""),
				LastStatusTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-17T19:04:59.1959227Z"); return t }()),
				LastStepName:        to.Ptr("runServerJob"),
				Operation:           to.Ptr(armstoragesync.OperationDirectionDo),
				Status:              to.Ptr(armstoragesync.WorkflowStatusSucceeded),
				Steps:               to.Ptr("[{\"name\":\"validateInput\",\"friendlyName\":\"validateInput\",\"status\":\"Succeeded\",\"error\":null},{\"name\":\"newServerEndpoint\",\"friendlyName\":\"newServerEndpoint\",\"status\":\"Succeeded\",\"error\":null},{\"name\":\"updateReplicaGroupCertificates\",\"friendlyName\":\"updateReplicaGroupCertificates\",\"status\":\"Succeeded\",\"error\":null},{\"name\":\"runServerJob\",\"friendlyName\":\"runServerJob\",\"status\":\"Succeeded\",\"error\":null}]"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workflow) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workflow)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/Workflows_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkflows_Abort(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/Workflows_Abort.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Workflows_Abort"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewWorkflowsClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	_, err := client.Abort(ctx,
		"SampleResourceGroup_1",
		"SampleStorageSyncService_1",
		"7ffd50b3-5574-478d-9ff2-9371bc42ce68",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/Workflows_Abort.json: %v", err)
	}
}

func TestOperationStatus_Get(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/OperationStatus_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Workflows_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewOperationStatusClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup_1",
		"westus",
		"828219ea-083e-48b5-89ea-8fd9991b2e75",
		"14b50e24-f68d-4b29-a882-38be9dfb8bd1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/OperationStatus_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.OperationStatus{
			Name:      to.Ptr("14b50e24-f68d-4b29-a882-38be9dfb8bd1"),
			EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T23:53:23.3735483Z"); return t }()),
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-09T23:53:21.7328715Z"); return t }()),
			Status:    to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/OperationStatus_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMicrosoftStorageSync_LocationOperationStatus(t *testing.T) {
	// From example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/LocationOperationStatus_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Workflows_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstoragesync.NewMicrosoftStorageSyncClient("52b8da2f-61e0-4a1f-8dde-336911f367fb", cred, &options)
	res, err := client.LocationOperationStatus(ctx,
		"westus",
		"eyJwYXJ0aXRpb25JZCI6ImE1ZDNiMDU4LTYwN2MtNDI0Ny05Y2FmLWJlZmU4NGQ0ZDU0NyIsIndvcmtmbG93SWQiOiJjYzg1MTY2YS0xMjI2LTQ4MGYtYWM5ZC1jMmRhNTVmY2M2ODYiLCJ3b3JrZmxvd09wZXJhdGlvbklkIjoiOTdmODU5ZTAtOGY1MC00ZTg4LWJkZDEtNWZlYzgwYTVlYzM0tui=",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/LocationOperationStatus_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstoragesync.LocationOperationStatus{
			Name:      to.Ptr("eyJwYXJ0aXRpb25JZCI6ImE1ZDNiMDU4LTYwN2MtNDI0Ny05Y2FmLWJlZmU4NGQ0ZDU0NyIsIndvcmtmbG93SWQiOiJjYzg1MTY2YS0xMjI2LTQ4MGYtYWM5ZC1jMmRhNTVmY2M2ODYiLCJ3b3JrZmxvd09wZXJhdGlvbklkIjoiOTdmODU5ZTAtOGY1MC00ZTg4LWJkZDEtNWZlYzgwYTVlYzM0tui="),
			EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-14T19:59:30.8055279Z"); return t }()),
			ID:        to.Ptr("/subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/providers/microsoft.storagesync/locations/westus/operations/eyJwYXJ0aXRpb25JZCI6ImE1ZDNiMDU4LTYwN2MtNDI0Ny05Y2FmLWJlZmU4NGQ0ZDU0NyIsIndvcmtmbG93SWQiOiJjYzg1MTY2YS0xMjI2LTQ4MGYtYWM5ZC1jMmRhNTVmY2M2ODYiLCJ3b3JrZmxvd09wZXJhdGlvbklkIjoiOTdmODU5ZTAtOGY1MC00ZTg4LWJkZDEtNWZlYzgwYTVlYzM0tui="),
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-09-14T19:59:24.6247688Z"); return t }()),
			Status:    to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.LocationOperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LocationOperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/LocationOperationStatus_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
