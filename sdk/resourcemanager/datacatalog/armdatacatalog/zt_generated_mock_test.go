//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatacatalog_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datacatalog/armdatacatalog"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestADCOperations_List(t *testing.T) {
	// From example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/GetOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatacatalog.NewADCOperationsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/GetOperations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatacatalog.OperationEntityListResult{
			Value: []*armdatacatalog.OperationEntity{
				{
					Name: to.Ptr("Microsoft.DataCatalog/catalogs/read"),
					Display: &armdatacatalog.OperationDisplayInfo{
						Description: to.Ptr("Get properties for catalog or catalogs under subscription or resource group."),
						Operation:   to.Ptr("Catalog Read Or List"),
						Provider:    to.Ptr("Microsoft Data Catalog"),
						Resource:    to.Ptr("Catalog"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataCatalog/catalogs/write"),
					Display: &armdatacatalog.OperationDisplayInfo{
						Description: to.Ptr("Creates catalog or updates the tags and properties for the catalog."),
						Operation:   to.Ptr("Create Or Update Catalog"),
						Provider:    to.Ptr("Microsoft Data Catalog"),
						Resource:    to.Ptr("Catalog"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataCatalog/catalogs/delete"),
					Display: &armdatacatalog.OperationDisplayInfo{
						Description: to.Ptr("Deletes the catalog."),
						Operation:   to.Ptr("Delete Catalog"),
						Provider:    to.Ptr("Microsoft Data Catalog"),
						Resource:    to.Ptr("Catalog"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DataCatalog/operations/read"),
					Display: &armdatacatalog.OperationDisplayInfo{
						Description: to.Ptr("Lists operations available on Microsoft.DataCatalog resource provider."),
						Operation:   to.Ptr("List Available Catalog Operations"),
						Provider:    to.Ptr("Microsoft Data Catalog"),
						Resource:    to.Ptr("Available Catalog Operations"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationEntityListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationEntityListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/GetOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestADCCatalogs_ListtByResourceGroup(t *testing.T) {
	// From example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/ListADCCatalogsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Azure Data Catalog Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatacatalog.NewADCCatalogsClient("12345678-1234-1234-12345678abc",
		"<catalog-name>", cred, &options)
	res, err := client.ListtByResourceGroup(ctx,
		"exampleResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/ListADCCatalogsByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatacatalog.ADCCatalogsListResult{
			Value: []*armdatacatalog.ADCCatalog{
				{
					Name:     to.Ptr("exampleCatalog"),
					Type:     to.Ptr("Microsoft.DataCatalog/catalogs"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataCatalog/catalogs/exampleCatalog"),
					Location: to.Ptr("North US"),
					Tags: map[string]*string{
						"mykey":  to.Ptr("myvalue"),
						"mykey2": to.Ptr("myvalue2"),
					},
					Properties: &armdatacatalog.ADCCatalogProperties{
						Admins: []*armdatacatalog.Principals{
							{
								ObjectID: to.Ptr("99999999-9999-9999-999999999999"),
								Upn:      to.Ptr("myupn@microsoft.com"),
							}},
						EnableAutomaticUnitAdjustment: to.Ptr(false),
						SKU:                           to.Ptr(armdatacatalog.SKUTypeStandard),
						SuccessfullyProvisioned:       to.Ptr(true),
						Units:                         to.Ptr[int32](1),
						Users: []*armdatacatalog.Principals{
							{
								ObjectID: to.Ptr("99999999-9999-9999-999999999999"),
								Upn:      to.Ptr("myupn@microsoft.com"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ADCCatalogsListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ADCCatalogsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/ListADCCatalogsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestADCCatalogs_CreateOrUpdate(t *testing.T) {
	// From example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/CreateOrUpdateADCCatalog.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Azure Data Catalog Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatacatalog.NewADCCatalogsClient("12345678-1234-1234-12345678abc",
		"exampleCatalog", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		armdatacatalog.ADCCatalog{
			Location: to.Ptr("North US"),
			Tags: map[string]*string{
				"mykey":  to.Ptr("myvalue"),
				"mykey2": to.Ptr("myvalue2"),
			},
			Properties: &armdatacatalog.ADCCatalogProperties{
				Admins: []*armdatacatalog.Principals{
					{
						ObjectID: to.Ptr("99999999-9999-9999-999999999999"),
						Upn:      to.Ptr("myupn@microsoft.com"),
					}},
				EnableAutomaticUnitAdjustment: to.Ptr(false),
				SKU:                           to.Ptr(armdatacatalog.SKUTypeStandard),
				Units:                         to.Ptr[int32](1),
				Users: []*armdatacatalog.Principals{
					{
						ObjectID: to.Ptr("99999999-9999-9999-999999999999"),
						Upn:      to.Ptr("myupn@microsoft.com"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/CreateOrUpdateADCCatalog.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatacatalog.ADCCatalog{
			Name:     to.Ptr("exampleCatalog"),
			Type:     to.Ptr("Microsoft.DataCatalog/catalogs"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataCatalog/catalogs/exampleCatalog"),
			Location: to.Ptr("North US"),
			Tags: map[string]*string{
				"mykey":  to.Ptr("myvalue"),
				"mykey2": to.Ptr("myvalue2"),
			},
			Properties: &armdatacatalog.ADCCatalogProperties{
				Admins: []*armdatacatalog.Principals{
					{
						ObjectID: to.Ptr("99999999-9999-9999-999999999999"),
						Upn:      to.Ptr("myupn@microsoft.com"),
					}},
				EnableAutomaticUnitAdjustment: to.Ptr(false),
				SKU:                           to.Ptr(armdatacatalog.SKUTypeStandard),
				SuccessfullyProvisioned:       to.Ptr(true),
				Units:                         to.Ptr[int32](1),
				Users: []*armdatacatalog.Principals{
					{
						ObjectID: to.Ptr("99999999-9999-9999-999999999999"),
						Upn:      to.Ptr("myupn@microsoft.com"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ADCCatalog) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ADCCatalog)
			t.Fatalf("Mock response is not equal to example response for example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/CreateOrUpdateADCCatalog.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestADCCatalogs_Get(t *testing.T) {
	// From example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/GetADCCatalog.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Data Catalog Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatacatalog.NewADCCatalogsClient("12345678-1234-1234-12345678abc",
		"exampleCatalog", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/GetADCCatalog.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatacatalog.ADCCatalog{
			Name:     to.Ptr("exampleCatalog"),
			Type:     to.Ptr("Microsoft.DataCatalog/catalogs"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataCatalog/catalogs/exampleCatalog"),
			Location: to.Ptr("North US"),
			Tags: map[string]*string{
				"mykey":  to.Ptr("myvalue"),
				"mykey2": to.Ptr("myvalue2"),
			},
			Properties: &armdatacatalog.ADCCatalogProperties{
				Admins: []*armdatacatalog.Principals{
					{
						ObjectID: to.Ptr("99999999-9999-9999-999999999999"),
						Upn:      to.Ptr("myupn@microsoft.com"),
					}},
				EnableAutomaticUnitAdjustment: to.Ptr(false),
				SKU:                           to.Ptr(armdatacatalog.SKUTypeStandard),
				SuccessfullyProvisioned:       to.Ptr(true),
				Units:                         to.Ptr[int32](1),
				Users: []*armdatacatalog.Principals{
					{
						ObjectID: to.Ptr("99999999-9999-9999-999999999999"),
						Upn:      to.Ptr("myupn@microsoft.com"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ADCCatalog) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ADCCatalog)
			t.Fatalf("Mock response is not equal to example response for example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/GetADCCatalog.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestADCCatalogs_Delete(t *testing.T) {
	// From example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/DeleteADCCatalog.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Azure Data Catalog Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatacatalog.NewADCCatalogsClient("12345678-1234-1234-12345678abc",
		"exampleCatalog", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"exampleResourceGroup",
		&armdatacatalog.ADCCatalogsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/DeleteADCCatalog.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/DeleteADCCatalog.json: %v", err)
	}
}

func TestADCCatalogs_Update(t *testing.T) {
	// From example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/UpdateADCCatalog.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Azure Data Catalog Service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatacatalog.NewADCCatalogsClient("12345678-1234-1234-12345678abc",
		"exampleCatalog", cred, &options)
	res, err := client.Update(ctx,
		"exampleResourceGroup",
		armdatacatalog.ADCCatalog{
			Location: to.Ptr("North US"),
			Tags: map[string]*string{
				"mykey":  to.Ptr("myvalue"),
				"mykey2": to.Ptr("myvalue2"),
			},
			Properties: &armdatacatalog.ADCCatalogProperties{
				Admins: []*armdatacatalog.Principals{
					{
						ObjectID: to.Ptr("99999999-9999-9999-999999999999"),
						Upn:      to.Ptr("myupn@microsoft.com"),
					}},
				EnableAutomaticUnitAdjustment: to.Ptr(false),
				SKU:                           to.Ptr(armdatacatalog.SKUTypeStandard),
				Units:                         to.Ptr[int32](1),
				Users: []*armdatacatalog.Principals{
					{
						ObjectID: to.Ptr("99999999-9999-9999-999999999999"),
						Upn:      to.Ptr("myupn@microsoft.com"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/UpdateADCCatalog.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatacatalog.ADCCatalog{
			Name:     to.Ptr("exampleCatalog"),
			Type:     to.Ptr("Microsoft.DataCatalog/catalogs"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataCatalog/catalogs/exampleCatalog"),
			Location: to.Ptr("North US"),
			Tags: map[string]*string{
				"mykey":  to.Ptr("myvalue"),
				"mykey2": to.Ptr("myvalue2"),
			},
			Properties: &armdatacatalog.ADCCatalogProperties{
				Admins: []*armdatacatalog.Principals{
					{
						ObjectID: to.Ptr("99999999-9999-9999-999999999999"),
						Upn:      to.Ptr("myupn@microsoft.com"),
					}},
				EnableAutomaticUnitAdjustment: to.Ptr(false),
				SKU:                           to.Ptr(armdatacatalog.SKUTypeStandard),
				SuccessfullyProvisioned:       to.Ptr(true),
				Units:                         to.Ptr[int32](1),
				Users: []*armdatacatalog.Principals{
					{
						ObjectID: to.Ptr("99999999-9999-9999-999999999999"),
						Upn:      to.Ptr("myupn@microsoft.com"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ADCCatalog) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ADCCatalog)
			t.Fatalf("Mock response is not equal to example response for example specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/UpdateADCCatalog.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
