//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatacatalog

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestADCOperations_List(t *testing.T) {
	// From example Get Operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewADCOperationsClient(con)
	_, err := client.List(ctx,
		&ADCOperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestADCCatalogs_ListtByResourceGroup(t *testing.T) {
	// From example List Azure Data Catalog Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewADCCatalogsClient(con,
		"12345678-1234-1234-12345678abc",
		nil)
	_, err := client.ListtByResourceGroup(ctx,
		"exampleResourceGroup",
		&ADCCatalogsListtByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestADCCatalogs_CreateOrUpdate(t *testing.T) {
	// From example Create Azure Data Catalog Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewADCCatalogsClient(con,
		"12345678-1234-1234-12345678abc",
		"exampleCatalog")
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		ADCCatalog{
			Resource: Resource{
				Location: to.StringPtr("North US"),
				Tags: map[string]*string{
					"mykey":  to.StringPtr("myvalue"),
					"mykey2": to.StringPtr("myvalue2"),
				},
			},
			Properties: &ADCCatalogProperties{
				Admins: []*Principals{
					{
						ObjectID: to.StringPtr("99999999-9999-9999-999999999999"),
						Upn:      to.StringPtr("myupn@microsoft.com"),
					}},
				EnableAutomaticUnitAdjustment: to.BoolPtr(false),
				SKU:                           SKUTypeStandard.ToPtr(),
				Units:                         to.Int32Ptr(1),
				Users: []*Principals{
					{
						ObjectID: to.StringPtr("99999999-9999-9999-999999999999"),
						Upn:      to.StringPtr("myupn@microsoft.com"),
					}},
			},
		},
		&ADCCatalogsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ADCCatalog.ID == nil {
		t.Fatal("ADCCatalog.ID should not be nil!")
	}
}

func TestADCCatalogs_Get(t *testing.T) {
	// From example Get Azure Data Catalog Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewADCCatalogsClient(con,
		"12345678-1234-1234-12345678abc",
		"exampleCatalog")
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		&ADCCatalogsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ADCCatalog.ID == nil {
		t.Fatal("ADCCatalog.ID should not be nil!")
	}
}

func TestADCCatalogs_Delete(t *testing.T) {
	// From example Delete Azure Data Catalog Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewADCCatalogsClient(con,
		"12345678-1234-1234-12345678abc",
		"exampleCatalog")
	poller, err := client.BeginDelete(ctx,
		"exampleResourceGroup",
		&ADCCatalogsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestADCCatalogs_Update(t *testing.T) {
	// From example Update Azure Data Catalog Service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewADCCatalogsClient(con,
		"12345678-1234-1234-12345678abc",
		"exampleCatalog")
	res, err := client.Update(ctx,
		"exampleResourceGroup",
		ADCCatalog{
			Resource: Resource{
				Location: to.StringPtr("North US"),
				Tags: map[string]*string{
					"mykey":  to.StringPtr("myvalue"),
					"mykey2": to.StringPtr("myvalue2"),
				},
			},
			Properties: &ADCCatalogProperties{
				Admins: []*Principals{
					{
						ObjectID: to.StringPtr("99999999-9999-9999-999999999999"),
						Upn:      to.StringPtr("myupn@microsoft.com"),
					}},
				EnableAutomaticUnitAdjustment: to.BoolPtr(false),
				SKU:                           SKUTypeStandard.ToPtr(),
				Units:                         to.Int32Ptr(1),
				Users: []*Principals{
					{
						ObjectID: to.StringPtr("99999999-9999-9999-999999999999"),
						Upn:      to.StringPtr("myupn@microsoft.com"),
					}},
			},
		},
		&ADCCatalogsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ADCCatalog.ID == nil {
		t.Fatal("ADCCatalog.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
