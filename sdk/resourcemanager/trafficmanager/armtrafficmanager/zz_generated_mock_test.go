//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtrafficmanager

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestEndpoints_Update(t *testing.T) {
	// From example Endpoint-PATCH-External-Target
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEndpointsClient(con,
		"{subscription-id}")
	res, err := client.Update(ctx,
		"azuresdkfornetautoresttrafficmanager1421",
		"azsmnet6386",
		"ExternalEndpoints",
		"azsmnet7187",
		Endpoint{
			ProxyResource: ProxyResource{
				Resource: Resource{
					Name: to.StringPtr("azsmnet7187"),
					Type: to.StringPtr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
					ID:   to.StringPtr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1421/providers/Microsoft.Network/trafficManagerProfiles/azsmnet6386/externalEndpoints/azsmnet7187"),
				},
			},
			Properties: &EndpointProperties{
				Target: to.StringPtr("another.foobar.contoso.com"),
			},
		},
		&EndpointsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Endpoint.ID == nil {
		t.Fatal("Endpoint.ID should not be nil!")
	}
}

func TestEndpoints_Get(t *testing.T) {
	// From example Endpoint-GET-External-WithGeoMapping
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEndpointsClient(con,
		"{subscription-id}")
	res, err := client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager2191",
		"azuresdkfornetautoresttrafficmanager8224",
		"ExternalEndpoints",
		"My%20external%20endpoint",
		&EndpointsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Endpoint.ID == nil {
		t.Fatal("Endpoint.ID should not be nil!")
	}

	// From example Endpoint-GET-External-WithLocation
	res, err = client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager1421",
		"azsmnet6386",
		"ExternalEndpoints",
		"azsmnet7187",
		&EndpointsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Endpoint.ID == nil {
		t.Fatal("Endpoint.ID should not be nil!")
	}

	// From example Endpoint-GET-External-WithSubnetMapping
	res, err = client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager2191",
		"azuresdkfornetautoresttrafficmanager8224",
		"ExternalEndpoints",
		"My%20external%20endpoint",
		&EndpointsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Endpoint.ID == nil {
		t.Fatal("Endpoint.ID should not be nil!")
	}
}

func TestEndpoints_CreateOrUpdate(t *testing.T) {
	// From example Endpoint-PUT-External-WithCustomHeaders
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEndpointsClient(con,
		"{subscription-id}")
	res, err := client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager1421",
		"azsmnet6386",
		"ExternalEndpoints",
		"azsmnet7187",
		Endpoint{
			ProxyResource: ProxyResource{
				Resource: Resource{
					Name: to.StringPtr("azsmnet7187"),
					Type: to.StringPtr("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
				},
			},
			Properties: &EndpointProperties{
				CustomHeaders: []*EndpointPropertiesCustomHeadersItem{
					{
						Name:  to.StringPtr("header-1"),
						Value: to.StringPtr("value-1"),
					},
					{
						Name:  to.StringPtr("header-2"),
						Value: to.StringPtr("value-2"),
					}},
				EndpointLocation: to.StringPtr("North Europe"),
				EndpointStatus:   EndpointStatusEnabled.ToPtr(),
				Target:           to.StringPtr("foobar.contoso.com"),
			},
		},
		&EndpointsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Endpoint.ID == nil {
		t.Fatal("Endpoint.ID should not be nil!")
	}

	// From example Endpoint-PUT-External-WithGeoMapping
	res, err = client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager2191",
		"azuresdkfornetautoresttrafficmanager8224",
		"ExternalEndpoints",
		"My%20external%20endpoint",
		Endpoint{
			ProxyResource: ProxyResource{
				Resource: Resource{
					Name: to.StringPtr("My external endpoint"),
					Type: to.StringPtr("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
				},
			},
			Properties: &EndpointProperties{
				EndpointStatus: EndpointStatusEnabled.ToPtr(),
				GeoMapping: []*string{
					to.StringPtr("GEO-AS"),
					to.StringPtr("GEO-AF")},
				Target: to.StringPtr("foobar.contoso.com"),
			},
		},
		&EndpointsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Endpoint.ID == nil {
		t.Fatal("Endpoint.ID should not be nil!")
	}

	// From example Endpoint-PUT-External-WithLocation
	res, err = client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager1421",
		"azsmnet6386",
		"ExternalEndpoints",
		"azsmnet7187",
		Endpoint{
			ProxyResource: ProxyResource{
				Resource: Resource{
					Name: to.StringPtr("azsmnet7187"),
					Type: to.StringPtr("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
				},
			},
			Properties: &EndpointProperties{
				EndpointLocation: to.StringPtr("North Europe"),
				EndpointStatus:   EndpointStatusEnabled.ToPtr(),
				Target:           to.StringPtr("foobar.contoso.com"),
			},
		},
		&EndpointsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Endpoint.ID == nil {
		t.Fatal("Endpoint.ID should not be nil!")
	}

	// From example Endpoint-PUT-External-WithSubnetMapping
	res, err = client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager2191",
		"azuresdkfornetautoresttrafficmanager8224",
		"ExternalEndpoints",
		"My%20external%20endpoint",
		Endpoint{
			ProxyResource: ProxyResource{
				Resource: Resource{
					Name: to.StringPtr("My external endpoint"),
					Type: to.StringPtr("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
				},
			},
			Properties: &EndpointProperties{
				EndpointStatus: EndpointStatusEnabled.ToPtr(),
				Subnets: []*EndpointPropertiesSubnetsItem{
					{
						First: to.StringPtr("1.2.3.0"),
						Scope: to.Int32Ptr(24),
					},
					{
						First: to.StringPtr("25.26.27.28"),
						Last:  to.StringPtr("29.30.31.32"),
					}},
				Target: to.StringPtr("foobar.contoso.com"),
			},
		},
		&EndpointsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Endpoint.ID == nil {
		t.Fatal("Endpoint.ID should not be nil!")
	}
}

func TestEndpoints_Delete(t *testing.T) {
	// From example Endpoint-DELETE-External
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEndpointsClient(con,
		"{subscription-id}")
	_, err := client.Delete(ctx,
		"azuresdkfornetautoresttrafficmanager1421",
		"azsmnet6386",
		"ExternalEndpoints",
		"azsmnet7187",
		&EndpointsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProfiles_CheckTrafficManagerRelativeDnsNameAvailability(t *testing.T) {
	// From example NameAvailabilityTest_NameAvailablePOST21
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProfilesClient(con,
		nil)
	_, err := client.CheckTrafficManagerRelativeDNSNameAvailability(ctx,
		CheckTrafficManagerRelativeDNSNameAvailabilityParameters{
			Name: to.StringPtr("azsmnet5403"),
			Type: to.StringPtr("microsoft.network/trafficmanagerprofiles"),
		},
		&ProfilesCheckTrafficManagerRelativeDNSNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example NameAvailabilityTest_NameNotAvailablePOST23
	_, err = client.CheckTrafficManagerRelativeDNSNameAvailability(ctx,
		CheckTrafficManagerRelativeDNSNameAvailabilityParameters{
			Name: to.StringPtr("azsmnet4696"),
			Type: to.StringPtr("microsoft.network/trafficmanagerprofiles"),
		},
		&ProfilesCheckTrafficManagerRelativeDNSNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProfiles_ListByResourceGroup(t *testing.T) {
	// From example ListProfilesByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProfilesClient(con,
		"{subscription-id}")
	_, err := client.ListByResourceGroup(ctx,
		"azuresdkfornetautoresttrafficmanager3640",
		&ProfilesListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProfiles_ListBySubscription(t *testing.T) {
	// From example ListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProfilesClient(con,
		"{subscription-id}")
	_, err := client.ListBySubscription(ctx,
		&ProfilesListBySubscriptionOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProfiles_Get(t *testing.T) {
	// From example Profile-GET-WithEndpoints
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProfilesClient(con,
		"{subscription-id}")
	res, err := client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager1323",
		"azuresdkfornetautoresttrafficmanager3880",
		&ProfilesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Profile.ID == nil {
		t.Fatal("Profile.ID should not be nil!")
	}

	// From example Profile-GET-WithTrafficViewDisabled
	res, err = client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager1323",
		"azuresdkfornetautoresttrafficmanager3880",
		&ProfilesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Profile.ID == nil {
		t.Fatal("Profile.ID should not be nil!")
	}

	// From example Profile-GET-WithTrafficViewEnabled
	res, err = client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager1323",
		"azuresdkfornetautoresttrafficmanager3880",
		&ProfilesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Profile.ID == nil {
		t.Fatal("Profile.ID should not be nil!")
	}
}

func TestProfiles_CreateOrUpdate(t *testing.T) {
	// From example Profile-PUT-MultiValue
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProfilesClient(con,
		"{subscription-id}")
	res, err := client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager1421",
		"azsmnet6386",
		Profile{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("global"),
			},
			Properties: &ProfileProperties{
				DNSConfig: &DNSConfig{
					RelativeName: to.StringPtr("azsmnet6386"),
					TTL:          to.Int64Ptr(35),
				},
				MaxReturn: to.Int64Ptr(2),
				MonitorConfig: &MonitorConfig{
					Path:     to.StringPtr("/testpath.aspx"),
					Port:     to.Int64Ptr(80),
					Protocol: MonitorProtocolHTTP.ToPtr(),
				},
				ProfileStatus:               ProfileStatusEnabled.ToPtr(),
				TrafficRoutingMethod:        TrafficRoutingMethodMultiValue.ToPtr(),
				TrafficViewEnrollmentStatus: TrafficViewEnrollmentStatusDisabled.ToPtr(),
			},
		},
		&ProfilesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Profile.ID == nil {
		t.Fatal("Profile.ID should not be nil!")
	}

	// From example Profile-PUT-NoEndpoints
	res, err = client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager1421",
		"azsmnet6386",
		Profile{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("global"),
			},
			Properties: &ProfileProperties{
				DNSConfig: &DNSConfig{
					RelativeName: to.StringPtr("azsmnet6386"),
					TTL:          to.Int64Ptr(35),
				},
				MonitorConfig: &MonitorConfig{
					Path:     to.StringPtr("/testpath.aspx"),
					Port:     to.Int64Ptr(80),
					Protocol: MonitorProtocolHTTP.ToPtr(),
				},
				ProfileStatus:        ProfileStatusEnabled.ToPtr(),
				TrafficRoutingMethod: TrafficRoutingMethodPerformance.ToPtr(),
			},
		},
		&ProfilesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Profile.ID == nil {
		t.Fatal("Profile.ID should not be nil!")
	}

	// From example Profile-PUT-WithAliasing
	res, err = client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager2583",
		"azuresdkfornetautoresttrafficmanager6192",
		Profile{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("global"),
			},
			Properties: &ProfileProperties{
				AllowedEndpointRecordTypes: []*AllowedEndpointRecordType{
					AllowedEndpointRecordTypeDomainName.ToPtr()},
				DNSConfig: &DNSConfig{
					RelativeName: to.StringPtr("azuresdkfornetautoresttrafficmanager6192"),
					TTL:          to.Int64Ptr(35),
				},
				Endpoints: []*Endpoint{
					{
						ProxyResource: ProxyResource{
							Resource: Resource{
								Name: to.StringPtr("My external endpoint"),
								Type: to.StringPtr("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
							},
						},
						Properties: &EndpointProperties{
							EndpointLocation: to.StringPtr("North Europe"),
							EndpointStatus:   EndpointStatusEnabled.ToPtr(),
							Target:           to.StringPtr("foobar.contoso.com"),
						},
					}},
				MonitorConfig: &MonitorConfig{
					Path:                      to.StringPtr("/testpath.aspx"),
					IntervalInSeconds:         to.Int64Ptr(10),
					Port:                      to.Int64Ptr(80),
					TimeoutInSeconds:          to.Int64Ptr(5),
					ToleratedNumberOfFailures: to.Int64Ptr(2),
					Protocol:                  MonitorProtocolHTTP.ToPtr(),
				},
				ProfileStatus:        ProfileStatusEnabled.ToPtr(),
				TrafficRoutingMethod: TrafficRoutingMethodPerformance.ToPtr(),
			},
		},
		&ProfilesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Profile.ID == nil {
		t.Fatal("Profile.ID should not be nil!")
	}

	// From example Profile-PUT-WithCustomHeaders
	res, err = client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager2583",
		"azuresdkfornetautoresttrafficmanager6192",
		Profile{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("global"),
			},
			Properties: &ProfileProperties{
				DNSConfig: &DNSConfig{
					RelativeName: to.StringPtr("azuresdkfornetautoresttrafficmanager6192"),
					TTL:          to.Int64Ptr(35),
				},
				Endpoints: []*Endpoint{
					{
						ProxyResource: ProxyResource{
							Resource: Resource{
								Name: to.StringPtr("My external endpoint"),
								Type: to.StringPtr("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
							},
						},
						Properties: &EndpointProperties{
							CustomHeaders: []*EndpointPropertiesCustomHeadersItem{
								{
									Name:  to.StringPtr("header-2"),
									Value: to.StringPtr("value-2-overridden"),
								}},
							EndpointLocation: to.StringPtr("North Europe"),
							EndpointStatus:   EndpointStatusEnabled.ToPtr(),
							Target:           to.StringPtr("foobar.contoso.com"),
						},
					}},
				MonitorConfig: &MonitorConfig{
					Path: to.StringPtr("/testpath.aspx"),
					CustomHeaders: []*MonitorConfigCustomHeadersItem{
						{
							Name:  to.StringPtr("header-1"),
							Value: to.StringPtr("value-1"),
						},
						{
							Name:  to.StringPtr("header-2"),
							Value: to.StringPtr("value-2"),
						}},
					ExpectedStatusCodeRanges: []*MonitorConfigExpectedStatusCodeRangesItem{
						{
							Max: to.Int32Ptr(205),
							Min: to.Int32Ptr(200),
						},
						{
							Max: to.Int32Ptr(410),
							Min: to.Int32Ptr(400),
						}},
					IntervalInSeconds:         to.Int64Ptr(10),
					Port:                      to.Int64Ptr(80),
					TimeoutInSeconds:          to.Int64Ptr(5),
					ToleratedNumberOfFailures: to.Int64Ptr(2),
					Protocol:                  MonitorProtocolHTTP.ToPtr(),
				},
				ProfileStatus:               ProfileStatusEnabled.ToPtr(),
				TrafficRoutingMethod:        TrafficRoutingMethodPerformance.ToPtr(),
				TrafficViewEnrollmentStatus: TrafficViewEnrollmentStatusDisabled.ToPtr(),
			},
		},
		&ProfilesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Profile.ID == nil {
		t.Fatal("Profile.ID should not be nil!")
	}

	// From example Profile-PUT-WithEndpoints
	res, err = client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager2583",
		"azuresdkfornetautoresttrafficmanager6192",
		Profile{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("global"),
			},
			Properties: &ProfileProperties{
				DNSConfig: &DNSConfig{
					RelativeName: to.StringPtr("azuresdkfornetautoresttrafficmanager6192"),
					TTL:          to.Int64Ptr(35),
				},
				Endpoints: []*Endpoint{
					{
						ProxyResource: ProxyResource{
							Resource: Resource{
								Name: to.StringPtr("My external endpoint"),
								Type: to.StringPtr("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
							},
						},
						Properties: &EndpointProperties{
							EndpointLocation: to.StringPtr("North Europe"),
							EndpointStatus:   EndpointStatusEnabled.ToPtr(),
							Target:           to.StringPtr("foobar.contoso.com"),
						},
					}},
				MonitorConfig: &MonitorConfig{
					Path:                      to.StringPtr("/testpath.aspx"),
					IntervalInSeconds:         to.Int64Ptr(10),
					Port:                      to.Int64Ptr(80),
					TimeoutInSeconds:          to.Int64Ptr(5),
					ToleratedNumberOfFailures: to.Int64Ptr(2),
					Protocol:                  MonitorProtocolHTTP.ToPtr(),
				},
				ProfileStatus:        ProfileStatusEnabled.ToPtr(),
				TrafficRoutingMethod: TrafficRoutingMethodPerformance.ToPtr(),
			},
		},
		&ProfilesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Profile.ID == nil {
		t.Fatal("Profile.ID should not be nil!")
	}

	// From example Profile-PUT-WithNestedEndpoints
	res, err = client.CreateOrUpdate(ctx,
		"myresourcegroup",
		"parentprofile",
		Profile{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("global"),
			},
			Properties: &ProfileProperties{
				DNSConfig: &DNSConfig{
					RelativeName: to.StringPtr("parentprofile"),
					TTL:          to.Int64Ptr(35),
				},
				Endpoints: []*Endpoint{
					{
						ProxyResource: ProxyResource{
							Resource: Resource{
								Name: to.StringPtr("MyFirstNestedEndpoint"),
								Type: to.StringPtr("Microsoft.Network/trafficManagerProfiles/nestedEndpoints"),
							},
						},
						Properties: &EndpointProperties{
							EndpointStatus:        EndpointStatusEnabled.ToPtr(),
							MinChildEndpoints:     to.Int64Ptr(2),
							MinChildEndpointsIPv4: to.Int64Ptr(1),
							MinChildEndpointsIPv6: to.Int64Ptr(2),
							Priority:              to.Int64Ptr(1),
							Target:                to.StringPtr("firstnestedprofile.tmpreview.watmtest.azure-test.net"),
							Weight:                to.Int64Ptr(1),
						},
					},
					{
						ProxyResource: ProxyResource{
							Resource: Resource{
								Name: to.StringPtr("MySecondNestedEndpoint"),
								Type: to.StringPtr("Microsoft.Network/trafficManagerProfiles/nestedEndpoints"),
							},
						},
						Properties: &EndpointProperties{
							EndpointStatus:        EndpointStatusEnabled.ToPtr(),
							MinChildEndpoints:     to.Int64Ptr(2),
							MinChildEndpointsIPv4: to.Int64Ptr(2),
							MinChildEndpointsIPv6: to.Int64Ptr(1),
							Priority:              to.Int64Ptr(2),
							Target:                to.StringPtr("secondnestedprofile.tmpreview.watmtest.azure-test.net"),
							Weight:                to.Int64Ptr(1),
						},
					}},
				MonitorConfig: &MonitorConfig{
					Path:                      to.StringPtr("/testpath.aspx"),
					IntervalInSeconds:         to.Int64Ptr(10),
					Port:                      to.Int64Ptr(80),
					TimeoutInSeconds:          to.Int64Ptr(5),
					ToleratedNumberOfFailures: to.Int64Ptr(2),
					Protocol:                  MonitorProtocolHTTP.ToPtr(),
				},
				ProfileStatus:        ProfileStatusEnabled.ToPtr(),
				TrafficRoutingMethod: TrafficRoutingMethodPriority.ToPtr(),
			},
		},
		&ProfilesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Profile.ID == nil {
		t.Fatal("Profile.ID should not be nil!")
	}
}

func TestProfiles_Delete(t *testing.T) {
	// From example Profile-DELETE
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProfilesClient(con,
		"{subscription-id}")
	_, err := client.Delete(ctx,
		"azuresdkfornetautoresttrafficmanager1323",
		"azuresdkfornetautoresttrafficmanager3880",
		&ProfilesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProfiles_Update(t *testing.T) {
	// From example Profile-PATCH-MonitorConfig
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProfilesClient(con,
		"{subscription-id}")
	res, err := client.Update(ctx,
		"azuresdkfornetautoresttrafficmanager2583",
		"azuresdkfornetautoresttrafficmanager6192",
		Profile{
			Properties: &ProfileProperties{
				MonitorConfig: &MonitorConfig{
					Path: to.StringPtr("/testpath.aspx"),
					CustomHeaders: []*MonitorConfigCustomHeadersItem{
						{
							Name:  to.StringPtr("header-1"),
							Value: to.StringPtr("value-1"),
						},
						{
							Name:  to.StringPtr("header-2"),
							Value: to.StringPtr("value-2"),
						}},
					IntervalInSeconds:         to.Int64Ptr(30),
					Port:                      to.Int64Ptr(80),
					TimeoutInSeconds:          to.Int64Ptr(6),
					ToleratedNumberOfFailures: to.Int64Ptr(4),
					Protocol:                  MonitorProtocolHTTP.ToPtr(),
				},
			},
		},
		&ProfilesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Profile.ID == nil {
		t.Fatal("Profile.ID should not be nil!")
	}
}

func TestGeographicHierarchies_GetDefault(t *testing.T) {
	// From example GeographicHierarchy-GET-default
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGeographicHierarchiesClient(con)
	res, err := client.GetDefault(ctx,
		&GeographicHierarchiesGetDefaultOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TrafficManagerGeographicHierarchy.ID == nil {
		t.Fatal("TrafficManagerGeographicHierarchy.ID should not be nil!")
	}
}

func TestHeatMap_Get(t *testing.T) {
	// From example HeatMap-GET
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHeatMapClient(con,
		"{subscription-id}")
	res, err := client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager1323",
		"azuresdkfornetautoresttrafficmanager3880",
		Enum8Default,
		&HeatMapGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HeatMapModel.ID == nil {
		t.Fatal("HeatMapModel.ID should not be nil!")
	}

	// From example HeatMap-GET-With-Null-Values
	res, err = client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager1323",
		"azuresdkfornetautoresttrafficmanager3880",
		Enum8Default,
		&HeatMapGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HeatMapModel.ID == nil {
		t.Fatal("HeatMapModel.ID should not be nil!")
	}

	// From example HeatMap-GET-With-TopLeft-BotRight
	res, err = client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager1323",
		"azuresdkfornetautoresttrafficmanager3880",
		Enum8Default,
		&HeatMapGetOptions{TopLeft: []*float64{
			to.Float64Ptr(10),
			to.Float64Ptr(50.001)},
			BotRight: []*float64{
				to.Float64Ptr(-50.001),
				to.Float64Ptr(80)},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.HeatMapModel.ID == nil {
		t.Fatal("HeatMapModel.ID should not be nil!")
	}
}

func TestTrafficManagerUserMetricsKeys_Get(t *testing.T) {
	// From example TrafficManagerUserMetricsKeys-GET
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTrafficManagerUserMetricsKeysClient(con,
		"{subscription-id}")
	res, err := client.Get(ctx,
		&TrafficManagerUserMetricsKeysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.UserMetricsModel.ID == nil {
		t.Fatal("UserMetricsModel.ID should not be nil!")
	}
}

func TestTrafficManagerUserMetricsKeys_CreateOrUpdate(t *testing.T) {
	// From example TrafficManagerUserMetricsKeys-PUT
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTrafficManagerUserMetricsKeysClient(con,
		"{subscription-id}")
	res, err := client.CreateOrUpdate(ctx,
		&TrafficManagerUserMetricsKeysCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.UserMetricsModel.ID == nil {
		t.Fatal("UserMetricsModel.ID should not be nil!")
	}
}

func TestTrafficManagerUserMetricsKeys_Delete(t *testing.T) {
	// From example TrafficManagerUserMetricsKeys-DELETE
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTrafficManagerUserMetricsKeysClient(con,
		"{subscription-id}")
	_, err := client.Delete(ctx,
		&TrafficManagerUserMetricsKeysDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
