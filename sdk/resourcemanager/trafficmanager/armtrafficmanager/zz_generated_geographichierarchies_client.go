//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtrafficmanager

import (
	"context"
	"fmt"
	"net/http"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// GeographicHierarchiesClient contains the methods for the GeographicHierarchies group.
// Don't use this type directly, use NewGeographicHierarchiesClient() instead.
type GeographicHierarchiesClient struct {
	ep string
	pl runtime.Pipeline
}

// NewGeographicHierarchiesClient creates a new instance of GeographicHierarchiesClient with the specified values.
func NewGeographicHierarchiesClient(con *arm.Connection) *GeographicHierarchiesClient {
	return &GeographicHierarchiesClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version)}
}

// GetDefault - Gets the default Geographic Hierarchy used by the Geographic traffic routing method.
// If the operation fails it returns the *CloudError error type.
func (client *GeographicHierarchiesClient) GetDefault(ctx context.Context, options *GeographicHierarchiesGetDefaultOptions) (GeographicHierarchiesGetDefaultResponse, error) {
	req, err := client.getDefaultCreateRequest(ctx, options)
	if err != nil {
		return GeographicHierarchiesGetDefaultResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return GeographicHierarchiesGetDefaultResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return GeographicHierarchiesGetDefaultResponse{}, client.getDefaultHandleError(resp)
	}
	return client.getDefaultHandleResponse(resp)
}

// getDefaultCreateRequest creates the GetDefault request.
func (client *GeographicHierarchiesClient) getDefaultCreateRequest(ctx context.Context, options *GeographicHierarchiesGetDefaultOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Network/trafficManagerGeographicHierarchies/default"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDefaultHandleResponse handles the GetDefault response.
func (client *GeographicHierarchiesClient) getDefaultHandleResponse(resp *http.Response) (GeographicHierarchiesGetDefaultResponse, error) {
	result := GeographicHierarchiesGetDefaultResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.TrafficManagerGeographicHierarchy); err != nil {
		return GeographicHierarchiesGetDefaultResponse{}, err
	}
	return result, nil
}

// getDefaultHandleError handles the GetDefault error response.
func (client *GeographicHierarchiesClient) getDefaultHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
