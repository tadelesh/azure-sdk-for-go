//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtrafficmanager_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/trafficmanager/armtrafficmanager"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestEndpoints_Update(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PATCH-External-Target.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoint-PATCH-External-Target"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewEndpointsClient("{subscription-id}", cred, &options)
	res, err := client.Update(ctx,
		"azuresdkfornetautoresttrafficmanager1421",
		"azsmnet6386",
		armtrafficmanager.EndpointTypeExternalEndpoints,
		"azsmnet7187",
		armtrafficmanager.Endpoint{
			Name: to.Ptr("azsmnet7187"),
			Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1421/providers/Microsoft.Network/trafficManagerProfiles/azsmnet6386/externalEndpoints/azsmnet7187"),
			Properties: &armtrafficmanager.EndpointProperties{
				Target: to.Ptr("another.foobar.contoso.com"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PATCH-External-Target.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Endpoint{
			Name: to.Ptr("azsmnet7187"),
			Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1421/providers/Microsoft.Network/trafficManagerProfiles/azsmnet6386/externalEndpoints/azsmnet7187"),
			Properties: &armtrafficmanager.EndpointProperties{
				EndpointLocation:      to.Ptr("North Europe"),
				EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
				EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
				Priority:              to.Ptr[int64](1),
				Target:                to.Ptr("another.foobar.contoso.com"),
				Weight:                to.Ptr[int64](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Endpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Endpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PATCH-External-Target.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_Get(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-GET-External-WithGeoMapping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoint-GET-External-WithGeoMapping"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewEndpointsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager2191",
		"azuresdkfornetautoresttrafficmanager8224",
		armtrafficmanager.EndpointTypeExternalEndpoints,
		"My%20external%20endpoint",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-GET-External-WithGeoMapping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Endpoint{
			Name: to.Ptr("My external endpoint"),
			Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager2191/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager8224/externalEndpoints/My external endpoint"),
			Properties: &armtrafficmanager.EndpointProperties{
				EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
				EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
				GeoMapping: []*string{
					to.Ptr("GEO-AS"),
					to.Ptr("GEO-AF")},
				Priority: to.Ptr[int64](1),
				Target:   to.Ptr("foobar.contoso.com"),
				Weight:   to.Ptr[int64](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Endpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Endpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-GET-External-WithGeoMapping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-GET-External-WithLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoint-GET-External-WithLocation"},
	})
	client = armtrafficmanager.NewEndpointsClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager1421",
		"azsmnet6386",
		armtrafficmanager.EndpointTypeExternalEndpoints,
		"azsmnet7187",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-GET-External-WithLocation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Endpoint{
			Name: to.Ptr("azsmnet7187"),
			Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1421/providers/Microsoft.Network/trafficManagerProfiles/azsmnet6386/externalEndpoints/azsmnet7187"),
			Properties: &armtrafficmanager.EndpointProperties{
				EndpointLocation:      to.Ptr("North Europe"),
				EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
				EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
				Priority:              to.Ptr[int64](1),
				Target:                to.Ptr("foobar.contoso.com"),
				Weight:                to.Ptr[int64](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Endpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Endpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-GET-External-WithLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-GET-External-WithSubnetMapping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoint-GET-External-WithSubnetMapping"},
	})
	client = armtrafficmanager.NewEndpointsClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager2191",
		"azuresdkfornetautoresttrafficmanager8224",
		armtrafficmanager.EndpointTypeExternalEndpoints,
		"My%20external%20endpoint",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-GET-External-WithSubnetMapping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Endpoint{
			Name: to.Ptr("My external endpoint"),
			Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager2191/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager8224/externalEndpoints/My external endpoint"),
			Properties: &armtrafficmanager.EndpointProperties{
				EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
				EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
				Priority:              to.Ptr[int64](1),
				Subnets: []*armtrafficmanager.EndpointPropertiesSubnetsItem{
					{
						First: to.Ptr("1.2.3.0"),
						Scope: to.Ptr[int32](24),
					},
					{
						First: to.Ptr("25.26.27.28"),
						Last:  to.Ptr("29.30.31.32"),
					}},
				Target: to.Ptr("foobar.contoso.com"),
				Weight: to.Ptr[int64](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Endpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Endpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-GET-External-WithSubnetMapping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_CreateOrUpdate(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PUT-External-WithCustomHeaders.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoint-PUT-External-WithCustomHeaders"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewEndpointsClient("{subscription-id}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager1421",
		"azsmnet6386",
		armtrafficmanager.EndpointTypeExternalEndpoints,
		"azsmnet7187",
		armtrafficmanager.Endpoint{
			Name: to.Ptr("azsmnet7187"),
			Type: to.Ptr("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
			Properties: &armtrafficmanager.EndpointProperties{
				CustomHeaders: []*armtrafficmanager.EndpointPropertiesCustomHeadersItem{
					{
						Name:  to.Ptr("header-1"),
						Value: to.Ptr("value-1"),
					},
					{
						Name:  to.Ptr("header-2"),
						Value: to.Ptr("value-2"),
					}},
				EndpointLocation: to.Ptr("North Europe"),
				EndpointStatus:   to.Ptr(armtrafficmanager.EndpointStatusEnabled),
				Target:           to.Ptr("foobar.contoso.com"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PUT-External-WithCustomHeaders.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Endpoint{
			Name: to.Ptr("azsmnet7187"),
			Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1421/providers/Microsoft.Network/trafficManagerProfiles/azsmnet6386/externalEndpoints/azsmnet7187"),
			Properties: &armtrafficmanager.EndpointProperties{
				CustomHeaders: []*armtrafficmanager.EndpointPropertiesCustomHeadersItem{
					{
						Name:  to.Ptr("header-1"),
						Value: to.Ptr("value-1"),
					},
					{
						Name:  to.Ptr("header-2"),
						Value: to.Ptr("value-2"),
					}},
				EndpointLocation:      to.Ptr("North Europe"),
				EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
				EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
				Priority:              to.Ptr[int64](1),
				Target:                to.Ptr("foobar.contoso.com"),
				Weight:                to.Ptr[int64](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Endpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Endpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PUT-External-WithCustomHeaders.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PUT-External-WithGeoMapping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoint-PUT-External-WithGeoMapping"},
	})
	client = armtrafficmanager.NewEndpointsClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager2191",
		"azuresdkfornetautoresttrafficmanager8224",
		armtrafficmanager.EndpointTypeExternalEndpoints,
		"My%20external%20endpoint",
		armtrafficmanager.Endpoint{
			Name: to.Ptr("My external endpoint"),
			Type: to.Ptr("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
			Properties: &armtrafficmanager.EndpointProperties{
				EndpointStatus: to.Ptr(armtrafficmanager.EndpointStatusEnabled),
				GeoMapping: []*string{
					to.Ptr("GEO-AS"),
					to.Ptr("GEO-AF")},
				Target: to.Ptr("foobar.contoso.com"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PUT-External-WithGeoMapping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Endpoint{
			Name: to.Ptr("My external endpoint"),
			Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager2191/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager8224/externalEndpoints/My external endpoint"),
			Properties: &armtrafficmanager.EndpointProperties{
				EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
				EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
				GeoMapping: []*string{
					to.Ptr("GEO-AS"),
					to.Ptr("GEO-AF")},
				Priority: to.Ptr[int64](1),
				Target:   to.Ptr("foobar.contoso.com"),
				Weight:   to.Ptr[int64](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Endpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Endpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PUT-External-WithGeoMapping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PUT-External-WithLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoint-PUT-External-WithLocation"},
	})
	client = armtrafficmanager.NewEndpointsClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager1421",
		"azsmnet6386",
		armtrafficmanager.EndpointTypeExternalEndpoints,
		"azsmnet7187",
		armtrafficmanager.Endpoint{
			Name: to.Ptr("azsmnet7187"),
			Type: to.Ptr("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
			Properties: &armtrafficmanager.EndpointProperties{
				EndpointLocation: to.Ptr("North Europe"),
				EndpointStatus:   to.Ptr(armtrafficmanager.EndpointStatusEnabled),
				Target:           to.Ptr("foobar.contoso.com"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PUT-External-WithLocation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Endpoint{
			Name: to.Ptr("azsmnet7187"),
			Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1421/providers/Microsoft.Network/trafficManagerProfiles/azsmnet6386/externalEndpoints/azsmnet7187"),
			Properties: &armtrafficmanager.EndpointProperties{
				EndpointLocation:      to.Ptr("North Europe"),
				EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
				EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
				Priority:              to.Ptr[int64](1),
				Target:                to.Ptr("foobar.contoso.com"),
				Weight:                to.Ptr[int64](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Endpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Endpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PUT-External-WithLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PUT-External-WithSubnetMapping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoint-PUT-External-WithSubnetMapping"},
	})
	client = armtrafficmanager.NewEndpointsClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager2191",
		"azuresdkfornetautoresttrafficmanager8224",
		armtrafficmanager.EndpointTypeExternalEndpoints,
		"My%20external%20endpoint",
		armtrafficmanager.Endpoint{
			Name: to.Ptr("My external endpoint"),
			Type: to.Ptr("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
			Properties: &armtrafficmanager.EndpointProperties{
				EndpointStatus: to.Ptr(armtrafficmanager.EndpointStatusEnabled),
				Subnets: []*armtrafficmanager.EndpointPropertiesSubnetsItem{
					{
						First: to.Ptr("1.2.3.0"),
						Scope: to.Ptr[int32](24),
					},
					{
						First: to.Ptr("25.26.27.28"),
						Last:  to.Ptr("29.30.31.32"),
					}},
				Target: to.Ptr("foobar.contoso.com"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PUT-External-WithSubnetMapping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Endpoint{
			Name: to.Ptr("My external endpoint"),
			Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager2191/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager8224/externalEndpoints/My external endpoint"),
			Properties: &armtrafficmanager.EndpointProperties{
				EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
				EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
				Priority:              to.Ptr[int64](1),
				Subnets: []*armtrafficmanager.EndpointPropertiesSubnetsItem{
					{
						First: to.Ptr("1.2.3.0"),
						Scope: to.Ptr[int32](24),
					},
					{
						First: to.Ptr("25.26.27.28"),
						Last:  to.Ptr("29.30.31.32"),
					}},
				Target: to.Ptr("foobar.contoso.com"),
				Weight: to.Ptr[int64](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Endpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Endpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-PUT-External-WithSubnetMapping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_Delete(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-DELETE-External.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Endpoint-DELETE-External"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewEndpointsClient("{subscription-id}", cred, &options)
	res, err := client.Delete(ctx,
		"azuresdkfornetautoresttrafficmanager1421",
		"azsmnet6386",
		armtrafficmanager.EndpointTypeExternalEndpoints,
		"azsmnet7187",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-DELETE-External.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.DeleteOperationResult{}
		if !reflect.DeepEqual(exampleRes, res.DeleteOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeleteOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Endpoint-DELETE-External.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_ListByResourceGroup(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-ByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListProfilesByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewProfilesClient("{subscription-id}", cred, &options)
	pager := client.ListByResourceGroup("azuresdkfornetautoresttrafficmanager3640",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-ByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtrafficmanager.ProfileListResult{
			Value: []*armtrafficmanager.Profile{
				{
					Name:     to.Ptr("azuresdkfornetautoresttrafficmanager1005"),
					Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager3640/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager1005"),
					Location: to.Ptr("global"),
					Tags:     map[string]*string{},
					Properties: &armtrafficmanager.ProfileProperties{
						DNSConfig: &armtrafficmanager.DNSConfig{
							Fqdn:         to.Ptr("azuresdkfornetautoresttrafficmanager1005.tmpreview.watmtest.azure-test.net"),
							RelativeName: to.Ptr("azuresdkfornetautoresttrafficmanager1005"),
							TTL:          to.Ptr[int64](35),
						},
						Endpoints: []*armtrafficmanager.Endpoint{
							{
								Name: to.Ptr("My external endpoint"),
								Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
								ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager3640/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager1005/externalEndpoints/My external endpoint"),
								Properties: &armtrafficmanager.EndpointProperties{
									EndpointLocation:      to.Ptr("North Europe"),
									EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
									EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
									Priority:              to.Ptr[int64](1),
									Target:                to.Ptr("foobar.contoso.com"),
									Weight:                to.Ptr[int64](1),
								},
							}},
						MonitorConfig: &armtrafficmanager.MonitorConfig{
							Path:                      to.Ptr("/testpath.aspx"),
							IntervalInSeconds:         to.Ptr[int64](30),
							Port:                      to.Ptr[int64](80),
							ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusOnline),
							TimeoutInSeconds:          to.Ptr[int64](10),
							ToleratedNumberOfFailures: to.Ptr[int64](3),
							Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
						},
						ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
						TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
					},
				},
				{
					Name:     to.Ptr("azuresdkfornetautoresttrafficmanager959"),
					Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager3640/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager959"),
					Location: to.Ptr("global"),
					Tags:     map[string]*string{},
					Properties: &armtrafficmanager.ProfileProperties{
						DNSConfig: &armtrafficmanager.DNSConfig{
							Fqdn:         to.Ptr("azuresdkfornetautoresttrafficmanager959.tmpreview.watmtest.azure-test.net"),
							RelativeName: to.Ptr("azuresdkfornetautoresttrafficmanager959"),
							TTL:          to.Ptr[int64](35),
						},
						Endpoints: []*armtrafficmanager.Endpoint{
							{
								Name: to.Ptr("My external endpoint"),
								Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
								ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager3640/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager959/externalEndpoints/My external endpoint"),
								Properties: &armtrafficmanager.EndpointProperties{
									EndpointLocation:      to.Ptr("North Europe"),
									EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusOnline),
									EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
									Priority:              to.Ptr[int64](1),
									Target:                to.Ptr("foobar.contoso.com"),
									Weight:                to.Ptr[int64](1),
								},
							}},
						MonitorConfig: &armtrafficmanager.MonitorConfig{
							Path:                      to.Ptr("/testpath.aspx"),
							IntervalInSeconds:         to.Ptr[int64](30),
							Port:                      to.Ptr[int64](80),
							ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusOnline),
							TimeoutInSeconds:          to.Ptr[int64](10),
							ToleratedNumberOfFailures: to.Ptr[int64](3),
							Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
						},
						ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
						TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProfileListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProfileListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-ByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_ListBySubscription(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-BySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewProfilesClient("{subscription-id}", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-BySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtrafficmanager.ProfileListResult{
			Value: []*armtrafficmanager.Profile{
				{
					Name:     to.Ptr("azsmnet5183"),
					Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azsmnet1719/providers/Microsoft.Network/trafficManagerProfiles/azsmnet5183"),
					Location: to.Ptr("global"),
					Tags:     map[string]*string{},
					Properties: &armtrafficmanager.ProfileProperties{
						DNSConfig: &armtrafficmanager.DNSConfig{
							Fqdn:         to.Ptr("azsmnet4696.tmpreview.watmtest.azure-test.net"),
							RelativeName: to.Ptr("azsmnet4696"),
							TTL:          to.Ptr[int64](35),
						},
						Endpoints: []*armtrafficmanager.Endpoint{},
						MonitorConfig: &armtrafficmanager.MonitorConfig{
							Path:                      to.Ptr("/testpath.aspx"),
							IntervalInSeconds:         to.Ptr[int64](30),
							Port:                      to.Ptr[int64](80),
							ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusOnline),
							TimeoutInSeconds:          to.Ptr[int64](10),
							ToleratedNumberOfFailures: to.Ptr[int64](3),
							Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
						},
						ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
						TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
					},
				},
				{
					Name:     to.Ptr("azuresdkfornetautoresttrafficmanager3440"),
					Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager5168/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3440"),
					Location: to.Ptr("global"),
					Tags:     map[string]*string{},
					Properties: &armtrafficmanager.ProfileProperties{
						DNSConfig: &armtrafficmanager.DNSConfig{
							Fqdn:         to.Ptr("azuresdkfornetautoresttrafficmanager3440.tmpreview.watmtest.azure-test.net"),
							RelativeName: to.Ptr("azuresdkfornetautoresttrafficmanager3440"),
							TTL:          to.Ptr[int64](35),
						},
						Endpoints: []*armtrafficmanager.Endpoint{
							{
								Name: to.Ptr("My external endpoint"),
								Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
								ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager5168/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3440/externalEndpoints/My external endpoint"),
								Properties: &armtrafficmanager.EndpointProperties{
									EndpointLocation:      to.Ptr("North Europe"),
									EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusOnline),
									EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
									Priority:              to.Ptr[int64](1),
									Target:                to.Ptr("foobar.contoso.com"),
									Weight:                to.Ptr[int64](1),
								},
							}},
						MonitorConfig: &armtrafficmanager.MonitorConfig{
							Path:                      to.Ptr("/testpath.aspx"),
							IntervalInSeconds:         to.Ptr[int64](30),
							Port:                      to.Ptr[int64](80),
							ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusOnline),
							TimeoutInSeconds:          to.Ptr[int64](10),
							ToleratedNumberOfFailures: to.Ptr[int64](3),
							Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
						},
						ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
						TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
					},
				},
				{
					Name:     to.Ptr("onesdk8819"),
					Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/onesdk9785/providers/Microsoft.Network/trafficManagerProfiles/onesdk8819"),
					Location: to.Ptr("global"),
					Tags:     map[string]*string{},
					Properties: &armtrafficmanager.ProfileProperties{
						DNSConfig: &armtrafficmanager.DNSConfig{
							Fqdn:         to.Ptr("onesdk7242.tmpreview.watmtest.azure-test.net"),
							RelativeName: to.Ptr("onesdk7242"),
							TTL:          to.Ptr[int64](51),
						},
						Endpoints: []*armtrafficmanager.Endpoint{
							{
								Name: to.Ptr("MyNestedEndpoint"),
								Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/nestedEndpoints"),
								ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/onesdk9785/providers/Microsoft.Network/trafficManagerProfiles/onesdk8819/nestedEndpoints/MyNestedEndpoint"),
								Properties: &armtrafficmanager.EndpointProperties{
									EndpointLocation:      to.Ptr("West Europe"),
									EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusStopped),
									EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
									MinChildEndpoints:     to.Ptr[int64](1),
									Priority:              to.Ptr[int64](1),
									Target:                to.Ptr("onesdk4285.tmpreview.watmtest.azure-test.net"),
									TargetResourceID:      to.Ptr("/subscriptions/{subscription-id}/resourceGroups/onesdk9785/providers/Microsoft.Network/trafficManagerProfiles/onesdk1792"),
									Weight:                to.Ptr[int64](1),
								},
							}},
						MonitorConfig: &armtrafficmanager.MonitorConfig{
							Path:                      to.Ptr("/testparent.asp"),
							IntervalInSeconds:         to.Ptr[int64](30),
							Port:                      to.Ptr[int64](111),
							ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusOnline),
							TimeoutInSeconds:          to.Ptr[int64](10),
							ToleratedNumberOfFailures: to.Ptr[int64](3),
							Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTPS),
						},
						ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
						TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProfileListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProfileListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-BySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_Get(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-WithEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profile-GET-WithEndpoints"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewProfilesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager1323",
		"azuresdkfornetautoresttrafficmanager3880",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-WithEndpoints.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Profile{
			Name:     to.Ptr("azuresdkfornetautoresttrafficmanager3880"),
			Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1323/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3880"),
			Location: to.Ptr("global"),
			Tags:     map[string]*string{},
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					Fqdn:         to.Ptr("azuresdkfornetautoresttrafficmanager3880.tmpreview.watmtest.azure-test.net"),
					RelativeName: to.Ptr("azuresdkfornetautoresttrafficmanager3880"),
					TTL:          to.Ptr[int64](35),
				},
				Endpoints: []*armtrafficmanager.Endpoint{
					{
						Name: to.Ptr("My external endpoint"),
						Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
						ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1323/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3880/externalEndpoints/My external endpoint"),
						Properties: &armtrafficmanager.EndpointProperties{
							EndpointLocation:      to.Ptr("North Europe"),
							EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
							EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
							Priority:              to.Ptr[int64](1),
							Target:                to.Ptr("foobar.contoso.com"),
							Weight:                to.Ptr[int64](1),
						},
					}},
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path:                      to.Ptr("/testpath.aspx"),
					IntervalInSeconds:         to.Ptr[int64](30),
					Port:                      to.Ptr[int64](80),
					ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusCheckingEndpoints),
					TimeoutInSeconds:          to.Ptr[int64](10),
					ToleratedNumberOfFailures: to.Ptr[int64](3),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-WithEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-WithTrafficViewDisabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profile-GET-WithTrafficViewDisabled"},
	})
	client = armtrafficmanager.NewProfilesClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager1323",
		"azuresdkfornetautoresttrafficmanager3880",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-WithTrafficViewDisabled.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Profile{
			Name:     to.Ptr("azuresdkfornetautoresttrafficmanager3880"),
			Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1323/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3880"),
			Location: to.Ptr("global"),
			Tags:     map[string]*string{},
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					Fqdn:         to.Ptr("azuresdkfornetautoresttrafficmanager3880.tmpreview.watmtest.azure-test.net"),
					RelativeName: to.Ptr("azuresdkfornetautoresttrafficmanager3880"),
					TTL:          to.Ptr[int64](35),
				},
				Endpoints: []*armtrafficmanager.Endpoint{
					{
						Name: to.Ptr("My external endpoint"),
						Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
						ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1323/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3880/externalEndpoints/My external endpoint"),
						Properties: &armtrafficmanager.EndpointProperties{
							EndpointLocation:      to.Ptr("North Europe"),
							EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
							EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
							Priority:              to.Ptr[int64](1),
							Target:                to.Ptr("foobar.contoso.com"),
							Weight:                to.Ptr[int64](1),
						},
					}},
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path:                      to.Ptr("/testpath.aspx"),
					IntervalInSeconds:         to.Ptr[int64](30),
					Port:                      to.Ptr[int64](80),
					ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusCheckingEndpoints),
					TimeoutInSeconds:          to.Ptr[int64](10),
					ToleratedNumberOfFailures: to.Ptr[int64](3),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:               to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod:        to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
				TrafficViewEnrollmentStatus: to.Ptr(armtrafficmanager.TrafficViewEnrollmentStatusDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-WithTrafficViewDisabled.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-WithTrafficViewEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profile-GET-WithTrafficViewEnabled"},
	})
	client = armtrafficmanager.NewProfilesClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager1323",
		"azuresdkfornetautoresttrafficmanager3880",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-WithTrafficViewEnabled.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Profile{
			Name:     to.Ptr("azuresdkfornetautoresttrafficmanager3880"),
			Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1323/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3880"),
			Location: to.Ptr("global"),
			Tags:     map[string]*string{},
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					Fqdn:         to.Ptr("azuresdkfornetautoresttrafficmanager3880.tmpreview.watmtest.azure-test.net"),
					RelativeName: to.Ptr("azuresdkfornetautoresttrafficmanager3880"),
					TTL:          to.Ptr[int64](35),
				},
				Endpoints: []*armtrafficmanager.Endpoint{
					{
						Name: to.Ptr("My external endpoint"),
						Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
						ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1323/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3880/externalEndpoints/My external endpoint"),
						Properties: &armtrafficmanager.EndpointProperties{
							EndpointLocation:      to.Ptr("North Europe"),
							EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
							EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
							Priority:              to.Ptr[int64](1),
							Target:                to.Ptr("foobar.contoso.com"),
							Weight:                to.Ptr[int64](1),
						},
					}},
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path:                      to.Ptr("/testpath.aspx"),
					IntervalInSeconds:         to.Ptr[int64](30),
					Port:                      to.Ptr[int64](80),
					ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusCheckingEndpoints),
					TimeoutInSeconds:          to.Ptr[int64](10),
					ToleratedNumberOfFailures: to.Ptr[int64](3),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:               to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod:        to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
				TrafficViewEnrollmentStatus: to.Ptr(armtrafficmanager.TrafficViewEnrollmentStatusEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-WithTrafficViewEnabled.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_CreateOrUpdate(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-MultiValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profile-PUT-MultiValue"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewProfilesClient("{subscription-id}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager1421",
		"azsmnet6386",
		armtrafficmanager.Profile{
			Location: to.Ptr("global"),
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					RelativeName: to.Ptr("azsmnet6386"),
					TTL:          to.Ptr[int64](35),
				},
				MaxReturn: to.Ptr[int64](2),
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path:     to.Ptr("/testpath.aspx"),
					Port:     to.Ptr[int64](80),
					Protocol: to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:               to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod:        to.Ptr(armtrafficmanager.TrafficRoutingMethodMultiValue),
				TrafficViewEnrollmentStatus: to.Ptr(armtrafficmanager.TrafficViewEnrollmentStatusDisabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-MultiValue.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Profile{
			Name:     to.Ptr("azsmnet6386"),
			Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1421/providers/Microsoft.Network/trafficManagerProfiles/azsmnet6386"),
			Location: to.Ptr("global"),
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					Fqdn:         to.Ptr("azsmnet6386.tmpreview.watmtest.azure-test.net"),
					RelativeName: to.Ptr("azsmnet6386"),
					TTL:          to.Ptr[int64](35),
				},
				Endpoints: []*armtrafficmanager.Endpoint{},
				MaxReturn: to.Ptr[int64](2),
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path:                      to.Ptr("/testpath.aspx"),
					IntervalInSeconds:         to.Ptr[int64](30),
					Port:                      to.Ptr[int64](80),
					ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusInactive),
					TimeoutInSeconds:          to.Ptr[int64](10),
					ToleratedNumberOfFailures: to.Ptr[int64](3),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:               to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod:        to.Ptr(armtrafficmanager.TrafficRoutingMethodMultiValue),
				TrafficViewEnrollmentStatus: to.Ptr(armtrafficmanager.TrafficViewEnrollmentStatusDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-MultiValue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-NoEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profile-PUT-NoEndpoints"},
	})
	client = armtrafficmanager.NewProfilesClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager1421",
		"azsmnet6386",
		armtrafficmanager.Profile{
			Location: to.Ptr("global"),
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					RelativeName: to.Ptr("azsmnet6386"),
					TTL:          to.Ptr[int64](35),
				},
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path:     to.Ptr("/testpath.aspx"),
					Port:     to.Ptr[int64](80),
					Protocol: to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-NoEndpoints.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Profile{
			Name:     to.Ptr("azsmnet6386"),
			Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1421/providers/Microsoft.Network/trafficManagerProfiles/azsmnet6386"),
			Location: to.Ptr("global"),
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					Fqdn:         to.Ptr("azsmnet6386.tmpreview.watmtest.azure-test.net"),
					RelativeName: to.Ptr("azsmnet6386"),
					TTL:          to.Ptr[int64](35),
				},
				Endpoints: []*armtrafficmanager.Endpoint{},
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path:                      to.Ptr("/testpath.aspx"),
					IntervalInSeconds:         to.Ptr[int64](30),
					Port:                      to.Ptr[int64](80),
					ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusInactive),
					TimeoutInSeconds:          to.Ptr[int64](10),
					ToleratedNumberOfFailures: to.Ptr[int64](3),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-NoEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-WithAliasing.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profile-PUT-WithAliasing"},
	})
	client = armtrafficmanager.NewProfilesClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager2583",
		"azuresdkfornetautoresttrafficmanager6192",
		armtrafficmanager.Profile{
			Location: to.Ptr("global"),
			Properties: &armtrafficmanager.ProfileProperties{
				AllowedEndpointRecordTypes: []*armtrafficmanager.AllowedEndpointRecordType{
					to.Ptr(armtrafficmanager.AllowedEndpointRecordTypeDomainName)},
				DNSConfig: &armtrafficmanager.DNSConfig{
					RelativeName: to.Ptr("azuresdkfornetautoresttrafficmanager6192"),
					TTL:          to.Ptr[int64](35),
				},
				Endpoints: []*armtrafficmanager.Endpoint{
					{
						Name: to.Ptr("My external endpoint"),
						Type: to.Ptr("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
						Properties: &armtrafficmanager.EndpointProperties{
							EndpointLocation: to.Ptr("North Europe"),
							EndpointStatus:   to.Ptr(armtrafficmanager.EndpointStatusEnabled),
							Target:           to.Ptr("foobar.contoso.com"),
						},
					}},
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path:                      to.Ptr("/testpath.aspx"),
					IntervalInSeconds:         to.Ptr[int64](10),
					Port:                      to.Ptr[int64](80),
					TimeoutInSeconds:          to.Ptr[int64](5),
					ToleratedNumberOfFailures: to.Ptr[int64](2),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-WithAliasing.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Profile{
			Name:     to.Ptr("azuresdkfornetautoresttrafficmanager6192"),
			Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager2583/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager6192"),
			Location: to.Ptr("global"),
			Properties: &armtrafficmanager.ProfileProperties{
				AllowedEndpointRecordTypes: []*armtrafficmanager.AllowedEndpointRecordType{
					to.Ptr(armtrafficmanager.AllowedEndpointRecordTypeDomainName)},
				DNSConfig: &armtrafficmanager.DNSConfig{
					Fqdn:         to.Ptr("azuresdkfornetautoresttrafficmanager6192.tmpreview.watmtest.azure-test.net"),
					RelativeName: to.Ptr("azuresdkfornetautoresttrafficmanager6192"),
					TTL:          to.Ptr[int64](35),
				},
				Endpoints: []*armtrafficmanager.Endpoint{
					{
						Name: to.Ptr("My external endpoint"),
						Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
						ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager2583/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager6192/externalEndpoints/My external endpoint"),
						Properties: &armtrafficmanager.EndpointProperties{
							CustomHeaders: []*armtrafficmanager.EndpointPropertiesCustomHeadersItem{
								{
									Name:  to.Ptr("header-2"),
									Value: to.Ptr("value-2-overridden"),
								}},
							EndpointLocation:      to.Ptr("North Europe"),
							EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
							EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
							Priority:              to.Ptr[int64](1),
							Target:                to.Ptr("foobar.contoso.com"),
							Weight:                to.Ptr[int64](1),
						},
					}},
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path: to.Ptr("/testpath.aspx"),
					CustomHeaders: []*armtrafficmanager.MonitorConfigCustomHeadersItem{
						{
							Name:  to.Ptr("header-1"),
							Value: to.Ptr("value-1"),
						},
						{
							Name:  to.Ptr("header-2"),
							Value: to.Ptr("value-2"),
						}},
					IntervalInSeconds:         to.Ptr[int64](10),
					Port:                      to.Ptr[int64](80),
					ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusCheckingEndpoints),
					TimeoutInSeconds:          to.Ptr[int64](5),
					ToleratedNumberOfFailures: to.Ptr[int64](2),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-WithAliasing.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-WithCustomHeaders.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profile-PUT-WithCustomHeaders"},
	})
	client = armtrafficmanager.NewProfilesClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager2583",
		"azuresdkfornetautoresttrafficmanager6192",
		armtrafficmanager.Profile{
			Location: to.Ptr("global"),
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					RelativeName: to.Ptr("azuresdkfornetautoresttrafficmanager6192"),
					TTL:          to.Ptr[int64](35),
				},
				Endpoints: []*armtrafficmanager.Endpoint{
					{
						Name: to.Ptr("My external endpoint"),
						Type: to.Ptr("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
						Properties: &armtrafficmanager.EndpointProperties{
							CustomHeaders: []*armtrafficmanager.EndpointPropertiesCustomHeadersItem{
								{
									Name:  to.Ptr("header-2"),
									Value: to.Ptr("value-2-overridden"),
								}},
							EndpointLocation: to.Ptr("North Europe"),
							EndpointStatus:   to.Ptr(armtrafficmanager.EndpointStatusEnabled),
							Target:           to.Ptr("foobar.contoso.com"),
						},
					}},
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path: to.Ptr("/testpath.aspx"),
					CustomHeaders: []*armtrafficmanager.MonitorConfigCustomHeadersItem{
						{
							Name:  to.Ptr("header-1"),
							Value: to.Ptr("value-1"),
						},
						{
							Name:  to.Ptr("header-2"),
							Value: to.Ptr("value-2"),
						}},
					ExpectedStatusCodeRanges: []*armtrafficmanager.MonitorConfigExpectedStatusCodeRangesItem{
						{
							Max: to.Ptr[int32](205),
							Min: to.Ptr[int32](200),
						},
						{
							Max: to.Ptr[int32](410),
							Min: to.Ptr[int32](400),
						}},
					IntervalInSeconds:         to.Ptr[int64](10),
					Port:                      to.Ptr[int64](80),
					TimeoutInSeconds:          to.Ptr[int64](5),
					ToleratedNumberOfFailures: to.Ptr[int64](2),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:               to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod:        to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
				TrafficViewEnrollmentStatus: to.Ptr(armtrafficmanager.TrafficViewEnrollmentStatusDisabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-WithCustomHeaders.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Profile{
			Name:     to.Ptr("azuresdkfornetautoresttrafficmanager6192"),
			Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager2583/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager6192"),
			Location: to.Ptr("global"),
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					Fqdn:         to.Ptr("azuresdkfornetautoresttrafficmanager6192.tmpreview.watmtest.azure-test.net"),
					RelativeName: to.Ptr("azuresdkfornetautoresttrafficmanager6192"),
					TTL:          to.Ptr[int64](35),
				},
				Endpoints: []*armtrafficmanager.Endpoint{
					{
						Name: to.Ptr("My external endpoint"),
						Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
						ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager2583/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager6192/externalEndpoints/My external endpoint"),
						Properties: &armtrafficmanager.EndpointProperties{
							CustomHeaders: []*armtrafficmanager.EndpointPropertiesCustomHeadersItem{
								{
									Name:  to.Ptr("header-2"),
									Value: to.Ptr("value-2-overridden"),
								}},
							EndpointLocation:      to.Ptr("North Europe"),
							EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
							EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
							Priority:              to.Ptr[int64](1),
							Target:                to.Ptr("foobar.contoso.com"),
							Weight:                to.Ptr[int64](1),
						},
					}},
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path: to.Ptr("/testpath.aspx"),
					CustomHeaders: []*armtrafficmanager.MonitorConfigCustomHeadersItem{
						{
							Name:  to.Ptr("header-1"),
							Value: to.Ptr("value-1"),
						},
						{
							Name:  to.Ptr("header-2"),
							Value: to.Ptr("value-2"),
						}},
					IntervalInSeconds:         to.Ptr[int64](10),
					Port:                      to.Ptr[int64](80),
					ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusCheckingEndpoints),
					TimeoutInSeconds:          to.Ptr[int64](5),
					ToleratedNumberOfFailures: to.Ptr[int64](2),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:               to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod:        to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
				TrafficViewEnrollmentStatus: to.Ptr(armtrafficmanager.TrafficViewEnrollmentStatusDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-WithCustomHeaders.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-WithEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profile-PUT-WithEndpoints"},
	})
	client = armtrafficmanager.NewProfilesClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"azuresdkfornetautoresttrafficmanager2583",
		"azuresdkfornetautoresttrafficmanager6192",
		armtrafficmanager.Profile{
			Location: to.Ptr("global"),
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					RelativeName: to.Ptr("azuresdkfornetautoresttrafficmanager6192"),
					TTL:          to.Ptr[int64](35),
				},
				Endpoints: []*armtrafficmanager.Endpoint{
					{
						Name: to.Ptr("My external endpoint"),
						Type: to.Ptr("Microsoft.network/TrafficManagerProfiles/ExternalEndpoints"),
						Properties: &armtrafficmanager.EndpointProperties{
							EndpointLocation: to.Ptr("North Europe"),
							EndpointStatus:   to.Ptr(armtrafficmanager.EndpointStatusEnabled),
							Target:           to.Ptr("foobar.contoso.com"),
						},
					}},
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path:                      to.Ptr("/testpath.aspx"),
					IntervalInSeconds:         to.Ptr[int64](10),
					Port:                      to.Ptr[int64](80),
					TimeoutInSeconds:          to.Ptr[int64](5),
					ToleratedNumberOfFailures: to.Ptr[int64](2),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-WithEndpoints.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Profile{
			Name:     to.Ptr("azuresdkfornetautoresttrafficmanager6192"),
			Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager2583/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager6192"),
			Location: to.Ptr("global"),
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					Fqdn:         to.Ptr("azuresdkfornetautoresttrafficmanager6192.tmpreview.watmtest.azure-test.net"),
					RelativeName: to.Ptr("azuresdkfornetautoresttrafficmanager6192"),
					TTL:          to.Ptr[int64](35),
				},
				Endpoints: []*armtrafficmanager.Endpoint{
					{
						Name: to.Ptr("My external endpoint"),
						Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
						ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager2583/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager6192/externalEndpoints/My external endpoint"),
						Properties: &armtrafficmanager.EndpointProperties{
							EndpointLocation:      to.Ptr("North Europe"),
							EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
							EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
							Priority:              to.Ptr[int64](1),
							Target:                to.Ptr("foobar.contoso.com"),
							Weight:                to.Ptr[int64](1),
						},
					}},
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path:                      to.Ptr("/testpath.aspx"),
					IntervalInSeconds:         to.Ptr[int64](10),
					Port:                      to.Ptr[int64](80),
					ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusCheckingEndpoints),
					TimeoutInSeconds:          to.Ptr[int64](5),
					ToleratedNumberOfFailures: to.Ptr[int64](2),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-WithEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-WithNestedEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profile-PUT-WithNestedEndpoints"},
	})
	client = armtrafficmanager.NewProfilesClient("{subscription-id}", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"myresourcegroup",
		"parentprofile",
		armtrafficmanager.Profile{
			Location: to.Ptr("global"),
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					RelativeName: to.Ptr("parentprofile"),
					TTL:          to.Ptr[int64](35),
				},
				Endpoints: []*armtrafficmanager.Endpoint{
					{
						Name: to.Ptr("MyFirstNestedEndpoint"),
						Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/nestedEndpoints"),
						Properties: &armtrafficmanager.EndpointProperties{
							EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
							MinChildEndpoints:     to.Ptr[int64](2),
							MinChildEndpointsIPv4: to.Ptr[int64](1),
							MinChildEndpointsIPv6: to.Ptr[int64](2),
							Priority:              to.Ptr[int64](1),
							Target:                to.Ptr("firstnestedprofile.tmpreview.watmtest.azure-test.net"),
							Weight:                to.Ptr[int64](1),
						},
					},
					{
						Name: to.Ptr("MySecondNestedEndpoint"),
						Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/nestedEndpoints"),
						Properties: &armtrafficmanager.EndpointProperties{
							EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
							MinChildEndpoints:     to.Ptr[int64](2),
							MinChildEndpointsIPv4: to.Ptr[int64](2),
							MinChildEndpointsIPv6: to.Ptr[int64](1),
							Priority:              to.Ptr[int64](2),
							Target:                to.Ptr("secondnestedprofile.tmpreview.watmtest.azure-test.net"),
							Weight:                to.Ptr[int64](1),
						},
					}},
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path:                      to.Ptr("/testpath.aspx"),
					IntervalInSeconds:         to.Ptr[int64](10),
					Port:                      to.Ptr[int64](80),
					TimeoutInSeconds:          to.Ptr[int64](5),
					ToleratedNumberOfFailures: to.Ptr[int64](2),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPriority),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-WithNestedEndpoints.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Profile{
			Name:     to.Ptr("parentprofile"),
			Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myresourcegroup/providers/Microsoft.Network/trafficManagerProfiles/parentprofile"),
			Location: to.Ptr("global"),
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					Fqdn:         to.Ptr("parentprofile.tmpreview.watmtest.azure-test.net"),
					RelativeName: to.Ptr("parentprofile"),
					TTL:          to.Ptr[int64](35),
				},
				Endpoints: []*armtrafficmanager.Endpoint{
					{
						Name: to.Ptr("MyFirstNestedEndpoint"),
						Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/nestedEndpoints"),
						ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myresourcegroup/providers/Microsoft.Network/trafficManagerProfiles/parentprofile/nestedEndpoints/MyFirstNestedEndpoint"),
						Properties: &armtrafficmanager.EndpointProperties{
							EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
							EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
							MinChildEndpoints:     to.Ptr[int64](2),
							MinChildEndpointsIPv4: to.Ptr[int64](1),
							MinChildEndpointsIPv6: to.Ptr[int64](2),
							Priority:              to.Ptr[int64](1),
							Target:                to.Ptr("firstnestedprofile.tmpreview.watmtest.azure-test.net"),
							Weight:                to.Ptr[int64](1),
						},
					},
					{
						Name: to.Ptr("MySecondNestedEndpoint"),
						Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/nestedEndpoints"),
						ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myresourcegroup/providers/Microsoft.Network/trafficManagerProfiles/parentprofile/nestedEndpoints/MySecondNestedEndpoint"),
						Properties: &armtrafficmanager.EndpointProperties{
							EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
							EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
							MinChildEndpoints:     to.Ptr[int64](2),
							MinChildEndpointsIPv4: to.Ptr[int64](2),
							MinChildEndpointsIPv6: to.Ptr[int64](1),
							Priority:              to.Ptr[int64](1),
							Target:                to.Ptr("secondnestedprofile.tmpreview.watmtest.azure-test.net"),
							Weight:                to.Ptr[int64](1),
						},
					}},
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path:                      to.Ptr("/testpath.aspx"),
					IntervalInSeconds:         to.Ptr[int64](10),
					Port:                      to.Ptr[int64](80),
					ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusCheckingEndpoints),
					TimeoutInSeconds:          to.Ptr[int64](5),
					ToleratedNumberOfFailures: to.Ptr[int64](2),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPriority),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-WithNestedEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_Delete(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-DELETE.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profile-DELETE"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewProfilesClient("{subscription-id}", cred, &options)
	res, err := client.Delete(ctx,
		"azuresdkfornetautoresttrafficmanager1323",
		"azuresdkfornetautoresttrafficmanager3880",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-DELETE.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.DeleteOperationResult{}
		if !reflect.DeepEqual(exampleRes, res.DeleteOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeleteOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-DELETE.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProfiles_Update(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PATCH-MonitorConfig.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Profile-PATCH-MonitorConfig"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewProfilesClient("{subscription-id}", cred, &options)
	res, err := client.Update(ctx,
		"azuresdkfornetautoresttrafficmanager2583",
		"azuresdkfornetautoresttrafficmanager6192",
		armtrafficmanager.Profile{
			Properties: &armtrafficmanager.ProfileProperties{
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path: to.Ptr("/testpath.aspx"),
					CustomHeaders: []*armtrafficmanager.MonitorConfigCustomHeadersItem{
						{
							Name:  to.Ptr("header-1"),
							Value: to.Ptr("value-1"),
						},
						{
							Name:  to.Ptr("header-2"),
							Value: to.Ptr("value-2"),
						}},
					IntervalInSeconds:         to.Ptr[int64](30),
					Port:                      to.Ptr[int64](80),
					TimeoutInSeconds:          to.Ptr[int64](6),
					ToleratedNumberOfFailures: to.Ptr[int64](4),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PATCH-MonitorConfig.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.Profile{
			Name:     to.Ptr("azuresdkfornetautoresttrafficmanager6192"),
			Type:     to.Ptr("Microsoft.Network/trafficManagerProfiles"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager2583/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager6192"),
			Location: to.Ptr("global"),
			Tags:     map[string]*string{},
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					Fqdn:         to.Ptr("azuresdkfornetautoresttrafficmanager6192.tmpreview.watmtest.azure-test.net"),
					RelativeName: to.Ptr("azuresdkfornetautoresttrafficmanager6192"),
					TTL:          to.Ptr[int64](35),
				},
				Endpoints: []*armtrafficmanager.Endpoint{
					{
						Name: to.Ptr("My external endpoint"),
						Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/externalEndpoints"),
						ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager2583/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager6192/externalEndpoints/My external endpoint"),
						Properties: &armtrafficmanager.EndpointProperties{
							EndpointLocation:      to.Ptr("North Europe"),
							EndpointMonitorStatus: to.Ptr(armtrafficmanager.EndpointMonitorStatusCheckingEndpoint),
							EndpointStatus:        to.Ptr(armtrafficmanager.EndpointStatusEnabled),
							Priority:              to.Ptr[int64](1),
							Target:                to.Ptr("foobar.contoso.com"),
							Weight:                to.Ptr[int64](1),
						},
					}},
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path: to.Ptr("/testpath.aspx"),
					CustomHeaders: []*armtrafficmanager.MonitorConfigCustomHeadersItem{
						{
							Name:  to.Ptr("header-1"),
							Value: to.Ptr("value-1"),
						},
						{
							Name:  to.Ptr("header-2"),
							Value: to.Ptr("value-2"),
						}},
					IntervalInSeconds:         to.Ptr[int64](30),
					Port:                      to.Ptr[int64](80),
					ProfileMonitorStatus:      to.Ptr(armtrafficmanager.ProfileMonitorStatusCheckingEndpoints),
					TimeoutInSeconds:          to.Ptr[int64](6),
					ToleratedNumberOfFailures: to.Ptr[int64](4),
					Protocol:                  to.Ptr(armtrafficmanager.MonitorProtocolHTTP),
				},
				ProfileStatus:        to.Ptr(armtrafficmanager.ProfileStatusEnabled),
				TrafficRoutingMethod: to.Ptr(armtrafficmanager.TrafficRoutingMethodPerformance),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Profile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Profile)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PATCH-MonitorConfig.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGeographicHierarchies_GetDefault(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/GeographicHierarchy-GET-default.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GeographicHierarchy-GET-default"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewGeographicHierarchiesClient(cred, &options)
	res, err := client.GetDefault(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/GeographicHierarchy-GET-default.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.GeographicHierarchy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Network/trafficManagerGeographicHierarchies"),
			ID:   to.Ptr("/providers/Microsoft.Network/trafficManagerGeographicHierarchies/default"),
			Properties: &armtrafficmanager.GeographicHierarchyProperties{
				GeographicHierarchy: &armtrafficmanager.Region{
					Name: to.Ptr("World"),
					Code: to.Ptr("WORLD"),
					Regions: []*armtrafficmanager.Region{
						{
							Name: to.Ptr("Middle East"),
							Code: to.Ptr("GEO-ME"),
							Regions: []*armtrafficmanager.Region{
								{
									Name:    to.Ptr("United Arab Emirates"),
									Code:    to.Ptr("AE"),
									Regions: []*armtrafficmanager.Region{},
								}},
						},
						{
							Name: to.Ptr("Australia / Pacific"),
							Code: to.Ptr("GEO-AP"),
							Regions: []*armtrafficmanager.Region{
								{
									Name: to.Ptr("Australia"),
									Code: to.Ptr("AU"),
									Regions: []*armtrafficmanager.Region{
										{
											Name:    to.Ptr("Australian Capital Territory"),
											Code:    to.Ptr("AU-ACT"),
											Regions: []*armtrafficmanager.Region{},
										},
										{
											Name:    to.Ptr("New South Wales"),
											Code:    to.Ptr("AU-NSW"),
											Regions: []*armtrafficmanager.Region{},
										}},
								},
								{
									Name:    to.Ptr("Cook Islands"),
									Code:    to.Ptr("CK"),
									Regions: []*armtrafficmanager.Region{},
								}},
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GeographicHierarchy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GeographicHierarchy)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/GeographicHierarchy-GET-default.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHeatMap_Get(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/HeatMap-GET.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HeatMap-GET"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewHeatMapClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager1323",
		"azuresdkfornetautoresttrafficmanager3880",
		armtrafficmanager.Enum8Default,
		&armtrafficmanager.HeatMapClientGetOptions{TopLeft: []float64{},
			BotRight: []float64{},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/HeatMap-GET.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.HeatMapModel{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/heatMaps/latencyVolumeByLocation"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1323/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3880/heatMaps/latencyVolumeByLocation"),
			Properties: &armtrafficmanager.HeatMapProperties{
				EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-22T12:50:00Z"); return t }()),
				Endpoints: []*armtrafficmanager.HeatMapEndpoint{
					{
						EndpointID: to.Ptr[int32](1),
						ResourceID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1323/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3880/externalEndpoints/azuresdkfornetautoresttrafficmanager3880"),
					},
					{
						EndpointID: to.Ptr[int32](2),
						ResourceID: to.Ptr("/subscriptions/562d4115-c01e-4m67-9bbd-c11c2d58ad73/resourceGroups/azuresdkfornetautoresttrafficmanager1300/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3885/externalEndpoints/azuresdkfornetautoresttrafficmanager3881"),
					}},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T12:00:00Z"); return t }()),
				TrafficFlows: []*armtrafficmanager.TrafficFlow{
					{
						Latitude:  to.Ptr[float64](99.99),
						Longitude: to.Ptr[float64](0),
						QueryExperiences: []*armtrafficmanager.QueryExperience{
							{
								EndpointID: to.Ptr[int32](1),
								Latency:    to.Ptr[float64](99.222),
								QueryCount: to.Ptr[int32](1000000),
							},
							{
								EndpointID: to.Ptr[int32](2),
								Latency:    to.Ptr[float64](1.222),
								QueryCount: to.Ptr[int32](1),
							}},
						SourceIP: to.Ptr("1.1.1.1"),
					},
					{
						Latitude:  to.Ptr[float64](-99.99),
						Longitude: to.Ptr[float64](1),
						QueryExperiences: []*armtrafficmanager.QueryExperience{
							{
								EndpointID: to.Ptr[int32](1),
								Latency:    to.Ptr[float64](96.222),
								QueryCount: to.Ptr[int32](100),
							},
							{
								EndpointID: to.Ptr[int32](2),
								Latency:    to.Ptr[float64](4.222),
								QueryCount: to.Ptr[int32](500),
							}},
						SourceIP: to.Ptr("2.255.1.1"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HeatMapModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HeatMapModel)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/HeatMap-GET.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/HeatMap-GET-With-Null-Values.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HeatMap-GET-With-Null-Values"},
	})
	client = armtrafficmanager.NewHeatMapClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager1323",
		"azuresdkfornetautoresttrafficmanager3880",
		armtrafficmanager.Enum8Default,
		&armtrafficmanager.HeatMapClientGetOptions{TopLeft: []float64{},
			BotRight: []float64{},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/HeatMap-GET-With-Null-Values.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.HeatMapModel{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/heatMaps/default"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1323/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3880/heatMaps/default"),
			Properties: &armtrafficmanager.HeatMapProperties{
				EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-22T12:50:00Z"); return t }()),
				Endpoints: []*armtrafficmanager.HeatMapEndpoint{
					{
						EndpointID: to.Ptr[int32](0),
						ResourceID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1323/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3880/externalEndpoints/azuresdkfornetautoresttrafficmanager3880"),
					},
					{
						EndpointID: to.Ptr[int32](1),
						ResourceID: to.Ptr("/subscriptions/562d4115-c01e-4m67-9bbd-c11c2d58ad73/resourceGroups/azuresdkfornetautoresttrafficmanager1300/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3885/externalEndpoints/azuresdkfornetautoresttrafficmanager3881"),
					}},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T12:00:00Z"); return t }()),
				TrafficFlows: []*armtrafficmanager.TrafficFlow{
					{
						Latitude:  to.Ptr[float64](99.99),
						Longitude: to.Ptr[float64](0),
						QueryExperiences: []*armtrafficmanager.QueryExperience{
							{
								EndpointID: to.Ptr[int32](0),
								Latency:    to.Ptr[float64](99),
								QueryCount: to.Ptr[int32](1000000),
							},
							{
								EndpointID: to.Ptr[int32](1),
								Latency:    to.Ptr[float64](1),
								QueryCount: to.Ptr[int32](1),
							}},
						SourceIP: to.Ptr("1.1.1.1"),
					},
					{
						Latitude:  to.Ptr[float64](1.11),
						Longitude: to.Ptr[float64](-2.35),
						QueryExperiences: []*armtrafficmanager.QueryExperience{
							{
								EndpointID: to.Ptr[int32](0),
								QueryCount: to.Ptr[int32](100),
							},
							{
								EndpointID: to.Ptr[int32](1),
								Latency:    to.Ptr[float64](4.222),
								QueryCount: to.Ptr[int32](500),
							}},
						SourceIP: to.Ptr("2.255.1.1"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HeatMapModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HeatMapModel)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/HeatMap-GET-With-Null-Values.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/HeatMap-GET-With-TopLeft-BotRight.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HeatMap-GET-With-TopLeft-BotRight"},
	})
	client = armtrafficmanager.NewHeatMapClient("{subscription-id}", cred, &options)
	res, err = client.Get(ctx,
		"azuresdkfornetautoresttrafficmanager1323",
		"azuresdkfornetautoresttrafficmanager3880",
		armtrafficmanager.Enum8Default,
		&armtrafficmanager.HeatMapClientGetOptions{TopLeft: []float64{
			10,
			50.001},
			BotRight: []float64{
				-50.001,
				80},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/HeatMap-GET-With-TopLeft-BotRight.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.HeatMapModel{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Network/trafficManagerProfiles/heatMaps/latencyVolumeByLocation"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1323/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3880/heatMaps/latencyVolumeByLocation"),
			Properties: &armtrafficmanager.HeatMapProperties{
				EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-22T12:50:00Z"); return t }()),
				Endpoints: []*armtrafficmanager.HeatMapEndpoint{
					{
						EndpointID: to.Ptr[int32](1),
						ResourceID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/azuresdkfornetautoresttrafficmanager1323/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3880/externalEndpoints/azuresdkfornetautoresttrafficmanager3880"),
					},
					{
						EndpointID: to.Ptr[int32](2),
						ResourceID: to.Ptr("/subscriptions/562d4115-c01e-4m67-9bbd-c11c2d58ad73/resourceGroups/azuresdkfornetautoresttrafficmanager1300/providers/Microsoft.Network/trafficManagerProfiles/azuresdkfornetautoresttrafficmanager3885/externalEndpoints/azuresdkfornetautoresttrafficmanager3881"),
					}},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T12:00:00Z"); return t }()),
				TrafficFlows: []*armtrafficmanager.TrafficFlow{
					{
						Latitude:  to.Ptr[float64](9.99),
						Longitude: to.Ptr[float64](75.01),
						QueryExperiences: []*armtrafficmanager.QueryExperience{
							{
								EndpointID: to.Ptr[int32](1),
								Latency:    to.Ptr[float64](99.222),
								QueryCount: to.Ptr[int32](1000000),
							},
							{
								EndpointID: to.Ptr[int32](2),
								Latency:    to.Ptr[float64](1.222),
								QueryCount: to.Ptr[int32](1),
							}},
						SourceIP: to.Ptr("1.1.1.1"),
					},
					{
						Latitude:  to.Ptr[float64](-49.99),
						Longitude: to.Ptr[float64](51),
						QueryExperiences: []*armtrafficmanager.QueryExperience{
							{
								EndpointID: to.Ptr[int32](1),
								Latency:    to.Ptr[float64](96.222),
								QueryCount: to.Ptr[int32](100),
							},
							{
								EndpointID: to.Ptr[int32](2),
								Latency:    to.Ptr[float64](4.222),
								QueryCount: to.Ptr[int32](500),
							}},
						SourceIP: to.Ptr("2.255.1.1"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.HeatMapModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HeatMapModel)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/HeatMap-GET-With-TopLeft-BotRight.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTrafficManagerUserMetricsKeys_Get(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/TrafficManagerUserMetricsKeys-GET.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TrafficManagerUserMetricsKeys-GET"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewUserMetricsKeysClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/TrafficManagerUserMetricsKeys-GET.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.UserMetricsModel{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Network/trafficManagerUserMetricsKeys"),
			ID:   to.Ptr("/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default"),
			Properties: &armtrafficmanager.UserMetricsProperties{
				Key: to.Ptr("9ea056eb38f145a0891b5d5dc15e9aa2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.UserMetricsModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UserMetricsModel)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/TrafficManagerUserMetricsKeys-GET.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTrafficManagerUserMetricsKeys_CreateOrUpdate(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/TrafficManagerUserMetricsKeys-PUT.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TrafficManagerUserMetricsKeys-PUT"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewUserMetricsKeysClient("{subscription-id}", cred, &options)
	_, err := client.CreateOrUpdate(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/TrafficManagerUserMetricsKeys-PUT.json: %v", err)
	}
}

func TestTrafficManagerUserMetricsKeys_Delete(t *testing.T) {
	// From example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/TrafficManagerUserMetricsKeys-DELETE.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TrafficManagerUserMetricsKeys-DELETE"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtrafficmanager.NewUserMetricsKeysClient("{subscription-id}", cred, &options)
	res, err := client.Delete(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/TrafficManagerUserMetricsKeys-DELETE.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtrafficmanager.DeleteOperationResult{}
		if !reflect.DeepEqual(exampleRes, res.DeleteOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeleteOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/TrafficManagerUserMetricsKeys-DELETE.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
