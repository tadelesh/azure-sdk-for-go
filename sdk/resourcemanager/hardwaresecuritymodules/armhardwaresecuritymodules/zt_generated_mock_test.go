//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhardwaresecuritymodules_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hardwaresecuritymodules/armhardwaresecuritymodules"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of Dedicated HSM operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhardwaresecuritymodules.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhardwaresecuritymodules.DedicatedHsmOperationListResult{
			Value: []*armhardwaresecuritymodules.DedicatedHsmOperation{
				{
					Name: to.Ptr("hsm1"),
					Display: &armhardwaresecuritymodules.DedicatedHsmOperationDisplay{
						Description: to.Ptr("Update a dedicated HSM in the specified subscription"),
						Operation:   to.Ptr("DedicatedHsm_Update"),
						Provider:    to.Ptr("Microsoft HardwareSecurityModules"),
						Resource:    to.Ptr("Dedicated HSM"),
					},
					IsDataAction: to.Ptr("false"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedHsmOperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedHsmOperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of Payment HSM operations"},
	})
	client = armhardwaresecuritymodules.NewOperationsClient(cred, &options)
	pager = client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhardwaresecuritymodules.DedicatedHsmOperationListResult{
			Value: []*armhardwaresecuritymodules.DedicatedHsmOperation{
				{
					Name: to.Ptr("hsm1"),
					Display: &armhardwaresecuritymodules.DedicatedHsmOperationDisplay{
						Description: to.Ptr("Update a dedicated HSM in the specified subscription"),
						Operation:   to.Ptr("DedicatedHsm_Update"),
						Provider:    to.Ptr("Microsoft HardwareSecurityModules"),
						Resource:    to.Ptr("Dedicated HSM"),
					},
					IsDataAction: to.Ptr("false"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedHsmOperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedHsmOperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedHsm_CreateOrUpdate(t *testing.T) {
	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new or update an existing dedicated HSM"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhardwaresecuritymodules.NewDedicatedHsmClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"hsm-group",
		"hsm1",
		armhardwaresecuritymodules.DedicatedHsm{
			Location: to.Ptr("westus"),
			SKU: &armhardwaresecuritymodules.SKU{
				Name: to.Ptr(armhardwaresecuritymodules.SKUNameSafeNetLunaNetworkHSMA790),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
			},
			Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
				NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							PrivateIPAddress: to.Ptr("1.0.0.1"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				StampID: to.Ptr("stamp01"),
			},
		},
		&armhardwaresecuritymodules.DedicatedHsmClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhardwaresecuritymodules.DedicatedHsm{
			Name:     to.Ptr("hsm1"),
			Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm1"),
			Location: to.Ptr("westus"),
			SKU: &armhardwaresecuritymodules.SKU{
				Name: to.Ptr(armhardwaresecuritymodules.SKUNameSafeNetLunaNetworkHSMA790),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
			},
			Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
				NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm_vnic"),
							PrivateIPAddress: to.Ptr("1.0.0.1"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
				StampID:           to.Ptr("stamp01"),
				StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedHsm) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedHsm)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new or update an existing payment HSM"},
	})
	client = armhardwaresecuritymodules.NewDedicatedHsmClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"hsm-group",
		"hsm1",
		armhardwaresecuritymodules.DedicatedHsm{
			Location: to.Ptr("westus"),
			SKU: &armhardwaresecuritymodules.SKU{
				Name: to.Ptr(armhardwaresecuritymodules.SKUNamePayShield10KLMK1CPS60),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
			},
			Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
				NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							PrivateIPAddress: to.Ptr("1.0.0.1"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				StampID: to.Ptr("stamp01"),
			},
		},
		&armhardwaresecuritymodules.DedicatedHsmClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_CreateOrUpdate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhardwaresecuritymodules.DedicatedHsm{
			Name:     to.Ptr("hsm1"),
			Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm1"),
			Location: to.Ptr("westus"),
			SKU: &armhardwaresecuritymodules.SKU{
				Name: to.Ptr(armhardwaresecuritymodules.SKUNamePayShield10KLMK1CPS60),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
			},
			Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
				ManagementNetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm1_HSMMgmtNic"),
							PrivateIPAddress: to.Ptr("1.0.0.2"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm1_HSMHost1Nic"),
							PrivateIPAddress: to.Ptr("1.0.0.1"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
				StampID:           to.Ptr("stamp01"),
				StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
			},
			SystemData: &armhardwaresecuritymodules.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedHsm) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedHsm)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_CreateOrUpdate_WithManagementProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new or update an existing payment HSM with management profile"},
	})
	client = armhardwaresecuritymodules.NewDedicatedHsmClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"hsm-group",
		"hsm1",
		armhardwaresecuritymodules.DedicatedHsm{
			Location: to.Ptr("westus"),
			SKU: &armhardwaresecuritymodules.SKU{
				Name: to.Ptr(armhardwaresecuritymodules.SKUNamePayShield10KLMK1CPS60),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
			},
			Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
				ManagementNetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							PrivateIPAddress: to.Ptr("1.0.0.2"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							PrivateIPAddress: to.Ptr("1.0.0.1"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				StampID: to.Ptr("stamp01"),
			},
		},
		&armhardwaresecuritymodules.DedicatedHsmClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_CreateOrUpdate_WithManagementProfile.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_CreateOrUpdate_WithManagementProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhardwaresecuritymodules.DedicatedHsm{
			Name:     to.Ptr("hsm1"),
			Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm1"),
			Location: to.Ptr("westus"),
			SKU: &armhardwaresecuritymodules.SKU{
				Name: to.Ptr(armhardwaresecuritymodules.SKUNamePayShield10KLMK1CPS60),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
			},
			Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
				ManagementNetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm1_HSMMgmtNic"),
							PrivateIPAddress: to.Ptr("1.0.0.2"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm1_HSMHost1Nic"),
							PrivateIPAddress: to.Ptr("1.0.0.1"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
				StampID:           to.Ptr("stamp01"),
				StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
			},
			SystemData: &armhardwaresecuritymodules.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedHsm) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedHsm)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_CreateOrUpdate_WithManagementProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedHsm_Update(t *testing.T) {
	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an existing dedicated HSM"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhardwaresecuritymodules.NewDedicatedHsmClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"hsm-group",
		"hsm1",
		armhardwaresecuritymodules.DedicatedHsmPatchParameters{
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
				"Slice":       to.Ptr("A"),
			},
		},
		&armhardwaresecuritymodules.DedicatedHsmClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhardwaresecuritymodules.DedicatedHsm{
			Name:     to.Ptr("hsm1"),
			Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm1"),
			Location: to.Ptr("westus"),
			SKU: &armhardwaresecuritymodules.SKU{
				Name: to.Ptr(armhardwaresecuritymodules.SKUNameSafeNetLunaNetworkHSMA790),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
				"Slice":       to.Ptr("A"),
			},
			Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
				NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm_vnic"),
							PrivateIPAddress: to.Ptr("1.0.0.1"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
				StampID:           to.Ptr("stamp01"),
				StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedHsm) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedHsm)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an existing payment HSM"},
	})
	client = armhardwaresecuritymodules.NewDedicatedHsmClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"hsm-group",
		"hsm1",
		armhardwaresecuritymodules.DedicatedHsmPatchParameters{
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
				"Slice":       to.Ptr("A"),
			},
		},
		&armhardwaresecuritymodules.DedicatedHsmClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_Update.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhardwaresecuritymodules.DedicatedHsm{
			Name:     to.Ptr("hsm1"),
			Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm1"),
			Location: to.Ptr("westus"),
			SKU: &armhardwaresecuritymodules.SKU{
				Name: to.Ptr(armhardwaresecuritymodules.SKUNamePayShield10KLMK1CPS60),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
				"Slice":       to.Ptr("A"),
			},
			Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
				ManagementNetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm1_HSMMgmtNic"),
							PrivateIPAddress: to.Ptr("1.0.0.2"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm1_HSMHost1Nic"),
							PrivateIPAddress: to.Ptr("1.0.0.1"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
				StampID:           to.Ptr("stamp01"),
				StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
			},
			SystemData: &armhardwaresecuritymodules.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedHsm) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedHsm)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedHsm_Delete(t *testing.T) {
	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a dedicated HSM"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhardwaresecuritymodules.NewDedicatedHsmClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"hsm-group",
		"hsm1",
		&armhardwaresecuritymodules.DedicatedHsmClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_Delete.json: %v", err)
	}
}

func TestDedicatedHsm_Get(t *testing.T) {
	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a dedicated HSM"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhardwaresecuritymodules.NewDedicatedHsmClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"hsm-group",
		"hsm1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhardwaresecuritymodules.DedicatedHsm{
			Name:     to.Ptr("hsm1"),
			Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm1"),
			Location: to.Ptr("westus"),
			SKU: &armhardwaresecuritymodules.SKU{
				Name: to.Ptr(armhardwaresecuritymodules.SKUNameSafeNetLunaNetworkHSMA790),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
				"Slice":       to.Ptr("A"),
			},
			Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
				NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm_vnic"),
							PrivateIPAddress: to.Ptr("1.0.0.1"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
				StampID:           to.Ptr("stamp01"),
				StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedHsm) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedHsm)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a payment HSM"},
	})
	client = armhardwaresecuritymodules.NewDedicatedHsmClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.Get(ctx,
		"hsm-group",
		"hsm1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhardwaresecuritymodules.DedicatedHsm{
			Name:     to.Ptr("hsm1"),
			Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm1"),
			Location: to.Ptr("westus"),
			SKU: &armhardwaresecuritymodules.SKU{
				Name: to.Ptr(armhardwaresecuritymodules.SKUNamePayShield10KLMK1CPS60),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
				"Slice":       to.Ptr("A"),
			},
			Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
				ManagementNetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm1_HSMMgmtNic"),
							PrivateIPAddress: to.Ptr("1.0.0.2"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm1_HSMHost1Nic"),
							PrivateIPAddress: to.Ptr("1.0.0.1"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
				StampID:           to.Ptr("stamp01"),
				StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
			},
			SystemData: &armhardwaresecuritymodules.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedHsm) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedHsm)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_Get_With_2018-10-31Preview_Version.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a payment HSM with 2018-10-31Preview api version"},
	})
	client = armhardwaresecuritymodules.NewDedicatedHsmClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.Get(ctx,
		"hsm-group",
		"hsm1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_Get_With_2018-10-31Preview_Version.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhardwaresecuritymodules.DedicatedHsm{
			Name:     to.Ptr("hsm1"),
			Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm1"),
			Location: to.Ptr("westus"),
			SKU: &armhardwaresecuritymodules.SKU{
				Name: to.Ptr(armhardwaresecuritymodules.SKUNamePayShield10KLMK1CPS60),
			},
			Tags: map[string]*string{
				"Dept":        to.Ptr("hsm"),
				"Environment": to.Ptr("dogfood"),
				"Slice":       to.Ptr("A"),
			},
			Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
				NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
					NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
						{
							ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm1_HSMHost1Nic"),
							PrivateIPAddress: to.Ptr("1.0.0.1"),
						}},
					Subnet: &armhardwaresecuritymodules.APIEntityReference{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
					},
				},
				ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
				StampID:           to.Ptr("stamp01"),
				StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedHsm) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedHsm)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_Get_With_2018-10-31Preview_Version.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedHsm_ListByResourceGroup(t *testing.T) {
	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List dedicated HSM devices in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhardwaresecuritymodules.NewDedicatedHsmClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("hsm-group",
		&armhardwaresecuritymodules.DedicatedHsmClientListByResourceGroupOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhardwaresecuritymodules.DedicatedHsmListResult{
			Value: []*armhardwaresecuritymodules.DedicatedHsm{
				{
					Name:     to.Ptr("hsm1"),
					Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm1"),
					Location: to.Ptr("westus"),
					SKU: &armhardwaresecuritymodules.SKU{
						Name: to.Ptr(armhardwaresecuritymodules.SKUNameSafeNetLunaNetworkHSMA790),
					},
					Tags: map[string]*string{
						"Dept":        to.Ptr("hsm"),
						"Environment": to.Ptr("dogfood"),
						"Slice":       to.Ptr("A"),
					},
					Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
						NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
							NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
								{
									ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm_vnic"),
									PrivateIPAddress: to.Ptr("1.0.0.1"),
								}},
							Subnet: &armhardwaresecuritymodules.APIEntityReference{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
							},
						},
						ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
						StampID:           to.Ptr("stamp01"),
						StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
					},
				},
				{
					Name:     to.Ptr("hsm1"),
					Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm2"),
					Location: to.Ptr("westus"),
					SKU: &armhardwaresecuritymodules.SKU{
						Name: to.Ptr(armhardwaresecuritymodules.SKUNameSafeNetLunaNetworkHSMA790),
					},
					Tags: map[string]*string{
						"Dept":        to.Ptr("hsm"),
						"Environment": to.Ptr("dogfood"),
						"Slice":       to.Ptr("B"),
					},
					Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
						NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
							NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
								{
									ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm_vnic"),
									PrivateIPAddress: to.Ptr("1.0.0.2"),
								}},
							Subnet: &armhardwaresecuritymodules.APIEntityReference{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
							},
						},
						ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
						StampID:           to.Ptr("stamp01"),
						StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedHsmListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedHsmListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List dedicated HSM devices in a resource group including payment HSM"},
	})
	client = armhardwaresecuritymodules.NewDedicatedHsmClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.ListByResourceGroup("hsm-group",
		&armhardwaresecuritymodules.DedicatedHsmClientListByResourceGroupOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhardwaresecuritymodules.DedicatedHsmListResult{
			Value: []*armhardwaresecuritymodules.DedicatedHsm{
				{
					Name:     to.Ptr("hsm1"),
					Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm1"),
					Location: to.Ptr("westus"),
					SKU: &armhardwaresecuritymodules.SKU{
						Name: to.Ptr(armhardwaresecuritymodules.SKUNamePayShield10KLMK1CPS60),
					},
					Tags: map[string]*string{
						"Dept":        to.Ptr("hsm"),
						"Environment": to.Ptr("dogfood"),
						"Slice":       to.Ptr("A"),
					},
					Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
						ManagementNetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
							NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
								{
									ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm1_HSMMgmtNic"),
									PrivateIPAddress: to.Ptr("1.0.0.2"),
								}},
							Subnet: &armhardwaresecuritymodules.APIEntityReference{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
							},
						},
						NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
							NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
								{
									ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm1_HSMHost1Nic"),
									PrivateIPAddress: to.Ptr("1.0.0.1"),
								}},
							Subnet: &armhardwaresecuritymodules.APIEntityReference{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
							},
						},
						ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
						StampID:           to.Ptr("stamp01"),
						StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
					},
					SystemData: &armhardwaresecuritymodules.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
					},
				},
				{
					Name:     to.Ptr("hsm2"),
					Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm2"),
					Location: to.Ptr("westus"),
					SKU: &armhardwaresecuritymodules.SKU{
						Name: to.Ptr(armhardwaresecuritymodules.SKUNamePayShield10KLMK1CPS60),
					},
					Tags: map[string]*string{
						"Dept":        to.Ptr("hsm"),
						"Environment": to.Ptr("dogfood"),
						"Slice":       to.Ptr("B"),
					},
					Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
						ManagementNetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
							NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
								{
									ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm2_HSMMgmtNic"),
									PrivateIPAddress: to.Ptr("1.0.0.4"),
								}},
							Subnet: &armhardwaresecuritymodules.APIEntityReference{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
							},
						},
						NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
							NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
								{
									ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm2_HSMHost1Nic"),
									PrivateIPAddress: to.Ptr("1.0.0.3"),
								}},
							Subnet: &armhardwaresecuritymodules.APIEntityReference{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
							},
						},
						ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
						StampID:           to.Ptr("stamp01"),
						StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
					},
					SystemData: &armhardwaresecuritymodules.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedHsmListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedHsmListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedHsm_ListBySubscription(t *testing.T) {
	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List dedicated HSM devices in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhardwaresecuritymodules.NewDedicatedHsmClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(&armhardwaresecuritymodules.DedicatedHsmClientListBySubscriptionOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhardwaresecuritymodules.DedicatedHsmListResult{
			Value: []*armhardwaresecuritymodules.DedicatedHsm{
				{
					Name:     to.Ptr("hsm1"),
					Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm1"),
					Location: to.Ptr("westus"),
					SKU: &armhardwaresecuritymodules.SKU{
						Name: to.Ptr(armhardwaresecuritymodules.SKUNameSafeNetLunaNetworkHSMA790),
					},
					Tags: map[string]*string{
						"Dept":        to.Ptr("hsm"),
						"Environment": to.Ptr("dogfood"),
						"Slice":       to.Ptr("A"),
					},
					Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
						NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
							NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
								{
									ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm_vnic"),
									PrivateIPAddress: to.Ptr("1.0.0.1"),
								}},
							Subnet: &armhardwaresecuritymodules.APIEntityReference{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
							},
						},
						ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
						StampID:           to.Ptr("stamp01"),
						StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
					},
				},
				{
					Name:     to.Ptr("hsm1"),
					Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm2"),
					Location: to.Ptr("westus"),
					SKU: &armhardwaresecuritymodules.SKU{
						Name: to.Ptr(armhardwaresecuritymodules.SKUNameSafeNetLunaNetworkHSMA790),
					},
					Tags: map[string]*string{
						"Dept":        to.Ptr("hsm"),
						"Environment": to.Ptr("dogfood"),
						"Slice":       to.Ptr("B"),
					},
					Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
						NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
							NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
								{
									ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm_vnic"),
									PrivateIPAddress: to.Ptr("1.0.0.2"),
								}},
							Subnet: &armhardwaresecuritymodules.APIEntityReference{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
							},
						},
						ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
						StampID:           to.Ptr("stamp01"),
						StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedHsmListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedHsmListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/DedicatedHsm_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List dedicated HSM devices in a subscription including payment HSM"},
	})
	client = armhardwaresecuritymodules.NewDedicatedHsmClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.ListBySubscription(&armhardwaresecuritymodules.DedicatedHsmClientListBySubscriptionOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhardwaresecuritymodules.DedicatedHsmListResult{
			Value: []*armhardwaresecuritymodules.DedicatedHsm{
				{
					Name:     to.Ptr("hsm1"),
					Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm1"),
					Location: to.Ptr("westus"),
					SKU: &armhardwaresecuritymodules.SKU{
						Name: to.Ptr(armhardwaresecuritymodules.SKUNamePayShield10KLMK1CPS60),
					},
					Tags: map[string]*string{
						"Dept":        to.Ptr("hsm1"),
						"Environment": to.Ptr("dogfood"),
						"Slice":       to.Ptr("A"),
					},
					Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
						ManagementNetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
							NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
								{
									ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm1_HSMMgmtNic"),
									PrivateIPAddress: to.Ptr("1.0.0.2"),
								}},
							Subnet: &armhardwaresecuritymodules.APIEntityReference{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
							},
						},
						NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
							NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
								{
									ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm1_HSMHost1Nic"),
									PrivateIPAddress: to.Ptr("1.0.0.1"),
								}},
							Subnet: &armhardwaresecuritymodules.APIEntityReference{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
							},
						},
						ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
						StampID:           to.Ptr("stamp01"),
						StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
					},
					SystemData: &armhardwaresecuritymodules.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
					},
				},
				{
					Name:     to.Ptr("hsm2"),
					Type:     to.Ptr("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm2"),
					Location: to.Ptr("westus"),
					SKU: &armhardwaresecuritymodules.SKU{
						Name: to.Ptr(armhardwaresecuritymodules.SKUNamePayShield10KLMK1CPS60),
					},
					Tags: map[string]*string{
						"Dept":        to.Ptr("hsm"),
						"Environment": to.Ptr("dogfood"),
						"Slice":       to.Ptr("B"),
					},
					Properties: &armhardwaresecuritymodules.DedicatedHsmProperties{
						ManagementNetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
							NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
								{
									ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm2_HSMMgmtNic"),
									PrivateIPAddress: to.Ptr("1.0.0.4"),
								}},
							Subnet: &armhardwaresecuritymodules.APIEntityReference{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
							},
						},
						NetworkProfile: &armhardwaresecuritymodules.NetworkProfile{
							NetworkInterfaces: []*armhardwaresecuritymodules.NetworkInterface{
								{
									ID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/networkInterfaces/hsm2_HSMHost1Nic"),
									PrivateIPAddress: to.Ptr("1.0.0.3"),
								}},
							Subnet: &armhardwaresecuritymodules.APIEntityReference{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/hsm-group/providers/Microsoft.Network/virtualNetworks/stamp01/subnets/stamp01"),
							},
						},
						ProvisioningState: to.Ptr(armhardwaresecuritymodules.JSONWebKeyTypeSucceeded),
						StampID:           to.Ptr("stamp01"),
						StatusMessage:     to.Ptr("DedicatedHsm device is functional."),
					},
					SystemData: &armhardwaresecuritymodules.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T12:00:00.0000000Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armhardwaresecuritymodules.IdentityTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedHsmListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedHsmListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/PaymentHsm_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedHsm_ListOutboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/GetOutboundNetworkDependenciesEndpointsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List OutboundNetworkDependenciesEndpoints by Managed Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhardwaresecuritymodules.NewDedicatedHsmClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListOutboundNetworkDependenciesEndpoints("hsm-group",
		"hsm1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/GetOutboundNetworkDependenciesEndpointsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhardwaresecuritymodules.OutboundEnvironmentEndpointCollection{
			Value: []*armhardwaresecuritymodules.OutboundEnvironmentEndpoint{},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OutboundEnvironmentEndpointCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OutboundEnvironmentEndpointCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/hardwaresecuritymodules/resource-manager/Microsoft.HardwareSecurityModules/stable/2021-11-30/examples/GetOutboundNetworkDependenciesEndpointsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
