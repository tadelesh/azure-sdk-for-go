//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatalakestore

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestAccounts_List(t *testing.T) {
	// From example Lists the Data Lake Store accounts within the subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List(&AccountsListOptions{Filter: to.StringPtr("test_filter"),
		Top:     to.Int32Ptr(1),
		Skip:    to.Int32Ptr(1),
		Select:  to.StringPtr("test_select"),
		Orderby: to.StringPtr("test_orderby"),
		Count:   to.BoolPtr(false),
	})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataLakeStoreAccountBasic.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataLakeStoreAccountBasic.ID should not be nil!")
			}
		}
	}
}

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example Lists the Data Lake Store accounts within a specific resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByResourceGroup("contosorg",
		&AccountsListByResourceGroupOptions{Filter: to.StringPtr("test_filter"),
			Top:     to.Int32Ptr(1),
			Skip:    to.Int32Ptr(1),
			Select:  to.StringPtr("test_select"),
			Orderby: to.StringPtr("test_orderby"),
			Count:   to.BoolPtr(false),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataLakeStoreAccountBasic.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataLakeStoreAccountBasic.ID should not be nil!")
			}
		}
	}
}

func TestAccounts_Create(t *testing.T) {
	// From example Creates the specified Data Lake Store account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginCreate(ctx,
		"contosorg",
		"contosoadla",
		CreateDataLakeStoreAccountParameters{
			Identity: &EncryptionIdentity{
				Type: to.StringPtr("SystemAssigned"),
			},
			Location: to.StringPtr("eastus2"),
			Properties: &CreateDataLakeStoreAccountProperties{
				DefaultGroup: to.StringPtr("test_default_group"),
				EncryptionConfig: &EncryptionConfig{
					Type: EncryptionConfigTypeUserManaged.ToPtr(),
					KeyVaultMetaInfo: &KeyVaultMetaInfo{
						EncryptionKeyName:    to.StringPtr("test_encryption_key_name"),
						EncryptionKeyVersion: to.StringPtr("encryption_key_version"),
						KeyVaultResourceID:   to.StringPtr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					},
				},
				EncryptionState:       EncryptionStateEnabled.ToPtr(),
				FirewallAllowAzureIPs: FirewallAllowAzureIPsStateEnabled.ToPtr(),
				FirewallRules: []*CreateFirewallRuleWithAccountParameters{
					{
						Name: to.StringPtr("test_rule"),
						Properties: &CreateOrUpdateFirewallRuleProperties{
							EndIPAddress:   to.StringPtr("2.2.2.2"),
							StartIPAddress: to.StringPtr("1.1.1.1"),
						},
					}},
				FirewallState:          FirewallStateEnabled.ToPtr(),
				NewTier:                TierTypeConsumption.ToPtr(),
				TrustedIDProviderState: TrustedIDProviderStateEnabled.ToPtr(),
				TrustedIDProviders: []*CreateTrustedIDProviderWithAccountParameters{
					{
						Name: to.StringPtr("test_trusted_id_provider_name"),
						Properties: &CreateOrUpdateTrustedIDProviderProperties{
							IDProvider: to.StringPtr("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1"),
						},
					}},
			},
			Tags: map[string]*string{
				"test_key": to.StringPtr("test_value"),
			},
		},
		&AccountsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DataLakeStoreAccount.ID == nil {
		t.Fatal("DataLakeStoreAccount.ID should not be nil!")
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example Gets the specified Data Lake Store account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"contosorg",
		"contosoadla",
		&AccountsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataLakeStoreAccount.ID == nil {
		t.Fatal("DataLakeStoreAccount.ID should not be nil!")
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example Updates the specified Data Lake Store account information
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginUpdate(ctx,
		"contosorg",
		"contosoadla",
		UpdateDataLakeStoreAccountParameters{
			Properties: &UpdateDataLakeStoreAccountProperties{
				DefaultGroup: to.StringPtr("test_default_group"),
				EncryptionConfig: &UpdateEncryptionConfig{
					KeyVaultMetaInfo: &UpdateKeyVaultMetaInfo{
						EncryptionKeyVersion: to.StringPtr("encryption_key_version"),
					},
				},
				FirewallAllowAzureIPs:  FirewallAllowAzureIPsStateEnabled.ToPtr(),
				FirewallState:          FirewallStateEnabled.ToPtr(),
				NewTier:                TierTypeConsumption.ToPtr(),
				TrustedIDProviderState: TrustedIDProviderStateEnabled.ToPtr(),
			},
			Tags: map[string]*string{
				"test_key": to.StringPtr("test_value"),
			},
		},
		&AccountsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DataLakeStoreAccount.ID == nil {
		t.Fatal("DataLakeStoreAccount.ID should not be nil!")
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example Deletes the specified Data Lake Store account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDelete(ctx,
		"contosorg",
		"contosoadla",
		&AccountsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccounts_EnableKeyVault(t *testing.T) {
	// From example Attempts to enable a user managed Key Vault for encryption of the specified Data Lake Store account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.EnableKeyVault(ctx,
		"contosorg",
		"contosoadla",
		&AccountsEnableKeyVaultOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccounts_CheckNameAvailability(t *testing.T) {
	// From example Checks whether the specified account name is available or taken
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.CheckNameAvailability(ctx,
		"EastUS2",
		CheckNameAvailabilityParameters{
			Name: to.StringPtr("contosoadla"),
			Type: CheckNameAvailabilityParametersTypeMicrosoftDataLakeStoreAccounts.ToPtr(),
		},
		&AccountsCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestFirewallRules_ListByAccount(t *testing.T) {
	// From example Lists the Data Lake Store firewall rules within the specified Data Lake Store account.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByAccount("contosorg",
		"contosoadla",
		&FirewallRulesListByAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FirewallRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FirewallRule.ID should not be nil!")
			}
		}
	}
}

func TestFirewallRules_CreateOrUpdate(t *testing.T) {
	// From example Creates or updates the specified firewall rule. During update, the firewall rule with the specified name will be replaced with this new firewall rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"contosorg",
		"contosoadla",
		"test_rule",
		CreateOrUpdateFirewallRuleParameters{
			Properties: &CreateOrUpdateFirewallRuleProperties{
				EndIPAddress:   to.StringPtr("2.2.2.2"),
				StartIPAddress: to.StringPtr("1.1.1.1"),
			},
		},
		&FirewallRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallRule.ID == nil {
		t.Fatal("FirewallRule.ID should not be nil!")
	}
}

func TestFirewallRules_Get(t *testing.T) {
	// From example Gets the specified Data Lake Store firewall rule.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"contosorg",
		"contosoadla",
		"test_rule",
		&FirewallRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallRule.ID == nil {
		t.Fatal("FirewallRule.ID should not be nil!")
	}
}

func TestFirewallRules_Update(t *testing.T) {
	// From example Updates the specified firewall rule.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Update(ctx,
		"contosorg",
		"contosoadla",
		"test_rule",
		&FirewallRulesUpdateOptions{Parameters: &UpdateFirewallRuleParameters{
			Properties: &UpdateFirewallRuleProperties{
				EndIPAddress:   to.StringPtr("2.2.2.2"),
				StartIPAddress: to.StringPtr("1.1.1.1"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallRule.ID == nil {
		t.Fatal("FirewallRule.ID should not be nil!")
	}
}

func TestFirewallRules_Delete(t *testing.T) {
	// From example Deletes the specified firewall rule from the specified Data Lake Store account.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"contosorg",
		"contosoadla",
		"test_rule",
		&FirewallRulesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualNetworkRules_ListByAccount(t *testing.T) {
	// From example Lists the Data Lake Store virtual network rules within the specified Data Lake Store account.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkRulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByAccount("contosorg",
		"contosoadla",
		&VirtualNetworkRulesListByAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetworkRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetworkRule.ID should not be nil!")
			}
		}
	}
}

func TestVirtualNetworkRules_CreateOrUpdate(t *testing.T) {
	// From example Creates or updates the specified virtual network rule. During update, the virtual network rule with the specified name will be replaced with this new virtual network rule.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkRulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"contosorg",
		"contosoadla",
		"test_virtual_network_rules_name",
		CreateOrUpdateVirtualNetworkRuleParameters{
			Properties: &CreateOrUpdateVirtualNetworkRuleProperties{
				SubnetID: to.StringPtr("test_subnetId"),
			},
		},
		&VirtualNetworkRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkRule.ID == nil {
		t.Fatal("VirtualNetworkRule.ID should not be nil!")
	}
}

func TestVirtualNetworkRules_Get(t *testing.T) {
	// From example Gets the specified Data Lake Store virtual network rule.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkRulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"contosorg",
		"contosoadla",
		"test_virtual_network_rules_name",
		&VirtualNetworkRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkRule.ID == nil {
		t.Fatal("VirtualNetworkRule.ID should not be nil!")
	}
}

func TestVirtualNetworkRules_Update(t *testing.T) {
	// From example Updates the specified virtual network rule.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkRulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Update(ctx,
		"contosorg",
		"contosoadla",
		"test_virtual_network_rules_name",
		&VirtualNetworkRulesUpdateOptions{Parameters: &UpdateVirtualNetworkRuleParameters{
			Properties: &UpdateVirtualNetworkRuleProperties{
				SubnetID: to.StringPtr("test_subnetId"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkRule.ID == nil {
		t.Fatal("VirtualNetworkRule.ID should not be nil!")
	}
}

func TestVirtualNetworkRules_Delete(t *testing.T) {
	// From example Deletes the specified virtual network rule from the specified Data Lake Store account.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkRulesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"contosorg",
		"contosoadla",
		"test_virtual_network_rules_name",
		&VirtualNetworkRulesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTrustedIdProviders_ListByAccount(t *testing.T) {
	// From example Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTrustedIDProvidersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByAccount("contosorg",
		"contosoadla",
		&TrustedIDProvidersListByAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("TrustedIDProvider.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("TrustedIDProvider.ID should not be nil!")
			}
		}
	}
}

func TestTrustedIdProviders_CreateOrUpdate(t *testing.T) {
	// From example Creates or updates the specified trusted identity provider. During update, the trusted identity provider with the specified name will be replaced with this new provider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTrustedIDProvidersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"contosorg",
		"contosoadla",
		"test_trusted_id_provider_name",
		CreateOrUpdateTrustedIDProviderParameters{
			Properties: &CreateOrUpdateTrustedIDProviderProperties{
				IDProvider: to.StringPtr("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1"),
			},
		},
		&TrustedIDProvidersCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TrustedIDProvider.ID == nil {
		t.Fatal("TrustedIDProvider.ID should not be nil!")
	}
}

func TestTrustedIdProviders_Get(t *testing.T) {
	// From example Gets the specified Data Lake Store trusted identity provider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTrustedIDProvidersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"contosorg",
		"contosoadla",
		"test_trusted_id_provider_name",
		&TrustedIDProvidersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TrustedIDProvider.ID == nil {
		t.Fatal("TrustedIDProvider.ID should not be nil!")
	}
}

func TestTrustedIdProviders_Update(t *testing.T) {
	// From example Updates the specified trusted identity provider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTrustedIDProvidersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Update(ctx,
		"contosorg",
		"contosoadla",
		"test_trusted_id_provider_name",
		&TrustedIDProvidersUpdateOptions{Parameters: &UpdateTrustedIDProviderParameters{
			Properties: &UpdateTrustedIDProviderProperties{
				IDProvider: to.StringPtr("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.TrustedIDProvider.ID == nil {
		t.Fatal("TrustedIDProvider.ID should not be nil!")
	}
}

func TestTrustedIdProviders_Delete(t *testing.T) {
	// From example Deletes the specified trusted identity provider from the specified Data Lake Store account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTrustedIDProvidersClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"contosorg",
		"contosoadla",
		"test_trusted_id_provider_name",
		&TrustedIDProvidersDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example Lists all of the available Data Lake Store REST API operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	_, err := client.List(ctx,
		&OperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLocations_GetCapability(t *testing.T) {
	// From example Gets subscription-level properties and limits for Data Lake Store specified by resource location
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocationsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetCapability(ctx,
		"EastUS2",
		&LocationsGetCapabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLocations_GetUsage(t *testing.T) {
	// From example UsageList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocationsClient(con,
		"{subscription-id}")
	_, err := client.GetUsage(ctx,
		"WestUS",
		&LocationsGetUsageOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
