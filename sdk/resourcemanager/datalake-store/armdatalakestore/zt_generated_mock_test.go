//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatalakestore_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datalake-store/armdatalakestore"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAccounts_List(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists the Data Lake Store accounts within the subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.List(&armdatalakestore.AccountsClientListOptions{Filter: to.Ptr("test_filter"),
		Top:     to.Ptr[int32](1),
		Skip:    to.Ptr[int32](1),
		Select:  to.Ptr("test_select"),
		Orderby: to.Ptr("test_orderby"),
		Count:   to.Ptr(false),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatalakestore.AccountListResult{
			Value: []*armdatalakestore.AccountBasic{
				{
					Name:     to.Ptr("contosoadla"),
					Type:     to.Ptr("test_type"),
					ID:       to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					Location: to.Ptr("eastus2"),
					Tags: map[string]*string{
						"test_key": to.Ptr("test_value"),
					},
					Properties: &armdatalakestore.AccountPropertiesBasic{
						AccountID:         to.Ptr("94f4bf5d-78a9-4c31-8aa7-b34d07bad898"),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
						Endpoint:          to.Ptr("testadlfs17607.azuredatalakestore.net"),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
						ProvisioningState: to.Ptr(armdatalakestore.DataLakeStoreAccountStatusSucceeded),
						State:             to.Ptr(armdatalakestore.DataLakeStoreAccountStateActive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists the Data Lake Store accounts within a specific resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByResourceGroup("contosorg",
		&armdatalakestore.AccountsClientListByResourceGroupOptions{Filter: to.Ptr("test_filter"),
			Top:     to.Ptr[int32](1),
			Skip:    to.Ptr[int32](1),
			Select:  to.Ptr("test_select"),
			Orderby: to.Ptr("test_orderby"),
			Count:   to.Ptr(false),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatalakestore.AccountListResult{
			Value: []*armdatalakestore.AccountBasic{
				{
					Name:     to.Ptr("contosoadla"),
					Type:     to.Ptr("test_type"),
					ID:       to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					Location: to.Ptr("eastus2"),
					Tags: map[string]*string{
						"test_key": to.Ptr("test_value"),
					},
					Properties: &armdatalakestore.AccountPropertiesBasic{
						AccountID:         to.Ptr("94f4bf5d-78a9-4c31-8aa7-b34d07bad898"),
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
						Endpoint:          to.Ptr("testadlfs17607.azuredatalakestore.net"),
						LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
						ProvisioningState: to.Ptr(armdatalakestore.DataLakeStoreAccountStatusSucceeded),
						State:             to.Ptr(armdatalakestore.DataLakeStoreAccountStateActive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Create(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates the specified Data Lake Store account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"contosorg",
		"contosoadla",
		armdatalakestore.CreateDataLakeStoreAccountParameters{
			Identity: &armdatalakestore.EncryptionIdentity{
				Type: to.Ptr("SystemAssigned"),
			},
			Location: to.Ptr("eastus2"),
			Properties: &armdatalakestore.CreateDataLakeStoreAccountProperties{
				DefaultGroup: to.Ptr("test_default_group"),
				EncryptionConfig: &armdatalakestore.EncryptionConfig{
					Type: to.Ptr(armdatalakestore.EncryptionConfigTypeUserManaged),
					KeyVaultMetaInfo: &armdatalakestore.KeyVaultMetaInfo{
						EncryptionKeyName:    to.Ptr("test_encryption_key_name"),
						EncryptionKeyVersion: to.Ptr("encryption_key_version"),
						KeyVaultResourceID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					},
				},
				EncryptionState:       to.Ptr(armdatalakestore.EncryptionStateEnabled),
				FirewallAllowAzureIPs: to.Ptr(armdatalakestore.FirewallAllowAzureIPsStateEnabled),
				FirewallRules: []*armdatalakestore.CreateFirewallRuleWithAccountParameters{
					{
						Name: to.Ptr("test_rule"),
						Properties: &armdatalakestore.CreateOrUpdateFirewallRuleProperties{
							EndIPAddress:   to.Ptr("2.2.2.2"),
							StartIPAddress: to.Ptr("1.1.1.1"),
						},
					}},
				FirewallState:          to.Ptr(armdatalakestore.FirewallStateEnabled),
				NewTier:                to.Ptr(armdatalakestore.TierTypeConsumption),
				TrustedIDProviderState: to.Ptr(armdatalakestore.TrustedIDProviderStateEnabled),
				TrustedIDProviders: []*armdatalakestore.CreateTrustedIDProviderWithAccountParameters{
					{
						Name: to.Ptr("test_trusted_id_provider_name"),
						Properties: &armdatalakestore.CreateOrUpdateTrustedIDProviderProperties{
							IDProvider: to.Ptr("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1"),
						},
					}},
			},
			Tags: map[string]*string{
				"test_key": to.Ptr("test_value"),
			},
		},
		&armdatalakestore.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.Account{
			Name:     to.Ptr("contosoadla"),
			Type:     to.Ptr("test_type"),
			ID:       to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Location: to.Ptr("eastus2"),
			Tags: map[string]*string{
				"test_key": to.Ptr("test_value"),
			},
			Identity: &armdatalakestore.EncryptionIdentity{
				Type:        to.Ptr("SystemAssigned"),
				PrincipalID: to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
				TenantID:    to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab346"),
			},
			Properties: &armdatalakestore.AccountProperties{
				AccountID:         to.Ptr("94f4bf5d-78a9-4c31-8aa7-b34d07bad898"),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
				Endpoint:          to.Ptr("testadlfs17607.azuredatalakestore.net"),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
				ProvisioningState: to.Ptr(armdatalakestore.DataLakeStoreAccountStatusSucceeded),
				State:             to.Ptr(armdatalakestore.DataLakeStoreAccountStateActive),
				CurrentTier:       to.Ptr(armdatalakestore.TierTypeConsumption),
				DefaultGroup:      to.Ptr("test_default_group"),
				EncryptionConfig: &armdatalakestore.EncryptionConfig{
					Type: to.Ptr(armdatalakestore.EncryptionConfigTypeUserManaged),
					KeyVaultMetaInfo: &armdatalakestore.KeyVaultMetaInfo{
						EncryptionKeyName:    to.Ptr("test_encryption_key_name"),
						EncryptionKeyVersion: to.Ptr("encryption_key_version"),
						KeyVaultResourceID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					},
				},
				EncryptionProvisioningState: to.Ptr(armdatalakestore.EncryptionProvisioningStateSucceeded),
				EncryptionState:             to.Ptr(armdatalakestore.EncryptionStateEnabled),
				FirewallAllowAzureIPs:       to.Ptr(armdatalakestore.FirewallAllowAzureIPsStateEnabled),
				FirewallRules: []*armdatalakestore.FirewallRule{
					{
						Name: to.Ptr("test_rule"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
						Properties: &armdatalakestore.FirewallRuleProperties{
							EndIPAddress:   to.Ptr("2.2.2.2"),
							StartIPAddress: to.Ptr("1.1.1.1"),
						},
					}},
				FirewallState:          to.Ptr(armdatalakestore.FirewallStateEnabled),
				NewTier:                to.Ptr(armdatalakestore.TierTypeConsumption),
				TrustedIDProviderState: to.Ptr(armdatalakestore.TrustedIDProviderStateEnabled),
				TrustedIDProviders: []*armdatalakestore.TrustedIDProvider{
					{
						Name: to.Ptr("test_trusted_id_provider_name"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
						Properties: &armdatalakestore.TrustedIDProviderProperties{
							IDProvider: to.Ptr("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1"),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the specified Data Lake Store account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"contosorg",
		"contosoadla",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.Account{
			Name:     to.Ptr("contosoadla"),
			Type:     to.Ptr("test_type"),
			ID:       to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Location: to.Ptr("eastus2"),
			Tags: map[string]*string{
				"test_key": to.Ptr("test_value"),
			},
			Identity: &armdatalakestore.EncryptionIdentity{
				Type:        to.Ptr("SystemAssigned"),
				PrincipalID: to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
				TenantID:    to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab346"),
			},
			Properties: &armdatalakestore.AccountProperties{
				AccountID:         to.Ptr("94f4bf5d-78a9-4c31-8aa7-b34d07bad898"),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
				Endpoint:          to.Ptr("testadlfs17607.azuredatalakestore.net"),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
				ProvisioningState: to.Ptr(armdatalakestore.DataLakeStoreAccountStatusSucceeded),
				State:             to.Ptr(armdatalakestore.DataLakeStoreAccountStateActive),
				CurrentTier:       to.Ptr(armdatalakestore.TierTypeConsumption),
				DefaultGroup:      to.Ptr("test_default_group"),
				EncryptionConfig: &armdatalakestore.EncryptionConfig{
					Type: to.Ptr(armdatalakestore.EncryptionConfigTypeUserManaged),
					KeyVaultMetaInfo: &armdatalakestore.KeyVaultMetaInfo{
						EncryptionKeyName:    to.Ptr("test_encryption_key_name"),
						EncryptionKeyVersion: to.Ptr("encryption_key_version"),
						KeyVaultResourceID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					},
				},
				EncryptionProvisioningState: to.Ptr(armdatalakestore.EncryptionProvisioningStateSucceeded),
				EncryptionState:             to.Ptr(armdatalakestore.EncryptionStateEnabled),
				FirewallAllowAzureIPs:       to.Ptr(armdatalakestore.FirewallAllowAzureIPsStateEnabled),
				FirewallRules: []*armdatalakestore.FirewallRule{
					{
						Name: to.Ptr("test_rule"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
						Properties: &armdatalakestore.FirewallRuleProperties{
							EndIPAddress:   to.Ptr("2.2.2.2"),
							StartIPAddress: to.Ptr("1.1.1.1"),
						},
					}},
				FirewallState:          to.Ptr(armdatalakestore.FirewallStateEnabled),
				NewTier:                to.Ptr(armdatalakestore.TierTypeConsumption),
				TrustedIDProviderState: to.Ptr(armdatalakestore.TrustedIDProviderStateEnabled),
				TrustedIDProviders: []*armdatalakestore.TrustedIDProvider{
					{
						Name: to.Ptr("test_trusted_id_provider_name"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
						Properties: &armdatalakestore.TrustedIDProviderProperties{
							IDProvider: to.Ptr("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1"),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates the specified Data Lake Store account information"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"contosorg",
		"contosoadla",
		armdatalakestore.UpdateDataLakeStoreAccountParameters{
			Properties: &armdatalakestore.UpdateDataLakeStoreAccountProperties{
				DefaultGroup: to.Ptr("test_default_group"),
				EncryptionConfig: &armdatalakestore.UpdateEncryptionConfig{
					KeyVaultMetaInfo: &armdatalakestore.UpdateKeyVaultMetaInfo{
						EncryptionKeyVersion: to.Ptr("encryption_key_version"),
					},
				},
				FirewallAllowAzureIPs:  to.Ptr(armdatalakestore.FirewallAllowAzureIPsStateEnabled),
				FirewallState:          to.Ptr(armdatalakestore.FirewallStateEnabled),
				NewTier:                to.Ptr(armdatalakestore.TierTypeConsumption),
				TrustedIDProviderState: to.Ptr(armdatalakestore.TrustedIDProviderStateEnabled),
			},
			Tags: map[string]*string{
				"test_key": to.Ptr("test_value"),
			},
		},
		&armdatalakestore.AccountsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.Account{
			Name:     to.Ptr("contosoadla"),
			Type:     to.Ptr("test_type"),
			ID:       to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Location: to.Ptr("eastus2"),
			Tags: map[string]*string{
				"test_key": to.Ptr("test_value"),
			},
			Identity: &armdatalakestore.EncryptionIdentity{
				Type:        to.Ptr("SystemAssigned"),
				PrincipalID: to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
				TenantID:    to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab346"),
			},
			Properties: &armdatalakestore.AccountProperties{
				AccountID:         to.Ptr("94f4bf5d-78a9-4c31-8aa7-b34d07bad898"),
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
				Endpoint:          to.Ptr("testadlfs17607.azuredatalakestore.net"),
				LastModifiedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-14T13:21:56.6819037-07:00"); return t }()),
				ProvisioningState: to.Ptr(armdatalakestore.DataLakeStoreAccountStatusSucceeded),
				State:             to.Ptr(armdatalakestore.DataLakeStoreAccountStateActive),
				CurrentTier:       to.Ptr(armdatalakestore.TierTypeConsumption),
				DefaultGroup:      to.Ptr("test_default_group"),
				EncryptionConfig: &armdatalakestore.EncryptionConfig{
					Type: to.Ptr(armdatalakestore.EncryptionConfigTypeUserManaged),
					KeyVaultMetaInfo: &armdatalakestore.KeyVaultMetaInfo{
						EncryptionKeyName:    to.Ptr("test_encryption_key_name"),
						EncryptionKeyVersion: to.Ptr("encryption_key_version"),
						KeyVaultResourceID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					},
				},
				EncryptionProvisioningState: to.Ptr(armdatalakestore.EncryptionProvisioningStateSucceeded),
				EncryptionState:             to.Ptr(armdatalakestore.EncryptionStateEnabled),
				FirewallAllowAzureIPs:       to.Ptr(armdatalakestore.FirewallAllowAzureIPsStateEnabled),
				FirewallRules: []*armdatalakestore.FirewallRule{
					{
						Name: to.Ptr("test_rule"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
						Properties: &armdatalakestore.FirewallRuleProperties{
							EndIPAddress:   to.Ptr("2.2.2.2"),
							StartIPAddress: to.Ptr("1.1.1.1"),
						},
					}},
				FirewallState:          to.Ptr(armdatalakestore.FirewallStateEnabled),
				NewTier:                to.Ptr(armdatalakestore.TierTypeConsumption),
				TrustedIDProviderState: to.Ptr(armdatalakestore.TrustedIDProviderStateEnabled),
				TrustedIDProviders: []*armdatalakestore.TrustedIDProvider{
					{
						Name: to.Ptr("test_trusted_id_provider_name"),
						Type: to.Ptr("test_type"),
						ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
						Properties: &armdatalakestore.TrustedIDProviderProperties{
							IDProvider: to.Ptr("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1"),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the specified Data Lake Store account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"contosorg",
		"contosoadla",
		&armdatalakestore.AccountsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Delete.json: %v", err)
	}
}

func TestAccounts_EnableKeyVault(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_EnableKeyVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Attempts to enable a user managed Key Vault for encryption of the specified Data Lake Store account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.EnableKeyVault(ctx,
		"contosorg",
		"contosoadla",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_EnableKeyVault.json: %v", err)
	}
}

func TestAccounts_CheckNameAvailability(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Checks whether the specified account name is available or taken"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"EastUS2",
		armdatalakestore.CheckNameAvailabilityParameters{
			Name: to.Ptr("contosoadla"),
			Type: to.Ptr(armdatalakestore.CheckNameAvailabilityParametersTypeMicrosoftDataLakeStoreAccounts),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.NameAvailabilityInformation{
			Message:       to.Ptr("An account named 'abc' already exists."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("AlreadyExists"),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailabilityInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailabilityInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_ListByAccount(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists the Data Lake Store firewall rules within the specified Data Lake Store account."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewFirewallRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByAccount("contosorg",
		"contosoadla",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatalakestore.FirewallRuleListResult{
			Value: []*armdatalakestore.FirewallRule{
				{
					Name: to.Ptr("test_rule"),
					Type: to.Ptr("test_type"),
					ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					Properties: &armdatalakestore.FirewallRuleProperties{
						EndIPAddress:   to.Ptr("2.2.2.2"),
						StartIPAddress: to.Ptr("1.1.1.1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FirewallRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FirewallRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_CreateOrUpdate(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates the specified firewall rule. During update, the firewall rule with the specified name will be replaced with this new firewall rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewFirewallRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"contosorg",
		"contosoadla",
		"test_rule",
		armdatalakestore.CreateOrUpdateFirewallRuleParameters{
			Properties: &armdatalakestore.CreateOrUpdateFirewallRuleProperties{
				EndIPAddress:   to.Ptr("2.2.2.2"),
				StartIPAddress: to.Ptr("1.1.1.1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.FirewallRule{
			Name: to.Ptr("test_rule"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakestore.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("2.2.2.2"),
				StartIPAddress: to.Ptr("1.1.1.1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_Get(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the specified Data Lake Store firewall rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewFirewallRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"contosorg",
		"contosoadla",
		"test_rule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.FirewallRule{
			Name: to.Ptr("test_rule"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakestore.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("2.2.2.2"),
				StartIPAddress: to.Ptr("1.1.1.1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_Update(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates the specified firewall rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewFirewallRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Update(ctx,
		"contosorg",
		"contosoadla",
		"test_rule",
		&armdatalakestore.FirewallRulesClientUpdateOptions{Parameters: &armdatalakestore.UpdateFirewallRuleParameters{
			Properties: &armdatalakestore.UpdateFirewallRuleProperties{
				EndIPAddress:   to.Ptr("2.2.2.2"),
				StartIPAddress: to.Ptr("1.1.1.1"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.FirewallRule{
			Name: to.Ptr("test_rule"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakestore.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("2.2.2.2"),
				StartIPAddress: to.Ptr("1.1.1.1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_Delete(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the specified firewall rule from the specified Data Lake Store account."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewFirewallRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"contosorg",
		"contosoadla",
		"test_rule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_Delete.json: %v", err)
	}
}

func TestVirtualNetworkRules_ListByAccount(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/VirtualNetworkRules_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists the Data Lake Store virtual network rules within the specified Data Lake Store account."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewVirtualNetworkRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByAccount("contosorg",
		"contosoadla",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/VirtualNetworkRules_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatalakestore.VirtualNetworkRuleListResult{
			Value: []*armdatalakestore.VirtualNetworkRule{
				{
					Name: to.Ptr("test_virtual_network_rules_name"),
					Type: to.Ptr("test_type"),
					ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					Properties: &armdatalakestore.VirtualNetworkRuleProperties{
						SubnetID: to.Ptr("test_subnetId"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/VirtualNetworkRules_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkRules_CreateOrUpdate(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/VirtualNetworkRules_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates the specified virtual network rule. During update, the virtual network rule with the specified name will be replaced with this new virtual network rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewVirtualNetworkRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"contosorg",
		"contosoadla",
		"test_virtual_network_rules_name",
		armdatalakestore.CreateOrUpdateVirtualNetworkRuleParameters{
			Properties: &armdatalakestore.CreateOrUpdateVirtualNetworkRuleProperties{
				SubnetID: to.Ptr("test_subnetId"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/VirtualNetworkRules_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.VirtualNetworkRule{
			Name: to.Ptr("test_virtual_network_rules_name"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakestore.VirtualNetworkRuleProperties{
				SubnetID: to.Ptr("test_subnetId"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkRule)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/VirtualNetworkRules_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkRules_Get(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/VirtualNetworkRules_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the specified Data Lake Store virtual network rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewVirtualNetworkRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"contosorg",
		"contosoadla",
		"test_virtual_network_rules_name",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/VirtualNetworkRules_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.VirtualNetworkRule{
			Name: to.Ptr("test_virtual_network_rules_name"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakestore.VirtualNetworkRuleProperties{
				SubnetID: to.Ptr("test_subnetId"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkRule)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/VirtualNetworkRules_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkRules_Update(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/VirtualNetworkRules_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates the specified virtual network rule."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewVirtualNetworkRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Update(ctx,
		"contosorg",
		"contosoadla",
		"test_virtual_network_rules_name",
		&armdatalakestore.VirtualNetworkRulesClientUpdateOptions{Parameters: &armdatalakestore.UpdateVirtualNetworkRuleParameters{
			Properties: &armdatalakestore.UpdateVirtualNetworkRuleProperties{
				SubnetID: to.Ptr("test_subnetId"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/VirtualNetworkRules_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.VirtualNetworkRule{
			Name: to.Ptr("test_virtual_network_rules_name"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakestore.VirtualNetworkRuleProperties{
				SubnetID: to.Ptr("test_subnetId"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkRule)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/VirtualNetworkRules_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkRules_Delete(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/VirtualNetworkRules_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the specified virtual network rule from the specified Data Lake Store account."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewVirtualNetworkRulesClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"contosorg",
		"contosoadla",
		"test_virtual_network_rules_name",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/VirtualNetworkRules_Delete.json: %v", err)
	}
}

func TestTrustedIDProviders_ListByAccount(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewTrustedIDProvidersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByAccount("contosorg",
		"contosoadla",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatalakestore.TrustedIDProviderListResult{
			Value: []*armdatalakestore.TrustedIDProvider{
				{
					Name: to.Ptr("test_trusted_id_provider_name"),
					Type: to.Ptr("test_type"),
					ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
					Properties: &armdatalakestore.TrustedIDProviderProperties{
						IDProvider: to.Ptr("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TrustedIDProviderListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TrustedIDProviderListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTrustedIDProviders_CreateOrUpdate(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates the specified trusted identity provider. During update, the trusted identity provider with the specified name will be replaced with this new provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewTrustedIDProvidersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"contosorg",
		"contosoadla",
		"test_trusted_id_provider_name",
		armdatalakestore.CreateOrUpdateTrustedIDProviderParameters{
			Properties: &armdatalakestore.CreateOrUpdateTrustedIDProviderProperties{
				IDProvider: to.Ptr("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.TrustedIDProvider{
			Name: to.Ptr("test_trusted_id_provider_name"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakestore.TrustedIDProviderProperties{
				IDProvider: to.Ptr("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TrustedIDProvider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TrustedIDProvider)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTrustedIDProviders_Get(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the specified Data Lake Store trusted identity provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewTrustedIDProvidersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"contosorg",
		"contosoadla",
		"test_trusted_id_provider_name",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.TrustedIDProvider{
			Name: to.Ptr("test_trusted_id_provider_name"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakestore.TrustedIDProviderProperties{
				IDProvider: to.Ptr("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TrustedIDProvider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TrustedIDProvider)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTrustedIDProviders_Update(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates the specified trusted identity provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewTrustedIDProvidersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Update(ctx,
		"contosorg",
		"contosoadla",
		"test_trusted_id_provider_name",
		&armdatalakestore.TrustedIDProvidersClientUpdateOptions{Parameters: &armdatalakestore.UpdateTrustedIDProviderParameters{
			Properties: &armdatalakestore.UpdateTrustedIDProviderProperties{
				IDProvider: to.Ptr("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.TrustedIDProvider{
			Name: to.Ptr("test_trusted_id_provider_name"),
			Type: to.Ptr("test_type"),
			ID:   to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
			Properties: &armdatalakestore.TrustedIDProviderProperties{
				IDProvider: to.Ptr("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TrustedIDProvider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TrustedIDProvider)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTrustedIDProviders_Delete(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the specified trusted identity provider from the specified Data Lake Store account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewTrustedIDProvidersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.Delete(ctx,
		"contosorg",
		"contosoadla",
		"test_trusted_id_provider_name",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_Delete.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all of the available Data Lake Store REST API operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewOperationsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Operations_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.OperationListResult{
			Value: []*armdatalakestore.Operation{
				{
					Name: to.Ptr("Microsoft.DataLakeStore/operations/read"),
					Display: &armdatalakestore.OperationDisplay{
						Description: to.Ptr("Get available operations of DataLakeStore."),
						Operation:   to.Ptr("Get Available Operations"),
						Provider:    to.Ptr("Microsoft DataLakeStore"),
						Resource:    to.Ptr("Available Operations"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_GetCapability(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Locations_GetCapability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets subscription-level properties and limits for Data Lake Store specified by resource location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewLocationsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.GetCapability(ctx,
		"EastUS2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Locations_GetCapability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatalakestore.CapabilityInformation{
			AccountCount:    to.Ptr[int32](100),
			MaxAccountCount: to.Ptr[int32](150),
			MigrationState:  to.Ptr(false),
			State:           to.Ptr(armdatalakestore.SubscriptionStateRegistered),
			SubscriptionID:  to.Ptr("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345"),
		}
		if !reflect.DeepEqual(exampleRes, res.CapabilityInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CapabilityInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Locations_GetCapability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_GetUsage(t *testing.T) {
	// From example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Locations_GetUsage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UsageList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatalakestore.NewLocationsClient("{subscription-id}", cred, &options)
	pager := client.GetUsage("WestUS",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Locations_GetUsage.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatalakestore.UsageListResult{
			Value: []*armdatalakestore.Usage{
				{
					Name: &armdatalakestore.UsageName{
						LocalizedValue: to.Ptr("Data Lake Store Accounts"),
						Value:          to.Ptr("DataLakeStoreAccounts"),
					},
					CurrentValue: to.Ptr[int32](69),
					ID:           to.Ptr("/subscriptions/0f936178-0d48-4777-a7ab-47860b604941/providers/Microsoft.DataLakeStore/locations/WestUS/usages/DataLakeStoreAccounts"),
					Limit:        to.Ptr[int32](-1),
					Unit:         to.Ptr(armdatalakestore.UsageUnitCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Locations_GetUsage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
