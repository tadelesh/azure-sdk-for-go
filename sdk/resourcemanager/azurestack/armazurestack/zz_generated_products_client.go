//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurestack

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ProductsClient contains the methods for the Products group.
// Don't use this type directly, use NewProductsClient() instead.
type ProductsClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewProductsClient creates a new instance of ProductsClient with the specified values.
// subscriptionID - Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms
// part of the URI for every service call.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewProductsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *ProductsClient {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := options.Endpoint
	if len(ep) == 0 {
		ep = arm.AzurePublicCloud
	}
	client := &ProductsClient{
		subscriptionID: subscriptionID,
		host:           string(ep),
		pl:             armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options),
	}
	return client
}

// Get - Returns the specified product.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroup - Name of the resource group.
// registrationName - Name of the Azure Stack registration.
// productName - Name of the product.
// options - ProductsClientGetOptions contains the optional parameters for the ProductsClient.Get method.
func (client *ProductsClient) Get(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientGetOptions) (ProductsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ProductsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ProductsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ProductsClient) getCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ProductsClient) getHandleResponse(resp *http.Response) (ProductsClientGetResponse, error) {
	result := ProductsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Product); err != nil {
		return ProductsClientGetResponse{}, err
	}
	return result, nil
}

// GetProduct - Returns the specified product.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroup - Name of the resource group.
// registrationName - Name of the Azure Stack registration.
// productName - Name of the product.
// options - ProductsClientGetProductOptions contains the optional parameters for the ProductsClient.GetProduct method.
func (client *ProductsClient) GetProduct(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientGetProductOptions) (ProductsClientGetProductResponse, error) {
	req, err := client.getProductCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsClientGetProductResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ProductsClientGetProductResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ProductsClientGetProductResponse{}, runtime.NewResponseError(resp)
	}
	return client.getProductHandleResponse(resp)
}

// getProductCreateRequest creates the GetProduct request.
func (client *ProductsClient) getProductCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientGetProductOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/getProduct"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.DeviceConfiguration != nil {
		return req, runtime.MarshalAsJSON(req, *options.DeviceConfiguration)
	}
	return req, nil
}

// getProductHandleResponse handles the GetProduct response.
func (client *ProductsClient) getProductHandleResponse(resp *http.Response) (ProductsClientGetProductResponse, error) {
	result := ProductsClientGetProductResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Product); err != nil {
		return ProductsClientGetProductResponse{}, err
	}
	return result, nil
}

// GetProducts - Returns a list of products.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroup - Name of the resource group.
// registrationName - Name of the Azure Stack registration.
// productName - Name of the product.
// options - ProductsClientGetProductsOptions contains the optional parameters for the ProductsClient.GetProducts method.
func (client *ProductsClient) GetProducts(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientGetProductsOptions) (ProductsClientGetProductsResponse, error) {
	req, err := client.getProductsCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsClientGetProductsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ProductsClientGetProductsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ProductsClientGetProductsResponse{}, runtime.NewResponseError(resp)
	}
	return client.getProductsHandleResponse(resp)
}

// getProductsCreateRequest creates the GetProducts request.
func (client *ProductsClient) getProductsCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientGetProductsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/getProducts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.DeviceConfiguration != nil {
		return req, runtime.MarshalAsJSON(req, *options.DeviceConfiguration)
	}
	return req, nil
}

// getProductsHandleResponse handles the GetProducts response.
func (client *ProductsClient) getProductsHandleResponse(resp *http.Response) (ProductsClientGetProductsResponse, error) {
	result := ProductsClientGetProductsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductList); err != nil {
		return ProductsClientGetProductsResponse{}, err
	}
	return result, nil
}

// List - Returns a list of products.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroup - Name of the resource group.
// registrationName - Name of the Azure Stack registration.
// options - ProductsClientListOptions contains the optional parameters for the ProductsClient.List method.
func (client *ProductsClient) List(resourceGroup string, registrationName string, options *ProductsClientListOptions) *ProductsClientListPager {
	return &ProductsClientListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, resourceGroup, registrationName, options)
		},
		advancer: func(ctx context.Context, resp ProductsClientListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ProductList.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *ProductsClient) listCreateRequest(ctx context.Context, resourceGroup string, registrationName string, options *ProductsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ProductsClient) listHandleResponse(resp *http.Response) (ProductsClientListResponse, error) {
	result := ProductsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductList); err != nil {
		return ProductsClientListResponse{}, err
	}
	return result, nil
}

// ListDetails - Returns the extended properties of a product.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroup - Name of the resource group.
// registrationName - Name of the Azure Stack registration.
// productName - Name of the product.
// options - ProductsClientListDetailsOptions contains the optional parameters for the ProductsClient.ListDetails method.
func (client *ProductsClient) ListDetails(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientListDetailsOptions) (ProductsClientListDetailsResponse, error) {
	req, err := client.listDetailsCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsClientListDetailsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ProductsClientListDetailsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ProductsClientListDetailsResponse{}, runtime.NewResponseError(resp)
	}
	return client.listDetailsHandleResponse(resp)
}

// listDetailsCreateRequest creates the ListDetails request.
func (client *ProductsClient) listDetailsCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientListDetailsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/listDetails"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listDetailsHandleResponse handles the ListDetails response.
func (client *ProductsClient) listDetailsHandleResponse(resp *http.Response) (ProductsClientListDetailsResponse, error) {
	result := ProductsClientListDetailsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExtendedProduct); err != nil {
		return ProductsClientListDetailsResponse{}, err
	}
	return result, nil
}

// UploadLog - Returns the specified product.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroup - Name of the resource group.
// registrationName - Name of the Azure Stack registration.
// productName - Name of the product.
// options - ProductsClientUploadLogOptions contains the optional parameters for the ProductsClient.UploadLog method.
func (client *ProductsClient) UploadLog(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientUploadLogOptions) (ProductsClientUploadLogResponse, error) {
	req, err := client.uploadLogCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsClientUploadLogResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ProductsClientUploadLogResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ProductsClientUploadLogResponse{}, runtime.NewResponseError(resp)
	}
	return client.uploadLogHandleResponse(resp)
}

// uploadLogCreateRequest creates the UploadLog request.
func (client *ProductsClient) uploadLogCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsClientUploadLogOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/uploadProductLog"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.MarketplaceProductLogUpdate != nil {
		return req, runtime.MarshalAsJSON(req, *options.MarketplaceProductLogUpdate)
	}
	return req, nil
}

// uploadLogHandleResponse handles the UploadLog response.
func (client *ProductsClient) uploadLogHandleResponse(resp *http.Response) (ProductsClientUploadLogResponse, error) {
	result := ProductsClientUploadLogResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductLog); err != nil {
		return ProductsClientUploadLogResponse{}, err
	}
	return result, nil
}
