//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurestack

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example Returns the list of supported REST operations.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestCloudManifestFile_List(t *testing.T) {
	// From example Returns the properties of a cloud specific manifest file with latest version.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCloudManifestFileClient(con)
	res, err := client.List(ctx,
		&CloudManifestFileListOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CloudManifestFileResponse.ID == nil {
		t.Fatal("CloudManifestFileResponse.ID should not be nil!")
	}
}

func TestCloudManifestFile_Get(t *testing.T) {
	// From example Returns the properties of a cloud specific manifest file.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCloudManifestFileClient(con)
	res, err := client.Get(ctx,
		"latest",
		&CloudManifestFileGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CloudManifestFileResponse.ID == nil {
		t.Fatal("CloudManifestFileResponse.ID should not be nil!")
	}
}

func TestCustomerSubscriptions_List(t *testing.T) {
	// From example Returns a list of products.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomerSubscriptionsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	pager := client.List("azurestack",
		"testregistration",
		&CustomerSubscriptionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CustomerSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CustomerSubscription.ID should not be nil!")
			}
		}
	}
}

func TestCustomerSubscriptions_Get(t *testing.T) {
	// From example Returns the specified product.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomerSubscriptionsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	res, err := client.Get(ctx,
		"azurestack",
		"testregistration",
		"E09A4E93-29A7-4EBA-A6D4-76202383F07F",
		&CustomerSubscriptionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CustomerSubscription.ID == nil {
		t.Fatal("CustomerSubscription.ID should not be nil!")
	}
}

func TestCustomerSubscriptions_Delete(t *testing.T) {
	// From example Deletes a customer subscription under a registration.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomerSubscriptionsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	_, err := client.Delete(ctx,
		"azurestack",
		"testregistration",
		"E09A4E93-29A7-4EBA-A6D4-76202383F07F",
		&CustomerSubscriptionsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCustomerSubscriptions_Create(t *testing.T) {
	// From example Creates a new customer subscription under a registration.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomerSubscriptionsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	res, err := client.Create(ctx,
		"azurestack",
		"testregistration",
		"E09A4E93-29A7-4EBA-A6D4-76202383F07F",
		CustomerSubscription{
			Properties: &CustomerSubscriptionProperties{
				TenantID: to.StringPtr("dbab3982-796f-4d03-9908-044c08aef8a2"),
			},
		},
		&CustomerSubscriptionsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CustomerSubscription.ID == nil {
		t.Fatal("CustomerSubscription.ID should not be nil!")
	}
}

func TestProducts_List(t *testing.T) {
	// From example Returns a list of products.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	pager := client.List("azurestack",
		"testregistration",
		&ProductsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Product.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Product.ID should not be nil!")
			}
		}
	}
}

func TestProducts_Get(t *testing.T) {
	// From example Returns the specified product.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	res, err := client.Get(ctx,
		"azurestack",
		"testregistration",
		"Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1",
		&ProductsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Product.ID == nil {
		t.Fatal("Product.ID should not be nil!")
	}
}

func TestProducts_ListDetails(t *testing.T) {
	// From example Returns the extended properties of a product.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	_, err := client.ListDetails(ctx,
		"azurestack",
		"testregistration",
		"Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1",
		&ProductsListDetailsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProducts_GetProducts(t *testing.T) {
	// From example Returns a list of products.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	_, err := client.GetProducts(ctx,
		"azurestack",
		"testregistration",
		"_all",
		&ProductsGetProductsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProducts_GetProduct(t *testing.T) {
	// From example Returns the specified product.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	res, err := client.GetProduct(ctx,
		"azurestack",
		"testregistration",
		"Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1",
		&ProductsGetProductOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Product.ID == nil {
		t.Fatal("Product.ID should not be nil!")
	}
}

func TestProducts_UploadLog(t *testing.T) {
	// From example Returns the specified product.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProductsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	res, err := client.UploadLog(ctx,
		"azurestack",
		"testregistration",
		"Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1",
		&ProductsUploadLogOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProductLog.ID == nil {
		t.Fatal("ProductLog.ID should not be nil!")
	}
}

func TestRegistrations_List(t *testing.T) {
	// From example Returns a list of all registrations.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	pager := client.List("azurestack",
		&RegistrationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Registration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Registration.ID should not be nil!")
			}
		}
	}
}

func TestRegistrations_ListBySubscription(t *testing.T) {
	// From example Returns a list of all registrations under current subscription.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	pager := client.ListBySubscription(&RegistrationsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Registration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Registration.ID should not be nil!")
			}
		}
	}
}

func TestRegistrations_Get(t *testing.T) {
	// From example Returns the properties of an Azure Stack registration.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	res, err := client.Get(ctx,
		"azurestack",
		"testregistration",
		&RegistrationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Registration.ID == nil {
		t.Fatal("Registration.ID should not be nil!")
	}
}

func TestRegistrations_Delete(t *testing.T) {
	// From example Delete the requested Azure Stack registration.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	_, err := client.Delete(ctx,
		"azurestack",
		"testregistration",
		&RegistrationsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRegistrations_CreateOrUpdate(t *testing.T) {
	// From example Create or update an Azure Stack registration.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	res, err := client.CreateOrUpdate(ctx,
		"azurestack",
		"testregistration",
		RegistrationParameter{
			Location: LocationGlobal.ToPtr(),
			Properties: &RegistrationParameterProperties{
				RegistrationToken: to.StringPtr("EyjIAWXSAw5nTw9KZWWiOiJeZxZlbg9wBwvUdCiSIM9iaMVjdeLkijoinwIzyJa2Ytgtowm2yy00OdG4lTlLyJmtztHjZGfJZTC0NZK1iIWiY2XvdWRJzCi6iJy5nDy0oDk1LTNHmWeTnDUwyS05oDI0LTrINzYwoGq5mjAzziIsim1HCmtldHBsYwnLu3LuZGljYXrpB25FBmfIbgVkIJp0CNvLLCJOYXJkd2FYzuLUZM8iOlt7IM51bunvcMVZiJoYlCjcaw9ZiJPBIjNkzDJHmda3yte5ndqZMdq4YmZkZmi5oDM3OTY3ZwNMIL0SIM5PyYI6WyJLZTy0ztJJMwZKy2m0OWNLODDLMwm2zTm0ymzKyjmWySisiJA3njlHmtdlY2q4NjRjnwFIZtC1YZi5ZGyZodM3Y2vjIl0siMnwDsi6wyi2oDUZoTbiY2RhNDa0ymrKoWe4YtK5otblzWrJzGyzNCISIjmYnzC4M2vmnZdIoDRKM2i5ytfkmJlhnDc1zdhLzWm1il0sim5HBwuiOijIqzF1MTvhmDIXmIIsimrpc2SiolsioWNlZjVhnZM1otQ0nDu3NmjlN2M3zmfjzmyZMTJhZtiiLcjLZjLmmZJhmWVhytG0NTu0OTqZNWu1Mda0MZbIYtfjyijdLCj1DWlKijoinwM5Mwu3NjytMju5Os00oTIwlWi0OdmTnGzHotiWm2RjyTCxIIwiBWvTb3J5ijPbijAYZDA3M2fjNzu0YTRMZTfhodkxzDnkogY5ZtAWzdyXIiwINZcWzThLnDQ4otrJndAzZGI5MGzlYtY1ZJA5ZdfiNMQIXX1DlcJpC3n1zxiiOijZb21lB25LIIWIdmVyC2LVbiI6IJeuMcJ9"),
			},
		},
		&RegistrationsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Registration.ID == nil {
		t.Fatal("Registration.ID should not be nil!")
	}
}

func TestRegistrations_Update(t *testing.T) {
	// From example Patch an Azure Stack registration.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	res, err := client.Update(ctx,
		"azurestack",
		"testregistration",
		RegistrationParameter{
			Location: LocationGlobal.ToPtr(),
			Properties: &RegistrationParameterProperties{
				RegistrationToken: to.StringPtr("EyjIAWXSAw5nTw9KZWWiOiJeZxZlbg9wBwvUdCiSIM9iaMVjdeLkijoinwIzyJa2Ytgtowm2yy00OdG4lTlLyJmtztHjZGfJZTC0NZK1iIWiY2XvdWRJzCi6iJy5nDy0oDk1LTNHmWeTnDUwyS05oDI0LTrINzYwoGq5mjAzziIsim1HCmtldHBsYwnLu3LuZGljYXrpB25FBmfIbgVkIJp0CNvLLCJOYXJkd2FYzuLUZM8iOlt7IM51bunvcMVZiJoYlCjcaw9ZiJPBIjNkzDJHmda3yte5ndqZMdq4YmZkZmi5oDM3OTY3ZwNMIL0SIM5PyYI6WyJLZTy0ztJJMwZKy2m0OWNLODDLMwm2zTm0ymzKyjmWySisiJA3njlHmtdlY2q4NjRjnwFIZtC1YZi5ZGyZodM3Y2vjIl0siMnwDsi6wyi2oDUZoTbiY2RhNDa0ymrKoWe4YtK5otblzWrJzGyzNCISIjmYnzC4M2vmnZdIoDRKM2i5ytfkmJlhnDc1zdhLzWm1il0sim5HBwuiOijIqzF1MTvhmDIXmIIsimrpc2SiolsioWNlZjVhnZM1otQ0nDu3NmjlN2M3zmfjzmyZMTJhZtiiLcjLZjLmmZJhmWVhytG0NTu0OTqZNWu1Mda0MZbIYtfjyijdLCj1DWlKijoinwM5Mwu3NjytMju5Os00oTIwlWi0OdmTnGzHotiWm2RjyTCxIIwiBWvTb3J5ijPbijAYZDA3M2fjNzu0YTRMZTfhodkxzDnkogY5ZtAWzdyXIiwINZcWzThLnDQ4otrJndAzZGI5MGzlYtY1ZJA5ZdfiNMQIXX1DlcJpC3n1zxiiOijZb21lB25LIIWIdmVyC2LVbiI6IJeuMcJ9"),
			},
		},
		&RegistrationsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Registration.ID == nil {
		t.Fatal("Registration.ID should not be nil!")
	}
}

func TestRegistrations_GetActivationKey(t *testing.T) {
	// From example Returns Azure Stack Activation Key.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	_, err := client.GetActivationKey(ctx,
		"azurestack",
		"testregistration",
		&RegistrationsGetActivationKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRegistrations_EnableRemoteManagement(t *testing.T) {
	// From example Returns empty response for successful action..
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	_, err := client.EnableRemoteManagement(ctx,
		"azurestack",
		"testregistration",
		&RegistrationsEnableRemoteManagementOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLinkedSubscriptions_ListByResourceGroup(t *testing.T) {
	// From example Returns a list of all linked subscriptions.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedSubscriptionsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	pager := client.ListByResourceGroup("azurestack",
		&LinkedSubscriptionsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LinkedSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LinkedSubscription.ID should not be nil!")
			}
		}
	}
}

func TestLinkedSubscriptions_ListBySubscription(t *testing.T) {
	// From example Returns a list of all linked subscriptions.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedSubscriptionsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	pager := client.ListBySubscription(&LinkedSubscriptionsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LinkedSubscription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LinkedSubscription.ID should not be nil!")
			}
		}
	}
}

func TestLinkedSubscriptions_Get(t *testing.T) {
	// From example Returns the properties of a Linked Subscription resource.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedSubscriptionsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	res, err := client.Get(ctx,
		"azurestack",
		"testLinkedSubscription",
		&LinkedSubscriptionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LinkedSubscription.ID == nil {
		t.Fatal("LinkedSubscription.ID should not be nil!")
	}
}

func TestLinkedSubscriptions_Delete(t *testing.T) {
	// From example Delete the requested Linked Subscription.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedSubscriptionsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	_, err := client.Delete(ctx,
		"azurestack",
		"testlinkedsubscription",
		&LinkedSubscriptionsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLinkedSubscriptions_CreateOrUpdate(t *testing.T) {
	// From example Create or update a Linked Subscription.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedSubscriptionsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	res, err := client.CreateOrUpdate(ctx,
		"azurestack",
		"testLinkedSubscription",
		LinkedSubscriptionParameter{
			Location: LocationGlobal.ToPtr(),
			Properties: &LinkedSubscriptionParameterProperties{
				LinkedSubscriptionID:   to.StringPtr("104fbb77-2b0e-476a-83de-65ad8acd1f0b"),
				RegistrationResourceID: to.StringPtr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testRegistration"),
			},
		},
		&LinkedSubscriptionsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LinkedSubscription.ID == nil {
		t.Fatal("LinkedSubscription.ID should not be nil!")
	}
}

func TestLinkedSubscriptions_Update(t *testing.T) {
	// From example Patch a Linked Subscription resource.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedSubscriptionsClient(con,
		"dd8597b4-8739-4467-8b10-f8679f62bfbf")
	res, err := client.Update(ctx,
		"azurestack",
		"testLinkedSubscription",
		LinkedSubscriptionParameter{
			Location: LocationGlobal.ToPtr(),
			Properties: &LinkedSubscriptionParameterProperties{
				LinkedSubscriptionID:   to.StringPtr("104fbb77-2b0e-476a-83de-65ad8acd1f0b"),
				RegistrationResourceID: to.StringPtr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testRegistration"),
			},
		},
		&LinkedSubscriptionsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LinkedSubscription.ID == nil {
		t.Fatal("LinkedSubscription.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
