//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurestack_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurestack/armazurestack"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Operation/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns the list of supported REST operations."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Operation/List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurestack.OperationList{
			Value: []*armazurestack.Operation{
				{
					Name: to.Ptr("Microsoft.AzureStack/registrations/read"),
					Display: &armazurestack.Display{
						Description: to.Ptr("Gets the properties of an Azure Stack registration"),
						Operation:   to.Ptr("Get Azure Stack Registration"),
						Provider:    to.Ptr("Azure Stack Resource Provider"),
						Resource:    to.Ptr("Azure Stack Registration"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AzureStack/registrations/write"),
					Display: &armazurestack.Display{
						Description: to.Ptr("Creates or updates an Azure Stack registration"),
						Operation:   to.Ptr("Create Azure Stack Registration"),
						Provider:    to.Ptr("Azure Stack Resource Provider"),
						Resource:    to.Ptr("Azure Stack Registration"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AzureStack/registrations/delete"),
					Display: &armazurestack.Display{
						Description: to.Ptr("Deletes an Azure Stack registration"),
						Operation:   to.Ptr("Delete Azure Stack Registration"),
						Provider:    to.Ptr("Azure Stack Resource Provider"),
						Resource:    to.Ptr("Azure Stack Registration"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AzureStack/registrations/getActivationKey/action"),
					Display: &armazurestack.Display{
						Description: to.Ptr("Gets the latest Azure Stack activation key"),
						Operation:   to.Ptr("Get Azure Stack Activation Key"),
						Provider:    to.Ptr("Azure Stack Resource Provider"),
						Resource:    to.Ptr("Azure Stack Registration"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AzureStack/register/action"),
					Display: &armazurestack.Display{
						Description: to.Ptr("Registers Subscription with Microsoft.AzureStack resource provider"),
						Operation:   to.Ptr("Register Subscription for Azure Stack"),
						Provider:    to.Ptr("Azure Stack Resource Provider"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AzureStack/registrations/products/read"),
					Display: &armazurestack.Display{
						Description: to.Ptr("Gets the properties of an Azure Stack Marketplace product"),
						Operation:   to.Ptr("Get Azure Stack Marketplace Product"),
						Provider:    to.Ptr("Azure Stack Resource Provider"),
						Resource:    to.Ptr("Azure Stack Marketplace Product"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AzureStack/registrations/products/listDetails/action"),
					Display: &armazurestack.Display{
						Description: to.Ptr("Retrieves extended details for an Azure Stack Marketplace product"),
						Operation:   to.Ptr("Get Azure Stack Marketplace Product Details"),
						Provider:    to.Ptr("Azure Stack Resource Provider"),
						Resource:    to.Ptr("Azure Stack Marketplace Product"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AzureStack/registrations/customerSubscriptions/read"),
					Display: &armazurestack.Display{
						Description: to.Ptr("Gets the properties of an Azure Stack Customer Subscription"),
						Operation:   to.Ptr("Get Azure Stack Customer Subscription"),
						Provider:    to.Ptr("Azure Stack Resource Provider"),
						Resource:    to.Ptr("Azure Stack Customer Subscription"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AzureStack/registrations/customerSubscriptions/write"),
					Display: &armazurestack.Display{
						Description: to.Ptr("Creates or updates an Azure Stack Customer Subscription"),
						Operation:   to.Ptr("Create Azure Stack Customer Subscription"),
						Provider:    to.Ptr("Azure Stack Resource Provider"),
						Resource:    to.Ptr("Azure Stack Customer Subscription"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AzureStack/registrations/customerSubscriptions/delete"),
					Display: &armazurestack.Display{
						Description: to.Ptr("Deletes an Azure Stack Customer Subscription"),
						Operation:   to.Ptr("Delete Azure Stack Customer Subscription"),
						Provider:    to.Ptr("Azure Stack Resource Provider"),
						Resource:    to.Ptr("Azure Stack Customer Subscription"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AzureStack/cloudManifestFiles/read"),
					Display: &armazurestack.Display{
						Description: to.Ptr("Gets the cloud specific manifest file."),
						Operation:   to.Ptr("Read Resource Provider Operations"),
						Provider:    to.Ptr("Azure Stack Resource Provider."),
						Resource:    to.Ptr("Azure Stack Cloud Manifest File"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.AzureStack/Operations/read"),
					Display: &armazurestack.Display{
						Description: to.Ptr("The localized friendly description for the operation, as it should be shown to the user."),
						Operation:   to.Ptr("Read Resource Provider Operations"),
						Provider:    to.Ptr("Name of the Resource Provider."),
						Resource:    to.Ptr("Resource Type Display Name."),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Operation/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudManifestFile_List(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CloudManifestFile/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns the properties of a cloud specific manifest file with latest version."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewCloudManifestFileClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CloudManifestFile/List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.CloudManifestFileResponse{
			Name: to.Ptr("latest"),
			Type: to.Ptr("Microsoft.AzureStack/cloudManifestFiles"),
			ID:   to.Ptr("/providers/Microsoft.AzureStack/cloudManifestFiles/latest"),
			Properties: &armazurestack.CloudManifestFileProperties{
				DeploymentData: &armazurestack.CloudManifestFileDeploymentData{
					CustomCloudVerificationKey: to.Ptr(""),
					CustomEnvironmentEndpoints: &armazurestack.CloudManifestFileEnvironmentEndpoints{
						CustomCloudArmEndpoint: to.Ptr("https://management.azure.microsoft.scloud/"),
						ExternalDsmsEndpoint:   to.Ptr("https://global-dsms.dsms.core.microsoft.scloud/dsms/issuercertificates"),
					},
					ExternalDsmsCertificates: to.Ptr(""),
				},
				Signature: to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CloudManifestFileResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CloudManifestFileResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CloudManifestFile/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudManifestFile_Get(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CloudManifestFile/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns the properties of a cloud specific manifest file."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewCloudManifestFileClient(cred, &options)
	res, err := client.Get(ctx,
		"latest",
		&armazurestack.CloudManifestFileClientGetOptions{VersionCreationDate: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CloudManifestFile/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.CloudManifestFileResponse{
			Name: to.Ptr("latest"),
			Type: to.Ptr("Microsoft.AzureStack/cloudManifestFiles"),
			ID:   to.Ptr("/providers/Microsoft.AzureStack/cloudManifestFiles/latest"),
			Properties: &armazurestack.CloudManifestFileProperties{
				DeploymentData: &armazurestack.CloudManifestFileDeploymentData{
					CustomCloudVerificationKey: to.Ptr(""),
					CustomEnvironmentEndpoints: &armazurestack.CloudManifestFileEnvironmentEndpoints{
						CustomCloudArmEndpoint: to.Ptr("https://management.azure.microsoft.scloud/"),
						ExternalDsmsEndpoint:   to.Ptr("https://global-dsms.dsms.core.microsoft.scloud/dsms/issuercertificates"),
					},
					ExternalDsmsCertificates: to.Ptr(""),
				},
				Signature: to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CloudManifestFileResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CloudManifestFileResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CloudManifestFile/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomerSubscriptions_List(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CustomerSubscription/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns a list of products."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewCustomerSubscriptionsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	pager := client.List("azurestack",
		"testregistration",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CustomerSubscription/List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurestack.CustomerSubscriptionList{
			Value: []*armazurestack.CustomerSubscription{
				{
					Name: to.Ptr("testregistration/E09A4E93-29A7-4EBA-A6D4-76202383F07F"),
					Type: to.Ptr("Microsoft.AzureStack/registrations/customerSubscriptions"),
					ID:   to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration/customerSubscriptions/E09A4E93-29A7-4EBA-A6D4-76202383F07F"),
					Properties: &armazurestack.CustomerSubscriptionProperties{
						TenantID: to.Ptr("dbab3982-796f-4d03-9908-044c08aef8a2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomerSubscriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomerSubscriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CustomerSubscription/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomerSubscriptions_Get(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CustomerSubscription/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns the specified product."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewCustomerSubscriptionsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	res, err := client.Get(ctx,
		"azurestack",
		"testregistration",
		"E09A4E93-29A7-4EBA-A6D4-76202383F07F",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CustomerSubscription/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.CustomerSubscription{
			Name: to.Ptr("testregistration/E09A4E93-29A7-4EBA-A6D4-76202383F07F"),
			Type: to.Ptr("Microsoft.AzureStack/registrations/customerSubscriptions"),
			ID:   to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration/customerSubscriptions/E09A4E93-29A7-4EBA-A6D4-76202383F07F"),
			Properties: &armazurestack.CustomerSubscriptionProperties{
				TenantID: to.Ptr("dbab3982-796f-4d03-9908-044c08aef8a2"),
			},
			SystemData: &armazurestack.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
				CreatedBy:          to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
				CreatedByType:      to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
				LastModifiedByType: to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomerSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomerSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CustomerSubscription/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomerSubscriptions_Delete(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CustomerSubscription/Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a customer subscription under a registration."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewCustomerSubscriptionsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	_, err := client.Delete(ctx,
		"azurestack",
		"testregistration",
		"E09A4E93-29A7-4EBA-A6D4-76202383F07F",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CustomerSubscription/Delete.json: %v", err)
	}
}

func TestCustomerSubscriptions_Create(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CustomerSubscription/Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a new customer subscription under a registration."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewCustomerSubscriptionsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	res, err := client.Create(ctx,
		"azurestack",
		"testregistration",
		"E09A4E93-29A7-4EBA-A6D4-76202383F07F",
		armazurestack.CustomerSubscription{
			Properties: &armazurestack.CustomerSubscriptionProperties{
				TenantID: to.Ptr("dbab3982-796f-4d03-9908-044c08aef8a2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CustomerSubscription/Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.CustomerSubscription{
			Name: to.Ptr(""),
			Type: to.Ptr(""),
			ID:   to.Ptr(""),
			Properties: &armazurestack.CustomerSubscriptionProperties{
				TenantID: to.Ptr("dbab3982-796f-4d03-9908-044c08aef8a2"),
			},
			SystemData: &armazurestack.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
				CreatedBy:          to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
				CreatedByType:      to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
				LastModifiedByType: to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomerSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomerSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/CustomerSubscription/Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProducts_List(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns a list of products."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewProductsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	pager := client.List("azurestack",
		"testregistration",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurestack.ProductList{
			Value: []*armazurestack.Product{
				{
					Name: to.Ptr("testregistration/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1"),
					Type: to.Ptr("Microsoft.AzureStack/registrations/products"),
					ID:   to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration/products/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1"),
					Properties: &armazurestack.ProductNestedProperties{
						DisplayName:         to.Ptr("VM Access For Linux Extension"),
						GalleryItemIdentity: to.Ptr("Microsoft.VMAccessForLinux.1.4.7"),
						IconUris: &armazurestack.IconUris{
							Large:  to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Large.png"),
							Medium: to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Medium.png"),
							Small:  to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Small.png"),
							Wide:   to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Wide.png"),
						},
						Offer:         to.Ptr(""),
						OfferVersion:  to.Ptr(""),
						PayloadLength: to.Ptr[int64](46959),
						ProductKind:   to.Ptr("virtualMachineExtension"),
						ProductProperties: &armazurestack.ProductProperties{
							Version: to.Ptr("1.4.7"),
						},
						PublisherDisplayName: to.Ptr("Microsoft Corp."),
						PublisherIdentifier:  to.Ptr("Microsoft.OSTCExtensions"),
						SKU:                  to.Ptr(""),
						VMExtensionType:      to.Ptr("VMAccessForLinux"),
					},
				},
				{
					Name: to.Ptr("testregistration/dummysharepoint"),
					Type: to.Ptr("Microsoft.AzureStack/registrations/products"),
					ID:   to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration/products/dummysharepoint"),
					Properties: &armazurestack.ProductNestedProperties{
						DisplayName:         to.Ptr("Display name for dummy SharePoint"),
						GalleryItemIdentity: to.Ptr("Microsoft.SharePointServer2013Trial-ARM.1.0.3"),
						IconUris: &armazurestack.IconUris{
							Hero:   to.Ptr("https://extensions.azureedge.net/dummysharepoint/icons/Hero.png"),
							Large:  to.Ptr("https://extensions.azureedge.net/dummysharepoint/icons/Large.png"),
							Medium: to.Ptr("https://extensions.azureedge.net/dummysharepoint/icons/Medium.png"),
							Small:  to.Ptr("https://extensions.azureedge.net/dummysharepoint/icons/Small.png"),
							Wide:   to.Ptr("https://extensions.azureedge.net/dummysharepoint/icons/Wide.png"),
						},
						Offer:         to.Ptr("Dummy offer"),
						OfferVersion:  to.Ptr("FakeProduct: offer version"),
						PayloadLength: to.Ptr[int64](4682158),
						ProductKind:   to.Ptr("virtualMachine"),
						ProductProperties: &armazurestack.ProductProperties{
							Version: to.Ptr("1.0.1"),
						},
						PublisherDisplayName: to.Ptr("Publisher display name for dummy SharePoint"),
						PublisherIdentifier:  to.Ptr("Katal"),
						SKU:                  to.Ptr("Dummy sku"),
					},
				},
				{
					Name: to.Ptr("testregistration/dummysharepointTest526"),
					Type: to.Ptr("Microsoft.AzureStack/registrations/products"),
					ID:   to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration/products/dummysharepointTest526"),
					Properties: &armazurestack.ProductNestedProperties{
						DisplayName:         to.Ptr("Display name for dummy SharePoint"),
						GalleryItemIdentity: to.Ptr("Microsoft.SharePointServer2013Trial-ARM.1.0.3"),
						IconUris: &armazurestack.IconUris{
							Hero:   to.Ptr("https://extensions.azureedge.net/dummysharepointTest526/icons/Hero.png"),
							Large:  to.Ptr("https://extensions.azureedge.net/dummysharepointTest526/icons/Large.png"),
							Medium: to.Ptr("https://extensions.azureedge.net/dummysharepointTest526/icons/Medium.png"),
							Small:  to.Ptr("https://extensions.azureedge.net/dummysharepointTest526/icons/Small.png"),
							Wide:   to.Ptr("https://extensions.azureedge.net/dummysharepointTest526/icons/Wide.png"),
						},
						Offer:         to.Ptr("Dummy offer"),
						OfferVersion:  to.Ptr("FakeProduct: offer version"),
						PayloadLength: to.Ptr[int64](4682158),
						ProductKind:   to.Ptr("virtualMachine"),
						ProductProperties: &armazurestack.ProductProperties{
							Version: to.Ptr("2.0.2"),
						},
						PublisherDisplayName: to.Ptr("Publisher display name for dummy SharePoint"),
						PublisherIdentifier:  to.Ptr("Katal"),
						SKU:                  to.Ptr("Dummy sku"),
					},
				},
				{
					Name: to.Ptr("testregistration/test.product.976fe55e-6921-47bb-b8ba-718bba70c72d"),
					Type: to.Ptr("Microsoft.AzureStack/registrations/products"),
					ID:   to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration/products/test.product.976fe55e-6921-47bb-b8ba-718bba70c72d"),
					Properties: &armazurestack.ProductNestedProperties{
						DisplayName:         to.Ptr("Display name for dummy SharePoint"),
						GalleryItemIdentity: to.Ptr("Microsoft.SharePointServer2013Trial-ARM.1.0.3"),
						IconUris: &armazurestack.IconUris{
							Hero:   to.Ptr("https://extensions.azureedge.net/test.product.976fe55e-6921-47bb-b8ba-718bba70c72d/icons/Hero.png"),
							Large:  to.Ptr("https://extensions.azureedge.net/test.product.976fe55e-6921-47bb-b8ba-718bba70c72d/icons/Large.png"),
							Medium: to.Ptr("https://extensions.azureedge.net/test.product.976fe55e-6921-47bb-b8ba-718bba70c72d/icons/Medium.png"),
							Small:  to.Ptr("https://extensions.azureedge.net/test.product.976fe55e-6921-47bb-b8ba-718bba70c72d/icons/Small.png"),
							Wide:   to.Ptr("https://extensions.azureedge.net/test.product.976fe55e-6921-47bb-b8ba-718bba70c72d/icons/Wide.png"),
						},
						Offer:         to.Ptr("Dummy offer"),
						OfferVersion:  to.Ptr("FakeProduct: offer version"),
						PayloadLength: to.Ptr[int64](4682158),
						ProductKind:   to.Ptr("virtualMachine"),
						ProductProperties: &armazurestack.ProductProperties{
							Version: to.Ptr("1.0.1"),
						},
						PublisherDisplayName: to.Ptr("Publisher display name for dummy SharePoint"),
						PublisherIdentifier:  to.Ptr("Katal"),
						SKU:                  to.Ptr("Dummy sku"),
					},
				},
				{
					Name: to.Ptr("testregistration/wordpress4-4"),
					Type: to.Ptr("Microsoft.AzureStack/registrations/products"),
					ID:   to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration/products/wordpress4-4"),
					Properties: &armazurestack.ProductNestedProperties{
						DisplayName:         to.Ptr("WordPress"),
						GalleryItemIdentity: to.Ptr("bitnami.wordpress4-4.1.0.8"),
						IconUris: &armazurestack.IconUris{
							Hero:   to.Ptr("https://extensions.azureedge.net/wordpress4-4/icons/Hero.png"),
							Large:  to.Ptr("https://extensions.azureedge.net/wordpress4-4/icons/Large.png"),
							Medium: to.Ptr("https://extensions.azureedge.net/wordpress4-4/icons/Medium.png"),
							Small:  to.Ptr("https://extensions.azureedge.net/wordpress4-4/icons/Small.png"),
							Wide:   to.Ptr("https://extensions.azureedge.net/wordpress4-4/icons/Wide.png"),
						},
						Offer:         to.Ptr("wordpress"),
						OfferVersion:  to.Ptr("1.0.8"),
						PayloadLength: to.Ptr[int64](32212604365),
						ProductKind:   to.Ptr("virtualMachine"),
						ProductProperties: &armazurestack.ProductProperties{
							Version: to.Ptr("4.5.31"),
						},
						PublisherDisplayName: to.Ptr("WordPress"),
						PublisherIdentifier:  to.Ptr("bitnami"),
						SKU:                  to.Ptr("4-4"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProductList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProductList)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProducts_Get(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns the specified product."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewProductsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	res, err := client.Get(ctx,
		"azurestack",
		"testregistration",
		"Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.Product{
			Name: to.Ptr("testregistration/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1"),
			Type: to.Ptr("Microsoft.AzureStack/registrations/products"),
			ID:   to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration/products/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1"),
			Properties: &armazurestack.ProductNestedProperties{
				DisplayName:         to.Ptr("VM Access For Linux Extension"),
				GalleryItemIdentity: to.Ptr("Microsoft.VMAccessForLinux.1.4.7"),
				IconUris: &armazurestack.IconUris{
					Large:  to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Large.png"),
					Medium: to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Medium.png"),
					Small:  to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Small.png"),
					Wide:   to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Wide.png"),
				},
				Offer:         to.Ptr(""),
				OfferVersion:  to.Ptr(""),
				PayloadLength: to.Ptr[int64](46959),
				ProductKind:   to.Ptr("virtualMachineExtension"),
				ProductProperties: &armazurestack.ProductProperties{
					Version: to.Ptr("1.4.7"),
				},
				PublisherDisplayName: to.Ptr("Microsoft Corp."),
				PublisherIdentifier:  to.Ptr("Microsoft.OSTCExtensions"),
				SKU:                  to.Ptr(""),
				VMExtensionType:      to.Ptr("VMAccessForLinux"),
			},
			SystemData: &armazurestack.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
				CreatedBy:          to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
				CreatedByType:      to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
				LastModifiedByType: to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Product) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Product)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProducts_ListDetails(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/Post.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns the extended properties of a product."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewProductsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	res, err := client.ListDetails(ctx,
		"azurestack",
		"testregistration",
		"Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/Post.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.ExtendedProduct{
			GalleryPackageBlobSasURI: to.Ptr("<galleryPackageBlobSasUri>"),
			ProductKind:              to.Ptr("virtualMachineExtension"),
			Properties: &armazurestack.ExtendedProductProperties{
				ComputeRole:       to.Ptr(armazurestack.ComputeRoleIaaS),
				IsSystemExtension: to.Ptr(false),
				SourceBlob: &armazurestack.URI{
					URI: to.Ptr("https://azstrptestwcu001.blob.core.windows.net/packages/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/extension/vmext.zip?sv=2015-04-05&sr=b&sig=XtLzuO2rlqxyZOzfoTEDZW4DU9OxBZVCOw%2FVgY2%2FiUo%3D&se=2018-02-13T10%3A46%3A24Z&sp=r"),
				},
				SupportMultipleExtensions: to.Ptr(false),
				Version:                   to.Ptr("1.4.7"),
				VMOsType:                  to.Ptr(armazurestack.OperatingSystemLinux),
				VMScaleSetEnabled:         to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedProduct) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedProduct)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/Post.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProducts_GetProducts(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/ListPost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns a list of products."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewProductsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	res, err := client.GetProducts(ctx,
		"azurestack",
		"testregistration",
		"_all",
		&armazurestack.ProductsClientGetProductsOptions{DeviceConfiguration: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/ListPost.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.ProductList{
			Value: []*armazurestack.Product{
				{
					Name: to.Ptr("testregistration/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1"),
					Type: to.Ptr("Microsoft.AzureStack/registrations/products"),
					ID:   to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration/products/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1"),
					Properties: &armazurestack.ProductNestedProperties{
						Compatibility: &armazurestack.Compatibility{
							Description:  to.Ptr(""),
							IsCompatible: to.Ptr(true),
							Issues:       []*armazurestack.CompatibilityIssue{},
							Message:      to.Ptr(""),
						},
						DisplayName:         to.Ptr("VM Access For Linux Extension"),
						GalleryItemIdentity: to.Ptr("Microsoft.VMAccessForLinux.1.4.7"),
						IconUris: &armazurestack.IconUris{
							Large:  to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Large.png"),
							Medium: to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Medium.png"),
							Small:  to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Small.png"),
							Wide:   to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Wide.png"),
						},
						Offer:         to.Ptr(""),
						OfferVersion:  to.Ptr(""),
						PayloadLength: to.Ptr[int64](46959),
						ProductKind:   to.Ptr("virtualMachineExtension"),
						ProductProperties: &armazurestack.ProductProperties{
							Version: to.Ptr("1.4.7"),
						},
						PublisherDisplayName: to.Ptr("Microsoft Corp."),
						PublisherIdentifier:  to.Ptr("Microsoft.OSTCExtensions"),
						SKU:                  to.Ptr(""),
						VMExtensionType:      to.Ptr("VMAccessForLinux"),
					},
				},
				{
					Name: to.Ptr("testregistration/dummysharepoint"),
					Type: to.Ptr("Microsoft.AzureStack/registrations/products"),
					ID:   to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration/products/dummysharepoint"),
					Properties: &armazurestack.ProductNestedProperties{
						Compatibility: &armazurestack.Compatibility{
							Description:  to.Ptr(""),
							IsCompatible: to.Ptr(true),
							Issues:       []*armazurestack.CompatibilityIssue{},
							Message:      to.Ptr(""),
						},
						DisplayName:         to.Ptr("Display name for dummy SharePoint"),
						GalleryItemIdentity: to.Ptr("Microsoft.SharePointServer2013Trial-ARM.1.0.3"),
						IconUris: &armazurestack.IconUris{
							Hero:   to.Ptr("https://extensions.azureedge.net/dummysharepoint/icons/Hero.png"),
							Large:  to.Ptr("https://extensions.azureedge.net/dummysharepoint/icons/Large.png"),
							Medium: to.Ptr("https://extensions.azureedge.net/dummysharepoint/icons/Medium.png"),
							Small:  to.Ptr("https://extensions.azureedge.net/dummysharepoint/icons/Small.png"),
							Wide:   to.Ptr("https://extensions.azureedge.net/dummysharepoint/icons/Wide.png"),
						},
						Offer:         to.Ptr("Dummy offer"),
						OfferVersion:  to.Ptr("FakeProduct: offer version"),
						PayloadLength: to.Ptr[int64](4682158),
						ProductKind:   to.Ptr("virtualMachine"),
						ProductProperties: &armazurestack.ProductProperties{
							Version: to.Ptr("1.0.1"),
						},
						PublisherDisplayName: to.Ptr("Publisher display name for dummy SharePoint"),
						PublisherIdentifier:  to.Ptr("Katal"),
						SKU:                  to.Ptr("Dummy sku"),
					},
				},
				{
					Name: to.Ptr("testregistration/dummysharepointTest526"),
					Type: to.Ptr("Microsoft.AzureStack/registrations/products"),
					ID:   to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration/products/dummysharepointTest526"),
					Properties: &armazurestack.ProductNestedProperties{
						Compatibility: &armazurestack.Compatibility{
							Description:  to.Ptr(""),
							IsCompatible: to.Ptr(true),
							Issues:       []*armazurestack.CompatibilityIssue{},
							Message:      to.Ptr(""),
						},
						DisplayName:         to.Ptr("Display name for dummy SharePoint"),
						GalleryItemIdentity: to.Ptr("Microsoft.SharePointServer2013Trial-ARM.1.0.3"),
						IconUris: &armazurestack.IconUris{
							Hero:   to.Ptr("https://extensions.azureedge.net/dummysharepointTest526/icons/Hero.png"),
							Large:  to.Ptr("https://extensions.azureedge.net/dummysharepointTest526/icons/Large.png"),
							Medium: to.Ptr("https://extensions.azureedge.net/dummysharepointTest526/icons/Medium.png"),
							Small:  to.Ptr("https://extensions.azureedge.net/dummysharepointTest526/icons/Small.png"),
							Wide:   to.Ptr("https://extensions.azureedge.net/dummysharepointTest526/icons/Wide.png"),
						},
						Offer:         to.Ptr("Dummy offer"),
						OfferVersion:  to.Ptr("FakeProduct: offer version"),
						PayloadLength: to.Ptr[int64](4682158),
						ProductKind:   to.Ptr("virtualMachine"),
						ProductProperties: &armazurestack.ProductProperties{
							Version: to.Ptr("2.0.2"),
						},
						PublisherDisplayName: to.Ptr("Publisher display name for dummy SharePoint"),
						PublisherIdentifier:  to.Ptr("Katal"),
						SKU:                  to.Ptr("Dummy sku"),
					},
				},
				{
					Name: to.Ptr("testregistration/test.product.976fe55e-6921-47bb-b8ba-718bba70c72d"),
					Type: to.Ptr("Microsoft.AzureStack/registrations/products"),
					ID:   to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration/products/test.product.976fe55e-6921-47bb-b8ba-718bba70c72d"),
					Properties: &armazurestack.ProductNestedProperties{
						Compatibility: &armazurestack.Compatibility{
							Description:  to.Ptr(""),
							IsCompatible: to.Ptr(true),
							Issues:       []*armazurestack.CompatibilityIssue{},
							Message:      to.Ptr(""),
						},
						DisplayName:         to.Ptr("Display name for dummy SharePoint"),
						GalleryItemIdentity: to.Ptr("Microsoft.SharePointServer2013Trial-ARM.1.0.3"),
						IconUris: &armazurestack.IconUris{
							Hero:   to.Ptr("https://extensions.azureedge.net/test.product.976fe55e-6921-47bb-b8ba-718bba70c72d/icons/Hero.png"),
							Large:  to.Ptr("https://extensions.azureedge.net/test.product.976fe55e-6921-47bb-b8ba-718bba70c72d/icons/Large.png"),
							Medium: to.Ptr("https://extensions.azureedge.net/test.product.976fe55e-6921-47bb-b8ba-718bba70c72d/icons/Medium.png"),
							Small:  to.Ptr("https://extensions.azureedge.net/test.product.976fe55e-6921-47bb-b8ba-718bba70c72d/icons/Small.png"),
							Wide:   to.Ptr("https://extensions.azureedge.net/test.product.976fe55e-6921-47bb-b8ba-718bba70c72d/icons/Wide.png"),
						},
						Offer:         to.Ptr("Dummy offer"),
						OfferVersion:  to.Ptr("FakeProduct: offer version"),
						PayloadLength: to.Ptr[int64](4682158),
						ProductKind:   to.Ptr("virtualMachine"),
						ProductProperties: &armazurestack.ProductProperties{
							Version: to.Ptr("1.0.1"),
						},
						PublisherDisplayName: to.Ptr("Publisher display name for dummy SharePoint"),
						PublisherIdentifier:  to.Ptr("Katal"),
						SKU:                  to.Ptr("Dummy sku"),
					},
				},
				{
					Name: to.Ptr("testregistration/wordpress4-4"),
					Type: to.Ptr("Microsoft.AzureStack/registrations/products"),
					ID:   to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration/products/wordpress4-4"),
					Properties: &armazurestack.ProductNestedProperties{
						Compatibility: &armazurestack.Compatibility{
							Description:  to.Ptr("AzureStack version '1910.0.0.0' is too low. Versions lower than '1911.0.0.0' are not supported"),
							IsCompatible: to.Ptr(false),
							Issues: []*armazurestack.CompatibilityIssue{
								to.Ptr(armazurestack.CompatibilityIssueHigherDeviceVersionRequired)},
							Message: to.Ptr("AzureStack version '1910.0.0.0' is too low. Versions lower than '1911.0.0.0' are not supported"),
						},
						DisplayName:         to.Ptr("WordPress"),
						GalleryItemIdentity: to.Ptr("bitnami.wordpress4-4.1.0.8"),
						IconUris: &armazurestack.IconUris{
							Hero:   to.Ptr("https://extensions.azureedge.net/wordpress4-4/icons/Hero.png"),
							Large:  to.Ptr("https://extensions.azureedge.net/wordpress4-4/icons/Large.png"),
							Medium: to.Ptr("https://extensions.azureedge.net/wordpress4-4/icons/Medium.png"),
							Small:  to.Ptr("https://extensions.azureedge.net/wordpress4-4/icons/Small.png"),
							Wide:   to.Ptr("https://extensions.azureedge.net/wordpress4-4/icons/Wide.png"),
						},
						Offer:         to.Ptr("wordpress"),
						OfferVersion:  to.Ptr("1.0.8"),
						PayloadLength: to.Ptr[int64](32212604365),
						ProductKind:   to.Ptr("virtualMachine"),
						ProductProperties: &armazurestack.ProductProperties{
							Version: to.Ptr("4.5.31"),
						},
						PublisherDisplayName: to.Ptr("WordPress"),
						PublisherIdentifier:  to.Ptr("bitnami"),
						SKU:                  to.Ptr("4-4"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ProductList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProductList)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/ListPost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProducts_GetProduct(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/GetPost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns the specified product."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewProductsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	res, err := client.GetProduct(ctx,
		"azurestack",
		"testregistration",
		"Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1",
		&armazurestack.ProductsClientGetProductOptions{DeviceConfiguration: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/GetPost.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.Product{
			Name: to.Ptr("testregistration/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1"),
			Type: to.Ptr("Microsoft.AzureStack/registrations/products"),
			ID:   to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration/products/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1"),
			Properties: &armazurestack.ProductNestedProperties{
				Compatibility: &armazurestack.Compatibility{
					Description:  to.Ptr(""),
					IsCompatible: to.Ptr(true),
					Issues:       []*armazurestack.CompatibilityIssue{},
					Message:      to.Ptr(""),
				},
				DisplayName:         to.Ptr("VM Access For Linux Extension"),
				GalleryItemIdentity: to.Ptr("Microsoft.VMAccessForLinux.1.4.7"),
				IconUris: &armazurestack.IconUris{
					Large:  to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Large.png"),
					Medium: to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Medium.png"),
					Small:  to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Small.png"),
					Wide:   to.Ptr("https://extensions.azureedge.net/Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1/icons/Wide.png"),
				},
				Offer:         to.Ptr(""),
				OfferVersion:  to.Ptr(""),
				PayloadLength: to.Ptr[int64](46959),
				ProductKind:   to.Ptr("virtualMachineExtension"),
				ProductProperties: &armazurestack.ProductProperties{
					Version: to.Ptr("1.4.7"),
				},
				PublisherDisplayName: to.Ptr("Microsoft Corp."),
				PublisherIdentifier:  to.Ptr("Microsoft.OSTCExtensions"),
				SKU:                  to.Ptr(""),
				VMExtensionType:      to.Ptr("VMAccessForLinux"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Product) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Product)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/GetPost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProducts_UploadLog(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/UploadLog.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns the specified product."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewProductsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	res, err := client.UploadLog(ctx,
		"azurestack",
		"testregistration",
		"Microsoft.OSTCExtensions.VMAccessForLinux.1.4.7.1",
		&armazurestack.ProductsClientUploadLogOptions{MarketplaceProductLogUpdate: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/UploadLog.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.ProductLog{
			EndDate:           to.Ptr("01-02-2019 00:00:00"),
			Error:             to.Ptr("ExampleError"),
			Operation:         to.Ptr("Download"),
			ProductID:         to.Ptr("dummyProduct-1.1"),
			RegistrationName:  to.Ptr("TestCIRegistration007"),
			ResourceGroupName: to.Ptr("AzureStack007"),
			StartDate:         to.Ptr("01-01-2019 00:00:00"),
			Status:            to.Ptr("Failed"),
			SubscriptionID:    to.Ptr("64D0A64B4F694EB4B0ED92BC34D98082"),
			Details:           to.Ptr("ExampleDetails"),
		}
		if !reflect.DeepEqual(exampleRes, res.ProductLog) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProductLog)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/UploadLog.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistrations_List(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns a list of all registrations."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewRegistrationsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	pager := client.List("azurestack",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurestack.RegistrationList{
			Value: []*armazurestack.Registration{
				{
					Name:     to.Ptr("testregistration"),
					Type:     to.Ptr("Microsoft.AzureStack/registrations"),
					Etag:     to.Ptr("0d00527e-0000-0000-0000-5a81ebdf0000"),
					ID:       to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration"),
					Location: to.Ptr(armazurestack.LocationGlobal),
					Properties: &armazurestack.RegistrationProperties{
						BillingModel: to.Ptr("Development"),
						ObjectID:     to.Ptr("9e9704ab-561a-4498-ac60-64b2314456ee"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RegistrationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RegistrationList)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistrations_ListBySubscription(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns a list of all registrations under current subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewRegistrationsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurestack.RegistrationList{
			Value: []*armazurestack.Registration{
				{
					Name:     to.Ptr("testregistration"),
					Type:     to.Ptr("Microsoft.AzureStack/registrations"),
					Etag:     to.Ptr("0d00527e-0000-0000-0000-5a81ebdf0000"),
					ID:       to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration"),
					Location: to.Ptr(armazurestack.LocationGlobal),
					Properties: &armazurestack.RegistrationProperties{
						BillingModel: to.Ptr("Development"),
						ObjectID:     to.Ptr("9e9704ab-561a-4498-ac60-64b2314456ee"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RegistrationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RegistrationList)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistrations_Get(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns the properties of an Azure Stack registration."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewRegistrationsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	res, err := client.Get(ctx,
		"azurestack",
		"testregistration",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.Registration{
			Name:     to.Ptr("azurestack"),
			Type:     to.Ptr("Microsoft.AzureStack/registrations"),
			Etag:     to.Ptr("0d00527e-0000-0000-0000-5a81ebdf0000"),
			ID:       to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration"),
			Location: to.Ptr(armazurestack.LocationGlobal),
			Properties: &armazurestack.RegistrationProperties{
				BillingModel: to.Ptr("Development"),
				ObjectID:     to.Ptr("9e9704ab-561a-4498-ac60-64b2314456ee"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Registration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Registration)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistrations_Delete(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the requested Azure Stack registration."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewRegistrationsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	_, err := client.Delete(ctx,
		"azurestack",
		"testregistration",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/Delete.json: %v", err)
	}
}

func TestRegistrations_CreateOrUpdate(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an Azure Stack registration."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewRegistrationsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"azurestack",
		"testregistration",
		armazurestack.RegistrationParameter{
			Location: to.Ptr(armazurestack.LocationGlobal),
			Properties: &armazurestack.RegistrationParameterProperties{
				RegistrationToken: to.Ptr("EyjIAWXSAw5nTw9KZWWiOiJeZxZlbg9wBwvUdCiSIM9iaMVjdeLkijoinwIzyJa2Ytgtowm2yy00OdG4lTlLyJmtztHjZGfJZTC0NZK1iIWiY2XvdWRJzCi6iJy5nDy0oDk1LTNHmWeTnDUwyS05oDI0LTrINzYwoGq5mjAzziIsim1HCmtldHBsYwnLu3LuZGljYXrpB25FBmfIbgVkIJp0CNvLLCJOYXJkd2FYzuLUZM8iOlt7IM51bunvcMVZiJoYlCjcaw9ZiJPBIjNkzDJHmda3yte5ndqZMdq4YmZkZmi5oDM3OTY3ZwNMIL0SIM5PyYI6WyJLZTy0ztJJMwZKy2m0OWNLODDLMwm2zTm0ymzKyjmWySisiJA3njlHmtdlY2q4NjRjnwFIZtC1YZi5ZGyZodM3Y2vjIl0siMnwDsi6wyi2oDUZoTbiY2RhNDa0ymrKoWe4YtK5otblzWrJzGyzNCISIjmYnzC4M2vmnZdIoDRKM2i5ytfkmJlhnDc1zdhLzWm1il0sim5HBwuiOijIqzF1MTvhmDIXmIIsimrpc2SiolsioWNlZjVhnZM1otQ0nDu3NmjlN2M3zmfjzmyZMTJhZtiiLcjLZjLmmZJhmWVhytG0NTu0OTqZNWu1Mda0MZbIYtfjyijdLCj1DWlKijoinwM5Mwu3NjytMju5Os00oTIwlWi0OdmTnGzHotiWm2RjyTCxIIwiBWvTb3J5ijPbijAYZDA3M2fjNzu0YTRMZTfhodkxzDnkogY5ZtAWzdyXIiwINZcWzThLnDQ4otrJndAzZGI5MGzlYtY1ZJA5ZdfiNMQIXX1DlcJpC3n1zxiiOijZb21lB25LIIWIdmVyC2LVbiI6IJeuMcJ9"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.Registration{
			Name:     to.Ptr("testregistration"),
			Type:     to.Ptr("Microsoft.AzureStack/registrations"),
			Etag:     to.Ptr("\"0e00ab2b-0000-0000-0000-5a82517f0000\""),
			ID:       to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration"),
			Location: to.Ptr(armazurestack.LocationGlobal),
			Properties: &armazurestack.RegistrationProperties{
				BillingModel: to.Ptr("Development"),
				CloudID:      to.Ptr("5bf881b2-6be7-42a1-9f47-d6fcb6737747"),
				ObjectID:     to.Ptr("2dbdd5f4-daf3-442a-be35-b71c3debee5a"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Registration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Registration)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistrations_Update(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch an Azure Stack registration."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewRegistrationsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	res, err := client.Update(ctx,
		"azurestack",
		"testregistration",
		armazurestack.RegistrationParameter{
			Location: to.Ptr(armazurestack.LocationGlobal),
			Properties: &armazurestack.RegistrationParameterProperties{
				RegistrationToken: to.Ptr("EyjIAWXSAw5nTw9KZWWiOiJeZxZlbg9wBwvUdCiSIM9iaMVjdeLkijoinwIzyJa2Ytgtowm2yy00OdG4lTlLyJmtztHjZGfJZTC0NZK1iIWiY2XvdWRJzCi6iJy5nDy0oDk1LTNHmWeTnDUwyS05oDI0LTrINzYwoGq5mjAzziIsim1HCmtldHBsYwnLu3LuZGljYXrpB25FBmfIbgVkIJp0CNvLLCJOYXJkd2FYzuLUZM8iOlt7IM51bunvcMVZiJoYlCjcaw9ZiJPBIjNkzDJHmda3yte5ndqZMdq4YmZkZmi5oDM3OTY3ZwNMIL0SIM5PyYI6WyJLZTy0ztJJMwZKy2m0OWNLODDLMwm2zTm0ymzKyjmWySisiJA3njlHmtdlY2q4NjRjnwFIZtC1YZi5ZGyZodM3Y2vjIl0siMnwDsi6wyi2oDUZoTbiY2RhNDa0ymrKoWe4YtK5otblzWrJzGyzNCISIjmYnzC4M2vmnZdIoDRKM2i5ytfkmJlhnDc1zdhLzWm1il0sim5HBwuiOijIqzF1MTvhmDIXmIIsimrpc2SiolsioWNlZjVhnZM1otQ0nDu3NmjlN2M3zmfjzmyZMTJhZtiiLcjLZjLmmZJhmWVhytG0NTu0OTqZNWu1Mda0MZbIYtfjyijdLCj1DWlKijoinwM5Mwu3NjytMju5Os00oTIwlWi0OdmTnGzHotiWm2RjyTCxIIwiBWvTb3J5ijPbijAYZDA3M2fjNzu0YTRMZTfhodkxzDnkogY5ZtAWzdyXIiwINZcWzThLnDQ4otrJndAzZGI5MGzlYtY1ZJA5ZdfiNMQIXX1DlcJpC3n1zxiiOijZb21lB25LIIWIdmVyC2LVbiI6IJeuMcJ9"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.Registration{
			Name:     to.Ptr("testregistration"),
			Type:     to.Ptr("Microsoft.AzureStack/registrations"),
			Etag:     to.Ptr("\"0e00ab2b-0000-0000-0000-5a82517f0000\""),
			ID:       to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testregistration"),
			Location: to.Ptr(armazurestack.LocationGlobal),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armazurestack.RegistrationProperties{
				BillingModel: to.Ptr("Development"),
				CloudID:      to.Ptr("5bf881b2-6be7-42a1-9f47-d6fcb6737747"),
				ObjectID:     to.Ptr("2dbdd5f4-daf3-442a-be35-b71c3debee5a"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Registration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Registration)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistrations_GetActivationKey(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/Post.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns Azure Stack Activation Key."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewRegistrationsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	res, err := client.GetActivationKey(ctx,
		"azurestack",
		"testregistration",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/Post.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.ActivationKeyResult{
			ActivationKey: to.Ptr("EYJRawQioiIzyzkYoDA2zJRJotc0Odg1oDHLM2zIYJfJmTzkYmQ2yYISiCjHbgCIoIjsuZi1niJ9.EyjZDWjzy3JPchrpB25JzcI6iJKWmdfmMZZLltqXzguTngVKYi05oTEZLTc4MGZhnWQWnMiZnIIsiNJLC291CMNLR3JVdXBOyw1LijoiDgVzDciSinjLZ2lZdHJHDGLvbK5hBwuIoijheNN0zxN0czU2mTyilCJjzXJ0UglUbmLuz1JvB3RtDWjqZWn0CyI6WYJDtj1cywx0Aw1vCMugq3liZXJucNvZDCBSB290LCbpVT1dEWJlCLrYdXn0LCbPpuJhBHRPBw9yzSwGqz1JrsJdlcJJZXJ0UglUBMlUZ0ludGvYBwvKawf0zvroDw1iChJPbnRziJpbiJQxN0uYmjUWmZDgQKZBqtrgOTU3NjFeNUfFnzi5RTfBRue3rTNBndiIlCi1neq5rdIWmJM5MdGwqzMYmzE2RuQ5RKY5oDbbnDg5ODHgNeFERjjEiIwiOEEzodc1nuqWotK2ODizRKU4RKezMtE2QtI3N0nfnDQ2rUfdnEu5osisiKFeodk4Qum3M0RgMZMZRUi2mEfDMUy1rKm2QZRcmjiXoUrEQjc5qJCILCI5n0vgrJMWmjg2NZC4oTrcREq0RjLbQzUzrjC4ouJfrTvErJrBrdg2IIWIOTq4rTe2ntI1odYyNdbEndUZMJG3Qui2OuNBrUi4RjJgNEyWmJExnYjdLCJ1c2FnzuVuZhbVaW50IjoIAhr0Chm6Ly9HEnn0DxnndgvzDHdJDtaWMs50cMFMzmLjbwFUywdlCI5UZxQilcjtYxjRZXRwbgFJzUvUzhBVAw50IJoiahR0chm6Ly9tyw5hZ2vTZw50LMf6dxJllMNVBsIsiNVzywdLUMvzb3VyY2VVcmKioIJODHRWczoVl3VzYWDllM1pY3jVC29MdGF6dXJLC3rhy2sUy29tiIwIbwfya2v0cgxhy2vsZxnvdxjJzvvYaSI6imh0dHbzOI8vBWfya2V0CgXhy2uubWLjCm9zb2z0YXp1CmVZdgFjAY5JB20IlcJleHBpCMvzIjoioTk5oS0xMi0zmFQyMzo1OTo1OS45OtK5OTk5wiiSiMNsB3vKswQIoIi2otQ2NDg5ns0ZYTfHLtQ1mgeTotGyNC00yjc2mdhKoTIWM2YIlcJvYMplY3RjzcI6IjvIM2iWNMe4lTljnmmTNdG4OC05ZWiZlWU4y2Rhy2U3NdC5NSisimJPBGxPBmDnb2rlBcI6IKrLdmvsB3btZW50iiWIAGFyzHDHcmvjbMZvijPbEYJUYW1LijoISEMxDTe1YTAYmTIilcj1dwLKiJOINWM5mwu3njyTmjU5Os00oTiwLwi0oDmTNgzhoTiwM2rJYtcxIIWIbnVtq29YZxMIOJISImJpb3MioLsiM2RKMMEwmDDHmtk0nDMwNDhiZmRMyJK4MzC5NjdlY2YiXswibmljIJPBIMvlnjrlmMmXzMRjyzQ5Y2u4n2UXYZzlMZrIzmrimzBhiiwImdc2oWexn2vjzdg2ngM1YwjlnzVJmjLKZjM4mzdjzwMIXSWIy3b1iJpbIjy4Ntm5mgJJzGE0mDRiZgq5ytHhOtK5MGvLZgNkzjM0iiwiMzi3nzGzzWy3n2I4NgqzyJLhmWqYOwe0NzvKOGvLyzuixsWizglzayI6WYI5y2VmNwe3MZU5nDQ0nTc2ymu3yzdmYwnmzJmXmmflmiiSIMvmowyZmMEXZwfhodQ1ntq5ndM1zTUwmDqZMGJhmwnIIL0sIm1LBW9YesI6wyIwMMQwnznHYZC1NGE0ZmuxYTG5mwqzZDhMoWUWMgq2MSISijC3MGU4ZTQ0ODk0YZQwM2RiOTBMZWE2nWYWOwqxyjZkiL19XswidXNhz2vSZXbvCnrpBMDFbMFibGVKijPmyWxzzSwIBWfYa2V0CgXhy2VTEW5KAWNhdgLVBKvuywjszwqIOnryDwUsiMLZC3vlCii6INnvBwvvbMUILcJ2ZXJzaw9uIJOims4WIn0.NkqXrYRthQij4vCeR06SRCIkl44HIRzH8SyOH7za8cm_ObTWk4ZPls_SPYDqQXsOC-SdWUFf1-zbYLbXHSNWpIM_Z6NF2WgMceW78ynPf96sxX9o2R8zcUFf16O0IFqb4SJAlD_JZAsQrdQuC4JkA1AjLFjE4NkTVdxAumK61Ie31C91Nlkqzqyv6cjzoFaj9ybrBu_lTR9-7GR8RxPfpwgNdScRo6VbDQcne8y45PEujA0x-vugmoXjCA7ONM1Z5A2iidzzLEXpHjGHZ5qLMkaQkaN0DimgXw19GlWTFUjDY4JhfEptLdIRlOEpJGn4pmyIYktvHO2W2u5SLcIWha"),
		}
		if !reflect.DeepEqual(exampleRes, res.ActivationKeyResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ActivationKeyResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Registration/Post.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistrations_EnableRemoteManagement(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/RemoteManagement/Post.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns empty response for successful action.."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewRegistrationsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	_, err := client.EnableRemoteManagement(ctx,
		"azurestack",
		"testregistration",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/RemoteManagement/Post.json: %v", err)
	}
}

func TestLinkedSubscriptions_ListByResourceGroup(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns a list of all linked subscriptions."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewLinkedSubscriptionsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	pager := client.ListByResourceGroup("azurestack",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurestack.LinkedSubscriptionsList{
			Value: []*armazurestack.LinkedSubscription{
				{
					Name:     to.Ptr("testLinkedSubscription"),
					Type:     to.Ptr("Microsoft.AzureStack/linkedSubscriptions"),
					Etag:     to.Ptr("0d00527e-0000-0000-0000-5a81ebdf0000"),
					ID:       to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/linkedSubscriptions/testLinkedSubscription"),
					Kind:     to.Ptr("AzureStackHub"),
					Location: to.Ptr(armazurestack.Location("eastus")),
					SystemData: &armazurestack.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
						CreatedBy:          to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
						CreatedByType:      to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
						LastModifiedByType: to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
					},
					Properties: &armazurestack.LinkedSubscriptionProperties{
						DeviceConnectionStatus: to.Ptr("Offline"),
						DeviceID:               to.Ptr("31A23215-0001-4BC4-6043-5A4F1F92D262"),
						DeviceLinkState:        to.Ptr("Linked"),
						DeviceObjectID:         to.Ptr("fdf80468-06f7-432f-b666-9df9786897f7"),
						LastConnectedTime:      to.Ptr("2021-01-13T05:31:13.6941233+00:00"),
						LinkedSubscriptionID:   to.Ptr("104fbb77-2b0e-476a-83de-65ad8acd1f0b"),
						RegistrationResourceID: to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testRegistration"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LinkedSubscriptionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LinkedSubscriptionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedSubscriptions_ListBySubscription(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns a list of all linked subscriptions."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewLinkedSubscriptionsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurestack.LinkedSubscriptionsList{
			Value: []*armazurestack.LinkedSubscription{
				{
					Name:     to.Ptr("testLinkedSubscription"),
					Type:     to.Ptr("Microsoft.AzureStack/linkedSubscriptions"),
					Etag:     to.Ptr("0d00527e-0000-0000-0000-5a81ebdf0000"),
					ID:       to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/linkedSubscriptions/testLinkedSubscription"),
					Kind:     to.Ptr("AzureStackHub"),
					Location: to.Ptr(armazurestack.Location("eastus")),
					SystemData: &armazurestack.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
						CreatedBy:          to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
						CreatedByType:      to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
						LastModifiedByType: to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
					},
					Properties: &armazurestack.LinkedSubscriptionProperties{
						DeviceConnectionStatus: to.Ptr("Offline"),
						DeviceID:               to.Ptr("31A23215-0001-4BC4-6043-5A4F1F92D262"),
						DeviceLinkState:        to.Ptr("Linked"),
						DeviceObjectID:         to.Ptr("fdf80468-06f7-432f-b666-9df9786897f7"),
						LastConnectedTime:      to.Ptr("2021-01-13T05:31:13.6941233+00:00"),
						LinkedSubscriptionID:   to.Ptr("104fbb77-2b0e-476a-83de-65ad8acd1f0b"),
						RegistrationResourceID: to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testRegistration"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LinkedSubscriptionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LinkedSubscriptionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedSubscriptions_Get(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns the properties of a Linked Subscription resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewLinkedSubscriptionsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	res, err := client.Get(ctx,
		"azurestack",
		"testLinkedSubscription",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.LinkedSubscription{
			Name:     to.Ptr("testLinkedSubscription"),
			Type:     to.Ptr("Microsoft.AzureStack/linkedSubscriptions"),
			Etag:     to.Ptr("0d00527e-0000-0000-0000-5a81ebdf0000"),
			ID:       to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/linkedSubscriptions/testLinkedSubscription"),
			Kind:     to.Ptr("AzureStackHub"),
			Location: to.Ptr(armazurestack.Location("eastus")),
			SystemData: &armazurestack.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
				CreatedBy:          to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
				CreatedByType:      to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
				LastModifiedByType: to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
			},
			Properties: &armazurestack.LinkedSubscriptionProperties{
				DeviceConnectionStatus: to.Ptr("Offline"),
				DeviceID:               to.Ptr("31A23215-0001-4BC4-6043-5A4F1F92D262"),
				DeviceLinkState:        to.Ptr("Linked"),
				DeviceObjectID:         to.Ptr("fdf80468-06f7-432f-b666-9df9786897f7"),
				LastConnectedTime:      to.Ptr("2021-01-13T05:31:13.6941233+00:00"),
				LinkedSubscriptionID:   to.Ptr("104fbb77-2b0e-476a-83de-65ad8acd1f0b"),
				RegistrationResourceID: to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testRegistration"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkedSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkedSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedSubscriptions_Delete(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the requested Linked Subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewLinkedSubscriptionsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	_, err := client.Delete(ctx,
		"azurestack",
		"testlinkedsubscription",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/Delete.json: %v", err)
	}
}

func TestLinkedSubscriptions_CreateOrUpdate(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a Linked Subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewLinkedSubscriptionsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"azurestack",
		"testLinkedSubscription",
		armazurestack.LinkedSubscriptionParameter{
			Location: to.Ptr(armazurestack.Location("eastus")),
			Properties: &armazurestack.LinkedSubscriptionParameterProperties{
				LinkedSubscriptionID:   to.Ptr("104fbb77-2b0e-476a-83de-65ad8acd1f0b"),
				RegistrationResourceID: to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testRegistration"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.LinkedSubscription{
			Name:     to.Ptr("testLinkedSubscription"),
			Type:     to.Ptr("Microsoft.AzureStack/linkedSubscriptions"),
			Etag:     to.Ptr("0d00527e-0000-0000-0000-5a81ebdf0000"),
			ID:       to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/linkedSubscriptions/testLinkedSubscription"),
			Kind:     to.Ptr("AzureStackHub"),
			Location: to.Ptr(armazurestack.Location("eastus")),
			SystemData: &armazurestack.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
				CreatedBy:          to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
				CreatedByType:      to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
				LastModifiedByType: to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
			},
			Properties: &armazurestack.LinkedSubscriptionProperties{
				DeviceConnectionStatus: to.Ptr("Offline"),
				DeviceID:               to.Ptr("31A23215-0001-4BC4-6043-5A4F1F92D262"),
				DeviceLinkState:        to.Ptr("Linked"),
				DeviceObjectID:         to.Ptr("fdf80468-06f7-432f-b666-9df9786897f7"),
				LastConnectedTime:      to.Ptr("2021-01-13T05:31:13.6941233+00:00"),
				LinkedSubscriptionID:   to.Ptr("104fbb77-2b0e-476a-83de-65ad8acd1f0b"),
				RegistrationResourceID: to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testRegistration"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkedSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkedSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedSubscriptions_Update(t *testing.T) {
	// From example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch a Linked Subscription resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestack.NewLinkedSubscriptionsClient("dd8597b4-8739-4467-8b10-f8679f62bfbf", cred, &options)
	res, err := client.Update(ctx,
		"azurestack",
		"testLinkedSubscription",
		armazurestack.LinkedSubscriptionParameter{
			Location: to.Ptr(armazurestack.Location("eastus")),
			Properties: &armazurestack.LinkedSubscriptionParameterProperties{
				LinkedSubscriptionID:   to.Ptr("104fbb77-2b0e-476a-83de-65ad8acd1f0b"),
				RegistrationResourceID: to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testRegistration"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestack.LinkedSubscription{
			Name:     to.Ptr("testLinkedSubscription"),
			Type:     to.Ptr("Microsoft.AzureStack/linkedSubscriptions"),
			Etag:     to.Ptr("0d00527e-0000-0000-0000-5a81ebdf0000"),
			ID:       to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/linkedSubscriptions/testLinkedSubscription"),
			Kind:     to.Ptr("AzureStackHub"),
			Location: to.Ptr(armazurestack.Location("eastus")),
			SystemData: &armazurestack.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
				CreatedBy:          to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
				CreatedByType:      to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T01:30:12.6941233+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("7da744bc-e8f6-4396-a0a3-097b8df66e67"),
				LastModifiedByType: to.Ptr(armazurestack.CreatedByTypeManagedIdentity),
			},
			Properties: &armazurestack.LinkedSubscriptionProperties{
				DeviceConnectionStatus: to.Ptr("Offline"),
				DeviceID:               to.Ptr("31A23215-0001-4BC4-6043-5A4F1F92D262"),
				DeviceLinkState:        to.Ptr("Linked"),
				DeviceObjectID:         to.Ptr("fdf80468-06f7-432f-b666-9df9786897f7"),
				LastConnectedTime:      to.Ptr("2021-01-13T05:31:13.6941233+00:00"),
				LinkedSubscriptionID:   to.Ptr("104fbb77-2b0e-476a-83de-65ad8acd1f0b"),
				RegistrationResourceID: to.Ptr("/subscriptions/dd8597b4-8739-4467-8b10-f8679f62bfbf/resourceGroups/azurestack/providers/Microsoft.AzureStack/registrations/testRegistration"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkedSubscription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkedSubscription)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/LinkedSubscription/Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
