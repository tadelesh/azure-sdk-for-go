//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcontainerregistry

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestConnectedRegistries_Get(t *testing.T) {
	// From example ConnectedRegistryGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectedRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myConnectedRegistry",
		&ConnectedRegistriesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectedRegistry.ID == nil {
		t.Fatal("ConnectedRegistry.ID should not be nil!")
	}
}

func TestConnectedRegistries_Create(t *testing.T) {
	// From example ConnectedRegistryCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectedRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myConnectedRegistry",
		ConnectedRegistry{
			Properties: &ConnectedRegistryProperties{
				ClientTokenIDs: []*string{
					to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token")},
				Mode: ConnectedRegistryModeRegistry.ToPtr(),
				Parent: &ParentProperties{
					SyncProperties: &SyncProperties{
						MessageTTL: to.StringPtr("P2D"),
						Schedule:   to.StringPtr("0 9 * * *"),
						SyncWindow: to.StringPtr("PT3H"),
						TokenID:    to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/syncToken"),
					},
				},
			},
		},
		&ConnectedRegistriesBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectedRegistry.ID == nil {
		t.Fatal("ConnectedRegistry.ID should not be nil!")
	}
}

func TestConnectedRegistries_Delete(t *testing.T) {
	// From example ConnectedRegistryDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectedRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myConnectedRegistry",
		&ConnectedRegistriesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestConnectedRegistries_Update(t *testing.T) {
	// From example ConnectedRegistryUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectedRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myScopeMap",
		ConnectedRegistryUpdateParameters{
			Properties: &ConnectedRegistryUpdateProperties{
				ClientTokenIDs: []*string{
					to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token"),
					to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client2Token")},
				Logging: &LoggingProperties{
					AuditLogStatus: AuditLogStatusEnabled.ToPtr(),
					LogLevel:       LogLevelDebug.ToPtr(),
				},
				SyncProperties: &SyncUpdateProperties{
					MessageTTL: to.StringPtr("P30D"),
					Schedule:   to.StringPtr("0 0 */10 * *"),
					SyncWindow: to.StringPtr("P2D"),
				},
			},
		},
		&ConnectedRegistriesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectedRegistry.ID == nil {
		t.Fatal("ConnectedRegistry.ID should not be nil!")
	}
}

func TestConnectedRegistries_List(t *testing.T) {
	// From example ConnectedRegistryList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectedRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myRegistry",
		&ConnectedRegistriesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ConnectedRegistry.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ConnectedRegistry.ID should not be nil!")
			}
		}
	}
}

func TestConnectedRegistries_Deactivate(t *testing.T) {
	// From example ConnectedRegistryDeactivate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectedRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDeactivate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myConnectedRegistry",
		&ConnectedRegistriesBeginDeactivateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExportPipelines_Get(t *testing.T) {
	// From example ExportPipelineGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExportPipelinesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myExportPipeline",
		&ExportPipelinesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExportPipeline.ID == nil {
		t.Fatal("ExportPipeline.ID should not be nil!")
	}
}

func TestExportPipelines_Create(t *testing.T) {
	// From example ExportPipelineCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExportPipelinesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myExportPipeline",
		ExportPipeline{
			Identity: &IdentityProperties{
				Type: ResourceIdentityTypeSystemAssigned.ToPtr(),
			},
			Location: to.StringPtr("westus"),
			Properties: &ExportPipelineProperties{
				Options: []*PipelineOptions{
					PipelineOptionsOverwriteBlobs.ToPtr()},
				Target: &ExportPipelineTargetProperties{
					Type:        to.StringPtr("AzureStorageBlobContainer"),
					KeyVaultURI: to.StringPtr("https://myvault.vault.azure.net/secrets/acrexportsas"),
					URI:         to.StringPtr("https://accountname.blob.core.windows.net/containername"),
				},
			},
		},
		&ExportPipelinesBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExportPipeline.ID == nil {
		t.Fatal("ExportPipeline.ID should not be nil!")
	}
}

func TestExportPipelines_Delete(t *testing.T) {
	// From example ExportPipelineDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExportPipelinesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myExportPipeline",
		&ExportPipelinesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExportPipelines_List(t *testing.T) {
	// From example ExportPipelineList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExportPipelinesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myRegistry",
		&ExportPipelinesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExportPipeline.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExportPipeline.ID should not be nil!")
			}
		}
	}
}

func TestRegistries_ImportImage(t *testing.T) {
	// From example ImportImageByManifestDigest
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginImportImage(ctx,
		"myResourceGroup",
		"myRegistry",
		ImportImageParameters{
			Mode: ImportModeForce.ToPtr(),
			Source: &ImportSource{
				ResourceID:  to.StringPtr("/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/sourceResourceGroup/providers/Microsoft.ContainerRegistry/registries/sourceRegistry"),
				SourceImage: to.StringPtr("sourceRepository@sha256:0000000000000000000000000000000000000000000000000000000000000000"),
			},
			TargetTags: []*string{
				to.StringPtr("targetRepository:targetTag")},
			UntaggedTargetRepositories: []*string{
				to.StringPtr("targetRepository1")},
		},
		&RegistriesBeginImportImageOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example ImportImageByTag
	poller, err = client.BeginImportImage(ctx,
		"myResourceGroup",
		"myRegistry",
		ImportImageParameters{
			Mode: ImportModeForce.ToPtr(),
			Source: &ImportSource{
				ResourceID:  to.StringPtr("/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/sourceResourceGroup/providers/Microsoft.ContainerRegistry/registries/sourceRegistry"),
				SourceImage: to.StringPtr("sourceRepository:sourceTag"),
			},
			TargetTags: []*string{
				to.StringPtr("targetRepository:targetTag")},
			UntaggedTargetRepositories: []*string{
				to.StringPtr("targetRepository1")},
		},
		&RegistriesBeginImportImageOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example ImportImageFromPublicRegistry
	poller, err = client.BeginImportImage(ctx,
		"myResourceGroup",
		"myRegistry",
		ImportImageParameters{
			Mode: ImportModeForce.ToPtr(),
			Source: &ImportSource{
				RegistryURI: to.StringPtr("registry.hub.docker.com"),
				SourceImage: to.StringPtr("library/hello-world"),
			},
			TargetTags: []*string{
				to.StringPtr("targetRepository:targetTag")},
			UntaggedTargetRepositories: []*string{
				to.StringPtr("targetRepository1")},
		},
		&RegistriesBeginImportImageOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRegistries_CheckNameAvailability(t *testing.T) {
	// From example RegistryCheckNameAvailable
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.CheckNameAvailability(ctx,
		RegistryNameCheckRequest{
			Name: to.StringPtr("myRegistry"),
			Type: to.StringPtr("Microsoft.ContainerRegistry/registries"),
		},
		&RegistriesCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example RegistryCheckNameNotAvailable
	_, err = client.CheckNameAvailability(ctx,
		RegistryNameCheckRequest{
			Name: to.StringPtr("myRegistry"),
			Type: to.StringPtr("Microsoft.ContainerRegistry/registries"),
		},
		&RegistriesCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRegistries_Get(t *testing.T) {
	// From example RegistryGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		&RegistriesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Registry.ID == nil {
		t.Fatal("Registry.ID should not be nil!")
	}
}

func TestRegistries_Create(t *testing.T) {
	// From example RegistryCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		Registry{
			Resource: Resource{
				Location: to.StringPtr("westus"),
				Tags: map[string]*string{
					"key": to.StringPtr("value"),
				},
			},
			Properties: &RegistryProperties{
				AdminUserEnabled: to.BoolPtr(true),
			},
			SKU: &SKU{
				Name: SKUNameStandard.ToPtr(),
			},
		},
		&RegistriesBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Registry.ID == nil {
		t.Fatal("Registry.ID should not be nil!")
	}

	// From example RegistryCreateZoneRedundant
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		Registry{
			Resource: Resource{
				Location: to.StringPtr("westus"),
				Tags: map[string]*string{
					"key": to.StringPtr("value"),
				},
			},
			Properties: &RegistryProperties{
				ZoneRedundancy: ZoneRedundancyEnabled.ToPtr(),
			},
			SKU: &SKU{
				Name: SKUNameStandard.ToPtr(),
			},
		},
		&RegistriesBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Registry.ID == nil {
		t.Fatal("Registry.ID should not be nil!")
	}
}

func TestRegistries_Delete(t *testing.T) {
	// From example RegistryDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		&RegistriesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRegistries_Update(t *testing.T) {
	// From example RegistryUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		RegistryUpdateParameters{
			Properties: &RegistryPropertiesUpdateParameters{
				AdminUserEnabled: to.BoolPtr(true),
			},
			SKU: &SKU{
				Name: SKUNameStandard.ToPtr(),
			},
			Tags: map[string]*string{
				"key": to.StringPtr("value"),
			},
		},
		&RegistriesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Registry.ID == nil {
		t.Fatal("Registry.ID should not be nil!")
	}
}

func TestRegistries_ListByResourceGroup(t *testing.T) {
	// From example RegistryListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListByResourceGroup("myResourceGroup",
		&RegistriesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Registry.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Registry.ID should not be nil!")
			}
		}
	}
}

func TestRegistries_List(t *testing.T) {
	// From example RegistryList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List(&RegistriesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Registry.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Registry.ID should not be nil!")
			}
		}
	}
}

func TestRegistries_ListCredentials(t *testing.T) {
	// From example RegistryListCredentials
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.ListCredentials(ctx,
		"myResourceGroup",
		"myRegistry",
		&RegistriesListCredentialsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRegistries_RegenerateCredential(t *testing.T) {
	// From example RegistryRegenerateCredential
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.RegenerateCredential(ctx,
		"myResourceGroup",
		"myRegistry",
		RegenerateCredentialParameters{
			Name: PasswordNamePassword.ToPtr(),
		},
		&RegistriesRegenerateCredentialOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRegistries_ListUsages(t *testing.T) {
	// From example RegistryListUsages
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.ListUsages(ctx,
		"myResourceGroup",
		"myRegistry",
		&RegistriesListUsagesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRegistries_ListPrivateLinkResources(t *testing.T) {
	// From example RegistryListPrivateLinkResources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListPrivateLinkResources("myResourceGroup",
		"myRegistry",
		&RegistriesListPrivateLinkResourcesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestRegistries_GenerateCredentials(t *testing.T) {
	// From example RegistryGenerateCredentials
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginGenerateCredentials(ctx,
		"myResourceGroup",
		"myRegistry",
		GenerateCredentialsParameters{
			Expiry:  to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T15:59:59.0707808Z"); return t }()),
			TokenID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/myToken"),
		},
		&RegistriesBeginGenerateCredentialsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRegistries_ScheduleRun(t *testing.T) {
	// From example Registries_ScheduleRun
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginScheduleRun(ctx,
		"myResourceGroup",
		"myRegistry",
		DockerBuildRequest{
			RunRequest: RunRequest{
				Type:             to.StringPtr("DockerBuildRequest"),
				IsArchiveEnabled: to.BoolPtr(true),
			},
			AgentConfiguration: &AgentProperties{
				CPU: to.Int32Ptr(2),
			},
			Arguments: []*Argument{
				{
					Name:     to.StringPtr("mytestargument"),
					IsSecret: to.BoolPtr(false),
					Value:    to.StringPtr("mytestvalue"),
				},
				{
					Name:     to.StringPtr("mysecrettestargument"),
					IsSecret: to.BoolPtr(true),
					Value:    to.StringPtr("mysecrettestvalue"),
				}},
			DockerFilePath: to.StringPtr("DockerFile"),
			ImageNames: []*string{
				to.StringPtr("azurerest:testtag")},
			IsPushEnabled: to.BoolPtr(true),
			NoCache:       to.BoolPtr(true),
			Platform: &PlatformProperties{
				Architecture: ArchitectureAmd64.ToPtr(),
				OS:           OSLinux.ToPtr(),
			},
			SourceLocation: to.StringPtr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
		},
		&RegistriesBeginScheduleRunOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Run.ID == nil {
		t.Fatal("Run.ID should not be nil!")
	}

	// From example Registries_ScheduleRun_EncodedTaskRun
	poller, err = client.BeginScheduleRun(ctx,
		"myResourceGroup",
		"myRegistry",
		EncodedTaskRunRequest{
			RunRequest: RunRequest{
				Type: to.StringPtr("EncodedTaskRunRequest"),
			},
			AgentConfiguration: &AgentProperties{
				CPU: to.Int32Ptr(2),
			},
			EncodedTaskContent:   to.StringPtr("c3RlcHM6Cnt7IGlmIFZhbHVlcy5lbnZpcm9ubWVudCA9PSAncHJvZCcgfX0KICAtIHJ1bjogcHJvZCBzZXR1cAp7eyBlbHNlIGlmIFZhbHVlcy5lbnZpcm9ubWVudCA9PSAnc3RhZ2luZycgfX0KICAtIHJ1bjogc3RhZ2luZyBzZXR1cAp7eyBlbHNlIH19CiAgLSBydW46IGRlZmF1bHQgc2V0dXAKe3sgZW5kIH19CgogIC0gcnVuOiBidWlsZCAtdCBGYW5jeVRoaW5nOnt7LlZhbHVlcy5lbnZpcm9ubWVudH19LXt7LlZhbHVlcy52ZXJzaW9ufX0gLgoKcHVzaDogWydGYW5jeVRoaW5nOnt7LlZhbHVlcy5lbnZpcm9ubWVudH19LXt7LlZhbHVlcy52ZXJzaW9ufX0nXQ=="),
			EncodedValuesContent: to.StringPtr("ZW52aXJvbm1lbnQ6IHByb2QKdmVyc2lvbjogMQ=="),
			Platform: &PlatformProperties{
				OS: OSLinux.ToPtr(),
			},
			Values: []*SetValue{
				{
					Name:     to.StringPtr("mytestargument"),
					IsSecret: to.BoolPtr(false),
					Value:    to.StringPtr("mytestvalue"),
				},
				{
					Name:     to.StringPtr("mysecrettestargument"),
					IsSecret: to.BoolPtr(true),
					Value:    to.StringPtr("mysecrettestvalue"),
				}},
		},
		&RegistriesBeginScheduleRunOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Run.ID == nil {
		t.Fatal("Run.ID should not be nil!")
	}

	// From example Registries_ScheduleRun_FileTaskRun
	poller, err = client.BeginScheduleRun(ctx,
		"myResourceGroup",
		"myRegistry",
		FileTaskRunRequest{
			RunRequest: RunRequest{
				Type: to.StringPtr("FileTaskRunRequest"),
			},
			AgentConfiguration: &AgentProperties{
				CPU: to.Int32Ptr(2),
			},
			Platform: &PlatformProperties{
				OS: OSLinux.ToPtr(),
			},
			SourceLocation: to.StringPtr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
			TaskFilePath:   to.StringPtr("acb.yaml"),
			Values: []*SetValue{
				{
					Name:     to.StringPtr("mytestargument"),
					IsSecret: to.BoolPtr(false),
					Value:    to.StringPtr("mytestvalue"),
				},
				{
					Name:     to.StringPtr("mysecrettestargument"),
					IsSecret: to.BoolPtr(true),
					Value:    to.StringPtr("mysecrettestvalue"),
				}},
			ValuesFilePath: to.StringPtr("prod-values.yaml"),
		},
		&RegistriesBeginScheduleRunOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Run.ID == nil {
		t.Fatal("Run.ID should not be nil!")
	}

	// From example Registries_ScheduleRun_Task
	poller, err = client.BeginScheduleRun(ctx,
		"myResourceGroup",
		"myRegistry",
		TaskRunRequest{
			RunRequest: RunRequest{
				Type: to.StringPtr("TaskRunRequest"),
			},
			OverrideTaskStepProperties: &OverrideTaskStepProperties{
				Arguments: []*Argument{
					{
						Name:     to.StringPtr("mytestargument"),
						IsSecret: to.BoolPtr(false),
						Value:    to.StringPtr("mytestvalue"),
					},
					{
						Name:     to.StringPtr("mysecrettestargument"),
						IsSecret: to.BoolPtr(true),
						Value:    to.StringPtr("mysecrettestvalue"),
					}},
				File:               to.StringPtr("overriddenDockerfile"),
				Target:             to.StringPtr("build"),
				UpdateTriggerToken: to.StringPtr("aGVsbG8gd29ybGQ="),
				Values: []*SetValue{
					{
						Name:     to.StringPtr("mytestname"),
						IsSecret: to.BoolPtr(false),
						Value:    to.StringPtr("mytestvalue"),
					},
					{
						Name:     to.StringPtr("mysecrettestname"),
						IsSecret: to.BoolPtr(true),
						Value:    to.StringPtr("mysecrettestvalue"),
					}},
			},
			TaskID: to.StringPtr("myTask"),
		},
		&RegistriesBeginScheduleRunOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Run.ID == nil {
		t.Fatal("Run.ID should not be nil!")
	}

	// From example Registries_ScheduleRun_Task_WithCustomCredentials
	poller, err = client.BeginScheduleRun(ctx,
		"myResourceGroup",
		"myRegistry",
		FileTaskRunRequest{
			RunRequest: RunRequest{
				Type: to.StringPtr("FileTaskRunRequest"),
			},
			Credentials: &Credentials{
				CustomRegistries: map[string]*CustomRegistryCredentials{
					"myregistry.azurecr.io": &CustomRegistryCredentials{
						Password: &SecretObject{
							Type:  SecretObjectTypeOpaque.ToPtr(),
							Value: to.StringPtr("***"),
						},
						UserName: &SecretObject{
							Type:  SecretObjectTypeOpaque.ToPtr(),
							Value: to.StringPtr("reg1"),
						},
					},
				},
				SourceRegistry: &SourceRegistryCredentials{
					LoginMode: SourceRegistryLoginModeDefault.ToPtr(),
				},
			},
			Platform: &PlatformProperties{
				OS: OSLinux.ToPtr(),
			},
			TaskFilePath: to.StringPtr("acb.yaml"),
			Values: []*SetValue{
				{
					Name:     to.StringPtr("mytestargument"),
					IsSecret: to.BoolPtr(false),
					Value:    to.StringPtr("mytestvalue"),
				},
				{
					Name:     to.StringPtr("mysecrettestargument"),
					IsSecret: to.BoolPtr(true),
					Value:    to.StringPtr("mysecrettestvalue"),
				}},
		},
		&RegistriesBeginScheduleRunOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Run.ID == nil {
		t.Fatal("Run.ID should not be nil!")
	}

	// From example Registries_ScheduleRun_WithCustomCredentials
	poller, err = client.BeginScheduleRun(ctx,
		"myResourceGroup",
		"myRegistry",
		DockerBuildRequest{
			RunRequest: RunRequest{
				Type:             to.StringPtr("DockerBuildRequest"),
				IsArchiveEnabled: to.BoolPtr(true),
			},
			AgentConfiguration: &AgentProperties{
				CPU: to.Int32Ptr(2),
			},
			Arguments: []*Argument{
				{
					Name:     to.StringPtr("mytestargument"),
					IsSecret: to.BoolPtr(false),
					Value:    to.StringPtr("mytestvalue"),
				},
				{
					Name:     to.StringPtr("mysecrettestargument"),
					IsSecret: to.BoolPtr(true),
					Value:    to.StringPtr("mysecrettestvalue"),
				}},
			Credentials: &Credentials{
				CustomRegistries: map[string]*CustomRegistryCredentials{
					"myregistry.azurecr.io": &CustomRegistryCredentials{
						Password: &SecretObject{
							Type:  SecretObjectTypeOpaque.ToPtr(),
							Value: to.StringPtr("***"),
						},
						UserName: &SecretObject{
							Type:  SecretObjectTypeOpaque.ToPtr(),
							Value: to.StringPtr("reg1"),
						},
					},
					"myregistry2.azurecr.io": &CustomRegistryCredentials{
						Password: &SecretObject{
							Type:  SecretObjectTypeOpaque.ToPtr(),
							Value: to.StringPtr("***"),
						},
						UserName: &SecretObject{
							Type:  SecretObjectTypeOpaque.ToPtr(),
							Value: to.StringPtr("reg2"),
						},
					},
				},
				SourceRegistry: &SourceRegistryCredentials{
					LoginMode: SourceRegistryLoginModeDefault.ToPtr(),
				},
			},
			DockerFilePath: to.StringPtr("DockerFile"),
			ImageNames: []*string{
				to.StringPtr("azurerest:testtag")},
			IsPushEnabled: to.BoolPtr(true),
			NoCache:       to.BoolPtr(true),
			Platform: &PlatformProperties{
				Architecture: ArchitectureAmd64.ToPtr(),
				OS:           OSLinux.ToPtr(),
			},
			SourceLocation: to.StringPtr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
			Target:         to.StringPtr("stage1"),
		},
		&RegistriesBeginScheduleRunOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Run.ID == nil {
		t.Fatal("Run.ID should not be nil!")
	}

	// From example Registries_ScheduleRun_WithLogTemplate
	poller, err = client.BeginScheduleRun(ctx,
		"myResourceGroup",
		"myRegistry",
		DockerBuildRequest{
			RunRequest: RunRequest{
				Type:             to.StringPtr("DockerBuildRequest"),
				IsArchiveEnabled: to.BoolPtr(true),
				LogTemplate:      to.StringPtr("acr/tasks:{{.Run.OS}}"),
			},
			AgentConfiguration: &AgentProperties{
				CPU: to.Int32Ptr(2),
			},
			Arguments: []*Argument{
				{
					Name:     to.StringPtr("mytestargument"),
					IsSecret: to.BoolPtr(false),
					Value:    to.StringPtr("mytestvalue"),
				},
				{
					Name:     to.StringPtr("mysecrettestargument"),
					IsSecret: to.BoolPtr(true),
					Value:    to.StringPtr("mysecrettestvalue"),
				}},
			DockerFilePath: to.StringPtr("DockerFile"),
			ImageNames: []*string{
				to.StringPtr("azurerest:testtag")},
			IsPushEnabled: to.BoolPtr(true),
			NoCache:       to.BoolPtr(true),
			Platform: &PlatformProperties{
				Architecture: ArchitectureAmd64.ToPtr(),
				OS:           OSLinux.ToPtr(),
			},
			SourceLocation: to.StringPtr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
		},
		&RegistriesBeginScheduleRunOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Run.ID == nil {
		t.Fatal("Run.ID should not be nil!")
	}
}

func TestRegistries_GetBuildSourceUploadUrl(t *testing.T) {
	// From example Registries_GetBuildSourceUploadUrl
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistriesClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.GetBuildSourceUploadURL(ctx,
		"myResourceGroup",
		"myRegistry",
		&RegistriesGetBuildSourceUploadURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestImportPipelines_Get(t *testing.T) {
	// From example ImportPipelineGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewImportPipelinesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myImportPipeline",
		&ImportPipelinesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ImportPipeline.ID == nil {
		t.Fatal("ImportPipeline.ID should not be nil!")
	}
}

func TestImportPipelines_Create(t *testing.T) {
	// From example ImportPipelineCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewImportPipelinesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myImportPipeline",
		ImportPipeline{
			Identity: &IdentityProperties{
				Type: ResourceIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserIdentityProperties{
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &UserIdentityProperties{},
				},
			},
			Location: to.StringPtr("westus"),
			Properties: &ImportPipelineProperties{
				Options: []*PipelineOptions{
					PipelineOptionsOverwriteTags.ToPtr(),
					PipelineOptionsDeleteSourceBlobOnSuccess.ToPtr(),
					PipelineOptionsContinueOnErrors.ToPtr()},
				Source: &ImportPipelineSourceProperties{
					Type:        PipelineSourceTypeAzureStorageBlobContainer.ToPtr(),
					KeyVaultURI: to.StringPtr("https://myvault.vault.azure.net/secrets/acrimportsas"),
					URI:         to.StringPtr("https://accountname.blob.core.windows.net/containername"),
				},
			},
		},
		&ImportPipelinesBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ImportPipeline.ID == nil {
		t.Fatal("ImportPipeline.ID should not be nil!")
	}
}

func TestImportPipelines_Delete(t *testing.T) {
	// From example ImportPipelineDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewImportPipelinesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myImportPipeline",
		&ImportPipelinesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestImportPipelines_List(t *testing.T) {
	// From example ImportPipelineList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewImportPipelinesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myRegistry",
		&ImportPipelinesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ImportPipeline.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ImportPipeline.ID should not be nil!")
			}
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example OperationList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestPipelineRuns_Get(t *testing.T) {
	// From example PipelineRunGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPipelineRunsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myPipelineRun",
		&PipelineRunsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PipelineRun.ID == nil {
		t.Fatal("PipelineRun.ID should not be nil!")
	}
}

func TestPipelineRuns_Create(t *testing.T) {
	// From example PipelineRunCreate_Export
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPipelineRunsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myPipelineRun",
		PipelineRun{
			Properties: &PipelineRunProperties{
				Request: &PipelineRunRequest{
					Artifacts: []*string{
						to.StringPtr("sourceRepository/hello-world"),
						to.StringPtr("sourceRepository2@sha256:00000000000000000000000000000000000")},
					PipelineResourceID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
					Target: &PipelineRunTargetProperties{
						Name: to.StringPtr("myblob.tar.gz"),
						Type: PipelineRunTargetTypeAzureStorageBlob.ToPtr(),
					},
				},
			},
		},
		&PipelineRunsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PipelineRun.ID == nil {
		t.Fatal("PipelineRun.ID should not be nil!")
	}

	// From example PipelineRunCreate_Import
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myPipelineRun",
		PipelineRun{
			Properties: &PipelineRunProperties{
				ForceUpdateTag: to.StringPtr("2020-03-04T17:23:21.9261521+00:00"),
				Request: &PipelineRunRequest{
					CatalogDigest:      to.StringPtr("sha256@"),
					PipelineResourceID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline"),
					Source: &PipelineRunSourceProperties{
						Name: to.StringPtr("myblob.tar.gz"),
						Type: PipelineRunSourceTypeAzureStorageBlob.ToPtr(),
					},
				},
			},
		},
		&PipelineRunsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PipelineRun.ID == nil {
		t.Fatal("PipelineRun.ID should not be nil!")
	}
}

func TestPipelineRuns_Delete(t *testing.T) {
	// From example PipelineRunDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPipelineRunsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myPipelineRun",
		&PipelineRunsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPipelineRuns_List(t *testing.T) {
	// From example PipelineRunList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPipelineRunsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myRegistry",
		&PipelineRunsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PipelineRun.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PipelineRun.ID should not be nil!")
			}
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example PrivateEndpointConnectionGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myConnection",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example PrivateEndpointConnectionCreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myConnection",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Auto-Approved"),
					Status:      ConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example PrivateEndpointConnectionDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myConnection",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example PrivateEndpointConnectionList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myRegistry",
		&PrivateEndpointConnectionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestReplications_Get(t *testing.T) {
	// From example ReplicationGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReplicationsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myReplication",
		&ReplicationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Replication.ID == nil {
		t.Fatal("Replication.ID should not be nil!")
	}
}

func TestReplications_Create(t *testing.T) {
	// From example ReplicationCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReplicationsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myReplication",
		Replication{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
				Tags: map[string]*string{
					"key": to.StringPtr("value"),
				},
			},
		},
		&ReplicationsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Replication.ID == nil {
		t.Fatal("Replication.ID should not be nil!")
	}

	// From example ReplicationCreateZoneRedundant
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myReplication",
		Replication{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
				Tags: map[string]*string{
					"key": to.StringPtr("value"),
				},
			},
			Properties: &ReplicationProperties{
				RegionEndpointEnabled: to.BoolPtr(true),
				ZoneRedundancy:        ZoneRedundancyEnabled.ToPtr(),
			},
		},
		&ReplicationsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Replication.ID == nil {
		t.Fatal("Replication.ID should not be nil!")
	}
}

func TestReplications_Delete(t *testing.T) {
	// From example ReplicationDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReplicationsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myReplication",
		&ReplicationsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestReplications_Update(t *testing.T) {
	// From example ReplicationUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReplicationsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myReplication",
		ReplicationUpdateParameters{
			Tags: map[string]*string{
				"key": to.StringPtr("value"),
			},
		},
		&ReplicationsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Replication.ID == nil {
		t.Fatal("Replication.ID should not be nil!")
	}
}

func TestReplications_List(t *testing.T) {
	// From example ReplicationList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReplicationsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myRegistry",
		&ReplicationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Replication.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Replication.ID should not be nil!")
			}
		}
	}
}

func TestScopeMaps_Get(t *testing.T) {
	// From example ScopeMapGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScopeMapsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myScopeMap",
		&ScopeMapsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ScopeMap.ID == nil {
		t.Fatal("ScopeMap.ID should not be nil!")
	}
}

func TestScopeMaps_Create(t *testing.T) {
	// From example ScopeMapCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScopeMapsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myScopeMap",
		ScopeMap{
			Properties: &ScopeMapProperties{
				Description: to.StringPtr("Developer Scopes"),
				Actions: []*string{
					to.StringPtr("repositories/myrepository/contentWrite"),
					to.StringPtr("repositories/myrepository/delete")},
			},
		},
		&ScopeMapsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ScopeMap.ID == nil {
		t.Fatal("ScopeMap.ID should not be nil!")
	}
}

func TestScopeMaps_Delete(t *testing.T) {
	// From example ScopeMapDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScopeMapsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myScopeMap",
		&ScopeMapsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestScopeMaps_Update(t *testing.T) {
	// From example ScopeMapUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScopeMapsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myScopeMap",
		ScopeMapUpdateParameters{
			Properties: &ScopeMapPropertiesUpdateParameters{
				Description: to.StringPtr("Developer Scopes"),
				Actions: []*string{
					to.StringPtr("repositories/myrepository/contentWrite"),
					to.StringPtr("repositories/myrepository/contentRead")},
			},
		},
		&ScopeMapsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ScopeMap.ID == nil {
		t.Fatal("ScopeMap.ID should not be nil!")
	}
}

func TestScopeMaps_List(t *testing.T) {
	// From example ScopeMapList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewScopeMapsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myRegistry",
		&ScopeMapsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ScopeMap.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ScopeMap.ID should not be nil!")
			}
		}
	}
}

func TestTokens_Get(t *testing.T) {
	// From example TokenGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTokensClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myToken",
		&TokensGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Token.ID == nil {
		t.Fatal("Token.ID should not be nil!")
	}
}

func TestTokens_Create(t *testing.T) {
	// From example TokenCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTokensClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myToken",
		Token{
			Properties: &TokenProperties{
				Credentials: &TokenCredentialsProperties{
					Certificates: []*TokenCertificate{
						{
							Name:                  TokenCertificateNameCertificate1.ToPtr(),
							EncodedPemCertificate: to.StringPtr("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUc3akNDQk5hZ0F3SUJBZ0lURmdBQlR3UVpyZGdmdmhxdzBnQUFBQUZQQkRBTkJna3Foa2lHOXcwQkFRc0YKQURDQml6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVApCMUpsWkcxdmJtUXhIakFjQmdOVkJBb1RGVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2YmpFVk1CTUdBMVVFCkN4TU1UV2xqY205emIyWjBJRWxVTVI0d0hBWURWUVFERXhWTmFXTnliM052Wm5RZ1NWUWdWRXhUSUVOQklEUXcKSGhjTk1UZ3dOREV5TWpJek1qUTRXaGNOTWpBd05ERXlNakl6TWpRNFdqQTVNVGN3TlFZRFZRUURFeTV6WlhKMgphV05sWTJ4cFpXNTBZMlZ5ZEMxd1lYSjBibVZ5TG0xaGJtRm5aVzFsYm5RdVlYcDFjbVV1WTI5dE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBSYjdJcHpxMmR4emhhbVpyS1ZDakMzeTQyYlYKUnNIY2pCUTFuSDBHZ1puUDhXeDZDSE1mWThybkVJQzRLeVRRYkJXVzhnNXlmc3NSQ0ZXbFpxYjR6SkRXS0pmTgpGSmNMUm9LNnhwTktZYVZVTkVlT25IdUxHYTM0ZlA0VjBFRjZybzdvbkRLME5zanhjY1dZVzRNVXVzc0xrQS94CkUrM2RwU1REdk1KcjJoWUpsVnFDcVR6blQvbmZaVUZzQUVEQnp5MUpOOHZiZDlIR2czc2Myd0x4dk95cFJOc0gKT1V3V2pmN2xzWWZleEVlcWkzY29EeHc2alpLVWEyVkdsUnBpTkowMjhBQitYSi9TU1FVNVBsd0JBbU9TT3ovRApGY0NKdGpPZlBqU1NKckFIQVV3SHU3RzlSV05JTFBwYU9zQ1J5eitETE5zNGpvNlEvUUg4d1lManJRSURBUUFCCm80SUNtakNDQXBZd0N3WURWUjBQQkFRREFnU3dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUYKQlFjREFUQWRCZ05WSFE0RUZnUVVlbEdkVVJrZzJoSFFOWEQ4WUc4L3drdjJVT0F3SHdZRFZSMGpCQmd3Rm9BVQplbnVNd2Mvbm9Nb2MxR3Y2KytFend3OGFvcDB3Z2F3R0ExVWRId1NCcERDQm9UQ0JucUNCbTZDQm1JWkxhSFIwCmNEb3ZMMjF6WTNKc0xtMXBZM0p2YzI5bWRDNWpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjAKSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURRdVkzSnNoa2xvZEhSd09pOHZZM0pzTG0xcFkzSnZjMjltZEM1agpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjBKVEl3U1ZRbE1qQlVURk1sTWpCRFFTVXlNRFF1ClkzSnNNSUdGQmdnckJnRUZCUWNCQVFSNU1IY3dVUVlJS3dZQkJRVUhNQUtHUldoMGRIQTZMeTkzZDNjdWJXbGoKY205emIyWjBMbU52YlM5d2Eya3ZiWE5qYjNKd0wwMXBZM0p2YzI5bWRDVXlNRWxVSlRJd1ZFeFRKVEl3UTBFbApNakEwTG1OeWREQWlCZ2dyQmdFRkJRY3dBWVlXYUhSMGNEb3ZMMjlqYzNBdWJYTnZZM053TG1OdmJUQStCZ2tyCkJnRUVBWUkzRlFjRU1UQXZCaWNyQmdFRUFZSTNGUWlIMm9aMWcrN1pBWUxKaFJ1QnRaNWhoZlRyWUlGZGhOTGYKUW9Mbmszb0NBV1FDQVIwd1RRWURWUjBnQkVZd1JEQkNCZ2tyQmdFRUFZSTNLZ0V3TlRBekJnZ3JCZ0VGQlFjQwpBUlluYUhSMGNEb3ZMM2QzZHk1dGFXTnliM052Wm5RdVkyOXRMM0JyYVM5dGMyTnZjbkF2WTNCek1DY0dDU3NHCkFRUUJnamNWQ2dRYU1CZ3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUt3WUJCUVVIQXdFd09RWURWUjBSQkRJd01JSXUKYzJWeWRtbGpaV05zYVdWdWRHTmxjblF0Y0dGeWRHNWxjaTV0WVc1aFoyVnRaVzUwTG1GNmRYSmxMbU52YlRBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFIVXIzbk1vdUI5WWdDUlRWYndUTllIS2RkWGJkSW1GUXNDYys4T1g1CjE5c0N6dFFSR05iSXEwVW1Ba01MbFVvWTIxckh4ZXdxU2hWczFhL2RwaFh5Tk1pcUdaU2QzU1BtYzZscitqUFQKNXVEREs0MUlWeXN0K2VUNlpyazFvcCtMVmdkeS9EU2lyNzVqcWZFY016bS82bU8rNnFNeWRLTWtVYmM5K3JHVwphUkpUcjRWUUdIRmEwNEIwZVZpNUd4MG9pL2RpZDNSaXg2aXJMMjFJSGEwYjN6c1hzZHpHU0R2K3hqL2Q2S0l4Ckdrd2FhYmZvU1NoQnFqaFNlQ0VyZXFlb1RpYjljdGw0MGRVdUp3THl4bjhHS2N6K3AvMEJUOEIxU3lYK01OQ2wKY0pkMjVtMjhLajY2TGUxOEVyeFlJYXZJVGVGa3Y2eGZjdkEvcHladDdPaU41QTlGQk1IUmpQK1kyZ2tvdjMrcQpISFRUZG4xNnlRajduNit3YlFHNGVleXc0YisyQkRLcUxNVFU2ZmlSQ3ZPM2FPZVBLSFVNN3R4b1FidWl6Z3NzCkNiMzl3QnJOTEZsMkJLQ1RkSCtkSU9oZVJiSkZvbmlwOGRPOUVFZWdSSG9lQW54ZUlYTFBrdXMzTzEvZjRhNkIKWHQ3RG5BUm8xSzJmeEp3VXRaU2MvR3dFSjU5NzlnRXlEa3pDZEVsLzdpWE9QZXVjTXhlM2xVM2pweUtsNERUaApjSkJqQytqNGpLWTFrK1U4b040aGdqYnJISUx6Vnd2eU15OU5KS290U3BMSjQxeHdPOHlGangxalFTT3Bxc0N1ClFhUFUvTjhSZ0hxWjBGTkFzS3dNUmZ6WmdXanRCNzRzYUVEdk5jVmNuNFhCQnFNSG0ydHo2Uzk3d3kxZGt0cTgKSE5BPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
						}},
				},
				ScopeMapID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
				Status:     TokenStatusDisabled.ToPtr(),
			},
		},
		&TokensBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Token.ID == nil {
		t.Fatal("Token.ID should not be nil!")
	}
}

func TestTokens_Delete(t *testing.T) {
	// From example TokenDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTokensClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myToken",
		&TokensBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestTokens_Update(t *testing.T) {
	// From example TokenUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTokensClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myToken",
		TokenUpdateParameters{
			Properties: &TokenUpdateProperties{
				Credentials: &TokenCredentialsProperties{
					Certificates: []*TokenCertificate{
						{
							Name:                  TokenCertificateNameCertificate1.ToPtr(),
							EncodedPemCertificate: to.StringPtr("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUc3akNDQk5hZ0F3SUJBZ0lURmdBQlR3UVpyZGdmdmhxdzBnQUFBQUZQQkRBTkJna3Foa2lHOXcwQkFRc0YKQURDQml6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVApCMUpsWkcxdmJtUXhIakFjQmdOVkJBb1RGVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2YmpFVk1CTUdBMVVFCkN4TU1UV2xqY205emIyWjBJRWxVTVI0d0hBWURWUVFERXhWTmFXTnliM052Wm5RZ1NWUWdWRXhUSUVOQklEUXcKSGhjTk1UZ3dOREV5TWpJek1qUTRXaGNOTWpBd05ERXlNakl6TWpRNFdqQTVNVGN3TlFZRFZRUURFeTV6WlhKMgphV05sWTJ4cFpXNTBZMlZ5ZEMxd1lYSjBibVZ5TG0xaGJtRm5aVzFsYm5RdVlYcDFjbVV1WTI5dE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBSYjdJcHpxMmR4emhhbVpyS1ZDakMzeTQyYlYKUnNIY2pCUTFuSDBHZ1puUDhXeDZDSE1mWThybkVJQzRLeVRRYkJXVzhnNXlmc3NSQ0ZXbFpxYjR6SkRXS0pmTgpGSmNMUm9LNnhwTktZYVZVTkVlT25IdUxHYTM0ZlA0VjBFRjZybzdvbkRLME5zanhjY1dZVzRNVXVzc0xrQS94CkUrM2RwU1REdk1KcjJoWUpsVnFDcVR6blQvbmZaVUZzQUVEQnp5MUpOOHZiZDlIR2czc2Myd0x4dk95cFJOc0gKT1V3V2pmN2xzWWZleEVlcWkzY29EeHc2alpLVWEyVkdsUnBpTkowMjhBQitYSi9TU1FVNVBsd0JBbU9TT3ovRApGY0NKdGpPZlBqU1NKckFIQVV3SHU3RzlSV05JTFBwYU9zQ1J5eitETE5zNGpvNlEvUUg4d1lManJRSURBUUFCCm80SUNtakNDQXBZd0N3WURWUjBQQkFRREFnU3dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUYKQlFjREFUQWRCZ05WSFE0RUZnUVVlbEdkVVJrZzJoSFFOWEQ4WUc4L3drdjJVT0F3SHdZRFZSMGpCQmd3Rm9BVQplbnVNd2Mvbm9Nb2MxR3Y2KytFend3OGFvcDB3Z2F3R0ExVWRId1NCcERDQm9UQ0JucUNCbTZDQm1JWkxhSFIwCmNEb3ZMMjF6WTNKc0xtMXBZM0p2YzI5bWRDNWpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjAKSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURRdVkzSnNoa2xvZEhSd09pOHZZM0pzTG0xcFkzSnZjMjltZEM1agpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjBKVEl3U1ZRbE1qQlVURk1sTWpCRFFTVXlNRFF1ClkzSnNNSUdGQmdnckJnRUZCUWNCQVFSNU1IY3dVUVlJS3dZQkJRVUhNQUtHUldoMGRIQTZMeTkzZDNjdWJXbGoKY205emIyWjBMbU52YlM5d2Eya3ZiWE5qYjNKd0wwMXBZM0p2YzI5bWRDVXlNRWxVSlRJd1ZFeFRKVEl3UTBFbApNakEwTG1OeWREQWlCZ2dyQmdFRkJRY3dBWVlXYUhSMGNEb3ZMMjlqYzNBdWJYTnZZM053TG1OdmJUQStCZ2tyCkJnRUVBWUkzRlFjRU1UQXZCaWNyQmdFRUFZSTNGUWlIMm9aMWcrN1pBWUxKaFJ1QnRaNWhoZlRyWUlGZGhOTGYKUW9Mbmszb0NBV1FDQVIwd1RRWURWUjBnQkVZd1JEQkNCZ2tyQmdFRUFZSTNLZ0V3TlRBekJnZ3JCZ0VGQlFjQwpBUlluYUhSMGNEb3ZMM2QzZHk1dGFXTnliM052Wm5RdVkyOXRMM0JyYVM5dGMyTnZjbkF2WTNCek1DY0dDU3NHCkFRUUJnamNWQ2dRYU1CZ3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUt3WUJCUVVIQXdFd09RWURWUjBSQkRJd01JSXUKYzJWeWRtbGpaV05zYVdWdWRHTmxjblF0Y0dGeWRHNWxjaTV0WVc1aFoyVnRaVzUwTG1GNmRYSmxMbU52YlRBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFIVXIzbk1vdUI5WWdDUlRWYndUTllIS2RkWGJkSW1GUXNDYys4T1g1CjE5c0N6dFFSR05iSXEwVW1Ba01MbFVvWTIxckh4ZXdxU2hWczFhL2RwaFh5Tk1pcUdaU2QzU1BtYzZscitqUFQKNXVEREs0MUlWeXN0K2VUNlpyazFvcCtMVmdkeS9EU2lyNzVqcWZFY016bS82bU8rNnFNeWRLTWtVYmM5K3JHVwphUkpUcjRWUUdIRmEwNEIwZVZpNUd4MG9pL2RpZDNSaXg2aXJMMjFJSGEwYjN6c1hzZHpHU0R2K3hqL2Q2S0l4Ckdrd2FhYmZvU1NoQnFqaFNlQ0VyZXFlb1RpYjljdGw0MGRVdUp3THl4bjhHS2N6K3AvMEJUOEIxU3lYK01OQ2wKY0pkMjVtMjhLajY2TGUxOEVyeFlJYXZJVGVGa3Y2eGZjdkEvcHladDdPaU41QTlGQk1IUmpQK1kyZ2tvdjMrcQpISFRUZG4xNnlRajduNit3YlFHNGVleXc0YisyQkRLcUxNVFU2ZmlSQ3ZPM2FPZVBLSFVNN3R4b1FidWl6Z3NzCkNiMzl3QnJOTEZsMkJLQ1RkSCtkSU9oZVJiSkZvbmlwOGRPOUVFZWdSSG9lQW54ZUlYTFBrdXMzTzEvZjRhNkIKWHQ3RG5BUm8xSzJmeEp3VXRaU2MvR3dFSjU5NzlnRXlEa3pDZEVsLzdpWE9QZXVjTXhlM2xVM2pweUtsNERUaApjSkJqQytqNGpLWTFrK1U4b040aGdqYnJISUx6Vnd2eU15OU5KS290U3BMSjQxeHdPOHlGangxalFTT3Bxc0N1ClFhUFUvTjhSZ0hxWjBGTkFzS3dNUmZ6WmdXanRCNzRzYUVEdk5jVmNuNFhCQnFNSG0ydHo2Uzk3d3kxZGt0cTgKSE5BPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
						}},
				},
				ScopeMapID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myNewScopeMap"),
			},
		},
		&TokensBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Token.ID == nil {
		t.Fatal("Token.ID should not be nil!")
	}
}

func TestTokens_List(t *testing.T) {
	// From example TokenList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTokensClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myRegistry",
		&TokensListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Token.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Token.ID should not be nil!")
			}
		}
	}
}

func TestWebhooks_Get(t *testing.T) {
	// From example WebhookGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebhooksClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myWebhook",
		&WebhooksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Webhook.ID == nil {
		t.Fatal("Webhook.ID should not be nil!")
	}
}

func TestWebhooks_Create(t *testing.T) {
	// From example WebhookCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebhooksClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myWebhook",
		WebhookCreateParameters{
			Location: to.StringPtr("westus"),
			Properties: &WebhookPropertiesCreateParameters{
				Actions: []*WebhookAction{
					WebhookActionPush.ToPtr()},
				CustomHeaders: map[string]*string{
					"Authorization": to.StringPtr("Basic 000000000000000000000000000000000000000000000000000"),
				},
				Scope:      to.StringPtr("myRepository"),
				ServiceURI: to.StringPtr("http://myservice.com"),
				Status:     WebhookStatusEnabled.ToPtr(),
			},
			Tags: map[string]*string{
				"key": to.StringPtr("value"),
			},
		},
		&WebhooksBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Webhook.ID == nil {
		t.Fatal("Webhook.ID should not be nil!")
	}
}

func TestWebhooks_Delete(t *testing.T) {
	// From example WebhookDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebhooksClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myWebhook",
		&WebhooksBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebhooks_Update(t *testing.T) {
	// From example WebhookUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebhooksClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myWebhook",
		WebhookUpdateParameters{
			Properties: &WebhookPropertiesUpdateParameters{
				Actions: []*WebhookAction{
					WebhookActionPush.ToPtr()},
				CustomHeaders: map[string]*string{
					"Authorization": to.StringPtr("Basic 000000000000000000000000000000000000000000000000000"),
				},
				Scope:      to.StringPtr("myRepository"),
				ServiceURI: to.StringPtr("http://myservice.com"),
				Status:     WebhookStatusEnabled.ToPtr(),
			},
			Tags: map[string]*string{
				"key": to.StringPtr("value"),
			},
		},
		&WebhooksBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Webhook.ID == nil {
		t.Fatal("Webhook.ID should not be nil!")
	}
}

func TestWebhooks_List(t *testing.T) {
	// From example WebhookList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebhooksClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"myRegistry",
		&WebhooksListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Webhook.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Webhook.ID should not be nil!")
			}
		}
	}
}

func TestWebhooks_Ping(t *testing.T) {
	// From example WebhookPing
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebhooksClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Ping(ctx,
		"myResourceGroup",
		"myRegistry",
		"myWebhook",
		&WebhooksPingOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventInfo.ID == nil {
		t.Fatal("EventInfo.ID should not be nil!")
	}
}

func TestWebhooks_GetCallbackConfig(t *testing.T) {
	// From example WebhookGetCallbackConfig
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebhooksClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.GetCallbackConfig(ctx,
		"myResourceGroup",
		"myRegistry",
		"myWebhook",
		&WebhooksGetCallbackConfigOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebhooks_ListEvents(t *testing.T) {
	// From example WebhookListEvents
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebhooksClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListEvents("myResourceGroup",
		"myRegistry",
		"myWebhook",
		&WebhooksListEventsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Event.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Event.ID should not be nil!")
			}
		}
	}
}

func TestAgentPools_Get(t *testing.T) {
	// From example AgentPools_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAgentPoolsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myAgentPool",
		&AgentPoolsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AgentPool.ID == nil {
		t.Fatal("AgentPool.ID should not be nil!")
	}
}

func TestAgentPools_Create(t *testing.T) {
	// From example AgentPools_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAgentPoolsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myAgentPool",
		AgentPool{
			Resource: Resource{
				Location: to.StringPtr("WESTUS"),
				Tags: map[string]*string{
					"key": to.StringPtr("value"),
				},
			},
			Properties: &AgentPoolProperties{
				Count: to.Int32Ptr(1),
				OS:    OSLinux.ToPtr(),
				Tier:  to.StringPtr("S1"),
			},
		},
		&AgentPoolsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AgentPool.ID == nil {
		t.Fatal("AgentPool.ID should not be nil!")
	}
}

func TestAgentPools_Delete(t *testing.T) {
	// From example AgentPools_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAgentPoolsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myAgentPool",
		&AgentPoolsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestAgentPools_Update(t *testing.T) {
	// From example AgentPools_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAgentPoolsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myAgentPool",
		AgentPoolUpdateParameters{
			Properties: &AgentPoolPropertiesUpdateParameters{
				Count: to.Int32Ptr(1),
			},
		},
		&AgentPoolsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AgentPool.ID == nil {
		t.Fatal("AgentPool.ID should not be nil!")
	}
}

func TestAgentPools_List(t *testing.T) {
	// From example AgentPools_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAgentPoolsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.List("myResourceGroup",
		"myRegistry",
		&AgentPoolsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AgentPool.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AgentPool.ID should not be nil!")
			}
		}
	}
}

func TestAgentPools_GetQueueStatus(t *testing.T) {
	// From example AgentPools_GetQueueStatus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAgentPoolsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.GetQueueStatus(ctx,
		"myResourceGroup",
		"myRegistry",
		"myAgentPool",
		&AgentPoolsGetQueueStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRuns_List(t *testing.T) {
	// From example Runs_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.List("myResourceGroup",
		"myRegistry",
		&RunsListOptions{Filter: to.StringPtr(""),
			Top: to.Int32Ptr(10),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Run.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Run.ID should not be nil!")
			}
		}
	}
}

func TestRuns_Get(t *testing.T) {
	// From example Runs_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"0accec26-d6de-4757-8e74-d080f38eaaab",
		&RunsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Run.ID == nil {
		t.Fatal("Run.ID should not be nil!")
	}
}

func TestRuns_Update(t *testing.T) {
	// From example Runs_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"0accec26-d6de-4757-8e74-d080f38eaaab",
		RunUpdateParameters{
			IsArchiveEnabled: to.BoolPtr(true),
		},
		&RunsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Run.ID == nil {
		t.Fatal("Run.ID should not be nil!")
	}
}

func TestRuns_GetLogSasUrl(t *testing.T) {
	// From example Runs_GetLogSasUrl
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	_, err := client.GetLogSasURL(ctx,
		"myResourceGroup",
		"myRegistry",
		"0accec26-d6de-4757-8e74-d080f38eaaab",
		&RunsGetLogSasURLOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRuns_Cancel(t *testing.T) {
	// From example Runs_Cancel
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRunsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCancel(ctx,
		"myResourceGroup",
		"myRegistry",
		"0accec26-d6de-4757-8e74-d080f38eaaab",
		&RunsBeginCancelOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestTaskRuns_Get(t *testing.T) {
	// From example TaskRuns_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTaskRunsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myRun",
		&TaskRunsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TaskRun.ID == nil {
		t.Fatal("TaskRun.ID should not be nil!")
	}
}

func TestTaskRuns_Create(t *testing.T) {
	// From example TaskRuns_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTaskRunsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myRun",
		TaskRun{
			Properties: &TaskRunProperties{
				ForceUpdateTag: to.StringPtr("test"),
				RunRequest: &EncodedTaskRunRequest{
					RunRequest: RunRequest{
						Type: to.StringPtr("EncodedTaskRunRequest"),
					},
					Credentials:          &Credentials{},
					EncodedTaskContent:   to.StringPtr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
					EncodedValuesContent: to.StringPtr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
					Platform: &PlatformProperties{
						Architecture: ArchitectureAmd64.ToPtr(),
						OS:           OSLinux.ToPtr(),
					},
					Values: []*SetValue{},
				},
			},
		},
		&TaskRunsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.TaskRun.ID == nil {
		t.Fatal("TaskRun.ID should not be nil!")
	}
}

func TestTaskRuns_Delete(t *testing.T) {
	// From example TaskRuns_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTaskRunsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myRun",
		&TaskRunsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestTaskRuns_Update(t *testing.T) {
	// From example TaskRuns_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTaskRunsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myRun",
		TaskRunUpdateParameters{
			Properties: &TaskRunPropertiesUpdateParameters{
				ForceUpdateTag: to.StringPtr("test"),
				RunRequest: &EncodedTaskRunRequest{
					RunRequest: RunRequest{
						Type:             to.StringPtr("EncodedTaskRunRequest"),
						IsArchiveEnabled: to.BoolPtr(true),
					},
					Credentials:          &Credentials{},
					EncodedTaskContent:   to.StringPtr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
					EncodedValuesContent: to.StringPtr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
					Platform: &PlatformProperties{
						Architecture: ArchitectureAmd64.ToPtr(),
						OS:           OSLinux.ToPtr(),
					},
					Values: []*SetValue{},
				},
			},
		},
		&TaskRunsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.TaskRun.ID == nil {
		t.Fatal("TaskRun.ID should not be nil!")
	}
}

func TestTaskRuns_GetDetails(t *testing.T) {
	// From example TaskRuns_GetDetails
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTaskRunsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.GetDetails(ctx,
		"myResourceGroup",
		"myRegistry",
		"myRun",
		&TaskRunsGetDetailsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TaskRun.ID == nil {
		t.Fatal("TaskRun.ID should not be nil!")
	}
}

func TestTaskRuns_List(t *testing.T) {
	// From example TaskRuns_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTaskRunsClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.List("myResourceGroup",
		"myRegistry",
		&TaskRunsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("TaskRun.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("TaskRun.ID should not be nil!")
			}
		}
	}
}

func TestTasks_List(t *testing.T) {
	// From example Tasks_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTasksClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	pager := client.List("myResourceGroup",
		"myRegistry",
		&TasksListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Task.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Task.ID should not be nil!")
			}
		}
	}
}

func TestTasks_Get(t *testing.T) {
	// From example Tasks_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTasksClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myTask",
		&TasksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Task.ID == nil {
		t.Fatal("Task.ID should not be nil!")
	}
}

func TestTasks_Create(t *testing.T) {
	// From example Tasks_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTasksClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"mytTask",
		Task{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
				Tags: map[string]*string{
					"testkey": to.StringPtr("value"),
				},
			},
			Identity: &IdentityProperties{
				Type: ResourceIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &TaskProperties{
				AgentConfiguration: &AgentProperties{
					CPU: to.Int32Ptr(2),
				},
				IsSystemTask: to.BoolPtr(false),
				LogTemplate:  to.StringPtr("acr/tasks:{{.Run.OS}}"),
				Platform: &PlatformProperties{
					Architecture: ArchitectureAmd64.ToPtr(),
					OS:           OSLinux.ToPtr(),
				},
				Status: TaskStatusEnabled.ToPtr(),
				Step: &DockerBuildStep{
					TaskStepProperties: TaskStepProperties{
						Type:        StepTypeDocker.ToPtr(),
						ContextPath: to.StringPtr("src"),
					},
					Arguments: []*Argument{
						{
							Name:     to.StringPtr("mytestargument"),
							IsSecret: to.BoolPtr(false),
							Value:    to.StringPtr("mytestvalue"),
						},
						{
							Name:     to.StringPtr("mysecrettestargument"),
							IsSecret: to.BoolPtr(true),
							Value:    to.StringPtr("mysecrettestvalue"),
						}},
					DockerFilePath: to.StringPtr("src/DockerFile"),
					ImageNames: []*string{
						to.StringPtr("azurerest:testtag")},
					IsPushEnabled: to.BoolPtr(true),
					NoCache:       to.BoolPtr(false),
				},
				Trigger: &TriggerProperties{
					BaseImageTrigger: &BaseImageTrigger{
						Name:                     to.StringPtr("myBaseImageTrigger"),
						BaseImageTriggerType:     BaseImageTriggerTypeRuntime.ToPtr(),
						UpdateTriggerEndpoint:    to.StringPtr("https://user:pass@mycicd.webhook.com?token=foo"),
						UpdateTriggerPayloadType: UpdateTriggerPayloadTypeToken.ToPtr(),
					},
					SourceTriggers: []*SourceTrigger{
						{
							Name: to.StringPtr("mySourceTrigger"),
							SourceRepository: &SourceProperties{
								Branch:        to.StringPtr("master"),
								RepositoryURL: to.StringPtr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlAuthProperties: &AuthInfo{
									Token:     to.StringPtr("xxxxx"),
									TokenType: TokenTypePAT.ToPtr(),
								},
								SourceControlType: SourceControlTypeGithub.ToPtr(),
							},
							SourceTriggerEvents: []*SourceTriggerEvent{
								SourceTriggerEventCommit.ToPtr()},
						}},
					TimerTriggers: []*TimerTrigger{
						{
							Name:     to.StringPtr("myTimerTrigger"),
							Schedule: to.StringPtr("30 9 * * 1-5"),
						}},
				},
			},
		},
		&TasksBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Task.ID == nil {
		t.Fatal("Task.ID should not be nil!")
	}

	// From example Tasks_Create_QuickTask
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"quicktask",
		Task{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
				Tags: map[string]*string{
					"testkey": to.StringPtr("value"),
				},
			},
			Identity: &IdentityProperties{},
			Properties: &TaskProperties{
				IsSystemTask: to.BoolPtr(true),
				LogTemplate:  to.StringPtr("acr/tasks:{{.Run.OS}}"),
				Status:       TaskStatusEnabled.ToPtr(),
			},
		},
		&TasksBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Task.ID == nil {
		t.Fatal("Task.ID should not be nil!")
	}

	// From example Tasks_Create_WithSystemAndUserIdentities
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"mytTask",
		Task{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
				Tags: map[string]*string{
					"testkey": to.StringPtr("value"),
				},
			},
			Identity: &IdentityProperties{
				Type: ResourceIdentityTypeSystemAssignedUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserIdentityProperties{
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &UserIdentityProperties{},
				},
			},
			Properties: &TaskProperties{
				AgentConfiguration: &AgentProperties{
					CPU: to.Int32Ptr(2),
				},
				IsSystemTask: to.BoolPtr(false),
				LogTemplate:  to.StringPtr("null"),
				Platform: &PlatformProperties{
					Architecture: ArchitectureAmd64.ToPtr(),
					OS:           OSLinux.ToPtr(),
				},
				Status: TaskStatusEnabled.ToPtr(),
				Step: &DockerBuildStep{
					TaskStepProperties: TaskStepProperties{
						Type:        StepTypeDocker.ToPtr(),
						ContextPath: to.StringPtr("src"),
					},
					Arguments: []*Argument{
						{
							Name:     to.StringPtr("mytestargument"),
							IsSecret: to.BoolPtr(false),
							Value:    to.StringPtr("mytestvalue"),
						},
						{
							Name:     to.StringPtr("mysecrettestargument"),
							IsSecret: to.BoolPtr(true),
							Value:    to.StringPtr("mysecrettestvalue"),
						}},
					DockerFilePath: to.StringPtr("src/DockerFile"),
					ImageNames: []*string{
						to.StringPtr("azurerest:testtag")},
					IsPushEnabled: to.BoolPtr(true),
					NoCache:       to.BoolPtr(false),
				},
				Trigger: &TriggerProperties{
					BaseImageTrigger: &BaseImageTrigger{
						Name:                     to.StringPtr("myBaseImageTrigger"),
						BaseImageTriggerType:     BaseImageTriggerTypeRuntime.ToPtr(),
						UpdateTriggerEndpoint:    to.StringPtr("https://user:pass@mycicd.webhook.com?token=foo"),
						UpdateTriggerPayloadType: UpdateTriggerPayloadTypeDefault.ToPtr(),
					},
					SourceTriggers: []*SourceTrigger{
						{
							Name: to.StringPtr("mySourceTrigger"),
							SourceRepository: &SourceProperties{
								Branch:        to.StringPtr("master"),
								RepositoryURL: to.StringPtr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlAuthProperties: &AuthInfo{
									Token:     to.StringPtr("xxxxx"),
									TokenType: TokenTypePAT.ToPtr(),
								},
								SourceControlType: SourceControlTypeGithub.ToPtr(),
							},
							SourceTriggerEvents: []*SourceTriggerEvent{
								SourceTriggerEventCommit.ToPtr()},
						}},
					TimerTriggers: []*TimerTrigger{
						{
							Name:     to.StringPtr("myTimerTrigger"),
							Schedule: to.StringPtr("30 9 * * 1-5"),
						}},
				},
			},
		},
		&TasksBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Task.ID == nil {
		t.Fatal("Task.ID should not be nil!")
	}

	// From example Tasks_Create_WithUserIdentities
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"mytTask",
		Task{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
				Tags: map[string]*string{
					"testkey": to.StringPtr("value"),
				},
			},
			Identity: &IdentityProperties{
				Type: ResourceIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserIdentityProperties{
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1":  &UserIdentityProperties{},
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &UserIdentityProperties{},
				},
			},
			Properties: &TaskProperties{
				AgentConfiguration: &AgentProperties{
					CPU: to.Int32Ptr(2),
				},
				IsSystemTask: to.BoolPtr(false),
				LogTemplate:  to.StringPtr("null"),
				Platform: &PlatformProperties{
					Architecture: ArchitectureAmd64.ToPtr(),
					OS:           OSLinux.ToPtr(),
				},
				Status: TaskStatusEnabled.ToPtr(),
				Step: &DockerBuildStep{
					TaskStepProperties: TaskStepProperties{
						Type:        StepTypeDocker.ToPtr(),
						ContextPath: to.StringPtr("src"),
					},
					Arguments: []*Argument{
						{
							Name:     to.StringPtr("mytestargument"),
							IsSecret: to.BoolPtr(false),
							Value:    to.StringPtr("mytestvalue"),
						},
						{
							Name:     to.StringPtr("mysecrettestargument"),
							IsSecret: to.BoolPtr(true),
							Value:    to.StringPtr("mysecrettestvalue"),
						}},
					DockerFilePath: to.StringPtr("src/DockerFile"),
					ImageNames: []*string{
						to.StringPtr("azurerest:testtag")},
					IsPushEnabled: to.BoolPtr(true),
					NoCache:       to.BoolPtr(false),
				},
				Trigger: &TriggerProperties{
					BaseImageTrigger: &BaseImageTrigger{
						Name:                     to.StringPtr("myBaseImageTrigger"),
						BaseImageTriggerType:     BaseImageTriggerTypeRuntime.ToPtr(),
						UpdateTriggerEndpoint:    to.StringPtr("https://user:pass@mycicd.webhook.com?token=foo"),
						UpdateTriggerPayloadType: UpdateTriggerPayloadTypeDefault.ToPtr(),
					},
					SourceTriggers: []*SourceTrigger{
						{
							Name: to.StringPtr("mySourceTrigger"),
							SourceRepository: &SourceProperties{
								Branch:        to.StringPtr("master"),
								RepositoryURL: to.StringPtr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlAuthProperties: &AuthInfo{
									Token:     to.StringPtr("xxxxx"),
									TokenType: TokenTypePAT.ToPtr(),
								},
								SourceControlType: SourceControlTypeGithub.ToPtr(),
							},
							SourceTriggerEvents: []*SourceTriggerEvent{
								SourceTriggerEventCommit.ToPtr()},
						}},
					TimerTriggers: []*TimerTrigger{
						{
							Name:     to.StringPtr("myTimerTrigger"),
							Schedule: to.StringPtr("30 9 * * 1-5"),
						}},
				},
			},
		},
		&TasksBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Task.ID == nil {
		t.Fatal("Task.ID should not be nil!")
	}

	// From example Tasks_Create_WithUserIdentities_WithSystemIdentity
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"mytTask",
		Task{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
				Tags: map[string]*string{
					"testkey": to.StringPtr("value"),
				},
			},
			Identity: &IdentityProperties{
				Type: ResourceIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &TaskProperties{
				AgentConfiguration: &AgentProperties{
					CPU: to.Int32Ptr(2),
				},
				IsSystemTask: to.BoolPtr(false),
				LogTemplate:  to.StringPtr("null"),
				Platform: &PlatformProperties{
					Architecture: ArchitectureAmd64.ToPtr(),
					OS:           OSLinux.ToPtr(),
				},
				Status: TaskStatusEnabled.ToPtr(),
				Step: &DockerBuildStep{
					TaskStepProperties: TaskStepProperties{
						Type:        StepTypeDocker.ToPtr(),
						ContextPath: to.StringPtr("src"),
					},
					Arguments: []*Argument{
						{
							Name:     to.StringPtr("mytestargument"),
							IsSecret: to.BoolPtr(false),
							Value:    to.StringPtr("mytestvalue"),
						},
						{
							Name:     to.StringPtr("mysecrettestargument"),
							IsSecret: to.BoolPtr(true),
							Value:    to.StringPtr("mysecrettestvalue"),
						}},
					DockerFilePath: to.StringPtr("src/DockerFile"),
					ImageNames: []*string{
						to.StringPtr("azurerest:testtag")},
					IsPushEnabled: to.BoolPtr(true),
					NoCache:       to.BoolPtr(false),
				},
				Trigger: &TriggerProperties{
					BaseImageTrigger: &BaseImageTrigger{
						Name:                 to.StringPtr("myBaseImageTrigger"),
						BaseImageTriggerType: BaseImageTriggerTypeRuntime.ToPtr(),
					},
					SourceTriggers: []*SourceTrigger{
						{
							Name: to.StringPtr("mySourceTrigger"),
							SourceRepository: &SourceProperties{
								Branch:        to.StringPtr("master"),
								RepositoryURL: to.StringPtr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlAuthProperties: &AuthInfo{
									Token:     to.StringPtr("xxxxx"),
									TokenType: TokenTypePAT.ToPtr(),
								},
								SourceControlType: SourceControlTypeGithub.ToPtr(),
							},
							SourceTriggerEvents: []*SourceTriggerEvent{
								SourceTriggerEventCommit.ToPtr()},
						}},
					TimerTriggers: []*TimerTrigger{
						{
							Name:     to.StringPtr("myTimerTrigger"),
							Schedule: to.StringPtr("30 9 * * 1-5"),
						}},
				},
			},
		},
		&TasksBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Task.ID == nil {
		t.Fatal("Task.ID should not be nil!")
	}
}

func TestTasks_Delete(t *testing.T) {
	// From example Tasks_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTasksClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myTask",
		&TasksBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestTasks_Update(t *testing.T) {
	// From example Tasks_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTasksClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myTask",
		TaskUpdateParameters{
			Properties: &TaskPropertiesUpdateParameters{
				AgentConfiguration: &AgentProperties{
					CPU: to.Int32Ptr(3),
				},
				Credentials: &Credentials{
					CustomRegistries: map[string]*CustomRegistryCredentials{
						"myregistry.azurecr.io": &CustomRegistryCredentials{
							Identity: to.StringPtr("[system]"),
							Password: &SecretObject{
								Type:  SecretObjectTypeVaultsecret.ToPtr(),
								Value: to.StringPtr("https://myacbvault.vault.azure.net/secrets/password"),
							},
							UserName: &SecretObject{
								Type:  SecretObjectTypeOpaque.ToPtr(),
								Value: to.StringPtr("username"),
							},
						},
					},
				},
				LogTemplate: to.StringPtr("acr/tasks:{{.Run.OS}}"),
				Status:      TaskStatusEnabled.ToPtr(),
				Step: &DockerBuildStepUpdateParameters{
					TaskStepUpdateParameters: TaskStepUpdateParameters{
						Type: StepTypeDocker.ToPtr(),
					},
					DockerFilePath: to.StringPtr("src/DockerFile"),
					ImageNames: []*string{
						to.StringPtr("azurerest:testtag1")},
				},
				Trigger: &TriggerUpdateParameters{
					SourceTriggers: []*SourceTriggerUpdateParameters{
						{
							Name: to.StringPtr("mySourceTrigger"),
							SourceRepository: &SourceUpdateParameters{
								SourceControlAuthProperties: &AuthInfoUpdateParameters{
									Token:     to.StringPtr("xxxxx"),
									TokenType: TokenTypePAT.ToPtr(),
								},
							},
							SourceTriggerEvents: []*SourceTriggerEvent{
								SourceTriggerEventCommit.ToPtr()},
						}},
				},
			},
			Tags: map[string]*string{
				"testkey": to.StringPtr("value"),
			},
		},
		&TasksBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Task.ID == nil {
		t.Fatal("Task.ID should not be nil!")
	}

	// From example Tasks_Update_QuickTask
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"quicktask",
		TaskUpdateParameters{
			Properties: &TaskPropertiesUpdateParameters{
				LogTemplate: to.StringPtr("acr/tasks:{{.Run.OS}}"),
				Status:      TaskStatusEnabled.ToPtr(),
			},
			Tags: map[string]*string{
				"testkey": to.StringPtr("value"),
			},
		},
		&TasksBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Task.ID == nil {
		t.Fatal("Task.ID should not be nil!")
	}

	// From example Tasks_Update_WithKeyVaultCustomCredentials
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myTask",
		TaskUpdateParameters{
			Properties: &TaskPropertiesUpdateParameters{
				AgentConfiguration: &AgentProperties{
					CPU: to.Int32Ptr(3),
				},
				Credentials: &Credentials{
					CustomRegistries: map[string]*CustomRegistryCredentials{
						"myregistry.azurecr.io": &CustomRegistryCredentials{
							Identity: to.StringPtr("[system]"),
							Password: &SecretObject{
								Type:  SecretObjectTypeVaultsecret.ToPtr(),
								Value: to.StringPtr("https://myacbvault.vault.azure.net/secrets/password"),
							},
							UserName: &SecretObject{
								Type:  SecretObjectTypeVaultsecret.ToPtr(),
								Value: to.StringPtr("https://myacbvault.vault.azure.net/secrets/username"),
							},
						},
					},
				},
				LogTemplate: to.StringPtr("null"),
				Status:      TaskStatusEnabled.ToPtr(),
				Step: &DockerBuildStepUpdateParameters{
					TaskStepUpdateParameters: TaskStepUpdateParameters{
						Type: StepTypeDocker.ToPtr(),
					},
					DockerFilePath: to.StringPtr("src/DockerFile"),
					ImageNames: []*string{
						to.StringPtr("azurerest:testtag1")},
				},
				Trigger: &TriggerUpdateParameters{
					SourceTriggers: []*SourceTriggerUpdateParameters{
						{
							Name: to.StringPtr("mySourceTrigger"),
							SourceRepository: &SourceUpdateParameters{
								SourceControlAuthProperties: &AuthInfoUpdateParameters{
									Token:     to.StringPtr("xxxxx"),
									TokenType: TokenTypePAT.ToPtr(),
								},
							},
							SourceTriggerEvents: []*SourceTriggerEvent{
								SourceTriggerEventCommit.ToPtr()},
						}},
				},
			},
			Tags: map[string]*string{
				"testkey": to.StringPtr("value"),
			},
		},
		&TasksBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Task.ID == nil {
		t.Fatal("Task.ID should not be nil!")
	}

	// From example Tasks_Update_WithMSICustomCredentials
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myTask",
		TaskUpdateParameters{
			Properties: &TaskPropertiesUpdateParameters{
				AgentConfiguration: &AgentProperties{
					CPU: to.Int32Ptr(3),
				},
				Credentials: &Credentials{
					CustomRegistries: map[string]*CustomRegistryCredentials{
						"myregistry.azurecr.io": &CustomRegistryCredentials{
							Identity: to.StringPtr("[system]"),
						},
					},
				},
				LogTemplate: to.StringPtr("null"),
				Status:      TaskStatusEnabled.ToPtr(),
				Step: &DockerBuildStepUpdateParameters{
					TaskStepUpdateParameters: TaskStepUpdateParameters{
						Type: StepTypeDocker.ToPtr(),
					},
					DockerFilePath: to.StringPtr("src/DockerFile"),
					ImageNames: []*string{
						to.StringPtr("azurerest:testtag1")},
				},
				Trigger: &TriggerUpdateParameters{
					SourceTriggers: []*SourceTriggerUpdateParameters{
						{
							Name: to.StringPtr("mySourceTrigger"),
							SourceRepository: &SourceUpdateParameters{
								SourceControlAuthProperties: &AuthInfoUpdateParameters{
									Token:     to.StringPtr("xxxxx"),
									TokenType: TokenTypePAT.ToPtr(),
								},
							},
							SourceTriggerEvents: []*SourceTriggerEvent{
								SourceTriggerEventCommit.ToPtr()},
						}},
				},
			},
			Tags: map[string]*string{
				"testkey": to.StringPtr("value"),
			},
		},
		&TasksBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Task.ID == nil {
		t.Fatal("Task.ID should not be nil!")
	}

	// From example Tasks_Update_WithOpaqueCustomCredentials
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myTask",
		TaskUpdateParameters{
			Properties: &TaskPropertiesUpdateParameters{
				AgentConfiguration: &AgentProperties{
					CPU: to.Int32Ptr(3),
				},
				Credentials: &Credentials{
					CustomRegistries: map[string]*CustomRegistryCredentials{
						"myregistry.azurecr.io": &CustomRegistryCredentials{
							Password: &SecretObject{
								Type:  SecretObjectTypeOpaque.ToPtr(),
								Value: to.StringPtr("***"),
							},
							UserName: &SecretObject{
								Type:  SecretObjectTypeOpaque.ToPtr(),
								Value: to.StringPtr("username"),
							},
						},
					},
				},
				LogTemplate: to.StringPtr("null"),
				Status:      TaskStatusEnabled.ToPtr(),
				Step: &DockerBuildStepUpdateParameters{
					TaskStepUpdateParameters: TaskStepUpdateParameters{
						Type: StepTypeDocker.ToPtr(),
					},
					DockerFilePath: to.StringPtr("src/DockerFile"),
					ImageNames: []*string{
						to.StringPtr("azurerest:testtag1")},
				},
				Trigger: &TriggerUpdateParameters{
					SourceTriggers: []*SourceTriggerUpdateParameters{
						{
							Name: to.StringPtr("mySourceTrigger"),
							SourceRepository: &SourceUpdateParameters{
								SourceControlAuthProperties: &AuthInfoUpdateParameters{
									Token:     to.StringPtr("xxxxx"),
									TokenType: TokenTypePAT.ToPtr(),
								},
							},
							SourceTriggerEvents: []*SourceTriggerEvent{
								SourceTriggerEventCommit.ToPtr()},
						}},
				},
			},
			Tags: map[string]*string{
				"testkey": to.StringPtr("value"),
			},
		},
		&TasksBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Task.ID == nil {
		t.Fatal("Task.ID should not be nil!")
	}
}

func TestTasks_GetDetails(t *testing.T) {
	// From example Tasks_GetDetails
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTasksClient(con,
		"4385cf00-2d3a-425a-832f-f4285b1c9dce")
	res, err := client.GetDetails(ctx,
		"myResourceGroup",
		"myRegistry",
		"myTask",
		&TasksGetDetailsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Task.ID == nil {
		t.Fatal("Task.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
