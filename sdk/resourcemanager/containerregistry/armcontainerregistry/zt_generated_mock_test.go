//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcontainerregistry_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerregistry/armcontainerregistry"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestConnectedRegistries_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectedRegistryList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewConnectedRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myRegistry",
		&armcontainerregistry.ConnectedRegistriesClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.ConnectedRegistryListResult{
			Value: []*armcontainerregistry.ConnectedRegistry{
				{
					Name: to.Ptr("myConnectedRegistry"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/connectedRegistries"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/connectedRegistries/myConnectedRegistry"),
					Properties: &armcontainerregistry.ConnectedRegistryProperties{
						Activation: &armcontainerregistry.ActivationProperties{
							Status: to.Ptr(armcontainerregistry.ActivationStatusInactive),
						},
						ClientTokenIDs: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token")},
						Logging: &armcontainerregistry.LoggingProperties{
							AuditLogStatus: to.Ptr(armcontainerregistry.AuditLogStatusDisabled),
							LogLevel:       to.Ptr(armcontainerregistry.LogLevelInformation),
						},
						Mode: to.Ptr(armcontainerregistry.ConnectedRegistryModeReadWrite),
						NotificationsList: []*string{
							to.Ptr("hello-world:*:*"),
							to.Ptr("sample/repo/*:1.0:*")},
						Parent: &armcontainerregistry.ParentProperties{
							SyncProperties: &armcontainerregistry.SyncProperties{
								MessageTTL: to.Ptr("P2D"),
								Schedule:   to.Ptr("0 9 * * *"),
								SyncWindow: to.Ptr("PT3H"),
								TokenID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/syncToken"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConnectedRegistryListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConnectedRegistryListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectedRegistries_Get(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectedRegistryGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewConnectedRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myConnectedRegistry",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.ConnectedRegistry{
			Name: to.Ptr("myConnectedRegistry"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/connectedRegistries"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/connectedRegistries/myConnectedRegistry"),
			Properties: &armcontainerregistry.ConnectedRegistryProperties{
				Activation: &armcontainerregistry.ActivationProperties{
					Status: to.Ptr(armcontainerregistry.ActivationStatusInactive),
				},
				ClientTokenIDs: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token")},
				Logging: &armcontainerregistry.LoggingProperties{
					AuditLogStatus: to.Ptr(armcontainerregistry.AuditLogStatusDisabled),
					LogLevel:       to.Ptr(armcontainerregistry.LogLevelInformation),
				},
				Mode: to.Ptr(armcontainerregistry.ConnectedRegistryModeReadWrite),
				NotificationsList: []*string{
					to.Ptr("hello-world:*:*"),
					to.Ptr("sample/repo/*:1.0:*")},
				Parent: &armcontainerregistry.ParentProperties{
					SyncProperties: &armcontainerregistry.SyncProperties{
						MessageTTL: to.Ptr("P2D"),
						Schedule:   to.Ptr("0 9 * * *"),
						SyncWindow: to.Ptr("PT3H"),
						TokenID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/syncToken"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectedRegistry) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectedRegistry)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectedRegistries_Create(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectedRegistryCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewConnectedRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myConnectedRegistry",
		armcontainerregistry.ConnectedRegistry{
			Properties: &armcontainerregistry.ConnectedRegistryProperties{
				ClientTokenIDs: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token")},
				Mode: to.Ptr(armcontainerregistry.ConnectedRegistryModeReadWrite),
				NotificationsList: []*string{
					to.Ptr("hello-world:*:*"),
					to.Ptr("sample/repo/*:1.0:*")},
				Parent: &armcontainerregistry.ParentProperties{
					SyncProperties: &armcontainerregistry.SyncProperties{
						MessageTTL: to.Ptr("P2D"),
						Schedule:   to.Ptr("0 9 * * *"),
						SyncWindow: to.Ptr("PT3H"),
						TokenID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/syncToken"),
					},
				},
			},
		},
		&armcontainerregistry.ConnectedRegistriesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.ConnectedRegistry{
			Name: to.Ptr("myConnectedRegistry"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/connectedRegistries"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/connectedRegistries/myConnectedRegistry"),
			Properties: &armcontainerregistry.ConnectedRegistryProperties{
				Activation: &armcontainerregistry.ActivationProperties{
					Status: to.Ptr(armcontainerregistry.ActivationStatusInactive),
				},
				ClientTokenIDs: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token")},
				Logging: &armcontainerregistry.LoggingProperties{
					AuditLogStatus: to.Ptr(armcontainerregistry.AuditLogStatusDisabled),
					LogLevel:       to.Ptr(armcontainerregistry.LogLevelInformation),
				},
				Mode: to.Ptr(armcontainerregistry.ConnectedRegistryModeReadWrite),
				NotificationsList: []*string{
					to.Ptr("hello-world:*:*"),
					to.Ptr("sample/repo/*:1.0:*")},
				Parent: &armcontainerregistry.ParentProperties{
					SyncProperties: &armcontainerregistry.SyncProperties{
						MessageTTL: to.Ptr("P2D"),
						Schedule:   to.Ptr("0 9 * * *"),
						SyncWindow: to.Ptr("PT3H"),
						TokenID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/syncToken"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectedRegistry) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectedRegistry)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectedRegistries_Delete(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectedRegistryDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewConnectedRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myConnectedRegistry",
		&armcontainerregistry.ConnectedRegistriesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryDelete.json: %v", err)
	}
}

func TestConnectedRegistries_Update(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectedRegistryUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewConnectedRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myScopeMap",
		armcontainerregistry.ConnectedRegistryUpdateParameters{
			Properties: &armcontainerregistry.ConnectedRegistryUpdateProperties{
				ClientTokenIDs: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token"),
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client2Token")},
				Logging: &armcontainerregistry.LoggingProperties{
					AuditLogStatus: to.Ptr(armcontainerregistry.AuditLogStatusEnabled),
					LogLevel:       to.Ptr(armcontainerregistry.LogLevelDebug),
				},
				NotificationsList: []*string{
					to.Ptr("hello-world:*:*"),
					to.Ptr("sample/repo/*:1.0:*")},
				SyncProperties: &armcontainerregistry.SyncUpdateProperties{
					MessageTTL: to.Ptr("P30D"),
					Schedule:   to.Ptr("0 0 */10 * *"),
					SyncWindow: to.Ptr("P2D"),
				},
			},
		},
		&armcontainerregistry.ConnectedRegistriesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.ConnectedRegistry{
			Name: to.Ptr("myConnectedRegistry"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/connectedRegistries"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/connectedRegistries/myConnectedRegistry"),
			Properties: &armcontainerregistry.ConnectedRegistryProperties{
				ClientTokenIDs: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token"),
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client2Token")},
				Logging: &armcontainerregistry.LoggingProperties{
					AuditLogStatus: to.Ptr(armcontainerregistry.AuditLogStatusEnabled),
					LogLevel:       to.Ptr(armcontainerregistry.LogLevelDebug),
				},
				Mode: to.Ptr(armcontainerregistry.ConnectedRegistryModeReadWrite),
				NotificationsList: []*string{
					to.Ptr("hello-world:*:*"),
					to.Ptr("sample/repo/*:1.0:*")},
				Parent: &armcontainerregistry.ParentProperties{
					SyncProperties: &armcontainerregistry.SyncProperties{
						MessageTTL: to.Ptr("P30D"),
						Schedule:   to.Ptr("0 0 */10 * *"),
						SyncWindow: to.Ptr("P2D"),
						TokenID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/syncToken"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectedRegistry) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectedRegistry)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConnectedRegistries_Deactivate(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryDeactivate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectedRegistryDeactivate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewConnectedRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDeactivate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myConnectedRegistry",
		&armcontainerregistry.ConnectedRegistriesClientBeginDeactivateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryDeactivate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ConnectedRegistryDeactivate.json: %v", err)
	}
}

func TestExportPipelines_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ExportPipelineList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportPipelineList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewExportPipelinesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myRegistry",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ExportPipelineList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.ExportPipelineListResult{
			Value: []*armcontainerregistry.ExportPipeline{
				{
					Name: to.Ptr("myExportPipeline"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/exportPipelines"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
					Identity: &armcontainerregistry.IdentityProperties{
						Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
						TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
					},
					Location: to.Ptr("westus"),
					Properties: &armcontainerregistry.ExportPipelineProperties{
						Options: []*armcontainerregistry.PipelineOptions{
							to.Ptr(armcontainerregistry.PipelineOptionsOverwriteBlobs)},
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						Target: &armcontainerregistry.ExportPipelineTargetProperties{
							Type:        to.Ptr("AzureStorageBlobContainer"),
							KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
							URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExportPipelineListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExportPipelineListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ExportPipelineList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExportPipelines_Get(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ExportPipelineGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportPipelineGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewExportPipelinesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myExportPipeline",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ExportPipelineGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.ExportPipeline{
			Name: to.Ptr("myExportPipeline"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/exportPipelines"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
			Identity: &armcontainerregistry.IdentityProperties{
				Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
			},
			Location: to.Ptr("westus"),
			Properties: &armcontainerregistry.ExportPipelineProperties{
				Options: []*armcontainerregistry.PipelineOptions{
					to.Ptr(armcontainerregistry.PipelineOptionsOverwriteBlobs)},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Target: &armcontainerregistry.ExportPipelineTargetProperties{
					Type:        to.Ptr("AzureStorageBlobContainer"),
					KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
					URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExportPipeline) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportPipeline)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ExportPipelineGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExportPipelines_Create(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ExportPipelineCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportPipelineCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewExportPipelinesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myExportPipeline",
		armcontainerregistry.ExportPipeline{
			Identity: &armcontainerregistry.IdentityProperties{
				Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			},
			Location: to.Ptr("westus"),
			Properties: &armcontainerregistry.ExportPipelineProperties{
				Options: []*armcontainerregistry.PipelineOptions{
					to.Ptr(armcontainerregistry.PipelineOptionsOverwriteBlobs)},
				Target: &armcontainerregistry.ExportPipelineTargetProperties{
					Type:        to.Ptr("AzureStorageBlobContainer"),
					KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
					URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
				},
			},
		},
		&armcontainerregistry.ExportPipelinesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ExportPipelineCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ExportPipelineCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.ExportPipeline{
			Name: to.Ptr("myExportPipeline"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/exportPipelines"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
			Identity: &armcontainerregistry.IdentityProperties{
				Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
			},
			Location: to.Ptr("westus"),
			Properties: &armcontainerregistry.ExportPipelineProperties{
				Options: []*armcontainerregistry.PipelineOptions{
					to.Ptr(armcontainerregistry.PipelineOptionsOverwriteBlobs)},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Target: &armcontainerregistry.ExportPipelineTargetProperties{
					Type:        to.Ptr("AzureStorageBlobContainer"),
					KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
					URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExportPipeline) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportPipeline)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ExportPipelineCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExportPipelines_Delete(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ExportPipelineDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportPipelineDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewExportPipelinesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myExportPipeline",
		&armcontainerregistry.ExportPipelinesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ExportPipelineDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ExportPipelineDelete.json: %v", err)
	}
}

func TestRegistries_ImportImage(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportImageByManifestDigest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportImageByManifestDigest"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginImportImage(ctx,
		"myResourceGroup",
		"myRegistry",
		armcontainerregistry.ImportImageParameters{
			Mode: to.Ptr(armcontainerregistry.ImportModeForce),
			Source: &armcontainerregistry.ImportSource{
				ResourceID:  to.Ptr("/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/sourceResourceGroup/providers/Microsoft.ContainerRegistry/registries/sourceRegistry"),
				SourceImage: to.Ptr("sourceRepository@sha256:0000000000000000000000000000000000000000000000000000000000000000"),
			},
			TargetTags: []*string{
				to.Ptr("targetRepository:targetTag")},
			UntaggedTargetRepositories: []*string{
				to.Ptr("targetRepository1")},
		},
		&armcontainerregistry.RegistriesClientBeginImportImageOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportImageByManifestDigest.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportImageByManifestDigest.json: %v", err)
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportImageByTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportImageByTag"},
	})
	client = armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginImportImage(ctx,
		"myResourceGroup",
		"myRegistry",
		armcontainerregistry.ImportImageParameters{
			Mode: to.Ptr(armcontainerregistry.ImportModeForce),
			Source: &armcontainerregistry.ImportSource{
				ResourceID:  to.Ptr("/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/sourceResourceGroup/providers/Microsoft.ContainerRegistry/registries/sourceRegistry"),
				SourceImage: to.Ptr("sourceRepository:sourceTag"),
			},
			TargetTags: []*string{
				to.Ptr("targetRepository:targetTag")},
			UntaggedTargetRepositories: []*string{
				to.Ptr("targetRepository1")},
		},
		&armcontainerregistry.RegistriesClientBeginImportImageOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportImageByTag.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportImageByTag.json: %v", err)
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportImageFromPublicRegistry.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportImageFromPublicRegistry"},
	})
	client = armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginImportImage(ctx,
		"myResourceGroup",
		"myRegistry",
		armcontainerregistry.ImportImageParameters{
			Mode: to.Ptr(armcontainerregistry.ImportModeForce),
			Source: &armcontainerregistry.ImportSource{
				RegistryURI: to.Ptr("registry.hub.docker.com"),
				SourceImage: to.Ptr("library/hello-world"),
			},
			TargetTags: []*string{
				to.Ptr("targetRepository:targetTag")},
			UntaggedTargetRepositories: []*string{
				to.Ptr("targetRepository1")},
		},
		&armcontainerregistry.RegistriesClientBeginImportImageOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportImageFromPublicRegistry.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportImageFromPublicRegistry.json: %v", err)
	}
}

func TestRegistries_CheckNameAvailability(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryCheckNameAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryCheckNameAvailable"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armcontainerregistry.RegistryNameCheckRequest{
			Name: to.Ptr("myRegistry"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryCheckNameAvailable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.RegistryNameStatus{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.RegistryNameStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegistryNameStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryCheckNameAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryCheckNameNotAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryCheckNameNotAvailable"},
	})
	client = armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.CheckNameAvailability(ctx,
		armcontainerregistry.RegistryNameCheckRequest{
			Name: to.Ptr("myRegistry"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryCheckNameNotAvailable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.RegistryNameStatus{
			Message:       to.Ptr("The registry myRegistry is already in use."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("AlreadyExists"),
		}
		if !reflect.DeepEqual(exampleRes, res.RegistryNameStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegistryNameStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryCheckNameNotAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistries_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.RegistryListResult{
			Value: []*armcontainerregistry.Registry{
				{
					Name:     to.Ptr("myRegistry"),
					Type:     to.Ptr("Microsoft.ContainerRegistry/registries"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armcontainerregistry.RegistryProperties{
						AdminUserEnabled:      to.Ptr(false),
						AnonymousPullEnabled:  to.Ptr(false),
						CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t }()),
						DataEndpointEnabled:   to.Ptr(false),
						DataEndpointHostNames: []*string{},
						Encryption: &armcontainerregistry.EncryptionProperty{
							Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
						},
						LoginServer:              to.Ptr("myRegistry.azurecr-test.io"),
						NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
						NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
							DefaultAction:       to.Ptr(armcontainerregistry.DefaultActionAllow),
							IPRules:             []*armcontainerregistry.IPRule{},
							VirtualNetworkRules: []*armcontainerregistry.VirtualNetworkRule{},
						},
						Policies: &armcontainerregistry.Policies{
							ExportPolicy: &armcontainerregistry.ExportPolicy{
								Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
							},
							QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
								Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
							},
							RetentionPolicy: &armcontainerregistry.RetentionPolicy{
								Days:            to.Ptr[int32](7),
								LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t }()),
								Status:          to.Ptr(armcontainerregistry.PolicyStatusDisabled),
							},
							TrustPolicy: &armcontainerregistry.TrustPolicy{
								Type:   to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
								Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
							},
						},
						PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
						ZoneRedundancy:             to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
					},
					SKU: &armcontainerregistry.SKU{
						Name: to.Ptr(armcontainerregistry.SKUNameStandard),
						Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RegistryListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RegistryListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistries_ListByResourceGroup(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.RegistryListResult{
			Value: []*armcontainerregistry.Registry{
				{
					Name:     to.Ptr("myRegistry"),
					Type:     to.Ptr("Microsoft.ContainerRegistry/registries"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armcontainerregistry.RegistryProperties{
						AdminUserEnabled:      to.Ptr(false),
						AnonymousPullEnabled:  to.Ptr(false),
						CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t }()),
						DataEndpointEnabled:   to.Ptr(false),
						DataEndpointHostNames: []*string{},
						Encryption: &armcontainerregistry.EncryptionProperty{
							Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
						},
						LoginServer:              to.Ptr("myRegistry.azurecr-test.io"),
						NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
						NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
							DefaultAction:       to.Ptr(armcontainerregistry.DefaultActionAllow),
							IPRules:             []*armcontainerregistry.IPRule{},
							VirtualNetworkRules: []*armcontainerregistry.VirtualNetworkRule{},
						},
						Policies: &armcontainerregistry.Policies{
							ExportPolicy: &armcontainerregistry.ExportPolicy{
								Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
							},
							QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
								Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
							},
							RetentionPolicy: &armcontainerregistry.RetentionPolicy{
								Days:            to.Ptr[int32](7),
								LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t }()),
								Status:          to.Ptr(armcontainerregistry.PolicyStatusDisabled),
							},
							TrustPolicy: &armcontainerregistry.TrustPolicy{
								Type:   to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
								Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
							},
						},
						PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
						ZoneRedundancy:             to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
					},
					SKU: &armcontainerregistry.SKU{
						Name: to.Ptr(armcontainerregistry.SKUNameStandard),
						Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RegistryListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RegistryListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistries_Get(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Registry{
			Name:     to.Ptr("myRegistry"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.RegistryProperties{
				AdminUserEnabled:      to.Ptr(false),
				AnonymousPullEnabled:  to.Ptr(false),
				CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t }()),
				DataEndpointEnabled:   to.Ptr(false),
				DataEndpointHostNames: []*string{},
				Encryption: &armcontainerregistry.EncryptionProperty{
					Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
				},
				LoginServer:              to.Ptr("myRegistry.azurecr-test.io"),
				NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
				NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
					DefaultAction:       to.Ptr(armcontainerregistry.DefaultActionAllow),
					IPRules:             []*armcontainerregistry.IPRule{},
					VirtualNetworkRules: []*armcontainerregistry.VirtualNetworkRule{},
				},
				Policies: &armcontainerregistry.Policies{
					ExportPolicy: &armcontainerregistry.ExportPolicy{
						Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
					},
					QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
						Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
					},
					RetentionPolicy: &armcontainerregistry.RetentionPolicy{
						Days:            to.Ptr[int32](7),
						LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t }()),
						Status:          to.Ptr(armcontainerregistry.PolicyStatusDisabled),
					},
					TrustPolicy: &armcontainerregistry.TrustPolicy{
						Type:   to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
						Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
					},
				},
				PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
				ZoneRedundancy:             to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
			},
			SKU: &armcontainerregistry.SKU{
				Name: to.Ptr(armcontainerregistry.SKUNameStandard),
				Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Registry) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Registry)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistries_Create(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		armcontainerregistry.Registry{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.RegistryProperties{
				AdminUserEnabled: to.Ptr(true),
			},
			SKU: &armcontainerregistry.SKU{
				Name: to.Ptr(armcontainerregistry.SKUNameStandard),
			},
		},
		&armcontainerregistry.RegistriesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Registry{
			Name:     to.Ptr("myRegistry"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.RegistryProperties{
				AdminUserEnabled:      to.Ptr(true),
				AnonymousPullEnabled:  to.Ptr(false),
				CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t }()),
				DataEndpointEnabled:   to.Ptr(false),
				DataEndpointHostNames: []*string{},
				Encryption: &armcontainerregistry.EncryptionProperty{
					Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
				},
				LoginServer:              to.Ptr("myRegistry.azurecr-test.io"),
				NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
				NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
					DefaultAction:       to.Ptr(armcontainerregistry.DefaultActionAllow),
					IPRules:             []*armcontainerregistry.IPRule{},
					VirtualNetworkRules: []*armcontainerregistry.VirtualNetworkRule{},
				},
				Policies: &armcontainerregistry.Policies{
					ExportPolicy: &armcontainerregistry.ExportPolicy{
						Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
					},
					QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
						Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
					},
					RetentionPolicy: &armcontainerregistry.RetentionPolicy{
						Days:            to.Ptr[int32](7),
						LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t }()),
						Status:          to.Ptr(armcontainerregistry.PolicyStatusDisabled),
					},
					TrustPolicy: &armcontainerregistry.TrustPolicy{
						Type:   to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
						Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
					},
				},
				PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
				ZoneRedundancy:             to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
			},
			SKU: &armcontainerregistry.SKU{
				Name: to.Ptr(armcontainerregistry.SKUNameStandard),
				Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Registry) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Registry)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryCreateZoneRedundant.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryCreateZoneRedundant"},
	})
	client = armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		armcontainerregistry.Registry{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.RegistryProperties{
				ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyEnabled),
			},
			SKU: &armcontainerregistry.SKU{
				Name: to.Ptr(armcontainerregistry.SKUNameStandard),
			},
		},
		&armcontainerregistry.RegistriesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryCreateZoneRedundant.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryCreateZoneRedundant.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Registry{
			Name:     to.Ptr("myRegistry"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.RegistryProperties{
				AdminUserEnabled:      to.Ptr(false),
				AnonymousPullEnabled:  to.Ptr(false),
				CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t }()),
				DataEndpointEnabled:   to.Ptr(false),
				DataEndpointHostNames: []*string{},
				Encryption: &armcontainerregistry.EncryptionProperty{
					Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
				},
				LoginServer:              to.Ptr("myRegistry.azurecr-test.io"),
				NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
				NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
					DefaultAction:       to.Ptr(armcontainerregistry.DefaultActionAllow),
					IPRules:             []*armcontainerregistry.IPRule{},
					VirtualNetworkRules: []*armcontainerregistry.VirtualNetworkRule{},
				},
				Policies: &armcontainerregistry.Policies{
					ExportPolicy: &armcontainerregistry.ExportPolicy{
						Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
					},
					QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
						Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
					},
					RetentionPolicy: &armcontainerregistry.RetentionPolicy{
						Days:            to.Ptr[int32](7),
						LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t }()),
						Status:          to.Ptr(armcontainerregistry.PolicyStatusDisabled),
					},
					TrustPolicy: &armcontainerregistry.TrustPolicy{
						Type:   to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
						Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
					},
				},
				PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
				ZoneRedundancy:             to.Ptr(armcontainerregistry.ZoneRedundancyEnabled),
			},
			SKU: &armcontainerregistry.SKU{
				Name: to.Ptr(armcontainerregistry.SKUNameStandard),
				Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Registry) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Registry)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryCreateZoneRedundant.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistries_Delete(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		&armcontainerregistry.RegistriesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryDelete.json: %v", err)
	}
}

func TestRegistries_Update(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		armcontainerregistry.RegistryUpdateParameters{
			Properties: &armcontainerregistry.RegistryPropertiesUpdateParameters{
				AdminUserEnabled: to.Ptr(true),
			},
			SKU: &armcontainerregistry.SKU{
				Name: to.Ptr(armcontainerregistry.SKUNameStandard),
			},
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
		},
		&armcontainerregistry.RegistriesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Registry{
			Name:     to.Ptr("myRegistry"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.RegistryProperties{
				AdminUserEnabled:      to.Ptr(true),
				AnonymousPullEnabled:  to.Ptr(false),
				CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t }()),
				DataEndpointEnabled:   to.Ptr(false),
				DataEndpointHostNames: []*string{},
				Encryption: &armcontainerregistry.EncryptionProperty{
					Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
				},
				LoginServer:              to.Ptr("myRegistry.azurecr-test.io"),
				NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
				NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
					DefaultAction:       to.Ptr(armcontainerregistry.DefaultActionAllow),
					IPRules:             []*armcontainerregistry.IPRule{},
					VirtualNetworkRules: []*armcontainerregistry.VirtualNetworkRule{},
				},
				Policies: &armcontainerregistry.Policies{
					ExportPolicy: &armcontainerregistry.ExportPolicy{
						Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
					},
					QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
						Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
					},
					RetentionPolicy: &armcontainerregistry.RetentionPolicy{
						Days:            to.Ptr[int32](7),
						LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t }()),
						Status:          to.Ptr(armcontainerregistry.PolicyStatusDisabled),
					},
					TrustPolicy: &armcontainerregistry.TrustPolicy{
						Type:   to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
						Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
					},
				},
				PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
				ZoneRedundancy:             to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
			},
			SKU: &armcontainerregistry.SKU{
				Name: to.Ptr(armcontainerregistry.SKUNameStandard),
				Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Registry) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Registry)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistries_ListUsages(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryListUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryListUsages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListUsages(ctx,
		"myResourceGroup",
		"myRegistry",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryListUsages.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.RegistryUsageListResult{
			Value: []*armcontainerregistry.RegistryUsage{
				{
					Name:         to.Ptr("Size"),
					CurrentValue: to.Ptr[int64](12345678),
					Limit:        to.Ptr[int64](107374182400),
					Unit:         to.Ptr(armcontainerregistry.RegistryUsageUnitBytes),
				},
				{
					Name:         to.Ptr("Webhooks"),
					CurrentValue: to.Ptr[int64](2),
					Limit:        to.Ptr[int64](10),
					Unit:         to.Ptr(armcontainerregistry.RegistryUsageUnitCount),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.RegistryUsageListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegistryUsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryListUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistries_ListPrivateLinkResources(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryListPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryListPrivateLinkResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListPrivateLinkResources("myResourceGroup",
		"myRegistry",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryListPrivateLinkResources.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.PrivateLinkResourceListResult{
			Value: []*armcontainerregistry.PrivateLinkResource{
				{
					Name: to.Ptr("registry"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/privateLinkResources/registry"),
					Properties: &armcontainerregistry.PrivateLinkResourceProperties{
						GroupID: to.Ptr("registry"),
						RequiredMembers: []*string{
							to.Ptr("registry"),
							to.Ptr("registry_data_myregion")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.azurecr.io")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryListPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistries_GetPrivateLinkResource(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryGetPrivateLinkResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryGetPrivateLinkResource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetPrivateLinkResource(ctx,
		"myResourceGroup",
		"myRegistry",
		"registry",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryGetPrivateLinkResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.PrivateLinkResource{
			Name: to.Ptr("registry"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/privateLinkResources/registry"),
			Properties: &armcontainerregistry.PrivateLinkResourceProperties{
				GroupID: to.Ptr("registry"),
				RequiredMembers: []*string{
					to.Ptr("registry"),
					to.Ptr("registry_data_myregion")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.azurecr.io")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryGetPrivateLinkResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistries_ListCredentials(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryListCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryListCredentials"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListCredentials(ctx,
		"myResourceGroup",
		"myRegistry",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryListCredentials.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.RegistryListCredentialsResult{
			Passwords: []*armcontainerregistry.RegistryPassword{
				{
					Name:  to.Ptr(armcontainerregistry.PasswordNamePassword),
					Value: to.Ptr("00000000000000000000000000000000"),
				},
				{
					Name:  to.Ptr(armcontainerregistry.PasswordNamePassword2),
					Value: to.Ptr("00000000000000000000000000000000"),
				}},
			Username: to.Ptr("myRegistry"),
		}
		if !reflect.DeepEqual(exampleRes, res.RegistryListCredentialsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegistryListCredentialsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryListCredentials.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistries_RegenerateCredential(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryRegenerateCredential.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryRegenerateCredential"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.RegenerateCredential(ctx,
		"myResourceGroup",
		"myRegistry",
		armcontainerregistry.RegenerateCredentialParameters{
			Name: to.Ptr(armcontainerregistry.PasswordNamePassword),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryRegenerateCredential.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.RegistryListCredentialsResult{
			Passwords: []*armcontainerregistry.RegistryPassword{
				{
					Name:  to.Ptr(armcontainerregistry.PasswordNamePassword),
					Value: to.Ptr("00000000000000000000000000000000"),
				},
				{
					Name:  to.Ptr(armcontainerregistry.PasswordNamePassword2),
					Value: to.Ptr("00000000000000000000000000000000"),
				}},
			Username: to.Ptr("myRegistry"),
		}
		if !reflect.DeepEqual(exampleRes, res.RegistryListCredentialsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegistryListCredentialsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryRegenerateCredential.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistries_GenerateCredentials(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryGenerateCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryGenerateCredentials"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginGenerateCredentials(ctx,
		"myResourceGroup",
		"myRegistry",
		armcontainerregistry.GenerateCredentialsParameters{
			Expiry:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T15:59:59.0707808Z"); return t }()),
			TokenID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/myToken"),
		},
		&armcontainerregistry.RegistriesClientBeginGenerateCredentialsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryGenerateCredentials.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryGenerateCredentials.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.GenerateCredentialsResult{
			Passwords: []*armcontainerregistry.TokenPassword{
				{
					Name:   to.Ptr(armcontainerregistry.TokenPasswordNamePassword1),
					Expiry: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T15:59:59.0707808Z"); return t }()),
					Value:  to.Ptr("00000000000000000000000000000000"),
				},
				{
					Name:   to.Ptr(armcontainerregistry.TokenPasswordNamePassword2),
					Expiry: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T15:59:59.0707808Z"); return t }()),
					Value:  to.Ptr("00000000000000000000000000000000"),
				}},
			Username: to.Ptr("myToken"),
		}
		if !reflect.DeepEqual(exampleRes, res.GenerateCredentialsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GenerateCredentialsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/RegistryGenerateCredentials.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistries_ScheduleRun(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Registries_ScheduleRun"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRegistriesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginScheduleRun(ctx,
		"myResourceGroup",
		"myRegistry",
		&armcontainerregistry.DockerBuildRequest{
			Type:             to.Ptr("DockerBuildRequest"),
			IsArchiveEnabled: to.Ptr(true),
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			Arguments: []*armcontainerregistry.Argument{
				{
					Name:     to.Ptr("mytestargument"),
					IsSecret: to.Ptr(false),
					Value:    to.Ptr("mytestvalue"),
				},
				{
					Name:     to.Ptr("mysecrettestargument"),
					IsSecret: to.Ptr(true),
					Value:    to.Ptr("mysecrettestvalue"),
				}},
			DockerFilePath: to.Ptr("DockerFile"),
			ImageNames: []*string{
				to.Ptr("azurerest:testtag")},
			IsPushEnabled: to.Ptr(true),
			NoCache:       to.Ptr(true),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			SourceLocation: to.Ptr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
		},
		&armcontainerregistry.RegistriesClientBeginScheduleRunOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Run{
			Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/run"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
			Properties: &armcontainerregistry.RunProperties{
				LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
				Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Run) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Run)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_EncodedTaskRun.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Registries_ScheduleRun_EncodedTaskRun"},
	})
	client = armcontainerregistry.NewRegistriesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err = client.BeginScheduleRun(ctx,
		"myResourceGroup",
		"myRegistry",
		&armcontainerregistry.EncodedTaskRunRequest{
			Type: to.Ptr("EncodedTaskRunRequest"),
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			EncodedTaskContent:   to.Ptr("c3RlcHM6Cnt7IGlmIFZhbHVlcy5lbnZpcm9ubWVudCA9PSAncHJvZCcgfX0KICAtIHJ1bjogcHJvZCBzZXR1cAp7eyBlbHNlIGlmIFZhbHVlcy5lbnZpcm9ubWVudCA9PSAnc3RhZ2luZycgfX0KICAtIHJ1bjogc3RhZ2luZyBzZXR1cAp7eyBlbHNlIH19CiAgLSBydW46IGRlZmF1bHQgc2V0dXAKe3sgZW5kIH19CgogIC0gcnVuOiBidWlsZCAtdCBGYW5jeVRoaW5nOnt7LlZhbHVlcy5lbnZpcm9ubWVudH19LXt7LlZhbHVlcy52ZXJzaW9ufX0gLgoKcHVzaDogWydGYW5jeVRoaW5nOnt7LlZhbHVlcy5lbnZpcm9ubWVudH19LXt7LlZhbHVlcy52ZXJzaW9ufX0nXQ=="),
			EncodedValuesContent: to.Ptr("ZW52aXJvbm1lbnQ6IHByb2QKdmVyc2lvbjogMQ=="),
			Platform: &armcontainerregistry.PlatformProperties{
				OS: to.Ptr(armcontainerregistry.OSLinux),
			},
			Values: []*armcontainerregistry.SetValue{
				{
					Name:     to.Ptr("mytestargument"),
					IsSecret: to.Ptr(false),
					Value:    to.Ptr("mytestvalue"),
				},
				{
					Name:     to.Ptr("mysecrettestargument"),
					IsSecret: to.Ptr(true),
					Value:    to.Ptr("mysecrettestvalue"),
				}},
		},
		&armcontainerregistry.RegistriesClientBeginScheduleRunOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_EncodedTaskRun.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_EncodedTaskRun.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Run{
			Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/run"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
			Properties: &armcontainerregistry.RunProperties{
				LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
				Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Run) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Run)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_EncodedTaskRun.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_FileTaskRun.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Registries_ScheduleRun_FileTaskRun"},
	})
	client = armcontainerregistry.NewRegistriesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err = client.BeginScheduleRun(ctx,
		"myResourceGroup",
		"myRegistry",
		&armcontainerregistry.FileTaskRunRequest{
			Type: to.Ptr("FileTaskRunRequest"),
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			Platform: &armcontainerregistry.PlatformProperties{
				OS: to.Ptr(armcontainerregistry.OSLinux),
			},
			SourceLocation: to.Ptr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
			TaskFilePath:   to.Ptr("acb.yaml"),
			Values: []*armcontainerregistry.SetValue{
				{
					Name:     to.Ptr("mytestargument"),
					IsSecret: to.Ptr(false),
					Value:    to.Ptr("mytestvalue"),
				},
				{
					Name:     to.Ptr("mysecrettestargument"),
					IsSecret: to.Ptr(true),
					Value:    to.Ptr("mysecrettestvalue"),
				}},
			ValuesFilePath: to.Ptr("prod-values.yaml"),
		},
		&armcontainerregistry.RegistriesClientBeginScheduleRunOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_FileTaskRun.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_FileTaskRun.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Run{
			Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/run"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
			Properties: &armcontainerregistry.RunProperties{
				LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
				Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Run) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Run)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_FileTaskRun.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_Task.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Registries_ScheduleRun_Task"},
	})
	client = armcontainerregistry.NewRegistriesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err = client.BeginScheduleRun(ctx,
		"myResourceGroup",
		"myRegistry",
		&armcontainerregistry.TaskRunRequest{
			Type: to.Ptr("TaskRunRequest"),
			OverrideTaskStepProperties: &armcontainerregistry.OverrideTaskStepProperties{
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					},
					{
						Name:     to.Ptr("mysecrettestargument"),
						IsSecret: to.Ptr(true),
						Value:    to.Ptr("mysecrettestvalue"),
					}},
				File:               to.Ptr("overriddenDockerfile"),
				Target:             to.Ptr("build"),
				UpdateTriggerToken: to.Ptr("aGVsbG8gd29ybGQ="),
				Values: []*armcontainerregistry.SetValue{
					{
						Name:     to.Ptr("mytestname"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					},
					{
						Name:     to.Ptr("mysecrettestname"),
						IsSecret: to.Ptr(true),
						Value:    to.Ptr("mysecrettestvalue"),
					}},
			},
			TaskID: to.Ptr("myTask"),
		},
		&armcontainerregistry.RegistriesClientBeginScheduleRunOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_Task.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_Task.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Run{
			Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/run"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
			Properties: &armcontainerregistry.RunProperties{
				LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
				Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Run) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Run)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_Task.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_FileTask_WithCustomCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Registries_ScheduleRun_Task_WithCustomCredentials"},
	})
	client = armcontainerregistry.NewRegistriesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err = client.BeginScheduleRun(ctx,
		"myResourceGroup",
		"myRegistry",
		&armcontainerregistry.FileTaskRunRequest{
			Type: to.Ptr("FileTaskRunRequest"),
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azurecr.io": {
						Password: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
							Value: to.Ptr("***"),
						},
						UserName: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
							Value: to.Ptr("reg1"),
						},
					},
				},
				SourceRegistry: &armcontainerregistry.SourceRegistryCredentials{
					LoginMode: to.Ptr(armcontainerregistry.SourceRegistryLoginModeDefault),
				},
			},
			Platform: &armcontainerregistry.PlatformProperties{
				OS: to.Ptr(armcontainerregistry.OSLinux),
			},
			TaskFilePath: to.Ptr("acb.yaml"),
			Values: []*armcontainerregistry.SetValue{
				{
					Name:     to.Ptr("mytestargument"),
					IsSecret: to.Ptr(false),
					Value:    to.Ptr("mytestvalue"),
				},
				{
					Name:     to.Ptr("mysecrettestargument"),
					IsSecret: to.Ptr(true),
					Value:    to.Ptr("mysecrettestvalue"),
				}},
		},
		&armcontainerregistry.RegistriesClientBeginScheduleRunOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_FileTask_WithCustomCredentials.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_FileTask_WithCustomCredentials.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Run{
			Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/run"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
			Properties: &armcontainerregistry.RunProperties{
				LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
				Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Run) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Run)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_FileTask_WithCustomCredentials.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_WithCustomCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Registries_ScheduleRun_WithCustomCredentials"},
	})
	client = armcontainerregistry.NewRegistriesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err = client.BeginScheduleRun(ctx,
		"myResourceGroup",
		"myRegistry",
		&armcontainerregistry.DockerBuildRequest{
			Type:             to.Ptr("DockerBuildRequest"),
			IsArchiveEnabled: to.Ptr(true),
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			Arguments: []*armcontainerregistry.Argument{
				{
					Name:     to.Ptr("mytestargument"),
					IsSecret: to.Ptr(false),
					Value:    to.Ptr("mytestvalue"),
				},
				{
					Name:     to.Ptr("mysecrettestargument"),
					IsSecret: to.Ptr(true),
					Value:    to.Ptr("mysecrettestvalue"),
				}},
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azurecr.io": {
						Password: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
							Value: to.Ptr("***"),
						},
						UserName: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
							Value: to.Ptr("reg1"),
						},
					},
					"myregistry2.azurecr.io": {
						Password: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
							Value: to.Ptr("***"),
						},
						UserName: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
							Value: to.Ptr("reg2"),
						},
					},
				},
				SourceRegistry: &armcontainerregistry.SourceRegistryCredentials{
					LoginMode: to.Ptr(armcontainerregistry.SourceRegistryLoginModeDefault),
				},
			},
			DockerFilePath: to.Ptr("DockerFile"),
			ImageNames: []*string{
				to.Ptr("azurerest:testtag")},
			IsPushEnabled: to.Ptr(true),
			NoCache:       to.Ptr(true),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			SourceLocation: to.Ptr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
			Target:         to.Ptr("stage1"),
		},
		&armcontainerregistry.RegistriesClientBeginScheduleRunOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_WithCustomCredentials.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_WithCustomCredentials.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Run{
			Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/run"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
			Properties: &armcontainerregistry.RunProperties{
				LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
				Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Run) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Run)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_WithCustomCredentials.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_WithLogTemplate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Registries_ScheduleRun_WithLogTemplate"},
	})
	client = armcontainerregistry.NewRegistriesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err = client.BeginScheduleRun(ctx,
		"myResourceGroup",
		"myRegistry",
		&armcontainerregistry.DockerBuildRequest{
			Type:             to.Ptr("DockerBuildRequest"),
			IsArchiveEnabled: to.Ptr(true),
			LogTemplate:      to.Ptr("acr/tasks:{{.Run.OS}}"),
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			Arguments: []*armcontainerregistry.Argument{
				{
					Name:     to.Ptr("mytestargument"),
					IsSecret: to.Ptr(false),
					Value:    to.Ptr("mytestvalue"),
				},
				{
					Name:     to.Ptr("mysecrettestargument"),
					IsSecret: to.Ptr(true),
					Value:    to.Ptr("mysecrettestvalue"),
				}},
			DockerFilePath: to.Ptr("DockerFile"),
			ImageNames: []*string{
				to.Ptr("azurerest:testtag")},
			IsPushEnabled: to.Ptr(true),
			NoCache:       to.Ptr(true),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			SourceLocation: to.Ptr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
		},
		&armcontainerregistry.RegistriesClientBeginScheduleRunOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_WithLogTemplate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_WithLogTemplate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Run{
			Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/run"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
			Properties: &armcontainerregistry.RunProperties{
				LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
				Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Run) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Run)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_WithLogTemplate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImportPipelines_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportPipelineList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportPipelineList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewImportPipelinesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myRegistry",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportPipelineList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.ImportPipelineListResult{
			Value: []*armcontainerregistry.ImportPipeline{
				{
					Name: to.Ptr("myImportPipeline"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/importPipelines"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline"),
					Identity: &armcontainerregistry.IdentityProperties{
						Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeUserAssigned),
						UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
							"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {
								ClientID:    to.Ptr("d3ce1bc2-f7d7-4a5b-9979-950f4e57680e"),
								PrincipalID: to.Ptr("b6p9f58b-6fbf-4efd-a7e0-fvd46911a466"),
							},
						},
					},
					Location: to.Ptr("westus"),
					Properties: &armcontainerregistry.ImportPipelineProperties{
						Options: []*armcontainerregistry.PipelineOptions{
							to.Ptr(armcontainerregistry.PipelineOptionsOverwriteTags),
							to.Ptr(armcontainerregistry.PipelineOptionsDeleteSourceBlobOnSuccess),
							to.Ptr(armcontainerregistry.PipelineOptionsContinueOnErrors)},
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						Source: &armcontainerregistry.ImportPipelineSourceProperties{
							Type:        to.Ptr(armcontainerregistry.PipelineSourceTypeAzureStorageBlobContainer),
							KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrimportsas"),
							URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
						},
						Trigger: &armcontainerregistry.PipelineTriggerProperties{
							SourceTrigger: &armcontainerregistry.PipelineSourceTriggerProperties{
								Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ImportPipelineListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ImportPipelineListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportPipelineList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImportPipelines_Get(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportPipelineGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportPipelineGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewImportPipelinesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myImportPipeline",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportPipelineGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.ImportPipeline{
			Name: to.Ptr("myImportPipeline"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/importPipelines"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline"),
			Identity: &armcontainerregistry.IdentityProperties{
				Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {
						ClientID:    to.Ptr("d3ce1bc2-f7d7-4a5b-9979-950f4e57680e"),
						PrincipalID: to.Ptr("b6p9f58b-6fbf-4efd-a7e0-fvd46911a466"),
					},
				},
			},
			Location: to.Ptr("westus"),
			Properties: &armcontainerregistry.ImportPipelineProperties{
				Options: []*armcontainerregistry.PipelineOptions{
					to.Ptr(armcontainerregistry.PipelineOptionsOverwriteTags),
					to.Ptr(armcontainerregistry.PipelineOptionsDeleteSourceBlobOnSuccess),
					to.Ptr(armcontainerregistry.PipelineOptionsContinueOnErrors)},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Source: &armcontainerregistry.ImportPipelineSourceProperties{
					Type:        to.Ptr(armcontainerregistry.PipelineSourceTypeAzureStorageBlobContainer),
					KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrimportsas"),
					URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
				},
				Trigger: &armcontainerregistry.PipelineTriggerProperties{
					SourceTrigger: &armcontainerregistry.PipelineSourceTriggerProperties{
						Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImportPipeline) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImportPipeline)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportPipelineGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImportPipelines_Create(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportPipelineCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportPipelineCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewImportPipelinesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myImportPipeline",
		armcontainerregistry.ImportPipeline{
			Identity: &armcontainerregistry.IdentityProperties{
				Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {},
				},
			},
			Location: to.Ptr("westus"),
			Properties: &armcontainerregistry.ImportPipelineProperties{
				Options: []*armcontainerregistry.PipelineOptions{
					to.Ptr(armcontainerregistry.PipelineOptionsOverwriteTags),
					to.Ptr(armcontainerregistry.PipelineOptionsDeleteSourceBlobOnSuccess),
					to.Ptr(armcontainerregistry.PipelineOptionsContinueOnErrors)},
				Source: &armcontainerregistry.ImportPipelineSourceProperties{
					Type:        to.Ptr(armcontainerregistry.PipelineSourceTypeAzureStorageBlobContainer),
					KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrimportsas"),
					URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
				},
			},
		},
		&armcontainerregistry.ImportPipelinesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportPipelineCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportPipelineCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.ImportPipeline{
			Name: to.Ptr("myImportPipeline"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/importPipelines"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline"),
			Identity: &armcontainerregistry.IdentityProperties{
				Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {
						ClientID:    to.Ptr("d3ce1bc2-f7d7-4a5b-9979-950f4e57680e"),
						PrincipalID: to.Ptr("b6p9f58b-6fbf-4efd-a7e0-fvd46911a466"),
					},
				},
			},
			Location: to.Ptr("westus"),
			Properties: &armcontainerregistry.ImportPipelineProperties{
				Options: []*armcontainerregistry.PipelineOptions{
					to.Ptr(armcontainerregistry.PipelineOptionsOverwriteTags),
					to.Ptr(armcontainerregistry.PipelineOptionsDeleteSourceBlobOnSuccess),
					to.Ptr(armcontainerregistry.PipelineOptionsContinueOnErrors)},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Source: &armcontainerregistry.ImportPipelineSourceProperties{
					Type:        to.Ptr(armcontainerregistry.PipelineSourceTypeAzureStorageBlobContainer),
					KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrimportsas"),
					URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
				},
				Trigger: &armcontainerregistry.PipelineTriggerProperties{
					SourceTrigger: &armcontainerregistry.PipelineSourceTriggerProperties{
						Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImportPipeline) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImportPipeline)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportPipelineCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImportPipelines_Delete(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportPipelineDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportPipelineDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewImportPipelinesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myImportPipeline",
		&armcontainerregistry.ImportPipelinesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportPipelineDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ImportPipelineDelete.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/OperationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/OperationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.OperationListResult{
			Value: []*armcontainerregistry.OperationDefinition{
				{
					Name: to.Ptr("Microsoft.ContainerRegistry/locations/deleteVirtualNetworkOrSubnets/action"),
					Display: &armcontainerregistry.OperationDisplayDefinition{
						Description: to.Ptr("Notifies Microsoft.ContainerRegistry that virtual network or subnet is being deleted"),
						Operation:   to.Ptr("Delete virtual network or subnets notifications"),
						Provider:    to.Ptr("Microsoft ContainerRegistry"),
						Resource:    to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/OperationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelineRuns_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PipelineRunList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewPipelineRunsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myRegistry",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.PipelineRunListResult{
			Value: []*armcontainerregistry.PipelineRun{
				{
					Name: to.Ptr("myPipelineRun"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/pipelineRuns"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/pipelineRuns/myPipelineRun"),
					Properties: &armcontainerregistry.PipelineRunProperties{
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						Response: &armcontainerregistry.PipelineRunResponse{
							CatalogDigest: to.Ptr("sha256@"),
							Progress: &armcontainerregistry.ProgressProperties{
								Percentage: to.Ptr("20"),
							},
							StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:23:21.9261521+00:00"); return t }()),
							Status:    to.Ptr("Running"),
							Target: &armcontainerregistry.ExportPipelineTargetProperties{
								Type:        to.Ptr("AzureStorageBlob"),
								KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
								URI:         to.Ptr("https://accountname.blob.core.windows.net/containername/myblob.tar.gz"),
							},
						},
						Request: &armcontainerregistry.PipelineRunRequest{
							Artifacts: []*string{
								to.Ptr("sourceRepository/hello-world"),
								to.Ptr("sourceRepository2@sha256:00000000000000000000000000000000000")},
							PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
						},
					},
				},
				{
					Name: to.Ptr("myPipelineRun"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/pipelineRuns"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/pipelineRuns/myPipelineRun"),
					Properties: &armcontainerregistry.PipelineRunProperties{
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						Response: &armcontainerregistry.PipelineRunResponse{
							CatalogDigest: to.Ptr("sha256@"),
							ImportedArtifacts: []*string{
								to.Ptr("sourceRepository/hello-world"),
								to.Ptr("sourceRepository2@sha256:00000000000000000000000000000000000")},
							Progress: &armcontainerregistry.ProgressProperties{
								Percentage: to.Ptr("100"),
							},
							Source: &armcontainerregistry.ImportPipelineSourceProperties{
								Type:        to.Ptr(armcontainerregistry.PipelineSourceType("AzureStorageBlob")),
								KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrimportsas"),
								URI:         to.Ptr("https://accountname.blob.core.windows.net/containername/myblob.tar.gz"),
							},
							StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-03T17:23:21.9261521+00:00"); return t }()),
							Status:    to.Ptr("Succeeded"),
						},
						Request: &armcontainerregistry.PipelineRunRequest{
							PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PipelineRunListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PipelineRunListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelineRuns_Get(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PipelineRunGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewPipelineRunsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myPipelineRun",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.PipelineRun{
			Name: to.Ptr("myPipelineRun"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/pipelineRuns"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/pipelineRuns/myPipelineRun"),
			Properties: &armcontainerregistry.PipelineRunProperties{
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Response: &armcontainerregistry.PipelineRunResponse{
					CatalogDigest: to.Ptr("sha256@"),
					Progress: &armcontainerregistry.ProgressProperties{
						Percentage: to.Ptr("20"),
					},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:23:21.9261521+00:00"); return t }()),
					Status:    to.Ptr("Running"),
					Target: &armcontainerregistry.ExportPipelineTargetProperties{
						Type:        to.Ptr("AzureStorageBlob"),
						KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
						URI:         to.Ptr("https://accountname.blob.core.windows.net/containername/myblob.tar.gz"),
					},
				},
				Request: &armcontainerregistry.PipelineRunRequest{
					Artifacts: []*string{
						to.Ptr("sourceRepository/hello-world"),
						to.Ptr("sourceRepository2@sha256:00000000000000000000000000000000000")},
					PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PipelineRun) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PipelineRun)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelineRuns_Create(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunCreate_Export.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PipelineRunCreate_Export"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewPipelineRunsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myPipelineRun",
		armcontainerregistry.PipelineRun{
			Properties: &armcontainerregistry.PipelineRunProperties{
				Request: &armcontainerregistry.PipelineRunRequest{
					Artifacts: []*string{
						to.Ptr("sourceRepository/hello-world"),
						to.Ptr("sourceRepository2@sha256:00000000000000000000000000000000000")},
					PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
					Target: &armcontainerregistry.PipelineRunTargetProperties{
						Name: to.Ptr("myblob.tar.gz"),
						Type: to.Ptr(armcontainerregistry.PipelineRunTargetTypeAzureStorageBlob),
					},
				},
			},
		},
		&armcontainerregistry.PipelineRunsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunCreate_Export.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunCreate_Export.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.PipelineRun{
			Name: to.Ptr("myPipelineRun"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/pipelineRuns"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/pipelineRuns/myPipelineRun"),
			Properties: &armcontainerregistry.PipelineRunProperties{
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Response: &armcontainerregistry.PipelineRunResponse{
					CatalogDigest: to.Ptr("sha256@"),
					Progress: &armcontainerregistry.ProgressProperties{
						Percentage: to.Ptr("20"),
					},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:23:21.9261521+00:00"); return t }()),
					Status:    to.Ptr("Running"),
					Target: &armcontainerregistry.ExportPipelineTargetProperties{
						Type:        to.Ptr("AzureStorageBlob"),
						KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
						URI:         to.Ptr("https://accountname.blob.core.windows.net/containername/myblob.tar.gz"),
					},
				},
				Request: &armcontainerregistry.PipelineRunRequest{
					Artifacts: []*string{
						to.Ptr("sourceRepository/hello-world"),
						to.Ptr("sourceRepository2@sha256:00000000000000000000000000000000000")},
					PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PipelineRun) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PipelineRun)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunCreate_Export.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunCreate_Import.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PipelineRunCreate_Import"},
	})
	client = armcontainerregistry.NewPipelineRunsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myPipelineRun",
		armcontainerregistry.PipelineRun{
			Properties: &armcontainerregistry.PipelineRunProperties{
				ForceUpdateTag: to.Ptr("2020-03-04T17:23:21.9261521+00:00"),
				Request: &armcontainerregistry.PipelineRunRequest{
					CatalogDigest:      to.Ptr("sha256@"),
					PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline"),
					Source: &armcontainerregistry.PipelineRunSourceProperties{
						Name: to.Ptr("myblob.tar.gz"),
						Type: to.Ptr(armcontainerregistry.PipelineRunSourceTypeAzureStorageBlob),
					},
				},
			},
		},
		&armcontainerregistry.PipelineRunsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunCreate_Import.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunCreate_Import.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.PipelineRun{
			Name: to.Ptr("myPipelineRun"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/pipelineRuns"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/pipelineRuns/myPipelineRun"),
			Properties: &armcontainerregistry.PipelineRunProperties{
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Response: &armcontainerregistry.PipelineRunResponse{
					CatalogDigest: to.Ptr("sha256@"),
					ImportedArtifacts: []*string{
						to.Ptr("sourceRepository/hello-world"),
						to.Ptr("sourceRepository2@sha256:00000000000000000000000000000000000")},
					Progress: &armcontainerregistry.ProgressProperties{
						Percentage: to.Ptr("100"),
					},
					Source: &armcontainerregistry.ImportPipelineSourceProperties{
						Type:        to.Ptr(armcontainerregistry.PipelineSourceType("AzureStorageBlob")),
						KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrimportsas"),
						URI:         to.Ptr("https://accountname.blob.core.windows.net/containername/myblob.tar.gz"),
					},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:23:21.9261521+00:00"); return t }()),
					Status:    to.Ptr("Succeeded"),
				},
				Request: &armcontainerregistry.PipelineRunRequest{
					PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PipelineRun) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PipelineRun)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunCreate_Import.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelineRuns_Delete(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PipelineRunDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewPipelineRunsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myPipelineRun",
		&armcontainerregistry.PipelineRunsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PipelineRunDelete.json: %v", err)
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PrivateEndpointConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myRegistry",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PrivateEndpointConnectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.PrivateEndpointConnectionListResult{
			Value: []*armcontainerregistry.PrivateEndpointConnection{
				{
					Name: to.Ptr("myConnection"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/privateEndpointConnections/myConnection"),
					Properties: &armcontainerregistry.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armcontainerregistry.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
						},
						PrivateLinkServiceConnectionState: &armcontainerregistry.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr(armcontainerregistry.ActionsRequiredNone),
							Status:          to.Ptr(armcontainerregistry.ConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PrivateEndpointConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PrivateEndpointConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PrivateEndpointConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/privateEndpointConnections/myConnection"),
			Properties: &armcontainerregistry.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armcontainerregistry.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armcontainerregistry.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr(armcontainerregistry.ActionsRequiredNone),
					Status:          to.Ptr(armcontainerregistry.ConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PrivateEndpointConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PrivateEndpointConnectionCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myConnection",
		armcontainerregistry.PrivateEndpointConnection{
			Properties: &armcontainerregistry.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armcontainerregistry.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armcontainerregistry.ConnectionStatusApproved),
				},
			},
		},
		&armcontainerregistry.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PrivateEndpointConnectionCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PrivateEndpointConnectionCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/privateEndpointConnections/myConnection"),
			Properties: &armcontainerregistry.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armcontainerregistry.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armcontainerregistry.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr(armcontainerregistry.ActionsRequiredNone),
					Status:          to.Ptr(armcontainerregistry.ConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PrivateEndpointConnectionCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PrivateEndpointConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myConnection",
		&armcontainerregistry.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
}

func TestReplications_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewReplicationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myRegistry",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.ReplicationListResult{
			Value: []*armcontainerregistry.Replication{
				{
					Name:     to.Ptr("myReplication"),
					Type:     to.Ptr("Microsoft.ContainerRegistry/registries/replications"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/replications/myReplication"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armcontainerregistry.ReplicationProperties{
						ProvisioningState:     to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						RegionEndpointEnabled: to.Ptr(true),
						Status: &armcontainerregistry.Status{
							DisplayStatus: to.Ptr("Ready"),
							Message:       to.Ptr("The replication is ready."),
							Timestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:15:37.0707808Z"); return t }()),
						},
						ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReplicationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReplicationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplications_Get(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicationGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewReplicationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myReplication",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Replication{
			Name:     to.Ptr("myReplication"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/replications"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/replications/myReplication"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.ReplicationProperties{
				ProvisioningState:     to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RegionEndpointEnabled: to.Ptr(true),
				Status: &armcontainerregistry.Status{
					DisplayStatus: to.Ptr("Ready"),
					Message:       to.Ptr("The replication is ready."),
					Timestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:15:37.0707808Z"); return t }()),
				},
				ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Replication) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Replication)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplications_Create(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicationCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewReplicationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myReplication",
		armcontainerregistry.Replication{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
		},
		&armcontainerregistry.ReplicationsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Replication{
			Name:     to.Ptr("myReplication"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/replications"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/replications/myReplication"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.ReplicationProperties{
				ProvisioningState:     to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RegionEndpointEnabled: to.Ptr(true),
				Status: &armcontainerregistry.Status{
					DisplayStatus: to.Ptr("Ready"),
					Message:       to.Ptr("The replication is ready."),
					Timestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:15:37.0707808Z"); return t }()),
				},
				ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Replication) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Replication)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationCreateZoneRedundant.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicationCreateZoneRedundant"},
	})
	client = armcontainerregistry.NewReplicationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myReplication",
		armcontainerregistry.Replication{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.ReplicationProperties{
				RegionEndpointEnabled: to.Ptr(true),
				ZoneRedundancy:        to.Ptr(armcontainerregistry.ZoneRedundancyEnabled),
			},
		},
		&armcontainerregistry.ReplicationsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationCreateZoneRedundant.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationCreateZoneRedundant.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Replication{
			Name:     to.Ptr("myReplication"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/replications"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/replications/myReplication"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.ReplicationProperties{
				ProvisioningState:     to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RegionEndpointEnabled: to.Ptr(true),
				Status: &armcontainerregistry.Status{
					DisplayStatus: to.Ptr("Ready"),
					Message:       to.Ptr("The replication is ready."),
					Timestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:15:37.0707808Z"); return t }()),
				},
				ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Replication) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Replication)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationCreateZoneRedundant.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReplications_Delete(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicationDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewReplicationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myReplication",
		&armcontainerregistry.ReplicationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationDelete.json: %v", err)
	}
}

func TestReplications_Update(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicationUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewReplicationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myReplication",
		armcontainerregistry.ReplicationUpdateParameters{
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
		},
		&armcontainerregistry.ReplicationsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Replication{
			Name:     to.Ptr("myReplication"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/replications"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/replications/myReplication"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.ReplicationProperties{
				ProvisioningState:     to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RegionEndpointEnabled: to.Ptr(true),
				Status: &armcontainerregistry.Status{
					DisplayStatus: to.Ptr("Ready"),
					Message:       to.Ptr("The replication is ready."),
					Timestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:15:37.0707808Z"); return t }()),
				},
				ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Replication) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Replication)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ReplicationUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScopeMaps_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScopeMapList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewScopeMapsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myRegistry",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.ScopeMapListResult{
			Value: []*armcontainerregistry.ScopeMap{
				{
					Name: to.Ptr("myScopeMap"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/scopeMaps"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
					Properties: &armcontainerregistry.ScopeMapProperties{
						Type: to.Ptr("IsUserDefined"),
						Actions: []*string{
							to.Ptr("repositories/myrepository/contentWrite"),
							to.Ptr("repositories/myrepository/delete")},
						CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScopeMapListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScopeMapListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScopeMaps_Get(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScopeMapGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewScopeMapsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myScopeMap",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.ScopeMap{
			Name: to.Ptr("myScopeMap"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/scopeMaps"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
			Properties: &armcontainerregistry.ScopeMapProperties{
				Type: to.Ptr("IsUserDefined"),
				Actions: []*string{
					to.Ptr("repositories/myrepository/contentWrite"),
					to.Ptr("repositories/myrepository/delete")},
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScopeMap) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScopeMap)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScopeMaps_Create(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScopeMapCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewScopeMapsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myScopeMap",
		armcontainerregistry.ScopeMap{
			Properties: &armcontainerregistry.ScopeMapProperties{
				Description: to.Ptr("Developer Scopes"),
				Actions: []*string{
					to.Ptr("repositories/myrepository/contentWrite"),
					to.Ptr("repositories/myrepository/delete")},
			},
		},
		&armcontainerregistry.ScopeMapsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.ScopeMap{
			Name: to.Ptr("myScopeMap"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/scopeMaps"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
			Properties: &armcontainerregistry.ScopeMapProperties{
				Type: to.Ptr("IsUserDefined"),
				Actions: []*string{
					to.Ptr("repositories/myrepository/contentWrite"),
					to.Ptr("repositories/myrepository/delete")},
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScopeMap) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScopeMap)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScopeMaps_Delete(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScopeMapDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewScopeMapsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myScopeMap",
		&armcontainerregistry.ScopeMapsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapDelete.json: %v", err)
	}
}

func TestScopeMaps_Update(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScopeMapUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewScopeMapsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myScopeMap",
		armcontainerregistry.ScopeMapUpdateParameters{
			Properties: &armcontainerregistry.ScopeMapPropertiesUpdateParameters{
				Description: to.Ptr("Developer Scopes"),
				Actions: []*string{
					to.Ptr("repositories/myrepository/contentWrite"),
					to.Ptr("repositories/myrepository/contentRead")},
			},
		},
		&armcontainerregistry.ScopeMapsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.ScopeMap{
			Name: to.Ptr("myScopeMap"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/scopeMaps"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
			Properties: &armcontainerregistry.ScopeMapProperties{
				Type: to.Ptr("IsUserDefined"),
				Actions: []*string{
					to.Ptr("repositories/myrepository/contentWrite"),
					to.Ptr("repositories/myrepository/contentRead")},
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScopeMap) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScopeMap)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/ScopeMapUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTokens_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TokenList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTokensClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myRegistry",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.TokenListResult{
			Value: []*armcontainerregistry.Token{
				{
					Name: to.Ptr("myToken"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/tokens"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/myToken"),
					Properties: &armcontainerregistry.TokenProperties{
						CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						ScopeMapID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
						Status:            to.Ptr(armcontainerregistry.TokenStatusEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TokenListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TokenListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTokens_Get(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TokenGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTokensClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myToken",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Token{
			Name: to.Ptr("myToken"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/tokens"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/myToken"),
			Properties: &armcontainerregistry.TokenProperties{
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				ScopeMapID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
				Status:            to.Ptr(armcontainerregistry.TokenStatusEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Token) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Token)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTokens_Create(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TokenCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTokensClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myToken",
		armcontainerregistry.Token{
			Properties: &armcontainerregistry.TokenProperties{
				Credentials: &armcontainerregistry.TokenCredentialsProperties{
					Certificates: []*armcontainerregistry.TokenCertificate{
						{
							Name:                  to.Ptr(armcontainerregistry.TokenCertificateNameCertificate1),
							EncodedPemCertificate: to.Ptr("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUc3akNDQk5hZ0F3SUJBZ0lURmdBQlR3UVpyZGdmdmhxdzBnQUFBQUZQQkRBTkJna3Foa2lHOXcwQkFRc0YKQURDQml6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVApCMUpsWkcxdmJtUXhIakFjQmdOVkJBb1RGVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2YmpFVk1CTUdBMVVFCkN4TU1UV2xqY205emIyWjBJRWxVTVI0d0hBWURWUVFERXhWTmFXTnliM052Wm5RZ1NWUWdWRXhUSUVOQklEUXcKSGhjTk1UZ3dOREV5TWpJek1qUTRXaGNOTWpBd05ERXlNakl6TWpRNFdqQTVNVGN3TlFZRFZRUURFeTV6WlhKMgphV05sWTJ4cFpXNTBZMlZ5ZEMxd1lYSjBibVZ5TG0xaGJtRm5aVzFsYm5RdVlYcDFjbVV1WTI5dE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBSYjdJcHpxMmR4emhhbVpyS1ZDakMzeTQyYlYKUnNIY2pCUTFuSDBHZ1puUDhXeDZDSE1mWThybkVJQzRLeVRRYkJXVzhnNXlmc3NSQ0ZXbFpxYjR6SkRXS0pmTgpGSmNMUm9LNnhwTktZYVZVTkVlT25IdUxHYTM0ZlA0VjBFRjZybzdvbkRLME5zanhjY1dZVzRNVXVzc0xrQS94CkUrM2RwU1REdk1KcjJoWUpsVnFDcVR6blQvbmZaVUZzQUVEQnp5MUpOOHZiZDlIR2czc2Myd0x4dk95cFJOc0gKT1V3V2pmN2xzWWZleEVlcWkzY29EeHc2alpLVWEyVkdsUnBpTkowMjhBQitYSi9TU1FVNVBsd0JBbU9TT3ovRApGY0NKdGpPZlBqU1NKckFIQVV3SHU3RzlSV05JTFBwYU9zQ1J5eitETE5zNGpvNlEvUUg4d1lManJRSURBUUFCCm80SUNtakNDQXBZd0N3WURWUjBQQkFRREFnU3dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUYKQlFjREFUQWRCZ05WSFE0RUZnUVVlbEdkVVJrZzJoSFFOWEQ4WUc4L3drdjJVT0F3SHdZRFZSMGpCQmd3Rm9BVQplbnVNd2Mvbm9Nb2MxR3Y2KytFend3OGFvcDB3Z2F3R0ExVWRId1NCcERDQm9UQ0JucUNCbTZDQm1JWkxhSFIwCmNEb3ZMMjF6WTNKc0xtMXBZM0p2YzI5bWRDNWpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjAKSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURRdVkzSnNoa2xvZEhSd09pOHZZM0pzTG0xcFkzSnZjMjltZEM1agpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjBKVEl3U1ZRbE1qQlVURk1sTWpCRFFTVXlNRFF1ClkzSnNNSUdGQmdnckJnRUZCUWNCQVFSNU1IY3dVUVlJS3dZQkJRVUhNQUtHUldoMGRIQTZMeTkzZDNjdWJXbGoKY205emIyWjBMbU52YlM5d2Eya3ZiWE5qYjNKd0wwMXBZM0p2YzI5bWRDVXlNRWxVSlRJd1ZFeFRKVEl3UTBFbApNakEwTG1OeWREQWlCZ2dyQmdFRkJRY3dBWVlXYUhSMGNEb3ZMMjlqYzNBdWJYTnZZM053TG1OdmJUQStCZ2tyCkJnRUVBWUkzRlFjRU1UQXZCaWNyQmdFRUFZSTNGUWlIMm9aMWcrN1pBWUxKaFJ1QnRaNWhoZlRyWUlGZGhOTGYKUW9Mbmszb0NBV1FDQVIwd1RRWURWUjBnQkVZd1JEQkNCZ2tyQmdFRUFZSTNLZ0V3TlRBekJnZ3JCZ0VGQlFjQwpBUlluYUhSMGNEb3ZMM2QzZHk1dGFXTnliM052Wm5RdVkyOXRMM0JyYVM5dGMyTnZjbkF2WTNCek1DY0dDU3NHCkFRUUJnamNWQ2dRYU1CZ3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUt3WUJCUVVIQXdFd09RWURWUjBSQkRJd01JSXUKYzJWeWRtbGpaV05zYVdWdWRHTmxjblF0Y0dGeWRHNWxjaTV0WVc1aFoyVnRaVzUwTG1GNmRYSmxMbU52YlRBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFIVXIzbk1vdUI5WWdDUlRWYndUTllIS2RkWGJkSW1GUXNDYys4T1g1CjE5c0N6dFFSR05iSXEwVW1Ba01MbFVvWTIxckh4ZXdxU2hWczFhL2RwaFh5Tk1pcUdaU2QzU1BtYzZscitqUFQKNXVEREs0MUlWeXN0K2VUNlpyazFvcCtMVmdkeS9EU2lyNzVqcWZFY016bS82bU8rNnFNeWRLTWtVYmM5K3JHVwphUkpUcjRWUUdIRmEwNEIwZVZpNUd4MG9pL2RpZDNSaXg2aXJMMjFJSGEwYjN6c1hzZHpHU0R2K3hqL2Q2S0l4Ckdrd2FhYmZvU1NoQnFqaFNlQ0VyZXFlb1RpYjljdGw0MGRVdUp3THl4bjhHS2N6K3AvMEJUOEIxU3lYK01OQ2wKY0pkMjVtMjhLajY2TGUxOEVyeFlJYXZJVGVGa3Y2eGZjdkEvcHladDdPaU41QTlGQk1IUmpQK1kyZ2tvdjMrcQpISFRUZG4xNnlRajduNit3YlFHNGVleXc0YisyQkRLcUxNVFU2ZmlSQ3ZPM2FPZVBLSFVNN3R4b1FidWl6Z3NzCkNiMzl3QnJOTEZsMkJLQ1RkSCtkSU9oZVJiSkZvbmlwOGRPOUVFZWdSSG9lQW54ZUlYTFBrdXMzTzEvZjRhNkIKWHQ3RG5BUm8xSzJmeEp3VXRaU2MvR3dFSjU5NzlnRXlEa3pDZEVsLzdpWE9QZXVjTXhlM2xVM2pweUtsNERUaApjSkJqQytqNGpLWTFrK1U4b040aGdqYnJISUx6Vnd2eU15OU5KS290U3BMSjQxeHdPOHlGangxalFTT3Bxc0N1ClFhUFUvTjhSZ0hxWjBGTkFzS3dNUmZ6WmdXanRCNzRzYUVEdk5jVmNuNFhCQnFNSG0ydHo2Uzk3d3kxZGt0cTgKSE5BPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
						}},
				},
				ScopeMapID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
				Status:     to.Ptr(armcontainerregistry.TokenStatusDisabled),
			},
		},
		&armcontainerregistry.TokensClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Token{
			Name: to.Ptr("myToken"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/tokens"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/myToken"),
			Properties: &armcontainerregistry.TokenProperties{
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				Credentials: &armcontainerregistry.TokenCredentialsProperties{
					Certificates: []*armcontainerregistry.TokenCertificate{
						{
							Name:       to.Ptr(armcontainerregistry.TokenCertificateNameCertificate1),
							Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-04T15:32:48.0707808Z"); return t }()),
							Thumbprint: to.Ptr("feeb79a888bf1415f8e17c4965a2a5bb5c8a2ff7"),
						}},
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				ScopeMapID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
				Status:            to.Ptr(armcontainerregistry.TokenStatusDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Token) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Token)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTokens_Delete(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TokenDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTokensClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myToken",
		&armcontainerregistry.TokensClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenDelete.json: %v", err)
	}
}

func TestTokens_Update(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TokenUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTokensClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myToken",
		armcontainerregistry.TokenUpdateParameters{
			Properties: &armcontainerregistry.TokenUpdateProperties{
				Credentials: &armcontainerregistry.TokenCredentialsProperties{
					Certificates: []*armcontainerregistry.TokenCertificate{
						{
							Name:                  to.Ptr(armcontainerregistry.TokenCertificateNameCertificate1),
							EncodedPemCertificate: to.Ptr("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUc3akNDQk5hZ0F3SUJBZ0lURmdBQlR3UVpyZGdmdmhxdzBnQUFBQUZQQkRBTkJna3Foa2lHOXcwQkFRc0YKQURDQml6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVApCMUpsWkcxdmJtUXhIakFjQmdOVkJBb1RGVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2YmpFVk1CTUdBMVVFCkN4TU1UV2xqY205emIyWjBJRWxVTVI0d0hBWURWUVFERXhWTmFXTnliM052Wm5RZ1NWUWdWRXhUSUVOQklEUXcKSGhjTk1UZ3dOREV5TWpJek1qUTRXaGNOTWpBd05ERXlNakl6TWpRNFdqQTVNVGN3TlFZRFZRUURFeTV6WlhKMgphV05sWTJ4cFpXNTBZMlZ5ZEMxd1lYSjBibVZ5TG0xaGJtRm5aVzFsYm5RdVlYcDFjbVV1WTI5dE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBSYjdJcHpxMmR4emhhbVpyS1ZDakMzeTQyYlYKUnNIY2pCUTFuSDBHZ1puUDhXeDZDSE1mWThybkVJQzRLeVRRYkJXVzhnNXlmc3NSQ0ZXbFpxYjR6SkRXS0pmTgpGSmNMUm9LNnhwTktZYVZVTkVlT25IdUxHYTM0ZlA0VjBFRjZybzdvbkRLME5zanhjY1dZVzRNVXVzc0xrQS94CkUrM2RwU1REdk1KcjJoWUpsVnFDcVR6blQvbmZaVUZzQUVEQnp5MUpOOHZiZDlIR2czc2Myd0x4dk95cFJOc0gKT1V3V2pmN2xzWWZleEVlcWkzY29EeHc2alpLVWEyVkdsUnBpTkowMjhBQitYSi9TU1FVNVBsd0JBbU9TT3ovRApGY0NKdGpPZlBqU1NKckFIQVV3SHU3RzlSV05JTFBwYU9zQ1J5eitETE5zNGpvNlEvUUg4d1lManJRSURBUUFCCm80SUNtakNDQXBZd0N3WURWUjBQQkFRREFnU3dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUYKQlFjREFUQWRCZ05WSFE0RUZnUVVlbEdkVVJrZzJoSFFOWEQ4WUc4L3drdjJVT0F3SHdZRFZSMGpCQmd3Rm9BVQplbnVNd2Mvbm9Nb2MxR3Y2KytFend3OGFvcDB3Z2F3R0ExVWRId1NCcERDQm9UQ0JucUNCbTZDQm1JWkxhSFIwCmNEb3ZMMjF6WTNKc0xtMXBZM0p2YzI5bWRDNWpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjAKSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURRdVkzSnNoa2xvZEhSd09pOHZZM0pzTG0xcFkzSnZjMjltZEM1agpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjBKVEl3U1ZRbE1qQlVURk1sTWpCRFFTVXlNRFF1ClkzSnNNSUdGQmdnckJnRUZCUWNCQVFSNU1IY3dVUVlJS3dZQkJRVUhNQUtHUldoMGRIQTZMeTkzZDNjdWJXbGoKY205emIyWjBMbU52YlM5d2Eya3ZiWE5qYjNKd0wwMXBZM0p2YzI5bWRDVXlNRWxVSlRJd1ZFeFRKVEl3UTBFbApNakEwTG1OeWREQWlCZ2dyQmdFRkJRY3dBWVlXYUhSMGNEb3ZMMjlqYzNBdWJYTnZZM053TG1OdmJUQStCZ2tyCkJnRUVBWUkzRlFjRU1UQXZCaWNyQmdFRUFZSTNGUWlIMm9aMWcrN1pBWUxKaFJ1QnRaNWhoZlRyWUlGZGhOTGYKUW9Mbmszb0NBV1FDQVIwd1RRWURWUjBnQkVZd1JEQkNCZ2tyQmdFRUFZSTNLZ0V3TlRBekJnZ3JCZ0VGQlFjQwpBUlluYUhSMGNEb3ZMM2QzZHk1dGFXTnliM052Wm5RdVkyOXRMM0JyYVM5dGMyTnZjbkF2WTNCek1DY0dDU3NHCkFRUUJnamNWQ2dRYU1CZ3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUt3WUJCUVVIQXdFd09RWURWUjBSQkRJd01JSXUKYzJWeWRtbGpaV05zYVdWdWRHTmxjblF0Y0dGeWRHNWxjaTV0WVc1aFoyVnRaVzUwTG1GNmRYSmxMbU52YlRBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFIVXIzbk1vdUI5WWdDUlRWYndUTllIS2RkWGJkSW1GUXNDYys4T1g1CjE5c0N6dFFSR05iSXEwVW1Ba01MbFVvWTIxckh4ZXdxU2hWczFhL2RwaFh5Tk1pcUdaU2QzU1BtYzZscitqUFQKNXVEREs0MUlWeXN0K2VUNlpyazFvcCtMVmdkeS9EU2lyNzVqcWZFY016bS82bU8rNnFNeWRLTWtVYmM5K3JHVwphUkpUcjRWUUdIRmEwNEIwZVZpNUd4MG9pL2RpZDNSaXg2aXJMMjFJSGEwYjN6c1hzZHpHU0R2K3hqL2Q2S0l4Ckdrd2FhYmZvU1NoQnFqaFNlQ0VyZXFlb1RpYjljdGw0MGRVdUp3THl4bjhHS2N6K3AvMEJUOEIxU3lYK01OQ2wKY0pkMjVtMjhLajY2TGUxOEVyeFlJYXZJVGVGa3Y2eGZjdkEvcHladDdPaU41QTlGQk1IUmpQK1kyZ2tvdjMrcQpISFRUZG4xNnlRajduNit3YlFHNGVleXc0YisyQkRLcUxNVFU2ZmlSQ3ZPM2FPZVBLSFVNN3R4b1FidWl6Z3NzCkNiMzl3QnJOTEZsMkJLQ1RkSCtkSU9oZVJiSkZvbmlwOGRPOUVFZWdSSG9lQW54ZUlYTFBrdXMzTzEvZjRhNkIKWHQ3RG5BUm8xSzJmeEp3VXRaU2MvR3dFSjU5NzlnRXlEa3pDZEVsLzdpWE9QZXVjTXhlM2xVM2pweUtsNERUaApjSkJqQytqNGpLWTFrK1U4b040aGdqYnJISUx6Vnd2eU15OU5KS290U3BMSjQxeHdPOHlGangxalFTT3Bxc0N1ClFhUFUvTjhSZ0hxWjBGTkFzS3dNUmZ6WmdXanRCNzRzYUVEdk5jVmNuNFhCQnFNSG0ydHo2Uzk3d3kxZGt0cTgKSE5BPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
						}},
				},
				ScopeMapID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myNewScopeMap"),
			},
		},
		&armcontainerregistry.TokensClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Token{
			Name: to.Ptr("myToken"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/tokens"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/myToken"),
			Properties: &armcontainerregistry.TokenProperties{
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				Credentials: &armcontainerregistry.TokenCredentialsProperties{
					Certificates: []*armcontainerregistry.TokenCertificate{
						{
							Name:                  to.Ptr(armcontainerregistry.TokenCertificateNameCertificate1),
							EncodedPemCertificate: to.Ptr("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUc3akNDQk5hZ0F3SUJBZ0lURmdBQlR3UVpyZGdmdmhxdzBnQUFBQUZQQkRBTkJna3Foa2lHOXcwQkFRc0YKQURDQml6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVApCMUpsWkcxdmJtUXhIakFjQmdOVkJBb1RGVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2YmpFVk1CTUdBMVVFCkN4TU1UV2xqY205emIyWjBJRWxVTVI0d0hBWURWUVFERXhWTmFXTnliM052Wm5RZ1NWUWdWRXhUSUVOQklEUXcKSGhjTk1UZ3dOREV5TWpJek1qUTRXaGNOTWpBd05ERXlNakl6TWpRNFdqQTVNVGN3TlFZRFZRUURFeTV6WlhKMgphV05sWTJ4cFpXNTBZMlZ5ZEMxd1lYSjBibVZ5TG0xaGJtRm5aVzFsYm5RdVlYcDFjbVV1WTI5dE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBSYjdJcHpxMmR4emhhbVpyS1ZDakMzeTQyYlYKUnNIY2pCUTFuSDBHZ1puUDhXeDZDSE1mWThybkVJQzRLeVRRYkJXVzhnNXlmc3NSQ0ZXbFpxYjR6SkRXS0pmTgpGSmNMUm9LNnhwTktZYVZVTkVlT25IdUxHYTM0ZlA0VjBFRjZybzdvbkRLME5zanhjY1dZVzRNVXVzc0xrQS94CkUrM2RwU1REdk1KcjJoWUpsVnFDcVR6blQvbmZaVUZzQUVEQnp5MUpOOHZiZDlIR2czc2Myd0x4dk95cFJOc0gKT1V3V2pmN2xzWWZleEVlcWkzY29EeHc2alpLVWEyVkdsUnBpTkowMjhBQitYSi9TU1FVNVBsd0JBbU9TT3ovRApGY0NKdGpPZlBqU1NKckFIQVV3SHU3RzlSV05JTFBwYU9zQ1J5eitETE5zNGpvNlEvUUg4d1lManJRSURBUUFCCm80SUNtakNDQXBZd0N3WURWUjBQQkFRREFnU3dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUYKQlFjREFUQWRCZ05WSFE0RUZnUVVlbEdkVVJrZzJoSFFOWEQ4WUc4L3drdjJVT0F3SHdZRFZSMGpCQmd3Rm9BVQplbnVNd2Mvbm9Nb2MxR3Y2KytFend3OGFvcDB3Z2F3R0ExVWRId1NCcERDQm9UQ0JucUNCbTZDQm1JWkxhSFIwCmNEb3ZMMjF6WTNKc0xtMXBZM0p2YzI5bWRDNWpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjAKSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURRdVkzSnNoa2xvZEhSd09pOHZZM0pzTG0xcFkzSnZjMjltZEM1agpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjBKVEl3U1ZRbE1qQlVURk1sTWpCRFFTVXlNRFF1ClkzSnNNSUdGQmdnckJnRUZCUWNCQVFSNU1IY3dVUVlJS3dZQkJRVUhNQUtHUldoMGRIQTZMeTkzZDNjdWJXbGoKY205emIyWjBMbU52YlM5d2Eya3ZiWE5qYjNKd0wwMXBZM0p2YzI5bWRDVXlNRWxVSlRJd1ZFeFRKVEl3UTBFbApNakEwTG1OeWREQWlCZ2dyQmdFRkJRY3dBWVlXYUhSMGNEb3ZMMjlqYzNBdWJYTnZZM053TG1OdmJUQStCZ2tyCkJnRUVBWUkzRlFjRU1UQXZCaWNyQmdFRUFZSTNGUWlIMm9aMWcrN1pBWUxKaFJ1QnRaNWhoZlRyWUlGZGhOTGYKUW9Mbmszb0NBV1FDQVIwd1RRWURWUjBnQkVZd1JEQkNCZ2tyQmdFRUFZSTNLZ0V3TlRBekJnZ3JCZ0VGQlFjQwpBUlluYUhSMGNEb3ZMM2QzZHk1dGFXTnliM052Wm5RdVkyOXRMM0JyYVM5dGMyTnZjbkF2WTNCek1DY0dDU3NHCkFRUUJnamNWQ2dRYU1CZ3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUt3WUJCUVVIQXdFd09RWURWUjBSQkRJd01JSXUKYzJWeWRtbGpaV05zYVdWdWRHTmxjblF0Y0dGeWRHNWxjaTV0WVc1aFoyVnRaVzUwTG1GNmRYSmxMbU52YlRBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFIVXIzbk1vdUI5WWdDUlRWYndUTllIS2RkWGJkSW1GUXNDYys4T1g1CjE5c0N6dFFSR05iSXEwVW1Ba01MbFVvWTIxckh4ZXdxU2hWczFhL2RwaFh5Tk1pcUdaU2QzU1BtYzZscitqUFQKNXVEREs0MUlWeXN0K2VUNlpyazFvcCtMVmdkeS9EU2lyNzVqcWZFY016bS82bU8rNnFNeWRLTWtVYmM5K3JHVwphUkpUcjRWUUdIRmEwNEIwZVZpNUd4MG9pL2RpZDNSaXg2aXJMMjFJSGEwYjN6c1hzZHpHU0R2K3hqL2Q2S0l4Ckdrd2FhYmZvU1NoQnFqaFNlQ0VyZXFlb1RpYjljdGw0MGRVdUp3THl4bjhHS2N6K3AvMEJUOEIxU3lYK01OQ2wKY0pkMjVtMjhLajY2TGUxOEVyeFlJYXZJVGVGa3Y2eGZjdkEvcHladDdPaU41QTlGQk1IUmpQK1kyZ2tvdjMrcQpISFRUZG4xNnlRajduNit3YlFHNGVleXc0YisyQkRLcUxNVFU2ZmlSQ3ZPM2FPZVBLSFVNN3R4b1FidWl6Z3NzCkNiMzl3QnJOTEZsMkJLQ1RkSCtkSU9oZVJiSkZvbmlwOGRPOUVFZWdSSG9lQW54ZUlYTFBrdXMzTzEvZjRhNkIKWHQ3RG5BUm8xSzJmeEp3VXRaU2MvR3dFSjU5NzlnRXlEa3pDZEVsLzdpWE9QZXVjTXhlM2xVM2pweUtsNERUaApjSkJqQytqNGpLWTFrK1U4b040aGdqYnJISUx6Vnd2eU15OU5KS290U3BMSjQxeHdPOHlGangxalFTT3Bxc0N1ClFhUFUvTjhSZ0hxWjBGTkFzS3dNUmZ6WmdXanRCNzRzYUVEdk5jVmNuNFhCQnFNSG0ydHo2Uzk3d3kxZGt0cTgKSE5BPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
						}},
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				ScopeMapID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myNewScopeMap"),
				Status:            to.Ptr(armcontainerregistry.TokenStatusEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Token) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Token)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/TokenUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebhooks_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myRegistry",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.WebhookListResult{
			Value: []*armcontainerregistry.Webhook{
				{
					Name:     to.Ptr("myWebhook"),
					Type:     to.Ptr("Microsoft.ContainerRegistry/registries/webhooks"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/webhooks/myWebhook"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armcontainerregistry.WebhookProperties{
						Actions: []*armcontainerregistry.WebhookAction{
							to.Ptr(armcontainerregistry.WebhookActionPush)},
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						Scope:             to.Ptr("myRepository"),
						Status:            to.Ptr(armcontainerregistry.WebhookStatusEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WebhookListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WebhookListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebhooks_Get(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myWebhook",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Webhook{
			Name:     to.Ptr("myWebhook"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/webhooks"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/webhooks/myWebhook"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.WebhookProperties{
				Actions: []*armcontainerregistry.WebhookAction{
					to.Ptr(armcontainerregistry.WebhookActionPush)},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Scope:             to.Ptr("myRepository"),
				Status:            to.Ptr(armcontainerregistry.WebhookStatusEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Webhook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Webhook)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebhooks_Create(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myWebhook",
		armcontainerregistry.WebhookCreateParameters{
			Location: to.Ptr("westus"),
			Properties: &armcontainerregistry.WebhookPropertiesCreateParameters{
				Actions: []*armcontainerregistry.WebhookAction{
					to.Ptr(armcontainerregistry.WebhookActionPush)},
				CustomHeaders: map[string]*string{
					"Authorization": to.Ptr("Basic 000000000000000000000000000000000000000000000000000"),
				},
				Scope:      to.Ptr("myRepository"),
				ServiceURI: to.Ptr("http://myservice.com"),
				Status:     to.Ptr(armcontainerregistry.WebhookStatusEnabled),
			},
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
		},
		&armcontainerregistry.WebhooksClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Webhook{
			Name:     to.Ptr("myWebhook"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/webhooks"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/webhooks/myWebhook"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.WebhookProperties{
				Actions: []*armcontainerregistry.WebhookAction{
					to.Ptr(armcontainerregistry.WebhookActionPush)},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Scope:             to.Ptr("myRepository"),
				Status:            to.Ptr(armcontainerregistry.WebhookStatusEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Webhook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Webhook)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebhooks_Delete(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myWebhook",
		&armcontainerregistry.WebhooksClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookDelete.json: %v", err)
	}
}

func TestWebhooks_Update(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myWebhook",
		armcontainerregistry.WebhookUpdateParameters{
			Properties: &armcontainerregistry.WebhookPropertiesUpdateParameters{
				Actions: []*armcontainerregistry.WebhookAction{
					to.Ptr(armcontainerregistry.WebhookActionPush)},
				CustomHeaders: map[string]*string{
					"Authorization": to.Ptr("Basic 000000000000000000000000000000000000000000000000000"),
				},
				Scope:      to.Ptr("myRepository"),
				ServiceURI: to.Ptr("http://myservice.com"),
				Status:     to.Ptr(armcontainerregistry.WebhookStatusEnabled),
			},
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
		},
		&armcontainerregistry.WebhooksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Webhook{
			Name:     to.Ptr("myWebhook"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/webhooks"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/webhooks/myWebhook"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.WebhookProperties{
				Actions: []*armcontainerregistry.WebhookAction{
					to.Ptr(armcontainerregistry.WebhookActionPush)},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Scope:             to.Ptr("myRepository"),
				Status:            to.Ptr(armcontainerregistry.WebhookStatusEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Webhook) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Webhook)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebhooks_Ping(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookPing.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookPing"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Ping(ctx,
		"myResourceGroup",
		"myRegistry",
		"myWebhook",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookPing.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.EventInfo{
			ID: to.Ptr("00000000-0000-0000-0000-000000000000"),
		}
		if !reflect.DeepEqual(exampleRes, res.EventInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EventInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookPing.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebhooks_ListEvents(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookListEvents.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookListEvents"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListEvents("myResourceGroup",
		"myRegistry",
		"myWebhook",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookListEvents.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.EventListResult{
			Value: []*armcontainerregistry.Event{
				{
					ID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					EventRequestMessage: &armcontainerregistry.EventRequestMessage{
						Method: to.Ptr("POST"),
						Content: &armcontainerregistry.EventContent{
							Action: to.Ptr("push"),
							Actor:  &armcontainerregistry.Actor{},
							ID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
							Source: &armcontainerregistry.Source{
								Addr:       to.Ptr("xtal.local:5000"),
								InstanceID: to.Ptr("00000000-0000-0000-0000-000000000000"),
							},
							Target: &armcontainerregistry.Target{
								Digest:     to.Ptr("sha256:fea8895f450959fa676bcc1df0611ea93823a735a01205fd8622846041d0c7cf"),
								Length:     to.Ptr[int64](708),
								MediaType:  to.Ptr("application/vnd.docker.distribution.manifest.v2+json"),
								Repository: to.Ptr("hello-world"),
								Size:       to.Ptr[int64](708),
								Tag:        to.Ptr("latest"),
								URL:        to.Ptr("http://192.168.100.227:5000/v2/hello-world/manifests/sha256:fea8895f450959fa676bcc1df0611ea93823a735a01205fd8622846041d0c7cf"),
							},
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
							Request: &armcontainerregistry.Request{
								Method:    to.Ptr("GET"),
								Addr:      to.Ptr("192.168.64.11:42961"),
								Host:      to.Ptr("192.168.100.227:5000"),
								ID:        to.Ptr("00000000-0000-0000-0000-000000000000"),
								Useragent: to.Ptr("curl/7.38.0"),
							},
						},
						Headers: map[string]*string{
							"Authorization":  to.Ptr("******"),
							"Content-Length": to.Ptr("719"),
							"Content-Type":   to.Ptr("application/json"),
						},
						RequestURI: to.Ptr("http://myservice.com"),
						Version:    to.Ptr("1.1"),
					},
					EventResponseMessage: &armcontainerregistry.EventResponseMessage{
						Headers: map[string]*string{
							"Content-Length": to.Ptr("0"),
						},
						StatusCode: to.Ptr("200"),
						Version:    to.Ptr("1.1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookListEvents.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWebhooks_GetCallbackConfig(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookGetCallbackConfig.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookGetCallbackConfig"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetCallbackConfig(ctx,
		"myResourceGroup",
		"myRegistry",
		"myWebhook",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookGetCallbackConfig.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.CallbackConfig{
			CustomHeaders: map[string]*string{
				"Authorization": to.Ptr("Basic 000000000000000000000000000000000000000000000000000"),
			},
			ServiceURI: to.Ptr("http://myservice.com"),
		}
		if !reflect.DeepEqual(exampleRes, res.CallbackConfig) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CallbackConfig)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2021-12-01-preview/examples/WebhookGetCallbackConfig.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAgentPools_Get(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AgentPools_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewAgentPoolsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myAgentPool",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.AgentPool{
			Name:     to.Ptr("myAgentPool"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/agentPools"),
			ID:       to.Ptr("/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourceGroups/huanwudfwestgroup/providers/Microsoft.ContainerRegistry/registries/huanglidfwest01/agentPools/testagent26"),
			Location: to.Ptr("WESTUS"),
			Properties: &armcontainerregistry.AgentPoolProperties{
				Count:             to.Ptr[int32](1),
				OS:                to.Ptr(armcontainerregistry.OSLinux),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Tier:              to.Ptr("S1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAgentPools_Create(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AgentPools_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewAgentPoolsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myAgentPool",
		armcontainerregistry.AgentPool{
			Location: to.Ptr("WESTUS"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.AgentPoolProperties{
				Count: to.Ptr[int32](1),
				OS:    to.Ptr(armcontainerregistry.OSLinux),
				Tier:  to.Ptr("S1"),
			},
		},
		&armcontainerregistry.AgentPoolsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.AgentPool{
			Name:     to.Ptr("myAgentPool"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/agentPools"),
			ID:       to.Ptr("/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourceGroups/huanwudfwestgroup/providers/Microsoft.ContainerRegistry/registries/huanglidfwest01/agentPools/testagent26"),
			Location: to.Ptr("WESTUS"),
			Properties: &armcontainerregistry.AgentPoolProperties{
				Count:             to.Ptr[int32](1),
				OS:                to.Ptr(armcontainerregistry.OSLinux),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Tier:              to.Ptr("S1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAgentPools_Delete(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AgentPools_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewAgentPoolsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myAgentPool",
		&armcontainerregistry.AgentPoolsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsDelete.json: %v", err)
	}
}

func TestAgentPools_Update(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AgentPools_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewAgentPoolsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myAgentPool",
		armcontainerregistry.AgentPoolUpdateParameters{
			Properties: &armcontainerregistry.AgentPoolPropertiesUpdateParameters{
				Count: to.Ptr[int32](1),
			},
		},
		&armcontainerregistry.AgentPoolsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.AgentPool{
			Name:     to.Ptr("myAgentPool"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/agentPools"),
			ID:       to.Ptr("/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourceGroups/huanwudfwestgroup/providers/Microsoft.ContainerRegistry/registries/huanglidfwest01/agentPools/testagent26"),
			Location: to.Ptr("WESTUS"),
			Properties: &armcontainerregistry.AgentPoolProperties{
				Count:             to.Ptr[int32](1),
				OS:                to.Ptr(armcontainerregistry.OSLinux),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Tier:              to.Ptr("S1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPool)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAgentPools_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AgentPools_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewAgentPoolsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.List("myResourceGroup",
		"myRegistry",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.AgentPoolListResult{
			Value: []*armcontainerregistry.AgentPool{
				{
					Name:     to.Ptr("myAgentPool"),
					Type:     to.Ptr("Microsoft.ContainerRegistry/registries/agentPools"),
					ID:       to.Ptr("/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourceGroups/huanwudfwestgroup/providers/Microsoft.ContainerRegistry/registries/huanglidfwest01/agentPools/testagent26"),
					Location: to.Ptr("WESTUS"),
					Properties: &armcontainerregistry.AgentPoolProperties{
						Count:             to.Ptr[int32](1),
						OS:                to.Ptr(armcontainerregistry.OSLinux),
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						Tier:              to.Ptr("S1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AgentPoolListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AgentPoolListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAgentPools_GetQueueStatus(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsGetQueueStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AgentPools_GetQueueStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewAgentPoolsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.GetQueueStatus(ctx,
		"myResourceGroup",
		"myRegistry",
		"myAgentPool",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsGetQueueStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.AgentPoolQueueStatus{
			Count: to.Ptr[int32](10),
		}
		if !reflect.DeepEqual(exampleRes, res.AgentPoolQueueStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgentPoolQueueStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsGetQueueStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRuns_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Runs_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.List("myResourceGroup",
		"myRegistry",
		&armcontainerregistry.RunsClientListOptions{Filter: to.Ptr(""),
			Top: to.Ptr[int32](10),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.RunListResult{
			Value: []*armcontainerregistry.Run{
				{
					Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
					Properties: &armcontainerregistry.RunProperties{
						AgentConfiguration: &armcontainerregistry.AgentProperties{
							CPU: to.Ptr[int32](2),
						},
						CreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.618Z"); return t }()),
						FinishTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:13:51.618Z"); return t }()),
						ImageUpdateTrigger: &armcontainerregistry.ImageUpdateTrigger{
							ID: to.Ptr("c0c43143-da5d-41ef-b9e1-e7d749272e88"),
							Images: []*armcontainerregistry.ImageDescriptor{
								{
									Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
									Registry:   to.Ptr("registry.hub.docker.com"),
									Repository: to.Ptr("mybaseimage"),
									Tag:        to.Ptr("latest"),
								}},
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.618Z"); return t }()),
						},
						IsArchiveEnabled: to.Ptr(true),
						LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
						LogArtifact: &armcontainerregistry.ImageDescriptor{
							Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
							Registry:   to.Ptr("myregistry"),
							Repository: to.Ptr("acr/tasks"),
							Tag:        to.Ptr("mytask-0accec26-d6de-4757-8e74-d080f38eaaab-log"),
						},
						OutputImages: []*armcontainerregistry.ImageDescriptor{
							{
								Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
								Registry:   to.Ptr("myregistry.azurecr.io"),
								Repository: to.Ptr("myimage"),
								Tag:        to.Ptr("latest"),
							}},
						Platform: &armcontainerregistry.PlatformProperties{
							Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
							OS:           to.Ptr(armcontainerregistry.OSLinux),
						},
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
						RunType:           to.Ptr(armcontainerregistry.RunTypeAutoBuild),
						StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:50:51.618Z"); return t }()),
						Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
						Task:              to.Ptr("myTask"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RunListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RunListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRuns_Get(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Runs_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"0accec26-d6de-4757-8e74-d080f38eaaab",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Run{
			Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
			Properties: &armcontainerregistry.RunProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](2),
				},
				CreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.618Z"); return t }()),
				FinishTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:13:51.618Z"); return t }()),
				ImageUpdateTrigger: &armcontainerregistry.ImageUpdateTrigger{
					ID: to.Ptr("c0c43143-da5d-41ef-b9e1-e7d749272e88"),
					Images: []*armcontainerregistry.ImageDescriptor{
						{
							Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
							Registry:   to.Ptr("registry.hub.docker.com"),
							Repository: to.Ptr("mybaseimage"),
							Tag:        to.Ptr("latest"),
						}},
					Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.618Z"); return t }()),
				},
				IsArchiveEnabled: to.Ptr(true),
				LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
				LogArtifact: &armcontainerregistry.ImageDescriptor{
					Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
					Registry:   to.Ptr("myregistry"),
					Repository: to.Ptr("acr/tasks"),
					Tag:        to.Ptr("mytask-0accec26-d6de-4757-8e74-d080f38eaaab-log"),
				},
				OutputImages: []*armcontainerregistry.ImageDescriptor{
					{
						Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
						Registry:   to.Ptr("myregistry.azurecr.io"),
						Repository: to.Ptr("myimage"),
						Tag:        to.Ptr("latest"),
					}},
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
				RunType:           to.Ptr(armcontainerregistry.RunTypeAutoBuild),
				StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:50:51.618Z"); return t }()),
				Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
				Task:              to.Ptr("myTask"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Run) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Run)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRuns_Update(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Runs_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"0accec26-d6de-4757-8e74-d080f38eaaab",
		armcontainerregistry.RunUpdateParameters{
			IsArchiveEnabled: to.Ptr(true),
		},
		&armcontainerregistry.RunsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Run{
			Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
			Properties: &armcontainerregistry.RunProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](2),
				},
				CreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.618Z"); return t }()),
				FinishTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:13:51.618Z"); return t }()),
				ImageUpdateTrigger: &armcontainerregistry.ImageUpdateTrigger{
					ID: to.Ptr("c0c43143-da5d-41ef-b9e1-e7d749272e88"),
					Images: []*armcontainerregistry.ImageDescriptor{
						{
							Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
							Registry:   to.Ptr("registry.hub.docker.com"),
							Repository: to.Ptr("mybaseimage"),
							Tag:        to.Ptr("latest"),
						}},
					Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.618Z"); return t }()),
				},
				IsArchiveEnabled: to.Ptr(true),
				LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
				LogArtifact: &armcontainerregistry.ImageDescriptor{
					Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
					Registry:   to.Ptr("myregistry"),
					Repository: to.Ptr("acr/tasks"),
					Tag:        to.Ptr("mytask-0accec26-d6de-4757-8e74-d080f38eaaab-log"),
				},
				OutputImages: []*armcontainerregistry.ImageDescriptor{
					{
						Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
						Registry:   to.Ptr("myregistry.azurecr.io"),
						Repository: to.Ptr("myimage"),
						Tag:        to.Ptr("latest"),
					}},
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
				RunType:           to.Ptr(armcontainerregistry.RunTypeAutoBuild),
				StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:50:51.618Z"); return t }()),
				Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
				Task:              to.Ptr("myTask"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Run) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Run)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRuns_Cancel(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsCancel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Runs_Cancel"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCancel(ctx,
		"myResourceGroup",
		"myRegistry",
		"0accec26-d6de-4757-8e74-d080f38eaaab",
		&armcontainerregistry.RunsClientBeginCancelOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsCancel.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsCancel.json: %v", err)
	}
}

func TestTaskRuns_Get(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TaskRuns_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTaskRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myRun",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.TaskRun{
			Name: to.Ptr("myRun"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/TaskRuns"),
			ID:   to.Ptr("/subscriptions/3647315e-0c5b-4ce4-8739-b071e144b2c9/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/taskRuns/myRun"),
			Properties: &armcontainerregistry.TaskRunProperties{
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
					Type:                 to.Ptr("EncodedTaskRunRequest"),
					IsArchiveEnabled:     to.Ptr(true),
					Credentials:          &armcontainerregistry.Credentials{},
					EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
					EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
					Platform: &armcontainerregistry.PlatformProperties{
						Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
						OS:           to.Ptr(armcontainerregistry.OSLinux),
					},
					Values: []*armcontainerregistry.SetValue{},
				},
				RunResult: &armcontainerregistry.Run{
					Name: to.Ptr("yd5"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
					ID:   to.Ptr("/subscriptions/3647315e-0c5b-4ce4-8739-b071e144b2c9/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/yd5"),
					Properties: &armcontainerregistry.RunProperties{
						AgentConfiguration: &armcontainerregistry.AgentProperties{
							CPU: to.Ptr[int32](2),
						},
						CreateTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:21.9261521+00:00"); return t }()),
						FinishTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:29.8792157+00:00"); return t }()),
						IsArchiveEnabled: to.Ptr(true),
						LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:29+00:00"); return t }()),
						Platform: &armcontainerregistry.PlatformProperties{
							Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
							OS:           to.Ptr(armcontainerregistry.OSLinux),
						},
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						RunID:             to.Ptr("yd5"),
						RunType:           to.Ptr(armcontainerregistry.RunTypeQuickRun),
						StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:22.1348714+00:00"); return t }()),
						Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TaskRun) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TaskRun)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTaskRuns_Create(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TaskRuns_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTaskRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myRun",
		armcontainerregistry.TaskRun{
			Properties: &armcontainerregistry.TaskRunProperties{
				ForceUpdateTag: to.Ptr("test"),
				RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
					Type:                 to.Ptr("EncodedTaskRunRequest"),
					Credentials:          &armcontainerregistry.Credentials{},
					EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
					EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
					Platform: &armcontainerregistry.PlatformProperties{
						Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
						OS:           to.Ptr(armcontainerregistry.OSLinux),
					},
					Values: []*armcontainerregistry.SetValue{},
				},
			},
		},
		&armcontainerregistry.TaskRunsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.TaskRun{
			Name: to.Ptr("myrun"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/TaskRuns"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/taskRuns/myRun"),
			Properties: &armcontainerregistry.TaskRunProperties{
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
					Type:                 to.Ptr("EncodedTaskRunRequest"),
					IsArchiveEnabled:     to.Ptr(true),
					Credentials:          &armcontainerregistry.Credentials{},
					EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
					EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
					Platform: &armcontainerregistry.PlatformProperties{
						Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
						OS:           to.Ptr(armcontainerregistry.OSLinux),
					},
					Values: []*armcontainerregistry.SetValue{},
				},
				RunResult: &armcontainerregistry.Run{
					Name: to.Ptr("yd5"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/yd5"),
					Properties: &armcontainerregistry.RunProperties{
						AgentConfiguration: &armcontainerregistry.AgentProperties{
							CPU: to.Ptr[int32](2),
						},
						CreateTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:21.9261521+00:00"); return t }()),
						IsArchiveEnabled: to.Ptr(true),
						LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:21+00:00"); return t }()),
						Platform: &armcontainerregistry.PlatformProperties{
							Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
							OS:           to.Ptr(armcontainerregistry.OSLinux),
						},
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						RunID:             to.Ptr("yd5"),
						RunType:           to.Ptr(armcontainerregistry.RunTypeQuickRun),
						Status:            to.Ptr(armcontainerregistry.RunStatusQueued),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TaskRun) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TaskRun)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTaskRuns_Delete(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TaskRuns_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTaskRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myRun",
		&armcontainerregistry.TaskRunsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsDelete.json: %v", err)
	}
}

func TestTaskRuns_Update(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TaskRuns_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTaskRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myRun",
		armcontainerregistry.TaskRunUpdateParameters{
			Properties: &armcontainerregistry.TaskRunPropertiesUpdateParameters{
				ForceUpdateTag: to.Ptr("test"),
				RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
					Type:                 to.Ptr("EncodedTaskRunRequest"),
					IsArchiveEnabled:     to.Ptr(true),
					Credentials:          &armcontainerregistry.Credentials{},
					EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
					EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
					Platform: &armcontainerregistry.PlatformProperties{
						Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
						OS:           to.Ptr(armcontainerregistry.OSLinux),
					},
					Values: []*armcontainerregistry.SetValue{},
				},
			},
		},
		&armcontainerregistry.TaskRunsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.TaskRun{
			Name: to.Ptr("mytestrun"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/TaskRuns"),
			ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/taskRuns/myRun"),
			Properties: &armcontainerregistry.TaskRunProperties{
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
					Type:                 to.Ptr("EncodedTaskRunRequest"),
					IsArchiveEnabled:     to.Ptr(true),
					Credentials:          &armcontainerregistry.Credentials{},
					EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
					EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
					Platform: &armcontainerregistry.PlatformProperties{
						Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
						OS:           to.Ptr(armcontainerregistry.OSLinux),
					},
					Values: []*armcontainerregistry.SetValue{},
				},
				RunResult: &armcontainerregistry.Run{
					Name: to.Ptr("yd6"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/yd6"),
					Properties: &armcontainerregistry.RunProperties{
						AgentConfiguration: &armcontainerregistry.AgentProperties{
							CPU: to.Ptr[int32](2),
						},
						CreateTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:31:34.1184031+00:00"); return t }()),
						IsArchiveEnabled: to.Ptr(true),
						LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:31:34+00:00"); return t }()),
						Platform: &armcontainerregistry.PlatformProperties{
							Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
							OS:           to.Ptr(armcontainerregistry.OSLinux),
						},
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						RunID:             to.Ptr("yd6"),
						RunType:           to.Ptr(armcontainerregistry.RunTypeQuickRun),
						Status:            to.Ptr(armcontainerregistry.RunStatusQueued),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TaskRun) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TaskRun)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTaskRuns_GetDetails(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsGetDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TaskRuns_GetDetails"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTaskRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.GetDetails(ctx,
		"myResourceGroup",
		"myRegistry",
		"myRun",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsGetDetails.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.TaskRun{
			Name: to.Ptr("myRun"),
			Type: to.Ptr("Microsoft.ContainerRegistry/registries/TaskRuns"),
			ID:   to.Ptr("/subscriptions/3647315e-0c5b-4ce4-8739-b071e144b2c9/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/taskRuns/myRun"),
			Properties: &armcontainerregistry.TaskRunProperties{
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
					Type:                 to.Ptr("EncodedTaskRunRequest"),
					IsArchiveEnabled:     to.Ptr(true),
					Credentials:          &armcontainerregistry.Credentials{},
					EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
					EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
					Platform: &armcontainerregistry.PlatformProperties{
						Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
						OS:           to.Ptr(armcontainerregistry.OSLinux),
					},
					Values: []*armcontainerregistry.SetValue{},
				},
				RunResult: &armcontainerregistry.Run{
					Name: to.Ptr("yd5"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
					ID:   to.Ptr("/subscriptions/3647315e-0c5b-4ce4-8739-b071e144b2c9/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/yd5"),
					Properties: &armcontainerregistry.RunProperties{
						AgentConfiguration: &armcontainerregistry.AgentProperties{
							CPU: to.Ptr[int32](2),
						},
						CreateTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:21.9261521+00:00"); return t }()),
						FinishTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:29.8792157+00:00"); return t }()),
						IsArchiveEnabled: to.Ptr(true),
						LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:29+00:00"); return t }()),
						Platform: &armcontainerregistry.PlatformProperties{
							Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
							OS:           to.Ptr(armcontainerregistry.OSLinux),
						},
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						RunID:             to.Ptr("yd5"),
						RunType:           to.Ptr(armcontainerregistry.RunTypeQuickRun),
						StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:22.1348714+00:00"); return t }()),
						Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TaskRun) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TaskRun)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsGetDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTaskRuns_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TaskRuns_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTaskRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.List("myResourceGroup",
		"myRegistry",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.TaskRunListResult{
			Value: []*armcontainerregistry.TaskRun{
				{
					Name: to.Ptr("mytestrun"),
					Type: to.Ptr("Microsoft.ContainerRegistry/registries/TaskRuns"),
					ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/taskRuns/myRun"),
					Properties: &armcontainerregistry.TaskRunProperties{
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
							Type:                 to.Ptr("EncodedTaskRunRequest"),
							IsArchiveEnabled:     to.Ptr(true),
							Credentials:          &armcontainerregistry.Credentials{},
							EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
							EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
							Platform: &armcontainerregistry.PlatformProperties{
								Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
								OS:           to.Ptr(armcontainerregistry.OSLinux),
							},
							Values: []*armcontainerregistry.SetValue{},
						},
						RunResult: &armcontainerregistry.Run{
							Name: to.Ptr("yd4"),
							Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
							ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/yd4"),
							Properties: &armcontainerregistry.RunProperties{
								AgentConfiguration: &armcontainerregistry.AgentProperties{
									CPU: to.Ptr[int32](2),
								},
								CreateTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T17:15:29.2278794+00:00"); return t }()),
								FinishTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T17:15:37.0349516+00:00"); return t }()),
								IsArchiveEnabled: to.Ptr(true),
								LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T17:15:37+00:00"); return t }()),
								Platform: &armcontainerregistry.PlatformProperties{
									Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
									OS:           to.Ptr(armcontainerregistry.OSLinux),
								},
								ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
								RunID:             to.Ptr("yd4"),
								RunType:           to.Ptr(armcontainerregistry.RunTypeQuickRun),
								StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T17:15:29.4589616+00:00"); return t }()),
								Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TaskRunListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TaskRunListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_List(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	pager := client.List("myResourceGroup",
		"myRegistry",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcontainerregistry.TaskListResult{
			Value: []*armcontainerregistry.Task{
				{
					Name:     to.Ptr("myTask"),
					Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
					ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"testkey": to.Ptr("value"),
					},
					Identity: &armcontainerregistry.IdentityProperties{
						Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
						TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
					},
					Properties: &armcontainerregistry.TaskProperties{
						AgentConfiguration: &armcontainerregistry.AgentProperties{
							CPU: to.Ptr[int32](2),
						},
						CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
						Credentials: &armcontainerregistry.Credentials{
							CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
								"myRegistry.azure.io": nil,
							},
						},
						IsSystemTask: to.Ptr(false),
						Platform: &armcontainerregistry.PlatformProperties{
							Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
							OS:           to.Ptr(armcontainerregistry.OSLinux),
						},
						ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
						Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
						Step: &armcontainerregistry.DockerBuildStep{
							Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
							ContextPath: to.Ptr("src"),
							Arguments: []*armcontainerregistry.Argument{
								{
									Name:     to.Ptr("mytestargument"),
									IsSecret: to.Ptr(false),
									Value:    to.Ptr("mytestvalue"),
								}},
							DockerFilePath: to.Ptr("src/DockerFile"),
							ImageNames: []*string{
								to.Ptr("azurerest:testtag")},
							IsPushEnabled: to.Ptr(true),
							NoCache:       to.Ptr(false),
						},
						Trigger: &armcontainerregistry.TriggerProperties{
							BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
								Name:                     to.Ptr("myBaseImageTrigger"),
								BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
								Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
								UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeDefault),
							},
							SourceTriggers: []*armcontainerregistry.SourceTrigger{
								{
									Name: to.Ptr("mySourceTrigger"),
									SourceRepository: &armcontainerregistry.SourceProperties{
										Branch:            to.Ptr("master"),
										RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
										SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
									},
									SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
										to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
									Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
								}},
							TimerTriggers: []*armcontainerregistry.TimerTrigger{
								{
									Name:     to.Ptr("myTimerTrigger"),
									Schedule: to.Ptr("30 9 * * 1-5"),
									Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TaskListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TaskListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_Get(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRegistry",
		"myTask",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Task{
			Name:     to.Ptr("myTask"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
			ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Identity: &armcontainerregistry.IdentityProperties{
				Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
			},
			Properties: &armcontainerregistry.TaskProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](2),
				},
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
				Credentials: &armcontainerregistry.Credentials{
					CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
						"myregistry.azure.io": nil,
					},
				},
				IsSystemTask: to.Ptr(false),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStep{
					Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
					ContextPath: to.Ptr("src"),
					Arguments: []*armcontainerregistry.Argument{
						{
							Name:     to.Ptr("mytestargument"),
							IsSecret: to.Ptr(false),
							Value:    to.Ptr("mytestvalue"),
						}},
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag")},
					IsPushEnabled: to.Ptr(true),
					NoCache:       to.Ptr(false),
				},
				Trigger: &armcontainerregistry.TriggerProperties{
					BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
						Name:                     to.Ptr("myBaseImageTrigger"),
						BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
						Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeToken),
					},
					SourceTriggers: []*armcontainerregistry.SourceTrigger{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceProperties{
								Branch:            to.Ptr("master"),
								RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
							Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
					TimerTriggers: []*armcontainerregistry.TimerTrigger{
						{
							Name:     to.Ptr("myTimerTrigger"),
							Schedule: to.Ptr("30 9 * * 1-5"),
							Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Task) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Task)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_Create(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"mytTask",
		armcontainerregistry.Task{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Identity: &armcontainerregistry.IdentityProperties{
				Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			},
			Properties: &armcontainerregistry.TaskProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](2),
				},
				IsSystemTask: to.Ptr(false),
				LogTemplate:  to.Ptr("acr/tasks:{{.Run.OS}}"),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStep{
					Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
					ContextPath: to.Ptr("src"),
					Arguments: []*armcontainerregistry.Argument{
						{
							Name:     to.Ptr("mytestargument"),
							IsSecret: to.Ptr(false),
							Value:    to.Ptr("mytestvalue"),
						},
						{
							Name:     to.Ptr("mysecrettestargument"),
							IsSecret: to.Ptr(true),
							Value:    to.Ptr("mysecrettestvalue"),
						}},
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag")},
					IsPushEnabled: to.Ptr(true),
					NoCache:       to.Ptr(false),
				},
				Trigger: &armcontainerregistry.TriggerProperties{
					BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
						Name:                     to.Ptr("myBaseImageTrigger"),
						BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
						UpdateTriggerEndpoint:    to.Ptr("https://user:pass@mycicd.webhook.com?token=foo"),
						UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeToken),
					},
					SourceTriggers: []*armcontainerregistry.SourceTrigger{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceProperties{
								Branch:        to.Ptr("master"),
								RepositoryURL: to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlAuthProperties: &armcontainerregistry.AuthInfo{
									Token:     to.Ptr("xxxxx"),
									TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
								},
								SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						}},
					TimerTriggers: []*armcontainerregistry.TimerTrigger{
						{
							Name:     to.Ptr("myTimerTrigger"),
							Schedule: to.Ptr("30 9 * * 1-5"),
						}},
				},
			},
		},
		&armcontainerregistry.TasksClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Task{
			Name:     to.Ptr("myTask"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
			ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Identity: &armcontainerregistry.IdentityProperties{
				Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
			},
			Properties: &armcontainerregistry.TaskProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](2),
				},
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
				IsSystemTask: to.Ptr(false),
				LogTemplate:  to.Ptr("acr/tasks:{{.Run.OS}}"),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStep{
					Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
					ContextPath: to.Ptr("src"),
					Arguments: []*armcontainerregistry.Argument{
						{
							Name:     to.Ptr("mytestargument"),
							IsSecret: to.Ptr(false),
							Value:    to.Ptr("mytestvalue"),
						}},
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag")},
					IsPushEnabled: to.Ptr(true),
					NoCache:       to.Ptr(false),
				},
				Trigger: &armcontainerregistry.TriggerProperties{
					BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
						Name:                     to.Ptr("myBaseImageTrigger"),
						BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
						Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeToken),
					},
					SourceTriggers: []*armcontainerregistry.SourceTrigger{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceProperties{
								Branch:            to.Ptr("master"),
								RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
							Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
					TimerTriggers: []*armcontainerregistry.TimerTrigger{
						{
							Name:     to.Ptr("myTimerTrigger"),
							Schedule: to.Ptr("30 9 * * 1-5"),
							Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Task) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Task)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksCreate_QuickTask.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Create_QuickTask"},
	})
	client = armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"quicktask",
		armcontainerregistry.Task{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.TaskProperties{
				IsSystemTask: to.Ptr(true),
				LogTemplate:  to.Ptr("acr/tasks:{{.Run.OS}}"),
				Status:       to.Ptr(armcontainerregistry.TaskStatusEnabled),
			},
		},
		&armcontainerregistry.TasksClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksCreate_QuickTask.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksCreate_QuickTask.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Task{
			Name:     to.Ptr("quicktask"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
			ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.TaskProperties{
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
				IsSystemTask:      to.Ptr(true),
				LogTemplate:       to.Ptr("acr/tasks:{{.Run.OS}}"),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Task) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Task)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksCreate_QuickTask.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithSystemAndUserIdentities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Create_WithSystemAndUserIdentities"},
	})
	client = armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"mytTask",
		armcontainerregistry.Task{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Identity: &armcontainerregistry.IdentityProperties{
				Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssignedUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {},
				},
			},
			Properties: &armcontainerregistry.TaskProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](2),
				},
				IsSystemTask: to.Ptr(false),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStep{
					Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
					ContextPath: to.Ptr("src"),
					Arguments: []*armcontainerregistry.Argument{
						{
							Name:     to.Ptr("mytestargument"),
							IsSecret: to.Ptr(false),
							Value:    to.Ptr("mytestvalue"),
						},
						{
							Name:     to.Ptr("mysecrettestargument"),
							IsSecret: to.Ptr(true),
							Value:    to.Ptr("mysecrettestvalue"),
						}},
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag")},
					IsPushEnabled: to.Ptr(true),
					NoCache:       to.Ptr(false),
				},
				Trigger: &armcontainerregistry.TriggerProperties{
					BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
						Name:                     to.Ptr("myBaseImageTrigger"),
						BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
						UpdateTriggerEndpoint:    to.Ptr("https://user:pass@mycicd.webhook.com?token=foo"),
						UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeDefault),
					},
					SourceTriggers: []*armcontainerregistry.SourceTrigger{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceProperties{
								Branch:        to.Ptr("master"),
								RepositoryURL: to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlAuthProperties: &armcontainerregistry.AuthInfo{
									Token:     to.Ptr("xxxxx"),
									TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
								},
								SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						}},
					TimerTriggers: []*armcontainerregistry.TimerTrigger{
						{
							Name:     to.Ptr("myTimerTrigger"),
							Schedule: to.Ptr("30 9 * * 1-5"),
						}},
				},
			},
		},
		&armcontainerregistry.TasksClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithSystemAndUserIdentities.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithSystemAndUserIdentities.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Task{
			Name:     to.Ptr("myTask"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
			ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Identity: &armcontainerregistry.IdentityProperties{
				Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("fc99dc67-1ad9-45c8-9ebc-e438081c8e30"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
				UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {
						ClientID:    to.Ptr("e35621a5-f615-4a20-940e-de8a84b15abc"),
						PrincipalID: to.Ptr("e45e3m7c-176e-416a-b466-0c5ec8298f8a"),
					},
				},
			},
			Properties: &armcontainerregistry.TaskProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](2),
				},
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
				IsSystemTask: to.Ptr(false),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStep{
					Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
					ContextPath: to.Ptr("src"),
					Arguments: []*armcontainerregistry.Argument{
						{
							Name:     to.Ptr("mytestargument"),
							IsSecret: to.Ptr(false),
							Value:    to.Ptr("mytestvalue"),
						}},
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag")},
					IsPushEnabled: to.Ptr(true),
					NoCache:       to.Ptr(false),
				},
				Trigger: &armcontainerregistry.TriggerProperties{
					BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
						Name:                     to.Ptr("myBaseImageTrigger"),
						BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
						Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeDefault),
					},
					SourceTriggers: []*armcontainerregistry.SourceTrigger{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceProperties{
								Branch:            to.Ptr("master"),
								RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
							Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
					TimerTriggers: []*armcontainerregistry.TimerTrigger{
						{
							Name:     to.Ptr("myTimerTrigger"),
							Schedule: to.Ptr("30 9 * * 1-5"),
							Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Task) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Task)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithSystemAndUserIdentities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithUserIdentities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Create_WithUserIdentities"},
	})
	client = armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"mytTask",
		armcontainerregistry.Task{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Identity: &armcontainerregistry.IdentityProperties{
				Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1":  {},
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {},
				},
			},
			Properties: &armcontainerregistry.TaskProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](2),
				},
				IsSystemTask: to.Ptr(false),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStep{
					Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
					ContextPath: to.Ptr("src"),
					Arguments: []*armcontainerregistry.Argument{
						{
							Name:     to.Ptr("mytestargument"),
							IsSecret: to.Ptr(false),
							Value:    to.Ptr("mytestvalue"),
						},
						{
							Name:     to.Ptr("mysecrettestargument"),
							IsSecret: to.Ptr(true),
							Value:    to.Ptr("mysecrettestvalue"),
						}},
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag")},
					IsPushEnabled: to.Ptr(true),
					NoCache:       to.Ptr(false),
				},
				Trigger: &armcontainerregistry.TriggerProperties{
					BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
						Name:                     to.Ptr("myBaseImageTrigger"),
						BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
						UpdateTriggerEndpoint:    to.Ptr("https://user:pass@mycicd.webhook.com?token=foo"),
						UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeDefault),
					},
					SourceTriggers: []*armcontainerregistry.SourceTrigger{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceProperties{
								Branch:        to.Ptr("master"),
								RepositoryURL: to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlAuthProperties: &armcontainerregistry.AuthInfo{
									Token:     to.Ptr("xxxxx"),
									TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
								},
								SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						}},
					TimerTriggers: []*armcontainerregistry.TimerTrigger{
						{
							Name:     to.Ptr("myTimerTrigger"),
							Schedule: to.Ptr("30 9 * * 1-5"),
						}},
				},
			},
		},
		&armcontainerregistry.TasksClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithUserIdentities.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithUserIdentities.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Task{
			Name:     to.Ptr("myTask"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
			ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Identity: &armcontainerregistry.IdentityProperties{
				Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {
						ClientID:    to.Ptr("d3ce1bc2-f7d7-4a5b-9979-950f4e57680e"),
						PrincipalID: to.Ptr("b6p9f58b-6fbf-4efd-a7e0-fvd46911a466"),
					},
					"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {
						ClientID:    to.Ptr("e35621a5-f615-4a20-940e-de8a84b15abc"),
						PrincipalID: to.Ptr("e45e3m7c-176e-416a-b466-0c5ec8298f8a"),
					},
				},
			},
			Properties: &armcontainerregistry.TaskProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](2),
				},
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
				IsSystemTask: to.Ptr(false),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStep{
					Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
					ContextPath: to.Ptr("src"),
					Arguments: []*armcontainerregistry.Argument{
						{
							Name:     to.Ptr("mytestargument"),
							IsSecret: to.Ptr(false),
							Value:    to.Ptr("mytestvalue"),
						}},
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag")},
					IsPushEnabled: to.Ptr(true),
					NoCache:       to.Ptr(false),
				},
				Trigger: &armcontainerregistry.TriggerProperties{
					BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
						Name:                     to.Ptr("myBaseImageTrigger"),
						BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
						Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeDefault),
					},
					SourceTriggers: []*armcontainerregistry.SourceTrigger{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceProperties{
								Branch:            to.Ptr("master"),
								RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
							Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
					TimerTriggers: []*armcontainerregistry.TimerTrigger{
						{
							Name:     to.Ptr("myTimerTrigger"),
							Schedule: to.Ptr("30 9 * * 1-5"),
							Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Task) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Task)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithUserIdentities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithSystemIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Create_WithUserIdentities_WithSystemIdentity"},
	})
	client = armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"myRegistry",
		"mytTask",
		armcontainerregistry.Task{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Identity: &armcontainerregistry.IdentityProperties{
				Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			},
			Properties: &armcontainerregistry.TaskProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](2),
				},
				IsSystemTask: to.Ptr(false),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStep{
					Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
					ContextPath: to.Ptr("src"),
					Arguments: []*armcontainerregistry.Argument{
						{
							Name:     to.Ptr("mytestargument"),
							IsSecret: to.Ptr(false),
							Value:    to.Ptr("mytestvalue"),
						},
						{
							Name:     to.Ptr("mysecrettestargument"),
							IsSecret: to.Ptr(true),
							Value:    to.Ptr("mysecrettestvalue"),
						}},
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag")},
					IsPushEnabled: to.Ptr(true),
					NoCache:       to.Ptr(false),
				},
				Trigger: &armcontainerregistry.TriggerProperties{
					BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
						Name:                 to.Ptr("myBaseImageTrigger"),
						BaseImageTriggerType: to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					},
					SourceTriggers: []*armcontainerregistry.SourceTrigger{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceProperties{
								Branch:        to.Ptr("master"),
								RepositoryURL: to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlAuthProperties: &armcontainerregistry.AuthInfo{
									Token:     to.Ptr("xxxxx"),
									TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
								},
								SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						}},
					TimerTriggers: []*armcontainerregistry.TimerTrigger{
						{
							Name:     to.Ptr("myTimerTrigger"),
							Schedule: to.Ptr("30 9 * * 1-5"),
						}},
				},
			},
		},
		&armcontainerregistry.TasksClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithSystemIdentity.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithSystemIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Task{
			Name:     to.Ptr("myTask"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
			ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Identity: &armcontainerregistry.IdentityProperties{
				Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
			},
			Properties: &armcontainerregistry.TaskProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](2),
				},
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
				IsSystemTask: to.Ptr(false),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStep{
					Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
					ContextPath: to.Ptr("src"),
					Arguments: []*armcontainerregistry.Argument{
						{
							Name:     to.Ptr("mytestargument"),
							IsSecret: to.Ptr(false),
							Value:    to.Ptr("mytestvalue"),
						}},
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag")},
					IsPushEnabled: to.Ptr(true),
					NoCache:       to.Ptr(false),
				},
				Trigger: &armcontainerregistry.TriggerProperties{
					BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
						Name:                 to.Ptr("myBaseImageTrigger"),
						BaseImageTriggerType: to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
						Status:               to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					},
					SourceTriggers: []*armcontainerregistry.SourceTrigger{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceProperties{
								Branch:            to.Ptr("master"),
								RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
							Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
					TimerTriggers: []*armcontainerregistry.TimerTrigger{
						{
							Name:     to.Ptr("myTimerTrigger"),
							Schedule: to.Ptr("30 9 * * 1-5"),
							Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Task) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Task)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithSystemIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_Delete(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myRegistry",
		"myTask",
		&armcontainerregistry.TasksClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksDelete.json: %v", err)
	}
}

func TestTasks_Update(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myTask",
		armcontainerregistry.TaskUpdateParameters{
			Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](3),
				},
				Credentials: &armcontainerregistry.Credentials{
					CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
						"myregistry.azurecr.io": {
							Identity: to.Ptr("[system]"),
							Password: &armcontainerregistry.SecretObject{
								Type:  to.Ptr(armcontainerregistry.SecretObjectTypeVaultsecret),
								Value: to.Ptr("https://myacbvault.vault.azure.net/secrets/password"),
							},
							UserName: &armcontainerregistry.SecretObject{
								Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
								Value: to.Ptr("username"),
							},
						},
					},
				},
				LogTemplate: to.Ptr("acr/tasks:{{.Run.OS}}"),
				Status:      to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStepUpdateParameters{
					Type:           to.Ptr(armcontainerregistry.StepTypeDocker),
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag1")},
				},
				Trigger: &armcontainerregistry.TriggerUpdateParameters{
					SourceTriggers: []*armcontainerregistry.SourceTriggerUpdateParameters{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceUpdateParameters{
								SourceControlAuthProperties: &armcontainerregistry.AuthInfoUpdateParameters{
									Token:     to.Ptr("xxxxx"),
									TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
								},
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						}},
				},
			},
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
		},
		&armcontainerregistry.TasksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Task{
			Name:     to.Ptr("myTask"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
			ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Identity: &armcontainerregistry.IdentityProperties{
				Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
			},
			Properties: &armcontainerregistry.TaskProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](3),
				},
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
				Credentials: &armcontainerregistry.Credentials{
					CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
						"myregistry.azurecr.io": nil,
					},
				},
				LogTemplate: to.Ptr("acr/tasks:{{.Run.OS}}"),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStep{
					Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
					ContextPath: to.Ptr("src"),
					Arguments: []*armcontainerregistry.Argument{
						{
							Name:     to.Ptr("mytestargument"),
							IsSecret: to.Ptr(false),
							Value:    to.Ptr("mytestvalue"),
						}},
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag1")},
					IsPushEnabled: to.Ptr(true),
					NoCache:       to.Ptr(false),
				},
				Trigger: &armcontainerregistry.TriggerProperties{
					BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
						Name:                     to.Ptr("myBaseImageTrigger"),
						BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
						Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeDefault),
					},
					SourceTriggers: []*armcontainerregistry.SourceTrigger{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceProperties{
								Branch:            to.Ptr("master"),
								RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
							Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
					TimerTriggers: []*armcontainerregistry.TimerTrigger{
						{
							Name:     to.Ptr("myTimerTrigger"),
							Schedule: to.Ptr("30 9 * * 1-5"),
							Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Task) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Task)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate_QuickTask.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Update_QuickTask"},
	})
	client = armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"quicktask",
		armcontainerregistry.TaskUpdateParameters{
			Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
				LogTemplate: to.Ptr("acr/tasks:{{.Run.OS}}"),
				Status:      to.Ptr(armcontainerregistry.TaskStatusEnabled),
			},
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
		},
		&armcontainerregistry.TasksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate_QuickTask.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate_QuickTask.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Task{
			Name:     to.Ptr("myTask"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
			ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Properties: &armcontainerregistry.TaskProperties{
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
				LogTemplate:       to.Ptr("acr/tasks:{{.Run.OS}}"),
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Task) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Task)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate_QuickTask.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksUpdate_WithKeyVaultCustomCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Update_WithKeyVaultCustomCredentials"},
	})
	client = armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myTask",
		armcontainerregistry.TaskUpdateParameters{
			Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](3),
				},
				Credentials: &armcontainerregistry.Credentials{
					CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
						"myregistry.azurecr.io": {
							Identity: to.Ptr("[system]"),
							Password: &armcontainerregistry.SecretObject{
								Type:  to.Ptr(armcontainerregistry.SecretObjectTypeVaultsecret),
								Value: to.Ptr("https://myacbvault.vault.azure.net/secrets/password"),
							},
							UserName: &armcontainerregistry.SecretObject{
								Type:  to.Ptr(armcontainerregistry.SecretObjectTypeVaultsecret),
								Value: to.Ptr("https://myacbvault.vault.azure.net/secrets/username"),
							},
						},
					},
				},
				Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStepUpdateParameters{
					Type:           to.Ptr(armcontainerregistry.StepTypeDocker),
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag1")},
				},
				Trigger: &armcontainerregistry.TriggerUpdateParameters{
					SourceTriggers: []*armcontainerregistry.SourceTriggerUpdateParameters{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceUpdateParameters{
								SourceControlAuthProperties: &armcontainerregistry.AuthInfoUpdateParameters{
									Token:     to.Ptr("xxxxx"),
									TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
								},
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						}},
				},
			},
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
		},
		&armcontainerregistry.TasksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksUpdate_WithKeyVaultCustomCredentials.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksUpdate_WithKeyVaultCustomCredentials.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Task{
			Name:     to.Ptr("myTask"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
			ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Identity: &armcontainerregistry.IdentityProperties{
				Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
			},
			Properties: &armcontainerregistry.TaskProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](3),
				},
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
				Credentials: &armcontainerregistry.Credentials{
					CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
						"myregistry.azurecr.io": nil,
					},
				},
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStep{
					Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
					ContextPath: to.Ptr("src"),
					Arguments: []*armcontainerregistry.Argument{
						{
							Name:     to.Ptr("mytestargument"),
							IsSecret: to.Ptr(false),
							Value:    to.Ptr("mytestvalue"),
						}},
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag1")},
					IsPushEnabled: to.Ptr(true),
					NoCache:       to.Ptr(false),
				},
				Trigger: &armcontainerregistry.TriggerProperties{
					BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
						Name:                     to.Ptr("myBaseImageTrigger"),
						BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
						Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						UpdateTriggerEndpoint:    to.Ptr("https://user:pass@mycicd.webhook.com?token=foo"),
						UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeToken),
					},
					SourceTriggers: []*armcontainerregistry.SourceTrigger{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceProperties{
								Branch:            to.Ptr("master"),
								RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
							Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
					TimerTriggers: []*armcontainerregistry.TimerTrigger{
						{
							Name:     to.Ptr("myTimerTrigger"),
							Schedule: to.Ptr("30 9 * * 1-5"),
							Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Task) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Task)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksUpdate_WithKeyVaultCustomCredentials.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksUpdate_WithMSICustomCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Update_WithMSICustomCredentials"},
	})
	client = armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myTask",
		armcontainerregistry.TaskUpdateParameters{
			Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](3),
				},
				Credentials: &armcontainerregistry.Credentials{
					CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
						"myregistry.azurecr.io": {
							Identity: to.Ptr("[system]"),
						},
					},
				},
				Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStepUpdateParameters{
					Type:           to.Ptr(armcontainerregistry.StepTypeDocker),
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag1")},
				},
				Trigger: &armcontainerregistry.TriggerUpdateParameters{
					SourceTriggers: []*armcontainerregistry.SourceTriggerUpdateParameters{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceUpdateParameters{
								SourceControlAuthProperties: &armcontainerregistry.AuthInfoUpdateParameters{
									Token:     to.Ptr("xxxxx"),
									TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
								},
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						}},
				},
			},
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
		},
		&armcontainerregistry.TasksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksUpdate_WithMSICustomCredentials.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksUpdate_WithMSICustomCredentials.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Task{
			Name:     to.Ptr("myTask"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
			ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Identity: &armcontainerregistry.IdentityProperties{
				Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
			},
			Properties: &armcontainerregistry.TaskProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](3),
				},
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
				Credentials: &armcontainerregistry.Credentials{
					CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
						"myregistry.azure.io": nil,
					},
				},
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStep{
					Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
					ContextPath: to.Ptr("src"),
					Arguments: []*armcontainerregistry.Argument{
						{
							Name:     to.Ptr("mytestargument"),
							IsSecret: to.Ptr(false),
							Value:    to.Ptr("mytestvalue"),
						}},
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag1")},
					IsPushEnabled: to.Ptr(true),
					NoCache:       to.Ptr(false),
				},
				Trigger: &armcontainerregistry.TriggerProperties{
					BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
						Name:                 to.Ptr("myBaseImageTrigger"),
						BaseImageTriggerType: to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
						Status:               to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					},
					SourceTriggers: []*armcontainerregistry.SourceTrigger{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceProperties{
								Branch:            to.Ptr("master"),
								RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
							Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
					TimerTriggers: []*armcontainerregistry.TimerTrigger{
						{
							Name:     to.Ptr("myTimerTrigger"),
							Schedule: to.Ptr("30 9 * * 1-5"),
							Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Task) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Task)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksUpdate_WithMSICustomCredentials.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate_WithOpaqueCustomCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Update_WithOpaqueCustomCredentials"},
	})
	client = armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myRegistry",
		"myTask",
		armcontainerregistry.TaskUpdateParameters{
			Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](3),
				},
				Credentials: &armcontainerregistry.Credentials{
					CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
						"myregistry.azurecr.io": {
							Password: &armcontainerregistry.SecretObject{
								Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
								Value: to.Ptr("***"),
							},
							UserName: &armcontainerregistry.SecretObject{
								Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
								Value: to.Ptr("username"),
							},
						},
					},
				},
				Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStepUpdateParameters{
					Type:           to.Ptr(armcontainerregistry.StepTypeDocker),
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag1")},
				},
				Trigger: &armcontainerregistry.TriggerUpdateParameters{
					SourceTriggers: []*armcontainerregistry.SourceTriggerUpdateParameters{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceUpdateParameters{
								SourceControlAuthProperties: &armcontainerregistry.AuthInfoUpdateParameters{
									Token:     to.Ptr("xxxxx"),
									TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
								},
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						}},
				},
			},
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
		},
		&armcontainerregistry.TasksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate_WithOpaqueCustomCredentials.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate_WithOpaqueCustomCredentials.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Task{
			Name:     to.Ptr("myTask"),
			Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
			ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Identity: &armcontainerregistry.IdentityProperties{
				Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
			},
			Properties: &armcontainerregistry.TaskProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](3),
				},
				CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
				Credentials: &armcontainerregistry.Credentials{
					CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
						"myregistry.azure.io": nil,
					},
				},
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStep{
					Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
					ContextPath: to.Ptr("src"),
					Arguments: []*armcontainerregistry.Argument{
						{
							Name:     to.Ptr("mytestargument"),
							IsSecret: to.Ptr(false),
							Value:    to.Ptr("mytestvalue"),
						}},
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag1")},
					IsPushEnabled: to.Ptr(true),
					NoCache:       to.Ptr(false),
				},
				Trigger: &armcontainerregistry.TriggerProperties{
					BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
						Name:                 to.Ptr("myBaseImageTrigger"),
						BaseImageTriggerType: to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
						Status:               to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					},
					SourceTriggers: []*armcontainerregistry.SourceTrigger{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceProperties{
								Branch:            to.Ptr("master"),
								RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
							Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
					TimerTriggers: []*armcontainerregistry.TimerTrigger{
						{
							Name:     to.Ptr("myTimerTrigger"),
							Schedule: to.Ptr("30 9 * * 1-5"),
							Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Task) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Task)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate_WithOpaqueCustomCredentials.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_GetDetails(t *testing.T) {
	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksGetDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_GetDetails"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", cred, &options)
	res, err := client.GetDetails(ctx,
		"myResourceGroup",
		"myRegistry",
		"myTask",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksGetDetails.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcontainerregistry.Task{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("value"),
			},
			Identity: &armcontainerregistry.IdentityProperties{
				Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
			},
			Properties: &armcontainerregistry.TaskProperties{
				AgentConfiguration: &armcontainerregistry.AgentProperties{
					CPU: to.Ptr[int32](2),
				},
				Credentials: &armcontainerregistry.Credentials{
					CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
						"myregistry.azure-test.io": {
							Identity: to.Ptr("[system]"),
							Password: &armcontainerregistry.SecretObject{
								Type:  to.Ptr(armcontainerregistry.SecretObjectTypeVaultsecret),
								Value: to.Ptr("https://myacbvault.vault.azure.net/secrets/username"),
							},
							UserName: &armcontainerregistry.SecretObject{
								Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
								Value: to.Ptr("username"),
							},
						},
					},
				},
				IsSystemTask: to.Ptr(false),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
				Step: &armcontainerregistry.DockerBuildStep{
					Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
					ContextPath: to.Ptr("src"),
					Arguments: []*armcontainerregistry.Argument{
						{
							Name:     to.Ptr("mytestargument"),
							IsSecret: to.Ptr(false),
							Value:    to.Ptr("mytestvalue"),
						},
						{
							Name:     to.Ptr("mysecrettestargument"),
							IsSecret: to.Ptr(true),
							Value:    to.Ptr("mysecrettestvalue"),
						}},
					DockerFilePath: to.Ptr("src/DockerFile"),
					ImageNames: []*string{
						to.Ptr("azurerest:testtag")},
					IsPushEnabled: to.Ptr(true),
					NoCache:       to.Ptr(false),
				},
				Trigger: &armcontainerregistry.TriggerProperties{
					BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
						Name:                     to.Ptr("myBaseImageTrigger"),
						BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
						Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						UpdateTriggerEndpoint:    to.Ptr("https://user:pass@mycicd.webhook.com?token=foo"),
						UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeToken),
					},
					SourceTriggers: []*armcontainerregistry.SourceTrigger{
						{
							Name: to.Ptr("mySourceTrigger"),
							SourceRepository: &armcontainerregistry.SourceProperties{
								Branch:        to.Ptr("master"),
								RepositoryURL: to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
								SourceControlAuthProperties: &armcontainerregistry.AuthInfo{
									Token:     to.Ptr("xxxxx"),
									TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
								},
								SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
							},
							SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
								to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
							Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
					TimerTriggers: []*armcontainerregistry.TimerTrigger{
						{
							Name:     to.Ptr("myTimerTrigger"),
							Schedule: to.Ptr("30 9 * * 1-5"),
							Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Task) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Task)
			t.Fatalf("Mock response is not equal to example response for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksGetDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
