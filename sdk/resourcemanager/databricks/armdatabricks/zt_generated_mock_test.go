//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatabricks_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/databricks/armdatabricks"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestWorkspaces_Get(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewWorkspacesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myWorkspace",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatabricks.Workspace{
			Name:     to.Ptr("myWorkspace"),
			Type:     to.Ptr("Microsoft.Databricks/workspaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Databricks/workspaces/myWorkspace"),
			Location: to.Ptr("East US 2"),
			Properties: &armdatabricks.WorkspaceProperties{
				Authorizations: []*armdatabricks.WorkspaceProviderAuthorization{
					{
						PrincipalID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						RoleDefinitionID: to.Ptr("11111111-1111-1111-1111-111111111111"),
					}},
				CreatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				CreatedDateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-20T00:10:29.2858439Z"); return t }()),
				ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				ProvisioningState:      to.Ptr(armdatabricks.ProvisioningStateSucceeded),
				UIDefinitionURI:        to.Ptr("https://path/to/workspaceCreateUiDefinition.json"),
				UpdatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				WorkspaceID:  to.Ptr("5555555555555555"),
				WorkspaceURL: to.Ptr("adb-5555555555555555.19.azuredatabricks.net"),
			},
			SKU: &armdatabricks.SKU{
				Name: to.Ptr("premium"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceGetParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a workspace with custom parameters"},
	})
	client = armdatabricks.NewWorkspacesClient("subid", cred, &options)
	res, err = client.Get(ctx,
		"rg",
		"myWorkspace",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceGetParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatabricks.Workspace{
			Name:     to.Ptr("myWorkspace"),
			Type:     to.Ptr("Microsoft.Databricks/workspaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Databricks/workspaces/myWorkspace"),
			Location: to.Ptr("East US 2"),
			Properties: &armdatabricks.WorkspaceProperties{
				Authorizations: []*armdatabricks.WorkspaceProviderAuthorization{
					{
						PrincipalID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						RoleDefinitionID: to.Ptr("11111111-1111-1111-1111-111111111111"),
					}},
				CreatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				CreatedDateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-20T00:10:29.2858439Z"); return t }()),
				ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				Parameters: &armdatabricks.WorkspaceCustomParameters{
					CustomPrivateSubnetName: &armdatabricks.WorkspaceCustomStringParameter{
						Type:  to.Ptr(armdatabricks.CustomParameterTypeString),
						Value: to.Ptr("PrivateBob"),
					},
					CustomPublicSubnetName: &armdatabricks.WorkspaceCustomStringParameter{
						Type:  to.Ptr(armdatabricks.CustomParameterTypeString),
						Value: to.Ptr("PublicSarah"),
					},
					CustomVirtualNetworkID: &armdatabricks.WorkspaceCustomStringParameter{
						Type:  to.Ptr(armdatabricks.CustomParameterTypeString),
						Value: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/myNetwork"),
					},
				},
				PrivateEndpointConnections: []*armdatabricks.PrivateEndpointConnection{
					{
						Name: to.Ptr("myWorkspace.23456789-1111-1111-1111-111111111111"),
						Type: to.Ptr("Microsoft.Databricks/workspaces/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/rg/providers/Microsoft.Databricks/workspaces/myWorkspace/privateEndpointConnections/myWorkspace.23456789-1111-1111-1111-111111111111"),
						Properties: &armdatabricks.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armdatabricks.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/networkResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
							},
							PrivateLinkServiceConnectionState: &armdatabricks.PrivateLinkServiceConnectionState{
								Description:    to.Ptr("Auto-Approved"),
								ActionRequired: to.Ptr("None"),
								Status:         to.Ptr(armdatabricks.PrivateLinkServiceConnectionStatusApproved),
							},
							ProvisioningState: to.Ptr(armdatabricks.PrivateEndpointConnectionProvisioningStateSucceeded),
						},
					}},
				ProvisioningState:   to.Ptr(armdatabricks.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armdatabricks.PublicNetworkAccessDisabled),
				RequiredNsgRules:    to.Ptr(armdatabricks.RequiredNsgRulesNoAzureDatabricksRules),
				UIDefinitionURI:     to.Ptr("https://path/to/workspaceCreateUiDefinition.json"),
				UpdatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				WorkspaceID:  to.Ptr("5555555555555555"),
				WorkspaceURL: to.Ptr("adb-5555555555555555.19.azuredatabricks.net"),
			},
			SKU: &armdatabricks.SKU{
				Name: to.Ptr("premium"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceGetParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Delete(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewWorkspacesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg",
		"myWorkspace",
		&armdatabricks.WorkspacesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceDelete.json: %v", err)
	}
}

func TestWorkspaces_CreateOrUpdate(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrepareEncryption.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a workspace which is ready for Customer-Managed Key (CMK) encryption"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewWorkspacesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg",
		"myWorkspace",
		armdatabricks.Workspace{
			Location: to.Ptr("westus"),
			Properties: &armdatabricks.WorkspaceProperties{
				ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				Parameters: &armdatabricks.WorkspaceCustomParameters{
					PrepareEncryption: &armdatabricks.WorkspaceCustomBooleanParameter{
						Value: to.Ptr(true),
					},
				},
			},
		},
		&armdatabricks.WorkspacesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrepareEncryption.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrepareEncryption.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatabricks.Workspace{
			Name:     to.Ptr("myWorkspace"),
			Type:     to.Ptr("Microsoft.Databricks/workspaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Databricks/workspaces/myWorkspace"),
			Location: to.Ptr("East US 2"),
			Properties: &armdatabricks.WorkspaceProperties{
				Authorizations: []*armdatabricks.WorkspaceProviderAuthorization{
					{
						PrincipalID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						RoleDefinitionID: to.Ptr("11111111-1111-1111-1111-111111111111"),
					}},
				CreatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				CreatedDateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-20T00:10:29.2858439Z"); return t }()),
				ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				ProvisioningState:      to.Ptr(armdatabricks.ProvisioningStateSucceeded),
				StorageAccountIdentity: &armdatabricks.ManagedIdentityConfiguration{
					Type:        to.Ptr("SystemAssigned"),
					PrincipalID: to.Ptr("55555555-5555-5555-5555-555555555555"),
					TenantID:    to.Ptr("66666666-6666-6666-6666-666666666666"),
				},
				UIDefinitionURI: to.Ptr("https://path/to/workspaceCreateUiDefinition.json"),
				UpdatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				WorkspaceID:  to.Ptr("5555555555555555"),
				WorkspaceURL: to.Ptr("adb-5555555555555555.19.azuredatabricks.net"),
			},
			SKU: &armdatabricks.SKU{
				Name: to.Ptr("premium"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrepareEncryption.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update workspace"},
	})
	client = armdatabricks.NewWorkspacesClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg",
		"myWorkspace",
		armdatabricks.Workspace{
			Location: to.Ptr("westus"),
			Properties: &armdatabricks.WorkspaceProperties{
				ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
			},
		},
		&armdatabricks.WorkspacesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceCreate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatabricks.Workspace{
			Type:     to.Ptr("Microsoft.Databricks/workspaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Databricks/workspaces/myWorkspace"),
			Location: to.Ptr("East US 2"),
			Properties: &armdatabricks.WorkspaceProperties{
				Authorizations: []*armdatabricks.WorkspaceProviderAuthorization{
					{
						PrincipalID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						RoleDefinitionID: to.Ptr("11111111-1111-1111-1111-111111111111"),
					}},
				CreatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				CreatedDateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-20T00:10:29.2858439Z"); return t }()),
				ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				ProvisioningState:      to.Ptr(armdatabricks.ProvisioningStateSucceeded),
				UIDefinitionURI:        to.Ptr("https://path/to/workspaceCreateUiDefinition.json"),
				UpdatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				WorkspaceID:  to.Ptr("5555555555555555"),
				WorkspaceURL: to.Ptr("adb-5555555555555555.19.azuredatabricks.net"),
			},
			SKU: &armdatabricks.SKU{
				Name: to.Ptr("premium"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceCreateWithParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update workspace with custom parameters"},
	})
	client = armdatabricks.NewWorkspacesClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg",
		"myWorkspace",
		armdatabricks.Workspace{
			Location: to.Ptr("westus"),
			Properties: &armdatabricks.WorkspaceProperties{
				ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				Parameters: &armdatabricks.WorkspaceCustomParameters{
					CustomPrivateSubnetName: &armdatabricks.WorkspaceCustomStringParameter{
						Value: to.Ptr("myPrivateSubnet"),
					},
					CustomPublicSubnetName: &armdatabricks.WorkspaceCustomStringParameter{
						Value: to.Ptr("myPublicSubnet"),
					},
					CustomVirtualNetworkID: &armdatabricks.WorkspaceCustomStringParameter{
						Value: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/myNetwork"),
					},
				},
			},
		},
		&armdatabricks.WorkspacesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceCreateWithParameters.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceCreateWithParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatabricks.Workspace{
			Type:     to.Ptr("Microsoft.Databricks/workspaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Databricks/workspaces/myWorkspace"),
			Location: to.Ptr("East US 2"),
			Properties: &armdatabricks.WorkspaceProperties{
				Authorizations: []*armdatabricks.WorkspaceProviderAuthorization{
					{
						PrincipalID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						RoleDefinitionID: to.Ptr("11111111-1111-1111-1111-111111111111"),
					}},
				CreatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				CreatedDateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-20T00:10:29.2858439Z"); return t }()),
				ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				Parameters: &armdatabricks.WorkspaceCustomParameters{
					CustomPrivateSubnetName: &armdatabricks.WorkspaceCustomStringParameter{
						Type:  to.Ptr(armdatabricks.CustomParameterTypeString),
						Value: to.Ptr("myPrivateSubnet"),
					},
					CustomPublicSubnetName: &armdatabricks.WorkspaceCustomStringParameter{
						Type:  to.Ptr(armdatabricks.CustomParameterTypeString),
						Value: to.Ptr("myPublicSubnet"),
					},
					CustomVirtualNetworkID: &armdatabricks.WorkspaceCustomStringParameter{
						Type:  to.Ptr(armdatabricks.CustomParameterTypeString),
						Value: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/myNetwork"),
					},
				},
				ProvisioningState: to.Ptr(armdatabricks.ProvisioningStateSucceeded),
				UIDefinitionURI:   to.Ptr("https://path/to/workspaceCreateUiDefinition.json"),
				UpdatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				WorkspaceID:  to.Ptr("5555555555555555"),
				WorkspaceURL: to.Ptr("adb-5555555555555555.19.azuredatabricks.net"),
			},
			SKU: &armdatabricks.SKU{
				Name: to.Ptr("premium"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceCreateWithParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/EnableEncryption.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enable Customer-Managed Key (CMK) encryption on a workspace which is prepared for encryption"},
	})
	client = armdatabricks.NewWorkspacesClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg",
		"myWorkspace",
		armdatabricks.Workspace{
			Location: to.Ptr("westus"),
			Properties: &armdatabricks.WorkspaceProperties{
				ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				Parameters: &armdatabricks.WorkspaceCustomParameters{
					Encryption: &armdatabricks.WorkspaceEncryptionParameter{
						Value: &armdatabricks.Encryption{
							KeyName:     to.Ptr("myKeyName"),
							KeySource:   to.Ptr(armdatabricks.KeySourceMicrosoftKeyvault),
							KeyVaultURI: to.Ptr("https://myKeyVault.vault.azure.net/"),
							KeyVersion:  to.Ptr("00000000000000000000000000000000"),
						},
					},
					PrepareEncryption: &armdatabricks.WorkspaceCustomBooleanParameter{
						Value: to.Ptr(true),
					},
				},
			},
		},
		&armdatabricks.WorkspacesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/EnableEncryption.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/EnableEncryption.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatabricks.Workspace{
			Name:     to.Ptr("myWorkspace"),
			Type:     to.Ptr("Microsoft.Databricks/workspaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Databricks/workspaces/myWorkspace"),
			Location: to.Ptr("East US 2"),
			Properties: &armdatabricks.WorkspaceProperties{
				Authorizations: []*armdatabricks.WorkspaceProviderAuthorization{
					{
						PrincipalID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						RoleDefinitionID: to.Ptr("11111111-1111-1111-1111-111111111111"),
					}},
				CreatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				CreatedDateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-20T00:10:29.2858439Z"); return t }()),
				ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				Parameters: &armdatabricks.WorkspaceCustomParameters{
					CustomPrivateSubnetName: &armdatabricks.WorkspaceCustomStringParameter{
						Type:  to.Ptr(armdatabricks.CustomParameterTypeString),
						Value: to.Ptr("PrivateBob"),
					},
					CustomPublicSubnetName: &armdatabricks.WorkspaceCustomStringParameter{
						Type:  to.Ptr(armdatabricks.CustomParameterTypeString),
						Value: to.Ptr("PublicSarah"),
					},
					CustomVirtualNetworkID: &armdatabricks.WorkspaceCustomStringParameter{
						Type:  to.Ptr(armdatabricks.CustomParameterTypeString),
						Value: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/myNetwork"),
					},
					Encryption: &armdatabricks.WorkspaceEncryptionParameter{
						Type: to.Ptr(armdatabricks.CustomParameterTypeObject),
						Value: &armdatabricks.Encryption{
							KeyName:     to.Ptr("myKeyName"),
							KeySource:   to.Ptr(armdatabricks.KeySourceMicrosoftKeyvault),
							KeyVaultURI: to.Ptr("https://myKeyVault.vault.azure.net/"),
							KeyVersion:  to.Ptr("00000000000000000000000000000000"),
						},
					},
					PrepareEncryption: &armdatabricks.WorkspaceCustomBooleanParameter{
						Type:  to.Ptr(armdatabricks.CustomParameterTypeBool),
						Value: to.Ptr(true),
					},
				},
				ProvisioningState: to.Ptr(armdatabricks.ProvisioningStateSucceeded),
				StorageAccountIdentity: &armdatabricks.ManagedIdentityConfiguration{
					Type:        to.Ptr("SystemAssigned"),
					PrincipalID: to.Ptr("55555555-5555-5555-5555-555555555555"),
					TenantID:    to.Ptr("66666666-6666-6666-6666-666666666666"),
				},
				UIDefinitionURI: to.Ptr("https://path/to/workspaceCreateUiDefinition.json"),
				UpdatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				WorkspaceID:  to.Ptr("5555555555555555"),
				WorkspaceURL: to.Ptr("adb-5555555555555555.19.azuredatabricks.net"),
			},
			SKU: &armdatabricks.SKU{
				Name: to.Ptr("premium"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/EnableEncryption.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/DisableEncryption.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Revert Customer-Managed Key (CMK) encryption to Microsoft Managed Keys encryption on a workspace"},
	})
	client = armdatabricks.NewWorkspacesClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg",
		"myWorkspace",
		armdatabricks.Workspace{
			Location: to.Ptr("westus"),
			Properties: &armdatabricks.WorkspaceProperties{
				ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				Parameters: &armdatabricks.WorkspaceCustomParameters{
					Encryption: &armdatabricks.WorkspaceEncryptionParameter{
						Value: &armdatabricks.Encryption{
							KeySource: to.Ptr(armdatabricks.KeySourceDefault),
						},
					},
				},
			},
		},
		&armdatabricks.WorkspacesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/DisableEncryption.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/DisableEncryption.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatabricks.Workspace{
			Name:     to.Ptr("myWorkspace"),
			Type:     to.Ptr("Microsoft.Databricks/workspaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Databricks/workspaces/myWorkspace"),
			Location: to.Ptr("East US 2"),
			Properties: &armdatabricks.WorkspaceProperties{
				Authorizations: []*armdatabricks.WorkspaceProviderAuthorization{
					{
						PrincipalID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						RoleDefinitionID: to.Ptr("11111111-1111-1111-1111-111111111111"),
					}},
				CreatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				CreatedDateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-20T00:10:29.2858439Z"); return t }()),
				ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				Parameters: &armdatabricks.WorkspaceCustomParameters{
					CustomPrivateSubnetName: &armdatabricks.WorkspaceCustomStringParameter{
						Type:  to.Ptr(armdatabricks.CustomParameterTypeString),
						Value: to.Ptr("PrivateBob"),
					},
					CustomPublicSubnetName: &armdatabricks.WorkspaceCustomStringParameter{
						Type:  to.Ptr(armdatabricks.CustomParameterTypeString),
						Value: to.Ptr("PublicSarah"),
					},
					CustomVirtualNetworkID: &armdatabricks.WorkspaceCustomStringParameter{
						Type:  to.Ptr(armdatabricks.CustomParameterTypeString),
						Value: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/myNetwork"),
					},
					Encryption: &armdatabricks.WorkspaceEncryptionParameter{
						Type: to.Ptr(armdatabricks.CustomParameterTypeObject),
						Value: &armdatabricks.Encryption{
							KeySource: to.Ptr(armdatabricks.KeySourceDefault),
						},
					},
					PrepareEncryption: &armdatabricks.WorkspaceCustomBooleanParameter{
						Type:  to.Ptr(armdatabricks.CustomParameterTypeBool),
						Value: to.Ptr(true),
					},
				},
				ProvisioningState: to.Ptr(armdatabricks.ProvisioningStateSucceeded),
				StorageAccountIdentity: &armdatabricks.ManagedIdentityConfiguration{
					Type:        to.Ptr("SystemAssigned"),
					PrincipalID: to.Ptr("55555555-5555-5555-5555-555555555555"),
					TenantID:    to.Ptr("66666666-6666-6666-6666-666666666666"),
				},
				UIDefinitionURI: to.Ptr("https://path/to/workspaceCreateUiDefinition.json"),
				UpdatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				WorkspaceID:  to.Ptr("5555555555555555"),
				WorkspaceURL: to.Ptr("adb-5555555555555555.19.azuredatabricks.net"),
			},
			SKU: &armdatabricks.SKU{
				Name: to.Ptr("premium"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/DisableEncryption.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Update(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a workspace's tags."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewWorkspacesClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg",
		"myWorkspace",
		armdatabricks.WorkspaceUpdate{
			Tags: map[string]*string{
				"mytag1": to.Ptr("myvalue1"),
			},
		},
		&armdatabricks.WorkspacesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatabricks.Workspace{
			Type:     to.Ptr("Microsoft.Databricks/workspaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Databricks/workspaces/myWorkspace"),
			Location: to.Ptr("East US 2"),
			Tags: map[string]*string{
				"mytag1": to.Ptr("myvalue1"),
			},
			Properties: &armdatabricks.WorkspaceProperties{
				Authorizations: []*armdatabricks.WorkspaceProviderAuthorization{
					{
						PrincipalID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
						RoleDefinitionID: to.Ptr("11111111-1111-1111-1111-111111111111"),
					}},
				CreatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				CreatedDateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-20T00:10:29.2858439Z"); return t }()),
				ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
				ProvisioningState:      to.Ptr(armdatabricks.ProvisioningStateSucceeded),
				UIDefinitionURI:        to.Ptr("https://path/to/workspaceCreateUiDefinition.json"),
				UpdatedBy: &armdatabricks.CreatedBy{
					ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
					Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
					Puid:          to.Ptr("33333333"),
				},
				WorkspaceID:  to.Ptr("6666666666666666"),
				WorkspaceURL: to.Ptr("adb-6666666666666666.19.azuredatabricks.net"),
			},
			SKU: &armdatabricks.SKU{
				Name: to.Ptr("premium"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListByResourceGroup(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspacesListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists workspaces"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewWorkspacesClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspacesListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatabricks.WorkspaceListResult{
			Value: []*armdatabricks.Workspace{
				{
					Name:     to.Ptr("myWorkspace1"),
					Type:     to.Ptr("Microsoft.Databricks/workspaces"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Databricks/workspaces/myWorkspace1"),
					Location: to.Ptr("East US 2"),
					Properties: &armdatabricks.WorkspaceProperties{
						Authorizations: []*armdatabricks.WorkspaceProviderAuthorization{
							{
								PrincipalID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
								RoleDefinitionID: to.Ptr("11111111-1111-1111-1111-111111111111"),
							}},
						CreatedBy: &armdatabricks.CreatedBy{
							ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
							Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
							Puid:          to.Ptr("33333333"),
						},
						CreatedDateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-20T00:10:29.2858439Z"); return t }()),
						ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
						ProvisioningState:      to.Ptr(armdatabricks.ProvisioningStateSucceeded),
						UIDefinitionURI:        to.Ptr("https://path/to/workspaceCreateUiDefinition.json"),
						UpdatedBy: &armdatabricks.CreatedBy{
							ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
							Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
							Puid:          to.Ptr("33333333"),
						},
						WorkspaceID:  to.Ptr("5555555555555555"),
						WorkspaceURL: to.Ptr("adb-5555555555555555.19.azuredatabricks.net"),
					},
					SKU: &armdatabricks.SKU{
						Name: to.Ptr("premium"),
					},
				},
				{
					Name:     to.Ptr("myWorkspace2"),
					Type:     to.Ptr("Microsoft.Databricks/workspaces"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Databricks/workspaces/myWorkspace2"),
					Location: to.Ptr("East US 2"),
					Properties: &armdatabricks.WorkspaceProperties{
						Authorizations: []*armdatabricks.WorkspaceProviderAuthorization{
							{
								PrincipalID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
								RoleDefinitionID: to.Ptr("11111111-1111-1111-1111-111111111111"),
							}},
						CreatedBy: &armdatabricks.CreatedBy{
							ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
							Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
							Puid:          to.Ptr("33333333"),
						},
						CreatedDateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-20T00:10:29.2858439Z"); return t }()),
						ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
						ProvisioningState:      to.Ptr(armdatabricks.ProvisioningStateSucceeded),
						UIDefinitionURI:        to.Ptr("https://path/to/workspaceCreateUiDefinition.json"),
						UpdatedBy: &armdatabricks.CreatedBy{
							ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
							Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
							Puid:          to.Ptr("33333333"),
						},
						WorkspaceID:  to.Ptr("6666666666666666"),
						WorkspaceURL: to.Ptr("adb-6666666666666666.19.azuredatabricks.net"),
					},
					SKU: &armdatabricks.SKU{
						Name: to.Ptr("standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspacesListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListBySubscription(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspacesListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists workspaces"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewWorkspacesClient("subid", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspacesListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatabricks.WorkspaceListResult{
			Value: []*armdatabricks.Workspace{
				{
					Name:     to.Ptr("myWorkspace1"),
					Type:     to.Ptr("Microsoft.Databricks/workspaces"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Databricks/workspaces/myWorkspace1"),
					Location: to.Ptr("East US 2"),
					Properties: &armdatabricks.WorkspaceProperties{
						Authorizations: []*armdatabricks.WorkspaceProviderAuthorization{
							{
								PrincipalID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
								RoleDefinitionID: to.Ptr("11111111-1111-1111-1111-111111111111"),
							}},
						CreatedBy: &armdatabricks.CreatedBy{
							ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
							Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
							Puid:          to.Ptr("33333333"),
						},
						CreatedDateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-20T00:10:29.2858439Z"); return t }()),
						ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
						ProvisioningState:      to.Ptr(armdatabricks.ProvisioningStateSucceeded),
						UIDefinitionURI:        to.Ptr("https://path/to/workspaceCreateUiDefinition.json"),
						UpdatedBy: &armdatabricks.CreatedBy{
							ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
							Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
							Puid:          to.Ptr("33333333"),
						},
						WorkspaceID:  to.Ptr("5555555555555555"),
						WorkspaceURL: to.Ptr("adb-5555555555555555.19.azuredatabricks.net"),
					},
					SKU: &armdatabricks.SKU{
						Name: to.Ptr("premium"),
					},
				},
				{
					Name:     to.Ptr("myWorkspace2"),
					Type:     to.Ptr("Microsoft.Databricks/workspaces"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Databricks/workspaces/myWorkspace2"),
					Location: to.Ptr("East US 2"),
					Properties: &armdatabricks.WorkspaceProperties{
						Authorizations: []*armdatabricks.WorkspaceProviderAuthorization{
							{
								PrincipalID:      to.Ptr("00000000-0000-0000-0000-000000000000"),
								RoleDefinitionID: to.Ptr("11111111-1111-1111-1111-111111111111"),
							}},
						CreatedBy: &armdatabricks.CreatedBy{
							ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
							Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
							Puid:          to.Ptr("33333333"),
						},
						CreatedDateTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-20T00:10:29.2858439Z"); return t }()),
						ManagedResourceGroupID: to.Ptr("/subscriptions/subid/resourceGroups/myManagedRG"),
						ProvisioningState:      to.Ptr(armdatabricks.ProvisioningStateSucceeded),
						UIDefinitionURI:        to.Ptr("https://path/to/workspaceCreateUiDefinition.json"),
						UpdatedBy: &armdatabricks.CreatedBy{
							ApplicationID: to.Ptr("44444444-4444-4444-4444-444444444444"),
							Oid:           to.Ptr("22222222-2222-2222-2222-222222222222"),
							Puid:          to.Ptr("33333333"),
						},
						WorkspaceID:  to.Ptr("6666666666666666"),
						WorkspaceURL: to.Ptr("adb-6666666666666666.19.azuredatabricks.net"),
					},
					SKU: &armdatabricks.SKU{
						Name: to.Ptr("standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspacesListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatabricks.OperationListResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/ListPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List private link resources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewPrivateLinkResourcesClient("11111111-1111-1111-1111-111111111111", cred, &options)
	pager := client.List("myResourceGroup",
		"myWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/ListPrivateLinkResources.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatabricks.PrivateLinkResourcesList{
			Value: []*armdatabricks.GroupIDInformation{
				{
					Name: to.Ptr("databricks_ui_api"),
					Type: to.Ptr("Microsoft.Databricks/workspaces/PrivateLinkResources"),
					ID:   to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Databricks/workspaces/myWorkspace/PrivateLinkResources/databricks_ui_api"),
					Properties: &armdatabricks.GroupIDInformationProperties{
						GroupID: to.Ptr("databricks_ui_api"),
						RequiredMembers: []*string{
							to.Ptr("databricks_ui_api")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.azuredatabricks.net")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourcesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourcesList)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/ListPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrivateLinkResourcesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a private link resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewPrivateLinkResourcesClient("11111111-1111-1111-1111-111111111111", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myWorkspace",
		"databricks_ui_api",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrivateLinkResourcesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatabricks.GroupIDInformation{
			Name: to.Ptr("databricks_ui_api"),
			Type: to.Ptr("Microsoft.Databricks/workspaces/PrivateLinkResources"),
			ID:   to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Databricks/workspaces/myWorkspace/PrivateLinkResources/databricks_ui_api"),
			Properties: &armdatabricks.GroupIDInformationProperties{
				GroupID: to.Ptr("databricks_ui_api"),
				RequiredMembers: []*string{
					to.Ptr("databricks_ui_api")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.azuredatabricks.net")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GroupIDInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GroupIDInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrivateLinkResourcesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/ListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List private endpoint connections"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewPrivateEndpointConnectionsClient("11111111-1111-1111-1111-111111111111", cred, &options)
	pager := client.List("myResourceGroup",
		"myWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/ListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatabricks.PrivateEndpointConnectionsList{
			Value: []*armdatabricks.PrivateEndpointConnection{
				{
					Name: to.Ptr("myWorkspace.23456789-1111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.Databricks/workspaces/PrivateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Databricks/workspaces/myWorkspace/PrivateEndpointConnections/myWorkspace.23456789-1111-1111-1111-111111111111"),
					Properties: &armdatabricks.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armdatabricks.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/networkResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armdatabricks.PrivateLinkServiceConnectionState{
							Description:    to.Ptr("Approved by johndoe@company.com"),
							ActionRequired: to.Ptr("None"),
							Status:         to.Ptr(armdatabricks.PrivateLinkServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armdatabricks.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/ListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrivateEndpointConnectionsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a private endpoint connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewPrivateEndpointConnectionsClient("11111111-1111-1111-1111-111111111111", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myWorkspace",
		"myWorkspace.23456789-1111-1111-1111-111111111111",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrivateEndpointConnectionsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatabricks.PrivateEndpointConnection{
			Name: to.Ptr("myWorkspace.23456789-1111-1111-1111-111111111111"),
			Type: to.Ptr("Microsoft.Databricks/workspaces/PrivateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Databricks/workspaces/myWorkspace/PrivateEndpointConnections/myWorkspace.23456789-1111-1111-1111-111111111111"),
			Properties: &armdatabricks.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armdatabricks.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/networkResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armdatabricks.PrivateLinkServiceConnectionState{
					Description:    to.Ptr("Please approve my request!"),
					ActionRequired: to.Ptr("None"),
					Status:         to.Ptr(armdatabricks.PrivateLinkServiceConnectionStatusPending),
				},
				ProvisioningState: to.Ptr(armdatabricks.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrivateEndpointConnectionsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Create(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrivateEndpointConnectionsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a private endpoint connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewPrivateEndpointConnectionsClient("11111111-1111-1111-1111-111111111111", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myWorkspace",
		"myWorkspace.23456789-1111-1111-1111-111111111111",
		armdatabricks.PrivateEndpointConnection{
			Properties: &armdatabricks.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armdatabricks.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by databricksadmin@contoso.com"),
					Status:      to.Ptr(armdatabricks.PrivateLinkServiceConnectionStatusApproved),
				},
			},
		},
		&armdatabricks.PrivateEndpointConnectionsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrivateEndpointConnectionsUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrivateEndpointConnectionsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatabricks.PrivateEndpointConnection{
			Name: to.Ptr("myWorkspace.23456789-1111-1111-1111-111111111111"),
			Type: to.Ptr("Microsoft.Databricks/workspaces/PrivateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/myResourceGroup/providers/Microsoft.Databricks/workspaces/myWorkspace/PrivateEndpointConnections/myWorkspace.23456789-1111-1111-1111-111111111111"),
			Properties: &armdatabricks.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armdatabricks.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/networkResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armdatabricks.PrivateLinkServiceConnectionState{
					Description:    to.Ptr("Approved by databricksadmin@contoso.com"),
					ActionRequired: to.Ptr("None"),
					Status:         to.Ptr(armdatabricks.PrivateLinkServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armdatabricks.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrivateEndpointConnectionsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrivateEndpointConnectionsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Remove a private endpoint connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewPrivateEndpointConnectionsClient("11111111-1111-1111-1111-111111111111", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myWorkspace",
		"myWorkspace.23456789-1111-1111-1111-111111111111",
		&armdatabricks.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrivateEndpointConnectionsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/PrivateEndpointConnectionsDelete.json: %v", err)
	}
}

func TestOutboundNetworkDependenciesEndpoints_List(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/OutboundNetworkDependenciesEndpointsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List OutboundNetworkDependenciesEndpoints by Workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewOutboundNetworkDependenciesEndpointsClient("11111111-1111-1111-1111-111111111111", cred, &options)
	res, err := client.List(ctx,
		"myResourceGroup",
		"myWorkspace",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/OutboundNetworkDependenciesEndpointsList.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armdatabricks.OutboundEnvironmentEndpoint{
			{
				Category: to.Ptr("Webapp"),
				Endpoints: []*armdatabricks.EndpointDependency{
					{
						EndpointDetails: []*armdatabricks.EndpointDetail{
							{
								IPAddress: to.Ptr("11.111.111.11/11"),
								Port:      to.Ptr[int32](123),
							},
							{
								IPAddress: to.Ptr("22.222.222.22/22"),
								Port:      to.Ptr[int32](123),
							}},
					}},
			},
			{
				Category: to.Ptr("Control Plane NAT"),
				Endpoints: []*armdatabricks.EndpointDependency{
					{
						EndpointDetails: []*armdatabricks.EndpointDetail{
							{
								IPAddress: to.Ptr("33.33.333.333/33"),
								Port:      to.Ptr[int32](123),
							}},
					}},
			},
			{
				Category: to.Ptr("Extended infrastructure"),
				Endpoints: []*armdatabricks.EndpointDependency{
					{
						EndpointDetails: []*armdatabricks.EndpointDetail{
							{
								IPAddress: to.Ptr("44.44.44.44/44"),
								Port:      to.Ptr[int32](123),
							}},
					}},
			},
			{
				Category: to.Ptr("Azure Storage"),
				Endpoints: []*armdatabricks.EndpointDependency{
					{
						DomainName: to.Ptr("xxx.blob.core.windows.net"),
						EndpointDetails: []*armdatabricks.EndpointDetail{
							{
								Port: to.Ptr[int32](123),
							}},
					},
					{
						DomainName: to.Ptr("yyy.blob.core.windows.net"),
						EndpointDetails: []*armdatabricks.EndpointDetail{
							{
								Port: to.Ptr[int32](123),
							}},
					},
					{
						DomainName: to.Ptr("zzz.blob.core.windows.net"),
						EndpointDetails: []*armdatabricks.EndpointDetail{
							{
								Port: to.Ptr[int32](123),
							}},
					}},
			},
			{
				Category: to.Ptr("Azure My SQL"),
				Endpoints: []*armdatabricks.EndpointDependency{
					{
						DomainName: to.Ptr("xxx.mysql.database.azure.com"),
						EndpointDetails: []*armdatabricks.EndpointDetail{
							{
								Port: to.Ptr[int32](1234),
							}},
					},
					{
						DomainName: to.Ptr("yyy.mysql.database.azure.com"),
						EndpointDetails: []*armdatabricks.EndpointDetail{
							{
								Port: to.Ptr[int32](1234),
							}},
					}},
			},
			{
				Category: to.Ptr("Azure Servicebus"),
				Endpoints: []*armdatabricks.EndpointDependency{
					{
						DomainName: to.Ptr("xxx.servicebus.windows.net"),
						EndpointDetails: []*armdatabricks.EndpointDetail{
							{
								Port: to.Ptr[int32](1234),
							}},
					}},
			}}
		if !reflect.DeepEqual(exampleRes, res.OutboundEnvironmentEndpointArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OutboundEnvironmentEndpointArray)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/OutboundNetworkDependenciesEndpointsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVNetPeering_Get(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceVirtualNetPeeringGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a workspace with vNet Peering Configured"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewVNetPeeringClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg",
		"myWorkspace",
		"vNetPeering",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceVirtualNetPeeringGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatabricks.VirtualNetworkPeering{
			Name: to.Ptr("vNetPeeringTest"),
			ID:   to.Ptr("/subscriptions/0140911e-1040-48da-8bc9-b99fb3dd88a6/resourceGroups/subramantest/providers/Microsoft.Databricks/workspaces/adbworkspace/virtualNetworkPeerings/vNetPeeringTest"),
			Properties: &armdatabricks.VirtualNetworkPeeringPropertiesFormat{
				AllowForwardedTraffic:     to.Ptr(false),
				AllowGatewayTransit:       to.Ptr(false),
				AllowVirtualNetworkAccess: to.Ptr(true),
				DatabricksAddressSpace: &armdatabricks.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.139.0.0/16")},
				},
				DatabricksVirtualNetwork: &armdatabricks.VirtualNetworkPeeringPropertiesFormatDatabricksVirtualNetwork{
					ID: to.Ptr("/subscriptions/0140911e-1040-48da-8bc9-b99fb3dd88a6/resourceGroups/databricks-rg-adbworkspace-2jsxhmzoyooxm/providers/Microsoft.Network/virtualNetworks/workers-vnet"),
				},
				PeeringState:      to.Ptr(armdatabricks.PeeringStateInitiated),
				ProvisioningState: to.Ptr(armdatabricks.PeeringProvisioningStateSucceeded),
				RemoteAddressSpace: &armdatabricks.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.203.0.0/16")},
				},
				RemoteVirtualNetwork: &armdatabricks.VirtualNetworkPeeringPropertiesFormatRemoteVirtualNetwork{
					ID: to.Ptr("/subscriptions/0140911e-1040-48da-8bc9-b99fb3dd88a6/resourceGroups/subramantest/providers/Microsoft.Network/virtualNetworks/subramanvnet"),
				},
				UseRemoteGateways: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkPeering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkPeering)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceVirtualNetPeeringGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVNetPeering_Delete(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceVirtualNetworkPeeringDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a workspace vNet Peering"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewVNetPeeringClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg",
		"myWorkspace",
		"vNetPeering",
		&armdatabricks.VNetPeeringClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceVirtualNetworkPeeringDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceVirtualNetworkPeeringDelete.json: %v", err)
	}
}

func TestVNetPeering_CreateOrUpdate(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceVirtualNetworkPeeringCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create vNet Peering for Workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewVNetPeeringClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg",
		"myWorkspace",
		"vNetPeeringTest",
		armdatabricks.VirtualNetworkPeering{
			Properties: &armdatabricks.VirtualNetworkPeeringPropertiesFormat{
				AllowForwardedTraffic:     to.Ptr(false),
				AllowGatewayTransit:       to.Ptr(false),
				AllowVirtualNetworkAccess: to.Ptr(true),
				RemoteVirtualNetwork: &armdatabricks.VirtualNetworkPeeringPropertiesFormatRemoteVirtualNetwork{
					ID: to.Ptr("/subscriptions/0140911e-1040-48da-8bc9-b99fb3dd88a6/resourceGroups/subramantest/providers/Microsoft.Network/virtualNetworks/subramanvnet"),
				},
				UseRemoteGateways: to.Ptr(false),
			},
		},
		&armdatabricks.VNetPeeringClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceVirtualNetworkPeeringCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceVirtualNetworkPeeringCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdatabricks.VirtualNetworkPeering{
			Name: to.Ptr("vNetPeeringTest"),
			ID:   to.Ptr("/subscriptions/0140911e-1040-48da-8bc9-b99fb3dd88a6/resourceGroups/subramantest/providers/Microsoft.Databricks/workspaces/adbworkspace/virtualNetworkPeerings/vNetPeeringTest"),
			Properties: &armdatabricks.VirtualNetworkPeeringPropertiesFormat{
				AllowForwardedTraffic:     to.Ptr(false),
				AllowGatewayTransit:       to.Ptr(false),
				AllowVirtualNetworkAccess: to.Ptr(true),
				DatabricksAddressSpace: &armdatabricks.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.139.0.0/16")},
				},
				DatabricksVirtualNetwork: &armdatabricks.VirtualNetworkPeeringPropertiesFormatDatabricksVirtualNetwork{
					ID: to.Ptr("/subscriptions/0140911e-1040-48da-8bc9-b99fb3dd88a6/resourceGroups/databricks-rg-adbworkspace-2jsxhmzoyooxm/providers/Microsoft.Network/virtualNetworks/workers-vnet"),
				},
				PeeringState:      to.Ptr(armdatabricks.PeeringStateInitiated),
				ProvisioningState: to.Ptr(armdatabricks.PeeringProvisioningStateSucceeded),
				RemoteAddressSpace: &armdatabricks.AddressSpace{
					AddressPrefixes: []*string{
						to.Ptr("10.203.0.0/16")},
				},
				RemoteVirtualNetwork: &armdatabricks.VirtualNetworkPeeringPropertiesFormatRemoteVirtualNetwork{
					ID: to.Ptr("/subscriptions/0140911e-1040-48da-8bc9-b99fb3dd88a6/resourceGroups/subramantest/providers/Microsoft.Network/virtualNetworks/subramanvnet"),
				},
				UseRemoteGateways: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkPeering) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkPeering)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceVirtualNetworkPeeringCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVNetPeering_ListByWorkspace(t *testing.T) {
	// From example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceVirtualNetPeeringList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all vNet Peerings for the workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdatabricks.NewVNetPeeringClient("subid", cred, &options)
	pager := client.ListByWorkspace("rg",
		"myWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceVirtualNetPeeringList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdatabricks.VirtualNetworkPeeringList{
			Value: []*armdatabricks.VirtualNetworkPeering{
				{
					Name: to.Ptr("vNetPeeringTest"),
					ID:   to.Ptr("/subscriptions/0140911e-1040-48da-8bc9-b99fb3dd88a6/resourceGroups/subramantest/providers/Microsoft.Databricks/workspaces/adbworkspace/virtualNetworkPeerings/vNetPeeringTest"),
					Properties: &armdatabricks.VirtualNetworkPeeringPropertiesFormat{
						AllowForwardedTraffic:     to.Ptr(false),
						AllowGatewayTransit:       to.Ptr(false),
						AllowVirtualNetworkAccess: to.Ptr(true),
						DatabricksAddressSpace: &armdatabricks.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("10.139.0.0/16")},
						},
						DatabricksVirtualNetwork: &armdatabricks.VirtualNetworkPeeringPropertiesFormatDatabricksVirtualNetwork{
							ID: to.Ptr("/subscriptions/0140911e-1040-48da-8bc9-b99fb3dd88a6/resourceGroups/databricks-rg-adbworkspace-2jsxhmzoyooxm/providers/Microsoft.Network/virtualNetworks/workers-vnet"),
						},
						PeeringState:      to.Ptr(armdatabricks.PeeringStateInitiated),
						ProvisioningState: to.Ptr(armdatabricks.PeeringProvisioningStateSucceeded),
						RemoteAddressSpace: &armdatabricks.AddressSpace{
							AddressPrefixes: []*string{
								to.Ptr("10.203.0.0/16")},
						},
						RemoteVirtualNetwork: &armdatabricks.VirtualNetworkPeeringPropertiesFormatRemoteVirtualNetwork{
							ID: to.Ptr("/subscriptions/0140911e-1040-48da-8bc9-b99fb3dd88a6/resourceGroups/subramantest/providers/Microsoft.Network/virtualNetworks/subramanvnet"),
						},
						UseRemoteGateways: to.Ptr(false),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkPeeringList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkPeeringList)
			t.Fatalf("Mock response is not equal to example response for example specification/databricks/resource-manager/Microsoft.Databricks/preview/2021-04-01-preview/examples/WorkspaceVirtualNetPeeringList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
