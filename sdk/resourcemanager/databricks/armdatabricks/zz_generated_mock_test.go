//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatabricks

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestWorkspaces_Get(t *testing.T) {
	// From example Get a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myWorkspace",
		&WorkspacesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}

	// From example Get a workspace with custom parameters
	res, err = client.Get(ctx,
		"rg",
		"myWorkspace",
		&WorkspacesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestWorkspaces_Delete(t *testing.T) {
	// From example Delete a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg",
		"myWorkspace",
		&WorkspacesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaces_CreateOrUpdate(t *testing.T) {
	// From example Create a workspace which is ready for Customer-Managed Key (CMK) encryption
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg",
		"myWorkspace",
		Workspace{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus"),
			},
			Properties: &WorkspaceProperties{
				ManagedResourceGroupID: to.StringPtr("/subscriptions/subid/resourceGroups/myManagedRG"),
				Parameters: &WorkspaceCustomParameters{
					PrepareEncryption: &WorkspaceCustomBooleanParameter{
						Value: to.BoolPtr(true),
					},
				},
			},
		},
		&WorkspacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}

	// From example Create or update workspace
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg",
		"myWorkspace",
		Workspace{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus"),
			},
			Properties: &WorkspaceProperties{
				ManagedResourceGroupID: to.StringPtr("/subscriptions/subid/resourceGroups/myManagedRG"),
			},
		},
		&WorkspacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}

	// From example Create or update workspace with custom parameters
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg",
		"myWorkspace",
		Workspace{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus"),
			},
			Properties: &WorkspaceProperties{
				ManagedResourceGroupID: to.StringPtr("/subscriptions/subid/resourceGroups/myManagedRG"),
				Parameters: &WorkspaceCustomParameters{
					CustomPrivateSubnetName: &WorkspaceCustomStringParameter{
						Value: to.StringPtr("myPrivateSubnet"),
					},
					CustomPublicSubnetName: &WorkspaceCustomStringParameter{
						Value: to.StringPtr("myPublicSubnet"),
					},
					CustomVirtualNetworkID: &WorkspaceCustomStringParameter{
						Value: to.StringPtr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/myNetwork"),
					},
				},
			},
		},
		&WorkspacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}

	// From example Enable Customer-Managed Key (CMK) encryption on a workspace which is prepared for encryption
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg",
		"myWorkspace",
		Workspace{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus"),
			},
			Properties: &WorkspaceProperties{
				ManagedResourceGroupID: to.StringPtr("/subscriptions/subid/resourceGroups/myManagedRG"),
				Parameters: &WorkspaceCustomParameters{
					Encryption: &WorkspaceEncryptionParameter{
						Value: &Encryption{
							KeyName:     to.StringPtr("myKeyName"),
							KeySource:   KeySourceMicrosoftKeyvault.ToPtr(),
							KeyVaultURI: to.StringPtr("https://myKeyVault.vault.azure.net/"),
							KeyVersion:  to.StringPtr("00000000000000000000000000000000"),
						},
					},
					PrepareEncryption: &WorkspaceCustomBooleanParameter{
						Value: to.BoolPtr(true),
					},
				},
			},
		},
		&WorkspacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}

	// From example Revert Customer-Managed Key (CMK) encryption to Microsoft Managed Keys encryption on a workspace
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg",
		"myWorkspace",
		Workspace{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus"),
			},
			Properties: &WorkspaceProperties{
				ManagedResourceGroupID: to.StringPtr("/subscriptions/subid/resourceGroups/myManagedRG"),
				Parameters: &WorkspaceCustomParameters{
					Encryption: &WorkspaceEncryptionParameter{
						Value: &Encryption{
							KeySource: KeySourceDefault.ToPtr(),
						},
					},
				},
			},
		},
		&WorkspacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestWorkspaces_Update(t *testing.T) {
	// From example Update a workspace's tags.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"subid")
	poller, err := client.BeginUpdate(ctx,
		"rg",
		"myWorkspace",
		WorkspaceUpdate{
			Tags: map[string]*string{
				"mytag1": to.StringPtr("myvalue1"),
			},
		},
		&WorkspacesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestWorkspaces_ListByResourceGroup(t *testing.T) {
	// From example Lists workspaces
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"subid")
	pager := client.ListByResourceGroup("rg",
		&WorkspacesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Workspace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Workspace.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaces_ListBySubscription(t *testing.T) {
	// From example Lists workspaces
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"subid")
	pager := client.ListBySubscription(&WorkspacesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Workspace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Workspace.ID should not be nil!")
			}
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example Operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example List private link resources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"11111111-1111-1111-1111-111111111111")
	pager := client.List("myResourceGroup",
		"myWorkspace",
		&PrivateLinkResourcesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("GroupIDInformation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("GroupIDInformation.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example Get a private link resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"11111111-1111-1111-1111-111111111111")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myWorkspace",
		"databricks_ui_api",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GroupIDInformation.ID == nil {
		t.Fatal("GroupIDInformation.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example List private endpoint connections
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"11111111-1111-1111-1111-111111111111")
	pager := client.List("myResourceGroup",
		"myWorkspace",
		&PrivateEndpointConnectionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example Get a private endpoint connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"11111111-1111-1111-1111-111111111111")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myWorkspace",
		"myWorkspace.23456789-1111-1111-1111-111111111111",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Create(t *testing.T) {
	// From example Update a private endpoint connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"11111111-1111-1111-1111-111111111111")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myWorkspace",
		"myWorkspace.23456789-1111-1111-1111-111111111111",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Approved by databricksadmin@contoso.com"),
					Status:      PrivateLinkServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example Remove a private endpoint connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"11111111-1111-1111-1111-111111111111")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myWorkspace",
		"myWorkspace.23456789-1111-1111-1111-111111111111",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestOutboundNetworkDependenciesEndpoints_List(t *testing.T) {
	// From example List OutboundNetworkDependenciesEndpoints by Workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOutboundNetworkDependenciesEndpointsClient(con,
		"11111111-1111-1111-1111-111111111111")
	_, err := client.List(ctx,
		"myResourceGroup",
		"myWorkspace",
		&OutboundNetworkDependenciesEndpointsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestVNetPeering_Get(t *testing.T) {
	// From example Get a workspace with vNet Peering Configured
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVNetPeeringClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg",
		"myWorkspace",
		"vNetPeering",
		&VNetPeeringGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkPeering.ID == nil {
		t.Fatal("VirtualNetworkPeering.ID should not be nil!")
	}
}

func TestVNetPeering_Delete(t *testing.T) {
	// From example Delete a workspace vNet Peering
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVNetPeeringClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg",
		"myWorkspace",
		"vNetPeering",
		&VNetPeeringBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVNetPeering_CreateOrUpdate(t *testing.T) {
	// From example Create vNet Peering for Workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVNetPeeringClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg",
		"myWorkspace",
		"vNetPeeringTest",
		nil,
		&VNetPeeringBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetworkPeering.ID == nil {
		t.Fatal("VirtualNetworkPeering.ID should not be nil!")
	}
}

func TestVNetPeering_ListByWorkspace(t *testing.T) {
	// From example List all vNet Peerings for the workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVNetPeeringClient(con,
		"subid")
	pager := client.ListByWorkspace("rg",
		"myWorkspace",
		&VNetPeeringListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetworkPeering.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetworkPeering.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
