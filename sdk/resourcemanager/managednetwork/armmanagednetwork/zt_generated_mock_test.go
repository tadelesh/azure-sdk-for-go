//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanagednetwork_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/managednetwork/armmanagednetwork"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestManagedNetworks_Get(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedNetworksGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewManagedNetworksClient("subscriptionA", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myManagedNetwork",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagednetwork.ManagedNetwork{
			Name:     to.Ptr("myManagedNetwork"),
			Type:     to.Ptr("Microsoft.ManagedNetwork/managedNetworks"),
			ID:       to.Ptr("/subscriptions/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork"),
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Properties: &armmanagednetwork.Properties{
				Etag:              to.Ptr("sadf-asdf-asdf-asdf"),
				ProvisioningState: to.Ptr(armmanagednetwork.ProvisioningStateSucceeded),
				Connectivity: &armmanagednetwork.ConnectivityCollection{
					Groups:   []*armmanagednetwork.Group{},
					Peerings: []*armmanagednetwork.PeeringPolicy{},
				},
				Scope: &armmanagednetwork.Scope{
					ManagementGroups: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0001-0000-0000-000000000000"),
						},
						{
							ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0002-0000-0000-000000000000"),
						}},
					Subnets: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetC/subnets/subnetA"),
						},
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetC/subnets/subnetB"),
						}},
					Subscriptions: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("subscriptionA"),
						},
						{
							ID: to.Ptr("subscriptionB"),
						}},
					VirtualNetworks: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetA"),
						},
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetB"),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedNetworks_CreateOrUpdate(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedNetworksPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewManagedNetworksClient("subscriptionA", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myManagedNetwork",
		armmanagednetwork.ManagedNetwork{
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Properties: &armmanagednetwork.Properties{
				Scope: &armmanagednetwork.Scope{
					ManagementGroups: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0001-0000-0000-000000000000"),
						},
						{
							ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0002-0000-0000-000000000000"),
						}},
					Subnets: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetC/subnets/subnetA"),
						},
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetC/subnets/subnetB"),
						}},
					Subscriptions: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("subscriptionA"),
						},
						{
							ID: to.Ptr("subscriptionB"),
						}},
					VirtualNetworks: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetA"),
						},
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetB"),
						}},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagednetwork.ManagedNetwork{
			Name:     to.Ptr("myManagedNetwork"),
			Type:     to.Ptr("Microsoft.ManagedNetwork/managedNetworks"),
			ID:       to.Ptr("/subscriptions/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork"),
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Properties: &armmanagednetwork.Properties{
				Etag:              to.Ptr("sadf-asdf-asdf-asdf"),
				ProvisioningState: to.Ptr(armmanagednetwork.ProvisioningStateSucceeded),
				Connectivity: &armmanagednetwork.ConnectivityCollection{
					Groups:   []*armmanagednetwork.Group{},
					Peerings: []*armmanagednetwork.PeeringPolicy{},
				},
				Scope: &armmanagednetwork.Scope{
					ManagementGroups: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0001-0000-0000-000000000000"),
						},
						{
							ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0002-0000-0000-000000000000"),
						}},
					Subnets: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetC/subnets/subnetA"),
						},
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetC/subnets/subnetB"),
						}},
					Subscriptions: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("subscriptionA"),
						},
						{
							ID: to.Ptr("subscriptionB"),
						}},
					VirtualNetworks: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetA"),
						},
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetB"),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedNetworks_Delete(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedNetworksDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewManagedNetworksClient("subscriptionA", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myManagedNetwork",
		&armmanagednetwork.ManagedNetworksClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksDelete.json: %v", err)
	}
}

func TestManagedNetworks_Update(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedNetworksPatch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewManagedNetworksClient("subscriptionA", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myManagedNetwork",
		armmanagednetwork.Update{
			Tags: map[string]*string{},
		},
		&armmanagednetwork.ManagedNetworksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksPatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagednetwork.ManagedNetwork{
			Name:     to.Ptr("myManagedNetwork"),
			Type:     to.Ptr("Microsoft.ManagedNetwork/managedNetworks"),
			ID:       to.Ptr("/subscriptions/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork"),
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Properties: &armmanagednetwork.Properties{
				Etag:              to.Ptr("sadf-asdf-asdf-asdf"),
				ProvisioningState: to.Ptr(armmanagednetwork.ProvisioningStateSucceeded),
				Connectivity: &armmanagednetwork.ConnectivityCollection{
					Groups:   []*armmanagednetwork.Group{},
					Peerings: []*armmanagednetwork.PeeringPolicy{},
				},
				Scope: &armmanagednetwork.Scope{
					ManagementGroups: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0001-0000-0000-000000000000"),
						},
						{
							ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0002-0000-0000-000000000000"),
						}},
					Subnets: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetC/subnets/subnetA"),
						},
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetC/subnets/subnetB"),
						}},
					Subscriptions: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("subscriptionA"),
						},
						{
							ID: to.Ptr("subscriptionB"),
						}},
					VirtualNetworks: []*armmanagednetwork.ResourceID{
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetA"),
						},
						{
							ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetB"),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedNetworks_ListByResourceGroup(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedNetworksListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewManagedNetworksClient("subscriptionA", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		&armmanagednetwork.ManagedNetworksClientListByResourceGroupOptions{Top: nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagednetwork.ListResult{
			Value: []*armmanagednetwork.ManagedNetwork{
				{
					Name:     to.Ptr("myManagedNetwork"),
					Type:     to.Ptr("Microsoft.ManagedNetwork/managedNetworks"),
					ID:       to.Ptr("/subscriptions/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					Properties: &armmanagednetwork.Properties{
						Etag:              to.Ptr("sadf-asdf-asdf-asdf"),
						ProvisioningState: to.Ptr(armmanagednetwork.ProvisioningStateSucceeded),
						Connectivity: &armmanagednetwork.ConnectivityCollection{
							Groups:   []*armmanagednetwork.Group{},
							Peerings: []*armmanagednetwork.PeeringPolicy{},
						},
						Scope: &armmanagednetwork.Scope{
							ManagementGroups: []*armmanagednetwork.ResourceID{
								{
									ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0001-0000-0000-000000000000"),
								},
								{
									ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0002-0000-0000-000000000000"),
								}},
							Subnets: []*armmanagednetwork.ResourceID{
								{
									ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetC/subnets/subnetA"),
								},
								{
									ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetC/subnets/subnetB"),
								}},
							Subscriptions: []*armmanagednetwork.ResourceID{
								{
									ID: to.Ptr("subscriptionA"),
								},
								{
									ID: to.Ptr("subscriptionB"),
								}},
							VirtualNetworks: []*armmanagednetwork.ResourceID{
								{
									ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetA"),
								},
								{
									ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetB"),
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedNetworks_ListBySubscription(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedNetworksListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewManagedNetworksClient("subscriptionA", cred, &options)
	pager := client.ListBySubscription(&armmanagednetwork.ManagedNetworksClientListBySubscriptionOptions{Top: nil,
		Skiptoken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagednetwork.ListResult{
			Value: []*armmanagednetwork.ManagedNetwork{
				{
					Name:     to.Ptr("myManagedNetwork"),
					Type:     to.Ptr("Microsoft.ManagedNetwork/managedNetworks"),
					ID:       to.Ptr("/subscriptions/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					Properties: &armmanagednetwork.Properties{
						Etag:              to.Ptr("sadf-asdf-asdf-asdf"),
						ProvisioningState: to.Ptr(armmanagednetwork.ProvisioningStateSucceeded),
						Connectivity: &armmanagednetwork.ConnectivityCollection{
							Groups:   []*armmanagednetwork.Group{},
							Peerings: []*armmanagednetwork.PeeringPolicy{},
						},
						Scope: &armmanagednetwork.Scope{
							ManagementGroups: []*armmanagednetwork.ResourceID{
								{
									ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0001-0000-0000-000000000000"),
								},
								{
									ID: to.Ptr("/providers/Microsoft.Management/managementGroups/20000000-0002-0000-0000-000000000000"),
								}},
							Subnets: []*armmanagednetwork.ResourceID{
								{
									ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetC/subnets/subnetA"),
								},
								{
									ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetC/subnets/subnetB"),
								}},
							Subscriptions: []*armmanagednetwork.ResourceID{
								{
									ID: to.Ptr("subscriptionA"),
								},
								{
									ID: to.Ptr("subscriptionB"),
								}},
							VirtualNetworks: []*armmanagednetwork.ResourceID{
								{
									ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetA"),
								},
								{
									ID: to.Ptr("/subscriptions/subscriptionC/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetB"),
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetwork/ManagedNetworksListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScopeAssignments_Get(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ScopeAssignment/ScopeAssignmentsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScopeAssignmentsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewScopeAssignmentsClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/subscriptionC",
		"subscriptionCAssignment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ScopeAssignment/ScopeAssignmentsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagednetwork.ScopeAssignment{
			Name: to.Ptr("subscriptionCAssignment"),
			Type: to.Ptr("Microsoft.ManagedNetwork/scopeAssignment"),
			ID:   to.Ptr("/subscriptions/subscriptionC/providers/Microsoft.ManagedNetwork/scopeAssignments/subscriptionCAssignment"),
			Properties: &armmanagednetwork.ScopeAssignmentProperties{
				AssignedManagedNetwork: to.Ptr("/subscriptions/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScopeAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScopeAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ScopeAssignment/ScopeAssignmentsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScopeAssignments_CreateOrUpdate(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ScopeAssignment/ScopeAssignmentsPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScopeAssignmentsPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewScopeAssignmentsClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"subscriptions/subscriptionC",
		"subscriptionCAssignment",
		armmanagednetwork.ScopeAssignment{
			Properties: &armmanagednetwork.ScopeAssignmentProperties{
				AssignedManagedNetwork: to.Ptr("/subscriptions/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ScopeAssignment/ScopeAssignmentsPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagednetwork.ScopeAssignment{
			Name: to.Ptr("subscriptionCAssignment"),
			Type: to.Ptr("Microsoft.ManagedNetwork/scopeAssignment"),
			ID:   to.Ptr("/subscriptions/subscriptionC/providers/Microsoft.ManagedNetwork/scopeAssignments/subscriptionCAssignment"),
			Properties: &armmanagednetwork.ScopeAssignmentProperties{
				Etag:                   to.Ptr("sadf-asdf-asdf-asdf"),
				ProvisioningState:      to.Ptr(armmanagednetwork.ProvisioningStateSucceeded),
				AssignedManagedNetwork: to.Ptr("/subscriptions/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScopeAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScopeAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ScopeAssignment/ScopeAssignmentsPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestScopeAssignments_Delete(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ScopeAssignment/ScopeAssignmentsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScopeAssignmentsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewScopeAssignmentsClient(cred, &options)
	_, err := client.Delete(ctx,
		"subscriptions/subscriptionC",
		"subscriptionCAssignment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ScopeAssignment/ScopeAssignmentsDelete.json: %v", err)
	}
}

func TestScopeAssignments_List(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ScopeAssignment/ScopeAssignmentsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScopeAssignmentsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewScopeAssignmentsClient(cred, &options)
	pager := client.List("subscriptions/subscriptionC",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ScopeAssignment/ScopeAssignmentsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagednetwork.ScopeAssignmentListResult{
			Value: []*armmanagednetwork.ScopeAssignment{
				{
					Name: to.Ptr("subscriptionCAssignemnt"),
					Type: to.Ptr("Microsoft.ManagedNetwork/scopeAssignment"),
					ID:   to.Ptr("/subscriptions/subscriptionC/providers/Microsoft.ManagedNetwork/scopeAssignments/subscriptionCAssignment"),
					Properties: &armmanagednetwork.ScopeAssignmentProperties{
						Etag:                   to.Ptr("sadf-asdf-asdf-asdf"),
						ProvisioningState:      to.Ptr(armmanagednetwork.ProvisioningStateSucceeded),
						AssignedManagedNetwork: to.Ptr("/subscriptions/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ScopeAssignmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ScopeAssignmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ScopeAssignment/ScopeAssignmentsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedNetworkGroups_Get(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkGroup/ManagedNetworkGroupsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementNetworkGroupsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewGroupsClient("subscriptionA", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myManagedNetwork",
		"myManagedNetworkGroup1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkGroup/ManagedNetworkGroupsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagednetwork.Group{
			Name: to.Ptr("myManagedNetworkGroup1"),
			Type: to.Ptr("Microsoft.ManagedNetwork/managedNetworkGroups"),
			ID:   to.Ptr("/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork/managedNetworkGroups/myManagedNetworkGroup1"),
			Properties: &armmanagednetwork.GroupProperties{
				Etag:              to.Ptr("asdf-asdf-asdf1"),
				ProvisioningState: to.Ptr(armmanagednetwork.ProvisioningStateSucceeded),
				ManagementGroups:  []*armmanagednetwork.ResourceID{},
				Subnets: []*armmanagednetwork.ResourceID{
					{
						ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetA/subnets/subnetA"),
					}},
				Subscriptions: []*armmanagednetwork.ResourceID{},
				VirtualNetworks: []*armmanagednetwork.ResourceID{
					{
						ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetA"),
					},
					{
						ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetB"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Group) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Group)
			t.Fatalf("Mock response is not equal to example response for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkGroup/ManagedNetworkGroupsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedNetworkGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkGroup/ManagedNetworkGroupsPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementNetworkGroupsPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewGroupsClient("subscriptionA", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myManagedNetwork",
		"myManagedNetworkGroup1",
		armmanagednetwork.Group{
			Properties: &armmanagednetwork.GroupProperties{
				ManagementGroups: []*armmanagednetwork.ResourceID{},
				Subnets: []*armmanagednetwork.ResourceID{
					{
						ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetA/subnets/subnetA"),
					}},
				Subscriptions: []*armmanagednetwork.ResourceID{},
				VirtualNetworks: []*armmanagednetwork.ResourceID{
					{
						ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetA"),
					},
					{
						ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetB"),
					}},
			},
		},
		&armmanagednetwork.GroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkGroup/ManagedNetworkGroupsPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkGroup/ManagedNetworkGroupsPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagednetwork.Group{
			Name: to.Ptr("myManagedNetworkGroup1"),
			Type: to.Ptr("Microsoft.ManagedNetwork/managedNetworkGroups"),
			ID:   to.Ptr("/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork/managedNetworkGroups/myManagedNetworkGroup1"),
			Properties: &armmanagednetwork.GroupProperties{
				Etag:              to.Ptr("asdf-asdf-asdf1"),
				ProvisioningState: to.Ptr(armmanagednetwork.ProvisioningStateSucceeded),
				ManagementGroups:  []*armmanagednetwork.ResourceID{},
				Subnets: []*armmanagednetwork.ResourceID{
					{
						ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetA/subnets/subnetA"),
					}},
				Subscriptions: []*armmanagednetwork.ResourceID{},
				VirtualNetworks: []*armmanagednetwork.ResourceID{
					{
						ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetA"),
					},
					{
						ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetB"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Group) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Group)
			t.Fatalf("Mock response is not equal to example response for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkGroup/ManagedNetworkGroupsPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedNetworkGroups_Delete(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkGroup/ManagedNetworkGroupsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementNetworkGroupsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewGroupsClient("subscriptionA", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myManagedNetwork",
		"myManagedNetworkGroup1",
		&armmanagednetwork.GroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkGroup/ManagedNetworkGroupsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkGroup/ManagedNetworkGroupsDelete.json: %v", err)
	}
}

func TestManagedNetworkGroups_ListByManagedNetwork(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkGroup/ManagedNetworkGroupsListByManagedNetwork.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedNetworksGroupsListByManagedNetwork"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewGroupsClient("subscriptionA", cred, &options)
	pager := client.ListByManagedNetwork("myResourceGroup",
		"myManagedNetwork",
		&armmanagednetwork.GroupsClientListByManagedNetworkOptions{Top: nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkGroup/ManagedNetworkGroupsListByManagedNetwork.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagednetwork.GroupListResult{
			Value: []*armmanagednetwork.Group{
				{
					Name: to.Ptr("myManagedNetworkGroup1"),
					Type: to.Ptr("Microsoft.ManagedNetwork/managedNetworkGroups"),
					ID:   to.Ptr("/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork/managedNetworkGroups/myManagedNetworkGroup1"),
					Properties: &armmanagednetwork.GroupProperties{
						Etag:              to.Ptr("asdf-asdf-asdf1"),
						ProvisioningState: to.Ptr(armmanagednetwork.ProvisioningStateSucceeded),
						ManagementGroups:  []*armmanagednetwork.ResourceID{},
						Subnets: []*armmanagednetwork.ResourceID{
							{
								ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetA/subnets/subnetA"),
							}},
						Subscriptions: []*armmanagednetwork.ResourceID{},
						VirtualNetworks: []*armmanagednetwork.ResourceID{
							{
								ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetA"),
							},
							{
								ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/VnetB"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkGroup/ManagedNetworkGroupsListByManagedNetwork.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedNetworkPeeringPolicies_Get(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkPeeringPolicy/ManagedNetworkPeeringPoliciesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedNetworkPeeringPoliciesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewPeeringPoliciesClient("subscriptionA", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myManagedNetwork",
		"myHubAndSpoke",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkPeeringPolicy/ManagedNetworkPeeringPoliciesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagednetwork.PeeringPolicy{
			Name: to.Ptr("myHubAndSpoke"),
			Type: to.Ptr("Microsoft.ManagedNetwork/peeringPolicies"),
			ID:   to.Ptr("/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork/managedNetworkPeeringPolicies/myHubAndSpoke"),
			Properties: &armmanagednetwork.PeeringPolicyProperties{
				Etag:              to.Ptr("asdf-asdf-asdf2"),
				ProvisioningState: to.Ptr(armmanagednetwork.ProvisioningStateSucceeded),
				Type:              to.Ptr(armmanagednetwork.TypeHubAndSpokeTopology),
				Hub: &armmanagednetwork.ResourceID{
					ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myHubVnet"),
				},
				Spokes: []*armmanagednetwork.ResourceID{
					{
						ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork/managedNetworkGroups/myManagedNetworkGroup1"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PeeringPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PeeringPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkPeeringPolicy/ManagedNetworkPeeringPoliciesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedNetworkPeeringPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkPeeringPolicy/ManagedNetworkPeeringPoliciesPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedNetworkPeeringPoliciesPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewPeeringPoliciesClient("subscriptionA", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myManagedNetwork",
		"myHubAndSpoke",
		armmanagednetwork.PeeringPolicy{
			Properties: &armmanagednetwork.PeeringPolicyProperties{
				Type: to.Ptr(armmanagednetwork.TypeHubAndSpokeTopology),
				Hub: &armmanagednetwork.ResourceID{
					ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myHubVnet"),
				},
				Spokes: []*armmanagednetwork.ResourceID{
					{
						ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork/managedNetworkGroups/myManagedNetworkGroup1"),
					}},
			},
		},
		&armmanagednetwork.PeeringPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkPeeringPolicy/ManagedNetworkPeeringPoliciesPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkPeeringPolicy/ManagedNetworkPeeringPoliciesPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagednetwork.PeeringPolicy{
			Name: to.Ptr("myHubAndSpoke"),
			Type: to.Ptr("Microsoft.ManagedNetwork/peeringPolicies"),
			ID:   to.Ptr("/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork/managedNetworkPeeringPolicies/myHubAndSpoke"),
			Properties: &armmanagednetwork.PeeringPolicyProperties{
				Etag:              to.Ptr("asdf-asdf-asdf2"),
				ProvisioningState: to.Ptr(armmanagednetwork.ProvisioningStateSucceeded),
				Type:              to.Ptr(armmanagednetwork.TypeHubAndSpokeTopology),
				Hub: &armmanagednetwork.ResourceID{
					ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myHubVnet"),
				},
				Spokes: []*armmanagednetwork.ResourceID{
					{
						ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork/managedNetworkGroups/myManagedNetworkGroup1"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PeeringPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PeeringPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkPeeringPolicy/ManagedNetworkPeeringPoliciesPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagedNetworkPeeringPolicies_Delete(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkPeeringPolicy/ManagedNetworkPeeringPoliciesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedNetworkPeeringPoliciesDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewPeeringPoliciesClient("subscriptionA", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myManagedNetwork",
		"myHubAndSpoke",
		&armmanagednetwork.PeeringPoliciesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkPeeringPolicy/ManagedNetworkPeeringPoliciesDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkPeeringPolicy/ManagedNetworkPeeringPoliciesDelete.json: %v", err)
	}
}

func TestManagedNetworkPeeringPolicies_ListByManagedNetwork(t *testing.T) {
	// From example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkPeeringPolicy/ManagedNetworkPeeringPoliciesListByManagedNetwork.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagedNetworkPeeringPoliciesListByManagedNetwork"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagednetwork.NewPeeringPoliciesClient("subscriptionA", cred, &options)
	pager := client.ListByManagedNetwork("myResourceGroup",
		"myManagedNetwork",
		&armmanagednetwork.PeeringPoliciesClientListByManagedNetworkOptions{Top: nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkPeeringPolicy/ManagedNetworkPeeringPoliciesListByManagedNetwork.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagednetwork.PeeringPolicyListResult{
			Value: []*armmanagednetwork.PeeringPolicy{
				{
					Name: to.Ptr("myHubAndSpoke"),
					Type: to.Ptr("Microsoft.ManagedNetwork/peeringPolicies"),
					ID:   to.Ptr("/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork/managedNetworkPeeringPolicies/myHubAndSpoke"),
					Properties: &armmanagednetwork.PeeringPolicyProperties{
						Etag:              to.Ptr("asdf-asdf-asdf2"),
						ProvisioningState: to.Ptr(armmanagednetwork.ProvisioningStateSucceeded),
						Type:              to.Ptr(armmanagednetwork.TypeHubAndSpokeTopology),
						Hub: &armmanagednetwork.ResourceID{
							ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myHubVnet"),
						},
						Spokes: []*armmanagednetwork.ResourceID{
							{
								ID: to.Ptr("/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.ManagedNetwork/managedNetworks/myManagedNetwork/managedNetworkGroups/myManagedNetworkGroup1"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PeeringPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PeeringPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/managednetwork/resource-manager/Microsoft.ManagedNetwork/preview/2019-06-01-preview/examples/ManagedNetworkPeeringPolicy/ManagedNetworkPeeringPoliciesListByManagedNetwork.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
