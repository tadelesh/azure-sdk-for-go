//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmediaservices

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example List Operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	_, err := client.List(ctx,
		&OperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMediaservices_List(t *testing.T) {
	// From example List all Media Services accounts
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMediaservicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("contoso",
		&MediaservicesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("MediaService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("MediaService.ID should not be nil!")
			}
		}
	}
}

func TestMediaservices_Get(t *testing.T) {
	// From example Get a Media Services account by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMediaservicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"contoso",
		"contosotv",
		&MediaservicesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MediaService.ID == nil {
		t.Fatal("MediaService.ID should not be nil!")
	}
}

func TestMediaservices_CreateOrUpdate(t *testing.T) {
	// From example Create a Media Services account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMediaservicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.CreateOrUpdate(ctx,
		"contoso",
		"contososports",
		MediaService{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("South Central US"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
					"key2": to.StringPtr("value2"),
				},
			},
			Identity: &MediaServiceIdentity{
				Type: to.StringPtr("UserAssigned"),
				UserAssignedIdentities: map[string]*UserAssignedManagedIdentity{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &UserAssignedManagedIdentity{},
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2": &UserAssignedManagedIdentity{},
				},
			},
			Properties: &MediaServiceProperties{
				Encryption: &AccountEncryption{
					Type: AccountEncryptionKeyTypeCustomerKey.ToPtr(),
					Identity: &ResourceIdentity{
						UseSystemAssignedIdentity: to.BoolPtr(false),
						UserAssignedIdentity:      to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1"),
					},
					KeyVaultProperties: &KeyVaultProperties{
						KeyIdentifier: to.StringPtr("https://keyvault.vault.azure.net/keys/key1"),
					},
				},
				StorageAccounts: []*StorageAccount{
					{
						Type: StorageAccountTypePrimary.ToPtr(),
						ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Storage/storageAccounts/contososportsstore"),
						Identity: &ResourceIdentity{
							UseSystemAssignedIdentity: to.BoolPtr(false),
							UserAssignedIdentity:      to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1"),
						},
					}},
				StorageAuthentication: StorageAuthenticationManagedIdentity.ToPtr(),
			},
		},
		&MediaservicesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MediaService.ID == nil {
		t.Fatal("MediaService.ID should not be nil!")
	}
}

func TestMediaservices_Delete(t *testing.T) {
	// From example Delete a Media Services account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMediaservicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.Delete(ctx,
		"contoso",
		"contososports",
		&MediaservicesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMediaservices_Update(t *testing.T) {
	// From example Update a Media Services accounts
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMediaservicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Update(ctx,
		"contoso",
		"contososports",
		MediaServiceUpdate{
			Tags: map[string]*string{
				"key1": to.StringPtr("value3"),
			},
		},
		&MediaservicesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MediaService.ID == nil {
		t.Fatal("MediaService.ID should not be nil!")
	}
}

func TestMediaservices_SyncStorageKeys(t *testing.T) {
	// From example Synchronizes Storage Account Keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMediaservicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.SyncStorageKeys(ctx,
		"contoso",
		"contososports",
		SyncStorageKeysInput{
			ID: to.StringPtr("contososportsstore"),
		},
		&MediaservicesSyncStorageKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMediaservices_ListEdgePolicies(t *testing.T) {
	// From example List the media edge policies.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMediaservicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.ListEdgePolicies(ctx,
		"contoso",
		"contososports",
		ListEdgePoliciesInput{
			DeviceID: to.StringPtr("contosiothubhost_contosoiotdevice"),
		},
		&MediaservicesListEdgePoliciesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMediaservices_ListBySubscription(t *testing.T) {
	// From example List all Media Services accounts
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMediaservicesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListBySubscription(&MediaservicesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("MediaService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("MediaService.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example Get list of all group IDs.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.List(ctx,
		"contoso",
		"contososports",
		&PrivateLinkResourcesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example Get details of a group ID.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"contoso",
		"contososports",
		"keydelivery",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example Get all private endpoint connections.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.List(ctx,
		"contoso",
		"contososports",
		&PrivateEndpointConnectionsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example Get private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"contoso",
		"contososports",
		"connectionName1",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example Update private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.CreateOrUpdate(ctx,
		"contoso",
		"contososports",
		"connectionName1",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Test description."),
					Status:      PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example Delete private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.Delete(ctx,
		"contoso",
		"contososports",
		"connectionName1",
		&PrivateEndpointConnectionsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLocations_CheckNameAvailability(t *testing.T) {
	// From example Check Name Availability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocationsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.CheckNameAvailability(ctx,
		"japanwest",
		CheckNameAvailabilityInput{
			Name: to.StringPtr("contosotv"),
			Type: to.StringPtr("videoAnalyzers"),
		},
		&LocationsCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccountFilters_List(t *testing.T) {
	// From example List all Account Filters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountFiltersClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("contoso",
		"contosomedia",
		&AccountFiltersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AccountFilter.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AccountFilter.ID should not be nil!")
			}
		}
	}
}

func TestAccountFilters_Get(t *testing.T) {
	// From example Get an Account Filter by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountFiltersClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"contoso",
		"contosomedia",
		"accountFilterWithTrack",
		&AccountFiltersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccountFilter.ID == nil {
		t.Fatal("AccountFilter.ID should not be nil!")
	}
}

func TestAccountFilters_CreateOrUpdate(t *testing.T) {
	// From example Create an Account Filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountFiltersClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.CreateOrUpdate(ctx,
		"contoso",
		"contosomedia",
		"newAccountFilter",
		AccountFilter{
			Properties: &MediaFilterProperties{
				FirstQuality: &FirstQuality{
					Bitrate: to.Int32Ptr(128000),
				},
				PresentationTimeRange: &PresentationTimeRange{
					EndTimestamp:               to.Int64Ptr(170000000),
					ForceEndTimestamp:          to.BoolPtr(false),
					LiveBackoffDuration:        to.Int64Ptr(0),
					PresentationWindowDuration: to.Int64Ptr(9223372036854775000),
					StartTimestamp:             to.Int64Ptr(0),
					Timescale:                  to.Int64Ptr(10000000),
				},
				Tracks: []*FilterTrackSelection{
					{
						TrackSelections: []*FilterTrackPropertyCondition{
							{
								Operation: FilterTrackPropertyCompareOperationEqual.ToPtr(),
								Property:  FilterTrackPropertyTypeType.ToPtr(),
								Value:     to.StringPtr("Audio"),
							},
							{
								Operation: FilterTrackPropertyCompareOperationNotEqual.ToPtr(),
								Property:  FilterTrackPropertyTypeLanguage.ToPtr(),
								Value:     to.StringPtr("en"),
							},
							{
								Operation: FilterTrackPropertyCompareOperationNotEqual.ToPtr(),
								Property:  FilterTrackPropertyTypeFourCC.ToPtr(),
								Value:     to.StringPtr("EC-3"),
							}},
					},
					{
						TrackSelections: []*FilterTrackPropertyCondition{
							{
								Operation: FilterTrackPropertyCompareOperationEqual.ToPtr(),
								Property:  FilterTrackPropertyTypeType.ToPtr(),
								Value:     to.StringPtr("Video"),
							},
							{
								Operation: FilterTrackPropertyCompareOperationEqual.ToPtr(),
								Property:  FilterTrackPropertyTypeBitrate.ToPtr(),
								Value:     to.StringPtr("3000000-5000000"),
							}},
					}},
			},
		},
		&AccountFiltersCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccountFilter.ID == nil {
		t.Fatal("AccountFilter.ID should not be nil!")
	}
}

func TestAccountFilters_Delete(t *testing.T) {
	// From example Delete an Account Filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountFiltersClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.Delete(ctx,
		"contoso",
		"contosomedia",
		"accountFilterWithTimeWindowAndTrack",
		&AccountFiltersDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccountFilters_Update(t *testing.T) {
	// From example Update an Account Filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountFiltersClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Update(ctx,
		"contoso",
		"contosomedia",
		"accountFilterWithTimeWindowAndTrack",
		AccountFilter{
			Properties: &MediaFilterProperties{
				FirstQuality: &FirstQuality{
					Bitrate: to.Int32Ptr(128000),
				},
				PresentationTimeRange: &PresentationTimeRange{
					EndTimestamp:               to.Int64Ptr(170000000),
					ForceEndTimestamp:          to.BoolPtr(false),
					LiveBackoffDuration:        to.Int64Ptr(0),
					PresentationWindowDuration: to.Int64Ptr(9223372036854775000),
					StartTimestamp:             to.Int64Ptr(10),
					Timescale:                  to.Int64Ptr(10000000),
				},
			},
		},
		&AccountFiltersUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccountFilter.ID == nil {
		t.Fatal("AccountFilter.ID should not be nil!")
	}
}

func TestAssets_List(t *testing.T) {
	// From example List Asset created in a date range
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssetsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("contoso",
		"contosomedia",
		&AssetsListOptions{Filter: to.StringPtr("properties/created gt 2012-06-01 and properties/created lt 2013-07-01"),
			Orderby: to.StringPtr("properties/created"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Asset.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Asset.ID should not be nil!")
			}
		}
	}

	// From example List Asset ordered by date
	pager = client.List("contoso",
		"contosomedia",
		&AssetsListOptions{Orderby: to.StringPtr("properties/created")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Asset.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Asset.ID should not be nil!")
			}
		}
	}

	// From example List all Assets
	pager = client.List("contoso",
		"contosomedia",
		&AssetsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Asset.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Asset.ID should not be nil!")
			}
		}
	}
}

func TestAssets_Get(t *testing.T) {
	// From example Get an Asset by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssetsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountAdams",
		&AssetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Asset.ID == nil {
		t.Fatal("Asset.ID should not be nil!")
	}
}

func TestAssets_CreateOrUpdate(t *testing.T) {
	// From example Create an Asset
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssetsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.CreateOrUpdate(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountLogan",
		Asset{
			Properties: &AssetProperties{
				Description:        to.StringPtr("A documentary showing the ascent of Mount Logan"),
				StorageAccountName: to.StringPtr("storage0"),
			},
		},
		&AssetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Asset.ID == nil {
		t.Fatal("Asset.ID should not be nil!")
	}
}

func TestAssets_Delete(t *testing.T) {
	// From example Delete an Asset
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssetsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.Delete(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountAdams",
		&AssetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAssets_Update(t *testing.T) {
	// From example Update an Asset
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssetsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Update(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountBaker",
		Asset{
			Properties: &AssetProperties{
				Description: to.StringPtr("A documentary showing the ascent of Mount Baker in HD"),
			},
		},
		&AssetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Asset.ID == nil {
		t.Fatal("Asset.ID should not be nil!")
	}
}

func TestAssets_ListContainerSas(t *testing.T) {
	// From example List Asset SAS URLs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssetsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.ListContainerSas(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountBaker",
		ListContainerSasInput{
			ExpiryTime:  to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T10:00:00.007Z"); return t }()),
			Permissions: AssetContainerPermissionReadWrite.ToPtr(),
		},
		&AssetsListContainerSasOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAssets_GetEncryptionKey(t *testing.T) {
	// From example Get Asset Storage Encryption Keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssetsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.GetEncryptionKey(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountSaintHelens",
		&AssetsGetEncryptionKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAssets_ListStreamingLocators(t *testing.T) {
	// From example List Asset SAS URLs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssetsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.ListStreamingLocators(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountSaintHelens",
		&AssetsListStreamingLocatorsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAssetFilters_List(t *testing.T) {
	// From example List all Asset Filters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssetFiltersClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("contoso",
		"contosomedia",
		"ClimbingMountRainer",
		&AssetFiltersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AssetFilter.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AssetFilter.ID should not be nil!")
			}
		}
	}
}

func TestAssetFilters_Get(t *testing.T) {
	// From example Get an Asset Filter by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssetFiltersClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountRainer",
		"assetFilterWithTimeWindowAndTrack",
		&AssetFiltersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AssetFilter.ID == nil {
		t.Fatal("AssetFilter.ID should not be nil!")
	}
}

func TestAssetFilters_CreateOrUpdate(t *testing.T) {
	// From example Create an Asset Filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssetFiltersClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.CreateOrUpdate(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountRainer",
		"newAssetFilter",
		AssetFilter{
			Properties: &MediaFilterProperties{
				FirstQuality: &FirstQuality{
					Bitrate: to.Int32Ptr(128000),
				},
				PresentationTimeRange: &PresentationTimeRange{
					EndTimestamp:               to.Int64Ptr(170000000),
					ForceEndTimestamp:          to.BoolPtr(false),
					LiveBackoffDuration:        to.Int64Ptr(0),
					PresentationWindowDuration: to.Int64Ptr(9223372036854775000),
					StartTimestamp:             to.Int64Ptr(0),
					Timescale:                  to.Int64Ptr(10000000),
				},
				Tracks: []*FilterTrackSelection{
					{
						TrackSelections: []*FilterTrackPropertyCondition{
							{
								Operation: FilterTrackPropertyCompareOperationEqual.ToPtr(),
								Property:  FilterTrackPropertyTypeType.ToPtr(),
								Value:     to.StringPtr("Audio"),
							},
							{
								Operation: FilterTrackPropertyCompareOperationNotEqual.ToPtr(),
								Property:  FilterTrackPropertyTypeLanguage.ToPtr(),
								Value:     to.StringPtr("en"),
							},
							{
								Operation: FilterTrackPropertyCompareOperationNotEqual.ToPtr(),
								Property:  FilterTrackPropertyTypeFourCC.ToPtr(),
								Value:     to.StringPtr("EC-3"),
							}},
					},
					{
						TrackSelections: []*FilterTrackPropertyCondition{
							{
								Operation: FilterTrackPropertyCompareOperationEqual.ToPtr(),
								Property:  FilterTrackPropertyTypeType.ToPtr(),
								Value:     to.StringPtr("Video"),
							},
							{
								Operation: FilterTrackPropertyCompareOperationEqual.ToPtr(),
								Property:  FilterTrackPropertyTypeBitrate.ToPtr(),
								Value:     to.StringPtr("3000000-5000000"),
							}},
					}},
			},
		},
		&AssetFiltersCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AssetFilter.ID == nil {
		t.Fatal("AssetFilter.ID should not be nil!")
	}
}

func TestAssetFilters_Delete(t *testing.T) {
	// From example Delete an Asset Filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssetFiltersClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.Delete(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountRainer",
		"assetFilterWithTimeWindowAndTrack",
		&AssetFiltersDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAssetFilters_Update(t *testing.T) {
	// From example Update an Asset Filter
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAssetFiltersClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Update(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountRainer",
		"assetFilterWithTimeWindowAndTrack",
		AssetFilter{
			Properties: &MediaFilterProperties{
				FirstQuality: &FirstQuality{
					Bitrate: to.Int32Ptr(128000),
				},
				PresentationTimeRange: &PresentationTimeRange{
					EndTimestamp:               to.Int64Ptr(170000000),
					ForceEndTimestamp:          to.BoolPtr(false),
					LiveBackoffDuration:        to.Int64Ptr(0),
					PresentationWindowDuration: to.Int64Ptr(9223372036854775000),
					StartTimestamp:             to.Int64Ptr(10),
					Timescale:                  to.Int64Ptr(10000000),
				},
			},
		},
		&AssetFiltersUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AssetFilter.ID == nil {
		t.Fatal("AssetFilter.ID should not be nil!")
	}
}

func TestContentKeyPolicies_List(t *testing.T) {
	// From example Lists Content Key Policies ordered by last modified.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentKeyPoliciesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("contoso",
		"contosomedia",
		&ContentKeyPoliciesListOptions{Orderby: to.StringPtr("properties/lastModified")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ContentKeyPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ContentKeyPolicy.ID should not be nil!")
			}
		}
	}

	// From example Lists Content Key Policies with created and last modified filters.
	pager = client.List("contoso",
		"contosomedia",
		&ContentKeyPoliciesListOptions{Filter: to.StringPtr("properties/lastModified gt 2016-06-01 and properties/created lt 2013-07-01")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ContentKeyPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ContentKeyPolicy.ID should not be nil!")
			}
		}
	}

	// From example Lists all Content Key Policies
	pager = client.List("contoso",
		"contosomedia",
		&ContentKeyPoliciesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ContentKeyPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ContentKeyPolicy.ID should not be nil!")
			}
		}
	}
}

func TestContentKeyPolicies_Get(t *testing.T) {
	// From example Get a Content Key Policy by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentKeyPoliciesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"contoso",
		"contosomedia",
		"PolicyWithMultipleOptions",
		&ContentKeyPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ContentKeyPolicy.ID == nil {
		t.Fatal("ContentKeyPolicy.ID should not be nil!")
	}
}

func TestContentKeyPolicies_CreateOrUpdate(t *testing.T) {
	// From example Creates a Content Key Policy with ClearKey option and Token Restriction
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentKeyPoliciesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.CreateOrUpdate(ctx,
		"contoso",
		"contosomedia",
		"PolicyWithClearKeyOptionAndSwtTokenRestriction",
		ContentKeyPolicy{
			Properties: &ContentKeyPolicyProperties{
				Description: to.StringPtr("ArmPolicyDescription"),
				Options: []*ContentKeyPolicyOption{
					{
						Name: to.StringPtr("ClearKeyOption"),
						Configuration: &ContentKeyPolicyClearKeyConfiguration{
							ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration{
								ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
							},
						},
						Restriction: &ContentKeyPolicyTokenRestriction{
							ContentKeyPolicyRestriction: ContentKeyPolicyRestriction{
								ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
							},
							Audience: to.StringPtr("urn:audience"),
							Issuer:   to.StringPtr("urn:issuer"),
							PrimaryVerificationKey: &ContentKeyPolicySymmetricTokenKey{
								ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey{
									ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
								},
								KeyValue: "AAAAAAAAAAAAAAAAAAAAAA==",
							},
							RestrictionTokenType: ContentKeyPolicyRestrictionTokenTypeSwt.ToPtr(),
						},
					}},
			},
		},
		&ContentKeyPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ContentKeyPolicy.ID == nil {
		t.Fatal("ContentKeyPolicy.ID should not be nil!")
	}

	// From example Creates a Content Key Policy with PlayReady option and Open Restriction
	res, err = client.CreateOrUpdate(ctx,
		"contoso",
		"contosomedia",
		"PolicyWithPlayReadyOptionAndOpenRestriction",
		ContentKeyPolicy{
			Properties: &ContentKeyPolicyProperties{
				Description: to.StringPtr("ArmPolicyDescription"),
				Options: []*ContentKeyPolicyOption{
					{
						Name: to.StringPtr("ArmPolicyOptionName"),
						Configuration: &ContentKeyPolicyPlayReadyConfiguration{
							ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration{
								ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration"),
							},
							Licenses: []*ContentKeyPolicyPlayReadyLicense{
								{
									AllowTestDevices: to.BoolPtr(true),
									BeginDate:        to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-16T18:22:53.46Z"); return t }()),
									ContentKeyLocation: &ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader{
										ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation{
											ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader"),
										},
									},
									ContentType: ContentKeyPolicyPlayReadyContentTypeUltraVioletDownload.ToPtr(),
									LicenseType: ContentKeyPolicyPlayReadyLicenseTypePersistent.ToPtr(),
									PlayRight: &ContentKeyPolicyPlayReadyPlayRight{
										AllowPassingVideoContentToUnknownOutput:            ContentKeyPolicyPlayReadyUnknownOutputPassingOptionNotAllowed.ToPtr(),
										DigitalVideoOnlyContentRestriction:                 to.BoolPtr(false),
										ImageConstraintForAnalogComponentVideoRestriction:  to.BoolPtr(true),
										ImageConstraintForAnalogComputerMonitorRestriction: to.BoolPtr(false),
										ScmsRestriction: to.Int32Ptr(2),
									},
								}},
						},
						Restriction: &ContentKeyPolicyOpenRestriction{
							ContentKeyPolicyRestriction: ContentKeyPolicyRestriction{
								ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
							},
						},
					}},
			},
		},
		&ContentKeyPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ContentKeyPolicy.ID == nil {
		t.Fatal("ContentKeyPolicy.ID should not be nil!")
	}

	// From example Creates a Content Key Policy with Widevine option and Token Restriction
	res, err = client.CreateOrUpdate(ctx,
		"contoso",
		"contosomedia",
		"PolicyWithWidevineOptionAndJwtTokenRestriction",
		ContentKeyPolicy{
			Properties: &ContentKeyPolicyProperties{
				Description: to.StringPtr("ArmPolicyDescription"),
				Options: []*ContentKeyPolicyOption{
					{
						Name: to.StringPtr("widevineoption"),
						Configuration: &ContentKeyPolicyWidevineConfiguration{
							ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration{
								ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicyWidevineConfiguration"),
							},
							WidevineTemplate: to.StringPtr("{\"allowed_track_types\":\"SD_HD\",\"content_key_specs\":[{\"track_type\":\"SD\",\"security_level\":1,\"required_output_protection\":{\"hdcp\":\"HDCP_V2\"}}],\"policy_overrides\":{\"can_play\":true,\"can_persist\":true,\"can_renew\":false}}"),
						},
						Restriction: &ContentKeyPolicyTokenRestriction{
							ContentKeyPolicyRestriction: ContentKeyPolicyRestriction{
								ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
							},
							AlternateVerificationKeys: []ContentKeyPolicyRestrictionTokenKey{
								{
									ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey{
										ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
									},
									KeyValue: "AAAAAAAAAAAAAAAAAAAAAA==",
								}},
							Audience: to.StringPtr("urn:audience"),
							Issuer:   to.StringPtr("urn:issuer"),
							PrimaryVerificationKey: &ContentKeyPolicyRsaTokenKey{
								ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey{
									ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicyRsaTokenKey"),
								},
								Exponent: "AQAB",
								Modulus:  "AQAD",
							},
							RestrictionTokenType: ContentKeyPolicyRestrictionTokenTypeJwt.ToPtr(),
						},
					}},
			},
		},
		&ContentKeyPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ContentKeyPolicy.ID == nil {
		t.Fatal("ContentKeyPolicy.ID should not be nil!")
	}

	// From example Creates a Content Key Policy with multiple options
	res, err = client.CreateOrUpdate(ctx,
		"contoso",
		"contosomedia",
		"PolicyCreatedWithMultipleOptions",
		ContentKeyPolicy{
			Properties: &ContentKeyPolicyProperties{
				Description: to.StringPtr("ArmPolicyDescription"),
				Options: []*ContentKeyPolicyOption{
					{
						Name: to.StringPtr("ClearKeyOption"),
						Configuration: &ContentKeyPolicyClearKeyConfiguration{
							ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration{
								ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
							},
						},
						Restriction: &ContentKeyPolicyTokenRestriction{
							ContentKeyPolicyRestriction: ContentKeyPolicyRestriction{
								ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
							},
							Audience: to.StringPtr("urn:audience"),
							Issuer:   to.StringPtr("urn:issuer"),
							PrimaryVerificationKey: &ContentKeyPolicySymmetricTokenKey{
								ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey{
									ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
								},
								KeyValue: "AAAAAAAAAAAAAAAAAAAAAA==",
							},
							RestrictionTokenType: ContentKeyPolicyRestrictionTokenTypeSwt.ToPtr(),
						},
					},
					{
						Name: to.StringPtr("widevineoption"),
						Configuration: &ContentKeyPolicyWidevineConfiguration{
							ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration{
								ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicyWidevineConfiguration"),
							},
							WidevineTemplate: to.StringPtr("{\"allowed_track_types\":\"SD_HD\",\"content_key_specs\":[{\"track_type\":\"SD\",\"security_level\":1,\"required_output_protection\":{\"hdcp\":\"HDCP_V2\"}}],\"policy_overrides\":{\"can_play\":true,\"can_persist\":true,\"can_renew\":false}}"),
						},
						Restriction: &ContentKeyPolicyOpenRestriction{
							ContentKeyPolicyRestriction: ContentKeyPolicyRestriction{
								ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
							},
						},
					}},
			},
		},
		&ContentKeyPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ContentKeyPolicy.ID == nil {
		t.Fatal("ContentKeyPolicy.ID should not be nil!")
	}
}

func TestContentKeyPolicies_Delete(t *testing.T) {
	// From example Delete a Key Policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentKeyPoliciesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.Delete(ctx,
		"contoso",
		"contosomedia",
		"PolicyWithPlayReadyOptionAndOpenRestriction",
		&ContentKeyPoliciesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestContentKeyPolicies_Update(t *testing.T) {
	// From example Update a Content Key Policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentKeyPoliciesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Update(ctx,
		"contoso",
		"contosomedia",
		"PolicyWithClearKeyOptionAndTokenRestriction",
		ContentKeyPolicy{
			Properties: &ContentKeyPolicyProperties{
				Description: to.StringPtr("Updated Policy"),
				Options: []*ContentKeyPolicyOption{
					{
						Name: to.StringPtr("ClearKeyOption"),
						Configuration: &ContentKeyPolicyClearKeyConfiguration{
							ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration{
								ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
							},
						},
						Restriction: &ContentKeyPolicyOpenRestriction{
							ContentKeyPolicyRestriction: ContentKeyPolicyRestriction{
								ODataType: to.StringPtr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
							},
						},
					}},
			},
		},
		&ContentKeyPoliciesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ContentKeyPolicy.ID == nil {
		t.Fatal("ContentKeyPolicy.ID should not be nil!")
	}
}

func TestContentKeyPolicies_GetPolicyPropertiesWithSecrets(t *testing.T) {
	// From example Get an Content Key Policy with secrets
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewContentKeyPoliciesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.GetPolicyPropertiesWithSecrets(ctx,
		"contoso",
		"contosomedia",
		"PolicyWithMultipleOptions",
		&ContentKeyPoliciesGetPolicyPropertiesWithSecretsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTransforms_List(t *testing.T) {
	// From example Lists the Transforms
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTransformsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("contosoresources",
		"contosomedia",
		&TransformsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Transform.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Transform.ID should not be nil!")
			}
		}
	}

	// From example Lists the Transforms filter by created
	pager = client.List("contosoresources",
		"contosomedia",
		&TransformsListOptions{Filter: to.StringPtr("properties/created gt 2021-06-01T00:00:00.0000000Z and properties/created le 2021-06-01T00:00:10.0000000Z"),
			Orderby: to.StringPtr("properties/created"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Transform.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Transform.ID should not be nil!")
			}
		}
	}

	// From example Lists the Transforms filter by lastmodified
	pager = client.List("contosoresources",
		"contosomedia",
		&TransformsListOptions{Filter: to.StringPtr("properties/lastmodified gt 2021-06-01T00:00:00.0000000Z and properties/lastmodified le 2021-06-01T00:00:10.0000000Z"),
			Orderby: to.StringPtr("properties/lastmodified desc"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Transform.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Transform.ID should not be nil!")
			}
		}
	}

	// From example Lists the Transforms filter by name
	pager = client.List("contosoresources",
		"contosomedia",
		&TransformsListOptions{Filter: to.StringPtr("(name eq 'sampleEncode') or (name eq 'sampleEncodeAndVideoIndex')"),
			Orderby: to.StringPtr("name desc"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Transform.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Transform.ID should not be nil!")
			}
		}
	}
}

func TestTransforms_Get(t *testing.T) {
	// From example Get a Transform by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTransformsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"contosoresources",
		"contosomedia",
		"sampleTransform",
		&TransformsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Transform.ID == nil {
		t.Fatal("Transform.ID should not be nil!")
	}
}

func TestTransforms_CreateOrUpdate(t *testing.T) {
	// From example Create or update a Transform
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTransformsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.CreateOrUpdate(ctx,
		"contosoresources",
		"contosomedia",
		"createdTransform",
		Transform{
			Properties: &TransformProperties{
				Description: to.StringPtr("Example Transform to illustrate create and update."),
				Outputs: []*TransformOutput{
					{
						Preset: &BuiltInStandardEncoderPreset{
							Preset: Preset{
								ODataType: to.StringPtr("#Microsoft.Media.BuiltInStandardEncoderPreset"),
							},
							PresetName: EncoderNamedPresetAdaptiveStreaming.ToPtr(),
						},
					}},
			},
		},
		&TransformsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Transform.ID == nil {
		t.Fatal("Transform.ID should not be nil!")
	}
}

func TestTransforms_Delete(t *testing.T) {
	// From example Delete a Transform
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTransformsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.Delete(ctx,
		"contosoresources",
		"contosomedia",
		"sampleTransform",
		&TransformsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTransforms_Update(t *testing.T) {
	// From example Update a Transform.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTransformsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Update(ctx,
		"contosoresources",
		"contosomedia",
		"transformToUpdate",
		Transform{
			Properties: &TransformProperties{
				Description: to.StringPtr("Example transform to illustrate update."),
				Outputs: []*TransformOutput{
					{
						Preset: &BuiltInStandardEncoderPreset{
							Preset: Preset{
								ODataType: to.StringPtr("#Microsoft.Media.BuiltInStandardEncoderPreset"),
							},
							PresetName: EncoderNamedPresetH264MultipleBitrate720P.ToPtr(),
						},
						RelativePriority: PriorityHigh.ToPtr(),
					}},
			},
		},
		&TransformsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Transform.ID == nil {
		t.Fatal("Transform.ID should not be nil!")
	}
}

func TestJobs_List(t *testing.T) {
	// From example Lists Jobs for the Transform filter by created.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("contosoresources",
		"contosomedia",
		"exampleTransform",
		&JobsListOptions{Filter: to.StringPtr("properties/created ge 2021-06-01T00:00:10.0000000Z and properties/created le 2021-06-01T00:00:20.0000000Z"),
			Orderby: to.StringPtr("properties/created"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Job.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Job.ID should not be nil!")
			}
		}
	}

	// From example Lists Jobs for the Transform filter by lastmodified.
	pager = client.List("contosoresources",
		"contosomedia",
		"exampleTransform",
		&JobsListOptions{Filter: to.StringPtr("properties/lastmodified ge 2021-06-01T00:00:10.0000000Z and properties/lastmodified le 2021-06-01T00:00:20.0000000Z"),
			Orderby: to.StringPtr("properties/lastmodified desc"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Job.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Job.ID should not be nil!")
			}
		}
	}

	// From example Lists Jobs for the Transform filter by name and state.
	pager = client.List("contosoresources",
		"contosomedia",
		"exampleTransform",
		&JobsListOptions{Filter: to.StringPtr("name eq 'job3' and properties/state eq Microsoft.Media.JobState'finished'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Job.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Job.ID should not be nil!")
			}
		}
	}

	// From example Lists Jobs for the Transform filter by name.
	pager = client.List("contosoresources",
		"contosomedia",
		"exampleTransform",
		&JobsListOptions{Filter: to.StringPtr("name eq 'job1' or name eq 'job2'"),
			Orderby: to.StringPtr("name"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Job.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Job.ID should not be nil!")
			}
		}
	}

	// From example Lists Jobs for the Transform filter by state equal.
	pager = client.List("contosoresources",
		"contosomedia",
		"exampleTransform",
		&JobsListOptions{Filter: to.StringPtr("properties/state eq Microsoft.Media.JobState'Processing'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Job.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Job.ID should not be nil!")
			}
		}
	}

	// From example Lists Jobs for the Transform filter by state not equal.
	pager = client.List("contosoresources",
		"contosomedia",
		"exampleTransform",
		&JobsListOptions{Filter: to.StringPtr("properties/state ne Microsoft.Media.JobState'processing'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Job.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Job.ID should not be nil!")
			}
		}
	}

	// From example Lists all of the Jobs for the Transform.
	pager = client.List("contosoresources",
		"contosomedia",
		"exampleTransform",
		&JobsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Job.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Job.ID should not be nil!")
			}
		}
	}
}

func TestJobs_Get(t *testing.T) {
	// From example Get a Job by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"contosoresources",
		"contosomedia",
		"exampleTransform",
		"job1",
		&JobsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Job.ID == nil {
		t.Fatal("Job.ID should not be nil!")
	}
}

func TestJobs_Create(t *testing.T) {
	// From example Create a Job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Create(ctx,
		"contosoresources",
		"contosomedia",
		"exampleTransform",
		"job1",
		Job{
			Properties: &JobProperties{
				CorrelationData: map[string]*string{
					"Key 2": to.StringPtr("Value 2"),
					"key1":  to.StringPtr("value1"),
				},
				Input: &JobInputAsset{
					JobInputClip: JobInputClip{
						JobInput: JobInput{
							ODataType: to.StringPtr("#Microsoft.Media.JobInputAsset"),
						},
					},
					AssetName: to.StringPtr("job1-InputAsset"),
				},
				Outputs: []JobOutput{
					{
						JobOutput: JobOutput{
							ODataType: to.StringPtr("#Microsoft.Media.JobOutputAsset"),
						},
						AssetName: to.StringPtr("job1-OutputAsset"),
					}},
			},
		},
		&JobsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Job.ID == nil {
		t.Fatal("Job.ID should not be nil!")
	}
}

func TestJobs_Delete(t *testing.T) {
	// From example Delete a Job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.Delete(ctx,
		"contosoresources",
		"contosomedia",
		"exampleTransform",
		"jobToDelete",
		&JobsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestJobs_Update(t *testing.T) {
	// From example Update a Job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Update(ctx,
		"contosoresources",
		"contosomedia",
		"exampleTransform",
		"job1",
		Job{
			Properties: &JobProperties{
				Description: to.StringPtr("Example job to illustrate update."),
				Input: &JobInputAsset{
					JobInputClip: JobInputClip{
						JobInput: JobInput{
							ODataType: to.StringPtr("#Microsoft.Media.JobInputAsset"),
						},
					},
					AssetName: to.StringPtr("job1-InputAsset"),
				},
				Outputs: []JobOutput{
					{
						JobOutput: JobOutput{
							ODataType: to.StringPtr("#Microsoft.Media.JobOutputAsset"),
						},
						AssetName: to.StringPtr("job1-OutputAsset"),
					}},
				Priority: PriorityHigh.ToPtr(),
			},
		},
		&JobsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Job.ID == nil {
		t.Fatal("Job.ID should not be nil!")
	}
}

func TestJobs_CancelJob(t *testing.T) {
	// From example Cancel a Job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.CancelJob(ctx,
		"contosoresources",
		"contosomedia",
		"exampleTransform",
		"job1",
		&JobsCancelJobOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestStreamingPolicies_List(t *testing.T) {
	// From example Lists Streaming Policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingPoliciesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("contoso",
		"contosomedia",
		&StreamingPoliciesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StreamingPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StreamingPolicy.ID should not be nil!")
			}
		}
	}
}

func TestStreamingPolicies_Get(t *testing.T) {
	// From example Get a Streaming Policy by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingPoliciesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"contoso",
		"contosomedia",
		"clearStreamingPolicy",
		&StreamingPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StreamingPolicy.ID == nil {
		t.Fatal("StreamingPolicy.ID should not be nil!")
	}
}

func TestStreamingPolicies_Create(t *testing.T) {
	// From example Creates a Streaming Policy with clear streaming
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingPoliciesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedClearStreamingPolicy",
		StreamingPolicy{
			Properties: &StreamingPolicyProperties{
				NoEncryption: &NoEncryption{
					EnabledProtocols: &EnabledProtocols{
						Dash:            to.BoolPtr(true),
						Download:        to.BoolPtr(true),
						Hls:             to.BoolPtr(true),
						SmoothStreaming: to.BoolPtr(true),
					},
				},
			},
		},
		&StreamingPoliciesCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StreamingPolicy.ID == nil {
		t.Fatal("StreamingPolicy.ID should not be nil!")
	}

	// From example Creates a Streaming Policy with commonEncryptionCbcs only
	res, err = client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly",
		StreamingPolicy{
			Properties: &StreamingPolicyProperties{
				CommonEncryptionCbcs: &CommonEncryptionCbcs{
					ContentKeys: &StreamingPolicyContentKeys{
						DefaultKey: &DefaultKey{
							Label: to.StringPtr("cbcsDefaultKey"),
						},
					},
					Drm: &CbcsDrmConfiguration{
						FairPlay: &StreamingPolicyFairPlayConfiguration{
							AllowPersistentLicense:              to.BoolPtr(true),
							CustomLicenseAcquisitionURLTemplate: to.StringPtr("https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}"),
						},
					},
					EnabledProtocols: &EnabledProtocols{
						Dash:            to.BoolPtr(false),
						Download:        to.BoolPtr(false),
						Hls:             to.BoolPtr(true),
						SmoothStreaming: to.BoolPtr(false),
					},
				},
				DefaultContentKeyPolicyName: to.StringPtr("PolicyWithMultipleOptions"),
			},
		},
		&StreamingPoliciesCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StreamingPolicy.ID == nil {
		t.Fatal("StreamingPolicy.ID should not be nil!")
	}

	// From example Creates a Streaming Policy with commonEncryptionCenc only
	res, err = client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly",
		StreamingPolicy{
			Properties: &StreamingPolicyProperties{
				CommonEncryptionCenc: &CommonEncryptionCenc{
					ClearTracks: []*TrackSelection{
						{
							TrackSelections: []*TrackPropertyCondition{
								{
									Operation: TrackPropertyCompareOperationEqual.ToPtr(),
									Property:  TrackPropertyTypeFourCC.ToPtr(),
									Value:     to.StringPtr("hev1"),
								}},
						}},
					ContentKeys: &StreamingPolicyContentKeys{
						DefaultKey: &DefaultKey{
							Label: to.StringPtr("cencDefaultKey"),
						},
					},
					Drm: &CencDrmConfiguration{
						PlayReady: &StreamingPolicyPlayReadyConfiguration{
							CustomLicenseAcquisitionURLTemplate: to.StringPtr("https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}"),
							PlayReadyCustomAttributes:           to.StringPtr("PlayReady CustomAttributes"),
						},
						Widevine: &StreamingPolicyWidevineConfiguration{
							CustomLicenseAcquisitionURLTemplate: to.StringPtr("https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"),
						},
					},
					EnabledProtocols: &EnabledProtocols{
						Dash:            to.BoolPtr(true),
						Download:        to.BoolPtr(false),
						Hls:             to.BoolPtr(false),
						SmoothStreaming: to.BoolPtr(true),
					},
				},
				DefaultContentKeyPolicyName: to.StringPtr("PolicyWithPlayReadyOptionAndOpenRestriction"),
			},
		},
		&StreamingPoliciesCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StreamingPolicy.ID == nil {
		t.Fatal("StreamingPolicy.ID should not be nil!")
	}

	// From example Creates a Streaming Policy with envelopeEncryption only
	res, err = client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedSecureStreamingPolicyWithEnvelopeEncryptionOnly",
		StreamingPolicy{
			Properties: &StreamingPolicyProperties{
				DefaultContentKeyPolicyName: to.StringPtr("PolicyWithClearKeyOptionAndTokenRestriction"),
				EnvelopeEncryption: &EnvelopeEncryption{
					ContentKeys: &StreamingPolicyContentKeys{
						DefaultKey: &DefaultKey{
							Label: to.StringPtr("aesDefaultKey"),
						},
					},
					CustomKeyAcquisitionURLTemplate: to.StringPtr("https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"),
					EnabledProtocols: &EnabledProtocols{
						Dash:            to.BoolPtr(true),
						Download:        to.BoolPtr(false),
						Hls:             to.BoolPtr(true),
						SmoothStreaming: to.BoolPtr(true),
					},
				},
			},
		},
		&StreamingPoliciesCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StreamingPolicy.ID == nil {
		t.Fatal("StreamingPolicy.ID should not be nil!")
	}

	// From example Creates a Streaming Policy with secure streaming
	res, err = client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedSecureStreamingPolicy",
		StreamingPolicy{
			Properties: &StreamingPolicyProperties{
				CommonEncryptionCbcs: &CommonEncryptionCbcs{
					ContentKeys: &StreamingPolicyContentKeys{
						DefaultKey: &DefaultKey{
							Label: to.StringPtr("cbcsDefaultKey"),
						},
					},
					Drm: &CbcsDrmConfiguration{
						FairPlay: &StreamingPolicyFairPlayConfiguration{
							AllowPersistentLicense:              to.BoolPtr(true),
							CustomLicenseAcquisitionURLTemplate: to.StringPtr("https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}"),
						},
					},
					EnabledProtocols: &EnabledProtocols{
						Dash:            to.BoolPtr(false),
						Download:        to.BoolPtr(false),
						Hls:             to.BoolPtr(true),
						SmoothStreaming: to.BoolPtr(false),
					},
				},
				CommonEncryptionCenc: &CommonEncryptionCenc{
					ClearTracks: []*TrackSelection{
						{
							TrackSelections: []*TrackPropertyCondition{
								{
									Operation: TrackPropertyCompareOperationEqual.ToPtr(),
									Property:  TrackPropertyTypeFourCC.ToPtr(),
									Value:     to.StringPtr("hev1"),
								}},
						}},
					ContentKeys: &StreamingPolicyContentKeys{
						DefaultKey: &DefaultKey{
							Label: to.StringPtr("cencDefaultKey"),
						},
					},
					Drm: &CencDrmConfiguration{
						PlayReady: &StreamingPolicyPlayReadyConfiguration{
							CustomLicenseAcquisitionURLTemplate: to.StringPtr("https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}"),
							PlayReadyCustomAttributes:           to.StringPtr("PlayReady CustomAttributes"),
						},
						Widevine: &StreamingPolicyWidevineConfiguration{
							CustomLicenseAcquisitionURLTemplate: to.StringPtr("https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"),
						},
					},
					EnabledProtocols: &EnabledProtocols{
						Dash:            to.BoolPtr(true),
						Download:        to.BoolPtr(false),
						Hls:             to.BoolPtr(false),
						SmoothStreaming: to.BoolPtr(true),
					},
				},
				DefaultContentKeyPolicyName: to.StringPtr("PolicyWithMultipleOptions"),
				EnvelopeEncryption: &EnvelopeEncryption{
					ContentKeys: &StreamingPolicyContentKeys{
						DefaultKey: &DefaultKey{
							Label: to.StringPtr("aesDefaultKey"),
						},
					},
					CustomKeyAcquisitionURLTemplate: to.StringPtr("https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"),
					EnabledProtocols: &EnabledProtocols{
						Dash:            to.BoolPtr(true),
						Download:        to.BoolPtr(false),
						Hls:             to.BoolPtr(true),
						SmoothStreaming: to.BoolPtr(true),
					},
				},
			},
		},
		&StreamingPoliciesCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StreamingPolicy.ID == nil {
		t.Fatal("StreamingPolicy.ID should not be nil!")
	}
}

func TestStreamingPolicies_Delete(t *testing.T) {
	// From example Delete a Streaming Policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingPoliciesClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.Delete(ctx,
		"contoso",
		"contosomedia",
		"secureStreamingPolicyWithCommonEncryptionCbcsOnly",
		&StreamingPoliciesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestStreamingLocators_List(t *testing.T) {
	// From example Lists Streaming Locators
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingLocatorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("contoso",
		"contosomedia",
		&StreamingLocatorsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StreamingLocator.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StreamingLocator.ID should not be nil!")
			}
		}
	}
}

func TestStreamingLocators_Get(t *testing.T) {
	// From example Get a Streaming Locator by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingLocatorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"contoso",
		"contosomedia",
		"clearStreamingLocator",
		&StreamingLocatorsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StreamingLocator.ID == nil {
		t.Fatal("StreamingLocator.ID should not be nil!")
	}
}

func TestStreamingLocators_Create(t *testing.T) {
	// From example Creates a Streaming Locator with clear streaming
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingLocatorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedClearStreamingLocator",
		StreamingLocator{
			Properties: &StreamingLocatorProperties{
				AssetName:           to.StringPtr("ClimbingMountRainier"),
				StreamingPolicyName: to.StringPtr("clearStreamingPolicy"),
			},
		},
		&StreamingLocatorsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StreamingLocator.ID == nil {
		t.Fatal("StreamingLocator.ID should not be nil!")
	}

	// From example Creates a Streaming Locator with secure streaming
	res, err = client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedSecureStreamingLocator",
		StreamingLocator{
			Properties: &StreamingLocatorProperties{
				AssetName:           to.StringPtr("ClimbingMountRainier"),
				EndTime:             to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2028-12-31T23:59:59.9999999Z"); return t }()),
				StartTime:           to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-01T00:00:00Z"); return t }()),
				StreamingPolicyName: to.StringPtr("secureStreamingPolicy"),
			},
		},
		&StreamingLocatorsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StreamingLocator.ID == nil {
		t.Fatal("StreamingLocator.ID should not be nil!")
	}

	// From example Creates a Streaming Locator with user defined content keys
	res, err = client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedSecureStreamingLocatorWithUserDefinedContentKeys",
		StreamingLocator{
			Properties: &StreamingLocatorProperties{
				AssetName: to.StringPtr("ClimbingMountRainier"),
				ContentKeys: []*StreamingLocatorContentKey{
					{
						ID:                              to.StringPtr("60000000-0000-0000-0000-000000000001"),
						LabelReferenceInStreamingPolicy: to.StringPtr("aesDefaultKey"),
						Value:                           to.StringPtr("1UqLohAfWsEGkULYxHjYZg=="),
					},
					{
						ID:                              to.StringPtr("60000000-0000-0000-0000-000000000004"),
						LabelReferenceInStreamingPolicy: to.StringPtr("cencDefaultKey"),
						Value:                           to.StringPtr("4UqLohAfWsEGkULYxHjYZg=="),
					},
					{
						ID:                              to.StringPtr("60000000-0000-0000-0000-000000000007"),
						LabelReferenceInStreamingPolicy: to.StringPtr("cbcsDefaultKey"),
						Value:                           to.StringPtr("7UqLohAfWsEGkULYxHjYZg=="),
					}},
				StreamingLocatorID:  to.StringPtr("90000000-0000-0000-0000-00000000000A"),
				StreamingPolicyName: to.StringPtr("secureStreamingPolicy"),
			},
		},
		&StreamingLocatorsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StreamingLocator.ID == nil {
		t.Fatal("StreamingLocator.ID should not be nil!")
	}
}

func TestStreamingLocators_Delete(t *testing.T) {
	// From example Delete a Streaming Locator
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingLocatorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.Delete(ctx,
		"contoso",
		"contosomedia",
		"clearStreamingLocator",
		&StreamingLocatorsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestStreamingLocators_ListContentKeys(t *testing.T) {
	// From example List Content Keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingLocatorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.ListContentKeys(ctx,
		"contoso",
		"contosomedia",
		"secureStreamingLocator",
		&StreamingLocatorsListContentKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestStreamingLocators_ListPaths(t *testing.T) {
	// From example List Paths which has streaming paths and download paths
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingLocatorsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.ListPaths(ctx,
		"contoso",
		"contosomedia",
		"clearStreamingLocator",
		&StreamingLocatorsListPathsOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example List Paths which has streaming paths only
	_, err = client.ListPaths(ctx,
		"contoso",
		"contosomedia",
		"secureStreamingLocator",
		&StreamingLocatorsListPathsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLiveEvents_List(t *testing.T) {
	// From example List all LiveEvents
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLiveEventsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	pager := client.List("mediaresources",
		"slitestmedia10",
		&LiveEventsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LiveEvent.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LiveEvent.ID should not be nil!")
			}
		}
	}
}

func TestLiveEvents_Get(t *testing.T) {
	// From example Get a LiveEvent by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLiveEventsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	res, err := client.Get(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		&LiveEventsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LiveEvent.ID == nil {
		t.Fatal("LiveEvent.ID should not be nil!")
	}
}

func TestLiveEvents_Create(t *testing.T) {
	// From example Create a LiveEvent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLiveEventsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginCreate(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		LiveEvent{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
				},
			},
			Properties: &LiveEventProperties{
				Description: to.StringPtr("test event 1"),
				Input: &LiveEventInput{
					AccessControl: &LiveEventInputAccessControl{
						IP: &IPAccessControl{
							Allow: []*IPRange{
								{
									Name:               to.StringPtr("AllowAll"),
									Address:            to.StringPtr("0.0.0.0"),
									SubnetPrefixLength: to.Int32Ptr(0),
								}},
						},
					},
					KeyFrameIntervalDuration: to.StringPtr("PT6S"),
					StreamingProtocol:        LiveEventInputProtocolRTMP.ToPtr(),
				},
				Preview: &LiveEventPreview{
					AccessControl: &LiveEventPreviewAccessControl{
						IP: &IPAccessControl{
							Allow: []*IPRange{
								{
									Name:               to.StringPtr("AllowAll"),
									Address:            to.StringPtr("0.0.0.0"),
									SubnetPrefixLength: to.Int32Ptr(0),
								}},
						},
					},
				},
			},
		},
		&LiveEventsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LiveEvent.ID == nil {
		t.Fatal("LiveEvent.ID should not be nil!")
	}
}

func TestLiveEvents_Update(t *testing.T) {
	// From example Update a LiveEvent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLiveEventsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginUpdate(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		LiveEvent{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
					"tag3": to.StringPtr("value3"),
				},
			},
			Properties: &LiveEventProperties{
				Description: to.StringPtr("test event updated"),
				Input: &LiveEventInput{
					AccessControl: &LiveEventInputAccessControl{
						IP: &IPAccessControl{
							Allow: []*IPRange{
								{
									Name:    to.StringPtr("AllowOne"),
									Address: to.StringPtr("192.1.1.0"),
								}},
						},
					},
					KeyFrameIntervalDuration: to.StringPtr("PT6S"),
					StreamingProtocol:        LiveEventInputProtocolFragmentedMP4.ToPtr(),
				},
				Preview: &LiveEventPreview{
					AccessControl: &LiveEventPreviewAccessControl{
						IP: &IPAccessControl{
							Allow: []*IPRange{
								{
									Name:    to.StringPtr("AllowOne"),
									Address: to.StringPtr("192.1.1.0"),
								}},
						},
					},
				},
			},
		},
		&LiveEventsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LiveEvent.ID == nil {
		t.Fatal("LiveEvent.ID should not be nil!")
	}
}

func TestLiveEvents_Delete(t *testing.T) {
	// From example Delete a LiveEvent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLiveEventsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginDelete(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		&LiveEventsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLiveEvents_Allocate(t *testing.T) {
	// From example Allocate a LiveEvent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLiveEventsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginAllocate(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		&LiveEventsBeginAllocateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLiveEvents_Start(t *testing.T) {
	// From example Start a LiveEvent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLiveEventsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginStart(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		&LiveEventsBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLiveEvents_Stop(t *testing.T) {
	// From example Stop a LiveEvent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLiveEventsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginStop(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		LiveEventActionInput{
			RemoveOutputsOnStop: to.BoolPtr(false),
		},
		&LiveEventsBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLiveEvents_Reset(t *testing.T) {
	// From example Reset a LiveEvent
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLiveEventsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginReset(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		&LiveEventsBeginResetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLiveOutputs_List(t *testing.T) {
	// From example List all LiveOutputs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLiveOutputsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	pager := client.List("mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		&LiveOutputsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LiveOutput.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LiveOutput.ID should not be nil!")
			}
		}
	}
}

func TestLiveOutputs_Get(t *testing.T) {
	// From example Get a LiveOutput by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLiveOutputsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	res, err := client.Get(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		"myLiveOutput1",
		&LiveOutputsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LiveOutput.ID == nil {
		t.Fatal("LiveOutput.ID should not be nil!")
	}
}

func TestLiveOutputs_Create(t *testing.T) {
	// From example Create a LiveOutput
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLiveOutputsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginCreate(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		"myLiveOutput1",
		LiveOutput{
			Properties: &LiveOutputProperties{
				Description:         to.StringPtr("test live output 1"),
				ArchiveWindowLength: to.StringPtr("PT5M"),
				AssetName:           to.StringPtr("6f3264f5-a189-48b4-a29a-a40f22575212"),
				Hls: &Hls{
					FragmentsPerTsSegment: to.Int32Ptr(5),
				},
				ManifestName: to.StringPtr("testmanifest"),
			},
		},
		&LiveOutputsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LiveOutput.ID == nil {
		t.Fatal("LiveOutput.ID should not be nil!")
	}
}

func TestLiveOutputs_Delete(t *testing.T) {
	// From example Delete a LiveOutput
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLiveOutputsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginDelete(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		"myLiveOutput1",
		&LiveOutputsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStreamingEndpoints_List(t *testing.T) {
	// From example List all streaming endpoints
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingEndpointsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	pager := client.List("mediaresources",
		"slitestmedia10",
		&StreamingEndpointsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StreamingEndpoint.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StreamingEndpoint.ID should not be nil!")
			}
		}
	}
}

func TestStreamingEndpoints_Get(t *testing.T) {
	// From example Get a streaming endpoint by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingEndpointsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	res, err := client.Get(ctx,
		"mediaresources",
		"slitestmedia10",
		"myStreamingEndpoint1",
		&StreamingEndpointsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StreamingEndpoint.ID == nil {
		t.Fatal("StreamingEndpoint.ID should not be nil!")
	}
}

func TestStreamingEndpoints_Create(t *testing.T) {
	// From example Create a streaming endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingEndpointsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginCreate(ctx,
		"mediaresources",
		"slitestmedia10",
		"myStreamingEndpoint1",
		StreamingEndpoint{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
				},
			},
			Properties: &StreamingEndpointProperties{
				Description: to.StringPtr("test event 1"),
				AccessControl: &StreamingEndpointAccessControl{
					Akamai: &AkamaiAccessControl{
						AkamaiSignatureHeaderAuthenticationKeyList: []*AkamaiSignatureHeaderAuthenticationKey{
							{
								Base64Key:  to.StringPtr("dGVzdGlkMQ=="),
								Expiration: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2029-12-31T16:00:00-08:00"); return t }()),
								Identifier: to.StringPtr("id1"),
							},
							{
								Base64Key:  to.StringPtr("dGVzdGlkMQ=="),
								Expiration: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2030-12-31T16:00:00-08:00"); return t }()),
								Identifier: to.StringPtr("id2"),
							}},
					},
					IP: &IPAccessControl{
						Allow: []*IPRange{
							{
								Name:    to.StringPtr("AllowedIp"),
								Address: to.StringPtr("192.168.1.1"),
							}},
					},
				},
				AvailabilitySetName: to.StringPtr("availableset"),
				CdnEnabled:          to.BoolPtr(false),
				ScaleUnits:          to.Int32Ptr(1),
			},
		},
		&StreamingEndpointsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.StreamingEndpoint.ID == nil {
		t.Fatal("StreamingEndpoint.ID should not be nil!")
	}
}

func TestStreamingEndpoints_Update(t *testing.T) {
	// From example Update a streaming endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingEndpointsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginUpdate(ctx,
		"mediaresources",
		"slitestmedia10",
		"myStreamingEndpoint1",
		StreamingEndpoint{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("West US"),
				Tags: map[string]*string{
					"tag3": to.StringPtr("value3"),
					"tag5": to.StringPtr("value5"),
				},
			},
			Properties: &StreamingEndpointProperties{
				Description:         to.StringPtr("test event 2"),
				AvailabilitySetName: to.StringPtr("availableset"),
				ScaleUnits:          to.Int32Ptr(5),
			},
		},
		&StreamingEndpointsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.StreamingEndpoint.ID == nil {
		t.Fatal("StreamingEndpoint.ID should not be nil!")
	}
}

func TestStreamingEndpoints_Delete(t *testing.T) {
	// From example Delete a streaming endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingEndpointsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginDelete(ctx,
		"mediaresources",
		"slitestmedia10",
		"myStreamingEndpoint1",
		&StreamingEndpointsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStreamingEndpoints_Start(t *testing.T) {
	// From example Start a streaming endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingEndpointsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginStart(ctx,
		"mediaresources",
		"slitestmedia10",
		"myStreamingEndpoint1",
		&StreamingEndpointsBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStreamingEndpoints_Stop(t *testing.T) {
	// From example Stop a streaming endpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingEndpointsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginStop(ctx,
		"mediaresources",
		"slitestmedia10",
		"myStreamingEndpoint1",
		&StreamingEndpointsBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStreamingEndpoints_Scale(t *testing.T) {
	// From example Scale a StreamingEndpoint
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStreamingEndpointsClient(con,
		"0a6ec948-5a62-437d-b9df-934dc7c1b722")
	poller, err := client.BeginScale(ctx,
		"mediaresources",
		"slitestmedia10",
		"myStreamingEndpoint1",
		StreamingEntityScaleUnit{
			ScaleUnit: to.Int32Ptr(5),
		},
		&StreamingEndpointsBeginScaleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
