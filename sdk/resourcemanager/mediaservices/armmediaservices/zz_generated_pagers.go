//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmediaservices

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AccountFiltersClientListPager provides operations for iterating over paged responses.
type AccountFiltersClientListPager struct {
	client    *AccountFiltersClient
	current   AccountFiltersClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AccountFiltersClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AccountFiltersClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AccountFilterCollection.ODataNextLink == nil || len(*p.current.AccountFilterCollection.ODataNextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AccountFiltersClientListPager) NextPage(ctx context.Context) (AccountFiltersClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AccountFiltersClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AccountFiltersClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AccountFiltersClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AccountFiltersClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AccountFiltersClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AssetFiltersClientListPager provides operations for iterating over paged responses.
type AssetFiltersClientListPager struct {
	client    *AssetFiltersClient
	current   AssetFiltersClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AssetFiltersClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AssetFiltersClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AssetFilterCollection.ODataNextLink == nil || len(*p.current.AssetFilterCollection.ODataNextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AssetFiltersClientListPager) NextPage(ctx context.Context) (AssetFiltersClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AssetFiltersClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AssetFiltersClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AssetFiltersClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AssetFiltersClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AssetFiltersClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AssetsClientListPager provides operations for iterating over paged responses.
type AssetsClientListPager struct {
	client    *AssetsClient
	current   AssetsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AssetsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AssetsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AssetCollection.ODataNextLink == nil || len(*p.current.AssetCollection.ODataNextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AssetsClientListPager) NextPage(ctx context.Context) (AssetsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AssetsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AssetsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AssetsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AssetsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AssetsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClientListBySubscriptionPager provides operations for iterating over paged responses.
type ClientListBySubscriptionPager struct {
	client    *Client
	current   ClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MediaServiceCollection.ODataNextLink == nil || len(*p.current.MediaServiceCollection.ODataNextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClientListBySubscriptionPager) NextPage(ctx context.Context) (ClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClientListPager provides operations for iterating over paged responses.
type ClientListPager struct {
	client    *Client
	current   ClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MediaServiceCollection.ODataNextLink == nil || len(*p.current.MediaServiceCollection.ODataNextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClientListPager) NextPage(ctx context.Context) (ClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ContentKeyPoliciesClientListPager provides operations for iterating over paged responses.
type ContentKeyPoliciesClientListPager struct {
	client    *ContentKeyPoliciesClient
	current   ContentKeyPoliciesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ContentKeyPoliciesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ContentKeyPoliciesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ContentKeyPolicyCollection.ODataNextLink == nil || len(*p.current.ContentKeyPolicyCollection.ODataNextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ContentKeyPoliciesClientListPager) NextPage(ctx context.Context) (ContentKeyPoliciesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ContentKeyPoliciesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ContentKeyPoliciesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ContentKeyPoliciesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ContentKeyPoliciesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ContentKeyPoliciesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// JobsClientListPager provides operations for iterating over paged responses.
type JobsClientListPager struct {
	client    *JobsClient
	current   JobsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, JobsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *JobsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobCollection.ODataNextLink == nil || len(*p.current.JobCollection.ODataNextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *JobsClientListPager) NextPage(ctx context.Context) (JobsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return JobsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return JobsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return JobsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return JobsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return JobsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// LiveEventsClientListPager provides operations for iterating over paged responses.
type LiveEventsClientListPager struct {
	client    *LiveEventsClient
	current   LiveEventsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, LiveEventsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *LiveEventsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LiveEventListResult.ODataNextLink == nil || len(*p.current.LiveEventListResult.ODataNextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *LiveEventsClientListPager) NextPage(ctx context.Context) (LiveEventsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return LiveEventsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return LiveEventsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return LiveEventsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return LiveEventsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return LiveEventsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// LiveOutputsClientListPager provides operations for iterating over paged responses.
type LiveOutputsClientListPager struct {
	client    *LiveOutputsClient
	current   LiveOutputsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, LiveOutputsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *LiveOutputsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LiveOutputListResult.ODataNextLink == nil || len(*p.current.LiveOutputListResult.ODataNextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *LiveOutputsClientListPager) NextPage(ctx context.Context) (LiveOutputsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return LiveOutputsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return LiveOutputsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return LiveOutputsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return LiveOutputsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return LiveOutputsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// StreamingEndpointsClientListPager provides operations for iterating over paged responses.
type StreamingEndpointsClientListPager struct {
	client    *StreamingEndpointsClient
	current   StreamingEndpointsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StreamingEndpointsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *StreamingEndpointsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StreamingEndpointListResult.ODataNextLink == nil || len(*p.current.StreamingEndpointListResult.ODataNextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *StreamingEndpointsClientListPager) NextPage(ctx context.Context) (StreamingEndpointsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return StreamingEndpointsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return StreamingEndpointsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return StreamingEndpointsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return StreamingEndpointsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return StreamingEndpointsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// StreamingLocatorsClientListPager provides operations for iterating over paged responses.
type StreamingLocatorsClientListPager struct {
	client    *StreamingLocatorsClient
	current   StreamingLocatorsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StreamingLocatorsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *StreamingLocatorsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StreamingLocatorCollection.ODataNextLink == nil || len(*p.current.StreamingLocatorCollection.ODataNextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *StreamingLocatorsClientListPager) NextPage(ctx context.Context) (StreamingLocatorsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return StreamingLocatorsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return StreamingLocatorsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return StreamingLocatorsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return StreamingLocatorsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return StreamingLocatorsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// StreamingPoliciesClientListPager provides operations for iterating over paged responses.
type StreamingPoliciesClientListPager struct {
	client    *StreamingPoliciesClient
	current   StreamingPoliciesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StreamingPoliciesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *StreamingPoliciesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StreamingPolicyCollection.ODataNextLink == nil || len(*p.current.StreamingPolicyCollection.ODataNextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *StreamingPoliciesClientListPager) NextPage(ctx context.Context) (StreamingPoliciesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return StreamingPoliciesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return StreamingPoliciesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return StreamingPoliciesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return StreamingPoliciesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return StreamingPoliciesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// TransformsClientListPager provides operations for iterating over paged responses.
type TransformsClientListPager struct {
	client    *TransformsClient
	current   TransformsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TransformsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *TransformsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TransformCollection.ODataNextLink == nil || len(*p.current.TransformCollection.ODataNextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *TransformsClientListPager) NextPage(ctx context.Context) (TransformsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return TransformsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return TransformsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return TransformsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return TransformsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return TransformsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
