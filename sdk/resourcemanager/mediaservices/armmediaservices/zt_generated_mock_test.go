//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmediaservices_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mediaservices/armmediaservices"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/operations-list-all.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewOperationsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/operations-list-all.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.OperationCollection{
			Value: []*armmediaservices.Operation{
				{
					Name: to.Ptr("Microsoft.Media/register/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Registers the subscription for the Media Services resource provider and enables the creation of Media Services accounts"),
						Operation:   to.Ptr("Registers the Media Services Resource Provider"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Microsoft Media Services"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/unregister/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Unregisters the subscription for the Media Services resource provider"),
						Operation:   to.Ptr("Unregisters the Media Services Resource Provider"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Microsoft Media Services"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/checknameavailability/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Checks if a Media Services account name is available"),
						Operation:   to.Ptr("Check Name Availability"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Microsoft Media Services"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/operations/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Get Available Operations"),
						Operation:   to.Ptr("Get Available Operations"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Available Operations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Media Services Account"),
						Operation:   to.Ptr("Read Media Services Account"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Media Services Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Media Services Account"),
						Operation:   to.Ptr("Create or Update Media Services Account"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Media Services Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Media Services Account"),
						Operation:   to.Ptr("Delete Media Services Account"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Media Services Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/regenerateKey/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Regenerate a Media Services ACS key"),
						Operation:   to.Ptr("Regenerate Key"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Media Services Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/listKeys/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("List the ACS keys for the Media Services account"),
						Operation:   to.Ptr("List Keys"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Media Services Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/syncStorageKeys/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Synchronize the Storage Keys for an attached Azure Storage account"),
						Operation:   to.Ptr("Synchronize Storage Keys"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Media Services Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/listEdgePolicies/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("List policies for an edge device."),
						Operation:   to.Ptr("List policies for an edge device."),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Media Services Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/PrivateEndpointConnectionsApproval/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Approve Private Endpoint Connections"),
						Operation:   to.Ptr("Approve Private Endpoint Connections"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Media Services Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/eventGridFilters/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Event Grid Filter"),
						Operation:   to.Ptr("Read Event Grid Filter"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Event Grid Filter"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/eventGridFilters/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Event Grid Filter"),
						Operation:   to.Ptr("Create or Update Event Grid Filter"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Event Grid Filter"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/eventGridFilters/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Event Grid Filter"),
						Operation:   to.Ptr("Delete Event Grid Filter"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Event Grid Filter"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/accountfilters/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Account Filter"),
						Operation:   to.Ptr("Read Account Filter"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Account Filter"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/accountfilters/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Account Filter"),
						Operation:   to.Ptr("Create or Update Account Filter"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Account Filter"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/accountfilters/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Account Filter"),
						Operation:   to.Ptr("Delete Account Filter"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Account Filter"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/assets/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Asset"),
						Operation:   to.Ptr("Read Asset"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Asset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/assets/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Asset"),
						Operation:   to.Ptr("Create or Update Asset"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Asset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/assets/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Asset"),
						Operation:   to.Ptr("Delete Asset"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Asset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/assets/listContainerSas/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("List Asset Container SAS URLs"),
						Operation:   to.Ptr("List Asset Container SAS URLs"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Asset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/assets/getEncryptionKey/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Get Asset Encryption Key"),
						Operation:   to.Ptr("Get Asset Encryption Key"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Asset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/assets/listStreamingLocators/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("List Streaming Locators for Asset"),
						Operation:   to.Ptr("List Streaming Locators for Asset"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Asset"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/assets/assetfilters/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Asset Filter"),
						Operation:   to.Ptr("Read Asset Filter"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Asset Filter"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/assets/assetfilters/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Asset Filter"),
						Operation:   to.Ptr("Create or Update Asset Filter"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Asset Filter"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/assets/assetfilters/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Asset Filter"),
						Operation:   to.Ptr("Delete Asset Filter"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Asset Filter"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingPolicies/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Streaming Policy"),
						Operation:   to.Ptr("Read Streaming Policy"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Policy"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingPolicies/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Streaming Policy"),
						Operation:   to.Ptr("Create or Update Streaming Policy"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Policy"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingPolicies/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Streaming Policy"),
						Operation:   to.Ptr("Delete Streaming Policy"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Policy"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingLocators/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Streaming Locator"),
						Operation:   to.Ptr("Read Streaming Locator"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Locator"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingLocators/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Streaming Locator"),
						Operation:   to.Ptr("Create or Update Streaming Locator"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Locator"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingLocators/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Streaming Locator"),
						Operation:   to.Ptr("Delete Streaming Locator"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Locator"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingLocators/listContentKeys/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("List Content Keys"),
						Operation:   to.Ptr("List Content Keys"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Locator"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingLocators/listPaths/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("List Paths"),
						Operation:   to.Ptr("List Paths"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Locator"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Content Key Policy"),
						Operation:   to.Ptr("Read Content Key Policy"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Content Key Policy"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Content Key Policy"),
						Operation:   to.Ptr("Create or Update Content Key Policy"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Content Key Policy"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Content Key Policy"),
						Operation:   to.Ptr("Delete Content Key Policy"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Content Key Policy"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies/getPolicyPropertiesWithSecrets/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Get Policy Properties With Secrets"),
						Operation:   to.Ptr("Get Policy Properties With Secrets"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Content Key Policy"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/transforms/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Transform"),
						Operation:   to.Ptr("Read Transform"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Transform"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/transforms/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Transform"),
						Operation:   to.Ptr("Create or Update Transform"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Transform"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/transforms/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Transform"),
						Operation:   to.Ptr("Delete Transform"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Transform"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Job"),
						Operation:   to.Ptr("Read Job"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Job"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Job"),
						Operation:   to.Ptr("Create or Update Job"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Job"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Job"),
						Operation:   to.Ptr("Delete Job"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Job"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs/cancelJob/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Cancel Job"),
						Operation:   to.Ptr("Cancel Job"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Job"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/privateLinkResources/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Private Link Resource"),
						Operation:   to.Ptr("Read Private Link Resource"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("PrivateLinkResource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/privateEndpointConnectionProxies/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Private Endpoint Connection Proxy"),
						Operation:   to.Ptr("Read Private Endpoint Connection Proxy"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("PrivateEndpointConnectionProxy"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/privateEndpointConnectionProxies/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create Private Endpoint Connection Proxy"),
						Operation:   to.Ptr("Create Private Endpoint Connection Proxy"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("PrivateEndpointConnectionProxy"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/privateEndpointConnectionProxies/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete Private Endpoint Connection Proxy"),
						Operation:   to.Ptr("Delete Private Endpoint Connection Proxy"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("PrivateEndpointConnectionProxy"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/privateEndpointConnectionProxies/validate/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Validate Private Endpoint Connection Proxy"),
						Operation:   to.Ptr("Validate Private Endpoint Connection Proxy"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("PrivateEndpointConnectionProxy"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/privateEndpointConnections/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Private Endpoint Connection"),
						Operation:   to.Ptr("Read Private Endpoint Connection"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("PrivateEndpointConnection"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/privateEndpointConnections/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create Private Endpoint Connection"),
						Operation:   to.Ptr("Create Private Endpoint Connection"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("PrivateEndpointConnection"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/privateEndpointConnections/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete Private Endpoint Connection"),
						Operation:   to.Ptr("Delete Private Endpoint Connection"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("PrivateEndpointConnection"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/privateEndpointConnectionOperations/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Private Endpoint Connection Operation"),
						Operation:   to.Ptr("Read Private Endpoint Connection Operation"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Private Endpoint Connection Operation"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingEndpoints/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Streaming Endpoint"),
						Operation:   to.Ptr("Read Streaming Endpoint"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Endpoint"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingEndpoints/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Streaming Endpoint"),
						Operation:   to.Ptr("Create or Update Streaming Endpoint"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Endpoint"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingEndpoints/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Streaming Endpoint"),
						Operation:   to.Ptr("Delete Streaming Endpoint"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Endpoint"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingEndpoints/start/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Start any Streaming Endpoint Operation"),
						Operation:   to.Ptr("Start Streaming Endpoint Operation"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Endpoint"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingEndpoints/stop/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Stop any Streaming Endpoint Operation"),
						Operation:   to.Ptr("Stop Streaming Endpoint Operation"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Endpoint"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingEndpoints/scale/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Scale any Streaming Endpoint Operation"),
						Operation:   to.Ptr("Scale Streaming Endpoint Operation"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Endpoint"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingEndpoints/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource."),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Endpoints"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingEndpoints/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource."),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Endpoints"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingEndpoints/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Get list of Media Services Streaming Endpoint Metrics definitions."),
						Operation:   to.Ptr("Get list of Media Services Streaming Endpoint Metrics definitions."),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Endpoints"),
					},
					Origin: to.Ptr("system"),
					Properties: &armmediaservices.Properties{
						ServiceSpecification: &armmediaservices.ServiceSpecification{
							MetricSpecifications: []*armmediaservices.MetricSpecification{
								{
									Name:            to.Ptr("Egress"),
									AggregationType: to.Ptr(armmediaservices.MetricAggregationTypeTotal),
									Dimensions: []*armmediaservices.MetricDimension{
										{
											Name:                   to.Ptr("OutputFormat"),
											DisplayName:            to.Ptr("Output Format"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("The amount of Egress data, in bytes."),
									DisplayName:        to.Ptr("Egress"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Total")},
									Unit: to.Ptr(armmediaservices.MetricUnitBytes),
								},
								{
									Name:            to.Ptr("SuccessE2ELatency"),
									AggregationType: to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									Dimensions: []*armmediaservices.MetricDimension{
										{
											Name:                   to.Ptr("OutputFormat"),
											DisplayName:            to.Ptr("Output Format"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription: to.Ptr("The average latency for successful requests in milliseconds."),
									DisplayName:        to.Ptr("Success end to end Latency"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average"),
										to.Ptr("Minimum"),
										to.Ptr("Maximum")},
									Unit: to.Ptr(armmediaservices.MetricUnitMilliseconds),
								},
								{
									Name:            to.Ptr("Requests"),
									AggregationType: to.Ptr(armmediaservices.MetricAggregationTypeTotal),
									Dimensions: []*armmediaservices.MetricDimension{
										{
											Name:                   to.Ptr("OutputFormat"),
											DisplayName:            to.Ptr("Output Format"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("HttpStatusCode"),
											DisplayName:            to.Ptr("HTTP Status Code"),
											ToBeExportedForShoebox: to.Ptr(true),
										},
										{
											Name:                   to.Ptr("ErrorCode"),
											DisplayName:            to.Ptr("Error Code"),
											ToBeExportedForShoebox: to.Ptr(false),
										}},
									DisplayDescription: to.Ptr("Requests to a Streaming Endpoint."),
									DisplayName:        to.Ptr("Requests"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Total")},
									Unit: to.Ptr(armmediaservices.MetricUnitCount),
								},
								{
									Name:                to.Ptr("EgressBandwidth"),
									AggregationType:     to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									Dimensions:          []*armmediaservices.MetricDimension{},
									DisplayDescription:  to.Ptr("Egress bandwidth in bits per second."),
									DisplayName:         to.Ptr("Egress bandwidth"),
									LockAggregationType: to.Ptr(armmediaservices.MetricAggregationTypeTotal),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average"),
										to.Ptr("Minimum"),
										to.Ptr("Maximum")},
									Unit: to.Ptr(armmediaservices.MetricUnit("BitsPerSecond")),
								},
								{
									Name:               to.Ptr("CPU"),
									AggregationType:    to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									Dimensions:         []*armmediaservices.MetricDimension{},
									DisplayDescription: to.Ptr("CPU usage for premium streaming endpoints. This data is not available for standard streaming endpoints."),
									DisplayName:        to.Ptr("CPU usage"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average"),
										to.Ptr("Minimum"),
										to.Ptr("Maximum")},
									Unit: to.Ptr(armmediaservices.MetricUnit("Percent")),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/liveEvents/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Live Event"),
						Operation:   to.Ptr("Read Live Event"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Event"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/liveEvents/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Live Event"),
						Operation:   to.Ptr("Create or Update Live Event"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Event"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/liveEvents/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Live Event"),
						Operation:   to.Ptr("Delete Live Event"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Event"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/liveEvents/start/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Start any Live Event Operation"),
						Operation:   to.Ptr("Start Live Event Operation"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Event"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/liveEvents/stop/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Stop any Live Event Operation"),
						Operation:   to.Ptr("Stop Live Event Operation"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Event"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/liveEvents/reset/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Reset any Live Event Operation"),
						Operation:   to.Ptr("Reset Live Event Operation"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Event"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/liveEvents/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource."),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Event"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/liveEvents/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource."),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Event"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/liveEvents/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Get a list of Media Services Live Event Metrics definitions."),
						Operation:   to.Ptr("Get a list of Media Services Live Event Metrics definitions."),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Event"),
					},
					Origin: to.Ptr("system"),
					Properties: &armmediaservices.Properties{
						ServiceSpecification: &armmediaservices.ServiceSpecification{
							MetricSpecifications: []*armmediaservices.MetricSpecification{
								{
									Name:            to.Ptr("IngestBitrate"),
									AggregationType: to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									Dimensions: []*armmediaservices.MetricDimension{
										{
											Name:                   to.Ptr("TrackName"),
											DisplayName:            to.Ptr("Track name"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:       to.Ptr("The incoming bitrate ingested for a live event, in bits per second."),
									DisplayName:              to.Ptr("Live Event ingest bitrate"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("MicrosoftMediaLiveEvent"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average"),
										to.Ptr("Minimum"),
										to.Ptr("Maximum")},
									Unit: to.Ptr(armmediaservices.MetricUnit("BitsPerSecond")),
								},
								{
									Name:            to.Ptr("IngestLastTimestamp"),
									AggregationType: to.Ptr(armmediaservices.MetricAggregationType("Maximum")),
									Dimensions: []*armmediaservices.MetricDimension{
										{
											Name:                   to.Ptr("TrackName"),
											DisplayName:            to.Ptr("Track name"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:       to.Ptr("Last timestamp ingested for a live event."),
									DisplayName:              to.Ptr("Live Event ingest last timestamp"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("MicrosoftMediaLiveEvent"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Maximum")},
									Unit: to.Ptr(armmediaservices.MetricUnitMilliseconds),
								},
								{
									Name:            to.Ptr("IngestDriftValue"),
									AggregationType: to.Ptr(armmediaservices.MetricAggregationType("Maximum")),
									Dimensions: []*armmediaservices.MetricDimension{
										{
											Name:                   to.Ptr("TrackName"),
											DisplayName:            to.Ptr("Track name"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:       to.Ptr("Drift between the timestamp of the ingested content and the system clock, measured in seconds per minute. A non zero value indicates that the ingested content is arriving slower than system clock time."),
									DisplayName:              to.Ptr("Live Event ingest drift value"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("MicrosoftMediaLiveEvent"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Maximum")},
									Unit: to.Ptr(armmediaservices.MetricUnit("Seconds")),
								},
								{
									Name:            to.Ptr("LiveOutputLastTimestamp"),
									AggregationType: to.Ptr(armmediaservices.MetricAggregationType("Maximum")),
									Dimensions: []*armmediaservices.MetricDimension{
										{
											Name:                   to.Ptr("TrackName"),
											DisplayName:            to.Ptr("Track name"),
											ToBeExportedForShoebox: to.Ptr(true),
										}},
									DisplayDescription:       to.Ptr("Timestamp of the last fragment uploaded to storage for a live event output."),
									DisplayName:              to.Ptr("Last output timestamp"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("MicrosoftMediaLiveEvent"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Maximum")},
									Unit: to.Ptr(armmediaservices.MetricUnitMilliseconds),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/liveEvents/liveOutputs/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Live Output"),
						Operation:   to.Ptr("Read Live Output"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Output"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/liveEvents/liveOutputs/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Live Output"),
						Operation:   to.Ptr("Create or Update Live Output"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Output"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/liveEvents/liveOutputs/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Live Output"),
						Operation:   to.Ptr("Delete Live Output"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Output"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/streamingEndpointOperations/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Streaming Endpoint Operation"),
						Operation:   to.Ptr("Read Streaming Endpoint Operation"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Streaming Endpoint Operation"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/liveEventOperations/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Live Event Operation"),
						Operation:   to.Ptr("Read Live Event Operation"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Event Operation"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/liveOutputOperations/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Live Output Operation"),
						Operation:   to.Ptr("Read Live Output Operation"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Output Operation"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource."),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Media Services Account"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource."),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Media Services Account"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/providers/Microsoft.Insights/logDefinitions/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Gets the available logs for a Media Services Account"),
						Operation:   to.Ptr("Read mediaservices log definitions"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("The log definition of mediaservices"),
					},
					Origin: to.Ptr("system"),
					Properties: &armmediaservices.Properties{
						ServiceSpecification: &armmediaservices.ServiceSpecification{
							LogSpecifications: []*armmediaservices.LogSpecification{
								{
									Name:         to.Ptr("KeyDeliveryRequests"),
									BlobDuration: to.Ptr("PT1H"),
									DisplayName:  to.Ptr("Key Delivery Requests"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/mediaservices/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Get list of Media Services Metric definitions."),
						Operation:   to.Ptr("Get list of Media Services Metric definitions."),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Media Service"),
					},
					Origin: to.Ptr("system"),
					Properties: &armmediaservices.Properties{
						ServiceSpecification: &armmediaservices.ServiceSpecification{
							MetricSpecifications: []*armmediaservices.MetricSpecification{
								{
									Name:                     to.Ptr("AssetQuota"),
									AggregationType:          to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									DisplayDescription:       to.Ptr("How many assets are allowed for current media service account"),
									DisplayName:              to.Ptr("Asset quota"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("MediaServiceQuotaAndUsage"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average")},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr(armmediaservices.MetricUnitCount),
								},
								{
									Name:                     to.Ptr("AssetCount"),
									AggregationType:          to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									DisplayDescription:       to.Ptr("How many assets are already created in current media service account"),
									DisplayName:              to.Ptr("Asset count"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("MediaServiceQuotaAndUsage"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average")},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr(armmediaservices.MetricUnitCount),
								},
								{
									Name:                     to.Ptr("AssetQuotaUsedPercentage"),
									AggregationType:          to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									DisplayDescription:       to.Ptr("Asset used percentage in current media service account"),
									DisplayName:              to.Ptr("Asset quota used percentage"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("MediaServiceQuotaAndUsage"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average")},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr(armmediaservices.MetricUnit("Percent")),
								},
								{
									Name:                     to.Ptr("ContentKeyPolicyQuota"),
									AggregationType:          to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									DisplayDescription:       to.Ptr("How many content key polices are allowed for current media service account"),
									DisplayName:              to.Ptr("Content Key Policy quota"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("MediaServiceQuotaAndUsage"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average")},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr(armmediaservices.MetricUnitCount),
								},
								{
									Name:                     to.Ptr("ContentKeyPolicyCount"),
									AggregationType:          to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									DisplayDescription:       to.Ptr("How many content key policies are already created in current media service account"),
									DisplayName:              to.Ptr("Content Key Policy count"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("MediaServiceQuotaAndUsage"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average")},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr(armmediaservices.MetricUnitCount),
								},
								{
									Name:                     to.Ptr("ContentKeyPolicyQuotaUsedPercentage"),
									AggregationType:          to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									DisplayDescription:       to.Ptr("Content Key Policy used percentage in current media service account"),
									DisplayName:              to.Ptr("Content Key Policy quota used percentage"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("MediaServiceQuotaAndUsage"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average")},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr(armmediaservices.MetricUnit("Percent")),
								},
								{
									Name:                     to.Ptr("StreamingPolicyQuota"),
									AggregationType:          to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									DisplayDescription:       to.Ptr("How many streaming policies are allowed for current media service account"),
									DisplayName:              to.Ptr("Streaming Policy quota"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("MediaServiceQuotaAndUsage"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average")},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr(armmediaservices.MetricUnitCount),
								},
								{
									Name:                     to.Ptr("StreamingPolicyCount"),
									AggregationType:          to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									DisplayDescription:       to.Ptr("How many streaming policies are already created in current media service account"),
									DisplayName:              to.Ptr("Streaming Policy count"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("MediaServiceQuotaAndUsage"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average")},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr(armmediaservices.MetricUnitCount),
								},
								{
									Name:                     to.Ptr("StreamingPolicyQuotaUsedPercentage"),
									AggregationType:          to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									DisplayDescription:       to.Ptr("Streaming Policy used percentage in current media service account"),
									DisplayName:              to.Ptr("Streaming Policy quota used percentage"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("MediaServiceQuotaAndUsage"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average")},
									SupportedTimeGrainTypes: []*string{
										to.Ptr("PT1H"),
										to.Ptr("PT6H"),
										to.Ptr("PT12H"),
										to.Ptr("P1D")},
									Unit: to.Ptr(armmediaservices.MetricUnit("Percent")),
								},
								{
									Name:                     to.Ptr("ChannelsAndLiveEventsCount"),
									AggregationType:          to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									DisplayDescription:       to.Ptr("The total number of live events in the current media services account"),
									DisplayName:              to.Ptr("Live event count"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("ClusterResource_ChannelsAndLiveEvents"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average")},
									Unit: to.Ptr(armmediaservices.MetricUnitCount),
								},
								{
									Name:                     to.Ptr("RunningChannelsAndLiveEventsCount"),
									AggregationType:          to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									DisplayDescription:       to.Ptr("The total number of running live events in the current media services account"),
									DisplayName:              to.Ptr("Running live event count"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("ClusterResource_ChannelsAndLiveEvents"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average")},
									Unit: to.Ptr(armmediaservices.MetricUnitCount),
								},
								{
									Name:                     to.Ptr("MaxChannelsAndLiveEventsCount"),
									AggregationType:          to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									DisplayDescription:       to.Ptr("The maximum number of live events allowed in the current media services account"),
									DisplayName:              to.Ptr("Max live event quota"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("ClusterResource_ChannelsAndLiveEvents"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average")},
									Unit: to.Ptr(armmediaservices.MetricUnitCount),
								},
								{
									Name:                     to.Ptr("MaxRunningChannelsAndLiveEventsCount"),
									AggregationType:          to.Ptr(armmediaservices.MetricAggregationTypeAverage),
									DisplayDescription:       to.Ptr("The maximum number of running live events allowed in the current media services account"),
									DisplayName:              to.Ptr("Max running live event quota"),
									EnableRegionalMdmAccount: to.Ptr(true),
									SourceMdmNamespace:       to.Ptr("ClusterResource_ChannelsAndLiveEvents"),
									SupportedAggregationTypes: []*string{
										to.Ptr("Average")},
									Unit: to.Ptr(armmediaservices.MetricUnitCount),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read a Video Analyzer Account"),
						Operation:   to.Ptr("Read a Video Analyzer Account"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Video Analyzer Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Write a Video Analyzer Account"),
						Operation:   to.Ptr("Write a Video Analyzer Account"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Video Analyzer Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete a Video Analyzer Account"),
						Operation:   to.Ptr("Delete a Video Analyzer Account"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Video Analyzer Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/videos/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Video"),
						Operation:   to.Ptr("Read Video"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Video Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/videos/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Video"),
						Operation:   to.Ptr("Create or Update Video"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Video Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/videos/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Video"),
						Operation:   to.Ptr("Delete Video"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Video Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/videos/listStreamingToken/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Generates a streaming token which can be used for video playback"),
						Operation:   to.Ptr("Generates a streaming token which can be used for video playback"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Video Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/accessPolicies/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Access Policy"),
						Operation:   to.Ptr("Read Access Policy"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Access Policy Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/accessPolicies/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Access Policy"),
						Operation:   to.Ptr("Create or Update Access Policy"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Access Policy Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/accessPolicies/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Access Policy"),
						Operation:   to.Ptr("Delete Access Policy"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Access Policy Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/edgeModules/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Edge Module"),
						Operation:   to.Ptr("Read Edge Module"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Edge Module Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/edgeModules/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Edge Module"),
						Operation:   to.Ptr("Create or Update Edge Module"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Edge Module Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/edgeModules/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Edge Module"),
						Operation:   to.Ptr("Delete Edge Module"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Edge Module Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/edgeModules/listProvisioningToken/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Creates a new provisioning token. A provisioning token allows for a single instance of Azure Video analyzer IoT edge module to be initialized and authorized to the cloud account. The provisioning token itself is short lived and it is only used for the initial handshake between IoT edge module and the cloud. After the initial handshake, the IoT edge module will agree on a set of authentication keys which will be auto-rotated as long as the module is able to periodically connect to the cloud. A new provisioning token can be generated for the same IoT edge module in case the module state lost or reset"),
						Operation:   to.Ptr("Creates a new provisioning token"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Edge Module Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/pipelineTopologies/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Pipeline Topology"),
						Operation:   to.Ptr("Read Pipeline Topology"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Pipeline Topology Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/pipelineTopologies/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Pipeline Topology"),
						Operation:   to.Ptr("Create or Update Pipeline Topology"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Pipeline Topology Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/pipelineTopologies/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Pipeline Topology"),
						Operation:   to.Ptr("Delete Pipeline Topology"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Pipeline Topology Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/livePipelines/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Live Pipeline"),
						Operation:   to.Ptr("Read Live Pipeline"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Pipeline Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/livePipelines/write"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Create or Update any Live Pipeline"),
						Operation:   to.Ptr("Create or Update Live Pipeline"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Pipeline Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/livePipelines/delete"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Delete any Live Pipeline"),
						Operation:   to.Ptr("Delete Live Pipeline"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Pipeline Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/livePipelines/activate/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Activate any Live Pipeline"),
						Operation:   to.Ptr("Activate Live Pipeline"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Pipeline Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/livePipelines/deactivate/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Deactivate any Live Pipeline"),
						Operation:   to.Ptr("Deactivate Live Pipeline"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Pipeline Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/videoAnalyzers/livePipelines/operationsStatus/read"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Read any Live Pipeline operation status"),
						Operation:   to.Ptr("Read Live Pipeline operation status"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Live Pipeline operation status Resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Media/locations/checkNameAvailability/action"),
					Display: &armmediaservices.OperationDisplay{
						Description: to.Ptr("Checks if a Media Services account name is available"),
						Operation:   to.Ptr("Check Name Availability"),
						Provider:    to.Ptr("Microsoft Media Services"),
						Resource:    to.Ptr("Microsoft Media Services"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationCollection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/operations-list-all.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMediaservices_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-list-all-accounts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Media Services accounts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("contoso",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-list-all-accounts.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.MediaServiceCollection{
			Value: []*armmediaservices.MediaService{
				{
					Name:     to.Ptr("contosotv"),
					Type:     to.Ptr("Microsoft.Media/mediaservices"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosotv"),
					Location: to.Ptr("South Central US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armmediaservices.MediaServiceProperties{
						MediaServiceID: to.Ptr("6ac94f91-283c-4492-85a7-57976928c17d"),
						StorageAccounts: []*armmediaservices.StorageAccount{
							{
								Type: to.Ptr(armmediaservices.StorageAccountTypePrimary),
								ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Storage/storageAccounts/contosotvstore"),
							}},
					},
				},
				{
					Name:     to.Ptr("contosomovies"),
					Type:     to.Ptr("Microsoft.Media/mediaservices"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomovies"),
					Location: to.Ptr("South Central US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armmediaservices.MediaServiceProperties{
						MediaServiceID: to.Ptr("72681c0f-9dd1-4f1c-95c9-8a8d7d31c4ee"),
						StorageAccounts: []*armmediaservices.StorageAccount{
							{
								Type: to.Ptr(armmediaservices.StorageAccountTypePrimary),
								ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Storage/storageAccounts/contosomoviesstore"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MediaServiceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MediaServiceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-list-all-accounts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMediaservices_Get(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-get-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Media Services account by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"contoso",
		"contosotv",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-get-by-name.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.MediaService{
			Location: to.Ptr("South Central US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value3"),
			},
			Identity: &armmediaservices.MediaServiceIdentity{
				Type: to.Ptr("UserAssigned"),
				UserAssignedIdentities: map[string]*armmediaservices.UserAssignedManagedIdentity{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {
						ClientID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
						PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2": {
						ClientID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
						PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
			},
			Properties: &armmediaservices.MediaServiceProperties{
				Encryption: &armmediaservices.AccountEncryption{
					Type: to.Ptr(armmediaservices.AccountEncryptionKeyTypeCustomerKey),
					Identity: &armmediaservices.ResourceIdentity{
						UseSystemAssignedIdentity: to.Ptr(false),
						UserAssignedIdentity:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1"),
					},
					KeyVaultProperties: &armmediaservices.KeyVaultProperties{
						CurrentKeyIdentifier: to.Ptr("https://keyvault.vault.azure.net/keys/key1/ver1"),
						KeyIdentifier:        to.Ptr("https://keyvault.vault.azure.net/keys/key1"),
					},
				},
				StorageAccounts: []*armmediaservices.StorageAccount{
					{
						Type: to.Ptr(armmediaservices.StorageAccountTypePrimary),
						ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Storage/storageAccounts/contososportsstore"),
						Identity: &armmediaservices.ResourceIdentity{
							UseSystemAssignedIdentity: to.Ptr(false),
							UserAssignedIdentity:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1"),
						},
					}},
				StorageAuthentication: to.Ptr(armmediaservices.StorageAuthenticationManagedIdentity),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MediaService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MediaService)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-get-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMediaservices_CreateOrUpdate(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Media Services account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"contoso",
		"contososports",
		armmediaservices.MediaService{
			Location: to.Ptr("South Central US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Identity: &armmediaservices.MediaServiceIdentity{
				Type: to.Ptr("UserAssigned"),
				UserAssignedIdentities: map[string]*armmediaservices.UserAssignedManagedIdentity{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {},
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2": {},
				},
			},
			Properties: &armmediaservices.MediaServiceProperties{
				Encryption: &armmediaservices.AccountEncryption{
					Type: to.Ptr(armmediaservices.AccountEncryptionKeyTypeCustomerKey),
					Identity: &armmediaservices.ResourceIdentity{
						UseSystemAssignedIdentity: to.Ptr(false),
						UserAssignedIdentity:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1"),
					},
					KeyVaultProperties: &armmediaservices.KeyVaultProperties{
						KeyIdentifier: to.Ptr("https://keyvault.vault.azure.net/keys/key1"),
					},
				},
				StorageAccounts: []*armmediaservices.StorageAccount{
					{
						Type: to.Ptr(armmediaservices.StorageAccountTypePrimary),
						ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Storage/storageAccounts/contososportsstore"),
						Identity: &armmediaservices.ResourceIdentity{
							UseSystemAssignedIdentity: to.Ptr(false),
							UserAssignedIdentity:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1"),
						},
					}},
				StorageAuthentication: to.Ptr(armmediaservices.StorageAuthenticationManagedIdentity),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.MediaService{
			Location: to.Ptr("South Central US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Identity: &armmediaservices.MediaServiceIdentity{
				Type: to.Ptr("UserAssigned"),
				UserAssignedIdentities: map[string]*armmediaservices.UserAssignedManagedIdentity{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {},
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2": {},
				},
			},
			Properties: &armmediaservices.MediaServiceProperties{
				Encryption: &armmediaservices.AccountEncryption{
					Type: to.Ptr(armmediaservices.AccountEncryptionKeyTypeCustomerKey),
					Identity: &armmediaservices.ResourceIdentity{
						UseSystemAssignedIdentity: to.Ptr(false),
						UserAssignedIdentity:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1"),
					},
					KeyVaultProperties: &armmediaservices.KeyVaultProperties{
						CurrentKeyIdentifier: to.Ptr("https://keyvault.vault.azure.net/keys/key1/ver1"),
						KeyIdentifier:        to.Ptr("https://keyvault.vault.azure.net/keys/key1"),
					},
				},
				StorageAccounts: []*armmediaservices.StorageAccount{
					{
						Type: to.Ptr(armmediaservices.StorageAccountTypePrimary),
						ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Storage/storageAccounts/contososportsstore"),
						Identity: &armmediaservices.ResourceIdentity{
							UseSystemAssignedIdentity: to.Ptr(false),
							UserAssignedIdentity:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1"),
						},
					}},
				StorageAuthentication: to.Ptr(armmediaservices.StorageAuthenticationManagedIdentity),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MediaService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MediaService)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMediaservices_Delete(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Media Services account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"contoso",
		"contososports",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-delete.json: %v", err)
	}
}

func TestMediaservices_Update(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a Media Services accounts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"contoso",
		"contososports",
		armmediaservices.MediaServiceUpdate{
			Tags: map[string]*string{
				"key1": to.Ptr("value3"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.MediaService{
			Location: to.Ptr("South Central US"),
			Tags: map[string]*string{
				"key1": to.Ptr("value3"),
			},
			Identity: &armmediaservices.MediaServiceIdentity{
				Type: to.Ptr("UserAssigned"),
				UserAssignedIdentities: map[string]*armmediaservices.UserAssignedManagedIdentity{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {},
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2": {},
				},
			},
			Properties: &armmediaservices.MediaServiceProperties{
				Encryption: &armmediaservices.AccountEncryption{
					Type: to.Ptr(armmediaservices.AccountEncryptionKeyTypeCustomerKey),
					Identity: &armmediaservices.ResourceIdentity{
						UseSystemAssignedIdentity: to.Ptr(false),
						UserAssignedIdentity:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1"),
					},
					KeyVaultProperties: &armmediaservices.KeyVaultProperties{
						CurrentKeyIdentifier: to.Ptr("https://keyvault.vault.azure.net/keys/key1/ver1"),
						KeyIdentifier:        to.Ptr("https://keyvault.vault.azure.net/keys/key1"),
					},
				},
				StorageAccounts: []*armmediaservices.StorageAccount{
					{
						Type: to.Ptr(armmediaservices.StorageAccountTypePrimary),
						ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Storage/storageAccounts/contososportsstore"),
						Identity: &armmediaservices.ResourceIdentity{
							UseSystemAssignedIdentity: to.Ptr(false),
							UserAssignedIdentity:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1"),
						},
					}},
				StorageAuthentication: to.Ptr(armmediaservices.StorageAuthenticationManagedIdentity),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MediaService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MediaService)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMediaservices_SyncStorageKeys(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-sync-storage-keys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Synchronizes Storage Account Keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.SyncStorageKeys(ctx,
		"contoso",
		"contososports",
		armmediaservices.SyncStorageKeysInput{
			ID: to.Ptr("contososportsstore"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-sync-storage-keys.json: %v", err)
	}
}

func TestMediaservices_ListEdgePolicies(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-list-media-edge-policies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the media edge policies."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListEdgePolicies(ctx,
		"contoso",
		"contososports",
		armmediaservices.ListEdgePoliciesInput{
			DeviceID: to.Ptr("contosiothubhost_contosoiotdevice"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-list-media-edge-policies.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.EdgePolicies{
			UsageDataCollectionPolicy: &armmediaservices.EdgeUsageDataCollectionPolicy{
				DataCollectionFrequency: to.Ptr("PT10M"),
				DataReportingFrequency:  to.Ptr("PT1H"),
				EventHubDetails: &armmediaservices.EdgeUsageDataEventHub{
					Name:      to.Ptr("ams-x"),
					Namespace: to.Ptr("ams-y-1-1"),
					Token:     to.Ptr("SharedAccessSignature sr=sb%3a%2f%2fams-x.servicebus.windows.net%2fams-y-1-1%2fPublishers%2f96a510a1-0565-492a-a67f-83d1aed1d1f6_SampleDeviceId&sig=signature_value%3d&se=1584073736&skn=EdgeUsageData"),
				},
				MaxAllowedUnreportedUsageDuration: to.Ptr("PT36H"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EdgePolicies) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EdgePolicies)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-list-media-edge-policies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMediaservices_ListBySubscription(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-subscription-list-all-accounts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Media Services accounts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-subscription-list-all-accounts.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.MediaServiceCollection{
			Value: []*armmediaservices.MediaService{
				{
					Name:     to.Ptr("contosotv"),
					Type:     to.Ptr("Microsoft.Media/mediaservices"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosotv"),
					Location: to.Ptr("South Central US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armmediaservices.MediaServiceProperties{
						MediaServiceID: to.Ptr("6ac94f91-283c-4492-85a7-57976928c17d"),
						StorageAccounts: []*armmediaservices.StorageAccount{
							{
								Type: to.Ptr(armmediaservices.StorageAccountTypePrimary),
								ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Storage/storageAccounts/contosotvstore"),
							}},
					},
				},
				{
					Name:     to.Ptr("contosomovies"),
					Type:     to.Ptr("Microsoft.Media/mediaservices"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomovies"),
					Location: to.Ptr("South Central US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armmediaservices.MediaServiceProperties{
						MediaServiceID: to.Ptr("72681c0f-9dd1-4f1c-95c9-8a8d7d31c4ee"),
						StorageAccounts: []*armmediaservices.StorageAccount{
							{
								Type: to.Ptr(armmediaservices.StorageAccountTypePrimary),
								ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Storage/storageAccounts/contosomoviesstore"),
							}},
					},
				},
				{
					Name:     to.Ptr("fabrikamnews"),
					Type:     to.Ptr("Microsoft.Media/mediaservices"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/fabrikamnews"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armmediaservices.MediaServiceProperties{
						MediaServiceID: to.Ptr("d96036f9-4e37-491d-8c29-5bc53a29dfcd"),
						StorageAccounts: []*armmediaservices.StorageAccount{
							{
								Type: to.Ptr(armmediaservices.StorageAccountTypePrimary),
								ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/fabrikam/providers/Microsoft.Storage/storageAccounts/fabrikamnewsstore"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MediaServiceCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MediaServiceCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-subscription-list-all-accounts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-link-resources-list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get list of all group IDs."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.List(ctx,
		"contoso",
		"contososports",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-link-resources-list.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.PrivateLinkResourceListResult{
			Value: []*armmediaservices.PrivateLinkResource{
				{
					Name: to.Ptr("keydelivery"),
					Type: to.Ptr("Microsoft.Media/mediaservices/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/fabrikam/providers/Microsoft.Media/mediaservices/contososports/privateLinkResources/keydelivery"),
					Properties: &armmediaservices.PrivateLinkResourceProperties{
						GroupID: to.Ptr("keydelivery"),
						RequiredMembers: []*string{
							to.Ptr("keydelivery")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-link-resources-list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-link-resources-get-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a group ID."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"contoso",
		"contososports",
		"keydelivery",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-link-resources-get-by-name.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.PrivateLinkResource{
			Name: to.Ptr("keydelivery"),
			Type: to.Ptr("Microsoft.Media/mediaservices/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/fabrikam/providers/Microsoft.Media/mediaservices/contososports/privateLinkResources/keydelivery"),
			Properties: &armmediaservices.PrivateLinkResourceProperties{
				GroupID: to.Ptr("keydelivery"),
				RequiredMembers: []*string{
					to.Ptr("keydelivery")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-link-resources-get-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-endpoint-connection-list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all private endpoint connections."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.List(ctx,
		"contoso",
		"contososports",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-endpoint-connection-list.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.PrivateEndpointConnectionListResult{
			Value: []*armmediaservices.PrivateEndpointConnection{
				{
					Name: to.Ptr("cn1"),
					Type: to.Ptr("Microsoft.Media/mediaservices/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/fabrikam/providers/Microsoft.Media/mediaservices/contososports/privateEndpointConnections/cn1"),
					Properties: &armmediaservices.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armmediaservices.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/reosuceGroup1/providers/Microsoft.Network/privateEndpoints/pe1"),
						},
						PrivateLinkServiceConnectionState: &armmediaservices.PrivateLinkServiceConnectionState{
							Description: to.Ptr("Test description"),
							Status:      to.Ptr(armmediaservices.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armmediaservices.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("cn2"),
					Type: to.Ptr("Microsoft.Media/mediaservices/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/fabrikam/providers/Microsoft.Media/mediaservices/contososports/privateEndpointConnections/cn2"),
					Properties: &armmediaservices.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armmediaservices.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/22222222-2222-2222-2222-222222222222/resourceGroups/reosuceGroup2/providers/Microsoft.Network/privateEndpoints/pe2"),
						},
						PrivateLinkServiceConnectionState: &armmediaservices.PrivateLinkServiceConnectionState{
							Description: to.Ptr("Test description"),
							Status:      to.Ptr(armmediaservices.PrivateEndpointServiceConnectionStatusPending),
						},
						ProvisioningState: to.Ptr(armmediaservices.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-endpoint-connection-list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-endpoint-connection-get-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"contoso",
		"contososports",
		"connectionName1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-endpoint-connection-get-by-name.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.PrivateEndpointConnection{
			Name: to.Ptr("connectionName1"),
			Type: to.Ptr("Microsoft.Media/mediaservices/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/fabrikam/providers/Microsoft.Media/mediaservices/contososports/privateEndpointConnections/connectionName1"),
			Properties: &armmediaservices.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armmediaservices.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/reosuceGroup1/providers/Microsoft.Network/privateEndpoints/privateEndpointName1"),
				},
				PrivateLinkServiceConnectionState: &armmediaservices.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Test description."),
					Status:      to.Ptr(armmediaservices.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armmediaservices.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-endpoint-connection-get-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-endpoint-connection-put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"contoso",
		"contososports",
		"connectionName1",
		armmediaservices.PrivateEndpointConnection{
			Properties: &armmediaservices.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armmediaservices.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Test description."),
					Status:      to.Ptr(armmediaservices.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-endpoint-connection-put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.PrivateEndpointConnection{
			Name: to.Ptr("connectionName1"),
			Type: to.Ptr("Microsoft.Media/mediaservices/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/fabrikam/providers/Microsoft.Media/mediaservices/contososports/privateEndpointConnections/connectionName1"),
			Properties: &armmediaservices.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armmediaservices.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/reosuceGroup1/providers/Microsoft.Network/privateEndpoints/privateEndpointName1"),
				},
				PrivateLinkServiceConnectionState: &armmediaservices.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Test description."),
					Status:      to.Ptr(armmediaservices.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armmediaservices.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-endpoint-connection-put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-endpoint-connection-delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"contoso",
		"contososports",
		"connectionName1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/private-endpoint-connection-delete.json: %v", err)
	}
}

func TestLocations_CheckNameAvailability(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-check-name-availability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check Name Availability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewLocationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"japanwest",
		armmediaservices.CheckNameAvailabilityInput{
			Name: to.Ptr("contosotv"),
			Type: to.Ptr("videoAnalyzers"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-check-name-availability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.EntityNameAvailabilityCheckOutput{
			Message:       to.Ptr(""),
			NameAvailable: to.Ptr(true),
			Reason:        to.Ptr("None"),
		}
		if !reflect.DeepEqual(exampleRes, res.EntityNameAvailabilityCheckOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EntityNameAvailabilityCheckOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accounts-check-name-availability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccountFilters_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accountFilters-list-all.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Account Filters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAccountFiltersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("contoso",
		"contosomedia",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accountFilters-list-all.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.AccountFilterCollection{
			Value: []*armmediaservices.AccountFilter{
				{
					Name: to.Ptr("accountFilterWithTimeWindowAndTrack"),
					Type: to.Ptr("Microsoft.Media/mediaservices/accountFilters"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/accountFilters/accountFilterWithTimeWindowAndTrack"),
					Properties: &armmediaservices.MediaFilterProperties{
						FirstQuality: &armmediaservices.FirstQuality{
							Bitrate: to.Ptr[int32](128000),
						},
						PresentationTimeRange: &armmediaservices.PresentationTimeRange{
							EndTimestamp:               to.Ptr[int64](170000000),
							ForceEndTimestamp:          to.Ptr(false),
							LiveBackoffDuration:        to.Ptr[int64](0),
							PresentationWindowDuration: to.Ptr[int64](9223372036854775000),
							StartTimestamp:             to.Ptr[int64](0),
							Timescale:                  to.Ptr[int64](10000000),
						},
						Tracks: []*armmediaservices.FilterTrackSelection{
							{
								TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
										Value:     to.Ptr("Audio"),
									},
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeLanguage),
										Value:     to.Ptr("en"),
									},
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeFourCC),
										Value:     to.Ptr("EC-3"),
									}},
							},
							{
								TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
										Value:     to.Ptr("Video"),
									},
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeBitrate),
										Value:     to.Ptr("3000000-5000000"),
									}},
							}},
					},
				},
				{
					Name: to.Ptr("accountFilterWithTrack"),
					Type: to.Ptr("Microsoft.Media/mediaservices/accountFilters"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/accountFilters/accountFilterWithTrack"),
					Properties: &armmediaservices.MediaFilterProperties{
						Tracks: []*armmediaservices.FilterTrackSelection{
							{
								TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
										Value:     to.Ptr("Audio"),
									},
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeLanguage),
										Value:     to.Ptr("en"),
									},
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeFourCC),
										Value:     to.Ptr("EC-3"),
									}},
							},
							{
								TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
										Value:     to.Ptr("Video"),
									},
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeBitrate),
										Value:     to.Ptr("3000000-5000000"),
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountFilterCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountFilterCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accountFilters-list-all.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccountFilters_Get(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accountFilters-get-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Account Filter by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAccountFiltersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"contoso",
		"contosomedia",
		"accountFilterWithTrack",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accountFilters-get-by-name.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.AccountFilter{
			Name: to.Ptr("accountFilterWithTrack"),
			Type: to.Ptr("Microsoft.Media/mediaservices/accountFilters"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/accountFilters/accountFilterWithTrack"),
			Properties: &armmediaservices.MediaFilterProperties{
				Tracks: []*armmediaservices.FilterTrackSelection{
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Audio"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeLanguage),
								Value:     to.Ptr("en"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeFourCC),
								Value:     to.Ptr("EC-3"),
							}},
					},
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Video"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeBitrate),
								Value:     to.Ptr("3000000-5000000"),
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccountFilter) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountFilter)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accountFilters-get-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccountFilters_CreateOrUpdate(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accountFilters-create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an Account Filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAccountFiltersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"contoso",
		"contosomedia",
		"newAccountFilter",
		armmediaservices.AccountFilter{
			Properties: &armmediaservices.MediaFilterProperties{
				FirstQuality: &armmediaservices.FirstQuality{
					Bitrate: to.Ptr[int32](128000),
				},
				PresentationTimeRange: &armmediaservices.PresentationTimeRange{
					EndTimestamp:               to.Ptr[int64](170000000),
					ForceEndTimestamp:          to.Ptr(false),
					LiveBackoffDuration:        to.Ptr[int64](0),
					PresentationWindowDuration: to.Ptr[int64](9223372036854775000),
					StartTimestamp:             to.Ptr[int64](0),
					Timescale:                  to.Ptr[int64](10000000),
				},
				Tracks: []*armmediaservices.FilterTrackSelection{
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Audio"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeLanguage),
								Value:     to.Ptr("en"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeFourCC),
								Value:     to.Ptr("EC-3"),
							}},
					},
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Video"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeBitrate),
								Value:     to.Ptr("3000000-5000000"),
							}},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accountFilters-create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.AccountFilter{
			Name: to.Ptr("newAccountFilter"),
			Type: to.Ptr("Microsoft.Media/mediaservices/accountFilters"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/accountFilters/newAccountFilter"),
			Properties: &armmediaservices.MediaFilterProperties{
				FirstQuality: &armmediaservices.FirstQuality{
					Bitrate: to.Ptr[int32](128000),
				},
				PresentationTimeRange: &armmediaservices.PresentationTimeRange{
					EndTimestamp:               to.Ptr[int64](170000000),
					ForceEndTimestamp:          to.Ptr(false),
					LiveBackoffDuration:        to.Ptr[int64](0),
					PresentationWindowDuration: to.Ptr[int64](9223372036854775000),
					StartTimestamp:             to.Ptr[int64](0),
					Timescale:                  to.Ptr[int64](10000000),
				},
				Tracks: []*armmediaservices.FilterTrackSelection{
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Audio"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeLanguage),
								Value:     to.Ptr("en"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeFourCC),
								Value:     to.Ptr("EC-3"),
							}},
					},
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Video"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeBitrate),
								Value:     to.Ptr("3000000-5000000"),
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccountFilter) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountFilter)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accountFilters-create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccountFilters_Delete(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accountFilters-delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an Account Filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAccountFiltersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"contoso",
		"contosomedia",
		"accountFilterWithTimeWindowAndTrack",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accountFilters-delete.json: %v", err)
	}
}

func TestAccountFilters_Update(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accountFilters-update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an Account Filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAccountFiltersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"contoso",
		"contosomedia",
		"accountFilterWithTimeWindowAndTrack",
		armmediaservices.AccountFilter{
			Properties: &armmediaservices.MediaFilterProperties{
				FirstQuality: &armmediaservices.FirstQuality{
					Bitrate: to.Ptr[int32](128000),
				},
				PresentationTimeRange: &armmediaservices.PresentationTimeRange{
					EndTimestamp:               to.Ptr[int64](170000000),
					ForceEndTimestamp:          to.Ptr(false),
					LiveBackoffDuration:        to.Ptr[int64](0),
					PresentationWindowDuration: to.Ptr[int64](9223372036854775000),
					StartTimestamp:             to.Ptr[int64](10),
					Timescale:                  to.Ptr[int64](10000000),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accountFilters-update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.AccountFilter{
			Name: to.Ptr("accountFilterWithTimeWindowAndTrack"),
			Type: to.Ptr("Microsoft.Media/mediaservices/accountFilters"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/accountFilters/accountFilterWithTimeWindowAndTrack"),
			Properties: &armmediaservices.MediaFilterProperties{
				FirstQuality: &armmediaservices.FirstQuality{
					Bitrate: to.Ptr[int32](128000),
				},
				PresentationTimeRange: &armmediaservices.PresentationTimeRange{
					EndTimestamp:               to.Ptr[int64](170000000),
					ForceEndTimestamp:          to.Ptr(false),
					LiveBackoffDuration:        to.Ptr[int64](0),
					PresentationWindowDuration: to.Ptr[int64](9223372036854775000),
					StartTimestamp:             to.Ptr[int64](10),
					Timescale:                  to.Ptr[int64](10000000),
				},
				Tracks: []*armmediaservices.FilterTrackSelection{
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Audio"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeLanguage),
								Value:     to.Ptr("en"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeFourCC),
								Value:     to.Ptr("EC-3"),
							}},
					},
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Video"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeBitrate),
								Value:     to.Ptr("3000000-5000000"),
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccountFilter) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountFilter)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/accountFilters-update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssets_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-in-date-range.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Asset created in a date range"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAssetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("contoso",
		"contosomedia",
		&armmediaservices.AssetsClientListOptions{Filter: to.Ptr("properties/created gt 2012-06-01 and properties/created lt 2013-07-01"),
			Top:     nil,
			Orderby: to.Ptr("properties/created"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-in-date-range.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.AssetCollection{
			Value: []*armmediaservices.Asset{
				{
					Name: to.Ptr("ClimbingMountRainier"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountRainier"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("A documentary showing the ascent of Mount Rainier"),
						AlternateID:             to.Ptr("CLIMB00001"),
						AssetID:                 to.Ptr("f8eea45c-b814-44c2-9c42-a5174ebdee4c"),
						Container:               to.Ptr("asset-f8eea45c-b814-44c2-9c42-a5174ebdee4c"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2012-11-01T00:00:00Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2012-11-01T00:00:00Z"); return t }()),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
					},
				},
				{
					Name: to.Ptr("ClimbingMountAdams"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountAdams"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("A documentary showing the ascent of Mount Adams"),
						AlternateID:             to.Ptr("CLIMB00002"),
						AssetID:                 to.Ptr("1b648c1a-2268-461d-a1da-742bde23db40"),
						Container:               to.Ptr("asset-1b648c1a-2268-461d-a1da-742bde23db40"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2013-02-01T00:00:00Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-01T00:00:00Z"); return t }()),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
					},
				},
				{
					Name: to.Ptr("ClimbingMountSaintHelens"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountSaintHelens"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("A documentary showing the ascent of Saint Helens"),
						AlternateID:             to.Ptr("CLIMB00005"),
						AssetID:                 to.Ptr("14d58c40-ec1f-446c-b041-f5cff949bd1d"),
						Container:               to.Ptr("asset-14d58c40-ec1f-446c-b041-f5cff949bd1d"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2013-03-01T00:00:00Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2013-04-01T00:00:00Z"); return t }()),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatMediaStorageClientEncryption),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssetCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssetCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-in-date-range.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-by-date.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Asset ordered by date"},
	})
	client = armmediaservices.NewAssetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("contoso",
		"contosomedia",
		&armmediaservices.AssetsClientListOptions{Filter: nil,
			Top:     nil,
			Orderby: to.Ptr("properties/created"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-by-date.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.AssetCollection{
			Value: []*armmediaservices.Asset{
				{
					Name: to.Ptr("ClimbingMountBaker"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountBaker"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("A documentary showing the ascent of Mount Baker"),
						AlternateID:             to.Ptr("CLIMB00004"),
						AssetID:                 to.Ptr("89af1750-e681-4fbe-8c4c-9a5567867a6b"),
						Container:               to.Ptr("asset-89af1750-e681-4fbe-8c4c-9a5567867a6b"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2011-02-01T00:00:00Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-01T00:00:00Z"); return t }()),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
					},
				},
				{
					Name: to.Ptr("ClimbingLittleTahoma"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingLittleTahoma"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("A documentary showing the ascent of Little Tahoma"),
						AlternateID:             to.Ptr("CLIMB00003"),
						AssetID:                 to.Ptr("e6c7ee55-d1f5-48bc-9c36-2d2157aadbbe"),
						Container:               to.Ptr("asset-e6c7ee55-d1f5-48bc-9c36-2d2157aadbbe"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2012-04-01T00:00:00Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-01T00:00:00Z"); return t }()),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
					},
				},
				{
					Name: to.Ptr("ClimbingMountRainier"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountRainier"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("A documentary showing the ascent of Mount Rainier"),
						AlternateID:             to.Ptr("CLIMB00001"),
						AssetID:                 to.Ptr("f8eea45c-b814-44c2-9c42-a5174ebdee4c"),
						Container:               to.Ptr("asset-f8eea45c-b814-44c2-9c42-a5174ebdee4c"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2012-11-01T00:00:00Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2012-11-01T00:00:00Z"); return t }()),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
					},
				},
				{
					Name: to.Ptr("ClimbingMountAdams"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountAdams"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("A documentary showing the ascent of Mount Adams"),
						AlternateID:             to.Ptr("CLIMB00002"),
						AssetID:                 to.Ptr("1b648c1a-2268-461d-a1da-742bde23db40"),
						Container:               to.Ptr("asset-1b648c1a-2268-461d-a1da-742bde23db40"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2013-02-01T00:00:00Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-01T00:00:00Z"); return t }()),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
					},
				},
				{
					Name: to.Ptr("ClimbingMountSaintHelens"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountSaintHelens"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("A documentary showing the ascent of Saint Helens"),
						AlternateID:             to.Ptr("CLIMB00005"),
						AssetID:                 to.Ptr("14d58c40-ec1f-446c-b041-f5cff949bd1d"),
						Container:               to.Ptr("asset-14d58c40-ec1f-446c-b041-f5cff949bd1d"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2013-03-01T00:00:00Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2013-04-01T00:00:00Z"); return t }()),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatMediaStorageClientEncryption),
					},
				},
				{
					Name: to.Ptr("ClimbingMountRainer"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountRainer"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("descClimbingMountRainer"),
						AlternateID:             to.Ptr("altClimbingMountRainer"),
						AssetID:                 to.Ptr("8cdacfe5-8473-413a-9aec-dd2a478b37c8"),
						Container:               to.Ptr("testasset0"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:25.0514734Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T21:29:25.0514734Z"); return t }()),
						StorageAccountName:      to.Ptr("storage0"),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssetCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssetCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-by-date.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-all.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Assets"},
	})
	client = armmediaservices.NewAssetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("contoso",
		"contosomedia",
		&armmediaservices.AssetsClientListOptions{Filter: nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-all.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.AssetCollection{
			Value: []*armmediaservices.Asset{
				{
					Name: to.Ptr("ClimbingLittleTahoma"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingLittleTahoma"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("A documentary showing the ascent of Little Tahoma"),
						AlternateID:             to.Ptr("CLIMB00003"),
						AssetID:                 to.Ptr("e6c7ee55-d1f5-48bc-9c36-2d2157aadbbe"),
						Container:               to.Ptr("asset-e6c7ee55-d1f5-48bc-9c36-2d2157aadbbe"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2012-04-01T00:00:00Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-01T00:00:00Z"); return t }()),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
					},
				},
				{
					Name: to.Ptr("ClimbingMountAdams"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountAdams"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("A documentary showing the ascent of Mount Adams"),
						AlternateID:             to.Ptr("CLIMB00002"),
						AssetID:                 to.Ptr("1b648c1a-2268-461d-a1da-742bde23db40"),
						Container:               to.Ptr("asset-1b648c1a-2268-461d-a1da-742bde23db40"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2013-02-01T00:00:00Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-01T00:00:00Z"); return t }()),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
					},
				},
				{
					Name: to.Ptr("ClimbingMountBaker"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountBaker"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("A documentary showing the ascent of Mount Baker"),
						AlternateID:             to.Ptr("CLIMB00004"),
						AssetID:                 to.Ptr("89af1750-e681-4fbe-8c4c-9a5567867a6b"),
						Container:               to.Ptr("asset-89af1750-e681-4fbe-8c4c-9a5567867a6b"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2011-02-01T00:00:00Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-01T00:00:00Z"); return t }()),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
					},
				},
				{
					Name: to.Ptr("ClimbingMountRainer"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountRainer"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("descClimbingMountRainer"),
						AlternateID:             to.Ptr("altClimbingMountRainer"),
						AssetID:                 to.Ptr("258878ef-fe05-4518-988f-052e86dc19f6"),
						Container:               to.Ptr("testasset0"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:24.3948982Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T21:29:24.3948982Z"); return t }()),
						StorageAccountName:      to.Ptr("storage0"),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
					},
				},
				{
					Name: to.Ptr("ClimbingMountRainier"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountRainier"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("A documentary showing the ascent of Mount Rainier"),
						AlternateID:             to.Ptr("CLIMB00001"),
						AssetID:                 to.Ptr("f8eea45c-b814-44c2-9c42-a5174ebdee4c"),
						Container:               to.Ptr("asset-f8eea45c-b814-44c2-9c42-a5174ebdee4c"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2012-11-01T00:00:00Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2012-11-01T00:00:00Z"); return t }()),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
					},
				},
				{
					Name: to.Ptr("ClimbingMountSaintHelens"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountSaintHelens"),
					Properties: &armmediaservices.AssetProperties{
						Description:             to.Ptr("A documentary showing the ascent of Saint Helens"),
						AlternateID:             to.Ptr("CLIMB00005"),
						AssetID:                 to.Ptr("14d58c40-ec1f-446c-b041-f5cff949bd1d"),
						Container:               to.Ptr("asset-14d58c40-ec1f-446c-b041-f5cff949bd1d"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2013-03-01T00:00:00Z"); return t }()),
						LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2013-04-01T00:00:00Z"); return t }()),
						StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatMediaStorageClientEncryption),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssetCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssetCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-all.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssets_Get(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-get-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Asset by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAssetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountAdams",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-get-by-name.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.Asset{
			Name: to.Ptr("ClimbingMountAdams"),
			Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountAdams"),
			Properties: &armmediaservices.AssetProperties{
				Description:             to.Ptr("A documentary showing the ascent of Mount Adams"),
				AlternateID:             to.Ptr("CLIMB00002"),
				AssetID:                 to.Ptr("1b648c1a-2268-461d-a1da-742bde23db40"),
				Container:               to.Ptr("asset-1b648c1a-2268-461d-a1da-742bde23db40"),
				Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2013-02-01T00:00:00Z"); return t }()),
				LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-01T00:00:00Z"); return t }()),
				StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Asset) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Asset)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-get-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssets_CreateOrUpdate(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an Asset"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAssetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountLogan",
		armmediaservices.Asset{
			Properties: &armmediaservices.AssetProperties{
				Description:        to.Ptr("A documentary showing the ascent of Mount Logan"),
				StorageAccountName: to.Ptr("storage0"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.Asset{
			Name: to.Ptr("ClimbingMountLogan"),
			Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountLogan"),
			Properties: &armmediaservices.AssetProperties{
				Description:             to.Ptr("A documentary showing the ascent of Mount Logan"),
				AssetID:                 to.Ptr("09194258-36ba-4403-abb3-68780e6bc545"),
				Container:               to.Ptr("asset-09194258-36ba-4403-abb3-68780e6bc545"),
				Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:26.08Z"); return t }()),
				LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:26.107Z"); return t }()),
				StorageAccountName:      to.Ptr("storage0"),
				StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Asset) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Asset)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssets_Delete(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an Asset"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAssetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountAdams",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-delete.json: %v", err)
	}
}

func TestAssets_Update(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an Asset"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAssetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountBaker",
		armmediaservices.Asset{
			Properties: &armmediaservices.AssetProperties{
				Description: to.Ptr("A documentary showing the ascent of Mount Baker in HD"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.Asset{
			Name: to.Ptr("ClimbingMountBaker"),
			Type: to.Ptr("Microsoft.Media/mediaservices/assets"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountBaker"),
			Properties: &armmediaservices.AssetProperties{
				Description:             to.Ptr("A documentary showing the ascent of Mount Baker in HD"),
				AlternateID:             to.Ptr("CLIMB00004"),
				AssetID:                 to.Ptr("89af1750-e681-4fbe-8c4c-9a5567867a6b"),
				Container:               to.Ptr("asset-89af1750-e681-4fbe-8c4c-9a5567867a6b"),
				Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2011-02-01T00:00:00Z"); return t }()),
				LastModified:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:26.503Z"); return t }()),
				StorageEncryptionFormat: to.Ptr(armmediaservices.AssetStorageEncryptionFormatNone),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Asset) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Asset)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssets_ListContainerSas(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-sas-urls.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Asset SAS URLs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAssetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListContainerSas(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountBaker",
		armmediaservices.ListContainerSasInput{
			ExpiryTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T10:00:00.007Z"); return t }()),
			Permissions: to.Ptr(armmediaservices.AssetContainerPermissionReadWrite),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-sas-urls.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.AssetContainerSas{
			AssetContainerSasUrls: []*string{
				to.Ptr("https://storage0.blob.core.windows.net/asset-89af1750-e681-4fbe-8c4c-9a5567867a6b?sr=b&sig=<secret-value-from-key-1>&se=2018-01-01T10:00:00Z&sp=lrw"),
				to.Ptr("https://storage0.blob.core.windows.net/asset-89af1750-e681-4fbe-8c4c-9a5567867a6b?sr=b&sig=<secret-value-from-key-2>&se=2018-01-01T10:00:00Z&sp=lrw")},
		}
		if !reflect.DeepEqual(exampleRes, res.AssetContainerSas) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssetContainerSas)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-sas-urls.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssets_GetEncryptionKey(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-get-encryption-keys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Asset Storage Encryption Keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAssetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetEncryptionKey(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountSaintHelens",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-get-encryption-keys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.StorageEncryptedAssetDecryptionData{
			AssetFileEncryptionMetadata: []*armmediaservices.AssetFileEncryptionMetadata{
				{
					AssetFileID:          to.Ptr("a9536fa7-bd5d-4f84-a137-d1290982fe95"),
					AssetFileName:        to.Ptr("AssetFile0"),
					InitializationVector: to.Ptr("-988929866"),
				},
				{
					AssetFileID:          to.Ptr("f4060046-94ac-422d-824c-3f1d6aa3ecf2"),
					AssetFileName:        to.Ptr("AssetFile1"),
					InitializationVector: to.Ptr("1604993689"),
				},
				{
					AssetFileID:          to.Ptr("485968d3-ddae-4b13-98e7-901201a9620b"),
					AssetFileName:        to.Ptr("AssetFile2"),
					InitializationVector: to.Ptr("100082635"),
				}},
			Key: []byte("AAAAAAAAAAAAAAAAAAAAAA=="),
		}
		if !reflect.DeepEqual(exampleRes, res.StorageEncryptedAssetDecryptionData) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StorageEncryptedAssetDecryptionData)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-get-encryption-keys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssets_ListStreamingLocators(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-streaming-locators.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Asset SAS URLs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAssetsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListStreamingLocators(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountSaintHelens",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-streaming-locators.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.ListStreamingLocatorsResponse{
			StreamingLocators: []*armmediaservices.AssetStreamingLocator{
				{
					Name:                to.Ptr("secureStreamingLocator"),
					AssetName:           to.Ptr("ClimbingMountSaintHelens"),
					Created:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:26.9729344Z"); return t }()),
					EndTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "9999-12-31T23:59:59.9999999Z"); return t }()),
					StreamingLocatorID:  to.Ptr("36b74ce3-20b4-4de0-84f1-97e9138e886c"),
					StreamingPolicyName: to.Ptr("secureStreamingPolicy"),
				},
				{
					Name:                to.Ptr("clearStreamingLocator"),
					AssetName:           to.Ptr("ClimbingMountSaintHelens"),
					Created:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:26.9487636Z"); return t }()),
					EndTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "9999-12-31T23:59:59.9999999Z"); return t }()),
					StreamingLocatorID:  to.Ptr("3e8d9ac3-50f6-4f6d-8482-078ceb56f23a"),
					StreamingPolicyName: to.Ptr("clearStreamingPolicy"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ListStreamingLocatorsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ListStreamingLocatorsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assets-list-streaming-locators.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssetFilters_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assetFilters-list-all.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Asset Filters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAssetFiltersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("contoso",
		"contosomedia",
		"ClimbingMountRainer",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assetFilters-list-all.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.AssetFilterCollection{
			Value: []*armmediaservices.AssetFilter{
				{
					Name: to.Ptr("assetFilterWithTimeWindowAndTrack"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets/assetFilters"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountRainer/assetFilters/assetFilterWithTimeWindowAndTrack"),
					Properties: &armmediaservices.MediaFilterProperties{
						FirstQuality: &armmediaservices.FirstQuality{
							Bitrate: to.Ptr[int32](128000),
						},
						PresentationTimeRange: &armmediaservices.PresentationTimeRange{
							EndTimestamp:               to.Ptr[int64](170000000),
							ForceEndTimestamp:          to.Ptr(false),
							LiveBackoffDuration:        to.Ptr[int64](0),
							PresentationWindowDuration: to.Ptr[int64](9223372036854775000),
							StartTimestamp:             to.Ptr[int64](0),
							Timescale:                  to.Ptr[int64](10000000),
						},
						Tracks: []*armmediaservices.FilterTrackSelection{
							{
								TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
										Value:     to.Ptr("Audio"),
									},
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeLanguage),
										Value:     to.Ptr("en"),
									},
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeFourCC),
										Value:     to.Ptr("EC-3"),
									}},
							},
							{
								TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
										Value:     to.Ptr("Video"),
									},
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeBitrate),
										Value:     to.Ptr("3000000-5000000"),
									}},
							}},
					},
				},
				{
					Name: to.Ptr("assetFilterWithTimeWindow"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets/assetFilters"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountRainer/assetFilters/assetFilterWithTimeWindow"),
					Properties: &armmediaservices.MediaFilterProperties{
						FirstQuality: &armmediaservices.FirstQuality{
							Bitrate: to.Ptr[int32](128000),
						},
						PresentationTimeRange: &armmediaservices.PresentationTimeRange{
							EndTimestamp:               to.Ptr[int64](170000000),
							ForceEndTimestamp:          to.Ptr(false),
							LiveBackoffDuration:        to.Ptr[int64](0),
							PresentationWindowDuration: to.Ptr[int64](9223372036854775000),
							StartTimestamp:             to.Ptr[int64](0),
							Timescale:                  to.Ptr[int64](10000000),
						},
						Tracks: []*armmediaservices.FilterTrackSelection{},
					},
				},
				{
					Name: to.Ptr("assetFilterWithTrack"),
					Type: to.Ptr("Microsoft.Media/mediaservices/assets/assetFilters"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountRainer/assetFilters/assetFilterWithTrack"),
					Properties: &armmediaservices.MediaFilterProperties{
						Tracks: []*armmediaservices.FilterTrackSelection{
							{
								TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
										Value:     to.Ptr("Audio"),
									},
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeLanguage),
										Value:     to.Ptr("en"),
									},
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeFourCC),
										Value:     to.Ptr("EC-3"),
									}},
							},
							{
								TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
										Value:     to.Ptr("Video"),
									},
									{
										Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
										Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeBitrate),
										Value:     to.Ptr("3000000-5000000"),
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssetFilterCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssetFilterCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assetFilters-list-all.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssetFilters_Get(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assetFilters-get-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Asset Filter by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAssetFiltersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountRainer",
		"assetFilterWithTimeWindowAndTrack",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assetFilters-get-by-name.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.AssetFilter{
			Name: to.Ptr("assetFilterWithTimeWindowAndTrack"),
			Type: to.Ptr("Microsoft.Media/mediaservices/assets/assetFilters"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountRainer/assetFilters/assetFilterWithTimeWindowAndTrack"),
			Properties: &armmediaservices.MediaFilterProperties{
				FirstQuality: &armmediaservices.FirstQuality{
					Bitrate: to.Ptr[int32](128000),
				},
				PresentationTimeRange: &armmediaservices.PresentationTimeRange{
					EndTimestamp:               to.Ptr[int64](170000000),
					ForceEndTimestamp:          to.Ptr(false),
					LiveBackoffDuration:        to.Ptr[int64](0),
					PresentationWindowDuration: to.Ptr[int64](9223372036854775000),
					StartTimestamp:             to.Ptr[int64](0),
					Timescale:                  to.Ptr[int64](10000000),
				},
				Tracks: []*armmediaservices.FilterTrackSelection{
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Audio"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeLanguage),
								Value:     to.Ptr("en"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeFourCC),
								Value:     to.Ptr("EC-3"),
							}},
					},
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Video"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeBitrate),
								Value:     to.Ptr("3000000-5000000"),
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssetFilter) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssetFilter)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assetFilters-get-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssetFilters_CreateOrUpdate(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assetFilters-create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an Asset Filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAssetFiltersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountRainer",
		"newAssetFilter",
		armmediaservices.AssetFilter{
			Properties: &armmediaservices.MediaFilterProperties{
				FirstQuality: &armmediaservices.FirstQuality{
					Bitrate: to.Ptr[int32](128000),
				},
				PresentationTimeRange: &armmediaservices.PresentationTimeRange{
					EndTimestamp:               to.Ptr[int64](170000000),
					ForceEndTimestamp:          to.Ptr(false),
					LiveBackoffDuration:        to.Ptr[int64](0),
					PresentationWindowDuration: to.Ptr[int64](9223372036854775000),
					StartTimestamp:             to.Ptr[int64](0),
					Timescale:                  to.Ptr[int64](10000000),
				},
				Tracks: []*armmediaservices.FilterTrackSelection{
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Audio"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeLanguage),
								Value:     to.Ptr("en"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeFourCC),
								Value:     to.Ptr("EC-3"),
							}},
					},
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Video"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeBitrate),
								Value:     to.Ptr("3000000-5000000"),
							}},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assetFilters-create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.AssetFilter{
			Name: to.Ptr("newAssetFilter"),
			Type: to.Ptr("Microsoft.Media/mediaservices/assets/assetFilters"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountRainer/assetFilters/newAssetFilter"),
			Properties: &armmediaservices.MediaFilterProperties{
				FirstQuality: &armmediaservices.FirstQuality{
					Bitrate: to.Ptr[int32](128000),
				},
				PresentationTimeRange: &armmediaservices.PresentationTimeRange{
					EndTimestamp:               to.Ptr[int64](170000000),
					ForceEndTimestamp:          to.Ptr(false),
					LiveBackoffDuration:        to.Ptr[int64](0),
					PresentationWindowDuration: to.Ptr[int64](9223372036854775000),
					StartTimestamp:             to.Ptr[int64](0),
					Timescale:                  to.Ptr[int64](10000000),
				},
				Tracks: []*armmediaservices.FilterTrackSelection{
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Audio"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeLanguage),
								Value:     to.Ptr("en"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeFourCC),
								Value:     to.Ptr("EC-3"),
							}},
					},
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Video"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeBitrate),
								Value:     to.Ptr("3000000-5000000"),
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssetFilter) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssetFilter)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assetFilters-create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssetFilters_Delete(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assetFilters-delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an Asset Filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAssetFiltersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountRainer",
		"assetFilterWithTimeWindowAndTrack",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assetFilters-delete.json: %v", err)
	}
}

func TestAssetFilters_Update(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assetFilters-update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an Asset Filter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewAssetFiltersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"contoso",
		"contosomedia",
		"ClimbingMountRainer",
		"assetFilterWithTimeWindowAndTrack",
		armmediaservices.AssetFilter{
			Properties: &armmediaservices.MediaFilterProperties{
				FirstQuality: &armmediaservices.FirstQuality{
					Bitrate: to.Ptr[int32](128000),
				},
				PresentationTimeRange: &armmediaservices.PresentationTimeRange{
					EndTimestamp:               to.Ptr[int64](170000000),
					ForceEndTimestamp:          to.Ptr(false),
					LiveBackoffDuration:        to.Ptr[int64](0),
					PresentationWindowDuration: to.Ptr[int64](9223372036854775000),
					StartTimestamp:             to.Ptr[int64](10),
					Timescale:                  to.Ptr[int64](10000000),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assetFilters-update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.AssetFilter{
			Name: to.Ptr("assetFilterWithTimeWindowAndTrack"),
			Type: to.Ptr("Microsoft.Media/mediaservices/assets/assetFilters"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/assets/ClimbingMountRainer/assetFilters/assetFilterWithTimeWindowAndTrack"),
			Properties: &armmediaservices.MediaFilterProperties{
				FirstQuality: &armmediaservices.FirstQuality{
					Bitrate: to.Ptr[int32](128000),
				},
				PresentationTimeRange: &armmediaservices.PresentationTimeRange{
					EndTimestamp:               to.Ptr[int64](170000000),
					ForceEndTimestamp:          to.Ptr(false),
					LiveBackoffDuration:        to.Ptr[int64](0),
					PresentationWindowDuration: to.Ptr[int64](9223372036854775000),
					StartTimestamp:             to.Ptr[int64](10),
					Timescale:                  to.Ptr[int64](10000000),
				},
				Tracks: []*armmediaservices.FilterTrackSelection{
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Audio"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeLanguage),
								Value:     to.Ptr("en"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationNotEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeFourCC),
								Value:     to.Ptr("EC-3"),
							}},
					},
					{
						TrackSelections: []*armmediaservices.FilterTrackPropertyCondition{
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeType),
								Value:     to.Ptr("Video"),
							},
							{
								Operation: to.Ptr(armmediaservices.FilterTrackPropertyCompareOperationEqual),
								Property:  to.Ptr(armmediaservices.FilterTrackPropertyTypeBitrate),
								Value:     to.Ptr("3000000-5000000"),
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssetFilter) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssetFilter)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/assetFilters-update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContentKeyPolicies_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-list-by-lastModified.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists Content Key Policies ordered by last modified."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewContentKeyPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("contoso",
		"contosomedia",
		&armmediaservices.ContentKeyPoliciesClientListOptions{Filter: nil,
			Top:     nil,
			Orderby: to.Ptr("properties/lastModified"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-list-by-lastModified.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.ContentKeyPolicyCollection{
			Value: []*armmediaservices.ContentKeyPolicy{
				{
					Name: to.Ptr("PolicyWithPlayReadyOptionAndOpenRestriction"),
					Type: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/contentKeyPolicies/PolicyWithPlayReadyOptionAndOpenRestriction"),
					Properties: &armmediaservices.ContentKeyPolicyProperties{
						Description:  to.Ptr("A policy with one PlayReady option and Open Restriction."),
						Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2012-11-01T00:00:00Z"); return t }()),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2012-11-01T00:00:00Z"); return t }()),
						Options: []*armmediaservices.ContentKeyPolicyOption{
							{
								Configuration: &armmediaservices.ContentKeyPolicyPlayReadyConfiguration{
									ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration"),
									Licenses: []*armmediaservices.ContentKeyPolicyPlayReadyLicense{
										{
											AllowTestDevices: to.Ptr(false),
											ContentKeyLocation: &armmediaservices.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader{
												ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader"),
											},
											ContentType: to.Ptr(armmediaservices.ContentKeyPolicyPlayReadyContentTypeUnspecified),
											LicenseType: to.Ptr(armmediaservices.ContentKeyPolicyPlayReadyLicenseTypeNonPersistent),
											PlayRight: &armmediaservices.ContentKeyPolicyPlayReadyPlayRight{
												AllowPassingVideoContentToUnknownOutput:            to.Ptr(armmediaservices.ContentKeyPolicyPlayReadyUnknownOutputPassingOptionNotAllowed),
												DigitalVideoOnlyContentRestriction:                 to.Ptr(false),
												ImageConstraintForAnalogComponentVideoRestriction:  to.Ptr(false),
												ImageConstraintForAnalogComputerMonitorRestriction: to.Ptr(false),
											},
										}},
									ResponseCustomData: to.Ptr("testCustomData"),
								},
								PolicyOptionID: to.Ptr("294a833f-f128-48be-9edf-8d1bb5b35ff3"),
								Restriction: &armmediaservices.ContentKeyPolicyOpenRestriction{
									ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
								},
							}},
						PolicyID: to.Ptr("a9bacd1d-60f5-4af3-8d2b-cf46ca5c9b04"),
					},
				},
				{
					Name: to.Ptr("PolicyWithMultipleOptions"),
					Type: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/contentKeyPolicies/PolicyWithMultipleOptions"),
					Properties: &armmediaservices.ContentKeyPolicyProperties{
						Description:  to.Ptr("A policy with multiple options."),
						Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-12-01T00:00:00Z"); return t }()),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-02T00:00:00Z"); return t }()),
						Options: []*armmediaservices.ContentKeyPolicyOption{
							{
								Configuration: &armmediaservices.ContentKeyPolicyClearKeyConfiguration{
									ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
								},
								PolicyOptionID: to.Ptr("caf1e28c-8288-4301-8c46-c0f9312c512f"),
								Restriction: &armmediaservices.ContentKeyPolicyTokenRestriction{
									ODataType:                 to.Ptr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
									AlternateVerificationKeys: []armmediaservices.ContentKeyPolicyRestrictionTokenKeyClassification{},
									Audience:                  to.Ptr("urn:test"),
									Issuer:                    to.Ptr("http://testacs"),
									PrimaryVerificationKey: &armmediaservices.ContentKeyPolicySymmetricTokenKey{
										ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
										KeyValue:  []byte(""),
									},
									RequiredClaims: []*armmediaservices.ContentKeyPolicyTokenClaim{
										{
											ClaimType: to.Ptr("urn:microsoft:azure:mediaservices:contentkeyidentifier"),
										},
										{
											ClaimType:  to.Ptr("DRM"),
											ClaimValue: to.Ptr("Widevine"),
										}},
									RestrictionTokenType: to.Ptr(armmediaservices.ContentKeyPolicyRestrictionTokenTypeJwt),
								},
							},
							{
								Configuration: &armmediaservices.ContentKeyPolicyWidevineConfiguration{
									ODataType:        to.Ptr("#Microsoft.Media.ContentKeyPolicyWidevineConfiguration"),
									WidevineTemplate: to.Ptr("{\"allowed_track_types\":\"SD_HD\",\"content_key_specs\":[{\"track_type\":\"SD\",\"security_level\":1,\"required_output_protection\":{\"hdcp\":\"HDCP_V2\"}}],\"policy_overrides\":{\"can_play\":true,\"can_persist\":true,\"can_renew\":false}}"),
								},
								PolicyOptionID: to.Ptr("da346259-0cd6-4609-89dc-15ac131bd92f"),
								Restriction: &armmediaservices.ContentKeyPolicyOpenRestriction{
									ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
								},
							}},
						PolicyID: to.Ptr("ed7f3d1b-cfa7-4181-b966-e0b3027eec3a"),
					},
				},
				{
					Name: to.Ptr("PolicyWithClearKeyOptionAndTokenRestriction"),
					Type: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/contentKeyPolicies/PolicyWithClearKeyOptionAndTokenRestriction"),
					Properties: &armmediaservices.ContentKeyPolicyProperties{
						Description:  to.Ptr("A policy with one ClearKey option and Open Restriction."),
						Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-01T00:00:00Z"); return t }()),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-01T00:00:00Z"); return t }()),
						Options: []*armmediaservices.ContentKeyPolicyOption{
							{
								Configuration: &armmediaservices.ContentKeyPolicyClearKeyConfiguration{
									ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
								},
								PolicyOptionID: to.Ptr("a3448d09-567a-4642-8309-d17e846be59f"),
								Restriction: &armmediaservices.ContentKeyPolicyTokenRestriction{
									ODataType:                 to.Ptr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
									AlternateVerificationKeys: []armmediaservices.ContentKeyPolicyRestrictionTokenKeyClassification{},
									Audience:                  to.Ptr("urn:test"),
									Issuer:                    to.Ptr("http://testacs"),
									PrimaryVerificationKey: &armmediaservices.ContentKeyPolicySymmetricTokenKey{
										ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
										KeyValue:  []byte(""),
									},
									RequiredClaims: []*armmediaservices.ContentKeyPolicyTokenClaim{
										{
											ClaimType: to.Ptr("urn:microsoft:azure:mediaservices:contentkeyidentifier"),
										},
										{
											ClaimType:  to.Ptr("DRM"),
											ClaimValue: to.Ptr("Widevine"),
										}},
									RestrictionTokenType: to.Ptr(armmediaservices.ContentKeyPolicyRestrictionTokenTypeJwt),
								},
							}},
						PolicyID: to.Ptr("8352435b-ebea-4681-aae7-e19277771f64"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContentKeyPolicyCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContentKeyPolicyCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-list-by-lastModified.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-list-in-date-range.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists Content Key Policies with created and last modified filters."},
	})
	client = armmediaservices.NewContentKeyPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("contoso",
		"contosomedia",
		&armmediaservices.ContentKeyPoliciesClientListOptions{Filter: to.Ptr("properties/lastModified gt 2016-06-01 and properties/created lt 2013-07-01"),
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-list-in-date-range.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.ContentKeyPolicyCollection{
			Value: []*armmediaservices.ContentKeyPolicy{},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContentKeyPolicyCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContentKeyPolicyCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-list-in-date-range.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-list-all.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all Content Key Policies"},
	})
	client = armmediaservices.NewContentKeyPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("contoso",
		"contosomedia",
		&armmediaservices.ContentKeyPoliciesClientListOptions{Filter: nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-list-all.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.ContentKeyPolicyCollection{
			Value: []*armmediaservices.ContentKeyPolicy{
				{
					Name: to.Ptr("PolicyWithClearKeyOptionAndTokenRestriction"),
					Type: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/contentKeyPolicies/PolicyWithClearKeyOptionAndTokenRestriction"),
					Properties: &armmediaservices.ContentKeyPolicyProperties{
						Description:  to.Ptr("A policy with one ClearKey option and Open Restriction."),
						Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-01T00:00:00Z"); return t }()),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-01T00:00:00Z"); return t }()),
						Options: []*armmediaservices.ContentKeyPolicyOption{
							{
								Configuration: &armmediaservices.ContentKeyPolicyClearKeyConfiguration{
									ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
								},
								PolicyOptionID: to.Ptr("a3448d09-567a-4642-8309-d17e846be59f"),
								Restriction: &armmediaservices.ContentKeyPolicyTokenRestriction{
									ODataType:                 to.Ptr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
									AlternateVerificationKeys: []armmediaservices.ContentKeyPolicyRestrictionTokenKeyClassification{},
									Audience:                  to.Ptr("urn:test"),
									Issuer:                    to.Ptr("http://testacs"),
									PrimaryVerificationKey: &armmediaservices.ContentKeyPolicySymmetricTokenKey{
										ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
										KeyValue:  []byte(""),
									},
									RequiredClaims: []*armmediaservices.ContentKeyPolicyTokenClaim{
										{
											ClaimType: to.Ptr("urn:microsoft:azure:mediaservices:contentkeyidentifier"),
										},
										{
											ClaimType:  to.Ptr("DRM"),
											ClaimValue: to.Ptr("Widevine"),
										}},
									RestrictionTokenType: to.Ptr(armmediaservices.ContentKeyPolicyRestrictionTokenTypeJwt),
								},
							}},
						PolicyID: to.Ptr("8352435b-ebea-4681-aae7-e19277771f64"),
					},
				},
				{
					Name: to.Ptr("PolicyWithMultipleOptions"),
					Type: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/contentKeyPolicies/PolicyWithMultipleOptions"),
					Properties: &armmediaservices.ContentKeyPolicyProperties{
						Description:  to.Ptr("A policy with multiple options."),
						Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-12-01T00:00:00Z"); return t }()),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-02T00:00:00Z"); return t }()),
						Options: []*armmediaservices.ContentKeyPolicyOption{
							{
								Configuration: &armmediaservices.ContentKeyPolicyClearKeyConfiguration{
									ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
								},
								PolicyOptionID: to.Ptr("caf1e28c-8288-4301-8c46-c0f9312c512f"),
								Restriction: &armmediaservices.ContentKeyPolicyTokenRestriction{
									ODataType:                 to.Ptr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
									AlternateVerificationKeys: []armmediaservices.ContentKeyPolicyRestrictionTokenKeyClassification{},
									Audience:                  to.Ptr("urn:test"),
									Issuer:                    to.Ptr("http://testacs"),
									PrimaryVerificationKey: &armmediaservices.ContentKeyPolicySymmetricTokenKey{
										ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
										KeyValue:  []byte(""),
									},
									RequiredClaims: []*armmediaservices.ContentKeyPolicyTokenClaim{
										{
											ClaimType: to.Ptr("urn:microsoft:azure:mediaservices:contentkeyidentifier"),
										},
										{
											ClaimType:  to.Ptr("DRM"),
											ClaimValue: to.Ptr("Widevine"),
										}},
									RestrictionTokenType: to.Ptr(armmediaservices.ContentKeyPolicyRestrictionTokenTypeJwt),
								},
							},
							{
								Configuration: &armmediaservices.ContentKeyPolicyWidevineConfiguration{
									ODataType:        to.Ptr("#Microsoft.Media.ContentKeyPolicyWidevineConfiguration"),
									WidevineTemplate: to.Ptr("{\"allowed_track_types\":\"SD_HD\",\"content_key_specs\":[{\"track_type\":\"SD\",\"security_level\":1,\"required_output_protection\":{\"hdcp\":\"HDCP_V2\"}}],\"policy_overrides\":{\"can_play\":true,\"can_persist\":true,\"can_renew\":false}}"),
								},
								PolicyOptionID: to.Ptr("da346259-0cd6-4609-89dc-15ac131bd92f"),
								Restriction: &armmediaservices.ContentKeyPolicyOpenRestriction{
									ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
								},
							}},
						PolicyID: to.Ptr("ed7f3d1b-cfa7-4181-b966-e0b3027eec3a"),
					},
				},
				{
					Name: to.Ptr("PolicyWithPlayReadyOptionAndOpenRestriction"),
					Type: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/contentKeyPolicies/PolicyWithPlayReadyOptionAndOpenRestriction"),
					Properties: &armmediaservices.ContentKeyPolicyProperties{
						Description:  to.Ptr("A policy with one PlayReady option and Open Restriction."),
						Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2012-11-01T00:00:00Z"); return t }()),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2012-11-01T00:00:00Z"); return t }()),
						Options: []*armmediaservices.ContentKeyPolicyOption{
							{
								Configuration: &armmediaservices.ContentKeyPolicyPlayReadyConfiguration{
									ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration"),
									Licenses: []*armmediaservices.ContentKeyPolicyPlayReadyLicense{
										{
											AllowTestDevices: to.Ptr(false),
											ContentKeyLocation: &armmediaservices.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader{
												ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader"),
											},
											ContentType: to.Ptr(armmediaservices.ContentKeyPolicyPlayReadyContentTypeUnspecified),
											LicenseType: to.Ptr(armmediaservices.ContentKeyPolicyPlayReadyLicenseTypeNonPersistent),
											PlayRight: &armmediaservices.ContentKeyPolicyPlayReadyPlayRight{
												AllowPassingVideoContentToUnknownOutput:            to.Ptr(armmediaservices.ContentKeyPolicyPlayReadyUnknownOutputPassingOptionNotAllowed),
												DigitalVideoOnlyContentRestriction:                 to.Ptr(false),
												ImageConstraintForAnalogComponentVideoRestriction:  to.Ptr(false),
												ImageConstraintForAnalogComputerMonitorRestriction: to.Ptr(false),
											},
										}},
									ResponseCustomData: to.Ptr("testCustomData"),
								},
								PolicyOptionID: to.Ptr("294a833f-f128-48be-9edf-8d1bb5b35ff3"),
								Restriction: &armmediaservices.ContentKeyPolicyOpenRestriction{
									ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
								},
							}},
						PolicyID: to.Ptr("a9bacd1d-60f5-4af3-8d2b-cf46ca5c9b04"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContentKeyPolicyCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContentKeyPolicyCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-list-all.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContentKeyPolicies_Get(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-get-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Content Key Policy by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewContentKeyPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"contoso",
		"contosomedia",
		"PolicyWithMultipleOptions",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-get-by-name.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.ContentKeyPolicy{
			Name: to.Ptr("PolicyWithMultipleOptions"),
			Type: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/contentKeyPolicies/PolicyWithMultipleOptions"),
			Properties: &armmediaservices.ContentKeyPolicyProperties{
				Description:  to.Ptr("A policy with multiple options."),
				Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-12-01T00:00:00Z"); return t }()),
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-02T00:00:00Z"); return t }()),
				Options: []*armmediaservices.ContentKeyPolicyOption{
					{
						Configuration: &armmediaservices.ContentKeyPolicyClearKeyConfiguration{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
						},
						PolicyOptionID: to.Ptr("caf1e28c-8288-4301-8c46-c0f9312c512f"),
						Restriction: &armmediaservices.ContentKeyPolicyTokenRestriction{
							ODataType:                 to.Ptr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
							AlternateVerificationKeys: []armmediaservices.ContentKeyPolicyRestrictionTokenKeyClassification{},
							Audience:                  to.Ptr("urn:test"),
							Issuer:                    to.Ptr("http://testacs"),
							PrimaryVerificationKey: &armmediaservices.ContentKeyPolicySymmetricTokenKey{
								ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
								KeyValue:  []byte(""),
							},
							RequiredClaims: []*armmediaservices.ContentKeyPolicyTokenClaim{
								{
									ClaimType: to.Ptr("urn:microsoft:azure:mediaservices:contentkeyidentifier"),
								},
								{
									ClaimType:  to.Ptr("DRM"),
									ClaimValue: to.Ptr("Widevine"),
								}},
							RestrictionTokenType: to.Ptr(armmediaservices.ContentKeyPolicyRestrictionTokenTypeJwt),
						},
					},
					{
						Configuration: &armmediaservices.ContentKeyPolicyWidevineConfiguration{
							ODataType:        to.Ptr("#Microsoft.Media.ContentKeyPolicyWidevineConfiguration"),
							WidevineTemplate: to.Ptr("{\"allowed_track_types\":\"SD_HD\",\"content_key_specs\":[{\"track_type\":\"SD\",\"security_level\":1,\"required_output_protection\":{\"hdcp\":\"HDCP_V2\"}}],\"policy_overrides\":{\"can_play\":true,\"can_persist\":true,\"can_renew\":false}}"),
						},
						PolicyOptionID: to.Ptr("da346259-0cd6-4609-89dc-15ac131bd92f"),
						Restriction: &armmediaservices.ContentKeyPolicyOpenRestriction{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
						},
					}},
				PolicyID: to.Ptr("ed7f3d1b-cfa7-4181-b966-e0b3027eec3a"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContentKeyPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContentKeyPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-get-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContentKeyPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-create-nodrm-token.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a Content Key Policy with ClearKey option and Token Restriction"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewContentKeyPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"contoso",
		"contosomedia",
		"PolicyWithClearKeyOptionAndSwtTokenRestriction",
		armmediaservices.ContentKeyPolicy{
			Properties: &armmediaservices.ContentKeyPolicyProperties{
				Description: to.Ptr("ArmPolicyDescription"),
				Options: []*armmediaservices.ContentKeyPolicyOption{
					{
						Name: to.Ptr("ClearKeyOption"),
						Configuration: &armmediaservices.ContentKeyPolicyClearKeyConfiguration{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
						},
						Restriction: &armmediaservices.ContentKeyPolicyTokenRestriction{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
							Audience:  to.Ptr("urn:audience"),
							Issuer:    to.Ptr("urn:issuer"),
							PrimaryVerificationKey: &armmediaservices.ContentKeyPolicySymmetricTokenKey{
								ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
								KeyValue:  []byte("AAAAAAAAAAAAAAAAAAAAAA=="),
							},
							RestrictionTokenType: to.Ptr(armmediaservices.ContentKeyPolicyRestrictionTokenTypeSwt),
						},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-create-nodrm-token.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.ContentKeyPolicy{
			Name: to.Ptr("PolicyWithClearKeyOptionAndSwtTokenRestriction"),
			Type: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/contentKeyPolicies/PolicyWithClearKeyOptionAndSwtTokenRestriction"),
			Properties: &armmediaservices.ContentKeyPolicyProperties{
				Description:  to.Ptr("ArmPolicyDescription"),
				Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:29.837Z"); return t }()),
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:29.837Z"); return t }()),
				Options: []*armmediaservices.ContentKeyPolicyOption{
					{
						Name: to.Ptr("ClearKeyOption"),
						Configuration: &armmediaservices.ContentKeyPolicyClearKeyConfiguration{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
						},
						PolicyOptionID: to.Ptr("e7d4d465-b6f7-4830-9a21-74a7326ef797"),
						Restriction: &armmediaservices.ContentKeyPolicyTokenRestriction{
							ODataType:                 to.Ptr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
							AlternateVerificationKeys: []armmediaservices.ContentKeyPolicyRestrictionTokenKeyClassification{},
							Audience:                  to.Ptr("urn:audience"),
							Issuer:                    to.Ptr("urn:issuer"),
							PrimaryVerificationKey: &armmediaservices.ContentKeyPolicySymmetricTokenKey{
								ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
								KeyValue:  []byte(""),
							},
							RequiredClaims:       []*armmediaservices.ContentKeyPolicyTokenClaim{},
							RestrictionTokenType: to.Ptr(armmediaservices.ContentKeyPolicyRestrictionTokenTypeSwt),
						},
					}},
				PolicyID: to.Ptr("2926c1bc-4dec-4a11-9d19-3f99006530a9"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContentKeyPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContentKeyPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-create-nodrm-token.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-create-playready-open.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a Content Key Policy with PlayReady option and Open Restriction"},
	})
	client = armmediaservices.NewContentKeyPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"contoso",
		"contosomedia",
		"PolicyWithPlayReadyOptionAndOpenRestriction",
		armmediaservices.ContentKeyPolicy{
			Properties: &armmediaservices.ContentKeyPolicyProperties{
				Description: to.Ptr("ArmPolicyDescription"),
				Options: []*armmediaservices.ContentKeyPolicyOption{
					{
						Name: to.Ptr("ArmPolicyOptionName"),
						Configuration: &armmediaservices.ContentKeyPolicyPlayReadyConfiguration{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration"),
							Licenses: []*armmediaservices.ContentKeyPolicyPlayReadyLicense{
								{
									AllowTestDevices: to.Ptr(true),
									BeginDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-16T18:22:53.46Z"); return t }()),
									ContentKeyLocation: &armmediaservices.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader{
										ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader"),
									},
									ContentType: to.Ptr(armmediaservices.ContentKeyPolicyPlayReadyContentTypeUltraVioletDownload),
									LicenseType: to.Ptr(armmediaservices.ContentKeyPolicyPlayReadyLicenseTypePersistent),
									PlayRight: &armmediaservices.ContentKeyPolicyPlayReadyPlayRight{
										AllowPassingVideoContentToUnknownOutput:            to.Ptr(armmediaservices.ContentKeyPolicyPlayReadyUnknownOutputPassingOptionNotAllowed),
										DigitalVideoOnlyContentRestriction:                 to.Ptr(false),
										ImageConstraintForAnalogComponentVideoRestriction:  to.Ptr(true),
										ImageConstraintForAnalogComputerMonitorRestriction: to.Ptr(false),
										ScmsRestriction: to.Ptr[int32](2),
									},
								}},
						},
						Restriction: &armmediaservices.ContentKeyPolicyOpenRestriction{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
						},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-create-playready-open.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.ContentKeyPolicy{
			Name: to.Ptr("PolicyWithPlayReadyOptionAndOpenRestriction"),
			Type: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/contentKeyPolicies/PolicyWithPlayReadyOptionAndOpenRestriction"),
			Properties: &armmediaservices.ContentKeyPolicyProperties{
				Description:  to.Ptr("ArmPolicyDescription"),
				Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2012-11-01T00:00:00Z"); return t }()),
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:29.51Z"); return t }()),
				Options: []*armmediaservices.ContentKeyPolicyOption{
					{
						Name: to.Ptr("ArmPolicyOptionName"),
						Configuration: &armmediaservices.ContentKeyPolicyPlayReadyConfiguration{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration"),
							Licenses: []*armmediaservices.ContentKeyPolicyPlayReadyLicense{
								{
									AllowTestDevices: to.Ptr(true),
									BeginDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-16T18:22:53.46Z"); return t }()),
									ContentKeyLocation: &armmediaservices.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader{
										ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader"),
									},
									ContentType: to.Ptr(armmediaservices.ContentKeyPolicyPlayReadyContentTypeUltraVioletDownload),
									LicenseType: to.Ptr(armmediaservices.ContentKeyPolicyPlayReadyLicenseTypePersistent),
									PlayRight: &armmediaservices.ContentKeyPolicyPlayReadyPlayRight{
										AllowPassingVideoContentToUnknownOutput:            to.Ptr(armmediaservices.ContentKeyPolicyPlayReadyUnknownOutputPassingOptionNotAllowed),
										DigitalVideoOnlyContentRestriction:                 to.Ptr(false),
										ImageConstraintForAnalogComponentVideoRestriction:  to.Ptr(true),
										ImageConstraintForAnalogComputerMonitorRestriction: to.Ptr(false),
										ScmsRestriction: to.Ptr[int32](2),
									},
								}},
						},
						PolicyOptionID: to.Ptr("c52f9af0-1f53-4775-8edb-af2d9a6e28cd"),
						Restriction: &armmediaservices.ContentKeyPolicyOpenRestriction{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
						},
					}},
				PolicyID: to.Ptr("a9bacd1d-60f5-4af3-8d2b-cf46ca5c9b04"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContentKeyPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContentKeyPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-create-playready-open.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-create-widevine-token.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a Content Key Policy with Widevine option and Token Restriction"},
	})
	client = armmediaservices.NewContentKeyPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"contoso",
		"contosomedia",
		"PolicyWithWidevineOptionAndJwtTokenRestriction",
		armmediaservices.ContentKeyPolicy{
			Properties: &armmediaservices.ContentKeyPolicyProperties{
				Description: to.Ptr("ArmPolicyDescription"),
				Options: []*armmediaservices.ContentKeyPolicyOption{
					{
						Name: to.Ptr("widevineoption"),
						Configuration: &armmediaservices.ContentKeyPolicyWidevineConfiguration{
							ODataType:        to.Ptr("#Microsoft.Media.ContentKeyPolicyWidevineConfiguration"),
							WidevineTemplate: to.Ptr("{\"allowed_track_types\":\"SD_HD\",\"content_key_specs\":[{\"track_type\":\"SD\",\"security_level\":1,\"required_output_protection\":{\"hdcp\":\"HDCP_V2\"}}],\"policy_overrides\":{\"can_play\":true,\"can_persist\":true,\"can_renew\":false}}"),
						},
						Restriction: &armmediaservices.ContentKeyPolicyTokenRestriction{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
							AlternateVerificationKeys: []armmediaservices.ContentKeyPolicyRestrictionTokenKeyClassification{
								&armmediaservices.ContentKeyPolicySymmetricTokenKey{
									ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
									KeyValue:  []byte("AAAAAAAAAAAAAAAAAAAAAA=="),
								}},
							Audience: to.Ptr("urn:audience"),
							Issuer:   to.Ptr("urn:issuer"),
							PrimaryVerificationKey: &armmediaservices.ContentKeyPolicyRsaTokenKey{
								ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyRsaTokenKey"),
								Exponent:  []byte("AQAB"),
								Modulus:   []byte("AQAD"),
							},
							RestrictionTokenType: to.Ptr(armmediaservices.ContentKeyPolicyRestrictionTokenTypeJwt),
						},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-create-widevine-token.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.ContentKeyPolicy{
			Name: to.Ptr("PolicyWithWidevineOptionAndJwtTokenRestriction"),
			Type: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/contentKeyPolicies/PolicyWithWidevineOptionAndJwtTokenRestriction"),
			Properties: &armmediaservices.ContentKeyPolicyProperties{
				Description:  to.Ptr("ArmPolicyDescription"),
				Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:29.663Z"); return t }()),
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:29.663Z"); return t }()),
				Options: []*armmediaservices.ContentKeyPolicyOption{
					{
						Name: to.Ptr("widevineoption"),
						Configuration: &armmediaservices.ContentKeyPolicyWidevineConfiguration{
							ODataType:        to.Ptr("#Microsoft.Media.ContentKeyPolicyWidevineConfiguration"),
							WidevineTemplate: to.Ptr("{\"allowed_track_types\":\"SD_HD\",\"content_key_specs\":[{\"track_type\":\"SD\",\"security_level\":1,\"required_output_protection\":{\"hdcp\":\"HDCP_V2\"}}],\"policy_overrides\":{\"can_play\":true,\"can_persist\":true,\"can_renew\":false}}"),
						},
						PolicyOptionID: to.Ptr("26fee004-8dfa-4828-bcad-5e63c637534f"),
						Restriction: &armmediaservices.ContentKeyPolicyTokenRestriction{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
							AlternateVerificationKeys: []armmediaservices.ContentKeyPolicyRestrictionTokenKeyClassification{
								&armmediaservices.ContentKeyPolicySymmetricTokenKey{
									ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
									KeyValue:  []byte(""),
								}},
							Audience: to.Ptr("urn:audience"),
							Issuer:   to.Ptr("urn:issuer"),
							PrimaryVerificationKey: &armmediaservices.ContentKeyPolicyRsaTokenKey{
								ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyRsaTokenKey"),
								Exponent:  []byte(""),
								Modulus:   []byte(""),
							},
							RequiredClaims:       []*armmediaservices.ContentKeyPolicyTokenClaim{},
							RestrictionTokenType: to.Ptr(armmediaservices.ContentKeyPolicyRestrictionTokenTypeJwt),
						},
					}},
				PolicyID: to.Ptr("bad1d030-7d5c-4643-8f1e-49807a4bf64c"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContentKeyPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContentKeyPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-create-widevine-token.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-create-multiple-options.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a Content Key Policy with multiple options"},
	})
	client = armmediaservices.NewContentKeyPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"contoso",
		"contosomedia",
		"PolicyCreatedWithMultipleOptions",
		armmediaservices.ContentKeyPolicy{
			Properties: &armmediaservices.ContentKeyPolicyProperties{
				Description: to.Ptr("ArmPolicyDescription"),
				Options: []*armmediaservices.ContentKeyPolicyOption{
					{
						Name: to.Ptr("ClearKeyOption"),
						Configuration: &armmediaservices.ContentKeyPolicyClearKeyConfiguration{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
						},
						Restriction: &armmediaservices.ContentKeyPolicyTokenRestriction{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
							Audience:  to.Ptr("urn:audience"),
							Issuer:    to.Ptr("urn:issuer"),
							PrimaryVerificationKey: &armmediaservices.ContentKeyPolicySymmetricTokenKey{
								ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
								KeyValue:  []byte("AAAAAAAAAAAAAAAAAAAAAA=="),
							},
							RestrictionTokenType: to.Ptr(armmediaservices.ContentKeyPolicyRestrictionTokenTypeSwt),
						},
					},
					{
						Name: to.Ptr("widevineoption"),
						Configuration: &armmediaservices.ContentKeyPolicyWidevineConfiguration{
							ODataType:        to.Ptr("#Microsoft.Media.ContentKeyPolicyWidevineConfiguration"),
							WidevineTemplate: to.Ptr("{\"allowed_track_types\":\"SD_HD\",\"content_key_specs\":[{\"track_type\":\"SD\",\"security_level\":1,\"required_output_protection\":{\"hdcp\":\"HDCP_V2\"}}],\"policy_overrides\":{\"can_play\":true,\"can_persist\":true,\"can_renew\":false}}"),
						},
						Restriction: &armmediaservices.ContentKeyPolicyOpenRestriction{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
						},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-create-multiple-options.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.ContentKeyPolicy{
			Name: to.Ptr("PolicyCreatedWithMultipleOptions"),
			Type: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/contentKeyPolicies/PolicyCreatedWithMultipleOptions"),
			Properties: &armmediaservices.ContentKeyPolicyProperties{
				Description:  to.Ptr("ArmPolicyDescription"),
				Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:29.98Z"); return t }()),
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:29.98Z"); return t }()),
				Options: []*armmediaservices.ContentKeyPolicyOption{
					{
						Name: to.Ptr("ClearKeyOption"),
						Configuration: &armmediaservices.ContentKeyPolicyClearKeyConfiguration{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
						},
						PolicyOptionID: to.Ptr("8dac9510-770a-401f-8f2b-f72640977ed0"),
						Restriction: &armmediaservices.ContentKeyPolicyTokenRestriction{
							ODataType:                 to.Ptr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
							AlternateVerificationKeys: []armmediaservices.ContentKeyPolicyRestrictionTokenKeyClassification{},
							Audience:                  to.Ptr("urn:audience"),
							Issuer:                    to.Ptr("urn:issuer"),
							PrimaryVerificationKey: &armmediaservices.ContentKeyPolicySymmetricTokenKey{
								ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
								KeyValue:  []byte(""),
							},
							RequiredClaims:       []*armmediaservices.ContentKeyPolicyTokenClaim{},
							RestrictionTokenType: to.Ptr(armmediaservices.ContentKeyPolicyRestrictionTokenTypeSwt),
						},
					},
					{
						Name: to.Ptr("widevineoption"),
						Configuration: &armmediaservices.ContentKeyPolicyWidevineConfiguration{
							ODataType:        to.Ptr("#Microsoft.Media.ContentKeyPolicyWidevineConfiguration"),
							WidevineTemplate: to.Ptr("{\"allowed_track_types\":\"SD_HD\",\"content_key_specs\":[{\"track_type\":\"SD\",\"security_level\":1,\"required_output_protection\":{\"hdcp\":\"HDCP_V2\"}}],\"policy_overrides\":{\"can_play\":true,\"can_persist\":true,\"can_renew\":false}}"),
						},
						PolicyOptionID: to.Ptr("fc121776-6ced-4135-be92-f928dedc029a"),
						Restriction: &armmediaservices.ContentKeyPolicyOpenRestriction{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
						},
					}},
				PolicyID: to.Ptr("07ad673b-dc14-4230-adab-716622f33992"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContentKeyPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContentKeyPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-create-multiple-options.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContentKeyPolicies_Delete(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Key Policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewContentKeyPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"contoso",
		"contosomedia",
		"PolicyWithPlayReadyOptionAndOpenRestriction",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-delete.json: %v", err)
	}
}

func TestContentKeyPolicies_Update(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a Content Key Policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewContentKeyPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"contoso",
		"contosomedia",
		"PolicyWithClearKeyOptionAndTokenRestriction",
		armmediaservices.ContentKeyPolicy{
			Properties: &armmediaservices.ContentKeyPolicyProperties{
				Description: to.Ptr("Updated Policy"),
				Options: []*armmediaservices.ContentKeyPolicyOption{
					{
						Name: to.Ptr("ClearKeyOption"),
						Configuration: &armmediaservices.ContentKeyPolicyClearKeyConfiguration{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
						},
						Restriction: &armmediaservices.ContentKeyPolicyOpenRestriction{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
						},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.ContentKeyPolicy{
			Name: to.Ptr("PolicyWithClearKeyOptionAndTokenRestriction"),
			Type: to.Ptr("Microsoft.Media/mediaservices/contentKeyPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/contentKeyPolicies/PolicyWithClearKeyOptionAndTokenRestriction"),
			Properties: &armmediaservices.ContentKeyPolicyProperties{
				Description:  to.Ptr("Updated Policy"),
				Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-01T00:00:00Z"); return t }()),
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:30.303Z"); return t }()),
				Options: []*armmediaservices.ContentKeyPolicyOption{
					{
						Name: to.Ptr("ClearKeyOption"),
						Configuration: &armmediaservices.ContentKeyPolicyClearKeyConfiguration{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
						},
						PolicyOptionID: to.Ptr("7d3f4bc1-d2bf-43a3-b02e-a7e31ab15d43"),
						Restriction: &armmediaservices.ContentKeyPolicyOpenRestriction{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
						},
					}},
				PolicyID: to.Ptr("8352435b-ebea-4681-aae7-e19277771f64"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ContentKeyPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContentKeyPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestContentKeyPolicies_GetPolicyPropertiesWithSecrets(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-get-with-secrets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Content Key Policy with secrets"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewContentKeyPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetPolicyPropertiesWithSecrets(ctx,
		"contoso",
		"contosomedia",
		"PolicyWithMultipleOptions",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-get-with-secrets.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.ContentKeyPolicyProperties{
			Description:  to.Ptr("A policy with multiple options."),
			Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-12-01T00:00:00Z"); return t }()),
			LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-02T00:00:00Z"); return t }()),
			Options: []*armmediaservices.ContentKeyPolicyOption{
				{
					Configuration: &armmediaservices.ContentKeyPolicyClearKeyConfiguration{
						ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration"),
					},
					PolicyOptionID: to.Ptr("caf1e28c-8288-4301-8c46-c0f9312c512f"),
					Restriction: &armmediaservices.ContentKeyPolicyTokenRestriction{
						ODataType:                 to.Ptr("#Microsoft.Media.ContentKeyPolicyTokenRestriction"),
						AlternateVerificationKeys: []armmediaservices.ContentKeyPolicyRestrictionTokenKeyClassification{},
						Audience:                  to.Ptr("urn:test"),
						Issuer:                    to.Ptr("http://testacs"),
						PrimaryVerificationKey: &armmediaservices.ContentKeyPolicySymmetricTokenKey{
							ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicySymmetricTokenKey"),
							KeyValue:  []byte("AAA="),
						},
						RequiredClaims: []*armmediaservices.ContentKeyPolicyTokenClaim{
							{
								ClaimType: to.Ptr("urn:microsoft:azure:mediaservices:contentkeyidentifier"),
							},
							{
								ClaimType:  to.Ptr("DRM"),
								ClaimValue: to.Ptr("Widevine"),
							}},
						RestrictionTokenType: to.Ptr(armmediaservices.ContentKeyPolicyRestrictionTokenTypeJwt),
					},
				},
				{
					Configuration: &armmediaservices.ContentKeyPolicyWidevineConfiguration{
						ODataType:        to.Ptr("#Microsoft.Media.ContentKeyPolicyWidevineConfiguration"),
						WidevineTemplate: to.Ptr("{\"allowed_track_types\":\"SD_HD\",\"content_key_specs\":[{\"track_type\":\"SD\",\"security_level\":1,\"required_output_protection\":{\"hdcp\":\"HDCP_V2\"}}],\"policy_overrides\":{\"can_play\":true,\"can_persist\":true,\"can_renew\":false}}"),
					},
					PolicyOptionID: to.Ptr("da346259-0cd6-4609-89dc-15ac131bd92f"),
					Restriction: &armmediaservices.ContentKeyPolicyOpenRestriction{
						ODataType: to.Ptr("#Microsoft.Media.ContentKeyPolicyOpenRestriction"),
					},
				}},
			PolicyID: to.Ptr("ed7f3d1b-cfa7-4181-b966-e0b3027eec3a"),
		}
		if !reflect.DeepEqual(exampleRes, res.ContentKeyPolicyProperties) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ContentKeyPolicyProperties)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/content-key-policies-get-with-secrets.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransforms_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-list-all.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists the Transforms"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewTransformsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("contosoresources",
		"contosomedia",
		&armmediaservices.TransformsClientListOptions{Filter: nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-list-all.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.TransformCollection{
			Value: []*armmediaservices.Transform{
				{
					Name: to.Ptr("sampleEncode"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/sampleEncode"),
					Properties: &armmediaservices.TransformProperties{
						Description:  to.Ptr("A sample Transform using the Standard Encoder with a built in preset."),
						Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.1563119Z"); return t }()),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.1563119Z"); return t }()),
						Outputs: []*armmediaservices.TransformOutput{
							{
								OnError: to.Ptr(armmediaservices.OnErrorTypeStopProcessingJob),
								Preset: &armmediaservices.BuiltInStandardEncoderPreset{
									ODataType:  to.Ptr("#Microsoft.Media.BuiltInStandardEncoderPreset"),
									PresetName: to.Ptr(armmediaservices.EncoderNamedPresetAdaptiveStreaming),
								},
								RelativePriority: to.Ptr(armmediaservices.PriorityNormal),
							}},
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.1563119Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.1563119Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("sampleEncodeAndVideoIndex"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/sampleEncodeAndVideoIndex"),
					Properties: &armmediaservices.TransformProperties{
						Description:  to.Ptr("A sample Transform using the Standard Encoder with a built-in preset, as well as the Video Analyzer."),
						Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.281304Z"); return t }()),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.281304Z"); return t }()),
						Outputs: []*armmediaservices.TransformOutput{
							{
								OnError: to.Ptr(armmediaservices.OnErrorTypeStopProcessingJob),
								Preset: &armmediaservices.BuiltInStandardEncoderPreset{
									ODataType:  to.Ptr("#Microsoft.Media.BuiltInStandardEncoderPreset"),
									PresetName: to.Ptr(armmediaservices.EncoderNamedPresetAdaptiveStreaming),
								},
								RelativePriority: to.Ptr(armmediaservices.PriorityNormal),
							},
							{
								OnError: to.Ptr(armmediaservices.OnErrorTypeStopProcessingJob),
								Preset: &armmediaservices.VideoAnalyzerPreset{
									ODataType:         to.Ptr("#Microsoft.Media.VideoAnalyzerPreset"),
									Mode:              to.Ptr(armmediaservices.AudioAnalysisModeStandard),
									InsightsToExtract: to.Ptr(armmediaservices.InsightsTypeAllInsights),
								},
								RelativePriority: to.Ptr(armmediaservices.PriorityNormal),
							}},
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.281304Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.281304Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TransformCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TransformCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-list-all.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-list-all-filter-by-created.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists the Transforms filter by created"},
	})
	client = armmediaservices.NewTransformsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("contosoresources",
		"contosomedia",
		&armmediaservices.TransformsClientListOptions{Filter: to.Ptr("properties/created gt 2021-06-01T00:00:00.0000000Z and properties/created le 2021-06-01T00:00:10.0000000Z"),
			Orderby: to.Ptr("properties/created"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-list-all-filter-by-created.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.TransformCollection{
			Value: []*armmediaservices.Transform{
				{
					Name: to.Ptr("sampleEncodeAndVideoIndex"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/sampleEncodeAndVideoIndex"),
					Properties: &armmediaservices.TransformProperties{
						Description:  to.Ptr("A sample Transform using the Video Analyzer."),
						Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						Outputs: []*armmediaservices.TransformOutput{
							{
								OnError: to.Ptr(armmediaservices.OnErrorTypeStopProcessingJob),
								Preset: &armmediaservices.VideoAnalyzerPreset{
									ODataType:         to.Ptr("#Microsoft.Media.VideoAnalyzerPreset"),
									Mode:              to.Ptr(armmediaservices.AudioAnalysisModeStandard),
									InsightsToExtract: to.Ptr(armmediaservices.InsightsTypeAllInsights),
								},
								RelativePriority: to.Ptr(armmediaservices.PriorityNormal),
							}},
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TransformCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TransformCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-list-all-filter-by-created.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-list-all-filter-by-lastmodified.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists the Transforms filter by lastmodified"},
	})
	client = armmediaservices.NewTransformsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("contosoresources",
		"contosomedia",
		&armmediaservices.TransformsClientListOptions{Filter: to.Ptr("properties/lastmodified gt 2021-06-01T00:00:00.0000000Z and properties/lastmodified le 2021-06-01T00:00:10.0000000Z"),
			Orderby: to.Ptr("properties/lastmodified desc"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-list-all-filter-by-lastmodified.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.TransformCollection{
			Value: []*armmediaservices.Transform{
				{
					Name: to.Ptr("sampleEncodeAndVideoIndex"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/sampleEncodeAndVideoIndex"),
					Properties: &armmediaservices.TransformProperties{
						Description:  to.Ptr("A sample Transform using the Video Analyzer."),
						Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						Outputs: []*armmediaservices.TransformOutput{
							{
								OnError: to.Ptr(armmediaservices.OnErrorTypeStopProcessingJob),
								Preset: &armmediaservices.VideoAnalyzerPreset{
									ODataType:         to.Ptr("#Microsoft.Media.VideoAnalyzerPreset"),
									Mode:              to.Ptr(armmediaservices.AudioAnalysisModeStandard),
									InsightsToExtract: to.Ptr(armmediaservices.InsightsTypeAllInsights),
								},
								RelativePriority: to.Ptr(armmediaservices.PriorityNormal),
							}},
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TransformCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TransformCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-list-all-filter-by-lastmodified.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-list-all-filter-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists the Transforms filter by name"},
	})
	client = armmediaservices.NewTransformsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("contosoresources",
		"contosomedia",
		&armmediaservices.TransformsClientListOptions{Filter: to.Ptr("(name eq 'sampleEncode') or (name eq 'sampleEncodeAndVideoIndex')"),
			Orderby: to.Ptr("name desc"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-list-all-filter-by-name.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.TransformCollection{
			Value: []*armmediaservices.Transform{
				{
					Name: to.Ptr("sampleEncodeAndVideoIndex"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/sampleEncodeAndVideoIndex"),
					Properties: &armmediaservices.TransformProperties{
						Description:  to.Ptr("A sample Transform using the Standard Encoder with a built-in preset, as well as the Video Analyzer."),
						Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.9563077Z"); return t }()),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.9563077Z"); return t }()),
						Outputs: []*armmediaservices.TransformOutput{
							{
								OnError: to.Ptr(armmediaservices.OnErrorTypeStopProcessingJob),
								Preset: &armmediaservices.BuiltInStandardEncoderPreset{
									ODataType:  to.Ptr("#Microsoft.Media.BuiltInStandardEncoderPreset"),
									PresetName: to.Ptr(armmediaservices.EncoderNamedPresetAdaptiveStreaming),
								},
								RelativePriority: to.Ptr(armmediaservices.PriorityNormal),
							},
							{
								OnError: to.Ptr(armmediaservices.OnErrorTypeStopProcessingJob),
								Preset: &armmediaservices.VideoAnalyzerPreset{
									ODataType:         to.Ptr("#Microsoft.Media.VideoAnalyzerPreset"),
									Mode:              to.Ptr(armmediaservices.AudioAnalysisModeStandard),
									InsightsToExtract: to.Ptr(armmediaservices.InsightsTypeAllInsights),
								},
								RelativePriority: to.Ptr(armmediaservices.PriorityNormal),
							}},
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.9563077Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.9563077Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("sampleEncode"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/sampleEncode"),
					Properties: &armmediaservices.TransformProperties{
						Description:  to.Ptr("A sample Transform using the Standard Encoder with a built in preset."),
						Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.9563077Z"); return t }()),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.9563077Z"); return t }()),
						Outputs: []*armmediaservices.TransformOutput{
							{
								OnError: to.Ptr(armmediaservices.OnErrorTypeStopProcessingJob),
								Preset: &armmediaservices.BuiltInStandardEncoderPreset{
									ODataType:  to.Ptr("#Microsoft.Media.BuiltInStandardEncoderPreset"),
									PresetName: to.Ptr(armmediaservices.EncoderNamedPresetAdaptiveStreaming),
								},
								RelativePriority: to.Ptr(armmediaservices.PriorityNormal),
							}},
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.9563077Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:28.9563077Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TransformCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TransformCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-list-all-filter-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransforms_Get(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-get-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Transform by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewTransformsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"contosoresources",
		"contosomedia",
		"sampleTransform",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-get-by-name.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.Transform{
			Name: to.Ptr("sampleTransform"),
			Type: to.Ptr("Microsoft.Media/mediaservices/transforms"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/sampleTransform"),
			Properties: &armmediaservices.TransformProperties{
				Description:  to.Ptr("A sample Transform using the Standard Encoder with a built in preset."),
				Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:29.2267128Z"); return t }()),
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:29.2267128Z"); return t }()),
				Outputs: []*armmediaservices.TransformOutput{
					{
						OnError: to.Ptr(armmediaservices.OnErrorTypeStopProcessingJob),
						Preset: &armmediaservices.BuiltInStandardEncoderPreset{
							ODataType:  to.Ptr("#Microsoft.Media.BuiltInStandardEncoderPreset"),
							PresetName: to.Ptr(armmediaservices.EncoderNamedPresetH264MultipleBitrate1080P),
						},
						RelativePriority: to.Ptr(armmediaservices.PriorityNormal),
					}},
			},
			SystemData: &armmediaservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:29.2267128Z"); return t }()),
				CreatedBy:          to.Ptr("contoso@microsoft.com"),
				CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:29.2267128Z"); return t }()),
				LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
				LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Transform) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Transform)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-get-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransforms_CreateOrUpdate(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a Transform"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewTransformsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"contosoresources",
		"contosomedia",
		"createdTransform",
		armmediaservices.Transform{
			Properties: &armmediaservices.TransformProperties{
				Description: to.Ptr("Example Transform to illustrate create and update."),
				Outputs: []*armmediaservices.TransformOutput{
					{
						Preset: &armmediaservices.BuiltInStandardEncoderPreset{
							ODataType:  to.Ptr("#Microsoft.Media.BuiltInStandardEncoderPreset"),
							PresetName: to.Ptr(armmediaservices.EncoderNamedPresetAdaptiveStreaming),
						},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.Transform{
			Name: to.Ptr("createdTransform"),
			Type: to.Ptr("Microsoft.Media/mediaservices/transforms"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/createdTransform"),
			Properties: &armmediaservices.TransformProperties{
				Description:  to.Ptr("Example Transform to illustrate create and update."),
				Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:29.3367225Z"); return t }()),
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:29.3367225Z"); return t }()),
				Outputs: []*armmediaservices.TransformOutput{
					{
						OnError: to.Ptr(armmediaservices.OnErrorTypeStopProcessingJob),
						Preset: &armmediaservices.BuiltInStandardEncoderPreset{
							ODataType:  to.Ptr("#Microsoft.Media.BuiltInStandardEncoderPreset"),
							PresetName: to.Ptr(armmediaservices.EncoderNamedPresetAdaptiveStreaming),
						},
						RelativePriority: to.Ptr(armmediaservices.PriorityNormal),
					}},
			},
			SystemData: &armmediaservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:29.3367225Z"); return t }()),
				CreatedBy:          to.Ptr("contoso@microsoft.com"),
				CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:29.3367225Z"); return t }()),
				LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
				LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Transform) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Transform)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransforms_Delete(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Transform"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewTransformsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"contosoresources",
		"contosomedia",
		"sampleTransform",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-delete.json: %v", err)
	}
}

func TestTransforms_Update(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a Transform."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewTransformsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"contosoresources",
		"contosomedia",
		"transformToUpdate",
		armmediaservices.Transform{
			Properties: &armmediaservices.TransformProperties{
				Description: to.Ptr("Example transform to illustrate update."),
				Outputs: []*armmediaservices.TransformOutput{
					{
						Preset: &armmediaservices.BuiltInStandardEncoderPreset{
							ODataType:  to.Ptr("#Microsoft.Media.BuiltInStandardEncoderPreset"),
							PresetName: to.Ptr(armmediaservices.EncoderNamedPresetH264MultipleBitrate720P),
						},
						RelativePriority: to.Ptr(armmediaservices.PriorityHigh),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.Transform{
			Name: to.Ptr("transformToUpdate"),
			Type: to.Ptr("Microsoft.Media/mediaservices/transforms"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/transformToUpdate"),
			Properties: &armmediaservices.TransformProperties{
				Description:  to.Ptr("Example transform to illustrate update."),
				Created:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:29.6217348Z"); return t }()),
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:29.6267341Z"); return t }()),
				Outputs: []*armmediaservices.TransformOutput{
					{
						OnError: to.Ptr(armmediaservices.OnErrorTypeStopProcessingJob),
						Preset: &armmediaservices.BuiltInStandardEncoderPreset{
							ODataType:  to.Ptr("#Microsoft.Media.BuiltInStandardEncoderPreset"),
							PresetName: to.Ptr(armmediaservices.EncoderNamedPresetH264MultipleBitrate720P),
						},
						RelativePriority: to.Ptr(armmediaservices.PriorityHigh),
					}},
			},
			SystemData: &armmediaservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:29.6217348Z"); return t }()),
				CreatedBy:          to.Ptr("contoso@microsoft.com"),
				CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:29.6267341Z"); return t }()),
				LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
				LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Transform) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Transform)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/transforms-update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-created.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists Jobs for the Transform filter by created."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("contosoresources",
		"contosomedia",
		"exampleTransform",
		&armmediaservices.JobsClientListOptions{Filter: to.Ptr("properties/created ge 2021-06-01T00:00:10.0000000Z and properties/created le 2021-06-01T00:00:20.0000000Z"),
			Orderby: to.Ptr("properties/created"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-created.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.JobCollection{
			Value: []*armmediaservices.Job{
				{
					Name: to.Ptr("job2"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job2"),
					Properties: &armmediaservices.JobProperties{
						CorrelationData: map[string]*string{},
						Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						Input: &armmediaservices.JobInputs{
							ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
							Inputs: []armmediaservices.JobInputClassification{
								&armmediaservices.JobInputAsset{
									ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
									Files:            []*string{},
									InputDefinitions: []armmediaservices.InputDefinitionClassification{},
									AssetName:        to.Ptr("job2-InputAsset"),
								}},
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						Outputs: []armmediaservices.JobOutputClassification{
							&armmediaservices.JobOutputAsset{
								ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
								Label:     to.Ptr("example-custom-label"),
								Progress:  to.Ptr[int32](50),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.4143905Z"); return t }()),
								State:     to.Ptr(armmediaservices.JobStateProcessing),
								AssetName: to.Ptr("job2-OutputAsset"),
							}},
						Priority:  to.Ptr(armmediaservices.PriorityLow),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.4143905Z"); return t }()),
						State:     to.Ptr(armmediaservices.JobStateProcessing),
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("job3"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job3"),
					Properties: &armmediaservices.JobProperties{
						CorrelationData: map[string]*string{},
						Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:20Z"); return t }()),
						EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:30.4143905Z"); return t }()),
						Input: &armmediaservices.JobInputs{
							ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
							Inputs: []armmediaservices.JobInputClassification{
								&armmediaservices.JobInputAsset{
									ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
									Files:            []*string{},
									InputDefinitions: []armmediaservices.InputDefinitionClassification{},
									AssetName:        to.Ptr("job3-InputAsset"),
								}},
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:20Z"); return t }()),
						Outputs: []armmediaservices.JobOutputClassification{
							&armmediaservices.JobOutputAsset{
								ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
								EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:30.4143905Z"); return t }()),
								Label:     to.Ptr("example-custom-label"),
								Progress:  to.Ptr[int32](100),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.4143905Z"); return t }()),
								State:     to.Ptr(armmediaservices.JobStateFinished),
								AssetName: to.Ptr("job3-OutputAsset"),
							}},
						Priority:  to.Ptr(armmediaservices.PriorityLow),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.4143905Z"); return t }()),
						State:     to.Ptr(armmediaservices.JobStateFinished),
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:20Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:20Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-created.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-lastmodified.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists Jobs for the Transform filter by lastmodified."},
	})
	client = armmediaservices.NewJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("contosoresources",
		"contosomedia",
		"exampleTransform",
		&armmediaservices.JobsClientListOptions{Filter: to.Ptr("properties/lastmodified ge 2021-06-01T00:00:10.0000000Z and properties/lastmodified le 2021-06-01T00:00:20.0000000Z"),
			Orderby: to.Ptr("properties/lastmodified desc"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-lastmodified.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.JobCollection{
			Value: []*armmediaservices.Job{
				{
					Name: to.Ptr("job3"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job3"),
					Properties: &armmediaservices.JobProperties{
						CorrelationData: map[string]*string{},
						Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:20Z"); return t }()),
						EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:30.4893941Z"); return t }()),
						Input: &armmediaservices.JobInputs{
							ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
							Inputs: []armmediaservices.JobInputClassification{
								&armmediaservices.JobInputAsset{
									ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
									Files:            []*string{},
									InputDefinitions: []armmediaservices.InputDefinitionClassification{},
									AssetName:        to.Ptr("job3-InputAsset"),
								}},
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:20Z"); return t }()),
						Outputs: []armmediaservices.JobOutputClassification{
							&armmediaservices.JobOutputAsset{
								ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
								EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:30.4893941Z"); return t }()),
								Label:     to.Ptr("example-custom-label"),
								Progress:  to.Ptr[int32](100),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.4893941Z"); return t }()),
								State:     to.Ptr(armmediaservices.JobStateFinished),
								AssetName: to.Ptr("job3-OutputAsset"),
							}},
						Priority:  to.Ptr(armmediaservices.PriorityLow),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.4893941Z"); return t }()),
						State:     to.Ptr(armmediaservices.JobStateFinished),
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:20Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:20Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("job2"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job2"),
					Properties: &armmediaservices.JobProperties{
						CorrelationData: map[string]*string{},
						Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						Input: &armmediaservices.JobInputs{
							ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
							Inputs: []armmediaservices.JobInputClassification{
								&armmediaservices.JobInputAsset{
									ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
									Files:            []*string{},
									InputDefinitions: []armmediaservices.InputDefinitionClassification{},
									AssetName:        to.Ptr("job2-InputAsset"),
								}},
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						Outputs: []armmediaservices.JobOutputClassification{
							&armmediaservices.JobOutputAsset{
								ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
								Label:     to.Ptr("example-custom-label"),
								Progress:  to.Ptr[int32](50),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.4893941Z"); return t }()),
								State:     to.Ptr(armmediaservices.JobStateProcessing),
								AssetName: to.Ptr("job2-OutputAsset"),
							}},
						Priority:  to.Ptr(armmediaservices.PriorityLow),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.4893941Z"); return t }()),
						State:     to.Ptr(armmediaservices.JobStateProcessing),
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:10Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-lastmodified.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-name-and-state.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists Jobs for the Transform filter by name and state."},
	})
	client = armmediaservices.NewJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("contosoresources",
		"contosomedia",
		"exampleTransform",
		&armmediaservices.JobsClientListOptions{Filter: to.Ptr("name eq 'job3' and properties/state eq Microsoft.Media.JobState'finished'"),
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-name-and-state.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.JobCollection{
			Value: []*armmediaservices.Job{
				{
					Name: to.Ptr("job3"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job3"),
					Properties: &armmediaservices.JobProperties{
						CorrelationData: map[string]*string{},
						Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:30.3393701Z"); return t }()),
						Input: &armmediaservices.JobInputs{
							ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
							Inputs: []armmediaservices.JobInputClassification{
								&armmediaservices.JobInputAsset{
									ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
									Files:            []*string{},
									InputDefinitions: []armmediaservices.InputDefinitionClassification{},
									AssetName:        to.Ptr("job3-InputAsset"),
								}},
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Outputs: []armmediaservices.JobOutputClassification{
							&armmediaservices.JobOutputAsset{
								ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
								EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:30.3393701Z"); return t }()),
								Label:     to.Ptr("example-custom-label"),
								Progress:  to.Ptr[int32](100),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.3393701Z"); return t }()),
								State:     to.Ptr(armmediaservices.JobStateFinished),
								AssetName: to.Ptr("job3-OutputAsset"),
							}},
						Priority:  to.Ptr(armmediaservices.PriorityLow),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.3393701Z"); return t }()),
						State:     to.Ptr(armmediaservices.JobStateFinished),
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-name-and-state.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists Jobs for the Transform filter by name."},
	})
	client = armmediaservices.NewJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("contosoresources",
		"contosomedia",
		"exampleTransform",
		&armmediaservices.JobsClientListOptions{Filter: to.Ptr("name eq 'job1' or name eq 'job2'"),
			Orderby: to.Ptr("name"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-name.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.JobCollection{
			Value: []*armmediaservices.Job{
				{
					Name: to.Ptr("job1"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job1"),
					Properties: &armmediaservices.JobProperties{
						CorrelationData: map[string]*string{},
						Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Input: &armmediaservices.JobInputs{
							ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
							Inputs: []armmediaservices.JobInputClassification{
								&armmediaservices.JobInputAsset{
									ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
									Files:            []*string{},
									InputDefinitions: []armmediaservices.InputDefinitionClassification{},
									AssetName:        to.Ptr("job1-InputAsset"),
								}},
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Outputs: []armmediaservices.JobOutputClassification{
							&armmediaservices.JobOutputAsset{
								ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
								Label:     to.Ptr("example-custom-label"),
								Progress:  to.Ptr[int32](0),
								State:     to.Ptr(armmediaservices.JobStateQueued),
								AssetName: to.Ptr("job1-OutputAsset"),
							}},
						Priority: to.Ptr(armmediaservices.PriorityLow),
						State:    to.Ptr(armmediaservices.JobStateQueued),
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("job2"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job2"),
					Properties: &armmediaservices.JobProperties{
						CorrelationData: map[string]*string{},
						Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Input: &armmediaservices.JobInputs{
							ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
							Inputs: []armmediaservices.JobInputClassification{
								&armmediaservices.JobInputAsset{
									ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
									Files:            []*string{},
									InputDefinitions: []armmediaservices.InputDefinitionClassification{},
									AssetName:        to.Ptr("job2-InputAsset"),
								}},
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Outputs: []armmediaservices.JobOutputClassification{
							&armmediaservices.JobOutputAsset{
								ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
								Label:     to.Ptr("example-custom-label"),
								Progress:  to.Ptr[int32](50),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.0631403Z"); return t }()),
								State:     to.Ptr(armmediaservices.JobStateProcessing),
								AssetName: to.Ptr("job2-OutputAsset"),
							}},
						Priority:  to.Ptr(armmediaservices.PriorityLow),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.0631403Z"); return t }()),
						State:     to.Ptr(armmediaservices.JobStateProcessing),
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-state-eq.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists Jobs for the Transform filter by state equal."},
	})
	client = armmediaservices.NewJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("contosoresources",
		"contosomedia",
		"exampleTransform",
		&armmediaservices.JobsClientListOptions{Filter: to.Ptr("properties/state eq Microsoft.Media.JobState'Processing'"),
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-state-eq.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.JobCollection{
			Value: []*armmediaservices.Job{
				{
					Name: to.Ptr("job2"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job2"),
					Properties: &armmediaservices.JobProperties{
						CorrelationData: map[string]*string{},
						Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Input: &armmediaservices.JobInputs{
							ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
							Inputs: []armmediaservices.JobInputClassification{
								&armmediaservices.JobInputAsset{
									ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
									Files:            []*string{},
									InputDefinitions: []armmediaservices.InputDefinitionClassification{},
									AssetName:        to.Ptr("job2-InputAsset"),
								}},
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Outputs: []armmediaservices.JobOutputClassification{
							&armmediaservices.JobOutputAsset{
								ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
								Label:     to.Ptr("example-custom-label"),
								Progress:  to.Ptr[int32](50),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.1393325Z"); return t }()),
								State:     to.Ptr(armmediaservices.JobStateProcessing),
								AssetName: to.Ptr("job2-OutputAsset"),
							}},
						Priority:  to.Ptr(armmediaservices.PriorityLow),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.1393325Z"); return t }()),
						State:     to.Ptr(armmediaservices.JobStateProcessing),
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("job3"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job3"),
					Properties: &armmediaservices.JobProperties{
						CorrelationData: map[string]*string{},
						Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Input: &armmediaservices.JobInputs{
							ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
							Inputs: []armmediaservices.JobInputClassification{
								&armmediaservices.JobInputAsset{
									ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
									Files:            []*string{},
									InputDefinitions: []armmediaservices.InputDefinitionClassification{},
									AssetName:        to.Ptr("job3-InputAsset"),
								}},
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Outputs: []armmediaservices.JobOutputClassification{
							&armmediaservices.JobOutputAsset{
								ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
								Label:     to.Ptr("example-custom-label"),
								Progress:  to.Ptr[int32](50),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.1393325Z"); return t }()),
								State:     to.Ptr(armmediaservices.JobStateProcessing),
								AssetName: to.Ptr("job3-OutputAsset"),
							}},
						Priority:  to.Ptr(armmediaservices.PriorityLow),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.1393325Z"); return t }()),
						State:     to.Ptr(armmediaservices.JobStateProcessing),
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-state-eq.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-state-ne.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists Jobs for the Transform filter by state not equal."},
	})
	client = armmediaservices.NewJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("contosoresources",
		"contosomedia",
		"exampleTransform",
		&armmediaservices.JobsClientListOptions{Filter: to.Ptr("properties/state ne Microsoft.Media.JobState'processing'"),
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-state-ne.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.JobCollection{
			Value: []*armmediaservices.Job{
				{
					Name: to.Ptr("job1"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job1"),
					Properties: &armmediaservices.JobProperties{
						CorrelationData: map[string]*string{},
						Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Input: &armmediaservices.JobInputs{
							ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
							Inputs: []armmediaservices.JobInputClassification{
								&armmediaservices.JobInputAsset{
									ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
									Files:            []*string{},
									InputDefinitions: []armmediaservices.InputDefinitionClassification{},
									AssetName:        to.Ptr("job1-InputAsset"),
								}},
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Outputs: []armmediaservices.JobOutputClassification{
							&armmediaservices.JobOutputAsset{
								ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
								Label:     to.Ptr("example-custom-label"),
								Progress:  to.Ptr[int32](0),
								State:     to.Ptr(armmediaservices.JobStateQueued),
								AssetName: to.Ptr("job1-OutputAsset"),
							}},
						Priority: to.Ptr(armmediaservices.PriorityLow),
						State:    to.Ptr(armmediaservices.JobStateQueued),
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("job4"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job4"),
					Properties: &armmediaservices.JobProperties{
						CorrelationData: map[string]*string{},
						Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:30.2743374Z"); return t }()),
						Input: &armmediaservices.JobInputs{
							ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
							Inputs: []armmediaservices.JobInputClassification{
								&armmediaservices.JobInputAsset{
									ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
									Files:            []*string{},
									InputDefinitions: []armmediaservices.InputDefinitionClassification{},
									AssetName:        to.Ptr("job4-InputAsset"),
								}},
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Outputs: []armmediaservices.JobOutputClassification{
							&armmediaservices.JobOutputAsset{
								ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
								EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:30.2743374Z"); return t }()),
								Label:     to.Ptr("example-custom-label"),
								Progress:  to.Ptr[int32](100),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.2743374Z"); return t }()),
								State:     to.Ptr(armmediaservices.JobStateFinished),
								AssetName: to.Ptr("job4-OutputAsset"),
							}},
						Priority:  to.Ptr(armmediaservices.PriorityLow),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:30.2743374Z"); return t }()),
						State:     to.Ptr(armmediaservices.JobStateFinished),
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all-filter-by-state-ne.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all of the Jobs for the Transform."},
	})
	client = armmediaservices.NewJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager = client.List("contosoresources",
		"contosomedia",
		"exampleTransform",
		&armmediaservices.JobsClientListOptions{Filter: nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.JobCollection{
			Value: []*armmediaservices.Job{
				{
					Name: to.Ptr("job1"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job1"),
					Properties: &armmediaservices.JobProperties{
						CorrelationData: map[string]*string{},
						Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Input: &armmediaservices.JobInputs{
							ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
							Inputs: []armmediaservices.JobInputClassification{
								&armmediaservices.JobInputAsset{
									ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
									Files:            []*string{},
									InputDefinitions: []armmediaservices.InputDefinitionClassification{},
									AssetName:        to.Ptr("job1-InputAsset"),
								}},
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Outputs: []armmediaservices.JobOutputClassification{
							&armmediaservices.JobOutputAsset{
								ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
								Label:     to.Ptr("example-custom-label"),
								Progress:  to.Ptr[int32](0),
								State:     to.Ptr(armmediaservices.JobStateQueued),
								AssetName: to.Ptr("job1-OutputAsset"),
							}},
						Priority: to.Ptr(armmediaservices.PriorityLow),
						State:    to.Ptr(armmediaservices.JobStateQueued),
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("job2"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job2"),
					Properties: &armmediaservices.JobProperties{
						CorrelationData: map[string]*string{},
						Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Input: &armmediaservices.JobInputs{
							ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
							Inputs: []armmediaservices.JobInputClassification{
								&armmediaservices.JobInputAsset{
									ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
									Files:            []*string{},
									InputDefinitions: []armmediaservices.InputDefinitionClassification{},
									AssetName:        to.Ptr("job2-InputAsset"),
								}},
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Outputs: []armmediaservices.JobOutputClassification{
							&armmediaservices.JobOutputAsset{
								ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
								Label:     to.Ptr("example-custom-label"),
								Progress:  to.Ptr[int32](50),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:29.691737Z"); return t }()),
								State:     to.Ptr(armmediaservices.JobStateProcessing),
								AssetName: to.Ptr("job2-OutputAsset"),
							}},
						Priority:  to.Ptr(armmediaservices.PriorityLow),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:29.691737Z"); return t }()),
						State:     to.Ptr(armmediaservices.JobStateProcessing),
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("job3"),
					Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job3"),
					Properties: &armmediaservices.JobProperties{
						CorrelationData: map[string]*string{},
						Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						EndTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:29.691737Z"); return t }()),
						Input: &armmediaservices.JobInputs{
							ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
							Inputs: []armmediaservices.JobInputClassification{
								&armmediaservices.JobInputAsset{
									ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
									Files:            []*string{},
									InputDefinitions: []armmediaservices.InputDefinitionClassification{},
									AssetName:        to.Ptr("job3-InputAsset"),
								}},
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						Outputs: []armmediaservices.JobOutputClassification{
							&armmediaservices.JobOutputAsset{
								ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
								EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:29.691737Z"); return t }()),
								Label:     to.Ptr("example-custom-label"),
								Progress:  to.Ptr[int32](100),
								StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:29.691737Z"); return t }()),
								State:     to.Ptr(armmediaservices.JobStateFinished),
								AssetName: to.Ptr("job3-OutputAsset"),
							}},
						Priority:  to.Ptr(armmediaservices.PriorityLow),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:34:29.691737Z"); return t }()),
						State:     to.Ptr(armmediaservices.JobStateFinished),
					},
					SystemData: &armmediaservices.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						CreatedBy:          to.Ptr("contoso@microsoft.com"),
						CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
						LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
						LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-list-all.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_Get(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-get-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Job by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"contosoresources",
		"contosomedia",
		"exampleTransform",
		"job1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-get-by-name.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.Job{
			Name: to.Ptr("job1"),
			Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job1"),
			Properties: &armmediaservices.JobProperties{
				CorrelationData: map[string]*string{},
				Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
				Input: &armmediaservices.JobInputs{
					ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
					Inputs: []armmediaservices.JobInputClassification{
						&armmediaservices.JobInputAsset{
							ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
							Files:            []*string{},
							InputDefinitions: []armmediaservices.InputDefinitionClassification{},
							AssetName:        to.Ptr("job1-InputAsset"),
						}},
				},
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
				Outputs: []armmediaservices.JobOutputClassification{
					&armmediaservices.JobOutputAsset{
						ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
						Label:     to.Ptr("example-custom-label"),
						Progress:  to.Ptr[int32](0),
						State:     to.Ptr(armmediaservices.JobStateQueued),
						AssetName: to.Ptr("job1-OutputAsset"),
					}},
				Priority: to.Ptr(armmediaservices.PriorityLow),
				State:    to.Ptr(armmediaservices.JobStateQueued),
			},
			SystemData: &armmediaservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("contoso@microsoft.com"),
				CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
				LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
				LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Job) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Job)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-get-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_Create(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Create(ctx,
		"contosoresources",
		"contosomedia",
		"exampleTransform",
		"job1",
		armmediaservices.Job{
			Properties: &armmediaservices.JobProperties{
				CorrelationData: map[string]*string{
					"Key 2": to.Ptr("Value 2"),
					"key1":  to.Ptr("value1"),
				},
				Input: &armmediaservices.JobInputAsset{
					ODataType: to.Ptr("#Microsoft.Media.JobInputAsset"),
					AssetName: to.Ptr("job1-InputAsset"),
				},
				Outputs: []armmediaservices.JobOutputClassification{
					&armmediaservices.JobOutputAsset{
						ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
						AssetName: to.Ptr("job1-OutputAsset"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-create.json: %v", err)
	}
}

func TestJobs_Delete(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"contosoresources",
		"contosomedia",
		"exampleTransform",
		"jobToDelete",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-delete.json: %v", err)
	}
}

func TestJobs_Update(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a Job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"contosoresources",
		"contosomedia",
		"exampleTransform",
		"job1",
		armmediaservices.Job{
			Properties: &armmediaservices.JobProperties{
				Description: to.Ptr("Example job to illustrate update."),
				Input: &armmediaservices.JobInputAsset{
					ODataType: to.Ptr("#Microsoft.Media.JobInputAsset"),
					AssetName: to.Ptr("job1-InputAsset"),
				},
				Outputs: []armmediaservices.JobOutputClassification{
					&armmediaservices.JobOutputAsset{
						ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
						AssetName: to.Ptr("job1-OutputAsset"),
					}},
				Priority: to.Ptr(armmediaservices.PriorityHigh),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.Job{
			Name: to.Ptr("job1"),
			Type: to.Ptr("Microsoft.Media/mediaservices/transforms/jobs"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Media/mediaservices/contosomedia/transforms/exampleTransform/jobs/job1"),
			Properties: &armmediaservices.JobProperties{
				Description:     to.Ptr("Example job to illustrate update."),
				CorrelationData: map[string]*string{},
				Created:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
				Input: &armmediaservices.JobInputs{
					ODataType: to.Ptr("#Microsoft.Media.JobInputs"),
					Inputs: []armmediaservices.JobInputClassification{
						&armmediaservices.JobInputAsset{
							ODataType:        to.Ptr("#Microsoft.Media.JobInputAsset"),
							Files:            []*string{},
							InputDefinitions: []armmediaservices.InputDefinitionClassification{},
							AssetName:        to.Ptr("job1-InputAsset"),
						}},
				},
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:30.9494087Z"); return t }()),
				Outputs: []armmediaservices.JobOutputClassification{
					&armmediaservices.JobOutputAsset{
						ODataType: to.Ptr("#Microsoft.Media.JobOutputAsset"),
						Label:     to.Ptr("example-custom-label"),
						Progress:  to.Ptr[int32](0),
						State:     to.Ptr(armmediaservices.JobStateQueued),
						AssetName: to.Ptr("job1-OutputAsset"),
					}},
				Priority: to.Ptr(armmediaservices.PriorityHigh),
				State:    to.Ptr(armmediaservices.JobStateQueued),
			},
			SystemData: &armmediaservices.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-01T00:00:00Z"); return t }()),
				CreatedBy:          to.Ptr("contoso@microsoft.com"),
				CreatedByType:      to.Ptr(armmediaservices.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-12T10:44:30.9494087Z"); return t }()),
				LastModifiedBy:     to.Ptr("contoso@microsoft.com"),
				LastModifiedByType: to.Ptr(armmediaservices.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Job) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Job)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_CancelJob(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-cancel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cancel a Job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.CancelJob(ctx,
		"contosoresources",
		"contosomedia",
		"exampleTransform",
		"job1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/jobs-cancel.json: %v", err)
	}
}

func TestStreamingPolicies_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists Streaming Policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("contoso",
		"contosomedia",
		&armmediaservices.StreamingPoliciesClientListOptions{Filter: nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-list.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.StreamingPolicyCollection{
			ODataNextLink: to.Ptr("http://server/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies?api-version=2021-06-01&$skiptoken=secureStreamingPolicyWithEnvelopeEncryptionOnly"),
			Value: []*armmediaservices.StreamingPolicy{
				{
					Name: to.Ptr("clearStreamingPolicy"),
					Type: to.Ptr("Microsoft.Media/mediaservices/streamingPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingPolicies/clearStreamingPolicy"),
					Properties: &armmediaservices.StreamingPolicyProperties{
						Created: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:30.676067Z"); return t }()),
						NoEncryption: &armmediaservices.NoEncryption{
							EnabledProtocols: &armmediaservices.EnabledProtocols{
								Dash:            to.Ptr(true),
								Download:        to.Ptr(true),
								Hls:             to.Ptr(true),
								SmoothStreaming: to.Ptr(true),
							},
						},
					},
				},
				{
					Name: to.Ptr("secureStreamingPolicy"),
					Type: to.Ptr("Microsoft.Media/mediaservices/streamingPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingPolicies/secureStreamingPolicy"),
					Properties: &armmediaservices.StreamingPolicyProperties{
						CommonEncryptionCbcs: &armmediaservices.CommonEncryptionCbcs{
							ClearTracks: []*armmediaservices.TrackSelection{},
							ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
								DefaultKey: &armmediaservices.DefaultKey{
									Label: to.Ptr("cbcsDefaultKey"),
								},
								KeyToTrackMappings: []*armmediaservices.StreamingPolicyContentKey{},
							},
							Drm: &armmediaservices.CbcsDrmConfiguration{
								FairPlay: &armmediaservices.StreamingPolicyFairPlayConfiguration{
									AllowPersistentLicense:              to.Ptr(true),
									CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}"),
								},
							},
							EnabledProtocols: &armmediaservices.EnabledProtocols{
								Dash:            to.Ptr(false),
								Download:        to.Ptr(false),
								Hls:             to.Ptr(true),
								SmoothStreaming: to.Ptr(false),
							},
						},
						CommonEncryptionCenc: &armmediaservices.CommonEncryptionCenc{
							ClearTracks: []*armmediaservices.TrackSelection{
								{
									TrackSelections: []*armmediaservices.TrackPropertyCondition{
										{
											Operation: to.Ptr(armmediaservices.TrackPropertyCompareOperationUnknown),
											Property:  to.Ptr(armmediaservices.TrackPropertyTypeFourCC),
											Value:     to.Ptr("hev1"),
										}},
								}},
							ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
								DefaultKey: &armmediaservices.DefaultKey{
									Label: to.Ptr("cencDefaultKey"),
								},
								KeyToTrackMappings: []*armmediaservices.StreamingPolicyContentKey{},
							},
							Drm: &armmediaservices.CencDrmConfiguration{
								PlayReady: &armmediaservices.StreamingPolicyPlayReadyConfiguration{
									CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}"),
									PlayReadyCustomAttributes:           to.Ptr("PlayReady CustomAttributes"),
								},
								Widevine: &armmediaservices.StreamingPolicyWidevineConfiguration{
									CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"),
								},
							},
							EnabledProtocols: &armmediaservices.EnabledProtocols{
								Dash:            to.Ptr(true),
								Download:        to.Ptr(false),
								Hls:             to.Ptr(false),
								SmoothStreaming: to.Ptr(true),
							},
						},
						Created:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:30.6781134Z"); return t }()),
						DefaultContentKeyPolicyName: to.Ptr("PolicyWithMultipleOptions"),
						EnvelopeEncryption: &armmediaservices.EnvelopeEncryption{
							ClearTracks: []*armmediaservices.TrackSelection{},
							ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
								DefaultKey: &armmediaservices.DefaultKey{
									Label: to.Ptr("aesDefaultKey"),
								},
								KeyToTrackMappings: []*armmediaservices.StreamingPolicyContentKey{},
							},
							CustomKeyAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"),
							EnabledProtocols: &armmediaservices.EnabledProtocols{
								Dash:            to.Ptr(true),
								Download:        to.Ptr(false),
								Hls:             to.Ptr(true),
								SmoothStreaming: to.Ptr(true),
							},
						},
					},
				},
				{
					Name: to.Ptr("secureStreamingPolicyWithCommonEncryptionCbcsOnly"),
					Type: to.Ptr("Microsoft.Media/mediaservices/streamingPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingPolicies/secureStreamingPolicyWithCommonEncryptionCbcsOnly"),
					Properties: &armmediaservices.StreamingPolicyProperties{
						CommonEncryptionCbcs: &armmediaservices.CommonEncryptionCbcs{
							ClearTracks: []*armmediaservices.TrackSelection{},
							ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
								DefaultKey: &armmediaservices.DefaultKey{
									Label: to.Ptr("cbcsDefaultKey"),
								},
								KeyToTrackMappings: []*armmediaservices.StreamingPolicyContentKey{},
							},
							Drm: &armmediaservices.CbcsDrmConfiguration{
								FairPlay: &armmediaservices.StreamingPolicyFairPlayConfiguration{
									AllowPersistentLicense:              to.Ptr(true),
									CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}"),
								},
							},
							EnabledProtocols: &armmediaservices.EnabledProtocols{
								Dash:            to.Ptr(false),
								Download:        to.Ptr(false),
								Hls:             to.Ptr(true),
								SmoothStreaming: to.Ptr(false),
							},
						},
						Created:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:30.6781134Z"); return t }()),
						DefaultContentKeyPolicyName: to.Ptr("PolicyWithMultipleOptions"),
					},
				},
				{
					Name: to.Ptr("secureStreamingPolicyWithCommonEncryptionCencOnly"),
					Type: to.Ptr("Microsoft.Media/mediaservices/streamingPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingPolicies/secureStreamingPolicyWithCommonEncryptionCencOnly"),
					Properties: &armmediaservices.StreamingPolicyProperties{
						CommonEncryptionCenc: &armmediaservices.CommonEncryptionCenc{
							ClearTracks: []*armmediaservices.TrackSelection{
								{
									TrackSelections: []*armmediaservices.TrackPropertyCondition{
										{
											Operation: to.Ptr(armmediaservices.TrackPropertyCompareOperationUnknown),
											Property:  to.Ptr(armmediaservices.TrackPropertyTypeFourCC),
											Value:     to.Ptr("hev1"),
										}},
								}},
							ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
								DefaultKey: &armmediaservices.DefaultKey{
									Label: to.Ptr("cencDefaultKey"),
								},
								KeyToTrackMappings: []*armmediaservices.StreamingPolicyContentKey{},
							},
							Drm: &armmediaservices.CencDrmConfiguration{
								PlayReady: &armmediaservices.StreamingPolicyPlayReadyConfiguration{
									CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}"),
									PlayReadyCustomAttributes:           to.Ptr("PlayReady CustomAttributes"),
								},
								Widevine: &armmediaservices.StreamingPolicyWidevineConfiguration{
									CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"),
								},
							},
							EnabledProtocols: &armmediaservices.EnabledProtocols{
								Dash:            to.Ptr(true),
								Download:        to.Ptr(false),
								Hls:             to.Ptr(false),
								SmoothStreaming: to.Ptr(true),
							},
						},
						Created:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:30.6781134Z"); return t }()),
						DefaultContentKeyPolicyName: to.Ptr("PolicyWithMultipleOptions"),
					},
				},
				{
					Name: to.Ptr("secureStreamingPolicyWithEnvelopeEncryptionOnly"),
					Type: to.Ptr("Microsoft.Media/mediaservices/streamingPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingPolicies/secureStreamingPolicyWithEnvelopeEncryptionOnly"),
					Properties: &armmediaservices.StreamingPolicyProperties{
						Created:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:30.6781134Z"); return t }()),
						DefaultContentKeyPolicyName: to.Ptr("PolicyWithClearKeyOptionAndTokenRestriction"),
						EnvelopeEncryption: &armmediaservices.EnvelopeEncryption{
							ClearTracks: []*armmediaservices.TrackSelection{},
							ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
								DefaultKey: &armmediaservices.DefaultKey{
									Label: to.Ptr("aesDefaultKey"),
								},
								KeyToTrackMappings: []*armmediaservices.StreamingPolicyContentKey{},
							},
							CustomKeyAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"),
							EnabledProtocols: &armmediaservices.EnabledProtocols{
								Dash:            to.Ptr(true),
								Download:        to.Ptr(false),
								Hls:             to.Ptr(true),
								SmoothStreaming: to.Ptr(true),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StreamingPolicyCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StreamingPolicyCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingPolicies_Get(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policy-get-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Streaming Policy by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"contoso",
		"contosomedia",
		"clearStreamingPolicy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policy-get-by-name.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.StreamingPolicy{
			Name: to.Ptr("clearStreamingPolicy"),
			Type: to.Ptr("Microsoft.Media/mediaservices/streamingPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingPolicies/clearStreamingPolicy"),
			Properties: &armmediaservices.StreamingPolicyProperties{
				Created: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:30.8501486Z"); return t }()),
				NoEncryption: &armmediaservices.NoEncryption{
					EnabledProtocols: &armmediaservices.EnabledProtocols{
						Dash:            to.Ptr(true),
						Download:        to.Ptr(true),
						Hls:             to.Ptr(true),
						SmoothStreaming: to.Ptr(true),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StreamingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StreamingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policy-get-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingPolicies_Create(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-create-clear.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a Streaming Policy with clear streaming"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedClearStreamingPolicy",
		armmediaservices.StreamingPolicy{
			Properties: &armmediaservices.StreamingPolicyProperties{
				NoEncryption: &armmediaservices.NoEncryption{
					EnabledProtocols: &armmediaservices.EnabledProtocols{
						Dash:            to.Ptr(true),
						Download:        to.Ptr(true),
						Hls:             to.Ptr(true),
						SmoothStreaming: to.Ptr(true),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-create-clear.json: %v", err)
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-create-commonEncryptionCbcs-only.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a Streaming Policy with commonEncryptionCbcs only"},
	})
	client = armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err = client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly",
		armmediaservices.StreamingPolicy{
			Properties: &armmediaservices.StreamingPolicyProperties{
				CommonEncryptionCbcs: &armmediaservices.CommonEncryptionCbcs{
					ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
						DefaultKey: &armmediaservices.DefaultKey{
							Label: to.Ptr("cbcsDefaultKey"),
						},
					},
					Drm: &armmediaservices.CbcsDrmConfiguration{
						FairPlay: &armmediaservices.StreamingPolicyFairPlayConfiguration{
							AllowPersistentLicense:              to.Ptr(true),
							CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}"),
						},
					},
					EnabledProtocols: &armmediaservices.EnabledProtocols{
						Dash:            to.Ptr(false),
						Download:        to.Ptr(false),
						Hls:             to.Ptr(true),
						SmoothStreaming: to.Ptr(false),
					},
				},
				DefaultContentKeyPolicyName: to.Ptr("PolicyWithMultipleOptions"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-create-commonEncryptionCbcs-only.json: %v", err)
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-create-commonEncryptionCenc-only.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a Streaming Policy with commonEncryptionCenc only"},
	})
	client = armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err = client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly",
		armmediaservices.StreamingPolicy{
			Properties: &armmediaservices.StreamingPolicyProperties{
				CommonEncryptionCenc: &armmediaservices.CommonEncryptionCenc{
					ClearTracks: []*armmediaservices.TrackSelection{
						{
							TrackSelections: []*armmediaservices.TrackPropertyCondition{
								{
									Operation: to.Ptr(armmediaservices.TrackPropertyCompareOperationEqual),
									Property:  to.Ptr(armmediaservices.TrackPropertyTypeFourCC),
									Value:     to.Ptr("hev1"),
								}},
						}},
					ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
						DefaultKey: &armmediaservices.DefaultKey{
							Label: to.Ptr("cencDefaultKey"),
						},
					},
					Drm: &armmediaservices.CencDrmConfiguration{
						PlayReady: &armmediaservices.StreamingPolicyPlayReadyConfiguration{
							CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}"),
							PlayReadyCustomAttributes:           to.Ptr("PlayReady CustomAttributes"),
						},
						Widevine: &armmediaservices.StreamingPolicyWidevineConfiguration{
							CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"),
						},
					},
					EnabledProtocols: &armmediaservices.EnabledProtocols{
						Dash:            to.Ptr(true),
						Download:        to.Ptr(false),
						Hls:             to.Ptr(false),
						SmoothStreaming: to.Ptr(true),
					},
				},
				DefaultContentKeyPolicyName: to.Ptr("PolicyWithPlayReadyOptionAndOpenRestriction"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-create-commonEncryptionCenc-only.json: %v", err)
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-create-envelopeEncryption-only.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a Streaming Policy with envelopeEncryption only"},
	})
	client = armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err = client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedSecureStreamingPolicyWithEnvelopeEncryptionOnly",
		armmediaservices.StreamingPolicy{
			Properties: &armmediaservices.StreamingPolicyProperties{
				DefaultContentKeyPolicyName: to.Ptr("PolicyWithClearKeyOptionAndTokenRestriction"),
				EnvelopeEncryption: &armmediaservices.EnvelopeEncryption{
					ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
						DefaultKey: &armmediaservices.DefaultKey{
							Label: to.Ptr("aesDefaultKey"),
						},
					},
					CustomKeyAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"),
					EnabledProtocols: &armmediaservices.EnabledProtocols{
						Dash:            to.Ptr(true),
						Download:        to.Ptr(false),
						Hls:             to.Ptr(true),
						SmoothStreaming: to.Ptr(true),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-create-envelopeEncryption-only.json: %v", err)
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-create-secure-streaming.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a Streaming Policy with secure streaming"},
	})
	client = armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err = client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedSecureStreamingPolicy",
		armmediaservices.StreamingPolicy{
			Properties: &armmediaservices.StreamingPolicyProperties{
				CommonEncryptionCbcs: &armmediaservices.CommonEncryptionCbcs{
					ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
						DefaultKey: &armmediaservices.DefaultKey{
							Label: to.Ptr("cbcsDefaultKey"),
						},
					},
					Drm: &armmediaservices.CbcsDrmConfiguration{
						FairPlay: &armmediaservices.StreamingPolicyFairPlayConfiguration{
							AllowPersistentLicense:              to.Ptr(true),
							CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}"),
						},
					},
					EnabledProtocols: &armmediaservices.EnabledProtocols{
						Dash:            to.Ptr(false),
						Download:        to.Ptr(false),
						Hls:             to.Ptr(true),
						SmoothStreaming: to.Ptr(false),
					},
				},
				CommonEncryptionCenc: &armmediaservices.CommonEncryptionCenc{
					ClearTracks: []*armmediaservices.TrackSelection{
						{
							TrackSelections: []*armmediaservices.TrackPropertyCondition{
								{
									Operation: to.Ptr(armmediaservices.TrackPropertyCompareOperationEqual),
									Property:  to.Ptr(armmediaservices.TrackPropertyTypeFourCC),
									Value:     to.Ptr("hev1"),
								}},
						}},
					ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
						DefaultKey: &armmediaservices.DefaultKey{
							Label: to.Ptr("cencDefaultKey"),
						},
					},
					Drm: &armmediaservices.CencDrmConfiguration{
						PlayReady: &armmediaservices.StreamingPolicyPlayReadyConfiguration{
							CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}"),
							PlayReadyCustomAttributes:           to.Ptr("PlayReady CustomAttributes"),
						},
						Widevine: &armmediaservices.StreamingPolicyWidevineConfiguration{
							CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"),
						},
					},
					EnabledProtocols: &armmediaservices.EnabledProtocols{
						Dash:            to.Ptr(true),
						Download:        to.Ptr(false),
						Hls:             to.Ptr(false),
						SmoothStreaming: to.Ptr(true),
					},
				},
				DefaultContentKeyPolicyName: to.Ptr("PolicyWithMultipleOptions"),
				EnvelopeEncryption: &armmediaservices.EnvelopeEncryption{
					ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
						DefaultKey: &armmediaservices.DefaultKey{
							Label: to.Ptr("aesDefaultKey"),
						},
					},
					CustomKeyAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"),
					EnabledProtocols: &armmediaservices.EnabledProtocols{
						Dash:            to.Ptr(true),
						Download:        to.Ptr(false),
						Hls:             to.Ptr(true),
						SmoothStreaming: to.Ptr(true),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-create-secure-streaming.json: %v", err)
	}
}

func TestStreamingPolicies_Delete(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Streaming Policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"contoso",
		"contosomedia",
		"secureStreamingPolicyWithCommonEncryptionCbcsOnly",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-policies-delete.json: %v", err)
	}
}

func TestStreamingLocators_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists Streaming Locators"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingLocatorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("contoso",
		"contosomedia",
		&armmediaservices.StreamingLocatorsClientListOptions{Filter: nil,
			Top:     nil,
			Orderby: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-list.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.StreamingLocatorCollection{
			Value: []*armmediaservices.StreamingLocator{
				{
					Name: to.Ptr("clearStreamingLocator"),
					Type: to.Ptr("Microsoft.Media/mediaservices/streamingLocators"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingLocators/clearStreamingLocator"),
					Properties: &armmediaservices.StreamingLocatorProperties{
						AssetName:           to.Ptr("ClimbingMountRainier"),
						ContentKeys:         []*armmediaservices.StreamingLocatorContentKey{},
						Created:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:31.9341192Z"); return t }()),
						EndTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "9999-12-31T23:59:59.9999999Z"); return t }()),
						StreamingLocatorID:  to.Ptr("6a116ec6-0c85-441f-9c31-89a5bc3adf0a"),
						StreamingPolicyName: to.Ptr("clearStreamingPolicy"),
					},
				},
				{
					Name: to.Ptr("secureStreamingLocator"),
					Type: to.Ptr("Microsoft.Media/mediaservices/streamingLocators"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingLocators/secureStreamingLocator"),
					Properties: &armmediaservices.StreamingLocatorProperties{
						AssetName:           to.Ptr("ClimbingMountRainier"),
						ContentKeys:         []*armmediaservices.StreamingLocatorContentKey{},
						Created:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:31.9544387Z"); return t }()),
						EndTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "9999-12-31T23:59:59.9999999Z"); return t }()),
						StreamingLocatorID:  to.Ptr("7338ef90-ffc8-42de-8bff-de8f99973300"),
						StreamingPolicyName: to.Ptr("secureStreamingPolicy"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StreamingLocatorCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StreamingLocatorCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingLocators_Get(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-get-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Streaming Locator by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingLocatorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"contoso",
		"contosomedia",
		"clearStreamingLocator",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-get-by-name.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.StreamingLocator{
			Name: to.Ptr("clearStreamingLocator"),
			Type: to.Ptr("Microsoft.Media/mediaservices/streamingLocators"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingLocators/clearStreamingLocator"),
			Properties: &armmediaservices.StreamingLocatorProperties{
				AssetName:           to.Ptr("ClimbingMountRainier"),
				ContentKeys:         []*armmediaservices.StreamingLocatorContentKey{},
				Created:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-08T18:29:32.1154071Z"); return t }()),
				EndTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "9999-12-31T23:59:59.9999999Z"); return t }()),
				StreamingLocatorID:  to.Ptr("7684043b-f6d1-44a7-8bed-8a4aa474c5a4"),
				StreamingPolicyName: to.Ptr("clearStreamingPolicy"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StreamingLocator) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StreamingLocator)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-get-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingLocators_Create(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-create-clear.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a Streaming Locator with clear streaming"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingLocatorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedClearStreamingLocator",
		armmediaservices.StreamingLocator{
			Properties: &armmediaservices.StreamingLocatorProperties{
				AssetName:           to.Ptr("ClimbingMountRainier"),
				StreamingPolicyName: to.Ptr("clearStreamingPolicy"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-create-clear.json: %v", err)
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-create-secure.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a Streaming Locator with secure streaming"},
	})
	client = armmediaservices.NewStreamingLocatorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err = client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedSecureStreamingLocator",
		armmediaservices.StreamingLocator{
			Properties: &armmediaservices.StreamingLocatorProperties{
				AssetName:           to.Ptr("ClimbingMountRainier"),
				EndTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2028-12-31T23:59:59.9999999Z"); return t }()),
				StartTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-01T00:00:00Z"); return t }()),
				StreamingPolicyName: to.Ptr("secureStreamingPolicy"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-create-secure.json: %v", err)
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-create-secure-userDefinedContentKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates a Streaming Locator with user defined content keys"},
	})
	client = armmediaservices.NewStreamingLocatorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err = client.Create(ctx,
		"contoso",
		"contosomedia",
		"UserCreatedSecureStreamingLocatorWithUserDefinedContentKeys",
		armmediaservices.StreamingLocator{
			Properties: &armmediaservices.StreamingLocatorProperties{
				AssetName: to.Ptr("ClimbingMountRainier"),
				ContentKeys: []*armmediaservices.StreamingLocatorContentKey{
					{
						ID:                              to.Ptr("60000000-0000-0000-0000-000000000001"),
						LabelReferenceInStreamingPolicy: to.Ptr("aesDefaultKey"),
						Value:                           to.Ptr("1UqLohAfWsEGkULYxHjYZg=="),
					},
					{
						ID:                              to.Ptr("60000000-0000-0000-0000-000000000004"),
						LabelReferenceInStreamingPolicy: to.Ptr("cencDefaultKey"),
						Value:                           to.Ptr("4UqLohAfWsEGkULYxHjYZg=="),
					},
					{
						ID:                              to.Ptr("60000000-0000-0000-0000-000000000007"),
						LabelReferenceInStreamingPolicy: to.Ptr("cbcsDefaultKey"),
						Value:                           to.Ptr("7UqLohAfWsEGkULYxHjYZg=="),
					}},
				StreamingLocatorID:  to.Ptr("90000000-0000-0000-0000-00000000000A"),
				StreamingPolicyName: to.Ptr("secureStreamingPolicy"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-create-secure-userDefinedContentKeys.json: %v", err)
	}
}

func TestStreamingLocators_Delete(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Streaming Locator"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingLocatorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"contoso",
		"contosomedia",
		"clearStreamingLocator",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-delete.json: %v", err)
	}
}

func TestStreamingLocators_ListContentKeys(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-list-content-keys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Content Keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingLocatorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListContentKeys(ctx,
		"contoso",
		"contosomedia",
		"secureStreamingLocator",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-list-content-keys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.ListContentKeysResponse{
			ContentKeys: []*armmediaservices.StreamingLocatorContentKey{
				{
					Type:                            to.Ptr(armmediaservices.StreamingLocatorContentKeyTypeEnvelopeEncryption),
					ID:                              to.Ptr("9259eb06-eeee-4f77-987f-48f4ea5c649f"),
					LabelReferenceInStreamingPolicy: to.Ptr("aesDefaultKey"),
					PolicyName:                      to.Ptr("PolicyWithMultipleOptions"),
					Tracks:                          []*armmediaservices.TrackSelection{},
					Value:                           to.Ptr("QpiqeQROdN5xamnfUF2Wdw=="),
				},
				{
					Type:                            to.Ptr(armmediaservices.StreamingLocatorContentKeyTypeCommonEncryptionCenc),
					ID:                              to.Ptr("06bfeff1-2bb6-4f58-af27-a2767f058bca"),
					LabelReferenceInStreamingPolicy: to.Ptr("cencDefaultKey"),
					PolicyName:                      to.Ptr("PolicyWithMultipleOptions"),
					Tracks:                          []*armmediaservices.TrackSelection{},
					Value:                           to.Ptr("ZjgWhNnqnqcov/h+wrYusw=="),
				},
				{
					Type:                            to.Ptr(armmediaservices.StreamingLocatorContentKeyTypeCommonEncryptionCbcs),
					ID:                              to.Ptr("799e78a0-ed6f-4179-9222-ed4ec4223cec"),
					LabelReferenceInStreamingPolicy: to.Ptr("cbcsDefaultKey"),
					PolicyName:                      to.Ptr("PolicyWithMultipleOptions"),
					Tracks:                          []*armmediaservices.TrackSelection{},
					Value:                           to.Ptr("FjZ3n3yRcVxRFftdYFbe9g=="),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ListContentKeysResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ListContentKeysResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-list-content-keys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingLocators_ListPaths(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-list-paths-streaming-and-download.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Paths which has streaming paths and download paths"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingLocatorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListPaths(ctx,
		"contoso",
		"contosomedia",
		"clearStreamingLocator",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-list-paths-streaming-and-download.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.ListPathsResponse{
			DownloadPaths: []*string{
				to.Ptr("/262a87b6-b538-4657-bac1-b6897924471d/textTrack.vtt"),
				to.Ptr("/262a87b6-b538-4657-bac1-b6897924471d/video1.mp4"),
				to.Ptr("/262a87b6-b538-4657-bac1-b6897924471d/video2.mp4"),
				to.Ptr("/262a87b6-b538-4657-bac1-b6897924471d/video3.mp4")},
			StreamingPaths: []*armmediaservices.StreamingPath{
				{
					EncryptionScheme: to.Ptr(armmediaservices.EncryptionSchemeNoEncryption),
					Paths: []*string{
						to.Ptr("/262a87b6-b538-4657-bac1-b6897924471d/videoManifest1.ism/manifest(format=m3u8-aapl)"),
						to.Ptr("/262a87b6-b538-4657-bac1-b6897924471d/videoManifest2.ism/manifest(format=m3u8-aapl)"),
						to.Ptr("/262a87b6-b538-4657-bac1-b6897924471d/videoManifest3.ism/manifest(format=m3u8-aapl)")},
					StreamingProtocol: to.Ptr(armmediaservices.StreamingPolicyStreamingProtocolHls),
				},
				{
					EncryptionScheme: to.Ptr(armmediaservices.EncryptionSchemeNoEncryption),
					Paths: []*string{
						to.Ptr("/262a87b6-b538-4657-bac1-b6897924471d/videoManifest1.ism/manifest(format=mpd-time-csf)"),
						to.Ptr("/262a87b6-b538-4657-bac1-b6897924471d/videoManifest2.ism/manifest(format=mpd-time-csf)"),
						to.Ptr("/262a87b6-b538-4657-bac1-b6897924471d/videoManifest3.ism/manifest(format=mpd-time-csf)")},
					StreamingProtocol: to.Ptr(armmediaservices.StreamingPolicyStreamingProtocolDash),
				},
				{
					EncryptionScheme: to.Ptr(armmediaservices.EncryptionSchemeNoEncryption),
					Paths: []*string{
						to.Ptr("/262a87b6-b538-4657-bac1-b6897924471d/videoManifest1.ism/manifest"),
						to.Ptr("/262a87b6-b538-4657-bac1-b6897924471d/videoManifest2.ism/manifest"),
						to.Ptr("/262a87b6-b538-4657-bac1-b6897924471d/videoManifest3.ism/manifest")},
					StreamingProtocol: to.Ptr(armmediaservices.StreamingPolicyStreamingProtocolSmoothStreaming),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ListPathsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ListPathsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-list-paths-streaming-and-download.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-list-paths-streaming-only.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Paths which has streaming paths only"},
	})
	client = armmediaservices.NewStreamingLocatorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.ListPaths(ctx,
		"contoso",
		"contosomedia",
		"secureStreamingLocator",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-list-paths-streaming-only.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.ListPathsResponse{
			DownloadPaths: []*string{},
			StreamingPaths: []*armmediaservices.StreamingPath{
				{
					EncryptionScheme: to.Ptr(armmediaservices.EncryptionSchemeEnvelopeEncryption),
					Paths: []*string{
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest1.ism/manifest(format=m3u8-aapl,encryption=cbc)"),
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest2.ism/manifest(format=m3u8-aapl,encryption=cbc)"),
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest3.ism/manifest(format=m3u8-aapl,encryption=cbc)")},
					StreamingProtocol: to.Ptr(armmediaservices.StreamingPolicyStreamingProtocolHls),
				},
				{
					EncryptionScheme: to.Ptr(armmediaservices.EncryptionSchemeEnvelopeEncryption),
					Paths: []*string{
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest1.ism/manifest(format=mpd-time-csf,encryption=cbc)"),
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest2.ism/manifest(format=mpd-time-csf,encryption=cbc)"),
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest3.ism/manifest(format=mpd-time-csf,encryption=cbc)")},
					StreamingProtocol: to.Ptr(armmediaservices.StreamingPolicyStreamingProtocolDash),
				},
				{
					EncryptionScheme: to.Ptr(armmediaservices.EncryptionSchemeEnvelopeEncryption),
					Paths: []*string{
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest1.ism/manifest(encryption=cbc)"),
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest2.ism/manifest(encryption=cbc)"),
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest3.ism/manifest(encryption=cbc)")},
					StreamingProtocol: to.Ptr(armmediaservices.StreamingPolicyStreamingProtocolSmoothStreaming),
				},
				{
					EncryptionScheme: to.Ptr(armmediaservices.EncryptionSchemeCommonEncryptionCenc),
					Paths: []*string{
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest1.ism/manifest(format=mpd-time-csf,encryption=cenc)"),
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest2.ism/manifest(format=mpd-time-csf,encryption=cenc)"),
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest3.ism/manifest(format=mpd-time-csf,encryption=cenc)")},
					StreamingProtocol: to.Ptr(armmediaservices.StreamingPolicyStreamingProtocolDash),
				},
				{
					EncryptionScheme: to.Ptr(armmediaservices.EncryptionSchemeCommonEncryptionCenc),
					Paths: []*string{
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest1.ism/manifest(encryption=cenc)"),
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest2.ism/manifest(encryption=cenc)"),
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest3.ism/manifest(encryption=cenc)")},
					StreamingProtocol: to.Ptr(armmediaservices.StreamingPolicyStreamingProtocolSmoothStreaming),
				},
				{
					EncryptionScheme: to.Ptr(armmediaservices.EncryptionSchemeCommonEncryptionCbcs),
					Paths: []*string{
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest1.ism/manifest(format=m3u8-aapl,encryption=cbcs-aapl)"),
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest2.ism/manifest(format=m3u8-aapl,encryption=cbcs-aapl)"),
						to.Ptr("/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest3.ism/manifest(format=m3u8-aapl,encryption=cbcs-aapl)")},
					StreamingProtocol: to.Ptr(armmediaservices.StreamingPolicyStreamingProtocolHls),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ListPathsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ListPathsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streaming-locators-list-paths-streaming-only.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLiveEvents_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-list-all.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all LiveEvents"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewLiveEventsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	pager := client.List("mediaresources",
		"slitestmedia10",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-list-all.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.LiveEventListResult{
			Value: []*armmediaservices.LiveEvent{
				{
					Name:     to.Ptr("myLiveEvent1"),
					Type:     to.Ptr("Microsoft.Media/mediaservices/liveevents"),
					ID:       to.Ptr("/subscriptions/0a6ec948-5a62-437d-b9df-934dc7c1b722/resourceGroups/mediaresources/providers/Microsoft.Media/mediaservices/slitestmedia10/liveevents/myLiveEvent1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armmediaservices.LiveEventProperties{
						Description:             to.Ptr("test event 1"),
						Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:08.5564064Z"); return t }()),
						CrossSiteAccessPolicies: &armmediaservices.CrossSiteAccessPolicies{},
						Encoding: &armmediaservices.LiveEventEncoding{
							EncodingType: to.Ptr(armmediaservices.LiveEventEncodingTypeNone),
						},
						Input: &armmediaservices.LiveEventInput{
							AccessToken: to.Ptr("<accessToken>"),
							Endpoints: []*armmediaservices.LiveEventEndpoint{
								{
									URL:      to.Ptr("http://clouddeployment.media-test.net/de153bb0814542d9b7e2339ce9430dc4/ingest.isml"),
									Protocol: to.Ptr("FragmentedMP4"),
								}},
							KeyFrameIntervalDuration: to.Ptr("PT6S"),
							StreamingProtocol:        to.Ptr(armmediaservices.LiveEventInputProtocolFragmentedMP4),
						},
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:08.5564064Z"); return t }()),
						Preview: &armmediaservices.LiveEventPreview{
							AccessControl: &armmediaservices.LiveEventPreviewAccessControl{
								IP: &armmediaservices.IPAccessControl{
									Allow: []*armmediaservices.IPRange{
										{
											Name:               to.Ptr("AllowAll"),
											Address:            to.Ptr("0.0.0.0"),
											SubnetPrefixLength: to.Ptr[int32](0),
										}},
								},
							},
							Endpoints: []*armmediaservices.LiveEventEndpoint{
								{
									URL:      to.Ptr("https://myliveevent1-slitestmedia10.preview-usso.channel.mediaservices.windows.net/a220e223-faf8-4e03-b9a9-2c2432f48025/preview.ism/manifest"),
									Protocol: to.Ptr("FragmentedMP4"),
								}},
							PreviewLocator: to.Ptr("a220e223-faf8-4e03-b9a9-2c2432f48025"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						ResourceState:     to.Ptr(armmediaservices.LiveEventResourceStateStopped),
						StreamOptions:     []*armmediaservices.StreamOptionsFlag{},
						UseStaticHostname: to.Ptr(false),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LiveEventListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LiveEventListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-list-all.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLiveEvents_Get(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-list-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a LiveEvent by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewLiveEventsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	res, err := client.Get(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-list-by-name.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.LiveEvent{
			Name:     to.Ptr("myLiveEvent1"),
			Type:     to.Ptr("Microsoft.Media/mediaservices/liveevents"),
			ID:       to.Ptr("/subscriptions/0a6ec948-5a62-437d-b9df-934dc7c1b722/resourceGroups/mediaresources/providers/Microsoft.Media/mediaservices/slitestmedia10/liveevents/myLiveEvent1"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armmediaservices.LiveEventProperties{
				Description: to.Ptr(""),
				Created:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:08.3474032Z"); return t }()),
				CrossSiteAccessPolicies: &armmediaservices.CrossSiteAccessPolicies{
					ClientAccessPolicy: to.Ptr("<access-policy><cross-domain-access><policy><allow-from http-methods=\"*\"><domain uri=\"http://*\"/></allow-from><grant-to><resource path=\"/\" include-subpaths=\"true\"/></grant-to></policy></cross-domain-access></access-policy>"),
					CrossDomainPolicy:  to.Ptr("<cross-domain-policy><allow-access-from domain=\"*\" secure=\"false\" /></cross-domain-policy>"),
				},
				Encoding: &armmediaservices.LiveEventEncoding{
					EncodingType: to.Ptr(armmediaservices.LiveEventEncodingTypeNone),
				},
				Input: &armmediaservices.LiveEventInput{
					Endpoints: []*armmediaservices.LiveEventEndpoint{
						{
							URL:      to.Ptr("http://clouddeployment.media-test.net/ingest.isml"),
							Protocol: to.Ptr("FragmentedMP4"),
						}},
					KeyFrameIntervalDuration: to.Ptr("PT6S"),
					StreamingProtocol:        to.Ptr(armmediaservices.LiveEventInputProtocolFragmentedMP4),
				},
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:08.3474032Z"); return t }()),
				Preview: &armmediaservices.LiveEventPreview{
					AccessControl: &armmediaservices.LiveEventPreviewAccessControl{
						IP: &armmediaservices.IPAccessControl{
							Allow: []*armmediaservices.IPRange{
								{
									Name:               to.Ptr("AllowAll"),
									Address:            to.Ptr("0.0.0.0"),
									SubnetPrefixLength: to.Ptr[int32](0),
								}},
						},
					},
					Endpoints: []*armmediaservices.LiveEventEndpoint{
						{
							URL:      to.Ptr("https://testeventopito4idh2r-weibzmedia05.preview-ts051.channel.media-test.windows-int.net/763f3ea4-d94f-441c-a634-c833f61a4e04/preview.ism/manifest"),
							Protocol: to.Ptr("FragmentedMP4"),
						}},
					PreviewLocator: to.Ptr("763f3ea4-d94f-441c-a634-c833f61a4e04"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armmediaservices.LiveEventResourceStateStopped),
				StreamOptions: []*armmediaservices.StreamOptionsFlag{
					to.Ptr(armmediaservices.StreamOptionsFlagDefault)},
				UseStaticHostname: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LiveEvent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LiveEvent)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-list-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLiveEvents_Create(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a LiveEvent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewLiveEventsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		armmediaservices.LiveEvent{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armmediaservices.LiveEventProperties{
				Description: to.Ptr("test event 1"),
				Input: &armmediaservices.LiveEventInput{
					AccessControl: &armmediaservices.LiveEventInputAccessControl{
						IP: &armmediaservices.IPAccessControl{
							Allow: []*armmediaservices.IPRange{
								{
									Name:               to.Ptr("AllowAll"),
									Address:            to.Ptr("0.0.0.0"),
									SubnetPrefixLength: to.Ptr[int32](0),
								}},
						},
					},
					KeyFrameIntervalDuration: to.Ptr("PT6S"),
					StreamingProtocol:        to.Ptr(armmediaservices.LiveEventInputProtocolRTMP),
				},
				Preview: &armmediaservices.LiveEventPreview{
					AccessControl: &armmediaservices.LiveEventPreviewAccessControl{
						IP: &armmediaservices.IPAccessControl{
							Allow: []*armmediaservices.IPRange{
								{
									Name:               to.Ptr("AllowAll"),
									Address:            to.Ptr("0.0.0.0"),
									SubnetPrefixLength: to.Ptr[int32](0),
								}},
						},
					},
				},
			},
		},
		&armmediaservices.LiveEventsClientBeginCreateOptions{AutoStart: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.LiveEvent{
			Name:     to.Ptr("myLiveEvent1"),
			Type:     to.Ptr("Microsoft.Media/mediaservices/liveevents"),
			ID:       to.Ptr("/subscriptions/0a6ec948-5a62-437d-b9df-934dc7c1b722/resourceGroups/mediaresources/providers/Microsoft.Media/mediaservices/slitestmedia10/liveevents/myLiveEvent1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armmediaservices.LiveEventProperties{
				Description:             to.Ptr("test event 1"),
				Created:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:06.0982751Z"); return t }()),
				CrossSiteAccessPolicies: &armmediaservices.CrossSiteAccessPolicies{},
				Encoding: &armmediaservices.LiveEventEncoding{
					EncodingType: to.Ptr(armmediaservices.LiveEventEncodingTypeNone),
				},
				Input: &armmediaservices.LiveEventInput{
					AccessControl: &armmediaservices.LiveEventInputAccessControl{
						IP: &armmediaservices.IPAccessControl{
							Allow: []*armmediaservices.IPRange{
								{
									Name:               to.Ptr("AllowAll"),
									Address:            to.Ptr("0.0.0.0"),
									SubnetPrefixLength: to.Ptr[int32](0),
								}},
						},
					},
					AccessToken:              to.Ptr("<accessToken>"),
					Endpoints:                []*armmediaservices.LiveEventEndpoint{},
					KeyFrameIntervalDuration: to.Ptr("PT6S"),
					StreamingProtocol:        to.Ptr(armmediaservices.LiveEventInputProtocolFragmentedMP4),
				},
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:06.0982751Z"); return t }()),
				Preview: &armmediaservices.LiveEventPreview{
					AccessControl: &armmediaservices.LiveEventPreviewAccessControl{
						IP: &armmediaservices.IPAccessControl{
							Allow: []*armmediaservices.IPRange{
								{
									Name:               to.Ptr("AllowAll"),
									Address:            to.Ptr("0.0.0.0"),
									SubnetPrefixLength: to.Ptr[int32](0),
								}},
						},
					},
					Endpoints:      []*armmediaservices.LiveEventEndpoint{},
					PreviewLocator: to.Ptr("c91726b4-880c-4090-94aa-e6ddb1384b37"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armmediaservices.LiveEventResourceStateStopped),
				StreamOptions:     []*armmediaservices.StreamOptionsFlag{},
				UseStaticHostname: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LiveEvent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LiveEvent)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLiveEvents_Update(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a LiveEvent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewLiveEventsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		armmediaservices.LiveEvent{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Properties: &armmediaservices.LiveEventProperties{
				Description: to.Ptr("test event updated"),
				Input: &armmediaservices.LiveEventInput{
					AccessControl: &armmediaservices.LiveEventInputAccessControl{
						IP: &armmediaservices.IPAccessControl{
							Allow: []*armmediaservices.IPRange{
								{
									Name:    to.Ptr("AllowOne"),
									Address: to.Ptr("192.1.1.0"),
								}},
						},
					},
					KeyFrameIntervalDuration: to.Ptr("PT6S"),
					StreamingProtocol:        to.Ptr(armmediaservices.LiveEventInputProtocolFragmentedMP4),
				},
				Preview: &armmediaservices.LiveEventPreview{
					AccessControl: &armmediaservices.LiveEventPreviewAccessControl{
						IP: &armmediaservices.IPAccessControl{
							Allow: []*armmediaservices.IPRange{
								{
									Name:    to.Ptr("AllowOne"),
									Address: to.Ptr("192.1.1.0"),
								}},
						},
					},
				},
			},
		},
		&armmediaservices.LiveEventsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.LiveEvent{
			Name:     to.Ptr("myLiveEvent1"),
			Type:     to.Ptr("Microsoft.Media/mediaservices/liveevents"),
			ID:       to.Ptr("/subscriptions/0a6ec948-5a62-437d-b9df-934dc7c1b722/resourceGroups/mediaresources/providers/Microsoft.Media/mediaservices/slitestmedia10/liveevents/myLiveEvent1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
				"tag3": to.Ptr("value3"),
			},
			Properties: &armmediaservices.LiveEventProperties{
				Description: to.Ptr("test event updated"),
				Created:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00Z"); return t }()),
				Encoding: &armmediaservices.LiveEventEncoding{
					EncodingType: to.Ptr(armmediaservices.LiveEventEncodingTypeNone),
				},
				Input: &armmediaservices.LiveEventInput{
					AccessControl: &armmediaservices.LiveEventInputAccessControl{
						IP: &armmediaservices.IPAccessControl{
							Allow: []*armmediaservices.IPRange{
								{
									Name:    to.Ptr("AllowOne"),
									Address: to.Ptr("192.1.1.0"),
								}},
						},
					},
					AccessToken:              to.Ptr("<accessToken>"),
					Endpoints:                []*armmediaservices.LiveEventEndpoint{},
					KeyFrameIntervalDuration: to.Ptr("PT6S"),
					StreamingProtocol:        to.Ptr(armmediaservices.LiveEventInputProtocolFragmentedMP4),
				},
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00Z"); return t }()),
				Preview: &armmediaservices.LiveEventPreview{
					AccessControl: &armmediaservices.LiveEventPreviewAccessControl{
						IP: &armmediaservices.IPAccessControl{
							Allow: []*armmediaservices.IPRange{
								{
									Name:    to.Ptr("AllowOne"),
									Address: to.Ptr("192.1.1.0"),
								}},
						},
					},
					Endpoints:      []*armmediaservices.LiveEventEndpoint{},
					PreviewLocator: to.Ptr("c10ea3fc-587f-4daf-b2b2-fa8f647a9ed2"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armmediaservices.LiveEventResourceStateRunning),
				StreamOptions:     []*armmediaservices.StreamOptionsFlag{},
				UseStaticHostname: to.Ptr(false),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LiveEvent) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LiveEvent)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLiveEvents_Delete(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a LiveEvent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewLiveEventsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		&armmediaservices.LiveEventsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-delete.json: %v", err)
	}
}

func TestLiveEvents_Allocate(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-allocate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Allocate a LiveEvent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewLiveEventsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginAllocate(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		&armmediaservices.LiveEventsClientBeginAllocateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-allocate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-allocate.json: %v", err)
	}
}

func TestLiveEvents_Start(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start a LiveEvent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewLiveEventsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginStart(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		&armmediaservices.LiveEventsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-start.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-start.json: %v", err)
	}
}

func TestLiveEvents_Stop(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop a LiveEvent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewLiveEventsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginStop(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		armmediaservices.LiveEventActionInput{
			RemoveOutputsOnStop: to.Ptr(false),
		},
		&armmediaservices.LiveEventsClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-stop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-stop.json: %v", err)
	}
}

func TestLiveEvents_Reset(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-reset.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reset a LiveEvent"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewLiveEventsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginReset(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		&armmediaservices.LiveEventsClientBeginResetOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-reset.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveevent-reset.json: %v", err)
	}
}

func TestLiveOutputs_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveoutput-list-all.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all LiveOutputs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewLiveOutputsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	pager := client.List("mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveoutput-list-all.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.LiveOutputListResult{
			Value: []*armmediaservices.LiveOutput{
				{
					Name: to.Ptr("liveoutput1"),
					Type: to.Ptr("Microsoft.Media/mediaservices/liveevents/liveoutputs"),
					ID:   to.Ptr("/subscriptions/0a6ec948-5a62-437d-b9df-934dc7c1b722/resourceGroups/mediaresources/providers/Microsoft.Media/mediaservices/slitestmedia10/liveevents/myLiveEvent1/liveoutputs/"),
					Properties: &armmediaservices.LiveOutputProperties{
						ArchiveWindowLength: to.Ptr("PT30S"),
						AssetName:           to.Ptr("95dafce4-5320-464c-8597-909373854119"),
						Created:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00-08:00"); return t }()),
						Hls: &armmediaservices.Hls{
							FragmentsPerTsSegment: to.Ptr[int32](5),
						},
						LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00-08:00"); return t }()),
						ManifestName:      to.Ptr("c3a23d4b-02a6-4937-a1ad-6416f463fdca"),
						OutputSnapTime:    to.Ptr[int64](0),
						ProvisioningState: to.Ptr("Succeeded"),
						ResourceState:     to.Ptr(armmediaservices.LiveOutputResourceStateRunning),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LiveOutputListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LiveOutputListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveoutput-list-all.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLiveOutputs_Get(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveoutput-list-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a LiveOutput by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewLiveOutputsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	res, err := client.Get(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		"myLiveOutput1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveoutput-list-by-name.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.LiveOutput{
			Name: to.Ptr("myLiveOutput1"),
			Type: to.Ptr("Microsoft.Media/mediaservices/liveevents/liveoutputs"),
			ID:   to.Ptr("/subscriptions/0a6ec948-5a62-437d-b9df-934dc7c1b722/resourceGroups/mediaresources/providers/Microsoft.Media/mediaservices/slitestmedia10/liveevents/myLiveEvent1/liveoutputs/myLiveOutput1"),
			Properties: &armmediaservices.LiveOutputProperties{
				ArchiveWindowLength: to.Ptr("PT30S"),
				AssetName:           to.Ptr("cb2ae0bc-677a-4830-9c8e-06ce4c4cb607"),
				Created:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00-08:00"); return t }()),
				Hls: &armmediaservices.Hls{
					FragmentsPerTsSegment: to.Ptr[int32](5),
				},
				LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00-08:00"); return t }()),
				ManifestName:      to.Ptr("fc7096f5-c488-4b86-8302-f3bfde53fc27"),
				OutputSnapTime:    to.Ptr[int64](0),
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armmediaservices.LiveOutputResourceStateRunning),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LiveOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LiveOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveoutput-list-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLiveOutputs_Create(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveoutput-create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a LiveOutput"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewLiveOutputsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		"myLiveOutput1",
		armmediaservices.LiveOutput{
			Properties: &armmediaservices.LiveOutputProperties{
				Description:         to.Ptr("test live output 1"),
				ArchiveWindowLength: to.Ptr("PT5M"),
				AssetName:           to.Ptr("6f3264f5-a189-48b4-a29a-a40f22575212"),
				Hls: &armmediaservices.Hls{
					FragmentsPerTsSegment: to.Ptr[int32](5),
				},
				ManifestName: to.Ptr("testmanifest"),
			},
		},
		&armmediaservices.LiveOutputsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveoutput-create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveoutput-create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.LiveOutput{
			Name: to.Ptr("myLiveOutput1"),
			Type: to.Ptr("Microsoft.Media/mediaservices/liveevents/liveoutputs"),
			ID:   to.Ptr("/subscriptions/0a6ec948-5a62-437d-b9df-934dc7c1b722/resourceGroups/mediaresources/providers/Microsoft.Media/mediaservices/slitestmedia10/liveevents/myLiveEvent1/liveoutputs/myLiveOutput1"),
			Properties: &armmediaservices.LiveOutputProperties{
				Description:         to.Ptr("test live output 1"),
				ArchiveWindowLength: to.Ptr("PT5M"),
				AssetName:           to.Ptr("6f3264f5-a189-48b4-a29a-a40f22575212"),
				Created:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:09.9431835Z"); return t }()),
				Hls: &armmediaservices.Hls{
					FragmentsPerTsSegment: to.Ptr[int32](5),
				},
				LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:09.9431835Z"); return t }()),
				ManifestName:      to.Ptr("testmanifest"),
				OutputSnapTime:    to.Ptr[int64](0),
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceState:     to.Ptr(armmediaservices.LiveOutputResourceState("Stopped")),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LiveOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LiveOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveoutput-create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLiveOutputs_Delete(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveoutput-delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a LiveOutput"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewLiveOutputsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"mediaresources",
		"slitestmedia10",
		"myLiveEvent1",
		"myLiveOutput1",
		&armmediaservices.LiveOutputsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveoutput-delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/liveoutput-delete.json: %v", err)
	}
}

func TestStreamingEndpoints_List(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-list-all.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all streaming endpoints"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingEndpointsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	pager := client.List("mediaresources",
		"slitestmedia10",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-list-all.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmediaservices.StreamingEndpointListResult{
			Value: []*armmediaservices.StreamingEndpoint{
				{
					Name:     to.Ptr("myStreamingEndpoint1"),
					Type:     to.Ptr("Microsoft.Media/mediaservices/streamingEndpoints"),
					ID:       to.Ptr("/subscriptions/0a6ec948-5a62-437d-b9df-934dc7c1b722/resourceGroups/mediaresources/providers/Microsoft.Media/mediaservices/slitestmedia10/streamingendpoints/myStreamingEndpoint1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armmediaservices.StreamingEndpointProperties{
						Description:         to.Ptr("test event 1"),
						AvailabilitySetName: to.Ptr("availableset"),
						CdnEnabled:          to.Ptr(false),
						CdnProfile:          to.Ptr(""),
						Created:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:09.202013Z"); return t }()),
						CustomHostNames:     []*string{},
						FreeTrialEndTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
						HostName:            to.Ptr("mystreamingendpoint1-slitestmedia10.streaming.mediaservices.windows.net"),
						LastModified:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:09.202013Z"); return t }()),
						ProvisioningState:   to.Ptr("Succeeded"),
						ResourceState:       to.Ptr(armmediaservices.StreamingEndpointResourceStateStopped),
						ScaleUnits:          to.Ptr[int32](1),
					},
				},
				{
					Name:     to.Ptr("default"),
					Type:     to.Ptr("Microsoft.Media/mediaservices/streamingEndpoints"),
					ID:       to.Ptr("/subscriptions/0a6ec948-5a62-437d-b9df-934dc7c1b722/resourceGroups/mediaresources/providers/Microsoft.Media/mediaservices/slitestmedia10/streamingendpoints/default"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armmediaservices.StreamingEndpointProperties{
						Description:       to.Ptr(""),
						CdnEnabled:        to.Ptr(true),
						CdnProfile:        to.Ptr("AzureMediaStreamingPlatformCdnProfile-StandardVerizon"),
						CdnProvider:       to.Ptr("StandardVerizon"),
						Created:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:09.2310128Z"); return t }()),
						CustomHostNames:   []*string{},
						FreeTrialEndTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00-08:00"); return t }()),
						HostName:          to.Ptr("slitestmedia10.streaming.mediaservices.windows.net"),
						LastModified:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:09.2310128Z"); return t }()),
						ProvisioningState: to.Ptr("Succeeded"),
						ResourceState:     to.Ptr(armmediaservices.StreamingEndpointResourceStateStarting),
						ScaleUnits:        to.Ptr[int32](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StreamingEndpointListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StreamingEndpointListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-list-all.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingEndpoints_Get(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-list-by-name.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a streaming endpoint by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingEndpointsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	res, err := client.Get(ctx,
		"mediaresources",
		"slitestmedia10",
		"myStreamingEndpoint1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-list-by-name.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.StreamingEndpoint{
			Name:     to.Ptr("myStreamingEndpoint1"),
			Type:     to.Ptr("Microsoft.Media/mediaservices/streamingEndpoints"),
			ID:       to.Ptr("/subscriptions/0a6ec948-5a62-437d-b9df-934dc7c1b722/resourceGroups/mediaresources/providers/Microsoft.Media/mediaservices/slitestmedia10/streamingendpoints/myStreamingEndpoint1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armmediaservices.StreamingEndpointProperties{
				Description:         to.Ptr("test event 1"),
				AvailabilitySetName: to.Ptr("availableset"),
				CdnEnabled:          to.Ptr(false),
				CdnProfile:          to.Ptr(""),
				Created:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:09.3500423Z"); return t }()),
				CustomHostNames:     []*string{},
				FreeTrialEndTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T08:00:00Z"); return t }()),
				HostName:            to.Ptr("mystreamingendpoint1-slitestmedia10.streaming.mediaservices.windows.net"),
				LastModified:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:09.3500423Z"); return t }()),
				ProvisioningState:   to.Ptr("Succeeded"),
				ResourceState:       to.Ptr(armmediaservices.StreamingEndpointResourceStateStopped),
				ScaleUnits:          to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StreamingEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StreamingEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-list-by-name.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingEndpoints_Create(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a streaming endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingEndpointsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"mediaresources",
		"slitestmedia10",
		"myStreamingEndpoint1",
		armmediaservices.StreamingEndpoint{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armmediaservices.StreamingEndpointProperties{
				Description: to.Ptr("test event 1"),
				AccessControl: &armmediaservices.StreamingEndpointAccessControl{
					Akamai: &armmediaservices.AkamaiAccessControl{
						AkamaiSignatureHeaderAuthenticationKeyList: []*armmediaservices.AkamaiSignatureHeaderAuthenticationKey{
							{
								Base64Key:  to.Ptr("dGVzdGlkMQ=="),
								Expiration: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2029-12-31T16:00:00-08:00"); return t }()),
								Identifier: to.Ptr("id1"),
							},
							{
								Base64Key:  to.Ptr("dGVzdGlkMQ=="),
								Expiration: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2030-12-31T16:00:00-08:00"); return t }()),
								Identifier: to.Ptr("id2"),
							}},
					},
					IP: &armmediaservices.IPAccessControl{
						Allow: []*armmediaservices.IPRange{
							{
								Name:    to.Ptr("AllowedIp"),
								Address: to.Ptr("192.168.1.1"),
							}},
					},
				},
				AvailabilitySetName: to.Ptr("availableset"),
				CdnEnabled:          to.Ptr(false),
				ScaleUnits:          to.Ptr[int32](1),
			},
		},
		&armmediaservices.StreamingEndpointsClientBeginCreateOptions{AutoStart: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.StreamingEndpoint{
			Name:     to.Ptr("myStreamingEndpoint1"),
			Type:     to.Ptr("Microsoft.Media/mediaservices/streamingEndpoints"),
			ID:       to.Ptr("/subscriptions/0a6ec948-5a62-437d-b9df-934dc7c1b722/resourceGroups/mediaresources/providers/Microsoft.Media/mediaservices/slitestmedia10/streamingendpoints/myStreamingEndpoint1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armmediaservices.StreamingEndpointProperties{
				Description: to.Ptr("test event 1"),
				AccessControl: &armmediaservices.StreamingEndpointAccessControl{
					Akamai: &armmediaservices.AkamaiAccessControl{
						AkamaiSignatureHeaderAuthenticationKeyList: []*armmediaservices.AkamaiSignatureHeaderAuthenticationKey{
							{
								Base64Key:  to.Ptr("dGVzdGlkMQ=="),
								Expiration: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2030-01-01T00:00:00Z"); return t }()),
								Identifier: to.Ptr("id1"),
							},
							{
								Base64Key:  to.Ptr("dGVzdGlkMQ=="),
								Expiration: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2031-01-01T00:00:00Z"); return t }()),
								Identifier: to.Ptr("id2"),
							}},
					},
					IP: &armmediaservices.IPAccessControl{
						Allow: []*armmediaservices.IPRange{
							{
								Name:    to.Ptr("AllowedIp"),
								Address: to.Ptr("192.168.1.1"),
							}},
					},
				},
				AvailabilitySetName: to.Ptr("availableset"),
				CdnEnabled:          to.Ptr(false),
				CdnProfile:          to.Ptr(""),
				Created:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:09.7561389Z"); return t }()),
				CustomHostNames:     []*string{},
				FreeTrialEndTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00-08:00"); return t }()),
				HostName:            to.Ptr("mystreamingendpoint1-slitestmedia10.streaming.mediaservices.windows.net"),
				LastModified:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-03T02:25:09.7561389Z"); return t }()),
				ProvisioningState:   to.Ptr("Succeeded"),
				ResourceState:       to.Ptr(armmediaservices.StreamingEndpointResourceStateStopped),
				ScaleUnits:          to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StreamingEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StreamingEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingEndpoints_Update(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a streaming endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingEndpointsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"mediaresources",
		"slitestmedia10",
		"myStreamingEndpoint1",
		armmediaservices.StreamingEndpoint{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag3": to.Ptr("value3"),
				"tag5": to.Ptr("value5"),
			},
			Properties: &armmediaservices.StreamingEndpointProperties{
				Description:         to.Ptr("test event 2"),
				AvailabilitySetName: to.Ptr("availableset"),
				ScaleUnits:          to.Ptr[int32](5),
			},
		},
		&armmediaservices.StreamingEndpointsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmediaservices.StreamingEndpoint{
			Name:     to.Ptr("myStreamingEndpoint1"),
			Type:     to.Ptr("Microsoft.Media/mediaservices/streamingEndpoints"),
			ID:       to.Ptr("/subscriptions/0a6ec948-5a62-437d-b9df-934dc7c1b722/resourceGroups/mediaresources/providers/Microsoft.Media/mediaservices/slitestmedia10/streamingendpoints/myStreamingEndpoint1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag3": to.Ptr("value3"),
				"tag5": to.Ptr("value5"),
			},
			Properties: &armmediaservices.StreamingEndpointProperties{
				Description:         to.Ptr("test event 2"),
				AvailabilitySetName: to.Ptr("availableset"),
				CdnEnabled:          to.Ptr(false),
				Created:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00Z"); return t }()),
				CustomHostNames:     []*string{},
				FreeTrialEndTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00Z"); return t }()),
				LastModified:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00Z"); return t }()),
				ProvisioningState:   to.Ptr("Succeeded"),
				ScaleUnits:          to.Ptr[int32](5),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StreamingEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StreamingEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingEndpoints_Delete(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a streaming endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingEndpointsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"mediaresources",
		"slitestmedia10",
		"myStreamingEndpoint1",
		&armmediaservices.StreamingEndpointsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-delete.json: %v", err)
	}
}

func TestStreamingEndpoints_Start(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start a streaming endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingEndpointsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginStart(ctx,
		"mediaresources",
		"slitestmedia10",
		"myStreamingEndpoint1",
		&armmediaservices.StreamingEndpointsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-start.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-start.json: %v", err)
	}
}

func TestStreamingEndpoints_Stop(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop a streaming endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingEndpointsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginStop(ctx,
		"mediaresources",
		"slitestmedia10",
		"myStreamingEndpoint1",
		&armmediaservices.StreamingEndpointsClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-stop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-stop.json: %v", err)
	}
}

func TestStreamingEndpoints_Scale(t *testing.T) {
	// From example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-scale.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Scale a StreamingEndpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmediaservices.NewStreamingEndpointsClient("0a6ec948-5a62-437d-b9df-934dc7c1b722", cred, &options)
	poller, err := client.BeginScale(ctx,
		"mediaresources",
		"slitestmedia10",
		"myStreamingEndpoint1",
		armmediaservices.StreamingEntityScaleUnit{
			ScaleUnit: to.Ptr[int32](5),
		},
		&armmediaservices.StreamingEndpointsClientBeginScaleOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-scale.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-06-01/examples/streamingendpoint-scale.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
