//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappconfiguration

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestConfigurationStores_List(t *testing.T) {
	// From example ConfigurationStores_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationStoresClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	pager := client.List(&ConfigurationStoresListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ConfigurationStore.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ConfigurationStore.ID should not be nil!")
			}
		}
	}
}

func TestConfigurationStores_ListByResourceGroup(t *testing.T) {
	// From example ConfigurationStores_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationStoresClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	pager := client.ListByResourceGroup("myResourceGroup",
		&ConfigurationStoresListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ConfigurationStore.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ConfigurationStore.ID should not be nil!")
			}
		}
	}
}

func TestConfigurationStores_Get(t *testing.T) {
	// From example ConfigurationStores_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationStoresClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"contoso",
		&ConfigurationStoresGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigurationStore.ID == nil {
		t.Fatal("ConfigurationStore.ID should not be nil!")
	}
}

func TestConfigurationStores_Create(t *testing.T) {
	// From example ConfigurationStores_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationStoresClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"contoso",
		ConfigurationStore{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus"),
				Tags: map[string]*string{
					"myTag": to.StringPtr("myTagValue"),
				},
			},
			SKU: &SKU{
				Name: to.StringPtr("Standard"),
			},
		},
		&ConfigurationStoresBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigurationStore.ID == nil {
		t.Fatal("ConfigurationStore.ID should not be nil!")
	}

	// From example ConfigurationStores_Create_With_Identity
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"contoso",
		ConfigurationStore{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus"),
				Tags: map[string]*string{
					"myTag": to.StringPtr("myTagValue"),
				},
			},
			Identity: &ResourceIdentity{
				Type: IdentityTypeSystemAssignedUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserIdentity{
					"/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &UserIdentity{},
				},
			},
			SKU: &SKU{
				Name: to.StringPtr("Standard"),
			},
		},
		&ConfigurationStoresBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigurationStore.ID == nil {
		t.Fatal("ConfigurationStore.ID should not be nil!")
	}

	// From example ConfigurationStores_Create_With_Local_Auth_Disabled
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"contoso",
		ConfigurationStore{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus"),
			},
			Properties: &ConfigurationStoreProperties{
				DisableLocalAuth: to.BoolPtr(true),
			},
			SKU: &SKU{
				Name: to.StringPtr("Standard"),
			},
		},
		&ConfigurationStoresBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigurationStore.ID == nil {
		t.Fatal("ConfigurationStore.ID should not be nil!")
	}
}

func TestConfigurationStores_Delete(t *testing.T) {
	// From example ConfigurationStores_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationStoresClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"contoso",
		&ConfigurationStoresBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestConfigurationStores_Update(t *testing.T) {
	// From example ConfigurationStores_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationStoresClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"contoso",
		ConfigurationStoreUpdateParameters{
			SKU: &SKU{
				Name: to.StringPtr("Standard"),
			},
			Tags: map[string]*string{
				"Category": to.StringPtr("Marketing"),
			},
		},
		&ConfigurationStoresBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigurationStore.ID == nil {
		t.Fatal("ConfigurationStore.ID should not be nil!")
	}

	// From example ConfigurationStores_Update_Disable_Local_Auth
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"contoso",
		ConfigurationStoreUpdateParameters{
			Properties: &ConfigurationStorePropertiesUpdateParameters{
				DisableLocalAuth: to.BoolPtr(true),
			},
			SKU: &SKU{
				Name: to.StringPtr("Standard"),
			},
		},
		&ConfigurationStoresBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigurationStore.ID == nil {
		t.Fatal("ConfigurationStore.ID should not be nil!")
	}

	// From example ConfigurationStores_Update_With_Identity
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"contoso",
		ConfigurationStoreUpdateParameters{
			Identity: &ResourceIdentity{
				Type: IdentityTypeSystemAssignedUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserIdentity{
					"/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &UserIdentity{},
				},
			},
			SKU: &SKU{
				Name: to.StringPtr("Standard"),
			},
			Tags: map[string]*string{
				"Category": to.StringPtr("Marketing"),
			},
		},
		&ConfigurationStoresBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ConfigurationStore.ID == nil {
		t.Fatal("ConfigurationStore.ID should not be nil!")
	}
}

func TestConfigurationStores_ListKeys(t *testing.T) {
	// From example ConfigurationStores_ListKeys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationStoresClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	pager := client.ListKeys("myResourceGroup",
		"contoso",
		&ConfigurationStoresListKeysOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("APIKey.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("APIKey.ID should not be nil!")
			}
		}
	}
}

func TestConfigurationStores_RegenerateKey(t *testing.T) {
	// From example ConfigurationStores_RegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationStoresClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	res, err := client.RegenerateKey(ctx,
		"myResourceGroup",
		"contoso",
		RegenerateKeyParameters{
			ID: to.StringPtr("439AD01B4BE67DB1"),
		},
		&ConfigurationStoresRegenerateKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIKey.ID == nil {
		t.Fatal("APIKey.ID should not be nil!")
	}
}

func TestOperations_CheckNameAvailability(t *testing.T) {
	// From example ConfigurationStores_CheckNameAvailable
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	_, err := client.CheckNameAvailability(ctx,
		CheckNameAvailabilityParameters{
			Name: to.StringPtr("contoso"),
			Type: ConfigurationResourceTypeMicrosoftAppConfigurationConfigurationStores.ToPtr(),
		},
		&OperationsCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example ConfigurationStores_CheckNameNotAvailable
	_, err = client.CheckNameAvailability(ctx,
		CheckNameAvailabilityParameters{
			Name: to.StringPtr("contoso"),
			Type: ConfigurationResourceTypeMicrosoftAppConfigurationConfigurationStores.ToPtr(),
		},
		&OperationsCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestPrivateEndpointConnections_ListByConfigurationStore(t *testing.T) {
	// From example PrivateEndpointConnection_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	pager := client.ListByConfigurationStore("myResourceGroup",
		"contoso",
		&PrivateEndpointConnectionsListByConfigurationStoreOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example PrivateEndpointConnection_GetConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"contoso",
		"myConnection",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example PrivateEndpointConnection_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"contoso",
		"myConnection",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Auto-Approved"),
					Status:      ConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example PrivateEndpointConnections_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"contoso",
		"myConnection",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_ListByConfigurationStore(t *testing.T) {
	// From example PrivateLinkResources_ListGroupIds
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	pager := client.ListByConfigurationStore("myResourceGroup",
		"contoso",
		&PrivateLinkResourcesListByConfigurationStoreOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example PrivateLinkResources_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"contoso",
		"configurationStores",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

func TestKeyValues_ListByConfigurationStore(t *testing.T) {
	// From example KeyValues_ListByConfigurationStore
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKeyValuesClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	pager := client.ListByConfigurationStore("myResourceGroup",
		"contoso",
		&KeyValuesListByConfigurationStoreOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("KeyValue.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("KeyValue.ID should not be nil!")
			}
		}
	}
}

func TestKeyValues_Get(t *testing.T) {
	// From example KeyValues_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKeyValuesClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"contoso",
		"myKey$myLabel",
		&KeyValuesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.KeyValue.ID == nil {
		t.Fatal("KeyValue.ID should not be nil!")
	}
}

func TestKeyValues_CreateOrUpdate(t *testing.T) {
	// From example KeyValues_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKeyValuesClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"contoso",
		"myKey$myLabel",
		&KeyValuesCreateOrUpdateOptions{KeyValueParameters: &KeyValue{
			Properties: &KeyValueProperties{
				Tags: map[string]*string{
					"tag1": to.StringPtr("tagValue1"),
					"tag2": to.StringPtr("tagValue2"),
				},
				Value: to.StringPtr("myValue"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.KeyValue.ID == nil {
		t.Fatal("KeyValue.ID should not be nil!")
	}
}

func TestKeyValues_Delete(t *testing.T) {
	// From example KeyValues_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKeyValuesClient(con,
		"c80fb759-c965-4c6a-9110-9b2b2d038882")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"contoso",
		"myKey$myLabel",
		&KeyValuesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
