//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappconfiguration

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ConfigurationStoresClientListByResourceGroupPager provides operations for iterating over paged responses.
type ConfigurationStoresClientListByResourceGroupPager struct {
	client    *ConfigurationStoresClient
	current   ConfigurationStoresClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ConfigurationStoresClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationStoresClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ConfigurationStoreListResult.NextLink == nil || len(*p.current.ConfigurationStoreListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ConfigurationStoresClientListByResourceGroupPager) NextPage(ctx context.Context) (ConfigurationStoresClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ConfigurationStoresClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationStoresClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationStoresClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationStoresClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ConfigurationStoresClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationStoresClientListDeletedPager provides operations for iterating over paged responses.
type ConfigurationStoresClientListDeletedPager struct {
	client    *ConfigurationStoresClient
	current   ConfigurationStoresClientListDeletedResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ConfigurationStoresClientListDeletedResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationStoresClientListDeletedPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedConfigurationStoreListResult.NextLink == nil || len(*p.current.DeletedConfigurationStoreListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ConfigurationStoresClientListDeletedPager) NextPage(ctx context.Context) (ConfigurationStoresClientListDeletedResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ConfigurationStoresClientListDeletedResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationStoresClientListDeletedResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationStoresClientListDeletedResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationStoresClientListDeletedResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listDeletedHandleResponse(resp)
	if err != nil {
		return ConfigurationStoresClientListDeletedResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationStoresClientListKeysPager provides operations for iterating over paged responses.
type ConfigurationStoresClientListKeysPager struct {
	client    *ConfigurationStoresClient
	current   ConfigurationStoresClientListKeysResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ConfigurationStoresClientListKeysResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationStoresClientListKeysPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIKeyListResult.NextLink == nil || len(*p.current.APIKeyListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ConfigurationStoresClientListKeysPager) NextPage(ctx context.Context) (ConfigurationStoresClientListKeysResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ConfigurationStoresClientListKeysResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationStoresClientListKeysResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationStoresClientListKeysResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationStoresClientListKeysResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listKeysHandleResponse(resp)
	if err != nil {
		return ConfigurationStoresClientListKeysResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationStoresClientListPager provides operations for iterating over paged responses.
type ConfigurationStoresClientListPager struct {
	client    *ConfigurationStoresClient
	current   ConfigurationStoresClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ConfigurationStoresClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationStoresClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ConfigurationStoreListResult.NextLink == nil || len(*p.current.ConfigurationStoreListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ConfigurationStoresClientListPager) NextPage(ctx context.Context) (ConfigurationStoresClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ConfigurationStoresClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationStoresClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationStoresClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationStoresClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ConfigurationStoresClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// KeyValuesClientListByConfigurationStorePager provides operations for iterating over paged responses.
type KeyValuesClientListByConfigurationStorePager struct {
	client    *KeyValuesClient
	current   KeyValuesClientListByConfigurationStoreResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, KeyValuesClientListByConfigurationStoreResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *KeyValuesClientListByConfigurationStorePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.KeyValueListResult.NextLink == nil || len(*p.current.KeyValueListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *KeyValuesClientListByConfigurationStorePager) NextPage(ctx context.Context) (KeyValuesClientListByConfigurationStoreResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return KeyValuesClientListByConfigurationStoreResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return KeyValuesClientListByConfigurationStoreResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return KeyValuesClientListByConfigurationStoreResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return KeyValuesClientListByConfigurationStoreResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByConfigurationStoreHandleResponse(resp)
	if err != nil {
		return KeyValuesClientListByConfigurationStoreResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationDefinitionListResult.NextLink == nil || len(*p.current.OperationDefinitionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsClientListByConfigurationStorePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsClientListByConfigurationStorePager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsClientListByConfigurationStoreResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsClientListByConfigurationStoreResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsClientListByConfigurationStorePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsClientListByConfigurationStorePager) NextPage(ctx context.Context) (PrivateEndpointConnectionsClientListByConfigurationStoreResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateEndpointConnectionsClientListByConfigurationStoreResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsClientListByConfigurationStoreResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsClientListByConfigurationStoreResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsClientListByConfigurationStoreResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByConfigurationStoreHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsClientListByConfigurationStoreResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkResourcesClientListByConfigurationStorePager provides operations for iterating over paged responses.
type PrivateLinkResourcesClientListByConfigurationStorePager struct {
	client    *PrivateLinkResourcesClient
	current   PrivateLinkResourcesClientListByConfigurationStoreResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkResourcesClientListByConfigurationStoreResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkResourcesClientListByConfigurationStorePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkResourceListResult.NextLink == nil || len(*p.current.PrivateLinkResourceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkResourcesClientListByConfigurationStorePager) NextPage(ctx context.Context) (PrivateLinkResourcesClientListByConfigurationStoreResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkResourcesClientListByConfigurationStoreResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkResourcesClientListByConfigurationStoreResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkResourcesClientListByConfigurationStoreResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkResourcesClientListByConfigurationStoreResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByConfigurationStoreHandleResponse(resp)
	if err != nil {
		return PrivateLinkResourcesClientListByConfigurationStoreResponse{}, err
	}
	p.current = result
	return p.current, nil
}
