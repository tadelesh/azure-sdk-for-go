//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappconfiguration_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appconfiguration/armappconfiguration"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestConfigurationStores_List(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	pager := client.List(&armappconfiguration.ConfigurationStoresClientListOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappconfiguration.ConfigurationStoreListResult{
			Value: []*armappconfiguration.ConfigurationStore{
				{
					Name:     to.Ptr("contoso"),
					Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
					ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Identity: &armappconfiguration.ResourceIdentity{
						Type:        to.Ptr(armappconfiguration.IdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA"),
						TenantID:    to.Ptr("BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB"),
					},
					Properties: &armappconfiguration.ConfigurationStoreProperties{
						CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						DisableLocalAuth: to.Ptr(false),
						Encryption: &armappconfiguration.EncryptionProperties{
							KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
						},
						Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
						PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
						ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
					},
					SKU: &armappconfiguration.SKU{
						Name: to.Ptr("Standard"),
					},
					SystemData: &armappconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						CreatedBy:          to.Ptr("foo@contoso.com"),
						CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("foo@contoso.com"),
						LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("contoso2"),
					Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
					ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso2"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Identity: &armappconfiguration.ResourceIdentity{
						Type:        to.Ptr(armappconfiguration.IdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC"),
						TenantID:    to.Ptr("BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB"),
					},
					Properties: &armappconfiguration.ConfigurationStoreProperties{
						CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T23:06:59+00:00"); return t }()),
						DisableLocalAuth: to.Ptr(false),
						Encryption: &armappconfiguration.EncryptionProperties{
							KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
						},
						Endpoint:                   to.Ptr("https://contoso2.azconfig.io"),
						PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
						ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
					},
					SKU: &armappconfiguration.SKU{
						Name: to.Ptr("Standard"),
					},
					SystemData: &armappconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						CreatedBy:          to.Ptr("foo@contoso.com"),
						CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("foo@contoso.com"),
						LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationStoreListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationStoreListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationStores_ListByResourceGroup(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		&armappconfiguration.ConfigurationStoresClientListByResourceGroupOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappconfiguration.ConfigurationStoreListResult{
			Value: []*armappconfiguration.ConfigurationStore{
				{
					Name:     to.Ptr("contoso"),
					Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
					ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armappconfiguration.ConfigurationStoreProperties{
						CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						DisableLocalAuth: to.Ptr(false),
						Encryption: &armappconfiguration.EncryptionProperties{
							KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
						},
						Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
						PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
						ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
					},
					SKU: &armappconfiguration.SKU{
						Name: to.Ptr("Standard"),
					},
					SystemData: &armappconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						CreatedBy:          to.Ptr("foo@contoso.com"),
						CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("foo@contoso.com"),
						LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("contoso2"),
					Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
					ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso2"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armappconfiguration.ConfigurationStoreProperties{
						CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T23:06:59+00:00"); return t }()),
						DisableLocalAuth: to.Ptr(false),
						Encryption: &armappconfiguration.EncryptionProperties{
							KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
						},
						Endpoint:                   to.Ptr("https://contoso2.azconfig.io"),
						PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
						ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
					},
					SKU: &armappconfiguration.SKU{
						Name: to.Ptr("Standard"),
					},
					SystemData: &armappconfiguration.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						CreatedBy:          to.Ptr("foo@contoso.com"),
						CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
						LastModifiedBy:     to.Ptr("foo@contoso.com"),
						LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationStoreListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationStoreListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationStores_Get(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"contoso",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.ConfigurationStore{
			Name:     to.Ptr("contoso"),
			Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
			ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Identity: &armappconfiguration.ResourceIdentity{
				Type:        to.Ptr(armappconfiguration.IdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA"),
				TenantID:    to.Ptr("BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB"),
			},
			Properties: &armappconfiguration.ConfigurationStoreProperties{
				CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				DisableLocalAuth: to.Ptr(false),
				Encryption: &armappconfiguration.EncryptionProperties{
					KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
				},
				Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
				PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
				ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
			},
			SKU: &armappconfiguration.SKU{
				Name: to.Ptr("Standard"),
			},
			SystemData: &armappconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				CreatedBy:          to.Ptr("foo@contoso.com"),
				CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("foo@contoso.com"),
				LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationStore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationStore)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationStores_Create(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"contoso",
		armappconfiguration.ConfigurationStore{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"myTag": to.Ptr("myTagValue"),
			},
			SKU: &armappconfiguration.SKU{
				Name: to.Ptr("Standard"),
			},
		},
		&armappconfiguration.ConfigurationStoresClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.ConfigurationStore{
			Name:     to.Ptr("contoso"),
			Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
			ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"myTag": to.Ptr("myTagValue"),
			},
			Properties: &armappconfiguration.ConfigurationStoreProperties{
				CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				DisableLocalAuth:      to.Ptr(false),
				EnablePurgeProtection: to.Ptr(false),
				Encryption: &armappconfiguration.EncryptionProperties{
					KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
				},
				Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
				PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
				ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
				SoftDeleteRetentionInDays:  to.Ptr[int32](30),
			},
			SKU: &armappconfiguration.SKU{
				Name: to.Ptr("Standard"),
			},
			SystemData: &armappconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				CreatedBy:          to.Ptr("foo@contoso.com"),
				CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("foo@contoso.com"),
				LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationStore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationStore)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreateWithIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Create_With_Identity"},
	})
	client = armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"contoso",
		armappconfiguration.ConfigurationStore{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"myTag": to.Ptr("myTagValue"),
			},
			Identity: &armappconfiguration.ResourceIdentity{
				Type: to.Ptr(armappconfiguration.IdentityTypeSystemAssignedUserAssigned),
				UserAssignedIdentities: map[string]*armappconfiguration.UserIdentity{
					"/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {},
				},
			},
			SKU: &armappconfiguration.SKU{
				Name: to.Ptr("Standard"),
			},
		},
		&armappconfiguration.ConfigurationStoresClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreateWithIdentity.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreateWithIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.ConfigurationStore{
			Name:     to.Ptr("contoso"),
			Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
			ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"myTag": to.Ptr("myTagValue"),
			},
			Identity: &armappconfiguration.ResourceIdentity{
				Type:        to.Ptr(armappconfiguration.IdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA"),
				TenantID:    to.Ptr("BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB"),
				UserAssignedIdentities: map[string]*armappconfiguration.UserIdentity{
					"/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {
						ClientID:    to.Ptr("CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC"),
						PrincipalID: to.Ptr("DDDDDDDD-DDDD-DDDD-DDDD-DDDDDDDDDDDD"),
					},
				},
			},
			Properties: &armappconfiguration.ConfigurationStoreProperties{
				CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				DisableLocalAuth: to.Ptr(false),
				Encryption: &armappconfiguration.EncryptionProperties{
					KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
				},
				Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
				PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
				ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
			},
			SKU: &armappconfiguration.SKU{
				Name: to.Ptr("Standard"),
			},
			SystemData: &armappconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				CreatedBy:          to.Ptr("foo@contoso.com"),
				CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("foo@contoso.com"),
				LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationStore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationStore)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreateWithIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreateWithLocalAuthDisabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Create_With_Local_Auth_Disabled"},
	})
	client = armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"contoso",
		armappconfiguration.ConfigurationStore{
			Location: to.Ptr("westus"),
			Properties: &armappconfiguration.ConfigurationStoreProperties{
				DisableLocalAuth: to.Ptr(true),
			},
			SKU: &armappconfiguration.SKU{
				Name: to.Ptr("Standard"),
			},
		},
		&armappconfiguration.ConfigurationStoresClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreateWithLocalAuthDisabled.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreateWithLocalAuthDisabled.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.ConfigurationStore{
			Name:     to.Ptr("contoso"),
			Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
			ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armappconfiguration.ConfigurationStoreProperties{
				CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				DisableLocalAuth: to.Ptr(true),
				Encryption: &armappconfiguration.EncryptionProperties{
					KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
				},
				Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
				PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
				ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
			},
			SKU: &armappconfiguration.SKU{
				Name: to.Ptr("Standard"),
			},
			SystemData: &armappconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				CreatedBy:          to.Ptr("foo@contoso.com"),
				CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("foo@contoso.com"),
				LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationStore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationStore)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreateWithLocalAuthDisabled.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationStores_Delete(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"contoso",
		&armappconfiguration.ConfigurationStoresClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresDelete.json: %v", err)
	}
}

func TestConfigurationStores_Update(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"contoso",
		armappconfiguration.ConfigurationStoreUpdateParameters{
			SKU: &armappconfiguration.SKU{
				Name: to.Ptr("Standard"),
			},
			Tags: map[string]*string{
				"Category": to.Ptr("Marketing"),
			},
		},
		&armappconfiguration.ConfigurationStoresClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.ConfigurationStore{
			Name:     to.Ptr("contoso"),
			Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
			ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"Category": to.Ptr("Marketing"),
			},
			Properties: &armappconfiguration.ConfigurationStoreProperties{
				CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				DisableLocalAuth: to.Ptr(false),
				Encryption: &armappconfiguration.EncryptionProperties{
					KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
				},
				Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
				PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
				ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
			},
			SKU: &armappconfiguration.SKU{
				Name: to.Ptr("Standard"),
			},
			SystemData: &armappconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				CreatedBy:          to.Ptr("foo@contoso.com"),
				CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("foo@contoso.com"),
				LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationStore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationStore)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresUpdateDisableLocalAuth.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Update_Disable_Local_Auth"},
	})
	client = armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"contoso",
		armappconfiguration.ConfigurationStoreUpdateParameters{
			Properties: &armappconfiguration.ConfigurationStorePropertiesUpdateParameters{
				DisableLocalAuth: to.Ptr(true),
			},
			SKU: &armappconfiguration.SKU{
				Name: to.Ptr("Standard"),
			},
		},
		&armappconfiguration.ConfigurationStoresClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresUpdateDisableLocalAuth.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresUpdateDisableLocalAuth.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.ConfigurationStore{
			Name:     to.Ptr("contoso"),
			Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
			ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armappconfiguration.ConfigurationStoreProperties{
				CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				DisableLocalAuth: to.Ptr(true),
				Encryption: &armappconfiguration.EncryptionProperties{
					KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
				},
				Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
				PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
				ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
			},
			SKU: &armappconfiguration.SKU{
				Name: to.Ptr("Standard"),
			},
			SystemData: &armappconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				CreatedBy:          to.Ptr("foo@contoso.com"),
				CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("foo@contoso.com"),
				LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationStore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationStore)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresUpdateDisableLocalAuth.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresUpdateWithIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_Update_With_Identity"},
	})
	client = armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"contoso",
		armappconfiguration.ConfigurationStoreUpdateParameters{
			Identity: &armappconfiguration.ResourceIdentity{
				Type: to.Ptr(armappconfiguration.IdentityTypeSystemAssignedUserAssigned),
				UserAssignedIdentities: map[string]*armappconfiguration.UserIdentity{
					"/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {},
				},
			},
			SKU: &armappconfiguration.SKU{
				Name: to.Ptr("Standard"),
			},
			Tags: map[string]*string{
				"Category": to.Ptr("Marketing"),
			},
		},
		&armappconfiguration.ConfigurationStoresClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresUpdateWithIdentity.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresUpdateWithIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.ConfigurationStore{
			Name:     to.Ptr("contoso"),
			Type:     to.Ptr("Microsoft.AppConfiguration/configurationStores"),
			ID:       to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"Category": to.Ptr("Marketing"),
			},
			Identity: &armappconfiguration.ResourceIdentity{
				Type:        to.Ptr(armappconfiguration.IdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA"),
				TenantID:    to.Ptr("BBBBBBBB-BBBB-BBBB-BBBB-BBBBBBBBBBBB"),
				UserAssignedIdentities: map[string]*armappconfiguration.UserIdentity{
					"/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": {
						ClientID:    to.Ptr("CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC"),
						PrincipalID: to.Ptr("DDDDDDDD-DDDD-DDDD-DDDD-DDDDDDDDDDDD"),
					},
				},
			},
			Properties: &armappconfiguration.ConfigurationStoreProperties{
				CreationDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				DisableLocalAuth: to.Ptr(false),
				Encryption: &armappconfiguration.EncryptionProperties{
					KeyVaultProperties: &armappconfiguration.KeyVaultProperties{},
				},
				Endpoint:                   to.Ptr("https://contoso.azconfig.io"),
				PrivateEndpointConnections: []*armappconfiguration.PrivateEndpointConnectionReference{},
				ProvisioningState:          to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armappconfiguration.PublicNetworkAccessDisabled),
			},
			SKU: &armappconfiguration.SKU{
				Name: to.Ptr("Standard"),
			},
			SystemData: &armappconfiguration.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				CreatedBy:          to.Ptr("foo@contoso.com"),
				CreatedByType:      to.Ptr(armappconfiguration.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:55+00:00"); return t }()),
				LastModifiedBy:     to.Ptr("foo@contoso.com"),
				LastModifiedByType: to.Ptr(armappconfiguration.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationStore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationStore)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresUpdateWithIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationStores_ListKeys(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_ListKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	pager := client.ListKeys("myResourceGroup",
		"contoso",
		&armappconfiguration.ConfigurationStoresClientListKeysOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresListKeys.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappconfiguration.APIKeyListResult{
			Value: []*armappconfiguration.APIKey{
				{
					Name:             to.Ptr("Primary"),
					ConnectionString: to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
					ID:               to.Ptr("439AD01B4BE67DB1"),
					LastModified:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:54+00:00"); return t }()),
					ReadOnly:         to.Ptr(false),
					Value:            to.Ptr("000000000000000000000000000000000000000000000000000000"),
				},
				{
					Name:             to.Ptr("Secondary"),
					ConnectionString: to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
					ID:               to.Ptr("CB45E100456857B9"),
					LastModified:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:54+00:00"); return t }()),
					ReadOnly:         to.Ptr(false),
					Value:            to.Ptr("000000000000000000000000000000000000000000000000000000"),
				},
				{
					Name:             to.Ptr("Primary Read Only"),
					ConnectionString: to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
					ID:               to.Ptr("B3AC55B7E71431A9"),
					LastModified:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:54+00:00"); return t }()),
					ReadOnly:         to.Ptr(true),
					Value:            to.Ptr("000000000000000000000000000000000000000000000000000000"),
				},
				{
					Name:             to.Ptr("Secondary Read Only"),
					ConnectionString: to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
					ID:               to.Ptr("E2AF6A9A89DCC177"),
					LastModified:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-24T16:30:54+00:00"); return t }()),
					ReadOnly:         to.Ptr(true),
					Value:            to.Ptr("000000000000000000000000000000000000000000000000000000"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.APIKeyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.APIKeyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationStores_RegenerateKey(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresRegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_RegenerateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	res, err := client.RegenerateKey(ctx,
		"myResourceGroup",
		"contoso",
		armappconfiguration.RegenerateKeyParameters{
			ID: to.Ptr("439AD01B4BE67DB1"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresRegenerateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.APIKey{
			Name:             to.Ptr("Primary"),
			ConnectionString: to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
			ID:               to.Ptr("439AD01B4BE67DB1"),
			LastModified:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-26T22:59:24.2370906+00:00"); return t }()),
			ReadOnly:         to.Ptr(false),
			Value:            to.Ptr("000000000000000000000000000000000000000000000000000000"),
		}
		if !reflect.DeepEqual(exampleRes, res.APIKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIKey)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresRegenerateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationStores_ListDeleted(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/DeletedConfigurationStoresList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeletedConfigurationStores_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	pager := client.ListDeleted(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/DeletedConfigurationStoresList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappconfiguration.DeletedConfigurationStoreListResult{
			Value: []*armappconfiguration.DeletedConfigurationStore{
				{
					Name: to.Ptr("contoso"),
					Type: to.Ptr("Microsoft.AppConfiguration/deletedConfigurationStores"),
					ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/providers/Microsoft.AppConfiguration/locations/westus/deletedConfigurationStores/contoso"),
					Properties: &armappconfiguration.DeletedConfigurationStoreProperties{
						ConfigurationStoreID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
						DeletionDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-01T00:00:59Z"); return t }()),
						Location:               to.Ptr("westus"),
						PurgeProtectionEnabled: to.Ptr(true),
						ScheduledPurgeDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T00:00:59Z"); return t }()),
						Tags:                   map[string]*string{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeletedConfigurationStoreListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeletedConfigurationStoreListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/DeletedConfigurationStoresList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationStores_GetDeleted(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/DeletedConfigurationStoresGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeletedConfigurationStores_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	res, err := client.GetDeleted(ctx,
		"westus",
		"contoso",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/DeletedConfigurationStoresGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.DeletedConfigurationStore{
			Name: to.Ptr("contoso"),
			Type: to.Ptr("Microsoft.AppConfiguration/deletedConfigurationStores"),
			ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/providers/Microsoft.AppConfiguration/locations/westus/deletedConfigurationStores/contoso"),
			Properties: &armappconfiguration.DeletedConfigurationStoreProperties{
				ConfigurationStoreID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso"),
				DeletionDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-01T00:00:59Z"); return t }()),
				Location:               to.Ptr("westus"),
				PurgeProtectionEnabled: to.Ptr(true),
				ScheduledPurgeDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T00:00:59Z"); return t }()),
				Tags:                   map[string]*string{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeletedConfigurationStore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeletedConfigurationStore)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/DeletedConfigurationStoresGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationStores_PurgeDeleted(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/DeletedConfigurationStoresPurge.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Purge a deleted configuration store"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewConfigurationStoresClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	poller, err := client.BeginPurgeDeleted(ctx,
		"westus",
		"contoso",
		&armappconfiguration.ConfigurationStoresClientBeginPurgeDeletedOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/DeletedConfigurationStoresPurge.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/DeletedConfigurationStoresPurge.json: %v", err)
	}
}

func TestOperations_CheckNameAvailability(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/CheckNameAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_CheckNameAvailable"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewOperationsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armappconfiguration.CheckNameAvailabilityParameters{
			Name: to.Ptr("contoso"),
			Type: to.Ptr(armappconfiguration.ConfigurationResourceTypeMicrosoftAppConfigurationConfigurationStores),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/CheckNameAvailable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.NameAvailabilityStatus{
			Message:       to.Ptr("The specified name is available."),
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailabilityStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailabilityStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/CheckNameAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/CheckNameNotAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_CheckNameNotAvailable"},
	})
	client = armappconfiguration.NewOperationsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	res, err = client.CheckNameAvailability(ctx,
		armappconfiguration.CheckNameAvailabilityParameters{
			Name: to.Ptr("contoso"),
			Type: to.Ptr(armappconfiguration.ConfigurationResourceTypeMicrosoftAppConfigurationConfigurationStores),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/CheckNameNotAvailable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.NameAvailabilityStatus{
			Message:       to.Ptr("The specified name is already in use."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("AlreadyExists"),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailabilityStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailabilityStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/CheckNameNotAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestOperations_RegionalCheckNameAvailability(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/RegionalCheckNameAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_CheckNameAvailable"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewOperationsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	res, err := client.RegionalCheckNameAvailability(ctx,
		"westus",
		armappconfiguration.CheckNameAvailabilityParameters{
			Name: to.Ptr("contoso"),
			Type: to.Ptr(armappconfiguration.ConfigurationResourceTypeMicrosoftAppConfigurationConfigurationStores),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/RegionalCheckNameAvailable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.NameAvailabilityStatus{
			Message:       to.Ptr("The specified name is available."),
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailabilityStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailabilityStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/RegionalCheckNameAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/RegionalCheckNameNotAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationStores_CheckNameNotAvailable"},
	})
	client = armappconfiguration.NewOperationsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	res, err = client.RegionalCheckNameAvailability(ctx,
		"westus",
		armappconfiguration.CheckNameAvailabilityParameters{
			Name: to.Ptr("contoso"),
			Type: to.Ptr(armappconfiguration.ConfigurationResourceTypeMicrosoftAppConfigurationConfigurationStores),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/RegionalCheckNameNotAvailable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.NameAvailabilityStatus{
			Message:       to.Ptr("The specified name is already in use."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("AlreadyExists"),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailabilityStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailabilityStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/RegionalCheckNameNotAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_ListByConfigurationStore(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewPrivateEndpointConnectionsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	pager := client.ListByConfigurationStore("myResourceGroup",
		"contoso",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappconfiguration.PrivateEndpointConnectionListResult{
			Value: []*armappconfiguration.PrivateEndpointConnection{
				{
					Name: to.Ptr("myConnection"),
					Type: to.Ptr("Microsoft.AppConfiguration/configurationStores/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/privateEndpointConnections/myConnection"),
					Properties: &armappconfiguration.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armappconfiguration.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
						},
						PrivateLinkServiceConnectionState: &armappconfiguration.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr(armappconfiguration.ActionsRequiredNone),
							Status:          to.Ptr(armappconfiguration.ConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_GetConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewPrivateEndpointConnectionsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"contoso",
		"myConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresGetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.AppConfiguration/configurationStores/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/privateEndpointConnections/myConnection"),
			Properties: &armappconfiguration.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armappconfiguration.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armappconfiguration.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr(armappconfiguration.ActionsRequiredNone),
					Status:          to.Ptr(armappconfiguration.ConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreatePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewPrivateEndpointConnectionsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"contoso",
		"myConnection",
		armappconfiguration.PrivateEndpointConnection{
			Properties: &armappconfiguration.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armappconfiguration.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armappconfiguration.ConnectionStatusApproved),
				},
			},
		},
		&armappconfiguration.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreatePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreatePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.AppConfiguration/configurationStores/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/privateEndpointConnections/myConnection"),
			Properties: &armappconfiguration.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armappconfiguration.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armappconfiguration.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr(armappconfiguration.ActionsRequiredNone),
					Status:          to.Ptr(armappconfiguration.ConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armappconfiguration.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreatePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewPrivateEndpointConnectionsClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"contoso",
		"myConnection",
		&armappconfiguration.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresDeletePrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresDeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkResources_ListByConfigurationStore(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/PrivateLinkResourcesListByConfigurationStore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListGroupIds"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewPrivateLinkResourcesClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	pager := client.ListByConfigurationStore("myResourceGroup",
		"contoso",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/PrivateLinkResourcesListByConfigurationStore.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappconfiguration.PrivateLinkResourceListResult{
			Value: []*armappconfiguration.PrivateLinkResource{
				{
					Name: to.Ptr("configurationStores"),
					Type: to.Ptr("Microsoft.AppConfiguraiton/configurationStores/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/privateLinkResources/configurationStores"),
					Properties: &armappconfiguration.PrivateLinkResourceProperties{
						GroupID: to.Ptr("configurationStores"),
						RequiredMembers: []*string{
							to.Ptr("configurationStores")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.azconfig.io")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/PrivateLinkResourcesListByConfigurationStore.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/PrivateLinkResourceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewPrivateLinkResourcesClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"contoso",
		"configurationStores",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/PrivateLinkResourceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.PrivateLinkResource{
			Name: to.Ptr("configurationStores"),
			Type: to.Ptr("Microsoft.AppConfiguraiton/configurationStores/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/privateLinkResources/configurationStores"),
			Properties: &armappconfiguration.PrivateLinkResourceProperties{
				GroupID: to.Ptr("configurationStores"),
				RequiredMembers: []*string{
					to.Ptr("configurationStores")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.azconfig.io")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/PrivateLinkResourceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKeyValues_ListByConfigurationStore(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresListKeyValues.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KeyValues_ListByConfigurationStore"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewKeyValuesClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	pager := client.ListByConfigurationStore("myResourceGroup",
		"contoso",
		&armappconfiguration.KeyValuesClientListByConfigurationStoreOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresListKeyValues.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armappconfiguration.KeyValueListResult{
			Value: []*armappconfiguration.KeyValue{
				{
					Name: to.Ptr("myKey$myLabel"),
					Type: to.Ptr("Microsoft.AppConfiguration/configurationStores/keyValues"),
					ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/keyValues/myKey$myLabel"),
					Properties: &armappconfiguration.KeyValueProperties{
						ContentType:  to.Ptr(""),
						ETag:         to.Ptr("IhDxoa8VkXxPsYsemBlxvV0d5fp"),
						Key:          to.Ptr("myKey"),
						Label:        to.Ptr("myLabel"),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-23T06:42:24+00:00"); return t }()),
						Locked:       to.Ptr(false),
						Tags: map[string]*string{
							"tag1": to.Ptr("tagValue1"),
							"tag2": to.Ptr("tagValue2"),
						},
						Value: to.Ptr("myValue"),
					},
				},
				{
					Name: to.Ptr("myKey2$myLabel2"),
					Type: to.Ptr("Microsoft.AppConfiguration/configurationStores/keyValues"),
					ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/keyValues/myKey2$myLabel2"),
					Properties: &armappconfiguration.KeyValueProperties{
						ContentType:  to.Ptr(""),
						ETag:         to.Ptr("IfDxoa8VkXxPsYsemBlxvV0d5fp"),
						Key:          to.Ptr("myKey2"),
						Label:        to.Ptr("myLabel2"),
						LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-23T06:42:24+00:00"); return t }()),
						Locked:       to.Ptr(false),
						Tags: map[string]*string{
							"tag1": to.Ptr("tagValue1"),
							"tag2": to.Ptr("tagValue2"),
						},
						Value: to.Ptr("myValue"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.KeyValueListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.KeyValueListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresListKeyValues.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKeyValues_Get(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresGetKeyValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KeyValues_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewKeyValuesClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"contoso",
		"myKey$myLabel",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresGetKeyValue.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.KeyValue{
			Name: to.Ptr("myKey$myLabel"),
			Type: to.Ptr("Microsoft.AppConfiguration/configurationStores/keyValues"),
			ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/keyValues/myKey$myLabel"),
			Properties: &armappconfiguration.KeyValueProperties{
				ContentType:  to.Ptr(""),
				ETag:         to.Ptr("IhDxoa8VkXxPsYsemBlxvV0d5fp"),
				Key:          to.Ptr("myKey"),
				Label:        to.Ptr("myLabel"),
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-23T06:42:24+00:00"); return t }()),
				Locked:       to.Ptr(false),
				Tags: map[string]*string{
					"tag1": to.Ptr("tagValue1"),
					"tag2": to.Ptr("tagValue2"),
				},
				Value: to.Ptr("myValue"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.KeyValue) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.KeyValue)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresGetKeyValue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKeyValues_CreateOrUpdate(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreateKeyValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KeyValues_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewKeyValuesClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"contoso",
		"myKey$myLabel",
		&armappconfiguration.KeyValuesClientCreateOrUpdateOptions{KeyValueParameters: &armappconfiguration.KeyValue{
			Properties: &armappconfiguration.KeyValueProperties{
				Tags: map[string]*string{
					"tag1": to.Ptr("tagValue1"),
					"tag2": to.Ptr("tagValue2"),
				},
				Value: to.Ptr("myValue"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreateKeyValue.json: %v", err)
	}
	// Response check
	{
		exampleRes := armappconfiguration.KeyValue{
			Name: to.Ptr("myKey$myLabel"),
			Type: to.Ptr("Microsoft.AppConfiguration/configurationStores/keyValues"),
			ID:   to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.AppConfiguration/configurationStores/contoso/keyValues/myKey$myLabel"),
			Properties: &armappconfiguration.KeyValueProperties{
				ContentType:  to.Ptr(""),
				ETag:         to.Ptr("IhDxoa8VkXxPsYsemBlxvV0d5fp"),
				Key:          to.Ptr("myKey"),
				Label:        to.Ptr("myLabel"),
				LastModified: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-23T06:42:24+00:00"); return t }()),
				Locked:       to.Ptr(false),
				Tags: map[string]*string{
					"tag1": to.Ptr("tagValue1"),
					"tag2": to.Ptr("tagValue2"),
				},
				Value: to.Ptr("myValue"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.KeyValue) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.KeyValue)
			t.Fatalf("Mock response is not equal to example response for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresCreateKeyValue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKeyValues_Delete(t *testing.T) {
	// From example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresDeleteKeyValue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KeyValues_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armappconfiguration.NewKeyValuesClient("c80fb759-c965-4c6a-9110-9b2b2d038882", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"contoso",
		"myKey$myLabel",
		&armappconfiguration.KeyValuesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresDeleteKeyValue.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/ConfigurationStoresDeleteKeyValue.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
