//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmachinelearningexperimentation_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/machinelearningexperimentation/armmachinelearningexperimentation"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAccounts_Get(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/GetAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewAccountsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"accountcrud-1234",
		"accountcrud5678",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/GetAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningexperimentation.Account{
			Name:     to.Ptr("accountcrud5678"),
			Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.MachineLearningExperimentation/accounts/accountcrud5678"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armmachinelearningexperimentation.AccountProperties{
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				DiscoveryURI:      to.Ptr("http://example.com"),
				KeyVaultID:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.KeyVault/vaults/testkv1"),
				ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
				Seats:             to.Ptr("2"),
				StorageAccount: &armmachinelearningexperimentation.StorageAccountProperties{
					AccessKey:        to.Ptr("key"),
					StorageAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
				},
				VsoAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/microsoft.visualstudio/account/vsotest"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/GetAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_CreateOrUpdate(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/CreateAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewAccountsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"accountcrud-1234",
		"accountcrud5678",
		armmachinelearningexperimentation.Account{
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armmachinelearningexperimentation.AccountProperties{
				KeyVaultID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.KeyVault/vaults/testkv"),
				StorageAccount: &armmachinelearningexperimentation.StorageAccountProperties{
					AccessKey:        to.Ptr("key"),
					StorageAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
				},
				VsoAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/microsoft.visualstudio/account/vsotest"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/CreateAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningexperimentation.Account{
			Name:     to.Ptr("accountcrud5678"),
			Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.MachineLearningExperimentation/accounts/accountcrud5678"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armmachinelearningexperimentation.AccountProperties{
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				DiscoveryURI:      to.Ptr("http://example.com"),
				KeyVaultID:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.KeyVault/vaults/testkv"),
				ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
				StorageAccount: &armmachinelearningexperimentation.StorageAccountProperties{
					AccessKey:        to.Ptr("key"),
					StorageAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
				},
				VsoAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/microsoft.visualstudio/account/vsotest"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/CreateAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/DeleteAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewAccountsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/DeleteAccount.json: %v", err)
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/UpdateAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewAccountsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Update(ctx,
		"accountcrud-1234",
		"accountcrud5678",
		armmachinelearningexperimentation.AccountUpdateParameters{
			Properties: &armmachinelearningexperimentation.AccountPropertiesUpdateParameters{
				Description: to.Ptr("new description"),
			},
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/UpdateAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningexperimentation.Account{
			Name:     to.Ptr("accountcrud5678"),
			Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.MachineLearningExperimentation/accounts/accountcrud5678"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armmachinelearningexperimentation.AccountProperties{
				Description:       to.Ptr("new description"),
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				DiscoveryURI:      to.Ptr("http://example.com"),
				KeyVaultID:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.KeyVault/vaults/testkv1"),
				ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
				Seats:             to.Ptr("2"),
				StorageAccount: &armmachinelearningexperimentation.StorageAccountProperties{
					AccessKey:        to.Ptr("key"),
					StorageAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
				},
				VsoAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/microsoft.visualstudio/account/vsotest"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/UpdateAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/ListAccountResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewAccountsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroup("accountcrud-1234",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/ListAccountResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningexperimentation.AccountListResult{
			Value: []*armmachinelearningexperimentation.Account{
				{
					Name:     to.Ptr("accountcrud-5678"),
					Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.MachineLearningExperimentation/accounts/accountcrud-5678"),
					Location: to.Ptr("East US"),
					Properties: &armmachinelearningexperimentation.AccountProperties{
						CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
						DiscoveryURI:      to.Ptr("http://example.com"),
						KeyVaultID:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.KeyVault/vaults/testkv"),
						ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
						Seats:             to.Ptr("2"),
						StorageAccount: &armmachinelearningexperimentation.StorageAccountProperties{
							AccessKey:        to.Ptr("key"),
							StorageAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
						},
						VsoAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/microsoft.visualstudio/account/vsotest"),
					},
				},
				{
					Name:     to.Ptr("accountcrud-8765"),
					Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.MachineLearningExperimentation/accounts/accountcrud-8765"),
					Location: to.Ptr("East US"),
					Properties: &armmachinelearningexperimentation.AccountProperties{
						CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-02T23:14:37.0707808Z"); return t }()),
						DiscoveryURI:      to.Ptr("http://example.com"),
						KeyVaultID:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.KeyVault/vaults/testkv"),
						ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
						Seats:             to.Ptr("2"),
						StorageAccount: &armmachinelearningexperimentation.StorageAccountProperties{
							AccessKey:        to.Ptr("key"),
							StorageAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
						},
						VsoAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/microsoft.visualstudio/account/vsotest1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/ListAccountResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_List(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/ListAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewAccountsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/ListAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningexperimentation.AccountListResult{
			Value: []*armmachinelearningexperimentation.Account{
				{
					Name:     to.Ptr("accountcrud5678"),
					Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.MachineLearningExperimentation/accounts/accountcrud5678"),
					Location: to.Ptr("East US"),
					Properties: &armmachinelearningexperimentation.AccountProperties{
						CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
						DiscoveryURI:      to.Ptr("http://example.com"),
						KeyVaultID:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.KeyVault/vaults/testkv"),
						ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
						Seats:             to.Ptr("2"),
						StorageAccount: &armmachinelearningexperimentation.StorageAccountProperties{
							AccessKey:        to.Ptr("key"),
							StorageAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
						},
						VsoAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/microsoft.visualstudio/account/vsotest"),
					},
				},
				{
					Name:     to.Ptr("accountcrud8765"),
					Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-4321/providers/Microsoft.MachineLearningExperimentation/accounts/accountcrud8765"),
					Location: to.Ptr("East US"),
					Properties: &armmachinelearningexperimentation.AccountProperties{
						CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-02T23:14:37.0707808Z"); return t }()),
						DiscoveryURI:      to.Ptr("http://example.com"),
						KeyVaultID:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.KeyVault/vaults/testkv"),
						ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
						Seats:             to.Ptr("2"),
						StorageAccount: &armmachinelearningexperimentation.StorageAccountProperties{
							AccessKey:        to.Ptr("key"),
							StorageAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
						},
						VsoAccountID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/microsoft.visualstudio/account/vsotest1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/ListAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Get(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/WorkspaceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspaceGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"accountcrud-1234",
		"accountcrud5678",
		"testworkspace",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/WorkspaceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningexperimentation.Workspace{
			Name:     to.Ptr("testworkspace"),
			Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts/workspaces"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.MachineLearningExperimentation/accounts/accountcrud5678/workspaces/testworkspace"),
			Location: to.Ptr("East US 2 EUAP"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armmachinelearningexperimentation.WorkspaceProperties{
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				FriendlyName:      to.Ptr("testName"),
				ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/WorkspaceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_CreateOrUpdate(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/WorkspaceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspaceCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewWorkspacesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"testaccount",
		"testworkspace",
		armmachinelearningexperimentation.Workspace{
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armmachinelearningexperimentation.WorkspaceProperties{
				FriendlyName: to.Ptr("testName"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/WorkspaceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningexperimentation.Workspace{
			Name:     to.Ptr("testworkspace"),
			Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts/workspaces"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.MachineLearningExperimentation/accounts/testaccount/workspaces/testworkspace"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armmachinelearningexperimentation.WorkspaceProperties{
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				FriendlyName:      to.Ptr("testName"),
				ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/WorkspaceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Delete(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/WorkspaceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspaceDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewWorkspacesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myAccount",
		"testworkspace",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/WorkspaceDelete.json: %v", err)
	}
}

func TestWorkspaces_Update(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/WorkspaceUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspaceUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Update(ctx,
		"accountcrud-1234",
		"accountcrud5678",
		"testworkspace",
		armmachinelearningexperimentation.WorkspaceUpdateParameters{
			Properties: &armmachinelearningexperimentation.WorkspacePropertiesUpdateParameters{
				FriendlyName: to.Ptr("testNameNew"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/WorkspaceUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningexperimentation.Workspace{
			Name:     to.Ptr("accountcrud5678"),
			Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts/workspaces"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.MachineLearningExperimentation/accounts/testaccount/workspaces/testworkspace"),
			Location: to.Ptr("East US 2 EUAP"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armmachinelearningexperimentation.WorkspaceProperties{
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				FriendlyName:      to.Ptr("testNameNew"),
				ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/WorkspaceUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListByAccounts(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/ListWorkspacesByAccounts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListWorkspacesByAccounts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByAccounts("testaccount",
		"accountcrud-1234",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/ListWorkspacesByAccounts.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningexperimentation.WorkspaceListResult{
			Value: []*armmachinelearningexperimentation.Workspace{
				{
					Name:     to.Ptr("testworkspace"),
					Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.MachineLearningExperimentation/accounts/accountcrud5678/workspaces/testworkspace"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"tagKey1": to.Ptr("TagValue1"),
					},
					Properties: &armmachinelearningexperimentation.WorkspaceProperties{
						CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
						FriendlyName:      to.Ptr("testName"),
						ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("testworkspace1"),
					Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.MachineLearningExperimentation/accounts/accountcrud5678/workspaces/testworkspace1"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"tagKey1": to.Ptr("TagValue1"),
					},
					Properties: &armmachinelearningexperimentation.WorkspaceProperties{
						CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
						FriendlyName:      to.Ptr("testName1"),
						ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/ListWorkspacesByAccounts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_Get(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/GetProject.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetProject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewProjectsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"accountcrud-1234",
		"accountcrud5678",
		"testworkspace",
		"testProject",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/GetProject.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningexperimentation.Project{
			Name:     to.Ptr("testProject"),
			Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts/workspaces/projects"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.MachineLearningExperimentation/accounts/accountcrud5678/workspaces/testworkspace/projects/testProject"),
			Location: to.Ptr("East US 2"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armmachinelearningexperimentation.ProjectProperties{
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				FriendlyName:      to.Ptr("testName"),
				Gitrepo:           to.Ptr("https://github/abc"),
				ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Project) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Project)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/GetProject.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_CreateOrUpdate(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/CreateProject.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateProject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewProjectsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"testaccount",
		"testworkspace",
		"testProject",
		armmachinelearningexperimentation.Project{
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armmachinelearningexperimentation.ProjectProperties{
				FriendlyName: to.Ptr("testName"),
				Gitrepo:      to.Ptr("https://github/abc"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/CreateProject.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningexperimentation.Project{
			Name:     to.Ptr("testProject"),
			Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts/workspaces/projects"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.MachineLearningExperimentation/accounts/testaccount/workspaces/testworkspace/projects/testProject"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armmachinelearningexperimentation.ProjectProperties{
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				FriendlyName:      to.Ptr("testName"),
				Gitrepo:           to.Ptr("https://github/abc"),
				ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Project) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Project)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/CreateProject.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_Delete(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/DeleteProject.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewProjectsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myAccount",
		"testworkspace",
		"testProject",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/DeleteProject.json: %v", err)
	}
}

func TestProjects_Update(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/UpdateProject.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateProject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewProjectsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Update(ctx,
		"accountcrud-1234",
		"accountcrud5678",
		"testworkspace",
		"testProject",
		armmachinelearningexperimentation.ProjectUpdateParameters{
			Properties: &armmachinelearningexperimentation.ProjectPropertiesUpdateParameters{
				FriendlyName: to.Ptr("testName"),
			},
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/UpdateProject.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmachinelearningexperimentation.Project{
			Name:     to.Ptr("accountcrud5678"),
			Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts/workspaces/projects"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.MachineLearningExperimentation/accounts/testaccount/workspaces/testworkspace/projects/testProject"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armmachinelearningexperimentation.ProjectProperties{
				CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
				FriendlyName:      to.Ptr("testName"),
				Gitrepo:           to.Ptr("https://github/abc"),
				ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Project) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Project)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/UpdateProject.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_ListByWorkspace(t *testing.T) {
	// From example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/ProjectListByWorkspaces.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ProjectListByWorkspaces"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmachinelearningexperimentation.NewProjectsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByWorkspace("testaccount",
		"testworkspace",
		"testrg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/ProjectListByWorkspaces.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmachinelearningexperimentation.ProjectListResult{
			Value: []*armmachinelearningexperimentation.Project{
				{
					Name:     to.Ptr("testProject"),
					Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts/workspaces/projects"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.MachineLearningExperimentation/accounts/accountcrud5678/workspaces/testworkspace/projects/testProject"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"tagKey1": to.Ptr("TagValue1"),
					},
					Properties: &armmachinelearningexperimentation.ProjectProperties{
						CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
						FriendlyName:      to.Ptr("testName"),
						Gitrepo:           to.Ptr("https://github/abc"),
						ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("testProject1"),
					Type:     to.Ptr("Microsoft.MachineLearningExperimentation/accounts/workspaces/projects"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.MachineLearningExperimentation/accounts/accountcrud5678/workspaces/testworkspace/projects/testProject1"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"tagKey1": to.Ptr("TagValue1"),
					},
					Properties: &armmachinelearningexperimentation.ProjectProperties{
						CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
						FriendlyName:      to.Ptr("testName1"),
						Gitrepo:           to.Ptr("https://github/def"),
						ProvisioningState: to.Ptr(armmachinelearningexperimentation.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProjectListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProjectListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/machinelearningexperimentation/resource-manager/Microsoft.MachineLearningExperimentation/preview/2017-05-01-preview/examples/ProjectListByWorkspaces.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
