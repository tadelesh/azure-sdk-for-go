//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armengagementfabric_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"
	"time"

	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/engagementfabric/armengagementfabric"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAccounts_Get(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsGetExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountsGetExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewAccountsClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	res, err := client.Get(ctx,
		"ExampleRg",
		"ExampleAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsGetExample.json: %v", err)
	}
	// Response check
	{
		exampleRes := armengagementfabric.Account{
			Name:     to.Ptr("ExampleAccount"),
			Type:     to.Ptr("Microsoft.EngagementFabric/Accounts"),
			ID:       to.Ptr("subscriptions/EDBF0095-A524-4A84-95FB-F72DA41AA6A1/resourceGroups/ExampleRg/providers/Microsoft.EngagementFabric/Accounts/ExampleAccount"),
			Location: to.Ptr("WestUS"),
			SKU: &armengagementfabric.SKU{
				Name: to.Ptr("B1"),
				Tier: to.Ptr("Basic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsGetExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_CreateOrUpdate(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsCreateOrUpdateExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountsCreateOrUpdateExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewAccountsClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"ExampleRg",
		"ExampleAccount",
		armengagementfabric.Account{
			Location: to.Ptr("WestUS"),
			SKU: &armengagementfabric.SKU{
				Name: to.Ptr("B1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsCreateOrUpdateExample.json: %v", err)
	}
	// Response check
	{
		exampleRes := armengagementfabric.Account{
			Name:     to.Ptr("ExampleAccount"),
			Type:     to.Ptr("Microsoft.EngagementFabric/Accounts"),
			ID:       to.Ptr("subscriptions/EDBF0095-A524-4A84-95FB-F72DA41AA6A1/resourceGroups/ExampleRg/providers/Microsoft.EngagementFabric/Accounts/ExampleAccount"),
			Location: to.Ptr("WestUS"),
			SKU: &armengagementfabric.SKU{
				Name: to.Ptr("B1"),
				Tier: to.Ptr("Basic"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsCreateOrUpdateExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsDeleteExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountsDeleteExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewAccountsClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	_, err := client.Delete(ctx,
		"ExampleRg",
		"ExampleAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsDeleteExample.json: %v", err)
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsUpdateExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountsUpdateExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewAccountsClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	res, err := client.Update(ctx,
		"ExampleRg",
		"ExampleAccount",
		armengagementfabric.AccountPatch{
			Tags: map[string]*string{
				"tagName": to.Ptr("tagValue"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsUpdateExample.json: %v", err)
	}
	// Response check
	{
		exampleRes := armengagementfabric.Account{
			Name:     to.Ptr("ExampleAccount"),
			Type:     to.Ptr("Microsoft.EngagementFabric/Accounts"),
			ID:       to.Ptr("subscriptions/EDBF0095-A524-4A84-95FB-F72DA41AA6A1/resourceGroups/ExampleRg/providers/Microsoft.EngagementFabric/Accounts/ExampleAccount"),
			Location: to.Ptr("WestUS"),
			SKU: &armengagementfabric.SKU{
				Name: to.Ptr("B1"),
				Tier: to.Ptr("Basic"),
			},
			Tags: map[string]*string{
				"tagName": to.Ptr("tagValue"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsUpdateExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_List(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsListExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountsListExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewAccountsClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsListExample.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armengagementfabric.AccountList{
			Value: []*armengagementfabric.Account{
				{
					Name:     to.Ptr("ExampleAccount"),
					Type:     to.Ptr("Microsoft.EngagementFabric/Accounts"),
					ID:       to.Ptr("subscriptions/EDBF0095-A524-4A84-95FB-F72DA41AA6A1/resourceGroups/ExampleRg/providers/Microsoft.EngagementFabric/Accounts/ExampleAccount"),
					Location: to.Ptr("WestUS"),
					SKU: &armengagementfabric.SKU{
						Name: to.Ptr("B1"),
						Tier: to.Ptr("Basic"),
					},
				},
				{
					Name:     to.Ptr("ExampleAccount2"),
					Type:     to.Ptr("Microsoft.EngagementFabric/Accounts"),
					ID:       to.Ptr("subscriptions/EDBF0095-A524-4A84-95FB-F72DA41AA6A1/resourceGroups/ExampleRg/providers/Microsoft.EngagementFabric/Accounts/ExampleAccount2"),
					Location: to.Ptr("WestUS"),
					SKU: &armengagementfabric.SKU{
						Name: to.Ptr("S1"),
						Tier: to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("ExampleAccount3"),
					Type:     to.Ptr("Microsoft.EngagementFabric/Accounts"),
					ID:       to.Ptr("subscriptions/EDBF0095-A524-4A84-95FB-F72DA41AA6A1/resourceGroups/ExampleRg/providers/Microsoft.EngagementFabric/Accounts/ExampleAccount3"),
					Location: to.Ptr("WestUS"),
					SKU: &armengagementfabric.SKU{
						Name: to.Ptr("P1"),
						Tier: to.Ptr("Premium"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountList)
			t.Fatalf("Mock response is not equal to example response for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsListExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsListByResourceGroupExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountsListByResourceGroupExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewAccountsClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	pager := client.ListByResourceGroup("ExampleRg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsListByResourceGroupExample.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armengagementfabric.AccountList{
			Value: []*armengagementfabric.Account{
				{
					Name:     to.Ptr("ExampleAccount"),
					Type:     to.Ptr("Microsoft.EngagementFabric/Accounts"),
					ID:       to.Ptr("subscriptions/EDBF0095-A524-4A84-95FB-F72DA41AA6A1/resourceGroups/ExampleRg/providers/Microsoft.EngagementFabric/Accounts/ExampleAccount"),
					Location: to.Ptr("WestUS"),
					SKU: &armengagementfabric.SKU{
						Name: to.Ptr("B1"),
						Tier: to.Ptr("Basic"),
					},
				},
				{
					Name:     to.Ptr("ExampleAccount2"),
					Type:     to.Ptr("Microsoft.EngagementFabric/Accounts"),
					ID:       to.Ptr("subscriptions/EDBF0095-A524-4A84-95FB-F72DA41AA6A1/resourceGroups/ExampleRg/providers/Microsoft.EngagementFabric/Accounts/ExampleAccount2"),
					Location: to.Ptr("WestUS"),
					SKU: &armengagementfabric.SKU{
						Name: to.Ptr("S1"),
						Tier: to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("ExampleAccount3"),
					Type:     to.Ptr("Microsoft.EngagementFabric/Accounts"),
					ID:       to.Ptr("subscriptions/EDBF0095-A524-4A84-95FB-F72DA41AA6A1/resourceGroups/ExampleRg/providers/Microsoft.EngagementFabric/Accounts/ExampleAccount3"),
					Location: to.Ptr("WestUS"),
					SKU: &armengagementfabric.SKU{
						Name: to.Ptr("P1"),
						Tier: to.Ptr("Premium"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountList)
			t.Fatalf("Mock response is not equal to example response for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsListByResourceGroupExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListKeys(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsListKeysExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountsListKeysExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewAccountsClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	pager := client.ListKeys("ExampleRg",
		"ExampleAccount",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsListKeysExample.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armengagementfabric.KeyDescriptionList{
			Value: []*armengagementfabric.KeyDescription{
				{
					Name:  to.Ptr("Full"),
					Rank:  to.Ptr(armengagementfabric.KeyRankPrimaryKey),
					Value: to.Ptr("<ExampleFullPrimaryKeyValue>"),
				},
				{
					Name:  to.Ptr("Full"),
					Rank:  to.Ptr(armengagementfabric.KeyRankSecondaryKey),
					Value: to.Ptr("<ExampleFullSecondaryKeyValue>"),
				},
				{
					Name:  to.Ptr("Device"),
					Rank:  to.Ptr(armengagementfabric.KeyRankPrimaryKey),
					Value: to.Ptr("<ExampleDevicePrimaryKeyValue>"),
				},
				{
					Name:  to.Ptr("Device"),
					Rank:  to.Ptr(armengagementfabric.KeyRankSecondaryKey),
					Value: to.Ptr("<ExampleDeviceSecondaryKeyValue>"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.KeyDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.KeyDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsListKeysExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_RegenerateKey(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsRegenerateKeyExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountsRegenerateKeyExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewAccountsClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	res, err := client.RegenerateKey(ctx,
		"ExampleRg",
		"ExampleAccount",
		armengagementfabric.RegenerateKeyParameter{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsRegenerateKeyExample.json: %v", err)
	}
	// Response check
	{
		exampleRes := armengagementfabric.KeyDescription{
			Name:  to.Ptr("Full"),
			Rank:  to.Ptr(armengagementfabric.KeyRankPrimaryKey),
			Value: to.Ptr("<ExampleFullPrimaryKeyValue>"),
		}
		if !reflect.DeepEqual(exampleRes, res.KeyDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.KeyDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsRegenerateKeyExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListChannelTypes(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsListChannelTypesExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccountsListChannelTypesExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewAccountsClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	res, err := client.ListChannelTypes(ctx,
		"ExampleRg",
		"ExampleAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsListChannelTypesExample.json: %v", err)
	}
	// Response check
	{
		exampleRes := armengagementfabric.ChannelTypeDescriptionList{
			Value: []*armengagementfabric.ChannelTypeDescription{
				{
					ChannelDescription: to.Ptr("Description of mockChannel1"),
					ChannelFunctions: []*string{
						to.Ptr("MockFunction1"),
						to.Ptr("MockFunction2")},
					ChannelType: to.Ptr("MockChannel1"),
				},
				{
					ChannelDescription: to.Ptr("Description of mockChannel2"),
					ChannelFunctions: []*string{
						to.Ptr("MockFunction1"),
						to.Ptr("MockFunction3")},
					ChannelType: to.Ptr("MockChannel2"),
				},
				{
					ChannelDescription: to.Ptr("Description of mockChannel3"),
					ChannelFunctions: []*string{
						to.Ptr("MockFunction1"),
						to.Ptr("MockFunction2"),
						to.Ptr("MockFunction3")},
					ChannelType: to.Ptr("MockChannel3"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChannelTypeDescriptionList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChannelTypeDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/AccountsListChannelTypesExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestChannels_Get(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/ChannelsGetExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChannelsGetExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewChannelsClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	res, err := client.Get(ctx,
		"ExampleRg",
		"ExampleAccount",
		"ExampleChannel",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/ChannelsGetExample.json: %v", err)
	}
	// Response check
	{
		exampleRes := armengagementfabric.Channel{
			Name: to.Ptr("ExampleChannel"),
			Type: to.Ptr("Microsoft.EngagementFabric/Accounts/Channels"),
			ID:   to.Ptr("subscriptions/EDBF0095-A524-4A84-95FB-F72DA41AA6A1/resourceGroups/ExampleRg/providers/Microsoft.EngagementFabric/Accounts/ExampleAccount/Channels/ExampleChannel"),
			Properties: &armengagementfabric.ChannelProperties{
				ChannelFunctions: []*string{
					to.Ptr("MockFunction1"),
					to.Ptr("MockFunction2")},
				ChannelType: to.Ptr("MockChannel"),
				Credentials: map[string]*string{
					"AppId":  to.Ptr("exampleApp"),
					"AppKey": to.Ptr(""),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Channel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Channel)
			t.Fatalf("Mock response is not equal to example response for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/ChannelsGetExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestChannels_CreateOrUpdate(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/ChannelsCreateOrUpdateExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChannelsCreateOrUpdateExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewChannelsClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"ExampleRg",
		"ExampleAccount",
		"ExampleChannel",
		armengagementfabric.Channel{
			Properties: &armengagementfabric.ChannelProperties{
				ChannelFunctions: []*string{
					to.Ptr("MockFunction1"),
					to.Ptr("MockFunction2")},
				ChannelType: to.Ptr("MockChannel"),
				Credentials: map[string]*string{
					"AppId":  to.Ptr("exampleApp"),
					"AppKey": to.Ptr("exampleAppKey"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/ChannelsCreateOrUpdateExample.json: %v", err)
	}
	// Response check
	{
		exampleRes := armengagementfabric.Channel{
			Name: to.Ptr("ExampleChannel"),
			Type: to.Ptr("Microsoft.EngagementFabric/Accounts/Channels"),
			ID:   to.Ptr("subscriptions/EDBF0095-A524-4A84-95FB-F72DA41AA6A1/resourceGroups/ExampleRg/providers/Microsoft.EngagementFabric/Accounts/ExampleAccount/Channels/ExampleChannel"),
			Properties: &armengagementfabric.ChannelProperties{
				ChannelFunctions: []*string{
					to.Ptr("MockFunction1"),
					to.Ptr("MockFunction2")},
				ChannelType: to.Ptr("MockChannel"),
				Credentials: map[string]*string{
					"AppId":  to.Ptr("exampleApp"),
					"AppKey": to.Ptr(""),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Channel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Channel)
			t.Fatalf("Mock response is not equal to example response for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/ChannelsCreateOrUpdateExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestChannels_Delete(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/ChannelsDeleteExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChannelsDeleteExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewChannelsClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	_, err := client.Delete(ctx,
		"ExampleRg",
		"ExampleAccount",
		"ExampleChannel",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/ChannelsDeleteExample.json: %v", err)
	}
}

func TestChannels_ListByAccount(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/ChannelsListExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChannelsListExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewChannelsClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	pager := client.ListByAccount("ExampleRg",
		"ExampleAccount",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/ChannelsListExample.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armengagementfabric.ChannelList{
			Value: []*armengagementfabric.Channel{
				{
					Name: to.Ptr("ExampleChannel"),
					Type: to.Ptr("Microsoft.EngagementFabric/Accounts/Channels"),
					ID:   to.Ptr("subscriptions/EDBF0095-A524-4A84-95FB-F72DA41AA6A1/resourceGroups/ExampleRg/providers/Microsoft.EngagementFabric/Accounts/ExampleAccount/Channels/ExampleChannel"),
					Properties: &armengagementfabric.ChannelProperties{
						ChannelFunctions: []*string{
							to.Ptr("MockFunction1"),
							to.Ptr("MockFunction2")},
						ChannelType: to.Ptr("MockChannel"),
						Credentials: map[string]*string{
							"AppId":  to.Ptr("exampleApp"),
							"AppKey": to.Ptr(""),
						},
					},
				},
				{
					Name: to.Ptr("ExampleChannel2"),
					Type: to.Ptr("Microsoft.EngagementFabric/Accounts/Channels"),
					ID:   to.Ptr("subscriptions/EDBF0095-A524-4A84-95FB-F72DA41AA6A1/resourceGroups/ExampleRg/providers/Microsoft.EngagementFabric/Accounts/ExampleAccount/Channels/ExampleChannel2"),
					Properties: &armengagementfabric.ChannelProperties{
						ChannelFunctions: []*string{
							to.Ptr("MockFunction1"),
							to.Ptr("MockFunction3")},
						ChannelType: to.Ptr("MockChannel2"),
						Credentials: map[string]*string{
							"AppId":  to.Ptr("exampleApp2"),
							"AppKey": to.Ptr(""),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ChannelList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ChannelList)
			t.Fatalf("Mock response is not equal to example response for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/ChannelsListExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEngagementFabric_CheckNameAvailability(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/CheckNameAvailabilityExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckNameAvailabilityExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"<resource-group-name>",
		armengagementfabric.CheckNameAvailabilityParameter{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/CheckNameAvailabilityExample.json: %v", err)
	}
	// Response check
	{
		exampleRes := armengagementfabric.CheckNameAvailabilityResult{
			Message:       to.Ptr("Account 'ExampleAccount' already exists"),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr(armengagementfabric.CheckNameUnavailableReasonAlreadyExists),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/CheckNameAvailabilityExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/OperationsListExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationsListExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/OperationsListExample.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armengagementfabric.OperationList{
			Value: []*armengagementfabric.Operation{
				{
					Name: to.Ptr("Microsoft.EngagementFabric/Accounts/read"),
					Display: &armengagementfabric.OperationDisplay{
						Description: to.Ptr("List or get the EngagementFabric account"),
						Operation:   to.Ptr("List or get the EngagementFabric account"),
						Provider:    to.Ptr("Microsoft Customer Engagement Fabric"),
						Resource:    to.Ptr("Accounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.EngagementFabric/Accounts/write"),
					Display: &armengagementfabric.OperationDisplay{
						Description: to.Ptr("Create or update the EngagementFabric account"),
						Operation:   to.Ptr("Create or update the EngagementFabric account"),
						Provider:    to.Ptr("Microsoft Customer Engagement Fabric"),
						Resource:    to.Ptr("Accounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.EngagementFabric/Accounts/delete"),
					Display: &armengagementfabric.OperationDisplay{
						Description: to.Ptr("Delete the EngagementFabric account"),
						Operation:   to.Ptr("Delete the EngagementFabric account"),
						Provider:    to.Ptr("Microsoft Customer Engagement Fabric"),
						Resource:    to.Ptr("Accounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.EngagementFabric/Accounts/ListKeys/action"),
					Display: &armengagementfabric.OperationDisplay{
						Description: to.Ptr("Get all keys of the EngagementFabric account"),
						Operation:   to.Ptr("Get all keys of the EngagementFabric account"),
						Provider:    to.Ptr("Microsoft Customer Engagement Fabric"),
						Resource:    to.Ptr("Accounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.EngagementFabric/Accounts/RegenerateKey/action"),
					Display: &armengagementfabric.OperationDisplay{
						Description: to.Ptr("Regenerate the EngagementFabric account key"),
						Operation:   to.Ptr("Regenerate the EngagementFabric account key"),
						Provider:    to.Ptr("Microsoft Customer Engagement Fabric"),
						Resource:    to.Ptr("Accounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.EngagementFabric/Accounts/ListChannelTypes/action"),
					Display: &armengagementfabric.OperationDisplay{
						Description: to.Ptr("List available EngagementFabric channel types and functions"),
						Operation:   to.Ptr("List available EngagementFabric channel types and functions"),
						Provider:    to.Ptr("Microsoft Customer Engagement Fabric"),
						Resource:    to.Ptr("Accounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.EngagementFabric/Accounts/Channels/read"),
					Display: &armengagementfabric.OperationDisplay{
						Description: to.Ptr("List or get the EngagementFabric channel"),
						Operation:   to.Ptr("List or get the EngagementFabric channel"),
						Provider:    to.Ptr("Microsoft Customer Engagement Fabric"),
						Resource:    to.Ptr("Channels"),
					},
				},
				{
					Name: to.Ptr("Microsoft.EngagementFabric/Accounts/Channels/write"),
					Display: &armengagementfabric.OperationDisplay{
						Description: to.Ptr("Create or update the EngagementFabric channel"),
						Operation:   to.Ptr("Create or update the EngagementFabric channel"),
						Provider:    to.Ptr("Microsoft Customer Engagement Fabric"),
						Resource:    to.Ptr("Channels"),
					},
				},
				{
					Name: to.Ptr("Microsoft.EngagementFabric/Accounts/Channels/delete"),
					Display: &armengagementfabric.OperationDisplay{
						Description: to.Ptr("Delete the EngagementFabric channel"),
						Operation:   to.Ptr("Delete the EngagementFabric channel"),
						Provider:    to.Ptr("Microsoft Customer Engagement Fabric"),
						Resource:    to.Ptr("Channels"),
					},
				},
				{
					Name: to.Ptr("Microsoft.EngagementFabric/checkNameAvailability/action"),
					Display: &armengagementfabric.OperationDisplay{
						Description: to.Ptr("Check name availability"),
						Operation:   to.Ptr("Check name availability"),
						Provider:    to.Ptr("Microsoft Customer Engagement Fabric"),
						Resource:    to.Ptr("Accounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.EngagementFabric/operations/read"),
					Display: &armengagementfabric.OperationDisplay{
						Description: to.Ptr("List available operations"),
						Operation:   to.Ptr("List available operations"),
						Provider:    to.Ptr("Microsoft Customer Engagement Fabric"),
						Resource:    to.Ptr("Operations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.EngagementFabric/skus/read"),
					Display: &armengagementfabric.OperationDisplay{
						Description: to.Ptr("List available SKUs"),
						Operation:   to.Ptr("List available SKUs"),
						Provider:    to.Ptr("Microsoft Customer Engagement Fabric"),
						Resource:    to.Ptr("Accounts"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/OperationsListExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUs_List(t *testing.T) {
	// From example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/SKUsListExample.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SKUsListExample"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armengagementfabric.NewSKUsClient("EDBF0095-A524-4A84-95FB-F72DA41AA6A1", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/SKUsListExample.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armengagementfabric.SKUDescriptionList{
			Value: []*armengagementfabric.SKUDescription{
				{
					Name: to.Ptr("B1"),
					LocationInfo: []*armengagementfabric.SKULocationInfoItem{
						{
							Location: to.Ptr("Central US"),
						},
						{
							Location: to.Ptr("North Europe"),
						},
						{
							Location: to.Ptr("West Europe"),
						}},
					Locations: []*string{
						to.Ptr("Central US"),
						to.Ptr("North Europe"),
						to.Ptr("West Europe")},
					ResourceType: to.Ptr("Microsoft.EngagementFabric/Accounts"),
					Restrictions: []interface{}{},
					Tier:         to.Ptr("Basic"),
				},
				{
					Name: to.Ptr("S1"),
					LocationInfo: []*armengagementfabric.SKULocationInfoItem{
						{
							Location: to.Ptr("Central US"),
						},
						{
							Location: to.Ptr("North Europe"),
						},
						{
							Location: to.Ptr("West Europe"),
						}},
					Locations: []*string{
						to.Ptr("Central US"),
						to.Ptr("North Europe"),
						to.Ptr("West Europe")},
					ResourceType: to.Ptr("Microsoft.EngagementFabric/Accounts"),
					Restrictions: []interface{}{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("P1"),
					LocationInfo: []*armengagementfabric.SKULocationInfoItem{
						{
							Location: to.Ptr("Central US"),
						},
						{
							Location: to.Ptr("North Europe"),
						},
						{
							Location: to.Ptr("West Europe"),
						}},
					Locations: []*string{
						to.Ptr("Central US"),
						to.Ptr("North Europe"),
						to.Ptr("West Europe")},
					ResourceType: to.Ptr("Microsoft.EngagementFabric/Accounts"),
					Restrictions: []interface{}{},
					Tier:         to.Ptr("Premium"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SKUDescriptionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SKUDescriptionList)
			t.Fatalf("Mock response is not equal to example response for example specification/engagementfabric/resource-manager/Microsoft.EngagementFabric/preview/2018-09-01/examples/SKUsListExample.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
