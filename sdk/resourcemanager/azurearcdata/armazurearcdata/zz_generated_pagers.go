//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurearcdata

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// DataControllersClientListInGroupPager provides operations for iterating over paged responses.
type DataControllersClientListInGroupPager struct {
	client    *DataControllersClient
	current   DataControllersClientListInGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DataControllersClientListInGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DataControllersClientListInGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PageOfDataControllerResource.NextLink == nil || len(*p.current.PageOfDataControllerResource.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DataControllersClientListInGroupPager) NextPage(ctx context.Context) (DataControllersClientListInGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DataControllersClientListInGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DataControllersClientListInGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DataControllersClientListInGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DataControllersClientListInGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listInGroupHandleResponse(resp)
	if err != nil {
		return DataControllersClientListInGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DataControllersClientListInSubscriptionPager provides operations for iterating over paged responses.
type DataControllersClientListInSubscriptionPager struct {
	client    *DataControllersClient
	current   DataControllersClientListInSubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DataControllersClientListInSubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DataControllersClientListInSubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PageOfDataControllerResource.NextLink == nil || len(*p.current.PageOfDataControllerResource.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DataControllersClientListInSubscriptionPager) NextPage(ctx context.Context) (DataControllersClientListInSubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DataControllersClientListInSubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DataControllersClientListInSubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DataControllersClientListInSubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DataControllersClientListInSubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listInSubscriptionHandleResponse(resp)
	if err != nil {
		return DataControllersClientListInSubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SQLManagedInstancesClientListByResourceGroupPager provides operations for iterating over paged responses.
type SQLManagedInstancesClientListByResourceGroupPager struct {
	client    *SQLManagedInstancesClient
	current   SQLManagedInstancesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SQLManagedInstancesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SQLManagedInstancesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SQLManagedInstanceListResult.NextLink == nil || len(*p.current.SQLManagedInstanceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SQLManagedInstancesClientListByResourceGroupPager) NextPage(ctx context.Context) (SQLManagedInstancesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SQLManagedInstancesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SQLManagedInstancesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SQLManagedInstancesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SQLManagedInstancesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return SQLManagedInstancesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SQLManagedInstancesClientListPager provides operations for iterating over paged responses.
type SQLManagedInstancesClientListPager struct {
	client    *SQLManagedInstancesClient
	current   SQLManagedInstancesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SQLManagedInstancesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SQLManagedInstancesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SQLManagedInstanceListResult.NextLink == nil || len(*p.current.SQLManagedInstanceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SQLManagedInstancesClientListPager) NextPage(ctx context.Context) (SQLManagedInstancesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SQLManagedInstancesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SQLManagedInstancesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SQLManagedInstancesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SQLManagedInstancesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SQLManagedInstancesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SQLServerInstancesClientListByResourceGroupPager provides operations for iterating over paged responses.
type SQLServerInstancesClientListByResourceGroupPager struct {
	client    *SQLServerInstancesClient
	current   SQLServerInstancesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SQLServerInstancesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SQLServerInstancesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SQLServerInstanceListResult.NextLink == nil || len(*p.current.SQLServerInstanceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SQLServerInstancesClientListByResourceGroupPager) NextPage(ctx context.Context) (SQLServerInstancesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SQLServerInstancesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SQLServerInstancesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SQLServerInstancesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SQLServerInstancesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return SQLServerInstancesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SQLServerInstancesClientListPager provides operations for iterating over paged responses.
type SQLServerInstancesClientListPager struct {
	client    *SQLServerInstancesClient
	current   SQLServerInstancesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SQLServerInstancesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SQLServerInstancesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SQLServerInstanceListResult.NextLink == nil || len(*p.current.SQLServerInstanceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SQLServerInstancesClientListPager) NextPage(ctx context.Context) (SQLServerInstancesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SQLServerInstancesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SQLServerInstancesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SQLServerInstancesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SQLServerInstancesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SQLServerInstancesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
