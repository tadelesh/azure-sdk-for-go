//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurearcdata_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurearcdata/armazurearcdata"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all of the available Azure Data Services on Azure Arc API operations."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListOperation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurearcdata.OperationListResult{
			Value: []*armazurearcdata.Operation{
				{
					Name: to.Ptr("Microsoft.AzureArcData/Locations/OperationStatuses/read"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("read OperationStatuses"),
						Operation:   to.Ptr("read_OperationStatuses"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("Locations/OperationStatuses"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/Locations/OperationStatuses/write"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("write OperationStatuses"),
						Operation:   to.Ptr("write_OperationStatuses"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("Locations/OperationStatuses"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/dataControllers/read"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("read dataControllers"),
						Operation:   to.Ptr("DataControllers_ListInSubscription"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("dataControllers"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/dataControllers/read"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("read dataControllers"),
						Operation:   to.Ptr("DataControllers_ListInGroup"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("dataControllers"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/dataControllers/read"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Retrieves a dataController resource"),
						Operation:   to.Ptr("DataControllers_GetDataController"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("dataControllers"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/dataControllers/write"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Creates or replaces a dataController resource"),
						Operation:   to.Ptr("DataControllers_PutDataController"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("dataControllers"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/dataControllers/delete"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Deletes a dataController resource"),
						Operation:   to.Ptr("DataControllers_DeleteDataController"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("dataControllers"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/dataControllers/write"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Updates a dataController resource"),
						Operation:   to.Ptr("DataControllers_PatchDataController"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("dataControllers"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/sqlManagedInstances/read"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("read sqlManagedInstances"),
						Operation:   to.Ptr("SqlManagedInstances_List"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("sqlManagedInstances"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/sqlManagedInstances/read"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Gets all sqlManagedInstances in a resource group."),
						Operation:   to.Ptr("SqlManagedInstances_ListByResourceGroup"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("sqlManagedInstances"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/sqlManagedInstances/read"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Retrieves a SQL Managed Instance resource"),
						Operation:   to.Ptr("SqlManagedInstances_Get"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("sqlManagedInstances"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/sqlManagedInstances/write"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Creates or replaces a SQL Managed Instance resource"),
						Operation:   to.Ptr("SqlManagedInstances_Create"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("sqlManagedInstances"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/sqlManagedInstances/delete"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Deletes a SQL Managed Instance resource"),
						Operation:   to.Ptr("SqlManagedInstances_Delete"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("sqlManagedInstances"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/sqlManagedInstances/write"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Updates a SQL Managed Instance resource"),
						Operation:   to.Ptr("SqlManagedInstances_Update"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("sqlManagedInstances"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/sqlServerInstances/read"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("read sqlServerInstances"),
						Operation:   to.Ptr("SqlServerInstances_List"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("sqlServerInstances"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/sqlServerInstances/read"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Gets all sqlServerInstances in a resource group."),
						Operation:   to.Ptr("SqlServerInstances_ListByResourceGroup"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("sqlServerInstances"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/sqlServerInstances/read"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Retrieves a SQL Server Instance resource"),
						Operation:   to.Ptr("SqlServerInstances_Get"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("sqlServerInstances"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/sqlServerInstances/write"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Creates or replaces a SQL Server Instance resource"),
						Operation:   to.Ptr("SqlServerInstances_Create"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("sqlServerInstances"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/sqlServerInstances/delete"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Deletes a SQL Server Instance resource"),
						Operation:   to.Ptr("SqlServerInstances_Delete"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("sqlServerInstances"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/sqlServerInstances/write"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Updates a SQL Server Instance resource"),
						Operation:   to.Ptr("SqlServerInstances_Update"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("sqlServerInstances"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/register/action"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Register the subscription for Microsoft.AzureArcData"),
						Operation:   to.Ptr("Register the Microsoft.AzureArcData"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("Microsoft.AzureArcData"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/unregister/action"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("Unregister the subscription for Microsoft.AzureArcData"),
						Operation:   to.Ptr("Unregister the Microsoft.AzureArcData"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("Microsoft.AzureArcData"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureArcData/Operations/read"),
					Display: &armazurearcdata.OperationDisplay{
						Description: to.Ptr("read Operations"),
						Operation:   to.Ptr("read_Operations"),
						Provider:    to.Ptr("Microsoft.AzureArcData"),
						Resource:    to.Ptr("Operations"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLManagedInstances_List(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListSubscriptionSqlManagedInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all SQL Instance in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewSQLManagedInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListSubscriptionSqlManagedInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurearcdata.SQLManagedInstanceListResult{
			Value: []*armazurearcdata.SQLManagedInstance{
				{
					Name: to.Ptr("sqlManagedInstances1"),
					Type: to.Ptr("Microsoft.AzureArcData/sqlManagedInstances"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/SqlManagedInstances/sqlManagedInstance1"),
					SystemData: &armazurearcdata.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
					},
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					ExtendedLocation: &armazurearcdata.ExtendedLocation{
						Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
						Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
					},
					Properties: &armazurearcdata.SQLManagedInstanceProperties{
						Admin: to.Ptr("Admin user"),
						BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
							Username: to.Ptr("username"),
						},
						ClusterID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
						EndTime:     to.Ptr("Instance end time"),
						ExtensionID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
						K8SRaw: &armazurearcdata.SQLManagedInstanceK8SRaw{
							AdditionalProperties: map[string]interface{}{
								"additionalProperty": float64(1234),
							},
							Spec: &armazurearcdata.SQLManagedInstanceK8SSpec{
								Replicas: to.Ptr[int32](1),
								Scheduling: &armazurearcdata.K8SScheduling{
									Default: &armazurearcdata.K8SSchedulingOptions{
										Resources: &armazurearcdata.K8SResourceRequirements{
											Limits: map[string]*string{
												"additionalProperty": to.Ptr("additionalValue"),
												"cpu":                to.Ptr("1"),
												"memory":             to.Ptr("8Gi"),
											},
											Requests: map[string]*string{
												"additionalProperty": to.Ptr("additionalValue"),
												"cpu":                to.Ptr("1"),
												"memory":             to.Ptr("8Gi"),
											},
										},
									},
								},
							},
						},
						LicenseType: to.Ptr(armazurearcdata.ArcSQLManagedInstanceLicenseTypeLicenseIncluded),
						StartTime:   to.Ptr("Instance start time"),
					},
					SKU: &armazurearcdata.SQLManagedInstanceSKU{
						Name: to.Ptr(armazurearcdata.SQLManagedInstanceSKUNameVCore),
						Dev:  to.Ptr(true),
						Tier: to.Ptr(armazurearcdata.SQLManagedInstanceSKUTierGeneralPurpose),
					},
				},
				{
					Name: to.Ptr("sqlManagedInstances2"),
					Type: to.Ptr("Microsoft.AzureArcData/sqlManagedInstances"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/SqlManagedInstances/sqlManagedInstance2"),
					SystemData: &armazurearcdata.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
					},
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					ExtendedLocation: &armazurearcdata.ExtendedLocation{
						Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
						Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
					},
					Properties: &armazurearcdata.SQLManagedInstanceProperties{
						Admin: to.Ptr("Admin user"),
						BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
							Username: to.Ptr("username"),
						},
						ClusterID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
						EndTime:     to.Ptr("Instance end time"),
						ExtensionID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
						K8SRaw: &armazurearcdata.SQLManagedInstanceK8SRaw{
							AdditionalProperties: map[string]interface{}{
								"additionalProperty": float64(1234),
							},
							Spec: &armazurearcdata.SQLManagedInstanceK8SSpec{
								Replicas: to.Ptr[int32](1),
								Scheduling: &armazurearcdata.K8SScheduling{
									Default: &armazurearcdata.K8SSchedulingOptions{
										Resources: &armazurearcdata.K8SResourceRequirements{
											Limits: map[string]*string{
												"additionalProperty": to.Ptr("additionalValue"),
												"cpu":                to.Ptr("1"),
												"memory":             to.Ptr("8Gi"),
											},
											Requests: map[string]*string{
												"additionalProperty": to.Ptr("additionalValue"),
												"cpu":                to.Ptr("1"),
												"memory":             to.Ptr("8Gi"),
											},
										},
									},
								},
							},
						},
						LicenseType: to.Ptr(armazurearcdata.ArcSQLManagedInstanceLicenseTypeLicenseIncluded),
						StartTime:   to.Ptr("Instance start time"),
					},
					SKU: &armazurearcdata.SQLManagedInstanceSKU{
						Name: to.Ptr(armazurearcdata.SQLManagedInstanceSKUNameVCore),
						Dev:  to.Ptr(true),
						Tier: to.Ptr(armazurearcdata.SQLManagedInstanceSKUTierGeneralPurpose),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLManagedInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLManagedInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListSubscriptionSqlManagedInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLManagedInstances_ListByResourceGroup(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListByResourceGroupSqlManagedInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all SQL Instance in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewSQLManagedInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroup("testrg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListByResourceGroupSqlManagedInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurearcdata.SQLManagedInstanceListResult{
			Value: []*armazurearcdata.SQLManagedInstance{
				{
					Name: to.Ptr("sqlManagedInstances1"),
					Type: to.Ptr("Microsoft.AzureArcData/sqlManagedInstances"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/sqlManagedInstances/sqlManagedInstance1"),
					SystemData: &armazurearcdata.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
					},
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					ExtendedLocation: &armazurearcdata.ExtendedLocation{
						Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
						Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
					},
					Properties: &armazurearcdata.SQLManagedInstanceProperties{
						Admin: to.Ptr("Admin user"),
						BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
							Username: to.Ptr("username"),
						},
						EndTime: to.Ptr("Instance end time"),
						K8SRaw: &armazurearcdata.SQLManagedInstanceK8SRaw{
							AdditionalProperties: map[string]interface{}{
								"additionalProperty": float64(1234),
							},
							Spec: &armazurearcdata.SQLManagedInstanceK8SSpec{
								Replicas: to.Ptr[int32](1),
								Scheduling: &armazurearcdata.K8SScheduling{
									Default: &armazurearcdata.K8SSchedulingOptions{
										Resources: &armazurearcdata.K8SResourceRequirements{
											Limits: map[string]*string{
												"additionalProperty": to.Ptr("additionalValue"),
												"cpu":                to.Ptr("1"),
												"memory":             to.Ptr("8Gi"),
											},
											Requests: map[string]*string{
												"additionalProperty": to.Ptr("additionalValue"),
												"cpu":                to.Ptr("1"),
												"memory":             to.Ptr("8Gi"),
											},
										},
									},
								},
							},
						},
						LicenseType: to.Ptr(armazurearcdata.ArcSQLManagedInstanceLicenseTypeLicenseIncluded),
						StartTime:   to.Ptr("Instance start time"),
					},
					SKU: &armazurearcdata.SQLManagedInstanceSKU{
						Name: to.Ptr(armazurearcdata.SQLManagedInstanceSKUNameVCore),
						Dev:  to.Ptr(true),
						Tier: to.Ptr(armazurearcdata.SQLManagedInstanceSKUTierGeneralPurpose),
					},
				},
				{
					Name: to.Ptr("sqlManagedInstances2"),
					Type: to.Ptr("Microsoft.AzureArcData/sqlManagedInstances"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/sqlManagedInstances/sqlManagedInstance2"),
					SystemData: &armazurearcdata.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
					},
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					ExtendedLocation: &armazurearcdata.ExtendedLocation{
						Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
						Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
					},
					Properties: &armazurearcdata.SQLManagedInstanceProperties{
						Admin: to.Ptr("Admin user"),
						BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
							Username: to.Ptr("username"),
						},
						ClusterID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
						EndTime:     to.Ptr("Instance end time"),
						ExtensionID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
						K8SRaw: &armazurearcdata.SQLManagedInstanceK8SRaw{
							AdditionalProperties: map[string]interface{}{
								"additionalProperty": float64(1234),
							},
							Spec: &armazurearcdata.SQLManagedInstanceK8SSpec{
								Replicas: to.Ptr[int32](1),
								Scheduling: &armazurearcdata.K8SScheduling{
									Default: &armazurearcdata.K8SSchedulingOptions{
										Resources: &armazurearcdata.K8SResourceRequirements{
											Limits: map[string]*string{
												"additionalProperty": to.Ptr("additionalValue"),
												"cpu":                to.Ptr("1"),
												"memory":             to.Ptr("8Gi"),
											},
											Requests: map[string]*string{
												"additionalProperty": to.Ptr("additionalValue"),
												"cpu":                to.Ptr("1"),
												"memory":             to.Ptr("8Gi"),
											},
										},
									},
								},
							},
						},
						LicenseType: to.Ptr(armazurearcdata.ArcSQLManagedInstanceLicenseTypeLicenseIncluded),
						StartTime:   to.Ptr("Instance start time"),
					},
					SKU: &armazurearcdata.SQLManagedInstanceSKU{
						Name: to.Ptr(armazurearcdata.SQLManagedInstanceSKUNameVCore),
						Dev:  to.Ptr(true),
						Tier: to.Ptr(armazurearcdata.SQLManagedInstanceSKUTierGeneralPurpose),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLManagedInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLManagedInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListByResourceGroupSqlManagedInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLManagedInstances_Get(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/GetSqlManagedInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates a SQL Instance tags."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewSQLManagedInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"testsqlManagedInstance",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/GetSqlManagedInstance.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurearcdata.SQLManagedInstance{
			Name: to.Ptr("testsqlManagedInstance"),
			Type: to.Ptr("Microsoft.AzureArcData/sqlManagedInstance"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/sqlManagedInstances/testsqlManagedInstance"),
			SystemData: &armazurearcdata.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
			},
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			ExtendedLocation: &armazurearcdata.ExtendedLocation{
				Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
				Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
			},
			Properties: &armazurearcdata.SQLManagedInstanceProperties{
				Admin: to.Ptr("Admin user"),
				BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
					Username: to.Ptr("username"),
				},
				ClusterID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
				EndTime:     to.Ptr("Instance end time"),
				ExtensionID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
				K8SRaw: &armazurearcdata.SQLManagedInstanceK8SRaw{
					AdditionalProperties: map[string]interface{}{
						"additionalProperty": float64(1234),
					},
					Spec: &armazurearcdata.SQLManagedInstanceK8SSpec{
						Replicas: to.Ptr[int32](1),
						Scheduling: &armazurearcdata.K8SScheduling{
							Default: &armazurearcdata.K8SSchedulingOptions{
								Resources: &armazurearcdata.K8SResourceRequirements{
									Limits: map[string]*string{
										"additionalProperty": to.Ptr("additionalValue"),
										"cpu":                to.Ptr("1"),
										"memory":             to.Ptr("8Gi"),
									},
									Requests: map[string]*string{
										"additionalProperty": to.Ptr("additionalValue"),
										"cpu":                to.Ptr("1"),
										"memory":             to.Ptr("8Gi"),
									},
								},
							},
						},
					},
				},
				LicenseType: to.Ptr(armazurearcdata.ArcSQLManagedInstanceLicenseTypeLicenseIncluded),
				StartTime:   to.Ptr("Instance start time"),
			},
			SKU: &armazurearcdata.SQLManagedInstanceSKU{
				Name: to.Ptr(armazurearcdata.SQLManagedInstanceSKUNameVCore),
				Dev:  to.Ptr(true),
				Tier: to.Ptr(armazurearcdata.SQLManagedInstanceSKUTierGeneralPurpose),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLManagedInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLManagedInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/GetSqlManagedInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLManagedInstances_Create(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/CreateOrUpdateSqlManagedInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a SQL Managed Instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewSQLManagedInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"testrg",
		"testsqlManagedInstance",
		armazurearcdata.SQLManagedInstance{
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			ExtendedLocation: &armazurearcdata.ExtendedLocation{
				Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
				Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
			},
			Properties: &armazurearcdata.SQLManagedInstanceProperties{
				Admin: to.Ptr("Admin user"),
				BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
					Password: to.Ptr("********"),
					Username: to.Ptr("username"),
				},
				ClusterID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
				EndTime:     to.Ptr("Instance end time"),
				ExtensionID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
				K8SRaw: &armazurearcdata.SQLManagedInstanceK8SRaw{
					AdditionalProperties: map[string]interface{}{
						"additionalProperty": float64(1234),
					},
					Spec: &armazurearcdata.SQLManagedInstanceK8SSpec{
						Replicas: to.Ptr[int32](1),
						Scheduling: &armazurearcdata.K8SScheduling{
							Default: &armazurearcdata.K8SSchedulingOptions{
								Resources: &armazurearcdata.K8SResourceRequirements{
									Limits: map[string]*string{
										"additionalProperty": to.Ptr("additionalValue"),
										"cpu":                to.Ptr("1"),
										"memory":             to.Ptr("8Gi"),
									},
									Requests: map[string]*string{
										"additionalProperty": to.Ptr("additionalValue"),
										"cpu":                to.Ptr("1"),
										"memory":             to.Ptr("8Gi"),
									},
								},
							},
						},
					},
				},
				LicenseType: to.Ptr(armazurearcdata.ArcSQLManagedInstanceLicenseTypeLicenseIncluded),
				StartTime:   to.Ptr("Instance start time"),
			},
			SKU: &armazurearcdata.SQLManagedInstanceSKU{
				Name: to.Ptr(armazurearcdata.SQLManagedInstanceSKUNameVCore),
				Dev:  to.Ptr(true),
				Tier: to.Ptr(armazurearcdata.SQLManagedInstanceSKUTierGeneralPurpose),
			},
		},
		&armazurearcdata.SQLManagedInstancesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/CreateOrUpdateSqlManagedInstance.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/CreateOrUpdateSqlManagedInstance.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurearcdata.SQLManagedInstance{
			Name: to.Ptr("testsqlManagedInstance"),
			Type: to.Ptr("Microsoft.AzureArcData/sqlManagedInstances"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/sqlManagedInstances/testsqlManagedInstance"),
			SystemData: &armazurearcdata.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
			},
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			ExtendedLocation: &armazurearcdata.ExtendedLocation{
				Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
				Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
			},
			Properties: &armazurearcdata.SQLManagedInstanceProperties{
				Admin: to.Ptr("Admin user"),
				BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
					Username: to.Ptr("username"),
				},
				ClusterID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
				EndTime:     to.Ptr("Instance end time"),
				ExtensionID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
				K8SRaw: &armazurearcdata.SQLManagedInstanceK8SRaw{
					AdditionalProperties: map[string]interface{}{
						"additionalProperty": float64(1234),
					},
					Spec: &armazurearcdata.SQLManagedInstanceK8SSpec{
						Replicas: to.Ptr[int32](1),
						Scheduling: &armazurearcdata.K8SScheduling{
							Default: &armazurearcdata.K8SSchedulingOptions{
								Resources: &armazurearcdata.K8SResourceRequirements{
									Limits: map[string]*string{
										"additionalProperty": to.Ptr("additionalValue"),
										"cpu":                to.Ptr("1"),
										"memory":             to.Ptr("8Gi"),
									},
									Requests: map[string]*string{
										"additionalProperty": to.Ptr("additionalValue"),
										"cpu":                to.Ptr("1"),
										"memory":             to.Ptr("8Gi"),
									},
								},
							},
						},
					},
				},
				LicenseType: to.Ptr(armazurearcdata.ArcSQLManagedInstanceLicenseTypeLicenseIncluded),
				StartTime:   to.Ptr("Instance start time"),
			},
			SKU: &armazurearcdata.SQLManagedInstanceSKU{
				Name: to.Ptr(armazurearcdata.SQLManagedInstanceSKUNameVCore),
				Dev:  to.Ptr(true),
				Tier: to.Ptr(armazurearcdata.SQLManagedInstanceSKUTierGeneralPurpose),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLManagedInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLManagedInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/CreateOrUpdateSqlManagedInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLManagedInstances_Delete(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/DeleteSqlManagedInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a SQL Instance."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewSQLManagedInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"testsqlManagedInstance",
		&armazurearcdata.SQLManagedInstancesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/DeleteSqlManagedInstance.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/DeleteSqlManagedInstance.json: %v", err)
	}
}

func TestSQLManagedInstances_Update(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/UpdateSqlManagedInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates a sql Instance tags."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewSQLManagedInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Update(ctx,
		"testrg",
		"testsqlManagedInstance",
		armazurearcdata.SQLManagedInstanceUpdate{
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/UpdateSqlManagedInstance.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurearcdata.SQLManagedInstance{
			Name: to.Ptr("testsqlManagedInstance"),
			Type: to.Ptr("Microsoft.AzureArcData/sqlManagedInstances"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/sqlManagedInstances/testsqlManagedInstance"),
			SystemData: &armazurearcdata.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
			},
			Location: to.Ptr("northeurope"),
			ExtendedLocation: &armazurearcdata.ExtendedLocation{
				Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
				Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
			},
			Properties: &armazurearcdata.SQLManagedInstanceProperties{
				Admin: to.Ptr("Admin user"),
				BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
					Username: to.Ptr("username"),
				},
				ClusterID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
				EndTime:     to.Ptr("Instance end time"),
				ExtensionID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
				K8SRaw: &armazurearcdata.SQLManagedInstanceK8SRaw{
					AdditionalProperties: map[string]interface{}{
						"additionalProperty": float64(1234),
					},
					Spec: &armazurearcdata.SQLManagedInstanceK8SSpec{
						Replicas: to.Ptr[int32](1),
						Scheduling: &armazurearcdata.K8SScheduling{
							Default: &armazurearcdata.K8SSchedulingOptions{
								Resources: &armazurearcdata.K8SResourceRequirements{
									Limits: map[string]*string{
										"additionalProperty": to.Ptr("additionalValue"),
										"cpu":                to.Ptr("1"),
										"memory":             to.Ptr("8Gi"),
									},
									Requests: map[string]*string{
										"additionalProperty": to.Ptr("additionalValue"),
										"cpu":                to.Ptr("1"),
										"memory":             to.Ptr("8Gi"),
									},
								},
							},
						},
					},
				},
				LicenseType: to.Ptr(armazurearcdata.ArcSQLManagedInstanceLicenseTypeLicenseIncluded),
				StartTime:   to.Ptr("Instance start time"),
			},
			SKU: &armazurearcdata.SQLManagedInstanceSKU{
				Name: to.Ptr(armazurearcdata.SQLManagedInstanceSKUNameVCore),
				Dev:  to.Ptr(true),
				Tier: to.Ptr(armazurearcdata.SQLManagedInstanceSKUTierGeneralPurpose),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLManagedInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLManagedInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/UpdateSqlManagedInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLServerInstances_List(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListSubscriptionSqlServerInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all SQL Server Instance in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewSQLServerInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListSubscriptionSqlServerInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurearcdata.SQLServerInstanceListResult{
			Value: []*armazurearcdata.SQLServerInstance{
				{
					Name: to.Ptr("sqlServerInstance1"),
					Type: to.Ptr("Microsoft.AzureArcData/SqlServerInstances"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/SqlServerInstances/sqlServerInstance1"),
					SystemData: &armazurearcdata.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
					},
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armazurearcdata.SQLServerInstanceProperties{
						AzureDefenderStatus:            to.Ptr(armazurearcdata.DefenderStatusProtected),
						AzureDefenderStatusLastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						Collation:                      to.Ptr("collation"),
						ContainerResourceID:            to.Ptr("Arc Machine Name"),
						CreateTime:                     to.Ptr("01/01/2020 01:01:01"),
						CurrentVersion:                 to.Ptr("2008 R2"),
						Edition:                        to.Ptr(armazurearcdata.EditionTypeDeveloper),
						InstanceName:                   to.Ptr("name of instance"),
						LicenseType:                    to.Ptr(armazurearcdata.ArcSQLServerLicenseTypeFree),
						PatchLevel:                     to.Ptr("patchlevel"),
						ProductID:                      to.Ptr("sql id"),
						Status:                         to.Ptr(armazurearcdata.ConnectionStatusConnected),
						TCPDynamicPorts:                to.Ptr("1433"),
						TCPStaticPorts:                 to.Ptr("1433"),
						VCore:                          to.Ptr("4"),
						Version:                        to.Ptr(armazurearcdata.SQLVersionSQLServer2017),
					},
				},
				{
					Name: to.Ptr("sqlServerInstance2"),
					Type: to.Ptr("Microsoft.AzureArcData/SqlServerInstances"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/SqlServerInstances/sqlServerInstance2"),
					SystemData: &armazurearcdata.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
					},
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armazurearcdata.SQLServerInstanceProperties{
						AzureDefenderStatus:            to.Ptr(armazurearcdata.DefenderStatusProtected),
						AzureDefenderStatusLastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						Collation:                      to.Ptr("collation"),
						ContainerResourceID:            to.Ptr("Arc Machine Name"),
						CreateTime:                     to.Ptr("01/01/2020 01:01:01"),
						CurrentVersion:                 to.Ptr("2008 R2"),
						Edition:                        to.Ptr(armazurearcdata.EditionTypeDeveloper),
						InstanceName:                   to.Ptr("name of instance"),
						LicenseType:                    to.Ptr(armazurearcdata.ArcSQLServerLicenseTypeFree),
						PatchLevel:                     to.Ptr("patchlevel"),
						ProductID:                      to.Ptr("sql id"),
						Status:                         to.Ptr(armazurearcdata.ConnectionStatusConnected),
						TCPDynamicPorts:                to.Ptr("1433"),
						TCPStaticPorts:                 to.Ptr("1433"),
						VCore:                          to.Ptr("4"),
						Version:                        to.Ptr(armazurearcdata.SQLVersionSQLServer2017),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLServerInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLServerInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListSubscriptionSqlServerInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLServerInstances_ListByResourceGroup(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListByResourceGroupSqlServerInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all SQL Server Instance in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewSQLServerInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroup("testrg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListByResourceGroupSqlServerInstance.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurearcdata.SQLServerInstanceListResult{
			Value: []*armazurearcdata.SQLServerInstance{
				{
					Name: to.Ptr("sqlServerInstance1"),
					Type: to.Ptr("Microsoft.AzureArcData/SqlServerInstances"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/SqlServerInstances/sqlServerInstance1"),
					SystemData: &armazurearcdata.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
					},
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armazurearcdata.SQLServerInstanceProperties{
						AzureDefenderStatus:            to.Ptr(armazurearcdata.DefenderStatusProtected),
						AzureDefenderStatusLastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						Collation:                      to.Ptr("collation"),
						ContainerResourceID:            to.Ptr("Arc Machine Name"),
						CreateTime:                     to.Ptr("01/01/2020 01:01:01"),
						CurrentVersion:                 to.Ptr("2008 R2"),
						Edition:                        to.Ptr(armazurearcdata.EditionTypeDeveloper),
						InstanceName:                   to.Ptr("name of instance"),
						LicenseType:                    to.Ptr(armazurearcdata.ArcSQLServerLicenseTypeFree),
						PatchLevel:                     to.Ptr("patchlevel"),
						ProductID:                      to.Ptr("sql id"),
						Status:                         to.Ptr(armazurearcdata.ConnectionStatusConnected),
						TCPDynamicPorts:                to.Ptr("1433"),
						TCPStaticPorts:                 to.Ptr("1433"),
						VCore:                          to.Ptr("4"),
						Version:                        to.Ptr(armazurearcdata.SQLVersionSQLServer2017),
					},
				},
				{
					Name: to.Ptr("sqlServerInstance2"),
					Type: to.Ptr("Microsoft.AzureArcData/SqlServerInstances"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/SqlServerInstances/sqlServerInstance2"),
					SystemData: &armazurearcdata.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
					},
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armazurearcdata.SQLServerInstanceProperties{
						AzureDefenderStatus:            to.Ptr(armazurearcdata.DefenderStatusProtected),
						AzureDefenderStatusLastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						Collation:                      to.Ptr("collation"),
						ContainerResourceID:            to.Ptr("Arc Machine Name"),
						CreateTime:                     to.Ptr("01/01/2020 01:01:01"),
						CurrentVersion:                 to.Ptr("2008 R2"),
						Edition:                        to.Ptr(armazurearcdata.EditionTypeDeveloper),
						InstanceName:                   to.Ptr("name of instance"),
						LicenseType:                    to.Ptr(armazurearcdata.ArcSQLServerLicenseTypeFree),
						PatchLevel:                     to.Ptr("patchlevel"),
						ProductID:                      to.Ptr("sql id"),
						Status:                         to.Ptr(armazurearcdata.ConnectionStatusConnected),
						TCPDynamicPorts:                to.Ptr("1433"),
						TCPStaticPorts:                 to.Ptr("1433"),
						VCore:                          to.Ptr("4"),
						Version:                        to.Ptr(armazurearcdata.SQLVersionSQLServer2017),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLServerInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLServerInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListByResourceGroupSqlServerInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLServerInstances_Get(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/GetSqlServerInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates a SQL Server Instance tags."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewSQLServerInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"testsqlServerInstance",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/GetSqlServerInstance.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurearcdata.SQLServerInstance{
			Name: to.Ptr("testsqlServerInstance"),
			Type: to.Ptr("Microsoft.AzureArcData/SqlServerInstances"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/SqlServerInstances/testsqlServerInstance"),
			SystemData: &armazurearcdata.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
			},
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			Properties: &armazurearcdata.SQLServerInstanceProperties{
				AzureDefenderStatus:            to.Ptr(armazurearcdata.DefenderStatusProtected),
				AzureDefenderStatusLastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				Collation:                      to.Ptr("collation"),
				ContainerResourceID:            to.Ptr("Arc Machine Name"),
				CreateTime:                     to.Ptr("01/01/2020 01:01:01"),
				CurrentVersion:                 to.Ptr("2008 R2"),
				Edition:                        to.Ptr(armazurearcdata.EditionTypeDeveloper),
				InstanceName:                   to.Ptr("name of instance"),
				LicenseType:                    to.Ptr(armazurearcdata.ArcSQLServerLicenseTypeFree),
				PatchLevel:                     to.Ptr("patchlevel"),
				ProductID:                      to.Ptr("sql id"),
				Status:                         to.Ptr(armazurearcdata.ConnectionStatusConnected),
				TCPDynamicPorts:                to.Ptr("1433"),
				TCPStaticPorts:                 to.Ptr("1433"),
				VCore:                          to.Ptr("4"),
				Version:                        to.Ptr(armazurearcdata.SQLVersionSQLServer2017),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLServerInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLServerInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/GetSqlServerInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLServerInstances_Create(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/CreateOrUpdateSqlServerInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates a SQL Server Instance tags."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewSQLServerInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"testrg",
		"testsqlServerInstance",
		armazurearcdata.SQLServerInstance{
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			Properties: &armazurearcdata.SQLServerInstanceProperties{
				AzureDefenderStatus:            to.Ptr(armazurearcdata.DefenderStatusProtected),
				AzureDefenderStatusLastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				Collation:                      to.Ptr("collation"),
				ContainerResourceID:            to.Ptr("Arc Machine Name"),
				CurrentVersion:                 to.Ptr("2008 R2"),
				Edition:                        to.Ptr(armazurearcdata.EditionTypeDeveloper),
				InstanceName:                   to.Ptr("name of instance"),
				LicenseType:                    to.Ptr(armazurearcdata.ArcSQLServerLicenseTypeFree),
				PatchLevel:                     to.Ptr("patchlevel"),
				ProductID:                      to.Ptr("sql id"),
				Status:                         to.Ptr(armazurearcdata.ConnectionStatusConnected),
				TCPDynamicPorts:                to.Ptr("1433"),
				TCPStaticPorts:                 to.Ptr("1433"),
				VCore:                          to.Ptr("4"),
				Version:                        to.Ptr(armazurearcdata.SQLVersionSQLServer2017),
			},
		},
		&armazurearcdata.SQLServerInstancesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/CreateOrUpdateSqlServerInstance.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/CreateOrUpdateSqlServerInstance.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurearcdata.SQLServerInstance{
			Name: to.Ptr("testsqlServerInstance"),
			Type: to.Ptr("Microsoft.AzureArcData/SqlServerInstances"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/SqlServerInstances/testsqlServerInstance"),
			SystemData: &armazurearcdata.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
			},
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			Properties: &armazurearcdata.SQLServerInstanceProperties{
				AzureDefenderStatus:            to.Ptr(armazurearcdata.DefenderStatusProtected),
				AzureDefenderStatusLastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				Collation:                      to.Ptr("collation"),
				ContainerResourceID:            to.Ptr("Arc Machine Name"),
				CreateTime:                     to.Ptr("01/01/2020 01:01:01"),
				CurrentVersion:                 to.Ptr("2008 R2"),
				Edition:                        to.Ptr(armazurearcdata.EditionTypeDeveloper),
				InstanceName:                   to.Ptr("name of instance"),
				LicenseType:                    to.Ptr(armazurearcdata.ArcSQLServerLicenseTypeFree),
				PatchLevel:                     to.Ptr("patchlevel"),
				ProductID:                      to.Ptr("sql id"),
				Status:                         to.Ptr(armazurearcdata.ConnectionStatusConnected),
				TCPDynamicPorts:                to.Ptr("1433"),
				TCPStaticPorts:                 to.Ptr("1433"),
				VCore:                          to.Ptr("4"),
				Version:                        to.Ptr(armazurearcdata.SQLVersionSQLServer2017),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLServerInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLServerInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/CreateOrUpdateSqlServerInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLServerInstances_Delete(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/DeleteSqlServerInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a SQL Server Instance."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewSQLServerInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"testsqlServerInstance",
		&armazurearcdata.SQLServerInstancesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/DeleteSqlServerInstance.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/DeleteSqlServerInstance.json: %v", err)
	}
}

func TestSQLServerInstances_Update(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/UpdateSqlServerInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates a SQL Server Instance tags."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewSQLServerInstancesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Update(ctx,
		"testrg",
		"testsqlServerInstance",
		armazurearcdata.SQLServerInstanceUpdate{
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/UpdateSqlServerInstance.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurearcdata.SQLServerInstance{
			Name: to.Ptr("testsqlServerInstance"),
			Type: to.Ptr("Microsoft.AzureArcData/SqlServerInstances"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/SqlServerInstances/testsqlServerInstance"),
			SystemData: &armazurearcdata.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
			},
			Location: to.Ptr("northeurope"),
			Properties: &armazurearcdata.SQLServerInstanceProperties{
				AzureDefenderStatus:            to.Ptr(armazurearcdata.DefenderStatusProtected),
				AzureDefenderStatusLastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				Collation:                      to.Ptr("collation"),
				ContainerResourceID:            to.Ptr("Arc Machine Name"),
				CreateTime:                     to.Ptr("01/01/2020 01:01:01"),
				CurrentVersion:                 to.Ptr("2008 R2"),
				Edition:                        to.Ptr(armazurearcdata.EditionTypeDeveloper),
				InstanceName:                   to.Ptr("name of instance"),
				LicenseType:                    to.Ptr(armazurearcdata.ArcSQLServerLicenseTypeFree),
				PatchLevel:                     to.Ptr("patchlevel"),
				ProductID:                      to.Ptr("sql id"),
				Status:                         to.Ptr(armazurearcdata.ConnectionStatusConnected),
				TCPDynamicPorts:                to.Ptr("1433"),
				TCPStaticPorts:                 to.Ptr("1433"),
				VCore:                          to.Ptr("4"),
				Version:                        to.Ptr(armazurearcdata.SQLVersionSQLServer2017),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLServerInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLServerInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/UpdateSqlServerInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataControllers_ListInSubscription(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListSubscriptionDataController.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all dataControllers in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewDataControllersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListInSubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListSubscriptionDataController.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurearcdata.PageOfDataControllerResource{
			Value: []*armazurearcdata.DataControllerResource{
				{
					Name: to.Ptr("testdataController1"),
					Type: to.Ptr("Microsoft.AzureArcData/dataControllers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/dataControllers/testdataController1"),
					SystemData: &armazurearcdata.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
					},
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					ExtendedLocation: &armazurearcdata.ExtendedLocation{
						Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
						Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
					},
					Properties: &armazurearcdata.DataControllerProperties{
						BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
							Username: to.Ptr("username"),
						},
						ClusterID:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
						ExtensionID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
						Infrastructure: to.Ptr(armazurearcdata.InfrastructureOnpremises),
						LogAnalyticsWorkspaceConfig: &armazurearcdata.LogAnalyticsWorkspaceConfig{
							WorkspaceID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						},
						LogsDashboardCredential: &armazurearcdata.BasicLoginInformation{
							Username: to.Ptr("username"),
						},
						MetricsDashboardCredential: &armazurearcdata.BasicLoginInformation{
							Username: to.Ptr("username"),
						},
						OnPremiseProperty: &armazurearcdata.OnPremiseProperty{
							ID:                           to.Ptr("12345678-1234-1234-ab12-1a2b3c4d5e6f"),
							PublicSigningKey:             to.Ptr("publicOnPremSigningKey"),
							SigningCertificateThumbprint: to.Ptr("Unique thumbprint returned to customer to verify the certificate they uploaded"),
						},
						UploadServicePrincipal: &armazurearcdata.UploadServicePrincipal{
							Authority: to.Ptr("https://login.microsoftonline.com/"),
							ClientID:  to.Ptr("00000000-1111-2222-3333-444444444444"),
							TenantID:  to.Ptr("00000000-1111-2222-3333-444444444444"),
						},
						UploadWatermark: &armazurearcdata.UploadWatermark{
							Logs:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
							Metrics: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
							Usages:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						},
					},
				},
				{
					Name: to.Ptr("testdataController2"),
					Type: to.Ptr("Microsoft.AzureArcData/dataControllers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/dataControllers/testdataController2"),
					SystemData: &armazurearcdata.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
					},
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					ExtendedLocation: &armazurearcdata.ExtendedLocation{
						Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
						Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
					},
					Properties: &armazurearcdata.DataControllerProperties{
						BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
							Username: to.Ptr("username"),
						},
						ClusterID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
						ExtensionID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
						LogAnalyticsWorkspaceConfig: &armazurearcdata.LogAnalyticsWorkspaceConfig{
							WorkspaceID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						},
						LogsDashboardCredential: &armazurearcdata.BasicLoginInformation{
							Username: to.Ptr("username"),
						},
						MetricsDashboardCredential: &armazurearcdata.BasicLoginInformation{
							Username: to.Ptr("username"),
						},
						OnPremiseProperty: &armazurearcdata.OnPremiseProperty{
							ID:                           to.Ptr("12345678-1234-1234-ab12-1a2b3c4d5e6f"),
							PublicSigningKey:             to.Ptr("publicOnPremSigningKey"),
							SigningCertificateThumbprint: to.Ptr("Unique thumbprint returned to customer to verify the certificate they uploaded"),
						},
						UploadServicePrincipal: &armazurearcdata.UploadServicePrincipal{
							Authority: to.Ptr("https://login.microsoftonline.com/"),
							ClientID:  to.Ptr("00000000-1111-2222-3333-444444444444"),
							TenantID:  to.Ptr("00000000-1111-2222-3333-444444444444"),
						},
						UploadWatermark: &armazurearcdata.UploadWatermark{
							Logs:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
							Metrics: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
							Usages:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PageOfDataControllerResource) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PageOfDataControllerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListSubscriptionDataController.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataControllers_ListInGroup(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListByResourceGroupDataController.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all dataControllers in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewDataControllersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListInGroup("testrg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListByResourceGroupDataController.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurearcdata.PageOfDataControllerResource{
			Value: []*armazurearcdata.DataControllerResource{
				{
					Name: to.Ptr("testdataController1"),
					Type: to.Ptr("Microsoft.AzureArcData/dataControllers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/dataControllers/testdataController1"),
					SystemData: &armazurearcdata.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
					},
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					ExtendedLocation: &armazurearcdata.ExtendedLocation{
						Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
						Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
					},
					Properties: &armazurearcdata.DataControllerProperties{
						BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
							Username: to.Ptr("username"),
						},
						ClusterID:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
						ExtensionID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
						Infrastructure: to.Ptr(armazurearcdata.InfrastructureOnpremises),
						LogAnalyticsWorkspaceConfig: &armazurearcdata.LogAnalyticsWorkspaceConfig{
							WorkspaceID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						},
						LogsDashboardCredential: &armazurearcdata.BasicLoginInformation{
							Username: to.Ptr("username"),
						},
						MetricsDashboardCredential: &armazurearcdata.BasicLoginInformation{
							Username: to.Ptr("username"),
						},
						OnPremiseProperty: &armazurearcdata.OnPremiseProperty{
							ID:                           to.Ptr("12345678-1234-1234-ab12-1a2b3c4d5e6f"),
							PublicSigningKey:             to.Ptr("publicOnPremSigningKey"),
							SigningCertificateThumbprint: to.Ptr("Unique thumbprint returned to customer to verify the certificate they uploaded"),
						},
						UploadServicePrincipal: &armazurearcdata.UploadServicePrincipal{
							Authority: to.Ptr("https://login.microsoftonline.com/"),
							ClientID:  to.Ptr("00000000-1111-2222-3333-444444444444"),
							TenantID:  to.Ptr("00000000-1111-2222-3333-444444444444"),
						},
						UploadWatermark: &armazurearcdata.UploadWatermark{
							Logs:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
							Metrics: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
							Usages:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						},
					},
				},
				{
					Name: to.Ptr("testdataController2"),
					Type: to.Ptr("Microsoft.AzureArcData/dataControllers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/dataControllers/testdataController2"),
					SystemData: &armazurearcdata.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
					},
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					ExtendedLocation: &armazurearcdata.ExtendedLocation{
						Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
						Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
					},
					Properties: &armazurearcdata.DataControllerProperties{
						BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
							Username: to.Ptr("username"),
						},
						ClusterID:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
						ExtensionID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
						Infrastructure: to.Ptr(armazurearcdata.InfrastructureOnpremises),
						LogAnalyticsWorkspaceConfig: &armazurearcdata.LogAnalyticsWorkspaceConfig{
							WorkspaceID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						},
						OnPremiseProperty: &armazurearcdata.OnPremiseProperty{
							ID:                           to.Ptr("12345678-1234-1234-ab12-1a2b3c4d5e6f"),
							PublicSigningKey:             to.Ptr("publicOnPremSigningKey"),
							SigningCertificateThumbprint: to.Ptr("Unique thumbprint returned to customer to verify the certificate they uploaded"),
						},
						UploadServicePrincipal: &armazurearcdata.UploadServicePrincipal{
							Authority: to.Ptr("https://login.microsoftonline.com/"),
							ClientID:  to.Ptr("00000000-1111-2222-3333-444444444444"),
							TenantID:  to.Ptr("00000000-1111-2222-3333-444444444444"),
						},
						UploadWatermark: &armazurearcdata.UploadWatermark{
							Logs:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
							Metrics: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
							Usages:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PageOfDataControllerResource) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PageOfDataControllerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/ListByResourceGroupDataController.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataControllers_PutDataController(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/CreateOrUpdateDataController.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a Data Controller."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewDataControllersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginPutDataController(ctx,
		"testrg",
		"testdataController",
		armazurearcdata.DataControllerResource{
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			ExtendedLocation: &armazurearcdata.ExtendedLocation{
				Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
				Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
			},
			Properties: &armazurearcdata.DataControllerProperties{
				BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
					Password: to.Ptr("********"),
					Username: to.Ptr("username"),
				},
				ClusterID:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
				ExtensionID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
				Infrastructure: to.Ptr(armazurearcdata.InfrastructureOnpremises),
				LogAnalyticsWorkspaceConfig: &armazurearcdata.LogAnalyticsWorkspaceConfig{
					PrimaryKey:  to.Ptr("********"),
					WorkspaceID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
				LogsDashboardCredential: &armazurearcdata.BasicLoginInformation{
					Password: to.Ptr("********"),
					Username: to.Ptr("username"),
				},
				MetricsDashboardCredential: &armazurearcdata.BasicLoginInformation{
					Password: to.Ptr("********"),
					Username: to.Ptr("username"),
				},
				OnPremiseProperty: &armazurearcdata.OnPremiseProperty{
					ID:               to.Ptr("12345678-1234-1234-ab12-1a2b3c4d5e6f"),
					PublicSigningKey: to.Ptr("publicOnPremSigningKey"),
				},
				UploadServicePrincipal: &armazurearcdata.UploadServicePrincipal{
					Authority:    to.Ptr("https://login.microsoftonline.com/"),
					ClientID:     to.Ptr("00000000-1111-2222-3333-444444444444"),
					ClientSecret: to.Ptr("********"),
					TenantID:     to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
				UploadWatermark: &armazurearcdata.UploadWatermark{
					Logs:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
					Metrics: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
					Usages:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				},
			},
		},
		&armazurearcdata.DataControllersClientBeginPutDataControllerOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/CreateOrUpdateDataController.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/CreateOrUpdateDataController.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurearcdata.DataControllerResource{
			Name: to.Ptr("testdataController"),
			Type: to.Ptr("Microsoft.AzureArcData/dataControllers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/dataControllers/testdataController"),
			SystemData: &armazurearcdata.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
			},
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			ExtendedLocation: &armazurearcdata.ExtendedLocation{
				Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
				Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
			},
			Properties: &armazurearcdata.DataControllerProperties{
				BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
					Username: to.Ptr("username"),
				},
				ClusterID:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
				ExtensionID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
				Infrastructure: to.Ptr(armazurearcdata.InfrastructureOnpremises),
				LogAnalyticsWorkspaceConfig: &armazurearcdata.LogAnalyticsWorkspaceConfig{
					WorkspaceID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
				LogsDashboardCredential: &armazurearcdata.BasicLoginInformation{
					Username: to.Ptr("username"),
				},
				MetricsDashboardCredential: &armazurearcdata.BasicLoginInformation{
					Username: to.Ptr("username"),
				},
				OnPremiseProperty: &armazurearcdata.OnPremiseProperty{
					ID:                           to.Ptr("12345678-1234-1234-ab12-1a2b3c4d5e6f"),
					PublicSigningKey:             to.Ptr("publicOnPremSigningKey"),
					SigningCertificateThumbprint: to.Ptr("Unique thumbprint returned to customer to verify the certificate being uploaded"),
				},
				UploadServicePrincipal: &armazurearcdata.UploadServicePrincipal{
					Authority: to.Ptr("https://login.microsoftonline.com/"),
					ClientID:  to.Ptr("00000000-1111-2222-3333-444444444444"),
					TenantID:  to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
				UploadWatermark: &armazurearcdata.UploadWatermark{
					Logs:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
					Metrics: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
					Usages:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataControllerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataControllerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/CreateOrUpdateDataController.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataControllers_DeleteDataController(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/DeleteDataController.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a dataController."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewDataControllersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDeleteDataController(ctx,
		"testrg",
		"testdataController",
		&armazurearcdata.DataControllersClientBeginDeleteDataControllerOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/DeleteDataController.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/DeleteDataController.json: %v", err)
	}
}

func TestDataControllers_GetDataController(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/GetDataController.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a data controller."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewDataControllersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.GetDataController(ctx,
		"testrg",
		"testdataController",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/GetDataController.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurearcdata.DataControllerResource{
			Name: to.Ptr("testdataController"),
			Type: to.Ptr("Microsoft.AzureArcData/dataControllers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/dataControllers/testdataController"),
			SystemData: &armazurearcdata.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
			},
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			ExtendedLocation: &armazurearcdata.ExtendedLocation{
				Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
				Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
			},
			Properties: &armazurearcdata.DataControllerProperties{
				BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
					Username: to.Ptr("username"),
				},
				ClusterID:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
				ExtensionID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
				Infrastructure: to.Ptr(armazurearcdata.InfrastructureOnpremises),
				LogAnalyticsWorkspaceConfig: &armazurearcdata.LogAnalyticsWorkspaceConfig{
					WorkspaceID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
				LogsDashboardCredential: &armazurearcdata.BasicLoginInformation{
					Username: to.Ptr("username"),
				},
				MetricsDashboardCredential: &armazurearcdata.BasicLoginInformation{
					Username: to.Ptr("username"),
				},
				OnPremiseProperty: &armazurearcdata.OnPremiseProperty{
					ID:                           to.Ptr("12345678-1234-1234-ab12-1a2b3c4d5e6f"),
					PublicSigningKey:             to.Ptr("publicOnPremSigningKey"),
					SigningCertificateThumbprint: to.Ptr("Unique thumbprint returned to customer to verify the certificate they uploaded"),
				},
				UploadServicePrincipal: &armazurearcdata.UploadServicePrincipal{
					Authority: to.Ptr("https://login.microsoftonline.com/"),
					ClientID:  to.Ptr("00000000-1111-2222-3333-444444444444"),
					TenantID:  to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
				UploadWatermark: &armazurearcdata.UploadWatermark{
					Logs:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
					Metrics: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
					Usages:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataControllerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataControllerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/GetDataController.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataControllers_PatchDataController(t *testing.T) {
	// From example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/UpdateDataController.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates a dataController tags."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurearcdata.NewDataControllersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.PatchDataController(ctx,
		"testrg",
		"testdataController1",
		armazurearcdata.DataControllerUpdate{
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/UpdateDataController.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurearcdata.DataControllerResource{
			Name: to.Ptr("testdataController1"),
			Type: to.Ptr("Microsoft.AzureArcData/dataControllers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/dataControllers/testdataController1"),
			SystemData: &armazurearcdata.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurearcdata.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurearcdata.CreatedByTypeUser),
			},
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			ExtendedLocation: &armazurearcdata.ExtendedLocation{
				Name: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation"),
				Type: to.Ptr(armazurearcdata.ExtendedLocationTypesCustomLocation),
			},
			Properties: &armazurearcdata.DataControllerProperties{
				BasicLoginInformation: &armazurearcdata.BasicLoginInformation{
					Username: to.Ptr("username"),
				},
				ClusterID:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s"),
				ExtensionID:    to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension"),
				Infrastructure: to.Ptr(armazurearcdata.InfrastructureOnpremises),
				LogAnalyticsWorkspaceConfig: &armazurearcdata.LogAnalyticsWorkspaceConfig{
					WorkspaceID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
				LogsDashboardCredential: &armazurearcdata.BasicLoginInformation{
					Username: to.Ptr("username"),
				},
				MetricsDashboardCredential: &armazurearcdata.BasicLoginInformation{
					Username: to.Ptr("username"),
				},
				OnPremiseProperty: &armazurearcdata.OnPremiseProperty{
					ID:                           to.Ptr("12345678-1234-1234-ab12-1a2b3c4d5e6f"),
					PublicSigningKey:             to.Ptr("publicOnPremSigningKey"),
					SigningCertificateThumbprint: to.Ptr("Unique thumbprint returned to customer to verify the certificate they uploaded"),
				},
				UploadServicePrincipal: &armazurearcdata.UploadServicePrincipal{
					Authority: to.Ptr("https://login.microsoftonline.com/"),
					ClientID:  to.Ptr("00000000-1111-2222-3333-444444444444"),
					TenantID:  to.Ptr("00000000-1111-2222-3333-444444444444"),
				},
				UploadWatermark: &armazurearcdata.UploadWatermark{
					Logs:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
					Metrics: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
					Usages:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataControllerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataControllerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/azurearcdata/resource-manager/Microsoft.AzureArcData/stable/2021-11-01/examples/UpdateDataController.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
