//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armguestconfiguration

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestGuestConfigurationAssignments_CreateOrUpdate(t *testing.T) {
	// From example Create or update guest configuration assignment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGuestConfigurationAssignmentsClient(con,
		"mySubscriptionId")
	res, err := client.CreateOrUpdate(ctx,
		"WhitelistedApplication",
		"myResourceGroupName",
		"myVMName",
		GuestConfigurationAssignment{
			ProxyResource: ProxyResource{
				Resource: Resource{
					Name:     to.StringPtr("WhitelistedApplication"),
					Location: to.StringPtr("westcentralus"),
				},
			},
			Properties: &GuestConfigurationAssignmentProperties{
				Context: to.StringPtr("Azure policy"),
				GuestConfiguration: &GuestConfigurationNavigation{
					Name:           to.StringPtr("WhitelistedApplication"),
					AssignmentType: AssignmentTypeApplyAndAutoCorrect.ToPtr(),
					ConfigurationParameter: []*ConfigurationParameter{
						{
							Name:  to.StringPtr("[InstalledApplication]bwhitelistedapp;Name"),
							Value: to.StringPtr("NotePad,sql"),
						}},
					ContentHash: to.StringPtr("123contenthash"),
					ContentURI:  to.StringPtr("https://thisisfake/pacakge"),
					Version:     to.StringPtr("1.*"),
				},
			},
		},
		&GuestConfigurationAssignmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GuestConfigurationAssignment.ID == nil {
		t.Fatal("GuestConfigurationAssignment.ID should not be nil!")
	}
}

func TestGuestConfigurationAssignments_Get(t *testing.T) {
	// From example Get a guest configuration assignment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGuestConfigurationAssignmentsClient(con,
		"mySubscriptionId")
	res, err := client.Get(ctx,
		"myResourceGroupName",
		"SecureProtocol",
		"myVMName",
		&GuestConfigurationAssignmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GuestConfigurationAssignment.ID == nil {
		t.Fatal("GuestConfigurationAssignment.ID should not be nil!")
	}
}

func TestGuestConfigurationAssignments_Delete(t *testing.T) {
	// From example Delete an guest configuration assignment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGuestConfigurationAssignmentsClient(con,
		"mySubscriptionId")
	_, err := client.Delete(ctx,
		"myResourceGroupName",
		"SecureProtocol",
		"myVMName",
		&GuestConfigurationAssignmentsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGuestConfigurationAssignments_SubscriptionList(t *testing.T) {
	// From example List all guest configuration assignments for a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGuestConfigurationAssignmentsClient(con,
		"mySubscriptionId")
	_, err := client.SubscriptionList(ctx,
		&GuestConfigurationAssignmentsSubscriptionListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGuestConfigurationAssignments_RGList(t *testing.T) {
	// From example List all guest configuration assignments for a resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGuestConfigurationAssignmentsClient(con,
		"mySubscriptionId")
	_, err := client.RGList(ctx,
		"myResourceGroupName",
		&GuestConfigurationAssignmentsRGListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGuestConfigurationAssignments_List(t *testing.T) {
	// From example List all guest configuration assignments for a virtual machine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGuestConfigurationAssignmentsClient(con,
		"mySubscriptionId")
	_, err := client.List(ctx,
		"myResourceGroupName",
		"myVMName",
		&GuestConfigurationAssignmentsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGuestConfigurationAssignmentReports_List(t *testing.T) {
	// From example List all guest configuration assignments for a virtual machine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGuestConfigurationAssignmentReportsClient(con,
		"mySubscriptionid")
	_, err := client.List(ctx,
		"myResourceGroupName",
		"AuditSecureProtocol",
		"myVMName",
		&GuestConfigurationAssignmentReportsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGuestConfigurationAssignmentReports_Get(t *testing.T) {
	// From example Get a guest configuration assignment report by Id for a virtual machine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGuestConfigurationAssignmentReportsClient(con,
		"mySubscriptionid")
	res, err := client.Get(ctx,
		"myResourceGroupName",
		"AuditSecureProtocol",
		"7367cbb8-ae99-47d0-a33b-a283564d2cb1",
		"myvm",
		&GuestConfigurationAssignmentReportsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GuestConfigurationAssignmentReport.ID == nil {
		t.Fatal("GuestConfigurationAssignmentReport.ID should not be nil!")
	}
}

func TestGuestConfigurationHCRPAssignments_CreateOrUpdate(t *testing.T) {
	// From example Create or update guest configuration assignment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGuestConfigurationHCRPAssignmentsClient(con,
		"mySubscriptionId")
	res, err := client.CreateOrUpdate(ctx,
		"WhitelistedApplication",
		"myResourceGroupName",
		"myMachineName",
		GuestConfigurationAssignment{
			ProxyResource: ProxyResource{
				Resource: Resource{
					Name:     to.StringPtr("WhitelistedApplication"),
					Location: to.StringPtr("westcentralus"),
				},
			},
			Properties: &GuestConfigurationAssignmentProperties{
				Context: to.StringPtr("Azure policy"),
				GuestConfiguration: &GuestConfigurationNavigation{
					Name:           to.StringPtr("WhitelistedApplication"),
					AssignmentType: AssignmentTypeApplyAndAutoCorrect.ToPtr(),
					ConfigurationParameter: []*ConfigurationParameter{
						{
							Name:  to.StringPtr("[InstalledApplication]bwhitelistedapp;Name"),
							Value: to.StringPtr("NotePad,sql"),
						}},
					ContentHash: to.StringPtr("123contenthash"),
					ContentURI:  to.StringPtr("https://thisisfake/pacakge"),
					Version:     to.StringPtr("1.*"),
				},
			},
		},
		&GuestConfigurationHCRPAssignmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GuestConfigurationAssignment.ID == nil {
		t.Fatal("GuestConfigurationAssignment.ID should not be nil!")
	}
}

func TestGuestConfigurationHCRPAssignments_Get(t *testing.T) {
	// From example Get a guest configuration assignment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGuestConfigurationHCRPAssignmentsClient(con,
		"mySubscriptionId")
	res, err := client.Get(ctx,
		"myResourceGroupName",
		"SecureProtocol",
		"myMachineName",
		&GuestConfigurationHCRPAssignmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GuestConfigurationAssignment.ID == nil {
		t.Fatal("GuestConfigurationAssignment.ID should not be nil!")
	}
}

func TestGuestConfigurationHCRPAssignments_Delete(t *testing.T) {
	// From example Delete an guest configuration assignment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGuestConfigurationHCRPAssignmentsClient(con,
		"mySubscriptionId")
	_, err := client.Delete(ctx,
		"myResourceGroupName",
		"SecureProtocol",
		"myMachineName",
		&GuestConfigurationHCRPAssignmentsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGuestConfigurationHCRPAssignments_List(t *testing.T) {
	// From example List all guest configuration assignments for a virtual machine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGuestConfigurationHCRPAssignmentsClient(con,
		"mySubscriptionId")
	_, err := client.List(ctx,
		"myResourceGroupName",
		"myMachineName",
		&GuestConfigurationHCRPAssignmentsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGuestConfigurationHCRPAssignmentReports_List(t *testing.T) {
	// From example List all guest configuration assignments for a virtual machine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGuestConfigurationHCRPAssignmentReportsClient(con,
		"mySubscriptionid")
	_, err := client.List(ctx,
		"myResourceGroupName",
		"AuditSecureProtocol",
		"myMachineName",
		&GuestConfigurationHCRPAssignmentReportsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGuestConfigurationHCRPAssignmentReports_Get(t *testing.T) {
	// From example Get a guest configuration assignment report by Id for a virtual machine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGuestConfigurationHCRPAssignmentReportsClient(con,
		"mySubscriptionid")
	res, err := client.Get(ctx,
		"myResourceGroupName",
		"AuditSecureProtocol",
		"7367cbb8-ae99-47d0-a33b-a283564d2cb1",
		"myMachineName",
		&GuestConfigurationHCRPAssignmentReportsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GuestConfigurationAssignmentReport.ID == nil {
		t.Fatal("GuestConfigurationAssignmentReport.ID should not be nil!")
	}
}

func TestOperations_List(t *testing.T) {
	// From example Lists all of the available GuestConfiguration REST API operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	_, err := client.List(ctx,
		&OperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
