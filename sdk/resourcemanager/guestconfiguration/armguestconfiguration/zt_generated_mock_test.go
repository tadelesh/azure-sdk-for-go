//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armguestconfiguration_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/guestconfiguration/armguestconfiguration"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestGuestConfigurationAssignments_CreateOrUpdate(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/createOrUpdateGuestConfigurationAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update guest configuration assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewAssignmentsClient("mySubscriptionId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"WhitelistedApplication",
		"myResourceGroupName",
		"myVMName",
		armguestconfiguration.Assignment{
			Name:     to.Ptr("WhitelistedApplication"),
			Location: to.Ptr("westcentralus"),
			Properties: &armguestconfiguration.AssignmentProperties{
				Context: to.Ptr("Azure policy"),
				GuestConfiguration: &armguestconfiguration.Navigation{
					Name:           to.Ptr("WhitelistedApplication"),
					AssignmentType: to.Ptr(armguestconfiguration.AssignmentTypeApplyAndAutoCorrect),
					ConfigurationParameter: []*armguestconfiguration.ConfigurationParameter{
						{
							Name:  to.Ptr("[InstalledApplication]bwhitelistedapp;Name"),
							Value: to.Ptr("NotePad,sql"),
						}},
					ContentHash: to.Ptr("123contenthash"),
					ContentURI:  to.Ptr("https://thisisfake/pacakge"),
					Version:     to.Ptr("1.*"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/createOrUpdateGuestConfigurationAssignment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armguestconfiguration.Assignment{
			Name:     to.Ptr("WhitelistedApplication"),
			ID:       to.Ptr("/subscriptions/mysubscriptionid/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myvm/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/WhitelistedApplication"),
			Location: to.Ptr("westcentralus"),
			Properties: &armguestconfiguration.AssignmentProperties{
				ComplianceStatus: to.Ptr(armguestconfiguration.ComplianceStatusPending),
				Context:          to.Ptr("Azure policy"),
				GuestConfiguration: &armguestconfiguration.Navigation{
					Name: to.Ptr("WhitelistedApplication"),
					ConfigurationParameter: []*armguestconfiguration.ConfigurationParameter{
						{
							Name:  to.Ptr("[InstalledApplication]bwhitelistedapp;Name"),
							Value: to.Ptr("NotePad,sql"),
						}},
					Version: to.Ptr("1.0.0.3"),
				},
				ProvisioningState: to.Ptr(armguestconfiguration.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Assignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Assignment)
			t.Fatalf("Mock response is not equal to example response for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/createOrUpdateGuestConfigurationAssignment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGuestConfigurationAssignments_Get(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/getGuestConfigurationAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a guest configuration assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewAssignmentsClient("mySubscriptionId", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroupName",
		"SecureProtocol",
		"myVMName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/getGuestConfigurationAssignment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armguestconfiguration.Assignment{
			Name:     to.Ptr("AuditSecureProtocol"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myvm/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/AuditSecureProtocol"),
			Location: to.Ptr("centraluseuap"),
			Properties: &armguestconfiguration.AssignmentProperties{
				AssignmentHash:   to.Ptr("E0D8941DD713F284284561648C00C18FA76C8602943C7CD38AFD73B56AE4C35F.E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855"),
				ComplianceStatus: to.Ptr(armguestconfiguration.ComplianceStatusCompliant),
				GuestConfiguration: &armguestconfiguration.Navigation{
					Name:                   to.Ptr("AuditSecureProtocol"),
					ConfigurationParameter: []*armguestconfiguration.ConfigurationParameter{},
					ContentHash:            to.Ptr("content hash"),
					ContentURI:             to.Ptr("https://mystorageaccount.blob.core.windows.net/builtinconfig/AuditSecureProtocol/AuditSecureProtocol_1.0.0.3.zip"),
					Version:                to.Ptr("1.0.0.3"),
				},
				LastComplianceStatusChecked: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T22:14:13Z"); return t }()),
				LatestReportID:              to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myvm/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/AuditSecureProtocol/reports/7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
				ProvisioningState:           to.Ptr(armguestconfiguration.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Assignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Assignment)
			t.Fatalf("Mock response is not equal to example response for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/getGuestConfigurationAssignment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGuestConfigurationAssignments_Delete(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/deleteGuestConfigurationAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an guest configuration assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewAssignmentsClient("mySubscriptionId", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroupName",
		"SecureProtocol",
		"myVMName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/deleteGuestConfigurationAssignment.json: %v", err)
	}
}

func TestGuestConfigurationAssignments_SubscriptionList(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listSubGuestConfigurationAssignments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all guest configuration assignments for a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewAssignmentsClient("mySubscriptionId", cred, &options)
	pager := client.SubscriptionList(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listSubGuestConfigurationAssignments.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armguestconfiguration.AssignmentList{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssignmentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssignmentList)
			t.Fatalf("Mock response is not equal to example response for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listSubGuestConfigurationAssignments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGuestConfigurationAssignments_RGList(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listRGGuestConfigurationAssignments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all guest configuration assignments for a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewAssignmentsClient("mySubscriptionId", cred, &options)
	pager := client.RGList("myResourceGroupName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listRGGuestConfigurationAssignments.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armguestconfiguration.AssignmentList{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssignmentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssignmentList)
			t.Fatalf("Mock response is not equal to example response for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listRGGuestConfigurationAssignments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGuestConfigurationAssignments_List(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listGuestConfigurationAssignments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all guest configuration assignments for a virtual machine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewAssignmentsClient("mySubscriptionId", cred, &options)
	pager := client.List("myResourceGroupName",
		"myVMName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listGuestConfigurationAssignments.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armguestconfiguration.AssignmentList{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssignmentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssignmentList)
			t.Fatalf("Mock response is not equal to example response for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listGuestConfigurationAssignments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGuestConfigurationAssignmentReports_List(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listAllGuestConfigurationAssignmentReports.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all guest configuration assignments for a virtual machine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewAssignmentReportsClient("mySubscriptionid", cred, &options)
	res, err := client.List(ctx,
		"myResourceGroupName",
		"AuditSecureProtocol",
		"myVMName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listAllGuestConfigurationAssignmentReports.json: %v", err)
	}
	// Response check
	{
		exampleRes := armguestconfiguration.AssignmentReportList{
			Value: []*armguestconfiguration.AssignmentReport{
				{
					Name: to.Ptr("7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
					ID:   to.Ptr("/subscriptions/mysubscriptionid/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myvm/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/AuditSecureProtocol/reports/7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
					Properties: &armguestconfiguration.AssignmentReportProperties{
						Assignment: &armguestconfiguration.AssignmentInfo{
							Name: to.Ptr("AuditSecureProtocol"),
							Configuration: &armguestconfiguration.ConfigurationInfo{
								Name: to.Ptr("AuditSecureProtocol"),
							},
						},
						ComplianceStatus: to.Ptr(armguestconfiguration.ComplianceStatusCompliant),
						EndTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T22:14:13Z"); return t }()),
						ReportID:         to.Ptr("7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
						StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T22:13:53Z"); return t }()),
						VM: &armguestconfiguration.VMInfo{
							ID:   to.Ptr("/subscriptions/mysubscriptionid/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myvm"),
							UUID: to.Ptr("vmuuid"),
						},
					},
				},
				{
					Name: to.Ptr("41ee2caf-48f9-4999-a793-82ec7c6beb2c"),
					ID:   to.Ptr("/subscriptions/mysubscriptionid/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myvm/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/AuditSecureProtocol/reports/41ee2caf-48f9-4999-a793-82ec7c6beb2c"),
					Properties: &armguestconfiguration.AssignmentReportProperties{
						Assignment: &armguestconfiguration.AssignmentInfo{
							Name: to.Ptr("AuditSecureProtocol"),
							Configuration: &armguestconfiguration.ConfigurationInfo{
								Name: to.Ptr("AuditSecureProtocol"),
							},
						},
						ComplianceStatus: to.Ptr(armguestconfiguration.ComplianceStatusCompliant),
						EndTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T20:14:13Z"); return t }()),
						ReportID:         to.Ptr("41ee2caf-48f9-4999-a793-82ec7c6beb2c"),
						StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T20:13:53Z"); return t }()),
						VM: &armguestconfiguration.VMInfo{
							ID:   to.Ptr("/subscriptions/mysubscriptionid/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myvm"),
							UUID: to.Ptr("vmuuid"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AssignmentReportList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssignmentReportList)
			t.Fatalf("Mock response is not equal to example response for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listAllGuestConfigurationAssignmentReports.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGuestConfigurationAssignmentReports_Get(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/getGuestConfigurationAssignmentReportById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a guest configuration assignment report by Id for a virtual machine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewAssignmentReportsClient("mySubscriptionid", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroupName",
		"AuditSecureProtocol",
		"7367cbb8-ae99-47d0-a33b-a283564d2cb1",
		"myvm",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/getGuestConfigurationAssignmentReportById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armguestconfiguration.AssignmentReport{
			Name: to.Ptr("7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
			ID:   to.Ptr("/subscriptions/mysubscriptionid/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myvm/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/AuditSecureProtocol/reports/7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
			Properties: &armguestconfiguration.AssignmentReportProperties{
				Assignment: &armguestconfiguration.AssignmentInfo{
					Name: to.Ptr("AuditSecureProtocol"),
					Configuration: &armguestconfiguration.ConfigurationInfo{
						Name:    to.Ptr("AuditSecureProtocol"),
						Version: to.Ptr("1.0.0.0"),
					},
				},
				ComplianceStatus: to.Ptr(armguestconfiguration.ComplianceStatusCompliant),
				EndTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T22:14:13Z"); return t }()),
				ReportID:         to.Ptr("7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
				StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T22:13:53Z"); return t }()),
				VM: &armguestconfiguration.VMInfo{
					ID:   to.Ptr("/subscriptions/mysubscriptionid/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myvm"),
					UUID: to.Ptr("vmuuid"),
				},
				Details: &armguestconfiguration.AssignmentReportDetails{
					ComplianceStatus: to.Ptr(armguestconfiguration.ComplianceStatusCompliant),
					EndTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T22:14:13Z"); return t }()),
					JobID:            to.Ptr("7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
					OperationType:    to.Ptr(armguestconfiguration.TypeConsistency),
					Resources: []*armguestconfiguration.AssignmentReportResource{
						{
							ComplianceStatus: to.Ptr(armguestconfiguration.ComplianceStatusCompliant),
							Properties: map[string]interface{}{
								"ConfigurationName": "IsWebServerSecure",
								"DependsOn":         nil,
								"IsSingleInstance":  "Yes",
								"ModuleName":        "SecureProtocolWebServer",
								"ModuleVersion":     "1.0.0.3",
								"Protocols": []interface{}{
									map[string]interface{}{
										"Ensure":   "Absent",
										"Protocol": "SSL 2.0",
									},
									map[string]interface{}{
										"Ensure":   "Absent",
										"Protocol": "SSL 3.0",
									},
									map[string]interface{}{
										"Ensure":   "Absent",
										"Protocol": "TLS 1.0",
									},
									map[string]interface{}{
										"Ensure":   "Absent",
										"Protocol": "PCT 1.0",
									},
									map[string]interface{}{
										"Ensure":   "Absent",
										"Protocol": "Multi-Protocol Unified Hello",
									},
									map[string]interface{}{
										"Ensure":   "Absent",
										"Protocol": "TLS 1.1",
									},
									map[string]interface{}{
										"Ensure":   "Absent",
										"Protocol": "TLS 1.2",
									},
								},
								"PsDscRunAsCredential": nil,
								"Reasons":              nil,
								"ResourceId":           "[SecureWebServer]s1",
								"SourceInfo":           nil,
							},
							Reasons: []*armguestconfiguration.AssignmentReportResourceComplianceReason{
								{
									Code:   to.Ptr("DSC::RESOURCE::SUCCESS"),
									Phrase: to.Ptr("Operation successful."),
								}},
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T22:13:53Z"); return t }()),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssignmentReport) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssignmentReport)
			t.Fatalf("Mock response is not equal to example response for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/getGuestConfigurationAssignmentReportById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGuestConfigurationHCRPAssignments_CreateOrUpdate(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/createOrUpdateGuestConfigurationHCRPAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update guest configuration assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewHCRPAssignmentsClient("mySubscriptionId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"WhitelistedApplication",
		"myResourceGroupName",
		"myMachineName",
		armguestconfiguration.Assignment{
			Name:     to.Ptr("WhitelistedApplication"),
			Location: to.Ptr("westcentralus"),
			Properties: &armguestconfiguration.AssignmentProperties{
				Context: to.Ptr("Azure policy"),
				GuestConfiguration: &armguestconfiguration.Navigation{
					Name:           to.Ptr("WhitelistedApplication"),
					AssignmentType: to.Ptr(armguestconfiguration.AssignmentTypeApplyAndAutoCorrect),
					ConfigurationParameter: []*armguestconfiguration.ConfigurationParameter{
						{
							Name:  to.Ptr("[InstalledApplication]bwhitelistedapp;Name"),
							Value: to.Ptr("NotePad,sql"),
						}},
					ContentHash: to.Ptr("123contenthash"),
					ContentURI:  to.Ptr("https://thisisfake/pacakge"),
					Version:     to.Ptr("1.*"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/createOrUpdateGuestConfigurationHCRPAssignment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armguestconfiguration.Assignment{
			Name:     to.Ptr("WhitelistedApplication"),
			ID:       to.Ptr("/subscriptions/mysubscriptionid/resourceGroups/myResourceGroupName/providers/HybridRP.Compute/virtualMachines/myvm/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/WhitelistedApplication"),
			Location: to.Ptr("westcentralus"),
			Properties: &armguestconfiguration.AssignmentProperties{
				AssignmentHash:   to.Ptr("abcdr453g"),
				ComplianceStatus: to.Ptr(armguestconfiguration.ComplianceStatusPending),
				Context:          to.Ptr("Azure policy"),
				GuestConfiguration: &armguestconfiguration.Navigation{
					Name: to.Ptr("WhitelistedApplication"),
					ConfigurationParameter: []*armguestconfiguration.ConfigurationParameter{
						{
							Name:  to.Ptr("[InstalledApplication]bwhitelistedapp;Name"),
							Value: to.Ptr("NotePad,sql"),
						}},
					Version: to.Ptr("1.0.0.3"),
				},
				LatestReportID:    to.Ptr("a2a64e5d-a1a9-4344-a866-fb9e1541f723"),
				ProvisioningState: to.Ptr(armguestconfiguration.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Assignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Assignment)
			t.Fatalf("Mock response is not equal to example response for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/createOrUpdateGuestConfigurationHCRPAssignment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGuestConfigurationHCRPAssignments_Get(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/getGuestConfigurationHCRPAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a guest configuration assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewHCRPAssignmentsClient("mySubscriptionId", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroupName",
		"SecureProtocol",
		"myMachineName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/getGuestConfigurationHCRPAssignment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armguestconfiguration.Assignment{
			Name:     to.Ptr("AuditSecureProtocol"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.HybridCompute/machines/myMachineName/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/AuditSecureProtocol"),
			Location: to.Ptr("centraluseuap"),
			Properties: &armguestconfiguration.AssignmentProperties{
				AssignmentHash:   to.Ptr("E0D8941DD713F284284561648C00C18FA76C8602943C7CD38AFD73B56AE4C35F.E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855"),
				ComplianceStatus: to.Ptr(armguestconfiguration.ComplianceStatusCompliant),
				GuestConfiguration: &armguestconfiguration.Navigation{
					Name:                   to.Ptr("AuditSecureProtocol"),
					ConfigurationParameter: []*armguestconfiguration.ConfigurationParameter{},
					ContentHash:            to.Ptr("content hash"),
					ContentURI:             to.Ptr("https://mystorageaccount.blob.core.windows.net/builtinconfig/AuditSecureProtocol/AuditSecureProtocol_1.0.0.3.zip"),
					Version:                to.Ptr("1.0.0.3"),
				},
				LastComplianceStatusChecked: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T22:14:13Z"); return t }()),
				LatestReportID:              to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.HybridCompute/machines/myMachineName/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/AuditSecureProtocol/reports/7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
				ProvisioningState:           to.Ptr(armguestconfiguration.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Assignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Assignment)
			t.Fatalf("Mock response is not equal to example response for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/getGuestConfigurationHCRPAssignment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGuestConfigurationHCRPAssignments_Delete(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/deleteGuestConfigurationHCRPAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an guest configuration assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewHCRPAssignmentsClient("mySubscriptionId", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroupName",
		"SecureProtocol",
		"myMachineName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/deleteGuestConfigurationHCRPAssignment.json: %v", err)
	}
}

func TestGuestConfigurationHCRPAssignments_List(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listGuestConfigurationHCRPAssignments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all guest configuration assignments for a virtual machine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewHCRPAssignmentsClient("mySubscriptionId", cred, &options)
	pager := client.List("myResourceGroupName",
		"myMachineName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listGuestConfigurationHCRPAssignments.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armguestconfiguration.AssignmentList{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssignmentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssignmentList)
			t.Fatalf("Mock response is not equal to example response for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listGuestConfigurationHCRPAssignments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGuestConfigurationHCRPAssignmentReports_List(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listAllGuestConfigurationHCRPAssignmentReports.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all guest configuration assignments for a virtual machine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewHCRPAssignmentReportsClient("mySubscriptionid", cred, &options)
	res, err := client.List(ctx,
		"myResourceGroupName",
		"AuditSecureProtocol",
		"myMachineName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listAllGuestConfigurationHCRPAssignmentReports.json: %v", err)
	}
	// Response check
	{
		exampleRes := armguestconfiguration.AssignmentReportList{
			Value: []*armguestconfiguration.AssignmentReport{
				{
					Name: to.Ptr("7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
					ID:   to.Ptr("/subscriptions/mysubscriptionid/resourceGroups/myResourceGroupName/providers/Microsoft.HybridCompute/machines/myMachineName/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/AuditSecureProtocol/reports/7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
					Properties: &armguestconfiguration.AssignmentReportProperties{
						Assignment: &armguestconfiguration.AssignmentInfo{
							Name: to.Ptr("AuditSecureProtocol"),
							Configuration: &armguestconfiguration.ConfigurationInfo{
								Name: to.Ptr("AuditSecureProtocol"),
							},
						},
						ComplianceStatus: to.Ptr(armguestconfiguration.ComplianceStatusCompliant),
						EndTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T22:14:13Z"); return t }()),
						ReportID:         to.Ptr("7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
						StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T22:13:53Z"); return t }()),
						VM: &armguestconfiguration.VMInfo{
							ID:   to.Ptr("/subscriptions/mysubscriptionid/resourceGroups/myResourceGroupName/providers/Microsoft.HybridCompute/machines/myMachineName"),
							UUID: to.Ptr("vmuuid"),
						},
					},
				},
				{
					Name: to.Ptr("41ee2caf-48f9-4999-a793-82ec7c6beb2c"),
					ID:   to.Ptr("/subscriptions/mysubscriptionid/resourceGroups/myResourceGroupName/providers/Microsoft.HybridCompute/machines/myMachineName/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/AuditSecureProtocol/reports/41ee2caf-48f9-4999-a793-82ec7c6beb2c"),
					Properties: &armguestconfiguration.AssignmentReportProperties{
						Assignment: &armguestconfiguration.AssignmentInfo{
							Name: to.Ptr("AuditSecureProtocol"),
							Configuration: &armguestconfiguration.ConfigurationInfo{
								Name: to.Ptr("AuditSecureProtocol"),
							},
						},
						ComplianceStatus: to.Ptr(armguestconfiguration.ComplianceStatusCompliant),
						EndTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T20:14:13Z"); return t }()),
						ReportID:         to.Ptr("41ee2caf-48f9-4999-a793-82ec7c6beb2c"),
						StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T20:13:53Z"); return t }()),
						VM: &armguestconfiguration.VMInfo{
							ID:   to.Ptr("/subscriptions/mysubscriptionid/resourceGroups/myResourceGroupName/providers/Microsoft.HybridCompute/machines/myMachineName"),
							UUID: to.Ptr("vmuuid"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AssignmentReportList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssignmentReportList)
			t.Fatalf("Mock response is not equal to example response for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listAllGuestConfigurationHCRPAssignmentReports.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGuestConfigurationHCRPAssignmentReports_Get(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/getGuestConfigurationHCRPAssignmentReportById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a guest configuration assignment report by Id for a virtual machine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewHCRPAssignmentReportsClient("mySubscriptionid", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroupName",
		"AuditSecureProtocol",
		"7367cbb8-ae99-47d0-a33b-a283564d2cb1",
		"myMachineName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/getGuestConfigurationHCRPAssignmentReportById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armguestconfiguration.AssignmentReport{
			Name: to.Ptr("7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
			ID:   to.Ptr("/subscriptions/mysubscriptionid/resourceGroups/myResourceGroupName/providers/Microsoft.HybridCompute/machines/myMachineName/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/AuditSecureProtocol/reports/7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
			Properties: &armguestconfiguration.AssignmentReportProperties{
				Assignment: &armguestconfiguration.AssignmentInfo{
					Name: to.Ptr("AuditSecureProtocol"),
					Configuration: &armguestconfiguration.ConfigurationInfo{
						Name:    to.Ptr("AuditSecureProtocol"),
						Version: to.Ptr("1.0.0.0"),
					},
				},
				ComplianceStatus: to.Ptr(armguestconfiguration.ComplianceStatusCompliant),
				EndTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T22:14:13Z"); return t }()),
				ReportID:         to.Ptr("7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
				StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T22:13:53Z"); return t }()),
				VM: &armguestconfiguration.VMInfo{
					ID:   to.Ptr("/subscriptions/mysubscriptionid/resourceGroups/myResourceGroupName/providers/Microsoft.HybridCompute/machines/myMachineName"),
					UUID: to.Ptr("vmuuid"),
				},
				Details: &armguestconfiguration.AssignmentReportDetails{
					ComplianceStatus: to.Ptr(armguestconfiguration.ComplianceStatusCompliant),
					EndTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T22:14:13Z"); return t }()),
					JobID:            to.Ptr("7367cbb8-ae99-47d0-a33b-a283564d2cb1"),
					OperationType:    to.Ptr(armguestconfiguration.TypeConsistency),
					Resources: []*armguestconfiguration.AssignmentReportResource{
						{
							ComplianceStatus: to.Ptr(armguestconfiguration.ComplianceStatusCompliant),
							Properties: map[string]interface{}{
								"ConfigurationName": "IsWebServerSecure",
								"DependsOn":         nil,
								"IsSingleInstance":  "Yes",
								"ModuleName":        "SecureProtocolWebServer",
								"ModuleVersion":     "1.0.0.3",
								"Protocols": []interface{}{
									map[string]interface{}{
										"Ensure":   "Absent",
										"Protocol": "SSL 2.0",
									},
									map[string]interface{}{
										"Ensure":   "Absent",
										"Protocol": "SSL 3.0",
									},
									map[string]interface{}{
										"Ensure":   "Absent",
										"Protocol": "TLS 1.0",
									},
									map[string]interface{}{
										"Ensure":   "Absent",
										"Protocol": "PCT 1.0",
									},
									map[string]interface{}{
										"Ensure":   "Absent",
										"Protocol": "Multi-Protocol Unified Hello",
									},
									map[string]interface{}{
										"Ensure":   "Absent",
										"Protocol": "TLS 1.1",
									},
									map[string]interface{}{
										"Ensure":   "Absent",
										"Protocol": "TLS 1.2",
									},
								},
								"PsDscRunAsCredential": nil,
								"Reasons":              nil,
								"ResourceId":           "[SecureWebServer]s1",
								"SourceInfo":           nil,
							},
							Reasons: []*armguestconfiguration.AssignmentReportResourceComplianceReason{
								{
									Code:   to.Ptr("DSC::RESOURCE::SUCCESS"),
									Phrase: to.Ptr("Operation successful."),
								}},
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-29T22:13:53Z"); return t }()),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssignmentReport) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssignmentReport)
			t.Fatalf("Mock response is not equal to example response for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/getGuestConfigurationHCRPAssignmentReportById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all of the available GuestConfiguration REST API operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armguestconfiguration.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armguestconfiguration.OperationList{
			Value: []*armguestconfiguration.Operation{
				{
					Name: to.Ptr("Microsoft.GuestConfiguration/guestConfigurationAssignments/write"),
					Display: &armguestconfiguration.OperationDisplay{
						Description: to.Ptr("Create new guest configuration assignment."),
						Operation:   to.Ptr("Microsoft.GuestConfiguration/guestConfigurationAssignments/write"),
						Provider:    to.Ptr("Microsoft Guest Configuration"),
						Resource:    to.Ptr("Microsoft.GuestConfiguration/guestConfigurationAssignments"),
					},
				},
				{
					Name: to.Ptr("Microsoft.GuestConfiguration/register/action"),
					Display: &armguestconfiguration.OperationDisplay{
						Description: to.Ptr("Registers the subscription for the Microsoft.GuestConfiguration resource provider."),
						Operation:   to.Ptr("Registers the feature for Microsoft.GuestConfiguration."),
						Provider:    to.Ptr("Microsoft Guest Configuration"),
						Resource:    to.Ptr("Register"),
					},
				},
				{
					Name: to.Ptr("Microsoft.GuestConfiguration/guestConfigurationAssignments/read"),
					Display: &armguestconfiguration.OperationDisplay{
						Description: to.Ptr("Get guest configuration assignment."),
						Operation:   to.Ptr("Microsoft.GuestConfiguration/guestConfigurationAssignments/read"),
						Provider:    to.Ptr("Microsoft Guest Configuration"),
						Resource:    to.Ptr("Microsoft.GuestConfiguration/guestConfigurationAssignments"),
					},
				},
				{
					Name: to.Ptr("Microsoft.GuestConfiguration/guestConfigurationAssignments/reports/read"),
					Display: &armguestconfiguration.OperationDisplay{
						Description: to.Ptr("Get guest configuration assignment report."),
						Operation:   to.Ptr("Microsoft.GuestConfiguration/guestConfigurationAssignments/reports/read"),
						Provider:    to.Ptr("Microsoft Guest Configuration"),
						Resource:    to.Ptr("Microsoft.GuestConfiguration/guestConfigurationAssignments"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/guestconfiguration/resource-manager/Microsoft.GuestConfiguration/stable/2020-06-25/examples/listOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
