//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armguestconfiguration

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AssignmentsClientListPager provides operations for iterating over paged responses.
type AssignmentsClientListPager struct {
	client    *AssignmentsClient
	current   AssignmentsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AssignmentsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *AssignmentsClientListPager) NextPage(ctx context.Context) (AssignmentsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return AssignmentsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AssignmentsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AssignmentsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AssignmentsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AssignmentsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AssignmentsClientRGListPager provides operations for iterating over paged responses.
type AssignmentsClientRGListPager struct {
	client    *AssignmentsClient
	current   AssignmentsClientRGListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AssignmentsClientRGListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *AssignmentsClientRGListPager) NextPage(ctx context.Context) (AssignmentsClientRGListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return AssignmentsClientRGListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AssignmentsClientRGListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AssignmentsClientRGListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {

		return AssignmentsClientRGListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.rgListHandleResponse(resp)
	if err != nil {
		return AssignmentsClientRGListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AssignmentsClientSubscriptionListPager provides operations for iterating over paged responses.
type AssignmentsClientSubscriptionListPager struct {
	client    *AssignmentsClient
	current   AssignmentsClientSubscriptionListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AssignmentsClientSubscriptionListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *AssignmentsClientSubscriptionListPager) NextPage(ctx context.Context) (AssignmentsClientSubscriptionListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return AssignmentsClientSubscriptionListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AssignmentsClientSubscriptionListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AssignmentsClientSubscriptionListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {

		return AssignmentsClientSubscriptionListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.subscriptionListHandleResponse(resp)
	if err != nil {
		return AssignmentsClientSubscriptionListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// HCRPAssignmentsClientListPager provides operations for iterating over paged responses.
type HCRPAssignmentsClientListPager struct {
	client    *HCRPAssignmentsClient
	current   HCRPAssignmentsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *HCRPAssignmentsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *HCRPAssignmentsClientListPager) NextPage(ctx context.Context) (HCRPAssignmentsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return HCRPAssignmentsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return HCRPAssignmentsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return HCRPAssignmentsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return HCRPAssignmentsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return HCRPAssignmentsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return OperationsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
