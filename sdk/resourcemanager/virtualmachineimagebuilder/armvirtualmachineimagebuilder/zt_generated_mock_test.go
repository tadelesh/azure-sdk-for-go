//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvirtualmachineimagebuilder_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/virtualmachineimagebuilder/armvirtualmachineimagebuilder"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestVirtualMachineImageTemplates_List(t *testing.T) {
	// From example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/ListImageTemplates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List images by subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvirtualmachineimagebuilder.NewVirtualMachineImageTemplatesClient("{subscription-id}", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/ListImageTemplates.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvirtualmachineimagebuilder.ImageTemplateListResult{
			Value: []*armvirtualmachineimagebuilder.ImageTemplate{
				{
					Name:     to.Ptr("myImageTemplate"),
					Type:     to.Ptr("Microsoft.VirtualMachineImages/imageTemplate"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/myImageTemplate"),
					Location: to.Ptr("westus"),
					Identity: &armvirtualmachineimagebuilder.ImageTemplateIdentity{
						Type: to.Ptr(armvirtualmachineimagebuilder.ResourceIdentityTypeUserAssigned),
						UserAssignedIdentities: map[string]*armvirtualmachineimagebuilder.ComponentsVrq145SchemasImagetemplateidentityPropertiesUserassignedidentitiesAdditionalproperties{
							"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity_1": {
								ClientID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
								PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
							},
						},
					},
					Properties: &armvirtualmachineimagebuilder.ImageTemplateProperties{
						Customize: []armvirtualmachineimagebuilder.ImageTemplateCustomizerClassification{
							&armvirtualmachineimagebuilder.ImageTemplateShellCustomizer{
								Name:      to.Ptr("Shell customization example"),
								Type:      to.Ptr("Shell"),
								ScriptURI: to.Ptr("https://example.com/path/to/script.sh"),
							}},
						Distribute: []armvirtualmachineimagebuilder.ImageTemplateDistributorClassification{
							&armvirtualmachineimagebuilder.ImageTemplateManagedImageDistributor{
								Type: to.Ptr("ManagedImage"),
								ArtifactTags: map[string]*string{
									"tagName": to.Ptr("value"),
								},
								RunOutputName: to.Ptr("image_it_pir_1"),
								ImageID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/image_it_1"),
								Location:      to.Ptr("1_location"),
							}},
						Source: &armvirtualmachineimagebuilder.ImageTemplateManagedImageSource{
							Type:    to.Ptr("ManagedImage"),
							ImageID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/source_rg/providers/Microsoft.Compute/images/source_image"),
						},
						VMProfile: &armvirtualmachineimagebuilder.ImageTemplateVMProfile{
							OSDiskSizeGB: to.Ptr[int32](64),
							VMSize:       to.Ptr("Standard_D2s_v3"),
						},
					},
				},
				{
					Name:     to.Ptr("mySecondImageTemplate"),
					Type:     to.Ptr("Microsoft.VirtualMachineImages/imageTemplate"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myOtherResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/mySecondImageTemplate"),
					Location: to.Ptr("westus"),
					Identity: &armvirtualmachineimagebuilder.ImageTemplateIdentity{
						Type: to.Ptr(armvirtualmachineimagebuilder.ResourceIdentityTypeUserAssigned),
						UserAssignedIdentities: map[string]*armvirtualmachineimagebuilder.ComponentsVrq145SchemasImagetemplateidentityPropertiesUserassignedidentitiesAdditionalproperties{
							"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity_1": {
								ClientID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
								PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
							},
						},
					},
					Properties: &armvirtualmachineimagebuilder.ImageTemplateProperties{
						Customize: []armvirtualmachineimagebuilder.ImageTemplateCustomizerClassification{
							&armvirtualmachineimagebuilder.ImageTemplateShellCustomizer{
								Name:      to.Ptr("Shell customization example"),
								Type:      to.Ptr("Shell"),
								ScriptURI: to.Ptr("https://example.com/path/to/script.sh"),
							}},
						Distribute: []armvirtualmachineimagebuilder.ImageTemplateDistributorClassification{
							&armvirtualmachineimagebuilder.ImageTemplateManagedImageDistributor{
								Type: to.Ptr("ManagedImage"),
								ArtifactTags: map[string]*string{
									"stage": to.Ptr("development"),
								},
								RunOutputName: to.Ptr("eus"),
								ImageID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/mySecondImage-eus"),
								Location:      to.Ptr("eastus"),
							}},
						Source: &armvirtualmachineimagebuilder.ImageTemplatePlatformImageSource{
							Type:  to.Ptr("PlatformImage"),
							Offer: to.Ptr("UbuntuServer"),
							PlanInfo: &armvirtualmachineimagebuilder.PlatformImagePurchasePlan{
								PlanName:      to.Ptr("example_plan_name"),
								PlanProduct:   to.Ptr("example_plan_product"),
								PlanPublisher: to.Ptr("example_plan_publisher"),
							},
							Publisher: to.Ptr("Canonical"),
							SKU:       to.Ptr("18.04-LTS"),
							Version:   to.Ptr("18.04.201902121"),
						},
						VMProfile: &armvirtualmachineimagebuilder.ImageTemplateVMProfile{
							OSDiskSizeGB: to.Ptr[int32](32),
							VMSize:       to.Ptr("Standard_D8s_v3"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ImageTemplateListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ImageTemplateListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/ListImageTemplates.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineImageTemplates_ListByResourceGroup(t *testing.T) {
	// From example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/ListImageTemplatesByRg.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List images by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvirtualmachineimagebuilder.NewVirtualMachineImageTemplatesClient("{subscription-id}", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/ListImageTemplatesByRg.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvirtualmachineimagebuilder.ImageTemplateListResult{
			Value: []*armvirtualmachineimagebuilder.ImageTemplate{
				{
					Name:     to.Ptr("myImageTemplate"),
					Type:     to.Ptr("Microsoft.VirtualMachineImages/imageTemplate"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/myImageTemplate"),
					Location: to.Ptr("westus"),
					Identity: &armvirtualmachineimagebuilder.ImageTemplateIdentity{
						Type: to.Ptr(armvirtualmachineimagebuilder.ResourceIdentityTypeUserAssigned),
						UserAssignedIdentities: map[string]*armvirtualmachineimagebuilder.ComponentsVrq145SchemasImagetemplateidentityPropertiesUserassignedidentitiesAdditionalproperties{
							"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity_1": {
								ClientID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
								PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
							},
						},
					},
					Properties: &armvirtualmachineimagebuilder.ImageTemplateProperties{
						Customize: []armvirtualmachineimagebuilder.ImageTemplateCustomizerClassification{
							&armvirtualmachineimagebuilder.ImageTemplateShellCustomizer{
								Name:      to.Ptr("Shell customization example"),
								Type:      to.Ptr("Shell"),
								ScriptURI: to.Ptr("https://example.com/path/to/script.sh"),
							}},
						Distribute: []armvirtualmachineimagebuilder.ImageTemplateDistributorClassification{
							&armvirtualmachineimagebuilder.ImageTemplateManagedImageDistributor{
								Type: to.Ptr("ManagedImage"),
								ArtifactTags: map[string]*string{
									"tagName": to.Ptr("value"),
								},
								RunOutputName: to.Ptr("image_it_pir_1"),
								ImageID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/image_it_1"),
								Location:      to.Ptr("1_location"),
							}},
						Source: &armvirtualmachineimagebuilder.ImageTemplateManagedImageSource{
							Type:    to.Ptr("ManagedImage"),
							ImageID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/source_rg/providers/Microsoft.Compute/images/source_image"),
						},
						VMProfile: &armvirtualmachineimagebuilder.ImageTemplateVMProfile{
							OSDiskSizeGB: to.Ptr[int32](64),
							VMSize:       to.Ptr("Standard_D2s_v3"),
						},
					},
				},
				{
					Name:     to.Ptr("myOtherImageTemplate"),
					Type:     to.Ptr("Microsoft.VirtualMachineImages/imageTemplate"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/myOtherImageTemplate"),
					Location: to.Ptr("westus"),
					Identity: &armvirtualmachineimagebuilder.ImageTemplateIdentity{
						Type: to.Ptr(armvirtualmachineimagebuilder.ResourceIdentityTypeUserAssigned),
						UserAssignedIdentities: map[string]*armvirtualmachineimagebuilder.ComponentsVrq145SchemasImagetemplateidentityPropertiesUserassignedidentitiesAdditionalproperties{
							"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity_1": {
								ClientID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
								PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
							},
						},
					},
					Properties: &armvirtualmachineimagebuilder.ImageTemplateProperties{
						Customize: []armvirtualmachineimagebuilder.ImageTemplateCustomizerClassification{
							&armvirtualmachineimagebuilder.ImageTemplateShellCustomizer{
								Name:      to.Ptr("Shell customization example"),
								Type:      to.Ptr("Shell"),
								ScriptURI: to.Ptr("https://example.com/path/to/script.sh"),
							}},
						Distribute: []armvirtualmachineimagebuilder.ImageTemplateDistributorClassification{
							&armvirtualmachineimagebuilder.ImageTemplateManagedImageDistributor{
								Type:          to.Ptr("ManagedImage"),
								RunOutputName: to.Ptr("singleImage"),
								ImageID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/baseimage-cus"),
								Location:      to.Ptr("centralus"),
							},
							&armvirtualmachineimagebuilder.ImageTemplateSharedImageDistributor{
								Type:              to.Ptr("SharedImage"),
								RunOutputName:     to.Ptr("gallery"),
								ExcludeFromLatest: to.Ptr(true),
								GalleryImageID:    to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/gallery/baseimages/images/baseimage"),
								ReplicationRegions: []*string{
									to.Ptr("eastus"),
									to.Ptr("westus")},
								StorageAccountType: to.Ptr(armvirtualmachineimagebuilder.SharedImageStorageAccountTypeStandardLRS),
							}},
						Source: &armvirtualmachineimagebuilder.ImageTemplatePlatformImageSource{
							Type:  to.Ptr("PlatformImage"),
							Offer: to.Ptr("UbuntuServer"),
							PlanInfo: &armvirtualmachineimagebuilder.PlatformImagePurchasePlan{
								PlanName:      to.Ptr("example_plan_name"),
								PlanProduct:   to.Ptr("example_plan_product"),
								PlanPublisher: to.Ptr("example_plan_publisher"),
							},
							Publisher: to.Ptr("Canonical"),
							SKU:       to.Ptr("18.04-LTS"),
							Version:   to.Ptr("18.04.201902121"),
						},
						VMProfile: &armvirtualmachineimagebuilder.ImageTemplateVMProfile{
							OSDiskSizeGB: to.Ptr[int32](64),
							VMSize:       to.Ptr("Standard_D8s_v3"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ImageTemplateListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ImageTemplateListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/ListImageTemplatesByRg.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineImageTemplates_CreateOrUpdate(t *testing.T) {
	// From example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/CreateImageTemplateLinux.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an Image Template for Linux."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvirtualmachineimagebuilder.NewVirtualMachineImageTemplatesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImageTemplate",
		armvirtualmachineimagebuilder.ImageTemplate{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"imagetemplate_tag1": to.Ptr("IT_T1"),
				"imagetemplate_tag2": to.Ptr("IT_T2"),
			},
			Identity: &armvirtualmachineimagebuilder.ImageTemplateIdentity{
				Type: to.Ptr(armvirtualmachineimagebuilder.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvirtualmachineimagebuilder.ComponentsVrq145SchemasImagetemplateidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity_1": {},
				},
			},
			Properties: &armvirtualmachineimagebuilder.ImageTemplateProperties{
				Customize: []armvirtualmachineimagebuilder.ImageTemplateCustomizerClassification{
					&armvirtualmachineimagebuilder.ImageTemplateShellCustomizer{
						Name:      to.Ptr("Shell Customizer Example"),
						Type:      to.Ptr("Shell"),
						ScriptURI: to.Ptr("https://example.com/path/to/script.sh"),
					}},
				Distribute: []armvirtualmachineimagebuilder.ImageTemplateDistributorClassification{
					&armvirtualmachineimagebuilder.ImageTemplateManagedImageDistributor{
						Type: to.Ptr("ManagedImage"),
						ArtifactTags: map[string]*string{
							"tagName": to.Ptr("value"),
						},
						RunOutputName: to.Ptr("image_it_pir_1"),
						ImageID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/image_it_1"),
						Location:      to.Ptr("1_location"),
					}},
				Source: &armvirtualmachineimagebuilder.ImageTemplateManagedImageSource{
					Type:    to.Ptr("ManagedImage"),
					ImageID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/images/source_image"),
				},
				VMProfile: &armvirtualmachineimagebuilder.ImageTemplateVMProfile{
					OSDiskSizeGB: to.Ptr[int32](64),
					VMSize:       to.Ptr("Standard_D2s_v3"),
					VnetConfig: &armvirtualmachineimagebuilder.VirtualNetworkConfig{
						SubnetID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet_name/subnets/subnet_name"),
					},
				},
			},
		},
		&armvirtualmachineimagebuilder.VirtualMachineImageTemplatesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/CreateImageTemplateLinux.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/CreateImageTemplateLinux.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvirtualmachineimagebuilder.ImageTemplate{
			Name:     to.Ptr("myImageTemplate"),
			Type:     to.Ptr("Microsoft.VirtualMachineImages/imageTemplate"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/myImageTemplate"),
			Location: to.Ptr("westus"),
			Identity: &armvirtualmachineimagebuilder.ImageTemplateIdentity{
				Type: to.Ptr(armvirtualmachineimagebuilder.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvirtualmachineimagebuilder.ComponentsVrq145SchemasImagetemplateidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity_1": {
						ClientID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
						PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
			},
			Properties: &armvirtualmachineimagebuilder.ImageTemplateProperties{
				Customize: []armvirtualmachineimagebuilder.ImageTemplateCustomizerClassification{
					&armvirtualmachineimagebuilder.ImageTemplateShellCustomizer{
						Name:      to.Ptr("Shell Customizer Example"),
						Type:      to.Ptr("Shell"),
						ScriptURI: to.Ptr("https://example.com/path/to/script.sh"),
					}},
				Distribute: []armvirtualmachineimagebuilder.ImageTemplateDistributorClassification{
					&armvirtualmachineimagebuilder.ImageTemplateManagedImageDistributor{
						Type: to.Ptr("ManagedImage"),
						ArtifactTags: map[string]*string{
							"tagName": to.Ptr("value"),
						},
						RunOutputName: to.Ptr("image_it_pir_1"),
						ImageID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/image_it_1"),
						Location:      to.Ptr("1_location"),
					}},
				Source: &armvirtualmachineimagebuilder.ImageTemplateManagedImageSource{
					Type:    to.Ptr("ManagedImage"),
					ImageID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/images/source_image"),
				},
				VMProfile: &armvirtualmachineimagebuilder.ImageTemplateVMProfile{
					OSDiskSizeGB: to.Ptr[int32](64),
					VMSize:       to.Ptr("Standard_D2s_v3"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImageTemplate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImageTemplate)
			t.Fatalf("Mock response is not equal to example response for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/CreateImageTemplateLinux.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/CreateImageTemplateWindows.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an Image Template for Windows."},
	})
	client = armvirtualmachineimagebuilder.NewVirtualMachineImageTemplatesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImageTemplate",
		armvirtualmachineimagebuilder.ImageTemplate{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"imagetemplate_tag1": to.Ptr("IT_T1"),
				"imagetemplate_tag2": to.Ptr("IT_T2"),
			},
			Identity: &armvirtualmachineimagebuilder.ImageTemplateIdentity{
				Type: to.Ptr(armvirtualmachineimagebuilder.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvirtualmachineimagebuilder.ComponentsVrq145SchemasImagetemplateidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity_1": {},
				},
			},
			Properties: &armvirtualmachineimagebuilder.ImageTemplateProperties{
				Customize: []armvirtualmachineimagebuilder.ImageTemplateCustomizerClassification{
					&armvirtualmachineimagebuilder.ImageTemplatePowerShellCustomizer{
						Name: to.Ptr("PowerShell (inline) Customizer Example"),
						Type: to.Ptr("PowerShell"),
						Inline: []*string{
							to.Ptr("Powershell command-1"),
							to.Ptr("Powershell command-2"),
							to.Ptr("Powershell command-3")},
					},
					&armvirtualmachineimagebuilder.ImageTemplatePowerShellCustomizer{
						Name: to.Ptr("PowerShell (inline) Customizer Elevated user Example"),
						Type: to.Ptr("PowerShell"),
						Inline: []*string{
							to.Ptr("Powershell command-1"),
							to.Ptr("Powershell command-2"),
							to.Ptr("Powershell command-3")},
						RunElevated: to.Ptr(true),
					},
					&armvirtualmachineimagebuilder.ImageTemplatePowerShellCustomizer{
						Name: to.Ptr("PowerShell (inline) Customizer Elevated Local System user Example"),
						Type: to.Ptr("PowerShell"),
						Inline: []*string{
							to.Ptr("Powershell command-1"),
							to.Ptr("Powershell command-2"),
							to.Ptr("Powershell command-3")},
						RunAsSystem: to.Ptr(true),
						RunElevated: to.Ptr(true),
					},
					&armvirtualmachineimagebuilder.ImageTemplatePowerShellCustomizer{
						Name:      to.Ptr("PowerShell (script) Customizer Example"),
						Type:      to.Ptr("PowerShell"),
						ScriptURI: to.Ptr("https://example.com/path/to/script.ps1"),
						ValidExitCodes: []*int32{
							to.Ptr[int32](0),
							to.Ptr[int32](1)},
					},
					&armvirtualmachineimagebuilder.ImageTemplatePowerShellCustomizer{
						Name:        to.Ptr("PowerShell (script) Customizer Elevated Local System user Example"),
						Type:        to.Ptr("PowerShell"),
						RunElevated: to.Ptr(true),
						ScriptURI:   to.Ptr("https://example.com/path/to/script.ps1"),
						ValidExitCodes: []*int32{
							to.Ptr[int32](0),
							to.Ptr[int32](1)},
					},
					&armvirtualmachineimagebuilder.ImageTemplatePowerShellCustomizer{
						Name:        to.Ptr("PowerShell (script) Customizer Elevated Local System user Example"),
						Type:        to.Ptr("PowerShell"),
						RunAsSystem: to.Ptr(true),
						RunElevated: to.Ptr(true),
						ScriptURI:   to.Ptr("https://example.com/path/to/script.ps1"),
						ValidExitCodes: []*int32{
							to.Ptr[int32](0),
							to.Ptr[int32](1)},
					},
					&armvirtualmachineimagebuilder.ImageTemplateRestartCustomizer{
						Name:                to.Ptr("Restart Customizer Example"),
						Type:                to.Ptr("WindowsRestart"),
						RestartCheckCommand: to.Ptr("powershell -command \"& {Write-Output 'restarted.'}\""),
						RestartCommand:      to.Ptr("shutdown /f /r /t 0 /c \"packer restart\""),
						RestartTimeout:      to.Ptr("10m"),
					},
					&armvirtualmachineimagebuilder.ImageTemplateWindowsUpdateCustomizer{
						Name: to.Ptr("Windows Update Customizer Example"),
						Type: to.Ptr("WindowsUpdate"),
						Filters: []*string{
							to.Ptr("$_.BrowseOnly")},
						SearchCriteria: to.Ptr("BrowseOnly=0 and IsInstalled=0"),
						UpdateLimit:    to.Ptr[int32](100),
					}},
				Distribute: []armvirtualmachineimagebuilder.ImageTemplateDistributorClassification{
					&armvirtualmachineimagebuilder.ImageTemplateManagedImageDistributor{
						Type: to.Ptr("ManagedImage"),
						ArtifactTags: map[string]*string{
							"tagName": to.Ptr("value"),
						},
						RunOutputName: to.Ptr("image_it_pir_1"),
						ImageID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/image_it_1"),
						Location:      to.Ptr("1_location"),
					}},
				Source: &armvirtualmachineimagebuilder.ImageTemplateManagedImageSource{
					Type:    to.Ptr("ManagedImage"),
					ImageID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/images/source_image"),
				},
				VMProfile: &armvirtualmachineimagebuilder.ImageTemplateVMProfile{
					OSDiskSizeGB: to.Ptr[int32](64),
					VMSize:       to.Ptr("Standard_D2s_v3"),
					VnetConfig: &armvirtualmachineimagebuilder.VirtualNetworkConfig{
						SubnetID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet_name/subnets/subnet_name"),
					},
				},
			},
		},
		&armvirtualmachineimagebuilder.VirtualMachineImageTemplatesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/CreateImageTemplateWindows.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/CreateImageTemplateWindows.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvirtualmachineimagebuilder.ImageTemplate{
			Name:     to.Ptr("myImageTemplate"),
			Type:     to.Ptr("Microsoft.VirtualMachineImages/imageTemplate"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/myImageTemplate"),
			Location: to.Ptr("westus"),
			Identity: &armvirtualmachineimagebuilder.ImageTemplateIdentity{
				Type: to.Ptr(armvirtualmachineimagebuilder.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvirtualmachineimagebuilder.ComponentsVrq145SchemasImagetemplateidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity_1": {
						ClientID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
						PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
			},
			Properties: &armvirtualmachineimagebuilder.ImageTemplateProperties{
				Customize: []armvirtualmachineimagebuilder.ImageTemplateCustomizerClassification{
					&armvirtualmachineimagebuilder.ImageTemplatePowerShellCustomizer{
						Name: to.Ptr("PowerShell (inline) Customizer Example"),
						Type: to.Ptr("PowerShell"),
						Inline: []*string{
							to.Ptr("Powershell command-1"),
							to.Ptr("Powershell command-2"),
							to.Ptr("Powershell command-3")},
						RunAsSystem: to.Ptr(false),
						RunElevated: to.Ptr(false),
					},
					&armvirtualmachineimagebuilder.ImageTemplatePowerShellCustomizer{
						Name: to.Ptr("PowerShell (inline) Customizer Elevated user Example"),
						Type: to.Ptr("PowerShell"),
						Inline: []*string{
							to.Ptr("Powershell command-1"),
							to.Ptr("Powershell command-2"),
							to.Ptr("Powershell command-3")},
						RunAsSystem: to.Ptr(false),
						RunElevated: to.Ptr(true),
					},
					&armvirtualmachineimagebuilder.ImageTemplatePowerShellCustomizer{
						Name: to.Ptr("PowerShell (inline) Customizer Elevated Local System user Example"),
						Type: to.Ptr("PowerShell"),
						Inline: []*string{
							to.Ptr("Powershell command-1"),
							to.Ptr("Powershell command-2"),
							to.Ptr("Powershell command-3")},
						RunAsSystem: to.Ptr(true),
						RunElevated: to.Ptr(true),
					},
					&armvirtualmachineimagebuilder.ImageTemplatePowerShellCustomizer{
						Name:        to.Ptr("PowerShell (script) Customizer Example"),
						Type:        to.Ptr("PowerShell"),
						RunAsSystem: to.Ptr(false),
						RunElevated: to.Ptr(false),
						ScriptURI:   to.Ptr("https://example.com/path/to/script.ps1"),
						ValidExitCodes: []*int32{
							to.Ptr[int32](0),
							to.Ptr[int32](1)},
					},
					&armvirtualmachineimagebuilder.ImageTemplatePowerShellCustomizer{
						Name:        to.Ptr("PowerShell (script) Customizer Elevated Local System user Example"),
						Type:        to.Ptr("PowerShell"),
						RunAsSystem: to.Ptr(false),
						RunElevated: to.Ptr(true),
						ScriptURI:   to.Ptr("https://example.com/path/to/script.ps1"),
						ValidExitCodes: []*int32{
							to.Ptr[int32](0),
							to.Ptr[int32](1)},
					},
					&armvirtualmachineimagebuilder.ImageTemplatePowerShellCustomizer{
						Name:        to.Ptr("PowerShell (script) Customizer Elevated Local System user Example"),
						Type:        to.Ptr("PowerShell"),
						RunAsSystem: to.Ptr(true),
						RunElevated: to.Ptr(true),
						ScriptURI:   to.Ptr("https://example.com/path/to/script.ps1"),
						ValidExitCodes: []*int32{
							to.Ptr[int32](0),
							to.Ptr[int32](1)},
					},
					&armvirtualmachineimagebuilder.ImageTemplateRestartCustomizer{
						Name:                to.Ptr("Restart Customizer Example"),
						Type:                to.Ptr("WindowsRestart"),
						RestartCheckCommand: to.Ptr("powershell -command \"& {Write-Output 'restarted.'}\""),
						RestartCommand:      to.Ptr("shutdown /f /r /t 0 /c \"packer restart\""),
						RestartTimeout:      to.Ptr("10m"),
					},
					&armvirtualmachineimagebuilder.ImageTemplateWindowsUpdateCustomizer{
						Name: to.Ptr("Windows Update Customizer Example"),
						Type: to.Ptr("WindowsUpdate"),
						Filters: []*string{
							to.Ptr("$_.BrowseOnly")},
						SearchCriteria: to.Ptr("BrowseOnly=0 and IsInstalled=0"),
						UpdateLimit:    to.Ptr[int32](100),
					}},
				Distribute: []armvirtualmachineimagebuilder.ImageTemplateDistributorClassification{
					&armvirtualmachineimagebuilder.ImageTemplateManagedImageDistributor{
						Type: to.Ptr("ManagedImage"),
						ArtifactTags: map[string]*string{
							"tagName": to.Ptr("value"),
						},
						RunOutputName: to.Ptr("image_it_pir_1"),
						ImageID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/image_it_1"),
						Location:      to.Ptr("1_location"),
					}},
				Source: &armvirtualmachineimagebuilder.ImageTemplateManagedImageSource{
					Type:    to.Ptr("ManagedImage"),
					ImageID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/images/source_image"),
				},
				VMProfile: &armvirtualmachineimagebuilder.ImageTemplateVMProfile{
					OSDiskSizeGB: to.Ptr[int32](64),
					VMSize:       to.Ptr("Standard_D2s_v3"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImageTemplate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImageTemplate)
			t.Fatalf("Mock response is not equal to example response for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/CreateImageTemplateWindows.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineImageTemplates_Update(t *testing.T) {
	// From example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/UpdateImageTemplateToRemoveIdentities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Remove identities for an Image Template."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvirtualmachineimagebuilder.NewVirtualMachineImageTemplatesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myImageTemplate",
		armvirtualmachineimagebuilder.ImageTemplateUpdateParameters{
			Identity: &armvirtualmachineimagebuilder.ImageTemplateIdentity{
				Type: to.Ptr(armvirtualmachineimagebuilder.ResourceIdentityTypeNone),
			},
		},
		&armvirtualmachineimagebuilder.VirtualMachineImageTemplatesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/UpdateImageTemplateToRemoveIdentities.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/UpdateImageTemplateToRemoveIdentities.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvirtualmachineimagebuilder.ImageTemplate{
			Name:     to.Ptr("myImageTemplate"),
			Type:     to.Ptr("Microsoft.VirtualMachineImages/imageTemplate"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/myImageTemplate"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"new-tag": to.Ptr("new-value"),
			},
			Identity: &armvirtualmachineimagebuilder.ImageTemplateIdentity{
				Type: to.Ptr(armvirtualmachineimagebuilder.ResourceIdentityTypeNone),
			},
			Properties: &armvirtualmachineimagebuilder.ImageTemplateProperties{
				Customize: []armvirtualmachineimagebuilder.ImageTemplateCustomizerClassification{
					&armvirtualmachineimagebuilder.ImageTemplateShellCustomizer{
						Name:      to.Ptr("Shell customization example"),
						Type:      to.Ptr("Shell"),
						ScriptURI: to.Ptr("https://example.com/path/to/script.sh"),
					}},
				Distribute: []armvirtualmachineimagebuilder.ImageTemplateDistributorClassification{
					&armvirtualmachineimagebuilder.ImageTemplateManagedImageDistributor{
						Type: to.Ptr("ManagedImage"),
						ArtifactTags: map[string]*string{
							"tagName": to.Ptr("value"),
						},
						RunOutputName: to.Ptr("image_it_pir_1"),
						ImageID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/image_it_1"),
						Location:      to.Ptr("1_location"),
					}},
				Source: &armvirtualmachineimagebuilder.ImageTemplateManagedImageSource{
					Type:    to.Ptr("ManagedImage"),
					ImageID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/source_rg/providers/Microsoft.Compute/images/source_image"),
				},
				VMProfile: &armvirtualmachineimagebuilder.ImageTemplateVMProfile{
					OSDiskSizeGB: to.Ptr[int32](64),
					VMSize:       to.Ptr("Standard_D2s_v3"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImageTemplate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImageTemplate)
			t.Fatalf("Mock response is not equal to example response for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/UpdateImageTemplateToRemoveIdentities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/UpdateImageTemplateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the tags for an Image Template."},
	})
	client = armvirtualmachineimagebuilder.NewVirtualMachineImageTemplatesClient("{subscription-id}", cred, &options)
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myImageTemplate",
		armvirtualmachineimagebuilder.ImageTemplateUpdateParameters{
			Tags: map[string]*string{
				"new-tag": to.Ptr("new-value"),
			},
		},
		&armvirtualmachineimagebuilder.VirtualMachineImageTemplatesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/UpdateImageTemplateTags.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/UpdateImageTemplateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvirtualmachineimagebuilder.ImageTemplate{
			Name:     to.Ptr("myImageTemplate"),
			Type:     to.Ptr("Microsoft.VirtualMachineImages/imageTemplate"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/myImageTemplate"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"new-tag": to.Ptr("new-value"),
			},
			Identity: &armvirtualmachineimagebuilder.ImageTemplateIdentity{
				Type: to.Ptr(armvirtualmachineimagebuilder.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvirtualmachineimagebuilder.ComponentsVrq145SchemasImagetemplateidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity_1": {
						ClientID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
						PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
			},
			Properties: &armvirtualmachineimagebuilder.ImageTemplateProperties{
				Customize: []armvirtualmachineimagebuilder.ImageTemplateCustomizerClassification{
					&armvirtualmachineimagebuilder.ImageTemplateShellCustomizer{
						Name:      to.Ptr("Shell customization example"),
						Type:      to.Ptr("Shell"),
						ScriptURI: to.Ptr("https://example.com/path/to/script.sh"),
					}},
				Distribute: []armvirtualmachineimagebuilder.ImageTemplateDistributorClassification{
					&armvirtualmachineimagebuilder.ImageTemplateManagedImageDistributor{
						Type: to.Ptr("ManagedImage"),
						ArtifactTags: map[string]*string{
							"tagName": to.Ptr("value"),
						},
						RunOutputName: to.Ptr("image_it_pir_1"),
						ImageID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/image_it_1"),
						Location:      to.Ptr("1_location"),
					}},
				Source: &armvirtualmachineimagebuilder.ImageTemplateManagedImageSource{
					Type:    to.Ptr("ManagedImage"),
					ImageID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/source_rg/providers/Microsoft.Compute/images/source_image"),
				},
				VMProfile: &armvirtualmachineimagebuilder.ImageTemplateVMProfile{
					OSDiskSizeGB: to.Ptr[int32](64),
					VMSize:       to.Ptr("Standard_D2s_v3"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImageTemplate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImageTemplate)
			t.Fatalf("Mock response is not equal to example response for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/UpdateImageTemplateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineImageTemplates_Get(t *testing.T) {
	// From example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/GetImageTemplate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Retrieve an Image Template."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvirtualmachineimagebuilder.NewVirtualMachineImageTemplatesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myImageTemplate",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/GetImageTemplate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvirtualmachineimagebuilder.ImageTemplate{
			Name:     to.Ptr("myImageTemplate"),
			Type:     to.Ptr("Microsoft.VirtualMachineImages/imageTemplate"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/myImageTemplate"),
			Location: to.Ptr("westus"),
			Identity: &armvirtualmachineimagebuilder.ImageTemplateIdentity{
				Type: to.Ptr(armvirtualmachineimagebuilder.ResourceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvirtualmachineimagebuilder.ComponentsVrq145SchemasImagetemplateidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity_1": {
						ClientID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
						PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
			},
			Properties: &armvirtualmachineimagebuilder.ImageTemplateProperties{
				Customize: []armvirtualmachineimagebuilder.ImageTemplateCustomizerClassification{
					&armvirtualmachineimagebuilder.ImageTemplateShellCustomizer{
						Name:      to.Ptr("Shell Customizer Example"),
						Type:      to.Ptr("Shell"),
						ScriptURI: to.Ptr("https://example.com/path/to/script.sh"),
					}},
				Distribute: []armvirtualmachineimagebuilder.ImageTemplateDistributorClassification{
					&armvirtualmachineimagebuilder.ImageTemplateManagedImageDistributor{
						Type: to.Ptr("ManagedImage"),
						ArtifactTags: map[string]*string{
							"tagName": to.Ptr("value"),
						},
						RunOutputName: to.Ptr("image_it_pir_1"),
						ImageID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/image_it_1"),
						Location:      to.Ptr("1_location"),
					}},
				Source: &armvirtualmachineimagebuilder.ImageTemplateManagedImageSource{
					Type:    to.Ptr("ManagedImage"),
					ImageID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/source_rg/providers/Microsoft.Compute/images/source_image"),
				},
				VMProfile: &armvirtualmachineimagebuilder.ImageTemplateVMProfile{
					OSDiskSizeGB: to.Ptr[int32](64),
					VMSize:       to.Ptr("Standard_D2s_v3"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ImageTemplate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ImageTemplate)
			t.Fatalf("Mock response is not equal to example response for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/GetImageTemplate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineImageTemplates_Delete(t *testing.T) {
	// From example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/DeleteImageTemplate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an Image Template."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvirtualmachineimagebuilder.NewVirtualMachineImageTemplatesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myImageTemplate",
		&armvirtualmachineimagebuilder.VirtualMachineImageTemplatesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/DeleteImageTemplate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/DeleteImageTemplate.json: %v", err)
	}
}

func TestVirtualMachineImageTemplates_Run(t *testing.T) {
	// From example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/RunImageTemplate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create image(s) from existing imageTemplate."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvirtualmachineimagebuilder.NewVirtualMachineImageTemplatesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginRun(ctx,
		"myResourceGroup",
		"myImageTemplate",
		&armvirtualmachineimagebuilder.VirtualMachineImageTemplatesClientBeginRunOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/RunImageTemplate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/RunImageTemplate.json: %v", err)
	}
}

func TestVirtualMachineImageTemplates_Cancel(t *testing.T) {
	// From example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/CancelImageBuild.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cancel the image build based on the imageTemplate."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvirtualmachineimagebuilder.NewVirtualMachineImageTemplatesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCancel(ctx,
		"myResourceGroup",
		"myImageTemplate",
		&armvirtualmachineimagebuilder.VirtualMachineImageTemplatesClientBeginCancelOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/CancelImageBuild.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/CancelImageBuild.json: %v", err)
	}
}

func TestVirtualMachineImageTemplates_ListRunOutputs(t *testing.T) {
	// From example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/ListRunOutputs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Retrieve a list of all outputs created by the last run of an Image Template"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvirtualmachineimagebuilder.NewVirtualMachineImageTemplatesClient("{subscription-id}", cred, &options)
	pager := client.ListRunOutputs("myResourceGroup",
		"myImageTemplate",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/ListRunOutputs.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvirtualmachineimagebuilder.RunOutputCollection{
			Value: []*armvirtualmachineimagebuilder.RunOutput{
				{
					Name: to.Ptr("myManagedImageOutput"),
					Type: to.Ptr("Microsoft.VirtualMachineImages/imageTemplates/runOutputs"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourcegroups/myResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/myImageTemplate/runOutputs/myManagedImageOutput"),
					Properties: &armvirtualmachineimagebuilder.RunOutputProperties{
						ArtifactID:        to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/output_managed_image"),
						ProvisioningState: to.Ptr(armvirtualmachineimagebuilder.ProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("mySharedImageOutput"),
					Type: to.Ptr("Microsoft.VirtualMachineImages/imageTemplates/runOutputs"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourcegroups/myResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/myImageTemplate/runOutputs/mySharedImageOutput"),
					Properties: &armvirtualmachineimagebuilder.RunOutputProperties{
						ArtifactID:        to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/galleries/Gallery1/images/SharedImageOutput/imageversions/1.2.3"),
						ProvisioningState: to.Ptr(armvirtualmachineimagebuilder.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RunOutputCollection) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RunOutputCollection)
			t.Fatalf("Mock response is not equal to example response for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/ListRunOutputs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineImageTemplates_GetRunOutput(t *testing.T) {
	// From example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/GetRunOutput.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Retrieve single runOutput"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvirtualmachineimagebuilder.NewVirtualMachineImageTemplatesClient("{subscription-id}", cred, &options)
	res, err := client.GetRunOutput(ctx,
		"myResourceGroup",
		"myImageTemplate",
		"myManagedImageOutput",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/GetRunOutput.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvirtualmachineimagebuilder.RunOutput{
			Name: to.Ptr("myManagedImageOutput"),
			Type: to.Ptr("Microsoft.VirtualMachineImages/imageTemplates/runOutputs"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourcegroups/myResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/myImageTemplate/runOutputs/myManagedImageOutput"),
			Properties: &armvirtualmachineimagebuilder.RunOutputProperties{
				ArtifactID:        to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/output_managed_image"),
				ProvisioningState: to.Ptr(armvirtualmachineimagebuilder.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RunOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RunOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/GetRunOutput.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Retrieve operations list"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvirtualmachineimagebuilder.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvirtualmachineimagebuilder.OperationListResult{
			Value: []*armvirtualmachineimagebuilder.Operation{
				{
					Name: to.Ptr("Microsoft.VirtualMachineImages/register/action"),
					Display: &armvirtualmachineimagebuilder.OperationDisplay{
						Description: to.Ptr("Register Virtual Machine Image Builder RP"),
						Operation:   to.Ptr("Register Virtual Machine Image Builder RP"),
						Provider:    to.Ptr("Virtual Machine Image Builder"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.VirtualMachineImages/unregister/action"),
					Display: &armvirtualmachineimagebuilder.OperationDisplay{
						Description: to.Ptr("Unregister Virtual Machine Image Builder RP"),
						Operation:   to.Ptr("Unregister Virtual Machine Image Builder RP"),
						Provider:    to.Ptr("Virtual Machine Image Builder"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.VirtualMachineImages/imageTemplates/read"),
					Display: &armvirtualmachineimagebuilder.OperationDisplay{
						Description: to.Ptr("Get a VM image template instance resource"),
						Operation:   to.Ptr("Get a VM image template instance resource"),
						Provider:    to.Ptr("Virtual Machine Image Builder"),
						Resource:    to.Ptr("VM Image template"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.VirtualMachineImages/imageTemplates/write"),
					Display: &armvirtualmachineimagebuilder.OperationDisplay{
						Description: to.Ptr("Create or update a VM image template instance resource"),
						Operation:   to.Ptr("Create or update a VM image template instance resource"),
						Provider:    to.Ptr("Virtual Machine Image Builder"),
						Resource:    to.Ptr("VM Image template"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.VirtualMachineImages/imageTemplates/delete"),
					Display: &armvirtualmachineimagebuilder.OperationDisplay{
						Description: to.Ptr("Delete a VM image template instance resource"),
						Operation:   to.Ptr("Delete a VM image template instance resource"),
						Provider:    to.Ptr("Virtual Machine Image Builder"),
						Resource:    to.Ptr("VM Image template"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.VirtualMachineImages/imageTemplates/run/action"),
					Display: &armvirtualmachineimagebuilder.OperationDisplay{
						Description: to.Ptr("Execute a VM image template to produce its outputs"),
						Operation:   to.Ptr("Execute a VM image template to produce its outputs"),
						Provider:    to.Ptr("Virtual Machine Image Builder"),
						Resource:    to.Ptr("VM Image template"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.VirtualMachineImages/imageTemplates/runOutputs/read"),
					Display: &armvirtualmachineimagebuilder.OperationDisplay{
						Description: to.Ptr("Get a VM image template run output resource"),
						Operation:   to.Ptr("Get a VM image template run output resource"),
						Provider:    to.Ptr("Virtual Machine Image Builder"),
						Resource:    to.Ptr("VM Image template run output"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.VirtualMachineImages/operations/read"),
					Display: &armvirtualmachineimagebuilder.OperationDisplay{
						Description: to.Ptr("List available Virtual Machine Image Builder Operations"),
						Operation:   to.Ptr("List available Virtual Machine Image Builder Operations"),
						Provider:    to.Ptr("Virtual Machine Image Builder"),
						Resource:    to.Ptr("Operation"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.VirtualMachineImages/locations/operations/read"),
					Display: &armvirtualmachineimagebuilder.OperationDisplay{
						Description: to.Ptr("Get the status of an asynchronous operation"),
						Operation:   to.Ptr("Get the status of an asynchronous operation"),
						Provider:    to.Ptr("Virtual Machine Image Builder"),
						Resource:    to.Ptr("Asynchronous Operation"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.VirtualMachineImages/imageTemplates/cancel/action"),
					Display: &armvirtualmachineimagebuilder.OperationDisplay{
						Description: to.Ptr("Cancel a running image build"),
						Operation:   to.Ptr("Cancel a running image build"),
						Provider:    to.Ptr("Virtual Machine Image Builder"),
						Resource:    to.Ptr("VM Image template"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/imagebuilder/resource-manager/Microsoft.VirtualMachineImages/stable/2021-10-01/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
