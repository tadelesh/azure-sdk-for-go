//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armportal_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"
	"time"

	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/portal/armportal"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/operationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the portal operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armportal.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/operationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armportal.ResourceProviderOperationList{
			Value: []*armportal.ResourceProviderOperation{
				{
					Name: to.Ptr("Microsoft.Portal/dashboards/read"),
					Display: &armportal.ResourceProviderOperationDisplay{
						Description: to.Ptr("Reads the dashboards for the subscription."),
						Operation:   to.Ptr("Get Dashboard"),
						Provider:    to.Ptr("Microsoft Portal"),
						Resource:    to.Ptr("Dashboards"),
					},
					IsDataAction: to.Ptr("false"),
				},
				{
					Name: to.Ptr("Microsoft.Portal/dashboards/write"),
					Display: &armportal.ResourceProviderOperationDisplay{
						Description: to.Ptr("Add or modify dashboard to a subscription."),
						Operation:   to.Ptr("Set Dashboard"),
						Provider:    to.Ptr("Microsoft Portal"),
						Resource:    to.Ptr("Dashboards"),
					},
					IsDataAction: to.Ptr("false"),
				},
				{
					Name: to.Ptr("Microsoft.Portal/dashboards/delete"),
					Display: &armportal.ResourceProviderOperationDisplay{
						Description: to.Ptr("Removes the dashboard from the subscription."),
						Operation:   to.Ptr("Delete Dashboard"),
						Provider:    to.Ptr("Microsoft Portal"),
						Resource:    to.Ptr("Dashboards"),
					},
					IsDataAction: to.Ptr("false"),
				},
				{
					Name: to.Ptr("Microsoft.Portal/register/action"),
					Display: &armportal.ResourceProviderOperationDisplay{
						Description: to.Ptr("Registers the subscription for the portal resource provider and enables shared dashboards."),
						Operation:   to.Ptr("Registers the Portal Resource Provider"),
						Provider:    to.Ptr("Microsoft Portal"),
						Resource:    to.Ptr("Portal Resource Provider"),
					},
					IsDataAction: to.Ptr("false"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceProviderOperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceProviderOperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/operationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDashboards_CreateOrUpdate(t *testing.T) {
	// From example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/createOrUpdateDashboard.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a Dashboard"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armportal.NewDashboardsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testRG",
		"testDashboard",
		armportal.Dashboard{
			Location: to.Ptr("eastus"),
			Properties: &armportal.DashboardProperties{
				Lenses: []*armportal.DashboardLens{
					{
						Order: to.Ptr[int32](1),
						Parts: []*armportal.DashboardParts{
							{
								Position: &armportal.DashboardPartsPosition{
									ColSpan: to.Ptr[int32](3),
									RowSpan: to.Ptr[int32](4),
									X:       to.Ptr[int32](1),
									Y:       to.Ptr[int32](2),
								},
							},
							{
								Position: &armportal.DashboardPartsPosition{
									ColSpan: to.Ptr[int32](6),
									RowSpan: to.Ptr[int32](6),
									X:       to.Ptr[int32](5),
									Y:       to.Ptr[int32](5),
								},
							}},
					},
					{
						Order: to.Ptr[int32](2),
						Parts: []*armportal.DashboardParts{},
					}},
				Metadata: map[string]interface{}{
					"metadata": map[string]interface{}{
						"ColSpan": float64(2),
						"RowSpan": float64(1),
						"X":       float64(4),
						"Y":       float64(3),
					},
				},
			},
			Tags: map[string]*string{
				"aKey":       to.Ptr("aValue"),
				"anotherKey": to.Ptr("anotherValue"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/createOrUpdateDashboard.json: %v", err)
	}
	// Response check
	{
		exampleRes := armportal.Dashboard{
			Name:     to.Ptr("testDashboard"),
			Type:     to.Ptr("Microsoft.Portal/dashboards"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.Portal/dashboards/testDashboard"),
			Location: to.Ptr("eastus"),
			Properties: &armportal.DashboardProperties{
				Lenses: []*armportal.DashboardLens{
					{
						Order: to.Ptr[int32](1),
						Parts: []*armportal.DashboardParts{
							{
								Position: &armportal.DashboardPartsPosition{
									ColSpan: to.Ptr[int32](3),
									RowSpan: to.Ptr[int32](4),
									X:       to.Ptr[int32](1),
									Y:       to.Ptr[int32](2),
								},
							},
							{
								Position: &armportal.DashboardPartsPosition{
									ColSpan: to.Ptr[int32](6),
									RowSpan: to.Ptr[int32](6),
									X:       to.Ptr[int32](5),
									Y:       to.Ptr[int32](5),
								},
							}},
					},
					{
						Order: to.Ptr[int32](2),
						Parts: []*armportal.DashboardParts{},
					}},
				Metadata: map[string]interface{}{
					"metadata": map[string]interface{}{
						"ColSpan": float64(2),
						"RowSpan": float64(1),
						"X":       float64(4),
						"Y":       float64(3),
					},
				},
			},
			Tags: map[string]*string{
				"aKey":       to.Ptr("aValue"),
				"anotherKey": to.Ptr("anotherValue"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Dashboard) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Dashboard)
			t.Fatalf("Mock response is not equal to example response for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/createOrUpdateDashboard.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDashboards_Delete(t *testing.T) {
	// From example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/deleteDashboard.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Dashboard"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armportal.NewDashboardsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"testRG",
		"testDashboard",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/deleteDashboard.json: %v", err)
	}
}

func TestDashboards_Get(t *testing.T) {
	// From example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/getDashboard.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Dashboard"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armportal.NewDashboardsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"testRG",
		"testDashboard",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/getDashboard.json: %v", err)
	}
	// Response check
	{
		exampleRes := armportal.Dashboard{
			Name:     to.Ptr("testDashboard"),
			Type:     to.Ptr("Microsoft.Portal/dashboards"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.Portal/dashboards/testDashboard"),
			Location: to.Ptr("eastus"),
			Properties: &armportal.DashboardProperties{
				Lenses: []*armportal.DashboardLens{
					{
						Order: to.Ptr[int32](1),
						Parts: []*armportal.DashboardParts{
							{
								Position: &armportal.DashboardPartsPosition{
									ColSpan: to.Ptr[int32](3),
									RowSpan: to.Ptr[int32](4),
									X:       to.Ptr[int32](1),
									Y:       to.Ptr[int32](2),
								},
							},
							{
								Position: &armportal.DashboardPartsPosition{
									ColSpan: to.Ptr[int32](6),
									RowSpan: to.Ptr[int32](6),
									X:       to.Ptr[int32](5),
									Y:       to.Ptr[int32](5),
								},
							}},
					},
					{
						Order: to.Ptr[int32](2),
						Parts: []*armportal.DashboardParts{},
					}},
				Metadata: map[string]interface{}{
					"metadata": map[string]interface{}{
						"ColSpan": float64(2),
						"RowSpan": float64(1),
						"X":       float64(4),
						"Y":       float64(3),
					},
				},
			},
			Tags: map[string]*string{
				"aKey":       to.Ptr("aValue"),
				"anotherKey": to.Ptr("anotherValue"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Dashboard) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Dashboard)
			t.Fatalf("Mock response is not equal to example response for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/getDashboard.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDashboards_Update(t *testing.T) {
	// From example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/updateDashboard.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a Dashboard"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armportal.NewDashboardsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"testRG",
		"testDashboard",
		armportal.PatchableDashboard{
			Tags: map[string]*string{
				"aKey":       to.Ptr("bValue"),
				"anotherKey": to.Ptr("anotherValue2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/updateDashboard.json: %v", err)
	}
	// Response check
	{
		exampleRes := armportal.Dashboard{
			Name:     to.Ptr("testDashboard"),
			Type:     to.Ptr("Microsoft.Portal/dashboards"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.Portal/dashboards/testDashboard"),
			Location: to.Ptr("eastus"),
			Properties: &armportal.DashboardProperties{
				Lenses: []*armportal.DashboardLens{
					{
						Order: to.Ptr[int32](1),
						Parts: []*armportal.DashboardParts{
							{
								Position: &armportal.DashboardPartsPosition{
									ColSpan: to.Ptr[int32](3),
									RowSpan: to.Ptr[int32](4),
									X:       to.Ptr[int32](1),
									Y:       to.Ptr[int32](2),
								},
							},
							{
								Position: &armportal.DashboardPartsPosition{
									ColSpan: to.Ptr[int32](6),
									RowSpan: to.Ptr[int32](6),
									X:       to.Ptr[int32](5),
									Y:       to.Ptr[int32](5),
								},
							}},
					},
					{
						Order: to.Ptr[int32](2),
						Parts: []*armportal.DashboardParts{},
					}},
				Metadata: map[string]interface{}{
					"metadata": map[string]interface{}{
						"ColSpan": float64(2),
						"RowSpan": float64(1),
						"X":       float64(4),
						"Y":       float64(3),
					},
				},
			},
			Tags: map[string]*string{
				"aKey":       to.Ptr("bValue"),
				"anotherKey": to.Ptr("anotherValue2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Dashboard) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Dashboard)
			t.Fatalf("Mock response is not equal to example response for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/updateDashboard.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDashboards_ListByResourceGroup(t *testing.T) {
	// From example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/listDashboardsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all custom resource providers on the resourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armportal.NewDashboardsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("testRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/listDashboardsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armportal.DashboardListResult{
			Value: []*armportal.Dashboard{
				{
					Name:     to.Ptr("testDashboard"),
					Type:     to.Ptr("Microsoft.Portal/dashboards"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.Portal/dashboards/testDashboard"),
					Location: to.Ptr("eastus"),
					Properties: &armportal.DashboardProperties{
						Lenses: []*armportal.DashboardLens{
							{
								Order: to.Ptr[int32](1),
								Parts: []*armportal.DashboardParts{
									{
										Position: &armportal.DashboardPartsPosition{
											ColSpan: to.Ptr[int32](3),
											RowSpan: to.Ptr[int32](4),
											X:       to.Ptr[int32](1),
											Y:       to.Ptr[int32](2),
										},
									},
									{
										Position: &armportal.DashboardPartsPosition{
											ColSpan: to.Ptr[int32](6),
											RowSpan: to.Ptr[int32](6),
											X:       to.Ptr[int32](5),
											Y:       to.Ptr[int32](5),
										},
									}},
							},
							{
								Order: to.Ptr[int32](2),
								Parts: []*armportal.DashboardParts{},
							}},
						Metadata: map[string]interface{}{
							"metadata": map[string]interface{}{
								"ColSpan": float64(2),
								"RowSpan": float64(1),
								"X":       float64(4),
								"Y":       float64(3),
							},
						},
					},
					Tags: map[string]*string{
						"aKey":       to.Ptr("aValue"),
						"anotherKey": to.Ptr("anotherValue"),
					},
				},
				{
					Name:     to.Ptr("testDashboard2"),
					Type:     to.Ptr("Microsoft.Portal/dashboards"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.Portal/dashboards/testDashboard2"),
					Location: to.Ptr("eastus"),
					Properties: &armportal.DashboardProperties{
						Lenses: []*armportal.DashboardLens{
							{
								Order: to.Ptr[int32](1),
								Parts: []*armportal.DashboardParts{
									{
										Position: &armportal.DashboardPartsPosition{
											ColSpan: to.Ptr[int32](3),
											RowSpan: to.Ptr[int32](4),
											X:       to.Ptr[int32](1),
											Y:       to.Ptr[int32](2),
										},
									},
									{
										Position: &armportal.DashboardPartsPosition{
											ColSpan: to.Ptr[int32](6),
											RowSpan: to.Ptr[int32](6),
											X:       to.Ptr[int32](5),
											Y:       to.Ptr[int32](5),
										},
									}},
							},
							{
								Order: to.Ptr[int32](2),
								Parts: []*armportal.DashboardParts{},
							}},
						Metadata: map[string]interface{}{
							"metadata": map[string]interface{}{
								"ColSpan": float64(2),
								"RowSpan": float64(1),
								"X":       float64(4),
								"Y":       float64(3),
							},
						},
					},
					Tags: map[string]*string{
						"aKey":       to.Ptr("aValue"),
						"anotherKey": to.Ptr("anotherValue"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DashboardListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DashboardListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/listDashboardsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDashboards_ListBySubscription(t *testing.T) {
	// From example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/listDashboardsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all custom resource providers on the subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armportal.NewDashboardsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/listDashboardsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armportal.DashboardListResult{
			Value: []*armportal.Dashboard{
				{
					Name:     to.Ptr("testDashboard"),
					Type:     to.Ptr("Microsoft.Portal/dashboards"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.Portal/dashboards/testDashboard"),
					Location: to.Ptr("eastus"),
					Properties: &armportal.DashboardProperties{
						Lenses: []*armportal.DashboardLens{
							{
								Order: to.Ptr[int32](1),
								Parts: []*armportal.DashboardParts{
									{
										Position: &armportal.DashboardPartsPosition{
											ColSpan: to.Ptr[int32](3),
											RowSpan: to.Ptr[int32](4),
											X:       to.Ptr[int32](1),
											Y:       to.Ptr[int32](2),
										},
									},
									{
										Position: &armportal.DashboardPartsPosition{
											ColSpan: to.Ptr[int32](6),
											RowSpan: to.Ptr[int32](6),
											X:       to.Ptr[int32](5),
											Y:       to.Ptr[int32](5),
										},
									}},
							},
							{
								Order: to.Ptr[int32](2),
								Parts: []*armportal.DashboardParts{},
							}},
						Metadata: map[string]interface{}{
							"metadata": map[string]interface{}{
								"ColSpan": float64(2),
								"RowSpan": float64(1),
								"X":       float64(4),
								"Y":       float64(3),
							},
						},
					},
					Tags: map[string]*string{
						"aKey":       to.Ptr("aValue"),
						"anotherKey": to.Ptr("anotherValue"),
					},
				},
				{
					Name:     to.Ptr("testDashboard2"),
					Type:     to.Ptr("Microsoft.Portal/dashboards"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRG/providers/Microsoft.Portal/dashboards/testDashboard2"),
					Location: to.Ptr("eastus"),
					Properties: &armportal.DashboardProperties{
						Lenses: []*armportal.DashboardLens{
							{
								Order: to.Ptr[int32](1),
								Parts: []*armportal.DashboardParts{
									{
										Position: &armportal.DashboardPartsPosition{
											ColSpan: to.Ptr[int32](3),
											RowSpan: to.Ptr[int32](4),
											X:       to.Ptr[int32](1),
											Y:       to.Ptr[int32](2),
										},
									},
									{
										Position: &armportal.DashboardPartsPosition{
											ColSpan: to.Ptr[int32](6),
											RowSpan: to.Ptr[int32](6),
											X:       to.Ptr[int32](5),
											Y:       to.Ptr[int32](5),
										},
									}},
							},
							{
								Order: to.Ptr[int32](2),
								Parts: []*armportal.DashboardParts{},
							}},
						Metadata: map[string]interface{}{
							"metadata": map[string]interface{}{
								"ColSpan": float64(2),
								"RowSpan": float64(1),
								"X":       float64(4),
								"Y":       float64(3),
							},
						},
					},
					Tags: map[string]*string{
						"aKey":       to.Ptr("aValue"),
						"anotherKey": to.Ptr("anotherValue"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DashboardListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DashboardListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/listDashboardsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantConfigurations_List(t *testing.T) {
	// From example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/TenantConfiguration/GetListOfTenantConfigurations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get list of Tenant configurations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armportal.NewTenantConfigurationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/TenantConfiguration/GetListOfTenantConfigurations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armportal.ConfigurationList{
			Value: []*armportal.Configuration{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Portal/tenantConfiguration"),
					ID:   to.Ptr("/providers/Microsoft.Portal/tenantConfigurations"),
					Properties: &armportal.ConfigurationProperties{
						EnforcePrivateMarkdownStorage: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationList)
			t.Fatalf("Mock response is not equal to example response for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/TenantConfiguration/GetListOfTenantConfigurations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantConfigurations_Get(t *testing.T) {
	// From example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/TenantConfiguration/GetTenantConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Tenant configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armportal.NewTenantConfigurationsClient(cred, &options)
	res, err := client.Get(ctx,
		armportal.ConfigurationNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/TenantConfiguration/GetTenantConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armportal.Configuration{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Portal/tenantConfiguration"),
			ID:   to.Ptr("/providers/Microsoft.Portal/tenantConfigurations/default"),
			Properties: &armportal.ConfigurationProperties{
				EnforcePrivateMarkdownStorage: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Configuration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Configuration)
			t.Fatalf("Mock response is not equal to example response for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/TenantConfiguration/GetTenantConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantConfigurations_Create(t *testing.T) {
	// From example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/TenantConfiguration/CreateOrUpdateTenantConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update Tenant configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armportal.NewTenantConfigurationsClient(cred, &options)
	res, err := client.Create(ctx,
		armportal.ConfigurationNameDefault,
		armportal.Configuration{
			Properties: &armportal.ConfigurationProperties{
				EnforcePrivateMarkdownStorage: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/TenantConfiguration/CreateOrUpdateTenantConfiguration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armportal.Configuration{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Portal/tenantConfiguration"),
			ID:   to.Ptr("/providers/Microsoft.Portal/tenantConfigurations/default"),
			Properties: &armportal.ConfigurationProperties{
				EnforcePrivateMarkdownStorage: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Configuration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Configuration)
			t.Fatalf("Mock response is not equal to example response for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/TenantConfiguration/CreateOrUpdateTenantConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTenantConfigurations_Delete(t *testing.T) {
	// From example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/TenantConfiguration/DeleteTenantConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Tenant configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armportal.NewTenantConfigurationsClient(cred, &options)
	_, err := client.Delete(ctx,
		armportal.ConfigurationNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/TenantConfiguration/DeleteTenantConfiguration.json: %v", err)
	}
}

func TestListTenantConfigurationViolations_List(t *testing.T) {
	// From example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/TenantConfiguration/GetListOfTenantConfigurationViolations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get list of of items that violate tenant's configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armportal.NewListTenantConfigurationViolationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/TenantConfiguration/GetListOfTenantConfigurationViolations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armportal.ViolationsList{
			Value: []*armportal.Violation{
				{
					ErrorMessage: to.Ptr("Tenant is configured to allow only URI configuration for the Markdown tiles on dashboards."),
					ID:           to.Ptr("private/5f4ff99a-efa9-40f9-9c04-6b5716828c0e"),
					UserID:       to.Ptr("<some user id>"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ViolationsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ViolationsList)
			t.Fatalf("Mock response is not equal to example response for example specification/portal/resource-manager/Microsoft.Portal/preview/2020-09-01-preview/examples/TenantConfiguration/GetListOfTenantConfigurationViolations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
