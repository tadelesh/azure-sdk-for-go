//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armiothub

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ResourceClientGetEndpointHealthPager provides operations for iterating over paged responses.
type ResourceClientGetEndpointHealthPager struct {
	client    *ResourceClient
	current   ResourceClientGetEndpointHealthResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceClientGetEndpointHealthResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ResourceClientGetEndpointHealthPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EndpointHealthDataListResult.NextLink == nil || len(*p.current.EndpointHealthDataListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ResourceClientGetEndpointHealthPager) NextPage(ctx context.Context) (ResourceClientGetEndpointHealthResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ResourceClientGetEndpointHealthResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ResourceClientGetEndpointHealthResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ResourceClientGetEndpointHealthResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ResourceClientGetEndpointHealthResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.getEndpointHealthHandleResponse(resp)
	if err != nil {
		return ResourceClientGetEndpointHealthResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ResourceClientGetQuotaMetricsPager provides operations for iterating over paged responses.
type ResourceClientGetQuotaMetricsPager struct {
	client    *ResourceClient
	current   ResourceClientGetQuotaMetricsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceClientGetQuotaMetricsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ResourceClientGetQuotaMetricsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.QuotaMetricInfoListResult.NextLink == nil || len(*p.current.QuotaMetricInfoListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ResourceClientGetQuotaMetricsPager) NextPage(ctx context.Context) (ResourceClientGetQuotaMetricsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ResourceClientGetQuotaMetricsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ResourceClientGetQuotaMetricsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ResourceClientGetQuotaMetricsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ResourceClientGetQuotaMetricsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.getQuotaMetricsHandleResponse(resp)
	if err != nil {
		return ResourceClientGetQuotaMetricsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ResourceClientGetValidSKUsPager provides operations for iterating over paged responses.
type ResourceClientGetValidSKUsPager struct {
	client    *ResourceClient
	current   ResourceClientGetValidSKUsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceClientGetValidSKUsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ResourceClientGetValidSKUsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SKUDescriptionListResult.NextLink == nil || len(*p.current.SKUDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ResourceClientGetValidSKUsPager) NextPage(ctx context.Context) (ResourceClientGetValidSKUsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ResourceClientGetValidSKUsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ResourceClientGetValidSKUsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ResourceClientGetValidSKUsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ResourceClientGetValidSKUsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.getValidSKUsHandleResponse(resp)
	if err != nil {
		return ResourceClientGetValidSKUsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ResourceClientListByResourceGroupPager provides operations for iterating over paged responses.
type ResourceClientListByResourceGroupPager struct {
	client    *ResourceClient
	current   ResourceClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ResourceClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DescriptionListResult.NextLink == nil || len(*p.current.DescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ResourceClientListByResourceGroupPager) NextPage(ctx context.Context) (ResourceClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ResourceClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ResourceClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ResourceClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ResourceClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ResourceClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ResourceClientListBySubscriptionPager provides operations for iterating over paged responses.
type ResourceClientListBySubscriptionPager struct {
	client    *ResourceClient
	current   ResourceClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ResourceClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DescriptionListResult.NextLink == nil || len(*p.current.DescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ResourceClientListBySubscriptionPager) NextPage(ctx context.Context) (ResourceClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ResourceClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ResourceClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ResourceClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ResourceClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ResourceClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ResourceClientListEventHubConsumerGroupsPager provides operations for iterating over paged responses.
type ResourceClientListEventHubConsumerGroupsPager struct {
	client    *ResourceClient
	current   ResourceClientListEventHubConsumerGroupsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceClientListEventHubConsumerGroupsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ResourceClientListEventHubConsumerGroupsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventHubConsumerGroupsListResult.NextLink == nil || len(*p.current.EventHubConsumerGroupsListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ResourceClientListEventHubConsumerGroupsPager) NextPage(ctx context.Context) (ResourceClientListEventHubConsumerGroupsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ResourceClientListEventHubConsumerGroupsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ResourceClientListEventHubConsumerGroupsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ResourceClientListEventHubConsumerGroupsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ResourceClientListEventHubConsumerGroupsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listEventHubConsumerGroupsHandleResponse(resp)
	if err != nil {
		return ResourceClientListEventHubConsumerGroupsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ResourceClientListJobsPager provides operations for iterating over paged responses.
type ResourceClientListJobsPager struct {
	client    *ResourceClient
	current   ResourceClientListJobsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceClientListJobsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ResourceClientListJobsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobResponseListResult.NextLink == nil || len(*p.current.JobResponseListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ResourceClientListJobsPager) NextPage(ctx context.Context) (ResourceClientListJobsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ResourceClientListJobsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ResourceClientListJobsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ResourceClientListJobsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ResourceClientListJobsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listJobsHandleResponse(resp)
	if err != nil {
		return ResourceClientListJobsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ResourceClientListKeysPager provides operations for iterating over paged responses.
type ResourceClientListKeysPager struct {
	client    *ResourceClient
	current   ResourceClientListKeysResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceClientListKeysResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ResourceClientListKeysPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SharedAccessSignatureAuthorizationRuleListResult.NextLink == nil || len(*p.current.SharedAccessSignatureAuthorizationRuleListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ResourceClientListKeysPager) NextPage(ctx context.Context) (ResourceClientListKeysResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ResourceClientListKeysResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ResourceClientListKeysResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ResourceClientListKeysResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ResourceClientListKeysResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listKeysHandleResponse(resp)
	if err != nil {
		return ResourceClientListKeysResponse{}, err
	}
	p.current = result
	return p.current, nil
}
