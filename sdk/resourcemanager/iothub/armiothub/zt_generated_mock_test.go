//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armiothub_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iothub/armiothub"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_operations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_operations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiothub.OperationListResult{
			Value: []*armiothub.Operation{
				{
					Name: to.Ptr("Microsoft.Devices/register/action"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Register the subscription for the IotHub resource provider and enables the creation of IotHub resources"),
						Operation:   to.Ptr("Register Resource Provider"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/IotHubs/diagnosticSettings/read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Get Diagnostic Setting"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/IotHubs/diagnosticSettings/write"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Set Diagnostic Setting"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/IotHubs/metricDefinitions/read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Gets the available metrics for the IotHub service"),
						Operation:   to.Ptr("Read IotHub service metric definitions"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/IotHubs/logDefinitions/read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Gets the available log definitions for the IotHub Service"),
						Operation:   to.Ptr("Read IotHub service log definitions"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/operations/Read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Get All ResourceProvider Operations"),
						Operation:   to.Ptr("Get All ResourceProvider Operations"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/checkNameAvailability/Action"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Check If IotHub name is available"),
						Operation:   to.Ptr("Check If IotHub name is available"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/usages/Read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Get subscription usage details for this provider."),
						Operation:   to.Ptr("Get Subscription Usages"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/Read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Gets the IotHub resource(s)"),
						Operation:   to.Ptr("Get IotHub(s)"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/Write"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Create or update IotHub Resource"),
						Operation:   to.Ptr("Create or update IotHub Resource"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/Delete"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Delete IotHub Resource"),
						Operation:   to.Ptr("Delete IotHub Resource"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/iotHubStats/Read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Get IotHub Statistics"),
						Operation:   to.Ptr("Get IotHub Statistics"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/skus/Read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Get valid IotHub Skus"),
						Operation:   to.Ptr("Get valid IotHub Skus"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/listkeys/Action"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Get all IotHub Keys"),
						Operation:   to.Ptr("Get all IotHub Keys"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/iotHubKeys/listkeys/Action"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Get IotHub Key for the given name"),
						Operation:   to.Ptr("Get IotHub Key for the given name"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/eventHubEndpoints/consumerGroups/Write"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Create EventHub Consumer Group"),
						Operation:   to.Ptr("Create EventHub Consumer Group"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/eventHubEndpoints/consumerGroups/Read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Get EventHub Consumer Group(s)"),
						Operation:   to.Ptr("Get EventHub Consumer Group(s)"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/eventHubEndpoints/consumerGroups/Delete"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Delete EventHub Consumer Group"),
						Operation:   to.Ptr("Delete EventHub Consumer Group"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/exportDevices/Action"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Export Devices"),
						Operation:   to.Ptr("Export Devices"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/importDevices/Action"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Import Devices"),
						Operation:   to.Ptr("Import Devices"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/jobs/Read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Get Job(s) details submitted on given IotHub"),
						Operation:   to.Ptr("Get the Job(s) on IotHub"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/quotaMetrics/Read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Get Quota Metrics"),
						Operation:   to.Ptr("Get Quota Metrics"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/routing/routes/$testall/Action"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Test a message against all existing Routes"),
						Operation:   to.Ptr("Routing Rule Test All"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/routing/routes/$testnew/Action"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Test a message against a provided test Route"),
						Operation:   to.Ptr("Routing Rule Test Route"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/iotHubs/routingEndpointsHealth/Read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Gets the health of all routing Endpoints for an IotHub"),
						Operation:   to.Ptr("Get Endpoint Health"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/ProvisioningServices/diagnosticSettings/read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Get Diagnostic Setting"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/ProvisioningServices/diagnosticSettings/write"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Set Diagnostic Setting"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/ProvisioningServices/metricDefinitions/read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Gets the available metrics for the DPS service"),
						Operation:   to.Ptr("Read DPS service metric definitions"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/ProvisioningServices/logDefinitions/read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Gets the available log definitions for the DPS Service"),
						Operation:   to.Ptr("Read DPS service log definitions"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("IotHubs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/checkProvisioningServiceNameAvailability/Action"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Check If Provisioning Service name is available"),
						Operation:   to.Ptr("Check If Provisioning Service name is available"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("ProvisioningServives"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/provisioningServices/Read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Get Provisioning Service resource"),
						Operation:   to.Ptr("Get Provisioning Service resource"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("ProvisioningServices"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/provisioningServices/Write"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Create Provisioning Service resource"),
						Operation:   to.Ptr("Create Provisioning Service resource"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("ProvisioningServices"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/provisioningServices/Delete"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Delete Provisioning Service resource"),
						Operation:   to.Ptr("Delete Provisioning Service resource"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("ProvisioningServices"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/provisioningServices/skus/Read"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("Delete Provisioning Service resource"),
						Operation:   to.Ptr("Delete Provisioning Service resource"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("ProvisioningServices"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Devices/provisioningServices/listkeys/Action"),
					Display: &armiothub.OperationDisplay{
						Description: to.Ptr("get security related metadata"),
						Operation:   to.Ptr("get security related metadata"),
						Provider:    to.Ptr("Microsoft Devices"),
						Resource:    to.Ptr("ProvisioningServices"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_operations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_Get(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"testHub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.Description{
			Name:     to.Ptr("testHub"),
			Type:     to.Ptr("Microsoft.Devices/IotHubs"),
			ID:       to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/testHub"),
			Location: to.Ptr("centraluseuap"),
			Tags:     map[string]*string{},
			Etag:     to.Ptr("AAAAAAFD6M4="),
			Properties: &armiothub.Properties{
				CloudToDevice: &armiothub.CloudToDeviceProperties{
					DefaultTTLAsIso8601: to.Ptr("PT1H"),
					Feedback: &armiothub.FeedbackProperties{
						LockDurationAsIso8601: to.Ptr("PT1M"),
						MaxDeliveryCount:      to.Ptr[int32](10),
						TTLAsIso8601:          to.Ptr("PT1H"),
					},
					MaxDeliveryCount: to.Ptr[int32](10),
				},
				EnableFileUploadNotifications: to.Ptr(false),
				EventHubEndpoints: map[string]*armiothub.EventHubProperties{
					"events": {
						Path:           to.Ptr("iot-dps-cit-hub-1"),
						Endpoint:       to.Ptr("sb://iothub-ns-iot-dps-ci-245306-76aca8e13b.servicebus.windows.net/"),
						PartitionCount: to.Ptr[int32](2),
						PartitionIDs: []*string{
							to.Ptr("0"),
							to.Ptr("1")},
						RetentionTimeInDays: to.Ptr[int64](1),
					},
				},
				Features: to.Ptr(armiothub.CapabilitiesNone),
				HostName: to.Ptr("iot-dps-cit-hub-1.azure-devices.net"),
				IPFilterRules: []*armiothub.IPFilterRule{
					{
						Action:     to.Ptr(armiothub.IPFilterActionTypeAccept),
						FilterName: to.Ptr("rule1"),
						IPMask:     to.Ptr("131.117.159.53"),
					},
					{
						Action:     to.Ptr(armiothub.IPFilterActionTypeAccept),
						FilterName: to.Ptr("rule2"),
						IPMask:     to.Ptr("157.55.59.128/25"),
					}},
				Locations: []*armiothub.LocationDescription{
					{
						Location: to.Ptr("West US"),
						Role:     to.Ptr(armiothub.IotHubReplicaRoleTypePrimary),
					},
					{
						Location: to.Ptr("East US"),
						Role:     to.Ptr(armiothub.IotHubReplicaRoleTypeSecondary),
					}},
				MessagingEndpoints: map[string]*armiothub.MessagingEndpointProperties{
					"fileNotifications": {
						LockDurationAsIso8601: to.Ptr("PT1M"),
						MaxDeliveryCount:      to.Ptr[int32](10),
						TTLAsIso8601:          to.Ptr("PT1H"),
					},
				},
				MinTLSVersion: to.Ptr("1.2"),
				NetworkRuleSets: &armiothub.NetworkRuleSetProperties{
					ApplyToBuiltInEventHubEndpoint: to.Ptr(true),
					DefaultAction:                  to.Ptr(armiothub.DefaultActionDeny),
					IPRules: []*armiothub.NetworkRuleSetIPRule{
						{
							Action:     to.Ptr(armiothub.NetworkRuleIPActionAllow),
							FilterName: to.Ptr("rule1"),
							IPMask:     to.Ptr("131.117.159.53"),
						},
						{
							Action:     to.Ptr(armiothub.NetworkRuleIPActionAllow),
							FilterName: to.Ptr("rule2"),
							IPMask:     to.Ptr("157.55.59.128/25"),
						}},
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Routing: &armiothub.RoutingProperties{
					Endpoints: &armiothub.RoutingEndpoints{
						EventHubs:         []*armiothub.RoutingEventHubProperties{},
						ServiceBusQueues:  []*armiothub.RoutingServiceBusQueueEndpointProperties{},
						ServiceBusTopics:  []*armiothub.RoutingServiceBusTopicEndpointProperties{},
						StorageContainers: []*armiothub.RoutingStorageContainerProperties{},
					},
					FallbackRoute: &armiothub.FallbackRouteProperties{
						Condition: to.Ptr("true"),
						EndpointNames: []*string{
							to.Ptr("events")},
						IsEnabled: to.Ptr(true),
						Source:    to.Ptr(armiothub.RoutingSourceDeviceMessages),
					},
					Routes: []*armiothub.RouteProperties{},
				},
				State: to.Ptr("Active"),
				StorageEndpoints: map[string]*armiothub.StorageEndpointProperties{
					"$default": {
						ConnectionString: to.Ptr(""),
						ContainerName:    to.Ptr(""),
						SasTTLAsIso8601:  to.Ptr("PT1H"),
					},
				},
			},
			SKU: &armiothub.SKUInfo{
				Name:     to.Ptr(armiothub.IotHubSKUS1),
				Capacity: to.Ptr[int64](1),
				Tier:     to.Ptr(armiothub.IotHubSKUTierStandard),
			},
			SystemData: &armiothub.SystemData{
				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-30T00:28:38.963Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_CreateOrUpdate(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_createOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"testHub",
		armiothub.Description{
			Location: to.Ptr("centraluseuap"),
			Tags:     map[string]*string{},
			Etag:     to.Ptr("AAAAAAFD6M4="),
			Properties: &armiothub.Properties{
				CloudToDevice: &armiothub.CloudToDeviceProperties{
					DefaultTTLAsIso8601: to.Ptr("PT1H"),
					Feedback: &armiothub.FeedbackProperties{
						LockDurationAsIso8601: to.Ptr("PT1M"),
						MaxDeliveryCount:      to.Ptr[int32](10),
						TTLAsIso8601:          to.Ptr("PT1H"),
					},
					MaxDeliveryCount: to.Ptr[int32](10),
				},
				EnableDataResidency:           to.Ptr(true),
				EnableFileUploadNotifications: to.Ptr(false),
				EventHubEndpoints: map[string]*armiothub.EventHubProperties{
					"events": {
						PartitionCount:      to.Ptr[int32](2),
						RetentionTimeInDays: to.Ptr[int64](1),
					},
				},
				Features:      to.Ptr(armiothub.CapabilitiesNone),
				IPFilterRules: []*armiothub.IPFilterRule{},
				MessagingEndpoints: map[string]*armiothub.MessagingEndpointProperties{
					"fileNotifications": {
						LockDurationAsIso8601: to.Ptr("PT1M"),
						MaxDeliveryCount:      to.Ptr[int32](10),
						TTLAsIso8601:          to.Ptr("PT1H"),
					},
				},
				MinTLSVersion: to.Ptr("1.2"),
				NetworkRuleSets: &armiothub.NetworkRuleSetProperties{
					ApplyToBuiltInEventHubEndpoint: to.Ptr(true),
					DefaultAction:                  to.Ptr(armiothub.DefaultActionDeny),
					IPRules: []*armiothub.NetworkRuleSetIPRule{
						{
							Action:     to.Ptr(armiothub.NetworkRuleIPActionAllow),
							FilterName: to.Ptr("rule1"),
							IPMask:     to.Ptr("131.117.159.53"),
						},
						{
							Action:     to.Ptr(armiothub.NetworkRuleIPActionAllow),
							FilterName: to.Ptr("rule2"),
							IPMask:     to.Ptr("157.55.59.128/25"),
						}},
				},
				Routing: &armiothub.RoutingProperties{
					Endpoints: &armiothub.RoutingEndpoints{
						EventHubs:         []*armiothub.RoutingEventHubProperties{},
						ServiceBusQueues:  []*armiothub.RoutingServiceBusQueueEndpointProperties{},
						ServiceBusTopics:  []*armiothub.RoutingServiceBusTopicEndpointProperties{},
						StorageContainers: []*armiothub.RoutingStorageContainerProperties{},
					},
					FallbackRoute: &armiothub.FallbackRouteProperties{
						Name:      to.Ptr("$fallback"),
						Condition: to.Ptr("true"),
						EndpointNames: []*string{
							to.Ptr("events")},
						IsEnabled: to.Ptr(true),
						Source:    to.Ptr(armiothub.RoutingSourceDeviceMessages),
					},
					Routes: []*armiothub.RouteProperties{},
				},
				StorageEndpoints: map[string]*armiothub.StorageEndpointProperties{
					"$default": {
						ConnectionString: to.Ptr(""),
						ContainerName:    to.Ptr(""),
						SasTTLAsIso8601:  to.Ptr("PT1H"),
					},
				},
			},
			SKU: &armiothub.SKUInfo{
				Name:     to.Ptr(armiothub.IotHubSKUS1),
				Capacity: to.Ptr[int64](1),
			},
		},
		&armiothub.ResourceClientBeginCreateOrUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_createOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_createOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.Description{
			Name:     to.Ptr("testHub"),
			Type:     to.Ptr("Microsoft.Devices/IotHubs"),
			ID:       to.Ptr("/subscriptions/ae24ff83-d2ca-4fc8-9717-05dae4bba489/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/testHub"),
			Location: to.Ptr("centraluseuap"),
			Tags:     map[string]*string{},
			Etag:     to.Ptr("AAAAAAFD6M4="),
			Properties: &armiothub.Properties{
				CloudToDevice: &armiothub.CloudToDeviceProperties{
					DefaultTTLAsIso8601: to.Ptr("PT1H"),
					Feedback: &armiothub.FeedbackProperties{
						LockDurationAsIso8601: to.Ptr("PT1M"),
						MaxDeliveryCount:      to.Ptr[int32](10),
						TTLAsIso8601:          to.Ptr("PT1H"),
					},
					MaxDeliveryCount: to.Ptr[int32](10),
				},
				EnableDataResidency:           to.Ptr(true),
				EnableFileUploadNotifications: to.Ptr(false),
				EventHubEndpoints: map[string]*armiothub.EventHubProperties{
					"events": {
						Path:           to.Ptr("iot-dps-cit-hub-1"),
						Endpoint:       to.Ptr("sb://iothub-ns-iot-dps-ci-245306-76aca8e13b.servicebus.windows.net/"),
						PartitionCount: to.Ptr[int32](2),
						PartitionIDs: []*string{
							to.Ptr("0"),
							to.Ptr("1")},
						RetentionTimeInDays: to.Ptr[int64](1),
					},
				},
				Features: to.Ptr(armiothub.CapabilitiesNone),
				HostName: to.Ptr("iot-dps-cit-hub-1.azure-devices.net"),
				IPFilterRules: []*armiothub.IPFilterRule{
					{
						Action:     to.Ptr(armiothub.IPFilterActionTypeAccept),
						FilterName: to.Ptr("rule1"),
						IPMask:     to.Ptr("131.117.159.53"),
					},
					{
						Action:     to.Ptr(armiothub.IPFilterActionTypeAccept),
						FilterName: to.Ptr("rule2"),
						IPMask:     to.Ptr("157.55.59.128/25"),
					}},
				MessagingEndpoints: map[string]*armiothub.MessagingEndpointProperties{
					"fileNotifications": {
						LockDurationAsIso8601: to.Ptr("PT1M"),
						MaxDeliveryCount:      to.Ptr[int32](10),
						TTLAsIso8601:          to.Ptr("PT1H"),
					},
				},
				MinTLSVersion: to.Ptr("1.2"),
				NetworkRuleSets: &armiothub.NetworkRuleSetProperties{
					ApplyToBuiltInEventHubEndpoint: to.Ptr(true),
					DefaultAction:                  to.Ptr(armiothub.DefaultActionDeny),
					IPRules: []*armiothub.NetworkRuleSetIPRule{
						{
							Action:     to.Ptr(armiothub.NetworkRuleIPActionAllow),
							FilterName: to.Ptr("rule1"),
							IPMask:     to.Ptr("131.117.159.53"),
						},
						{
							Action:     to.Ptr(armiothub.NetworkRuleIPActionAllow),
							FilterName: to.Ptr("rule2"),
							IPMask:     to.Ptr("157.55.59.128/25"),
						}},
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Routing: &armiothub.RoutingProperties{
					Endpoints: &armiothub.RoutingEndpoints{
						EventHubs:         []*armiothub.RoutingEventHubProperties{},
						ServiceBusQueues:  []*armiothub.RoutingServiceBusQueueEndpointProperties{},
						ServiceBusTopics:  []*armiothub.RoutingServiceBusTopicEndpointProperties{},
						StorageContainers: []*armiothub.RoutingStorageContainerProperties{},
					},
					FallbackRoute: &armiothub.FallbackRouteProperties{
						Name:      to.Ptr("$fallback"),
						Condition: to.Ptr("true"),
						EndpointNames: []*string{
							to.Ptr("events")},
						IsEnabled: to.Ptr(true),
						Source:    to.Ptr(armiothub.RoutingSourceDeviceMessages),
					},
					Routes: []*armiothub.RouteProperties{},
				},
				State: to.Ptr("Active"),
				StorageEndpoints: map[string]*armiothub.StorageEndpointProperties{
					"$default": {
						ConnectionString: to.Ptr(""),
						ContainerName:    to.Ptr(""),
						SasTTLAsIso8601:  to.Ptr("PT1H"),
					},
				},
			},
			SKU: &armiothub.SKUInfo{
				Name:     to.Ptr(armiothub.IotHubSKUS1),
				Capacity: to.Ptr[int64](1),
				Tier:     to.Ptr(armiothub.IotHubSKUTierStandard),
			},
			SystemData: &armiothub.SystemData{
				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-30T00:28:38.963Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_createOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_Update(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myHub",
		armiothub.TagsResource{
			Tags: map[string]*string{
				"foo": to.Ptr("bar"),
			},
		},
		&armiothub.ResourceClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_patch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.Description{
			Name:     to.Ptr("testHub"),
			Type:     to.Ptr("Microsoft.Devices/IotHubs"),
			ID:       to.Ptr("/subscriptions/ae24ff83-d2ca-4fc8-9717-05dae4bba489/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/testHub"),
			Location: to.Ptr("centraluseuap"),
			Tags: map[string]*string{
				"foo": to.Ptr("bar"),
			},
			Etag: to.Ptr("AAAAAAFD6M4="),
			Properties: &armiothub.Properties{
				CloudToDevice: &armiothub.CloudToDeviceProperties{
					DefaultTTLAsIso8601: to.Ptr("PT1H"),
					Feedback: &armiothub.FeedbackProperties{
						LockDurationAsIso8601: to.Ptr("PT1M"),
						MaxDeliveryCount:      to.Ptr[int32](10),
						TTLAsIso8601:          to.Ptr("PT1H"),
					},
					MaxDeliveryCount: to.Ptr[int32](10),
				},
				EnableFileUploadNotifications: to.Ptr(false),
				EventHubEndpoints: map[string]*armiothub.EventHubProperties{
					"events": {
						Path:           to.Ptr("iot-dps-cit-hub-1"),
						Endpoint:       to.Ptr("sb://iothub-ns-iot-dps-ci-245306-76aca8e13b.servicebus.windows.net/"),
						PartitionCount: to.Ptr[int32](2),
						PartitionIDs: []*string{
							to.Ptr("0"),
							to.Ptr("1")},
						RetentionTimeInDays: to.Ptr[int64](1),
					},
				},
				Features: to.Ptr(armiothub.CapabilitiesNone),
				HostName: to.Ptr("iot-dps-cit-hub-1.azure-devices.net"),
				IPFilterRules: []*armiothub.IPFilterRule{
					{
						Action:     to.Ptr(armiothub.IPFilterActionTypeAccept),
						FilterName: to.Ptr("rule1"),
						IPMask:     to.Ptr("131.117.159.53"),
					},
					{
						Action:     to.Ptr(armiothub.IPFilterActionTypeAccept),
						FilterName: to.Ptr("rule2"),
						IPMask:     to.Ptr("157.55.59.128/25"),
					}},
				MessagingEndpoints: map[string]*armiothub.MessagingEndpointProperties{
					"fileNotifications": {
						LockDurationAsIso8601: to.Ptr("PT1M"),
						MaxDeliveryCount:      to.Ptr[int32](10),
						TTLAsIso8601:          to.Ptr("PT1H"),
					},
				},
				NetworkRuleSets: &armiothub.NetworkRuleSetProperties{
					ApplyToBuiltInEventHubEndpoint: to.Ptr(true),
					DefaultAction:                  to.Ptr(armiothub.DefaultActionDeny),
					IPRules: []*armiothub.NetworkRuleSetIPRule{
						{
							Action:     to.Ptr(armiothub.NetworkRuleIPActionAllow),
							FilterName: to.Ptr("rule1"),
							IPMask:     to.Ptr("131.117.159.53"),
						},
						{
							Action:     to.Ptr(armiothub.NetworkRuleIPActionAllow),
							FilterName: to.Ptr("rule2"),
							IPMask:     to.Ptr("157.55.59.128/25"),
						}},
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Routing: &armiothub.RoutingProperties{
					Endpoints: &armiothub.RoutingEndpoints{
						EventHubs:         []*armiothub.RoutingEventHubProperties{},
						ServiceBusQueues:  []*armiothub.RoutingServiceBusQueueEndpointProperties{},
						ServiceBusTopics:  []*armiothub.RoutingServiceBusTopicEndpointProperties{},
						StorageContainers: []*armiothub.RoutingStorageContainerProperties{},
					},
					FallbackRoute: &armiothub.FallbackRouteProperties{
						Name:      to.Ptr("$fallback"),
						Condition: to.Ptr("true"),
						EndpointNames: []*string{
							to.Ptr("events")},
						IsEnabled: to.Ptr(true),
						Source:    to.Ptr(armiothub.RoutingSourceDeviceMessages),
					},
					Routes: []*armiothub.RouteProperties{},
				},
				State: to.Ptr("Active"),
				StorageEndpoints: map[string]*armiothub.StorageEndpointProperties{
					"$default": {
						ConnectionString: to.Ptr(""),
						ContainerName:    to.Ptr(""),
						SasTTLAsIso8601:  to.Ptr("PT1H"),
					},
				},
			},
			SKU: &armiothub.SKUInfo{
				Name:     to.Ptr(armiothub.IotHubSKUS1),
				Capacity: to.Ptr[int64](1),
				Tier:     to.Ptr(armiothub.IotHubSKUTierStandard),
			},
			SystemData: &armiothub.SystemData{
				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-30T00:28:38.963Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_Delete(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"testHub",
		&armiothub.ResourceClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_delete.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.Description{
			Name:     to.Ptr("testHub"),
			Type:     to.Ptr("Microsoft.Devices/IotHubs"),
			ID:       to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/testHub"),
			Location: to.Ptr("centraluseuap"),
			Tags:     map[string]*string{},
			Etag:     to.Ptr("AAAAAAFD6M4="),
			Properties: &armiothub.Properties{
				CloudToDevice: &armiothub.CloudToDeviceProperties{
					DefaultTTLAsIso8601: to.Ptr("PT1H"),
					Feedback: &armiothub.FeedbackProperties{
						LockDurationAsIso8601: to.Ptr("PT1M"),
						MaxDeliveryCount:      to.Ptr[int32](10),
						TTLAsIso8601:          to.Ptr("PT1H"),
					},
					MaxDeliveryCount: to.Ptr[int32](10),
				},
				EnableFileUploadNotifications: to.Ptr(false),
				EventHubEndpoints: map[string]*armiothub.EventHubProperties{
					"events": {
						Path:           to.Ptr("iot-dps-cit-hub-1"),
						Endpoint:       to.Ptr("sb://iothub-ns-iot-dps-ci-245306-76aca8e13b.servicebus.windows.net/"),
						PartitionCount: to.Ptr[int32](2),
						PartitionIDs: []*string{
							to.Ptr("0"),
							to.Ptr("1")},
						RetentionTimeInDays: to.Ptr[int64](1),
					},
				},
				Features: to.Ptr(armiothub.CapabilitiesNone),
				HostName: to.Ptr("iot-dps-cit-hub-1.azure-devices.net"),
				IPFilterRules: []*armiothub.IPFilterRule{
					{
						Action:     to.Ptr(armiothub.IPFilterActionTypeAccept),
						FilterName: to.Ptr("rule1"),
						IPMask:     to.Ptr("131.117.159.53"),
					},
					{
						Action:     to.Ptr(armiothub.IPFilterActionTypeAccept),
						FilterName: to.Ptr("rule2"),
						IPMask:     to.Ptr("157.55.59.128/25"),
					}},
				MessagingEndpoints: map[string]*armiothub.MessagingEndpointProperties{
					"fileNotifications": {
						LockDurationAsIso8601: to.Ptr("PT1M"),
						MaxDeliveryCount:      to.Ptr[int32](10),
						TTLAsIso8601:          to.Ptr("PT1H"),
					},
				},
				NetworkRuleSets: &armiothub.NetworkRuleSetProperties{
					ApplyToBuiltInEventHubEndpoint: to.Ptr(true),
					DefaultAction:                  to.Ptr(armiothub.DefaultActionDeny),
					IPRules: []*armiothub.NetworkRuleSetIPRule{
						{
							Action:     to.Ptr(armiothub.NetworkRuleIPActionAllow),
							FilterName: to.Ptr("rule1"),
							IPMask:     to.Ptr("131.117.159.53"),
						},
						{
							Action:     to.Ptr(armiothub.NetworkRuleIPActionAllow),
							FilterName: to.Ptr("rule2"),
							IPMask:     to.Ptr("157.55.59.128/25"),
						}},
				},
				ProvisioningState: to.Ptr("Succeeded"),
				Routing: &armiothub.RoutingProperties{
					Endpoints: &armiothub.RoutingEndpoints{
						EventHubs:         []*armiothub.RoutingEventHubProperties{},
						ServiceBusQueues:  []*armiothub.RoutingServiceBusQueueEndpointProperties{},
						ServiceBusTopics:  []*armiothub.RoutingServiceBusTopicEndpointProperties{},
						StorageContainers: []*armiothub.RoutingStorageContainerProperties{},
					},
					FallbackRoute: &armiothub.FallbackRouteProperties{
						Condition: to.Ptr("true"),
						EndpointNames: []*string{
							to.Ptr("events")},
						IsEnabled: to.Ptr(true),
						Source:    to.Ptr(armiothub.RoutingSourceDeviceMessages),
					},
					Routes: []*armiothub.RouteProperties{},
				},
				State: to.Ptr("Active"),
				StorageEndpoints: map[string]*armiothub.StorageEndpointProperties{
					"$default": {
						ConnectionString: to.Ptr(""),
						ContainerName:    to.Ptr(""),
						SasTTLAsIso8601:  to.Ptr("PT1H"),
					},
				},
			},
			SKU: &armiothub.SKUInfo{
				Name:     to.Ptr(armiothub.IotHubSKUS1),
				Capacity: to.Ptr[int64](1),
				Tier:     to.Ptr(armiothub.IotHubSKUTierStandard),
			},
			SystemData: &armiothub.SystemData{
				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-30T00:28:38.963Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Description) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Description)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_ListBySubscription(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listbysubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listbysubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiothub.DescriptionListResult{
			Value: []*armiothub.Description{
				{
					Name:     to.Ptr("testHub"),
					Type:     to.Ptr("Microsoft.Devices/IotHubs"),
					ID:       to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/testHub"),
					Location: to.Ptr("centraluseuap"),
					Tags:     map[string]*string{},
					Etag:     to.Ptr("AAAAAAFD6M4="),
					Properties: &armiothub.Properties{
						CloudToDevice: &armiothub.CloudToDeviceProperties{
							DefaultTTLAsIso8601: to.Ptr("PT1H"),
							Feedback: &armiothub.FeedbackProperties{
								LockDurationAsIso8601: to.Ptr("PT1M"),
								MaxDeliveryCount:      to.Ptr[int32](10),
								TTLAsIso8601:          to.Ptr("PT1H"),
							},
							MaxDeliveryCount: to.Ptr[int32](10),
						},
						EnableFileUploadNotifications: to.Ptr(false),
						EventHubEndpoints: map[string]*armiothub.EventHubProperties{
							"events": {
								Path:           to.Ptr("iot-dps-cit-hub-1"),
								Endpoint:       to.Ptr("sb://iothub-ns-iot-dps-ci-245306-76aca8e13b.servicebus.windows.net/"),
								PartitionCount: to.Ptr[int32](2),
								PartitionIDs: []*string{
									to.Ptr("0"),
									to.Ptr("1")},
								RetentionTimeInDays: to.Ptr[int64](1),
							},
						},
						Features: to.Ptr(armiothub.CapabilitiesNone),
						HostName: to.Ptr("iot-dps-cit-hub-1.azure-devices.net"),
						IPFilterRules: []*armiothub.IPFilterRule{
							{
								Action:     to.Ptr(armiothub.IPFilterActionTypeAccept),
								FilterName: to.Ptr("rule1"),
								IPMask:     to.Ptr("131.117.159.53"),
							},
							{
								Action:     to.Ptr(armiothub.IPFilterActionTypeAccept),
								FilterName: to.Ptr("rule2"),
								IPMask:     to.Ptr("157.55.59.128/25"),
							}},
						MessagingEndpoints: map[string]*armiothub.MessagingEndpointProperties{
							"fileNotifications": {
								LockDurationAsIso8601: to.Ptr("PT1M"),
								MaxDeliveryCount:      to.Ptr[int32](10),
								TTLAsIso8601:          to.Ptr("PT1H"),
							},
						},
						NetworkRuleSets: &armiothub.NetworkRuleSetProperties{
							ApplyToBuiltInEventHubEndpoint: to.Ptr(true),
							DefaultAction:                  to.Ptr(armiothub.DefaultActionDeny),
							IPRules: []*armiothub.NetworkRuleSetIPRule{
								{
									Action:     to.Ptr(armiothub.NetworkRuleIPActionAllow),
									FilterName: to.Ptr("rule1"),
									IPMask:     to.Ptr("131.117.159.53"),
								},
								{
									Action:     to.Ptr(armiothub.NetworkRuleIPActionAllow),
									FilterName: to.Ptr("rule2"),
									IPMask:     to.Ptr("157.55.59.128/25"),
								}},
						},
						ProvisioningState: to.Ptr("Succeeded"),
						Routing: &armiothub.RoutingProperties{
							Endpoints: &armiothub.RoutingEndpoints{
								EventHubs:         []*armiothub.RoutingEventHubProperties{},
								ServiceBusQueues:  []*armiothub.RoutingServiceBusQueueEndpointProperties{},
								ServiceBusTopics:  []*armiothub.RoutingServiceBusTopicEndpointProperties{},
								StorageContainers: []*armiothub.RoutingStorageContainerProperties{},
							},
							FallbackRoute: &armiothub.FallbackRouteProperties{
								Name:      to.Ptr("$fallback"),
								Condition: to.Ptr("true"),
								EndpointNames: []*string{
									to.Ptr("events")},
								IsEnabled: to.Ptr(true),
								Source:    to.Ptr(armiothub.RoutingSourceDeviceMessages),
							},
							Routes: []*armiothub.RouteProperties{},
						},
						State: to.Ptr("Active"),
						StorageEndpoints: map[string]*armiothub.StorageEndpointProperties{
							"$default": {
								ConnectionString: to.Ptr(""),
								ContainerName:    to.Ptr(""),
								SasTTLAsIso8601:  to.Ptr("PT1H"),
							},
						},
					},
					SKU: &armiothub.SKUInfo{
						Name:     to.Ptr(armiothub.IotHubSKUS1),
						Capacity: to.Ptr[int64](1),
						Tier:     to.Ptr(armiothub.IotHubSKUTierStandard),
					},
					SystemData: &armiothub.SystemData{
						CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-30T00:28:38.963Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listbysubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_ListByResourceGroup(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listbyrg.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listbyrg.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiothub.DescriptionListResult{
			Value: []*armiothub.Description{
				{
					Name:     to.Ptr("testHub"),
					Type:     to.Ptr("Microsoft.Devices/IotHubs"),
					ID:       to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/testHub"),
					Location: to.Ptr("centraluseuap"),
					Tags:     map[string]*string{},
					Etag:     to.Ptr("AAAAAAFD6M4="),
					Properties: &armiothub.Properties{
						CloudToDevice: &armiothub.CloudToDeviceProperties{
							DefaultTTLAsIso8601: to.Ptr("PT1H"),
							Feedback: &armiothub.FeedbackProperties{
								LockDurationAsIso8601: to.Ptr("PT1M"),
								MaxDeliveryCount:      to.Ptr[int32](10),
								TTLAsIso8601:          to.Ptr("PT1H"),
							},
							MaxDeliveryCount: to.Ptr[int32](10),
						},
						EnableFileUploadNotifications: to.Ptr(false),
						EventHubEndpoints: map[string]*armiothub.EventHubProperties{
							"events": {
								Path:           to.Ptr("iot-dps-cit-hub-1"),
								Endpoint:       to.Ptr("sb://iothub-ns-iot-dps-ci-245306-76aca8e13b.servicebus.windows.net/"),
								PartitionCount: to.Ptr[int32](2),
								PartitionIDs: []*string{
									to.Ptr("0"),
									to.Ptr("1")},
								RetentionTimeInDays: to.Ptr[int64](1),
							},
						},
						Features: to.Ptr(armiothub.CapabilitiesNone),
						HostName: to.Ptr("iot-dps-cit-hub-1.azure-devices.net"),
						IPFilterRules: []*armiothub.IPFilterRule{
							{
								Action:     to.Ptr(armiothub.IPFilterActionTypeAccept),
								FilterName: to.Ptr("rule1"),
								IPMask:     to.Ptr("131.117.159.53"),
							},
							{
								Action:     to.Ptr(armiothub.IPFilterActionTypeAccept),
								FilterName: to.Ptr("rule2"),
								IPMask:     to.Ptr("157.55.59.128/25"),
							}},
						MessagingEndpoints: map[string]*armiothub.MessagingEndpointProperties{
							"fileNotifications": {
								LockDurationAsIso8601: to.Ptr("PT1M"),
								MaxDeliveryCount:      to.Ptr[int32](10),
								TTLAsIso8601:          to.Ptr("PT1H"),
							},
						},
						NetworkRuleSets: &armiothub.NetworkRuleSetProperties{
							ApplyToBuiltInEventHubEndpoint: to.Ptr(true),
							DefaultAction:                  to.Ptr(armiothub.DefaultActionDeny),
							IPRules: []*armiothub.NetworkRuleSetIPRule{
								{
									Action:     to.Ptr(armiothub.NetworkRuleIPActionAllow),
									FilterName: to.Ptr("rule1"),
									IPMask:     to.Ptr("131.117.159.53"),
								},
								{
									Action:     to.Ptr(armiothub.NetworkRuleIPActionAllow),
									FilterName: to.Ptr("rule2"),
									IPMask:     to.Ptr("157.55.59.128/25"),
								}},
						},
						ProvisioningState: to.Ptr("Succeeded"),
						Routing: &armiothub.RoutingProperties{
							Endpoints: &armiothub.RoutingEndpoints{
								EventHubs:         []*armiothub.RoutingEventHubProperties{},
								ServiceBusQueues:  []*armiothub.RoutingServiceBusQueueEndpointProperties{},
								ServiceBusTopics:  []*armiothub.RoutingServiceBusTopicEndpointProperties{},
								StorageContainers: []*armiothub.RoutingStorageContainerProperties{},
							},
							FallbackRoute: &armiothub.FallbackRouteProperties{
								Name:      to.Ptr("$fallback"),
								Condition: to.Ptr("true"),
								EndpointNames: []*string{
									to.Ptr("events")},
								IsEnabled: to.Ptr(true),
								Source:    to.Ptr(armiothub.RoutingSourceDeviceMessages),
							},
							Routes: []*armiothub.RouteProperties{},
						},
						State: to.Ptr("Active"),
						StorageEndpoints: map[string]*armiothub.StorageEndpointProperties{
							"$default": {
								ConnectionString: to.Ptr(""),
								ContainerName:    to.Ptr(""),
								SasTTLAsIso8601:  to.Ptr("PT1H"),
							},
						},
					},
					SKU: &armiothub.SKUInfo{
						Name:     to.Ptr(armiothub.IotHubSKUS1),
						Capacity: to.Ptr[int64](1),
						Tier:     to.Ptr(armiothub.IotHubSKUTierStandard),
					},
					SystemData: &armiothub.SystemData{
						CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-30T00:28:38.963Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listbyrg.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_GetStats(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_stats.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_GetStats"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.GetStats(ctx,
		"myResourceGroup",
		"testHub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_stats.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.RegistryStatistics{
			DisabledDeviceCount: to.Ptr[int64](0),
			EnabledDeviceCount:  to.Ptr[int64](0),
			TotalDeviceCount:    to.Ptr[int64](0),
		}
		if !reflect.DeepEqual(exampleRes, res.RegistryStatistics) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegistryStatistics)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_stats.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_ListEventHubConsumerGroups(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listehgroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_ListEventHubConsumerGroups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	pager := client.ListEventHubConsumerGroups("myResourceGroup",
		"testHub",
		"events",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listehgroups.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiothub.EventHubConsumerGroupsListResult{
			Value: []*armiothub.EventHubConsumerGroupInfo{
				{
					Name: to.Ptr("$Default"),
					Type: to.Ptr("Microsoft.Devices/IotHubs/EventHubEndpoints/ConsumerGroups"),
					Etag: to.Ptr("AAAAAAFD6M4="),
					ID:   to.Ptr("/subscriptions/cmd-sub-1/resourceGroups/cmd-rg-1/providers/Microsoft.Devices/IotHubs/test-hub-2/eventHubEndpoints/events/ConsumerGroups/%24Default"),
					Properties: map[string]interface{}{
						"created": "Thu, 15 Jun 2017 19:20:58 GMT",
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EventHubConsumerGroupsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EventHubConsumerGroupsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listehgroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_GetEventHubConsumerGroup(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getconsumergroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_ListEventHubConsumerGroups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.GetEventHubConsumerGroup(ctx,
		"myResourceGroup",
		"testHub",
		"events",
		"test",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getconsumergroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.EventHubConsumerGroupInfo{
			Name: to.Ptr("test"),
			Type: to.Ptr("Microsoft.Devices/IotHubs/EventHubEndpoints/ConsumerGroups"),
			Etag: to.Ptr("AAAAAAFD6M4="),
			ID:   to.Ptr("/subscriptions/cmd-sub-1/resourceGroups/cmd-rg-1/providers/Microsoft.Devices/IotHubs/test-hub-2/eventHubEndpoints/events/ConsumerGroups/%24Default"),
			Properties: map[string]interface{}{
				"created": "Thu, 15 Jun 2017 19:20:58 GMT",
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EventHubConsumerGroupInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EventHubConsumerGroupInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getconsumergroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_CreateEventHubConsumerGroup(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_createconsumergroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_CreateEventHubConsumerGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.CreateEventHubConsumerGroup(ctx,
		"myResourceGroup",
		"testHub",
		"events",
		"test",
		armiothub.EventHubConsumerGroupBodyDescription{
			Properties: &armiothub.EventHubConsumerGroupName{
				Name: to.Ptr("test"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_createconsumergroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.EventHubConsumerGroupInfo{
			Name: to.Ptr("test"),
			Type: to.Ptr("Microsoft.Devices/IotHubs/EventHubEndpoints/ConsumerGroups"),
			Etag: to.Ptr("AAAAAAFD6M4="),
			ID:   to.Ptr("/subscriptions/cmd-sub-1/resourceGroups/cmd-rg-1/providers/Microsoft.Devices/IotHubs/test-hub-2/eventHubEndpoints/events/ConsumerGroups/%24Default"),
			Properties: map[string]interface{}{
				"created": "Thu, 15 Jun 2017 19:20:58 GMT",
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EventHubConsumerGroupInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EventHubConsumerGroupInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_createconsumergroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_DeleteEventHubConsumerGroup(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_deleteconsumergroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_DeleteEventHubConsumerGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	_, err := client.DeleteEventHubConsumerGroup(ctx,
		"myResourceGroup",
		"testHub",
		"events",
		"test",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_deleteconsumergroup.json: %v", err)
	}
}

func TestIotHubResource_ListJobs(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listjobs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_ListJobs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	pager := client.ListJobs("myResourceGroup",
		"testHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listjobs.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiothub.JobResponseListResult{
			Value: []*armiothub.JobResponse{
				{
					Type:         to.Ptr(armiothub.JobTypeUnknown),
					EndTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 15 Jun 2017 19:20:58 GMT"); return t }()),
					JobID:        to.Ptr("test"),
					StartTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 15 Jun 2017 19:20:58 GMT"); return t }()),
					Status:       to.Ptr(armiothub.JobStatusUnknown),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JobResponseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JobResponseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listjobs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_GetJob(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getjob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_GetJob"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.GetJob(ctx,
		"myResourceGroup",
		"testHub",
		"test",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getjob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.JobResponse{
			Type:         to.Ptr(armiothub.JobTypeUnknown),
			EndTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 15 Jun 2017 19:20:58 GMT"); return t }()),
			JobID:        to.Ptr("test"),
			StartTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 15 Jun 2017 19:20:58 GMT"); return t }()),
			Status:       to.Ptr(armiothub.JobStatusUnknown),
		}
		if !reflect.DeepEqual(exampleRes, res.JobResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getjob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_GetQuotaMetrics(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_quotametrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_GetQuotaMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	pager := client.GetQuotaMetrics("myResourceGroup",
		"testHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_quotametrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiothub.QuotaMetricInfoListResult{
			Value: []*armiothub.QuotaMetricInfo{
				{
					Name:         to.Ptr("TotalMessages"),
					CurrentValue: to.Ptr[int64](0),
					MaxValue:     to.Ptr[int64](400000),
				},
				{
					Name:         to.Ptr("TotalDeviceCount"),
					CurrentValue: to.Ptr[int64](0),
					MaxValue:     to.Ptr[int64](500000),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.QuotaMetricInfoListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.QuotaMetricInfoListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_quotametrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_GetEndpointHealth(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_routingendpointhealth.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_GetEndpointHealth"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	pager := client.GetEndpointHealth("myResourceGroup",
		"testHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_routingendpointhealth.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiothub.EndpointHealthDataListResult{
			Value: []*armiothub.EndpointHealthData{
				{
					EndpointID:                    to.Ptr("id1"),
					HealthStatus:                  to.Ptr(armiothub.EndpointHealthStatusHealthy),
					LastSendAttemptTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "2020-03-26T21:24:57Z"); return t }()),
					LastSuccessfulSendAttemptTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "2020-03-26T21:20:57Z"); return t }()),
				},
				{
					EndpointID:   to.Ptr("id2"),
					HealthStatus: to.Ptr(armiothub.EndpointHealthStatusUnknown),
				},
				{
					EndpointID:                    to.Ptr("id3"),
					HealthStatus:                  to.Ptr(armiothub.EndpointHealthStatusUnhealthy),
					LastKnownError:                to.Ptr("NotFound"),
					LastKnownErrorTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "2020-03-26T21:24:57Z"); return t }()),
					LastSendAttemptTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "2020-03-26T21:24:57Z"); return t }()),
					LastSuccessfulSendAttemptTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "2020-03-26T21:20:57Z"); return t }()),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EndpointHealthDataListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EndpointHealthDataListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_routingendpointhealth.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_CheckNameAvailability(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/checkNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armiothub.OperationInputs{
			Name: to.Ptr("test-request"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/checkNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.NameAvailabilityInfo{
			Message:       to.Ptr(""),
			NameAvailable: to.Ptr(true),
			Reason:        to.Ptr(armiothub.IotHubNameUnavailabilityReasonInvalid),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailabilityInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailabilityInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/checkNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_TestAllRoutes(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_testallroutes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_TestAllRoutes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.TestAllRoutes(ctx,
		"testHub",
		"myResourceGroup",
		armiothub.TestAllRoutesInput{
			Message: &armiothub.RoutingMessage{
				AppProperties: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				Body: to.Ptr("Body of message"),
				SystemProperties: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
			RoutingSource: to.Ptr(armiothub.RoutingSourceDeviceMessages),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_testallroutes.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.TestAllRoutesResult{
			Routes: []*armiothub.MatchedRoute{
				{
					Properties: &armiothub.RouteProperties{
						Name: to.Ptr("Routeid"),
						EndpointNames: []*string{
							to.Ptr("id1")},
						IsEnabled: to.Ptr(true),
						Source:    to.Ptr(armiothub.RoutingSourceDeviceMessages),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.TestAllRoutesResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TestAllRoutesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_testallroutes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_TestRoute(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_testnewroute.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_TestRoute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.TestRoute(ctx,
		"testHub",
		"myResourceGroup",
		armiothub.TestRouteInput{
			Message: &armiothub.RoutingMessage{
				AppProperties: map[string]*string{
					"key1": to.Ptr("value1"),
				},
				Body: to.Ptr("Body of message"),
				SystemProperties: map[string]*string{
					"key1": to.Ptr("value1"),
				},
			},
			Route: &armiothub.RouteProperties{
				Name: to.Ptr("Routeid"),
				EndpointNames: []*string{
					to.Ptr("id1")},
				IsEnabled: to.Ptr(true),
				Source:    to.Ptr(armiothub.RoutingSourceDeviceMessages),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_testnewroute.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.TestRouteResult{
			Result: to.Ptr(armiothub.TestResultStatusFalse),
			Details: &armiothub.TestRouteResultDetails{
				CompilationErrors: []*armiothub.RouteCompilationError{
					{
						Location: &armiothub.RouteErrorRange{
							End: &armiothub.RouteErrorPosition{
								Column: to.Ptr[int32](24),
								Line:   to.Ptr[int32](12),
							},
							Start: &armiothub.RouteErrorPosition{
								Column: to.Ptr[int32](12),
								Line:   to.Ptr[int32](12),
							},
						},
						Message:  to.Ptr("string response"),
						Severity: to.Ptr(armiothub.RouteErrorSeverityError),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TestRouteResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TestRouteResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_testnewroute.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_ListKeys(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listkeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_ListKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	pager := client.ListKeys("myResourceGroup",
		"testHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listkeys.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiothub.SharedAccessSignatureAuthorizationRuleListResult{
			Value: []*armiothub.SharedAccessSignatureAuthorizationRule{
				{
					KeyName:      to.Ptr("iothubowner"),
					PrimaryKey:   to.Ptr("<primaryKey>"),
					Rights:       to.Ptr(armiothub.AccessRightsRegistryWriteServiceConnectDeviceConnect),
					SecondaryKey: to.Ptr("<secondaryKey>"),
				},
				{
					KeyName:      to.Ptr("service"),
					PrimaryKey:   to.Ptr("<primaryKey>"),
					Rights:       to.Ptr(armiothub.AccessRightsServiceConnect),
					SecondaryKey: to.Ptr("<secondaryKey>"),
				},
				{
					KeyName:      to.Ptr("device"),
					PrimaryKey:   to.Ptr("<primaryKey>"),
					Rights:       to.Ptr(armiothub.AccessRightsDeviceConnect),
					SecondaryKey: to.Ptr("<secondaryKey>"),
				},
				{
					KeyName:      to.Ptr("registryRead"),
					PrimaryKey:   to.Ptr("<primaryKey>"),
					Rights:       to.Ptr(armiothub.AccessRightsRegistryRead),
					SecondaryKey: to.Ptr("<secondaryKey>"),
				},
				{
					KeyName:      to.Ptr("registryReadWrite"),
					PrimaryKey:   to.Ptr("<primaryKey>"),
					Rights:       to.Ptr(armiothub.AccessRightsRegistryWrite),
					SecondaryKey: to.Ptr("<secondaryKey>"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SharedAccessSignatureAuthorizationRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SharedAccessSignatureAuthorizationRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listkeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_GetKeysForKeyName(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getkey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_GetKeysForKeyName"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.GetKeysForKeyName(ctx,
		"myResourceGroup",
		"testHub",
		"iothubowner",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getkey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.SharedAccessSignatureAuthorizationRule{
			KeyName:      to.Ptr("iothubowner"),
			PrimaryKey:   to.Ptr("<primaryKey>"),
			Rights:       to.Ptr(armiothub.AccessRightsRegistryWriteServiceConnectDeviceConnect),
			SecondaryKey: to.Ptr("<secondaryKey>"),
		}
		if !reflect.DeepEqual(exampleRes, res.SharedAccessSignatureAuthorizationRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedAccessSignatureAuthorizationRule)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getkey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_ExportDevices(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_exportdevices.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_ExportDevices"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.ExportDevices(ctx,
		"myResourceGroup",
		"testHub",
		armiothub.ExportDevicesRequest{
			ExcludeKeys:            to.Ptr(true),
			ExportBlobContainerURI: to.Ptr("testBlob"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_exportdevices.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.JobResponse{
			Type:         to.Ptr(armiothub.JobTypeUnknown),
			EndTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 15 Jun 2017 19:20:58 GMT"); return t }()),
			JobID:        to.Ptr("test"),
			StartTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 15 Jun 2017 19:20:58 GMT"); return t }()),
			Status:       to.Ptr(armiothub.JobStatusUnknown),
		}
		if !reflect.DeepEqual(exampleRes, res.JobResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_exportdevices.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHubResource_ImportDevices(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_importdevices.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHubResource_ImportDevices"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.ImportDevices(ctx,
		"myResourceGroup",
		"testHub",
		armiothub.ImportDevicesRequest{
			InputBlobContainerURI:  to.Ptr("testBlob"),
			OutputBlobContainerURI: to.Ptr("testBlob"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_importdevices.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.JobResponse{
			Type:         to.Ptr(armiothub.JobTypeUnknown),
			EndTimeUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 15 Jun 2017 19:20:58 GMT"); return t }()),
			JobID:        to.Ptr("test"),
			StartTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 15 Jun 2017 19:20:58 GMT"); return t }()),
			Status:       to.Ptr(armiothub.JobStatusUnknown),
		}
		if !reflect.DeepEqual(exampleRes, res.JobResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JobResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_importdevices.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceProviderCommon_GetSubscriptionQuota(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_usages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceProviderCommon_GetSubscriptionQuota"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewResourceProviderCommonClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.GetSubscriptionQuota(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_usages.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.UserSubscriptionQuotaListResult{
			Value: []*armiothub.UserSubscriptionQuota{
				{
					Name: &armiothub.Name{
						LocalizedValue: to.Ptr("Free Hub Count"),
						Value:          to.Ptr("FreeHubCount"),
					},
					Type:         to.Ptr("/subscription/91d12660-3dec-467a-be2a-213b5544ddc0/providers/Microsoft.Devices/usages"),
					CurrentValue: to.Ptr[int32](1),
					ID:           to.Ptr("/subscription/91d12660-3dec-467a-be2a-213b5544ddc0/providers/Microsoft.Devices/usages/freeHubCount"),
					Limit:        to.Ptr[int32](1),
					Unit:         to.Ptr("count"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.UserSubscriptionQuotaListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UserSubscriptionQuotaListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_usages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_ListByIotHub(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listcertificates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_ListByIotHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewCertificatesClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.ListByIotHub(ctx,
		"myResourceGroup",
		"testhub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listcertificates.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.CertificateListDescription{
			Value: []*armiothub.CertificateDescription{
				{
					Name: to.Ptr("cert"),
					Type: to.Ptr("Microsoft.Devices/IotHubs/Certificates"),
					Etag: to.Ptr("AAAAAAExpNs="),
					ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/andbuc-hub/certificates/cert"),
					Properties: &armiothub.CertificateProperties{
						Certificate: to.Ptr("############################################"),
						Created:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
						Expiry:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Sat, 31 Dec 2039 23:59:59 GMT"); return t }()),
						IsVerified:  to.Ptr(false),
						Subject:     to.Ptr("CN=testdevice1"),
						Thumbprint:  to.Ptr("97388663832D0393C9246CAB4FBA2C8677185A25"),
						Updated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateListDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateListDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listcertificates.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_Get(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getcertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewCertificatesClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"testhub",
		"cert",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getcertificate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.CertificateDescription{
			Name: to.Ptr("cert"),
			Type: to.Ptr("Microsoft.Devices/IotHubs/Certificates"),
			Etag: to.Ptr("AAAAAAExpNs="),
			ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/andbuc-hub/certificates/cert"),
			Properties: &armiothub.CertificateProperties{
				Certificate: to.Ptr("############################################"),
				Created:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
				Expiry:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Sat, 31 Dec 2039 23:59:59 GMT"); return t }()),
				IsVerified:  to.Ptr(false),
				Subject:     to.Ptr("CN=testdevice1"),
				Thumbprint:  to.Ptr("97388663832D0393C9246CAB4FBA2C8677185A25"),
				Updated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getcertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_CreateOrUpdate(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_certificatescreateorupdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewCertificatesClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"iothub",
		"cert",
		armiothub.CertificateDescription{
			Properties: &armiothub.CertificateProperties{
				Certificate: to.Ptr("############################################"),
			},
		},
		&armiothub.CertificatesClientCreateOrUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_certificatescreateorupdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.CertificateDescription{
			Name: to.Ptr("cert"),
			Type: to.Ptr("Microsoft.Devices/IotHubs/Certificates"),
			Etag: to.Ptr("AAAAAAExpNs="),
			ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServives/myFirstProvisioningService/certificates/cert"),
			Properties: &armiothub.CertificateProperties{
				Certificate: to.Ptr("############################################"),
				Created:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
				Expiry:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Sat, 31 Dec 2039 23:59:59 GMT"); return t }()),
				IsVerified:  to.Ptr(false),
				Subject:     to.Ptr("CN=testdevice1"),
				Thumbprint:  to.Ptr("97388663832D0393C9246CAB4FBA2C8677185A25"),
				Updated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_certificatescreateorupdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_Delete(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_certificatesdelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewCertificatesClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myhub",
		"cert",
		"AAAAAAAADGk=",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_certificatesdelete.json: %v", err)
	}
}

func TestCertificates_GenerateVerificationCode(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_generateverificationcode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_GenerateVerificationCode"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewCertificatesClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.GenerateVerificationCode(ctx,
		"myResourceGroup",
		"testHub",
		"cert",
		"AAAAAAAADGk=",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_generateverificationcode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.CertificateWithNonceDescription{
			Name: to.Ptr("cert"),
			Properties: &armiothub.CertificatePropertiesWithNonce{
				Created:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
				Expiry:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Sat, 31 Dec 2039 23:59:59 GMT"); return t }()),
				IsVerified:       to.Ptr(false),
				Subject:          to.Ptr("CN=andbucdevice1"),
				Thumbprint:       to.Ptr("##############################"),
				Updated:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:26:56 GMT"); return t }()),
				VerificationCode: to.Ptr("##################################"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateWithNonceDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateWithNonceDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_generateverificationcode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCertificates_Verify(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_certverify.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Certificates_Verify"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewCertificatesClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.Verify(ctx,
		"myResourceGroup",
		"myFirstProvisioningService",
		"cert",
		"AAAAAAAADGk=",
		armiothub.CertificateVerificationDescription{
			Certificate: to.Ptr("#####################################"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_certverify.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.CertificateDescription{
			Name: to.Ptr("cert"),
			Type: to.Ptr("Microsoft.Devices/IotHubs/Certificates"),
			Etag: to.Ptr("AAAAAAExpTQ="),
			ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/ProvisioningServices/myFirstProvisioningService/certificates/cert"),
			Properties: &armiothub.CertificateProperties{
				Created:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:23:50 GMT"); return t }()),
				Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Sat, 31 Dec 2039 23:59:59 GMT"); return t }()),
				IsVerified: to.Ptr(true),
				Subject:    to.Ptr("CN=andbucdevice1"),
				Thumbprint: to.Ptr("97388663832D0393C9246CAB4FBA2C8677185A25"),
				Updated:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC1123, "Thu, 12 Oct 2017 19:26:56 GMT"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CertificateDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CertificateDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_certverify.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotHub_ManualFailover(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/IotHub_ManualFailover.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IotHub_ManualFailover"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	poller, err := client.BeginManualFailover(ctx,
		"testHub",
		"myResourceGroup",
		armiothub.FailoverInput{
			FailoverRegion: to.Ptr("testHub"),
		},
		&armiothub.ClientBeginManualFailoverOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/IotHub_ManualFailover.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/IotHub_ManualFailover.json: %v", err)
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listprivatelinkresources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewPrivateLinkResourcesClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.List(ctx,
		"myResourceGroup",
		"testHub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listprivatelinkresources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.PrivateLinkResources{
			Value: []*armiothub.GroupIDInformation{
				{
					Name: to.Ptr("iotHub"),
					Type: to.Ptr("Microsoft.Devices/IotHubs/PrivateLinkResources"),
					ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/testHub/PrivateLinkResources/iotHub"),
					Properties: &armiothub.GroupIDInformationProperties{
						GroupID: to.Ptr("iotHub"),
						RequiredMembers: []*string{
							to.Ptr("iotHub")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.azure-devices.net")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResources) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResources)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listprivatelinkresources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getprivatelinkresources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewPrivateLinkResourcesClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"testHub",
		"iotHub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getprivatelinkresources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.GroupIDInformation{
			Name: to.Ptr("iotHub"),
			Type: to.Ptr("Microsoft.Devices/IotHubs/PrivateLinkResources"),
			ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/testHub/PrivateLinkResources/iotHub"),
			Properties: &armiothub.GroupIDInformationProperties{
				GroupID: to.Ptr("iotHub"),
				RequiredMembers: []*string{
					to.Ptr("iotHub")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.azure-devices.net")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GroupIDInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GroupIDInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getprivatelinkresources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listprivateendpointconnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewPrivateEndpointConnectionsClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.List(ctx,
		"myResourceGroup",
		"testHub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listprivateendpointconnections.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armiothub.PrivateEndpointConnection{
			{
				Name: to.Ptr("myPrivateEndpointConnection"),
				Type: to.Ptr("Microsoft.Devices/IotHubs/PrivateEndpointConnections"),
				ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/testHub/PrivateEndpointConnections/myPrivateEndpointConnection"),
				Properties: &armiothub.PrivateEndpointConnectionProperties{
					PrivateEndpoint: &armiothub.PrivateEndpoint{
						ID: to.Ptr("/subscriptions/a9eba280-4734-4d49-878f-b5549d1d0453/resourceGroups/networkResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
					},
					PrivateLinkServiceConnectionState: &armiothub.PrivateLinkServiceConnectionState{
						Description:     to.Ptr("Please approve my request!"),
						ActionsRequired: to.Ptr("None"),
						Status:          to.Ptr(armiothub.PrivateLinkServiceConnectionStatusPending),
					},
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionArray)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_listprivateendpointconnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getprivateendpointconnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewPrivateEndpointConnectionsClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"testHub",
		"myPrivateEndpointConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getprivateendpointconnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.PrivateEndpointConnection{
			Name: to.Ptr("myPrivateEndpointConnection"),
			Type: to.Ptr("Microsoft.Devices/IotHubs/PrivateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/testHub/PrivateEndpointConnections/myPrivateEndpointConnection"),
			Properties: &armiothub.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armiothub.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/a9eba280-4734-4d49-878f-b5549d1d0453/resourceGroups/networkResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armiothub.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Please approve my request!"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armiothub.PrivateLinkServiceConnectionStatusPending),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_getprivateendpointconnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Update(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_updateprivateendpointconnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewPrivateEndpointConnectionsClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"testHub",
		"myPrivateEndpointConnection",
		armiothub.PrivateEndpointConnection{
			Properties: &armiothub.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armiothub.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by johndoe@contoso.com"),
					Status:      to.Ptr(armiothub.PrivateLinkServiceConnectionStatusApproved),
				},
			},
		},
		&armiothub.PrivateEndpointConnectionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_updateprivateendpointconnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_updateprivateendpointconnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.PrivateEndpointConnection{
			Name: to.Ptr("myPrivateEndpointConnection"),
			Type: to.Ptr("Microsoft.Devices/IotHubs/PrivateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/testHub/PrivateEndpointConnections/myPrivateEndpointConnection"),
			Properties: &armiothub.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armiothub.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/a9eba280-4734-4d49-878f-b5549d1d0453/resourceGroups/networkResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armiothub.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Approved by johndoe@contoso.com"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armiothub.PrivateLinkServiceConnectionStatusApproved),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_updateprivateendpointconnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_deleteprivateendpointconnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiothub.NewPrivateEndpointConnectionsClient("91d12660-3dec-467a-be2a-213b5544ddc0", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"testHub",
		"myPrivateEndpointConnection",
		&armiothub.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_deleteprivateendpointconnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_deleteprivateendpointconnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiothub.PrivateEndpointConnection{
			Name: to.Ptr("myPrivateEndpointConnection"),
			Type: to.Ptr("Microsoft.Devices/IotHubs/PrivateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/91d12660-3dec-467a-be2a-213b5544ddc0/resourceGroups/myResourceGroup/providers/Microsoft.Devices/IotHubs/testHub/PrivateEndpointConnections/myPrivateEndpointConnection"),
			Properties: &armiothub.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armiothub.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/a9eba280-4734-4d49-878f-b5549d1d0453/resourceGroups/networkResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armiothub.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Deleted"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armiothub.PrivateLinkServiceConnectionStatusDisconnected),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/iothub/resource-manager/Microsoft.Devices/stable/2021-07-02/examples/iothub_deleteprivateendpointconnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
