//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armiothub

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example Operations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestIotHubResource_Get(t *testing.T) {
	// From example IotHubResource_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"testHub",
		&IotHubResourceGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IotHubDescription.ID == nil {
		t.Fatal("IotHubDescription.ID should not be nil!")
	}
}

func TestIotHubResource_CreateOrUpdate(t *testing.T) {
	// From example IotHubResource_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"testHub",
		IotHubDescription{
			Resource: Resource{
				Location: to.StringPtr("centraluseuap"),
				Tags:     map[string]*string{},
			},
			Etag: to.StringPtr("AAAAAAFD6M4="),
			Properties: &IotHubProperties{
				CloudToDevice: &CloudToDeviceProperties{
					DefaultTTLAsIso8601: to.StringPtr("PT1H"),
					Feedback: &FeedbackProperties{
						LockDurationAsIso8601: to.StringPtr("PT1M"),
						MaxDeliveryCount:      to.Int32Ptr(10),
						TTLAsIso8601:          to.StringPtr("PT1H"),
					},
					MaxDeliveryCount: to.Int32Ptr(10),
				},
				EnableFileUploadNotifications: to.BoolPtr(false),
				EventHubEndpoints: map[string]*EventHubProperties{
					"events": &EventHubProperties{
						PartitionCount:      to.Int32Ptr(2),
						RetentionTimeInDays: to.Int64Ptr(1),
					},
				},
				Features:      CapabilitiesNone.ToPtr(),
				IPFilterRules: []*IPFilterRule{},
				MessagingEndpoints: map[string]*MessagingEndpointProperties{
					"fileNotifications": &MessagingEndpointProperties{
						LockDurationAsIso8601: to.StringPtr("PT1M"),
						MaxDeliveryCount:      to.Int32Ptr(10),
						TTLAsIso8601:          to.StringPtr("PT1H"),
					},
				},
				MinTLSVersion: to.StringPtr("1.2"),
				NetworkRuleSets: &NetworkRuleSetProperties{
					ApplyToBuiltInEventHubEndpoint: to.BoolPtr(true),
					DefaultAction:                  DefaultActionDeny.ToPtr(),
					IPRules: []*NetworkRuleSetIPRule{
						{
							Action:     NetworkRuleIPActionAllow.ToPtr(),
							FilterName: to.StringPtr("rule1"),
							IPMask:     to.StringPtr("131.117.159.53"),
						},
						{
							Action:     NetworkRuleIPActionAllow.ToPtr(),
							FilterName: to.StringPtr("rule2"),
							IPMask:     to.StringPtr("157.55.59.128/25"),
						}},
				},
				Routing: &RoutingProperties{
					Endpoints: &RoutingEndpoints{
						EventHubs:         []*RoutingEventHubProperties{},
						ServiceBusQueues:  []*RoutingServiceBusQueueEndpointProperties{},
						ServiceBusTopics:  []*RoutingServiceBusTopicEndpointProperties{},
						StorageContainers: []*RoutingStorageContainerProperties{},
					},
					FallbackRoute: &FallbackRouteProperties{
						Name:      to.StringPtr("$fallback"),
						Condition: to.StringPtr("true"),
						EndpointNames: []*string{
							to.StringPtr("events")},
						IsEnabled: to.BoolPtr(true),
						Source:    RoutingSourceDeviceMessages.ToPtr(),
					},
					Routes: []*RouteProperties{},
				},
				StorageEndpoints: map[string]*StorageEndpointProperties{
					"$default": &StorageEndpointProperties{
						ConnectionString: to.StringPtr(""),
						ContainerName:    to.StringPtr(""),
						SasTTLAsIso8601:  to.StringPtr("PT1H"),
					},
				},
			},
			SKU: &IotHubSKUInfo{
				Name:     IotHubSKUS1.ToPtr(),
				Capacity: to.Int64Ptr(1),
			},
		},
		&IotHubResourceBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.IotHubDescription.ID == nil {
		t.Fatal("IotHubDescription.ID should not be nil!")
	}
}

func TestIotHubResource_Update(t *testing.T) {
	// From example IotHubResource_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myHub",
		nil,
		&IotHubResourceBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.IotHubDescription.ID == nil {
		t.Fatal("IotHubDescription.ID should not be nil!")
	}
}

func TestIotHubResource_Delete(t *testing.T) {
	// From example IotHubResource_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"testHub",
		&IotHubResourceBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.IotHubDescription.ID == nil {
		t.Fatal("IotHubDescription.ID should not be nil!")
	}
}

func TestIotHubResource_ListBySubscription(t *testing.T) {
	// From example IotHubResource_ListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	pager := client.ListBySubscription(&IotHubResourceListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IotHubDescription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IotHubDescription.ID should not be nil!")
			}
		}
	}
}

func TestIotHubResource_ListByResourceGroup(t *testing.T) {
	// From example IotHubResource_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	pager := client.ListByResourceGroup("myResourceGroup",
		&IotHubResourceListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IotHubDescription.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IotHubDescription.ID should not be nil!")
			}
		}
	}
}

func TestIotHubResource_GetStats(t *testing.T) {
	// From example IotHubResource_GetStats
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	_, err := client.GetStats(ctx,
		"myResourceGroup",
		"testHub",
		&IotHubResourceGetStatsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIotHubResource_GetValidSkus(t *testing.T) {
	// From example IotHubResource_GetValidSkus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	pager := client.GetValidSKUs("myResourceGroup",
		"testHub",
		&IotHubResourceGetValidSKUsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestIotHubResource_ListEventHubConsumerGroups(t *testing.T) {
	// From example IotHubResource_ListEventHubConsumerGroups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	pager := client.ListEventHubConsumerGroups("myResourceGroup",
		"testHub",
		"events",
		&IotHubResourceListEventHubConsumerGroupsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventHubConsumerGroupInfo.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventHubConsumerGroupInfo.ID should not be nil!")
			}
		}
	}
}

func TestIotHubResource_GetEventHubConsumerGroup(t *testing.T) {
	// From example IotHubResource_ListEventHubConsumerGroups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	res, err := client.GetEventHubConsumerGroup(ctx,
		"myResourceGroup",
		"testHub",
		"events",
		"test",
		&IotHubResourceGetEventHubConsumerGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventHubConsumerGroupInfo.ID == nil {
		t.Fatal("EventHubConsumerGroupInfo.ID should not be nil!")
	}
}

func TestIotHubResource_CreateEventHubConsumerGroup(t *testing.T) {
	// From example IotHubResource_CreateEventHubConsumerGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	res, err := client.CreateEventHubConsumerGroup(ctx,
		"myResourceGroup",
		"testHub",
		"events",
		"test",
		EventHubConsumerGroupBodyDescription{
			Properties: &EventHubConsumerGroupName{
				Name: to.StringPtr("test"),
			},
		},
		&IotHubResourceCreateEventHubConsumerGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventHubConsumerGroupInfo.ID == nil {
		t.Fatal("EventHubConsumerGroupInfo.ID should not be nil!")
	}
}

func TestIotHubResource_DeleteEventHubConsumerGroup(t *testing.T) {
	// From example IotHubResource_DeleteEventHubConsumerGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	_, err := client.DeleteEventHubConsumerGroup(ctx,
		"myResourceGroup",
		"testHub",
		"events",
		"test",
		&IotHubResourceDeleteEventHubConsumerGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIotHubResource_ListJobs(t *testing.T) {
	// From example IotHubResource_ListJobs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	pager := client.ListJobs("myResourceGroup",
		"testHub",
		&IotHubResourceListJobsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestIotHubResource_GetJob(t *testing.T) {
	// From example IotHubResource_GetJob
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	_, err := client.GetJob(ctx,
		"myResourceGroup",
		"testHub",
		"test",
		&IotHubResourceGetJobOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIotHubResource_GetQuotaMetrics(t *testing.T) {
	// From example IotHubResource_GetQuotaMetrics
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	pager := client.GetQuotaMetrics("myResourceGroup",
		"testHub",
		&IotHubResourceGetQuotaMetricsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestIotHubResource_GetEndpointHealth(t *testing.T) {
	// From example IotHubResource_GetEndpointHealth
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	pager := client.GetEndpointHealth("myResourceGroup",
		"testHub",
		&IotHubResourceGetEndpointHealthOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestIotHubResource_CheckNameAvailability(t *testing.T) {
	// From example IotHubResource_CheckNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	_, err := client.CheckNameAvailability(ctx,
		OperationInputs{
			Name: to.StringPtr("test-request"),
		},
		&IotHubResourceCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIotHubResource_TestAllRoutes(t *testing.T) {
	// From example IotHubResource_TestAllRoutes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	_, err := client.TestAllRoutes(ctx,
		"testHub",
		"myResourceGroup",
		TestAllRoutesInput{
			Message: &RoutingMessage{
				AppProperties: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
				Body: to.StringPtr("Body of message"),
				SystemProperties: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			RoutingSource: RoutingSourceDeviceMessages.ToPtr(),
		},
		&IotHubResourceTestAllRoutesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIotHubResource_TestRoute(t *testing.T) {
	// From example IotHubResource_TestRoute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	_, err := client.TestRoute(ctx,
		"testHub",
		"myResourceGroup",
		TestRouteInput{
			Message: &RoutingMessage{
				AppProperties: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
				Body: to.StringPtr("Body of message"),
				SystemProperties: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Route: &RouteProperties{
				Name: to.StringPtr("Routeid"),
				EndpointNames: []*string{
					to.StringPtr("id1")},
				IsEnabled: to.BoolPtr(true),
				Source:    RoutingSourceDeviceMessages.ToPtr(),
			},
		},
		&IotHubResourceTestRouteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIotHubResource_ListKeys(t *testing.T) {
	// From example IotHubResource_ListKeys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	pager := client.ListKeys("myResourceGroup",
		"testHub",
		&IotHubResourceListKeysOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestIotHubResource_GetKeysForKeyName(t *testing.T) {
	// From example IotHubResource_GetKeysForKeyName
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	_, err := client.GetKeysForKeyName(ctx,
		"myResourceGroup",
		"testHub",
		"iothubowner",
		&IotHubResourceGetKeysForKeyNameOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIotHubResource_ExportDevices(t *testing.T) {
	// From example IotHubResource_ExportDevices
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	_, err := client.ExportDevices(ctx,
		"myResourceGroup",
		"testHub",
		ExportDevicesRequest{
			ExcludeKeys:            to.BoolPtr(true),
			ExportBlobContainerURI: to.StringPtr("testBlob"),
		},
		&IotHubResourceExportDevicesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIotHubResource_ImportDevices(t *testing.T) {
	// From example IotHubResource_ImportDevices
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubResourceClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	_, err := client.ImportDevices(ctx,
		"myResourceGroup",
		"testHub",
		ImportDevicesRequest{
			InputBlobContainerURI:  to.StringPtr("testBlob"),
			OutputBlobContainerURI: to.StringPtr("testBlob"),
		},
		&IotHubResourceImportDevicesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestResourceProviderCommon_GetSubscriptionQuota(t *testing.T) {
	// From example ResourceProviderCommon_GetSubscriptionQuota
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceProviderCommonClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	_, err := client.GetSubscriptionQuota(ctx,
		&ResourceProviderCommonGetSubscriptionQuotaOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCertificates_ListByIotHub(t *testing.T) {
	// From example Certificates_ListByIotHub
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	_, err := client.ListByIotHub(ctx,
		"myResourceGroup",
		"testhub",
		&CertificatesListByIotHubOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCertificates_Get(t *testing.T) {
	// From example Certificates_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"testhub",
		"cert",
		&CertificatesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CertificateDescription.ID == nil {
		t.Fatal("CertificateDescription.ID should not be nil!")
	}
}

func TestCertificates_CreateOrUpdate(t *testing.T) {
	// From example Certificates_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"iothub",
		"cert",
		CertificateDescription{
			Properties: &CertificateProperties{
				Certificate: to.StringPtr("############################################"),
			},
		},
		&CertificatesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CertificateDescription.ID == nil {
		t.Fatal("CertificateDescription.ID should not be nil!")
	}
}

func TestCertificates_Delete(t *testing.T) {
	// From example Certificates_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myhub",
		"cert",
		"AAAAAAAADGk=",
		&CertificatesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCertificates_GenerateVerificationCode(t *testing.T) {
	// From example Certificates_GenerateVerificationCode
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	res, err := client.GenerateVerificationCode(ctx,
		"myResourceGroup",
		"testHub",
		"cert",
		"AAAAAAAADGk=",
		&CertificatesGenerateVerificationCodeOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CertificateWithNonceDescription.ID == nil {
		t.Fatal("CertificateWithNonceDescription.ID should not be nil!")
	}
}

func TestCertificates_Verify(t *testing.T) {
	// From example Certificates_Verify
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	res, err := client.Verify(ctx,
		"myResourceGroup",
		"myFirstProvisioningService",
		"cert",
		"AAAAAAAADGk=",
		CertificateVerificationDescription{
			Certificate: to.StringPtr("#####################################"),
		},
		&CertificatesVerifyOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CertificateDescription.ID == nil {
		t.Fatal("CertificateDescription.ID should not be nil!")
	}
}

func TestIotHub_ManualFailover(t *testing.T) {
	// From example IotHub_ManualFailover
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIotHubClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	poller, err := client.BeginManualFailover(ctx,
		"testHub",
		"myResourceGroup",
		FailoverInput{
			FailoverRegion: to.StringPtr("testHub"),
		},
		&IotHubBeginManualFailoverOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example PrivateLinkResources_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	_, err := client.List(ctx,
		"myResourceGroup",
		"testHub",
		&PrivateLinkResourcesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example PrivateLinkResources_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"testHub",
		"iotHub",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GroupIDInformation.ID == nil {
		t.Fatal("GroupIDInformation.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example PrivateEndpointConnections_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	_, err := client.List(ctx,
		"myResourceGroup",
		"testHub",
		&PrivateEndpointConnectionsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example PrivateEndpointConnection_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"testHub",
		"myPrivateEndpointConnection",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Update(t *testing.T) {
	// From example PrivateEndpointConnection_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"testHub",
		"myPrivateEndpointConnection",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Approved by johndoe@contoso.com"),
					Status:      PrivateLinkServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example PrivateEndpointConnection_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"91d12660-3dec-467a-be2a-213b5544ddc0")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"testHub",
		"myPrivateEndpointConnection",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
