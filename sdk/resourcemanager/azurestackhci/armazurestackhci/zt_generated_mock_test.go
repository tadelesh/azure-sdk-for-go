//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurestackhci_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurestackhci/armazurestackhci"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestArcSettings_ListByCluster(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListArcSettingsByCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ArcSetting resources by HCI Cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewArcSettingsClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	pager := client.ListByCluster("test-rg",
		"myCluster",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListArcSettingsByCluster.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurestackhci.ArcSettingList{
			Value: []*armazurestackhci.ArcSetting{
				{
					Type: to.Ptr("Microsoft.AzureStackHCI/clusters/arcSettings"),
					ID:   to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster/arcSettings/default"),
					Properties: &armazurestackhci.ArcSettingProperties{
						AggregateState:           to.Ptr(armazurestackhci.ArcSettingAggregateStatePartiallyConnected),
						ArcInstanceResourceGroup: to.Ptr("ArcInstance-rg"),
						PerNodeDetails: []*armazurestackhci.PerNodeState{
							{
								Name:        to.Ptr("Node-1"),
								ArcInstance: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-1"),
								State:       to.Ptr(armazurestackhci.NodeArcStateConnected),
							},
							{
								Name:        to.Ptr("Node-2"),
								ArcInstance: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-2"),
								State:       to.Ptr(armazurestackhci.NodeArcStateDisconnected),
							}},
						ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
					},
					SystemData: &armazurestackhci.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurestackhci.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ArcSettingList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ArcSettingList)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListArcSettingsByCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArcSettings_Get(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/GetArcSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ArcSetting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewArcSettingsClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	res, err := client.Get(ctx,
		"test-rg",
		"myCluster",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/GetArcSetting.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestackhci.ArcSetting{
			Type: to.Ptr("Microsoft.AzureStackHCI/clusters/arcSettings"),
			ID:   to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster/arcSettings/default"),
			Properties: &armazurestackhci.ArcSettingProperties{
				AggregateState:           to.Ptr(armazurestackhci.ArcSettingAggregateStatePartiallyConnected),
				ArcInstanceResourceGroup: to.Ptr("ArcInstance-rg"),
				PerNodeDetails: []*armazurestackhci.PerNodeState{
					{
						Name:        to.Ptr("Node-1"),
						ArcInstance: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-1"),
						State:       to.Ptr(armazurestackhci.NodeArcStateConnected),
					},
					{
						Name:        to.Ptr("Node-2"),
						ArcInstance: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-2"),
						State:       to.Ptr(armazurestackhci.NodeArcStateDisconnected),
					}},
				ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
			},
			SystemData: &armazurestackhci.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurestackhci.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ArcSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ArcSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/GetArcSetting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArcSettings_Create(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/PutArcSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create ArcSetting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewArcSettingsClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	res, err := client.Create(ctx,
		"test-rg",
		"myCluster",
		"default",
		armazurestackhci.ArcSetting{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/PutArcSetting.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestackhci.ArcSetting{
			Type: to.Ptr("Microsoft.AzureStackHCI/clusters/arcSettings"),
			ID:   to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster/arcSettings/default"),
			Properties: &armazurestackhci.ArcSettingProperties{
				AggregateState:           to.Ptr(armazurestackhci.ArcSettingAggregateStateCreating),
				ArcInstanceResourceGroup: to.Ptr("ArcInstance-rg"),
				PerNodeDetails: []*armazurestackhci.PerNodeState{
					{
						Name:        to.Ptr("Node-1"),
						ArcInstance: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-1"),
						State:       to.Ptr(armazurestackhci.NodeArcStateCreating),
					},
					{
						Name:        to.Ptr("Node-2"),
						ArcInstance: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-2"),
						State:       to.Ptr(armazurestackhci.NodeArcStateCreating),
					}},
				ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
			},
			SystemData: &armazurestackhci.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurestackhci.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ArcSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ArcSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/PutArcSetting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArcSettings_Delete(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/DeleteArcSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete ArcSetting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewArcSettingsClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"test-rg",
		"myCluster",
		"default",
		&armazurestackhci.ArcSettingsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/DeleteArcSetting.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/DeleteArcSetting.json: %v", err)
	}
}

func TestClusters_ListBySubscription(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListClustersBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List clusters in a given subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewClustersClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListClustersBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurestackhci.ClusterList{
			Value: []*armazurestackhci.Cluster{
				{
					Name:     to.Ptr("myCluster1"),
					Type:     to.Ptr("Microsoft.AzureStackHCI/clusters"),
					ID:       to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg1/providers/Microsoft.AzureStackHCI/clusters/myCluster1"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Properties: &armazurestackhci.ClusterProperties{
						AADClientID:             to.Ptr("515da1c2-379e-49b4-9975-09e3e40c86be"),
						AADTenantID:             to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
						BillingModel:            to.Ptr("Trial"),
						CloudID:                 to.Ptr("91c2b355-4826-4e96-9164-e3f26dcf1cdd"),
						CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
						DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
							DiagnosticLevel:           to.Ptr(armazurestackhci.DiagnosticLevelBasic),
							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
						},
						ProvisioningState:  to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
						ReportedProperties: &armazurestackhci.ClusterReportedProperties{},
						Status:             to.Ptr(armazurestackhci.StatusNotYetRegistered),
						TrialDaysRemaining: to.Ptr[float32](29),
					},
					SystemData: &armazurestackhci.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurestackhci.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("myCluster2"),
					Type:     to.Ptr("Microsoft.AzureStackHCI/clusters"),
					ID:       to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg2/providers/Microsoft.AzureStackHCI/clusters/myCluster2"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armazurestackhci.ClusterProperties{
						AADClientID:             to.Ptr("24a6e53d-04e5-44d2-b7cc-1b732a847dfc"),
						AADTenantID:             to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
						BillingModel:            to.Ptr("Trial"),
						CloudID:                 to.Ptr("a3c0468f-e38e-4dda-ac48-817f620536f0"),
						CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
						DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
							DiagnosticLevel:           to.Ptr(armazurestackhci.DiagnosticLevelBasic),
							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
						},
						LastBillingTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T08:12:55.2312022Z"); return t }()),
						LastSyncTimestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.5625121Z"); return t }()),
						ProvisioningState:     to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
						RegistrationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.5625121Z"); return t }()),
						ReportedProperties: &armazurestackhci.ClusterReportedProperties{
							ClusterID:       to.Ptr("a76ac23a-1819-4e82-9410-e3e4ec3d1425"),
							ClusterName:     to.Ptr("cluster1"),
							ClusterVersion:  to.Ptr("10.0.17777"),
							DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
							ImdsAttestation: to.Ptr(armazurestackhci.ImdsAttestationDisabled),
							LastUpdated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.1946017Z"); return t }()),
							Nodes: []*armazurestackhci.ClusterNode{
								{
									Name:                      to.Ptr("Node1"),
									CoreCount:                 to.Ptr[float32](8),
									ID:                        to.Ptr[float32](0),
									Manufacturer:              to.Ptr("Dell Inc."),
									MemoryInGiB:               to.Ptr[float32](128),
									Model:                     to.Ptr("EMC AX740"),
									OSName:                    to.Ptr("Azure Stack HCI"),
									OSVersion:                 to.Ptr("10.0.17777.1061"),
									SerialNumber:              to.Ptr("Q45CZC3"),
									WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
								},
								{
									Name:                      to.Ptr("Node2"),
									CoreCount:                 to.Ptr[float32](8),
									ID:                        to.Ptr[float32](1),
									Manufacturer:              to.Ptr("Dell Inc."),
									MemoryInGiB:               to.Ptr[float32](128),
									Model:                     to.Ptr("EMC AX740"),
									OSName:                    to.Ptr("Azure Stack HCI"),
									OSVersion:                 to.Ptr("10.0.17777.1061"),
									SerialNumber:              to.Ptr("Q44BSC3"),
									WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
								},
								{
									Name:                      to.Ptr("Node3"),
									CoreCount:                 to.Ptr[float32](16),
									ID:                        to.Ptr[float32](2),
									Manufacturer:              to.Ptr("Dell Inc."),
									MemoryInGiB:               to.Ptr[float32](256),
									Model:                     to.Ptr("EMC AX740"),
									OSName:                    to.Ptr("Azure Stack HCI"),
									OSVersion:                 to.Ptr("10.0.17777.1061"),
									SerialNumber:              to.Ptr("Q44RFC3"),
									WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
								}},
						},
						Status:             to.Ptr(armazurestackhci.StatusConnectedRecently),
						TrialDaysRemaining: to.Ptr[float32](30),
					},
					SystemData: &armazurestackhci.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurestackhci.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterList)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListClustersBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_ListByResourceGroup(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListClustersByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List clusters in a given resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewClustersClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	pager := client.ListByResourceGroup("test-rg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListClustersByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurestackhci.ClusterList{
			Value: []*armazurestackhci.Cluster{
				{
					Name:     to.Ptr("myCluster1"),
					Type:     to.Ptr("Microsoft.AzureStackHCI/clusters"),
					ID:       to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster1"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Properties: &armazurestackhci.ClusterProperties{
						AADClientID:             to.Ptr("515da1c2-379e-49b4-9975-09e3e40c86be"),
						AADTenantID:             to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
						BillingModel:            to.Ptr("Trial"),
						CloudID:                 to.Ptr("91c2b355-4826-4e96-9164-e3f26dcf1cdd"),
						CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
						DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
							DiagnosticLevel:           to.Ptr(armazurestackhci.DiagnosticLevelBasic),
							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
						},
						ProvisioningState:  to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
						ReportedProperties: &armazurestackhci.ClusterReportedProperties{},
						Status:             to.Ptr(armazurestackhci.StatusNotYetRegistered),
						TrialDaysRemaining: to.Ptr[float32](29),
					},
					SystemData: &armazurestackhci.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurestackhci.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("myCluster2"),
					Type:     to.Ptr("Microsoft.AzureStackHCI/clusters"),
					ID:       to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster2"),
					Location: to.Ptr("East US"),
					Tags:     map[string]*string{},
					Properties: &armazurestackhci.ClusterProperties{
						AADClientID:             to.Ptr("24a6e53d-04e5-44d2-b7cc-1b732a847dfc"),
						AADTenantID:             to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
						BillingModel:            to.Ptr("Trial"),
						CloudID:                 to.Ptr("a3c0468f-e38e-4dda-ac48-817f620536f0"),
						CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
						DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
							DiagnosticLevel:           to.Ptr(armazurestackhci.DiagnosticLevelBasic),
							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
						},
						LastBillingTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T08:12:55.2312022Z"); return t }()),
						LastSyncTimestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.5625121Z"); return t }()),
						ProvisioningState:     to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
						RegistrationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.5625121Z"); return t }()),
						ReportedProperties: &armazurestackhci.ClusterReportedProperties{
							ClusterID:       to.Ptr("a76ac23a-1819-4e82-9410-e3e4ec3d1425"),
							ClusterName:     to.Ptr("cluster1"),
							ClusterVersion:  to.Ptr("10.0.17777"),
							DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
							ImdsAttestation: to.Ptr(armazurestackhci.ImdsAttestationDisabled),
							LastUpdated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.1946017Z"); return t }()),
							Nodes: []*armazurestackhci.ClusterNode{
								{
									Name:                      to.Ptr("Node1"),
									CoreCount:                 to.Ptr[float32](8),
									ID:                        to.Ptr[float32](0),
									Manufacturer:              to.Ptr("Dell Inc."),
									MemoryInGiB:               to.Ptr[float32](128),
									Model:                     to.Ptr("EMC AX740"),
									OSName:                    to.Ptr("Azure Stack HCI"),
									OSVersion:                 to.Ptr("10.0.17777.1061"),
									SerialNumber:              to.Ptr("Q45CZC3"),
									WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
								},
								{
									Name:                      to.Ptr("Node2"),
									CoreCount:                 to.Ptr[float32](8),
									ID:                        to.Ptr[float32](1),
									Manufacturer:              to.Ptr("Dell Inc."),
									MemoryInGiB:               to.Ptr[float32](128),
									Model:                     to.Ptr("EMC AX740"),
									OSName:                    to.Ptr("Azure Stack HCI"),
									OSVersion:                 to.Ptr("10.0.17777.1061"),
									SerialNumber:              to.Ptr("Q44BSC3"),
									WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
								},
								{
									Name:                      to.Ptr("Node3"),
									CoreCount:                 to.Ptr[float32](16),
									ID:                        to.Ptr[float32](2),
									Manufacturer:              to.Ptr("Dell Inc."),
									MemoryInGiB:               to.Ptr[float32](256),
									Model:                     to.Ptr("EMC AX740"),
									OSName:                    to.Ptr("Azure Stack HCI"),
									OSVersion:                 to.Ptr("10.0.17777.1061"),
									SerialNumber:              to.Ptr("Q44RFC3"),
									WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
								}},
						},
						Status:             to.Ptr(armazurestackhci.StatusConnectedRecently),
						TrialDaysRemaining: to.Ptr[float32](30),
					},
					SystemData: &armazurestackhci.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurestackhci.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterList)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListClustersByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Get(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/GetCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewClustersClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	res, err := client.Get(ctx,
		"test-rg",
		"myCluster",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/GetCluster.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestackhci.Cluster{
			Name:     to.Ptr("myCluster"),
			Type:     to.Ptr("Microsoft.AzureStackHCI/clusters"),
			ID:       to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster"),
			Location: to.Ptr("East US"),
			Tags:     map[string]*string{},
			Properties: &armazurestackhci.ClusterProperties{
				AADClientID:             to.Ptr("24a6e53d-04e5-44d2-b7cc-1b732a847dfc"),
				AADTenantID:             to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
				BillingModel:            to.Ptr("Trial"),
				CloudID:                 to.Ptr("a3c0468f-e38e-4dda-ac48-817f620536f0"),
				CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
				DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
					DiagnosticLevel:           to.Ptr(armazurestackhci.DiagnosticLevelBasic),
					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
				},
				LastBillingTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T08:12:55.2312022Z"); return t }()),
				LastSyncTimestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.5625121Z"); return t }()),
				ProvisioningState:     to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
				RegistrationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.5625121Z"); return t }()),
				ReportedProperties: &armazurestackhci.ClusterReportedProperties{
					ClusterID:       to.Ptr("a76ac23a-1819-4e82-9410-e3e4ec3d1425"),
					ClusterName:     to.Ptr("cluster1"),
					ClusterVersion:  to.Ptr("10.0.17777"),
					DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
					ImdsAttestation: to.Ptr(armazurestackhci.ImdsAttestationDisabled),
					LastUpdated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.1946017Z"); return t }()),
					Nodes: []*armazurestackhci.ClusterNode{
						{
							Name:                      to.Ptr("Node1"),
							CoreCount:                 to.Ptr[float32](8),
							ID:                        to.Ptr[float32](1),
							Manufacturer:              to.Ptr("Dell Inc."),
							MemoryInGiB:               to.Ptr[float32](128),
							Model:                     to.Ptr("EMC AX740"),
							OSName:                    to.Ptr("Azure Stack HCI"),
							OSVersion:                 to.Ptr("10.0.17777.1061"),
							SerialNumber:              to.Ptr("Q45CZC3"),
							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
						},
						{
							Name:                      to.Ptr("Node2"),
							CoreCount:                 to.Ptr[float32](8),
							ID:                        to.Ptr[float32](2),
							Manufacturer:              to.Ptr("Dell Inc."),
							MemoryInGiB:               to.Ptr[float32](128),
							Model:                     to.Ptr("EMC AX740"),
							OSName:                    to.Ptr("Azure Stack HCI"),
							OSVersion:                 to.Ptr("10.0.17777.1061"),
							SerialNumber:              to.Ptr("Q44BSC3"),
							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
						},
						{
							Name:                      to.Ptr("Node3"),
							CoreCount:                 to.Ptr[float32](16),
							ID:                        to.Ptr[float32](3),
							Manufacturer:              to.Ptr("Dell Inc."),
							MemoryInGiB:               to.Ptr[float32](256),
							Model:                     to.Ptr("EMC AX740"),
							OSName:                    to.Ptr("Azure Stack HCI"),
							OSVersion:                 to.Ptr("10.0.17777.1061"),
							SerialNumber:              to.Ptr("Q44RFC3"),
							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
						}},
				},
				Status:             to.Ptr(armazurestackhci.StatusConnectedRecently),
				TrialDaysRemaining: to.Ptr[float32](30),
			},
			SystemData: &armazurestackhci.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurestackhci.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/GetCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Create(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/CreateCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewClustersClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	res, err := client.Create(ctx,
		"test-rg",
		"myCluster",
		armazurestackhci.Cluster{
			Location: to.Ptr("East US"),
			Properties: &armazurestackhci.ClusterProperties{
				AADClientID:             to.Ptr("24a6e53d-04e5-44d2-b7cc-1b732a847dfc"),
				AADTenantID:             to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
				CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/CreateCluster.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestackhci.Cluster{
			Name:     to.Ptr("myCluster"),
			Type:     to.Ptr("Microsoft.AzureStackHCI/clusters"),
			ID:       to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster"),
			Location: to.Ptr("East US"),
			Tags:     map[string]*string{},
			Properties: &armazurestackhci.ClusterProperties{
				AADClientID:             to.Ptr("24a6e53d-04e5-44d2-b7cc-1b732a847dfc"),
				AADTenantID:             to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
				BillingModel:            to.Ptr("Trial"),
				CloudID:                 to.Ptr("a3c0468f-e38e-4dda-ac48-817f620536f0"),
				CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
				DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
					DiagnosticLevel:           to.Ptr(armazurestackhci.DiagnosticLevelBasic),
					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionDisabled),
				},
				ProvisioningState:  to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
				ReportedProperties: &armazurestackhci.ClusterReportedProperties{},
				Status:             to.Ptr(armazurestackhci.StatusNotYetRegistered),
				TrialDaysRemaining: to.Ptr[float32](30),
			},
			SystemData: &armazurestackhci.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurestackhci.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/CreateCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Update(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/UpdateCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewClustersClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	res, err := client.Update(ctx,
		"test-rg",
		"myCluster",
		armazurestackhci.ClusterPatch{
			Properties: &armazurestackhci.ClusterPatchProperties{
				CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
				DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
					DiagnosticLevel:           to.Ptr(armazurestackhci.DiagnosticLevelBasic),
					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
				},
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/UpdateCluster.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestackhci.Cluster{
			Name:     to.Ptr("myCluster"),
			Type:     to.Ptr("Microsoft.AzureStackHCI/clusters"),
			ID:       to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armazurestackhci.ClusterProperties{
				AADClientID:             to.Ptr("515da1c2-379e-49b4-9975-09e3e40c86be"),
				AADTenantID:             to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
				BillingModel:            to.Ptr("Trial"),
				CloudID:                 to.Ptr("91c2b355-4826-4e96-9164-e3f26dcf1cdd"),
				CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
				DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
					DiagnosticLevel:           to.Ptr(armazurestackhci.DiagnosticLevelBasic),
					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
				},
				LastBillingTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T08:12:55.2312022Z"); return t }()),
				LastSyncTimestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.5625121Z"); return t }()),
				ProvisioningState:     to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
				RegistrationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.5625121Z"); return t }()),
				ReportedProperties: &armazurestackhci.ClusterReportedProperties{
					ClusterID:       to.Ptr("a76ac23a-1819-4e82-9410-e3e4ec3d1425"),
					ClusterName:     to.Ptr("cluster1"),
					ClusterVersion:  to.Ptr("10.0.17777"),
					DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
					ImdsAttestation: to.Ptr(armazurestackhci.ImdsAttestationDisabled),
					LastUpdated:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.1946017Z"); return t }()),
					Nodes: []*armazurestackhci.ClusterNode{
						{
							Name:                      to.Ptr("Node1"),
							CoreCount:                 to.Ptr[float32](8),
							ID:                        to.Ptr[float32](1),
							Manufacturer:              to.Ptr("Dell Inc."),
							MemoryInGiB:               to.Ptr[float32](128),
							Model:                     to.Ptr("EMC AX740"),
							OSName:                    to.Ptr("Azure Stack HCI"),
							OSVersion:                 to.Ptr("10.0.17777.1061"),
							SerialNumber:              to.Ptr("Q45CZC3"),
							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
						},
						{
							Name:                      to.Ptr("Node2"),
							CoreCount:                 to.Ptr[float32](8),
							ID:                        to.Ptr[float32](2),
							Manufacturer:              to.Ptr("Dell Inc."),
							MemoryInGiB:               to.Ptr[float32](128),
							Model:                     to.Ptr("EMC AX740"),
							OSName:                    to.Ptr("Azure Stack HCI"),
							OSVersion:                 to.Ptr("10.0.17777.1061"),
							SerialNumber:              to.Ptr("Q44BSC3"),
							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
						},
						{
							Name:                      to.Ptr("Node3"),
							CoreCount:                 to.Ptr[float32](16),
							ID:                        to.Ptr[float32](3),
							Manufacturer:              to.Ptr("Dell Inc."),
							MemoryInGiB:               to.Ptr[float32](256),
							Model:                     to.Ptr("EMC AX740"),
							OSName:                    to.Ptr("Azure Stack HCI"),
							OSVersion:                 to.Ptr("10.0.17777.1061"),
							SerialNumber:              to.Ptr("Q44RFC3"),
							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
						}},
				},
				Status:             to.Ptr(armazurestackhci.StatusConnectedRecently),
				TrialDaysRemaining: to.Ptr[float32](30),
			},
			SystemData: &armazurestackhci.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurestackhci.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/UpdateCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Delete(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/DeleteCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewClustersClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	_, err := client.Delete(ctx,
		"test-rg",
		"myCluster",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/DeleteCluster.json: %v", err)
	}
}

func TestExtensions_ListByArcSetting(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListExtensionsByArcSetting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Extensions under ArcSetting resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewExtensionsClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	pager := client.ListByArcSetting("test-rg",
		"myCluster",
		"default",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListExtensionsByArcSetting.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armazurestackhci.ExtensionList{
			Value: []*armazurestackhci.Extension{
				{
					Name: to.Ptr("MicrosoftMonitoringAgent"),
					Type: to.Ptr("Microsoft.AzureStackHCI/clusters/arcSettings/extensions"),
					ID:   to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster/arcSettings/default/extensions/MicrosoftMonitoringAgent"),
					Properties: &armazurestackhci.ExtensionProperties{
						AggregateState: to.Ptr(armazurestackhci.ExtensionAggregateStatePartiallyConnected),
						ExtensionParameters: &armazurestackhci.ExtensionParameters{
							Type:                    to.Ptr("string"),
							AutoUpgradeMinorVersion: to.Ptr(false),
							Publisher:               to.Ptr("Microsoft.Compute"),
							Settings: map[string]interface{}{
								"workspaceId": "xx",
							},
							TypeHandlerVersion: to.Ptr("1.10.3"),
						},
						PerNodeExtensionDetails: []*armazurestackhci.PerNodeExtensionState{
							{
								Name:      to.Ptr("Node-1"),
								Extension: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-1/Extensions/MicrosoftMonitoringAgent"),
								State:     to.Ptr(armazurestackhci.NodeExtensionStateConnected),
							},
							{
								Name:      to.Ptr("Node-2"),
								Extension: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-2/Extensions/MicrosoftMonitoringAgent"),
								State:     to.Ptr(armazurestackhci.NodeExtensionStateDisconnected),
							}},
						ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
					},
					SystemData: &armazurestackhci.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurestackhci.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("CustomScriptExtension"),
					Type: to.Ptr("Microsoft.AzureStackHCI/clusters/arcSettings/extensions"),
					ID:   to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster/arcSettings/default/Extensions/SecurityExtension"),
					Properties: &armazurestackhci.ExtensionProperties{
						AggregateState: to.Ptr(armazurestackhci.ExtensionAggregateStatePartiallySucceeded),
						ExtensionParameters: &armazurestackhci.ExtensionParameters{
							Type:                    to.Ptr("string"),
							AutoUpgradeMinorVersion: to.Ptr(false),
							Publisher:               to.Ptr("Microsoft.CustomScriptExtension"),
							Settings: map[string]interface{}{
								"scriptLocation": "xx",
							},
							TypeHandlerVersion: to.Ptr("1.10.3"),
						},
						PerNodeExtensionDetails: []*armazurestackhci.PerNodeExtensionState{
							{
								Name:      to.Ptr("Node-1"),
								Extension: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-1/Extensions/SecurityExtension"),
								State:     to.Ptr(armazurestackhci.NodeExtensionStateSucceeded),
							},
							{
								Name:      to.Ptr("Node-2"),
								Extension: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-2/Extensions/SecurityExtension"),
								State:     to.Ptr(armazurestackhci.NodeExtensionStateFailed),
							}},
						ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
					},
					SystemData: &armazurestackhci.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armazurestackhci.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExtensionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExtensionList)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListExtensionsByArcSetting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensions_Get(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/GetExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ArcSettings Extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewExtensionsClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	res, err := client.Get(ctx,
		"test-rg",
		"myCluster",
		"default",
		"MicrosoftMonitoringAgent",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/GetExtension.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestackhci.Extension{
			Name: to.Ptr("MicrosoftMonitoringAgent"),
			Type: to.Ptr("Microsoft.AzureStackHCI/clusters/arcSettings/extensions"),
			ID:   to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster/arcSettings/default/extensions/MicrosoftMonitoringAgent"),
			Properties: &armazurestackhci.ExtensionProperties{
				AggregateState: to.Ptr(armazurestackhci.ExtensionAggregateStatePartiallySucceeded),
				ExtensionParameters: &armazurestackhci.ExtensionParameters{
					Type:                    to.Ptr("string"),
					AutoUpgradeMinorVersion: to.Ptr(false),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings: map[string]interface{}{
						"workspaceId": "xx",
					},
					TypeHandlerVersion: to.Ptr("1.10.3"),
				},
				PerNodeExtensionDetails: []*armazurestackhci.PerNodeExtensionState{
					{
						Name:      to.Ptr("Node-1"),
						Extension: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-1/Extensions/MicrosoftMonitoringAgent"),
						State:     to.Ptr(armazurestackhci.NodeExtensionStateSucceeded),
					},
					{
						Name:      to.Ptr("Node-2"),
						Extension: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-2/Extensions/MicrosoftMonitoringAgent"),
						State:     to.Ptr(armazurestackhci.NodeExtensionStateFailed),
					}},
				ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
			},
			SystemData: &armazurestackhci.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurestackhci.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Extension) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Extension)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/GetExtension.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensions_Create(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/PutExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Arc Extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewExtensionsClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"test-rg",
		"myCluster",
		"default",
		"MicrosoftMonitoringAgent",
		armazurestackhci.Extension{
			Properties: &armazurestackhci.ExtensionProperties{
				ExtensionParameters: &armazurestackhci.ExtensionParameters{
					Type: to.Ptr("MicrosoftMonitoringAgent"),
					ProtectedSettings: map[string]interface{}{
						"workspaceKey": "xx",
					},
					Publisher: to.Ptr("Microsoft.Compute"),
					Settings: map[string]interface{}{
						"workspaceId": "xx",
					},
					TypeHandlerVersion: to.Ptr("1.10"),
				},
			},
		},
		&armazurestackhci.ExtensionsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/PutExtension.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/PutExtension.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestackhci.Extension{
			Name: to.Ptr("MicrosoftMonitoringAgent"),
			Type: to.Ptr("Microsoft.AzureStackHCI/clusters/arcSettings/extensions"),
			ID:   to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster/arcSettings/default/extensions/MicrosoftMonitoringAgent"),
			Properties: &armazurestackhci.ExtensionProperties{
				AggregateState: to.Ptr(armazurestackhci.ExtensionAggregateStatePartiallySucceeded),
				ExtensionParameters: &armazurestackhci.ExtensionParameters{
					Type:                    to.Ptr("string"),
					AutoUpgradeMinorVersion: to.Ptr(false),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings: map[string]interface{}{
						"workspaceId": "xx",
					},
					TypeHandlerVersion: to.Ptr("1.10.3"),
				},
				PerNodeExtensionDetails: []*armazurestackhci.PerNodeExtensionState{
					{
						Name:      to.Ptr("Node-1"),
						Extension: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-1/Extensions/MicrosoftMonitoringAgent"),
						State:     to.Ptr(armazurestackhci.NodeExtensionStateSucceeded),
					},
					{
						Name:      to.Ptr("Node-2"),
						Extension: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-2/Extensions/MicrosoftMonitoringAgent"),
						State:     to.Ptr(armazurestackhci.NodeExtensionStateFailed),
					}},
				ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
			},
			SystemData: &armazurestackhci.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armazurestackhci.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Extension) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Extension)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/PutExtension.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensions_Update(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/PatchExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Arc Extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewExtensionsClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"test-rg",
		"myCluster",
		"default",
		"MicrosoftMonitoringAgent",
		armazurestackhci.Extension{
			Properties: &armazurestackhci.ExtensionProperties{
				ExtensionParameters: &armazurestackhci.ExtensionParameters{
					Type:      to.Ptr("MicrosoftMonitoringAgent"),
					Publisher: to.Ptr("Microsoft.Compute"),
					Settings: map[string]interface{}{
						"workspaceId": "xx",
					},
					TypeHandlerVersion: to.Ptr("1.10"),
				},
			},
		},
		&armazurestackhci.ExtensionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/PatchExtension.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/PatchExtension.json: %v", err)
	}
}

func TestExtensions_Delete(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/DeleteExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Arc Extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewExtensionsClient("fd3c3665-1729-4b7b-9a38-238e83b0f98b", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"test-rg",
		"myCluster",
		"default",
		"MicrosoftMonitoringAgent",
		&armazurestackhci.ExtensionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/DeleteExtension.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/DeleteExtension.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List operations available with the Microsoft.AzureStackHCI provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armazurestackhci.NewOperationsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListOperations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armazurestackhci.OperationListResult{
			Value: []*armazurestackhci.Operation{
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/Register/Action"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Registers the subscription for the Azure Stack HCI resource provider and enables the creation of Azure Stack HCI resources."),
						Operation:   to.Ptr("Registers the Azure Stack HCI Resource Provider"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("Register"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/Unregister/Action"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Unregisters the subscription for the Azure Stack HCI resource provider."),
						Operation:   to.Ptr("Unregisters the Azure Stack HCI Resource Provider"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("Unregister"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/Operations/Read"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Gets operations"),
						Operation:   to.Ptr("Gets/List operations resources"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("Operations"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/Clusters/Read"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Gets clusters"),
						Operation:   to.Ptr("Gets/List cluster resources"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("Clusters"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/Clusters/Write"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Creates or updates a cluster"),
						Operation:   to.Ptr("Create/update cluster resources"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("Clusters"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/Clusters/Delete"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Deletes cluster resource"),
						Operation:   to.Ptr("Deletes cluster resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("Clusters"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/Clusters/ArcSettings/Read"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Gets arc resource of HCI cluster"),
						Operation:   to.Ptr("Gets/List arc resources"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("Clusters/ArcSettings"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/Clusters/ArcSettings/Write"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Create or updates arc resource of HCI cluster"),
						Operation:   to.Ptr("Create/Update arc resources"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("Clusters/ArcSettings"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/Clusters/ArcSettings/Delete"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Delete arc resource of HCI cluster"),
						Operation:   to.Ptr("Delete arc resources"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("Clusters/ArcSettings"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/Clusters/ArcSettings/Extensions/Read"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Gets extension resource of HCI cluster"),
						Operation:   to.Ptr("Gets/List extension resources of HCI cluster"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("Clusters/ArcSettings/Extensions"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/Clusters/ArcSettings/Extensions/Write"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Create or update extension resource of HCI cluster"),
						Operation:   to.Ptr("Create/Update extension resources of HCI cluster"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("Clusters/ArcSettings/Extensions"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/Clusters/ArcSettings/Extensions/Delete"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Delete extension resources of HCI cluster"),
						Operation:   to.Ptr("Delete extension resources of HCI cluster"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("Clusters/ArcSettings/Extensions"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualMachines/Restart/Action"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Restarts virtual machine resource"),
						Operation:   to.Ptr("Restarts virtual machine resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualMachines"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualMachines/Start/Action"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Starts virtual machine resource"),
						Operation:   to.Ptr("Starts virtual machine resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualMachines"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualMachines/Stop/Action"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Stops virtual machine resource"),
						Operation:   to.Ptr("Stops virtual machine resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualMachines"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualMachines/Delete"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Deletes virtual machine resource"),
						Operation:   to.Ptr("Deletes virtual machine resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualMachines"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualMachines/Write"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Creates/Updates virtual machine resource"),
						Operation:   to.Ptr("Creates/Updates virtual machine resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualMachines"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualMachines/Read"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Gets/Lists virtual machine resource"),
						Operation:   to.Ptr("Gets/Lists virtual machine resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualMachines"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualNetworks/Delete"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Deletes virtual networks resource"),
						Operation:   to.Ptr("Deletes virtual networks resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualNetworks"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualNetworks/Write"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Creates/Updates virtual networks resource"),
						Operation:   to.Ptr("Creates/Updates virtual networks resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualNetworks"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualNetworks/Read"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Gets/Lists virtual networks resource"),
						Operation:   to.Ptr("Gets/Lists virtual networks resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualNetworks"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualHardDisks/Delete"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Deletes virtual hard disk resource"),
						Operation:   to.Ptr("Deletes virtual hard disk resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualHardDisks"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualHardDisks/Write"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Creates/Updates virtual hard disk resource"),
						Operation:   to.Ptr("Creates/Updates virtual hard disk resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualHardDisks"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualHardDisks/Read"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Gets/Lists virtual hard disk resource"),
						Operation:   to.Ptr("Gets/Lists virtual hard disk resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualHardDisks"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/NetworkInterfaces/Delete"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Deletes network interfaces resource"),
						Operation:   to.Ptr("Deletes network interfaces resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("NetworkInterfaces"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/NetworkInterfaces/Write"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Creates/Updates network interfaces resource"),
						Operation:   to.Ptr("Creates/Updates network interfaces resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("NetworkInterfaces"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/NetworkInterfaces/Read"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Gets/Lists network interfaces resource"),
						Operation:   to.Ptr("Gets/Lists network interfaces resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("NetworkInterfaces"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/GalleryImages/Delete"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Deletes gallery images resource"),
						Operation:   to.Ptr("Deletes gallery images resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("GalleryImages"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/GalleryImages/Write"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Creates/Updates gallery images resource"),
						Operation:   to.Ptr("Creates/Updates gallery images resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("GalleryImages"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/GalleryImages/Read"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Gets/Lists gallery images resource"),
						Operation:   to.Ptr("Gets/Lists gallery images resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("GalleryImages"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualMachines/HybridIdentityMetadata/Read"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Gets/Lists virtual machine hybrid identity metadata proxy resource"),
						Operation:   to.Ptr("Gets/Lists virtual machine hybrid identity metadata proxy resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualMachines/HybridIdentityMetadata"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualMachines/Extensions/Read"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Gets/Lists virtual machine extensions resource"),
						Operation:   to.Ptr("Gets/Lists virtual machine extensions resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualMachines/Extensions"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualMachines/Extensions/Write"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Creates/Updates virtual machine extensions resource"),
						Operation:   to.Ptr("Creates/Updates virtual machine extensions resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualMachines/Extensions"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.AzureStackHCI/VirtualMachines/Extensions/Delete"),
					Display: &armazurestackhci.OperationDisplay{
						Description: to.Ptr("Deletes virtual machine extensions resource"),
						Operation:   to.Ptr("Deletes virtual machine extensions resource"),
						Provider:    to.Ptr("Microsoft.AzureStackHCI"),
						Resource:    to.Ptr("VirtualMachines/Extensions"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2022-01-01/examples/ListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
