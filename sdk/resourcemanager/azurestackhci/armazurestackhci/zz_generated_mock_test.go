//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurestackhci

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestArcSettings_ListByCluster(t *testing.T) {
	// From example List ArcSetting resources by HCI Cluster
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewArcSettingsClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	pager := client.ListByCluster("test-rg",
		"myCluster",
		&ArcSettingsListByClusterOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ArcSetting.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ArcSetting.ID should not be nil!")
			}
		}
	}
}

func TestArcSettings_Get(t *testing.T) {
	// From example Get ArcSetting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewArcSettingsClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	res, err := client.Get(ctx,
		"test-rg",
		"myCluster",
		"default",
		&ArcSettingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ArcSetting.ID == nil {
		t.Fatal("ArcSetting.ID should not be nil!")
	}
}

func TestArcSettings_Create(t *testing.T) {
	// From example Create ArcSetting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewArcSettingsClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	res, err := client.Create(ctx,
		"test-rg",
		"myCluster",
		"default",
		ArcSetting{},
		&ArcSettingsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ArcSetting.ID == nil {
		t.Fatal("ArcSetting.ID should not be nil!")
	}
}

func TestArcSettings_Delete(t *testing.T) {
	// From example Delete ArcSetting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewArcSettingsClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	poller, err := client.BeginDelete(ctx,
		"test-rg",
		"myCluster",
		"default",
		&ArcSettingsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestClusters_ListBySubscription(t *testing.T) {
	// From example List clusters in a given subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	pager := client.ListBySubscription(&ClustersListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Cluster.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Cluster.ID should not be nil!")
			}
		}
	}
}

func TestClusters_ListByResourceGroup(t *testing.T) {
	// From example List clusters in a given resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	pager := client.ListByResourceGroup("test-rg",
		&ClustersListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Cluster.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Cluster.ID should not be nil!")
			}
		}
	}
}

func TestClusters_Get(t *testing.T) {
	// From example Get cluster
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	res, err := client.Get(ctx,
		"test-rg",
		"myCluster",
		&ClustersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Cluster.ID == nil {
		t.Fatal("Cluster.ID should not be nil!")
	}
}

func TestClusters_Create(t *testing.T) {
	// From example Create cluster
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	res, err := client.Create(ctx,
		"test-rg",
		"myCluster",
		Cluster{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("East US"),
			},
			Properties: &ClusterProperties{
				AADClientID:             to.StringPtr("24a6e53d-04e5-44d2-b7cc-1b732a847dfc"),
				AADTenantID:             to.StringPtr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
				CloudManagementEndpoint: to.StringPtr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
			},
		},
		&ClustersCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Cluster.ID == nil {
		t.Fatal("Cluster.ID should not be nil!")
	}
}

func TestClusters_Update(t *testing.T) {
	// From example Update cluster
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	res, err := client.Update(ctx,
		"test-rg",
		"myCluster",
		ClusterPatch{
			Properties: &ClusterPatchProperties{
				CloudManagementEndpoint: to.StringPtr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
				DesiredProperties: &ClusterDesiredProperties{
					DiagnosticLevel:           DiagnosticLevelBasic.ToPtr(),
					WindowsServerSubscription: WindowsServerSubscriptionEnabled.ToPtr(),
				},
			},
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&ClustersUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Cluster.ID == nil {
		t.Fatal("Cluster.ID should not be nil!")
	}
}

func TestClusters_Delete(t *testing.T) {
	// From example Delete cluster
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	_, err := client.Delete(ctx,
		"test-rg",
		"myCluster",
		&ClustersDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestExtensions_ListByArcSetting(t *testing.T) {
	// From example List Extensions under ArcSetting resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtensionsClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	pager := client.ListByArcSetting("test-rg",
		"myCluster",
		"default",
		&ExtensionsListByArcSettingOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Extension.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Extension.ID should not be nil!")
			}
		}
	}
}

func TestExtensions_Get(t *testing.T) {
	// From example Get ArcSettings Extension
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtensionsClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	res, err := client.Get(ctx,
		"test-rg",
		"myCluster",
		"default",
		"MicrosoftMonitoringAgent",
		&ExtensionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Extension.ID == nil {
		t.Fatal("Extension.ID should not be nil!")
	}
}

func TestExtensions_Create(t *testing.T) {
	// From example Create Arc Extension
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtensionsClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	poller, err := client.BeginCreate(ctx,
		"test-rg",
		"myCluster",
		"default",
		"MicrosoftMonitoringAgent",
		Extension{
			Properties: &ExtensionProperties{
				ExtensionParameters: &ExtensionParameters{
					Type: to.StringPtr("MicrosoftMonitoringAgent"),
					ProtectedSettings: map[string]interface{}{
						"workspaceKey": "xx",
					},
					Publisher: to.StringPtr("Microsoft.Compute"),
					Settings: map[string]interface{}{
						"workspaceId": "xx",
					},
					TypeHandlerVersion: to.StringPtr("1.10"),
				},
			},
		},
		&ExtensionsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Extension.ID == nil {
		t.Fatal("Extension.ID should not be nil!")
	}
}

func TestExtensions_Update(t *testing.T) {
	// From example Update Arc Extension
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtensionsClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	poller, err := client.BeginUpdate(ctx,
		"test-rg",
		"myCluster",
		"default",
		"MicrosoftMonitoringAgent",
		Extension{
			Properties: &ExtensionProperties{
				ExtensionParameters: &ExtensionParameters{
					Type:      to.StringPtr("MicrosoftMonitoringAgent"),
					Publisher: to.StringPtr("Microsoft.Compute"),
					Settings: map[string]interface{}{
						"workspaceId": "xx",
					},
					TypeHandlerVersion: to.StringPtr("1.10"),
				},
			},
		},
		&ExtensionsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Extension.ID == nil {
		t.Fatal("Extension.ID should not be nil!")
	}
}

func TestExtensions_Delete(t *testing.T) {
	// From example Delete Arc Extension
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtensionsClient(con,
		"fd3c3665-1729-4b7b-9a38-238e83b0f98b")
	poller, err := client.BeginDelete(ctx,
		"test-rg",
		"myCluster",
		"default",
		"MicrosoftMonitoringAgent",
		&ExtensionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
