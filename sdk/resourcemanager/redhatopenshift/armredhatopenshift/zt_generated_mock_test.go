//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armredhatopenshift_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/redhatopenshift/armredhatopenshift"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all of the available RP operations."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredhatopenshift.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armredhatopenshift.OperationList{
			Value: []*armredhatopenshift.Operation{
				{
					Name: to.Ptr("Microsoft.RedHatOpenShift/openShiftClusters/read"),
					Display: &armredhatopenshift.Display{
						Operation: to.Ptr("Read OpenShift cluster"),
						Provider:  to.Ptr("Azure Red Hat OpenShift"),
						Resource:  to.Ptr("openShiftClusters"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOpenShiftClusters_List(t *testing.T) {
	// From example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists OpenShift clusters in the specified subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredhatopenshift.NewOpenShiftClustersClient("subscriptionId", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armredhatopenshift.OpenShiftClusterList{
			Value: []*armredhatopenshift.OpenShiftCluster{
				{
					Name:     to.Ptr("resourceName"),
					Type:     to.Ptr("Microsoft.RedHatOpenShift/OpenShiftClusters"),
					ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.RedHatOpenShift/OpenShiftClusters/resourceName"),
					Location: to.Ptr("location"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armredhatopenshift.OpenShiftClusterProperties{
						ApiserverProfile: &armredhatopenshift.APIServerProfile{
							IP:         to.Ptr("1.2.3.4"),
							URL:        to.Ptr("https://api.cluster.location.aroapp.io:6443/"),
							Visibility: to.Ptr(armredhatopenshift.VisibilityPublic),
						},
						ClusterProfile: &armredhatopenshift.ClusterProfile{
							Domain:          to.Ptr("cluster.location.aroapp.io"),
							ResourceGroupID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/clusterResourceGroup"),
							Version:         to.Ptr("4.3.0"),
						},
						ConsoleProfile: &armredhatopenshift.ConsoleProfile{
							URL: to.Ptr("https://console-openshift-console.apps.cluster.location.aroapp.io/"),
						},
						IngressProfiles: []*armredhatopenshift.IngressProfile{
							{
								Name:       to.Ptr("default"),
								IP:         to.Ptr("1.2.3.4"),
								Visibility: to.Ptr(armredhatopenshift.VisibilityPublic),
							}},
						MasterProfile: &armredhatopenshift.MasterProfile{
							SubnetID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/master"),
							VMSize:   to.Ptr(armredhatopenshift.VMSizeStandardD8SV3),
						},
						NetworkProfile: &armredhatopenshift.NetworkProfile{
							PodCidr:     to.Ptr("10.128.0.0/14"),
							ServiceCidr: to.Ptr("172.30.0.0/16"),
						},
						ProvisioningState: to.Ptr(armredhatopenshift.ProvisioningStateSucceeded),
						ServicePrincipalProfile: &armredhatopenshift.ServicePrincipalProfile{
							ClientID: to.Ptr("clientId"),
						},
						WorkerProfiles: []*armredhatopenshift.WorkerProfile{
							{
								Name:       to.Ptr("worker"),
								Count:      to.Ptr[int32](3),
								DiskSizeGB: to.Ptr[int32](128),
								SubnetID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/worker"),
								VMSize:     to.Ptr(armredhatopenshift.VMSizeStandardD2SV3),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OpenShiftClusterList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OpenShiftClusterList)
			t.Fatalf("Mock response is not equal to example response for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOpenShiftClusters_ListByResourceGroup(t *testing.T) {
	// From example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists OpenShift clusters in the specified subscription and resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredhatopenshift.NewOpenShiftClustersClient("subscriptionId", cred, &options)
	pager := client.ListByResourceGroup("resourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armredhatopenshift.OpenShiftClusterList{
			Value: []*armredhatopenshift.OpenShiftCluster{
				{
					Name:     to.Ptr("resourceName"),
					Type:     to.Ptr("Microsoft.RedHatOpenShift/OpenShiftClusters"),
					ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.RedHatOpenShift/OpenShiftClusters/resourceName"),
					Location: to.Ptr("location"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armredhatopenshift.OpenShiftClusterProperties{
						ApiserverProfile: &armredhatopenshift.APIServerProfile{
							IP:         to.Ptr("1.2.3.4"),
							URL:        to.Ptr("https://api.cluster.location.aroapp.io:6443/"),
							Visibility: to.Ptr(armredhatopenshift.VisibilityPublic),
						},
						ClusterProfile: &armredhatopenshift.ClusterProfile{
							Domain:          to.Ptr("cluster.location.aroapp.io"),
							ResourceGroupID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/clusterResourceGroup"),
							Version:         to.Ptr("4.3.0"),
						},
						ConsoleProfile: &armredhatopenshift.ConsoleProfile{
							URL: to.Ptr("https://console-openshift-console.apps.cluster.location.aroapp.io/"),
						},
						IngressProfiles: []*armredhatopenshift.IngressProfile{
							{
								Name:       to.Ptr("default"),
								IP:         to.Ptr("1.2.3.4"),
								Visibility: to.Ptr(armredhatopenshift.VisibilityPublic),
							}},
						MasterProfile: &armredhatopenshift.MasterProfile{
							SubnetID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/master"),
							VMSize:   to.Ptr(armredhatopenshift.VMSizeStandardD8SV3),
						},
						NetworkProfile: &armredhatopenshift.NetworkProfile{
							PodCidr:     to.Ptr("10.128.0.0/14"),
							ServiceCidr: to.Ptr("172.30.0.0/16"),
						},
						ProvisioningState: to.Ptr(armredhatopenshift.ProvisioningStateSucceeded),
						ServicePrincipalProfile: &armredhatopenshift.ServicePrincipalProfile{
							ClientID: to.Ptr("clientId"),
						},
						WorkerProfiles: []*armredhatopenshift.WorkerProfile{
							{
								Name:       to.Ptr("worker"),
								Count:      to.Ptr[int32](3),
								DiskSizeGB: to.Ptr[int32](128),
								SubnetID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/worker"),
								VMSize:     to.Ptr(armredhatopenshift.VMSizeStandardD2SV3),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OpenShiftClusterList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OpenShiftClusterList)
			t.Fatalf("Mock response is not equal to example response for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOpenShiftClusters_Get(t *testing.T) {
	// From example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a OpenShift cluster with the specified subscription, resource group and resource name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredhatopenshift.NewOpenShiftClustersClient("subscriptionId", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup",
		"resourceName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredhatopenshift.OpenShiftCluster{
			Name:     to.Ptr("resourceName"),
			Type:     to.Ptr("Microsoft.RedHatOpenShift/OpenShiftClusters"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.RedHatOpenShift/OpenShiftClusters/resourceName"),
			Location: to.Ptr("location"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armredhatopenshift.OpenShiftClusterProperties{
				ApiserverProfile: &armredhatopenshift.APIServerProfile{
					IP:         to.Ptr("1.2.3.4"),
					URL:        to.Ptr("https://api.cluster.location.aroapp.io:6443/"),
					Visibility: to.Ptr(armredhatopenshift.VisibilityPublic),
				},
				ClusterProfile: &armredhatopenshift.ClusterProfile{
					Domain:          to.Ptr("cluster.location.aroapp.io"),
					ResourceGroupID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/clusterResourceGroup"),
					Version:         to.Ptr("4.3.0"),
				},
				ConsoleProfile: &armredhatopenshift.ConsoleProfile{
					URL: to.Ptr("https://console-openshift-console.apps.cluster.location.aroapp.io/"),
				},
				IngressProfiles: []*armredhatopenshift.IngressProfile{
					{
						Name:       to.Ptr("default"),
						IP:         to.Ptr("1.2.3.4"),
						Visibility: to.Ptr(armredhatopenshift.VisibilityPublic),
					}},
				MasterProfile: &armredhatopenshift.MasterProfile{
					SubnetID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/master"),
					VMSize:   to.Ptr(armredhatopenshift.VMSizeStandardD8SV3),
				},
				NetworkProfile: &armredhatopenshift.NetworkProfile{
					PodCidr:     to.Ptr("10.128.0.0/14"),
					ServiceCidr: to.Ptr("172.30.0.0/16"),
				},
				ProvisioningState: to.Ptr(armredhatopenshift.ProvisioningStateSucceeded),
				ServicePrincipalProfile: &armredhatopenshift.ServicePrincipalProfile{
					ClientID: to.Ptr("clientId"),
				},
				WorkerProfiles: []*armredhatopenshift.WorkerProfile{
					{
						Name:       to.Ptr("worker"),
						Count:      to.Ptr[int32](3),
						DiskSizeGB: to.Ptr[int32](128),
						SubnetID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/worker"),
						VMSize:     to.Ptr(armredhatopenshift.VMSizeStandardD2SV3),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OpenShiftCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OpenShiftCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOpenShiftClusters_CreateOrUpdate(t *testing.T) {
	// From example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a OpenShift cluster with the specified subscription, resource group and resource name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredhatopenshift.NewOpenShiftClustersClient("subscriptionId", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup",
		"resourceName",
		armredhatopenshift.OpenShiftCluster{
			Location: to.Ptr("location"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armredhatopenshift.OpenShiftClusterProperties{
				ApiserverProfile: &armredhatopenshift.APIServerProfile{
					Visibility: to.Ptr(armredhatopenshift.VisibilityPublic),
				},
				ClusterProfile: &armredhatopenshift.ClusterProfile{
					Domain:          to.Ptr("cluster.location.aroapp.io"),
					PullSecret:      to.Ptr("{\"auths\":{\"registry.connect.redhat.com\":{\"auth\":\"\"},\"registry.redhat.io\":{\"auth\":\"\"}}}"),
					ResourceGroupID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/clusterResourceGroup"),
				},
				ConsoleProfile: &armredhatopenshift.ConsoleProfile{},
				IngressProfiles: []*armredhatopenshift.IngressProfile{
					{
						Name:       to.Ptr("default"),
						Visibility: to.Ptr(armredhatopenshift.VisibilityPublic),
					}},
				MasterProfile: &armredhatopenshift.MasterProfile{
					SubnetID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/master"),
					VMSize:   to.Ptr(armredhatopenshift.VMSizeStandardD8SV3),
				},
				NetworkProfile: &armredhatopenshift.NetworkProfile{
					PodCidr:     to.Ptr("10.128.0.0/14"),
					ServiceCidr: to.Ptr("172.30.0.0/16"),
				},
				ServicePrincipalProfile: &armredhatopenshift.ServicePrincipalProfile{
					ClientID:     to.Ptr("clientId"),
					ClientSecret: to.Ptr("clientSecret"),
				},
				WorkerProfiles: []*armredhatopenshift.WorkerProfile{
					{
						Name:       to.Ptr("worker"),
						Count:      to.Ptr[int32](3),
						DiskSizeGB: to.Ptr[int32](128),
						SubnetID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/worker"),
						VMSize:     to.Ptr(armredhatopenshift.VMSizeStandardD2SV3),
					}},
			},
		},
		&armredhatopenshift.OpenShiftClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredhatopenshift.OpenShiftCluster{
			Name:     to.Ptr("resourceName"),
			Type:     to.Ptr("Microsoft.RedHatOpenShift/OpenShiftClusters"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.RedHatOpenShift/OpenShiftClusters/resourceName"),
			Location: to.Ptr("location"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armredhatopenshift.OpenShiftClusterProperties{
				ApiserverProfile: &armredhatopenshift.APIServerProfile{
					IP:         to.Ptr("1.2.3.4"),
					URL:        to.Ptr("https://api.cluster.location.aroapp.io:6443/"),
					Visibility: to.Ptr(armredhatopenshift.VisibilityPublic),
				},
				ClusterProfile: &armredhatopenshift.ClusterProfile{
					Domain:          to.Ptr("cluster.location.aroapp.io"),
					ResourceGroupID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/clusterResourceGroup"),
					Version:         to.Ptr("4.3.0"),
				},
				ConsoleProfile: &armredhatopenshift.ConsoleProfile{
					URL: to.Ptr("https://console-openshift-console.apps.cluster.location.aroapp.io/"),
				},
				IngressProfiles: []*armredhatopenshift.IngressProfile{
					{
						Name:       to.Ptr("default"),
						IP:         to.Ptr("1.2.3.4"),
						Visibility: to.Ptr(armredhatopenshift.VisibilityPublic),
					}},
				MasterProfile: &armredhatopenshift.MasterProfile{
					SubnetID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/master"),
					VMSize:   to.Ptr(armredhatopenshift.VMSizeStandardD8SV3),
				},
				NetworkProfile: &armredhatopenshift.NetworkProfile{
					PodCidr:     to.Ptr("10.128.0.0/14"),
					ServiceCidr: to.Ptr("172.30.0.0/16"),
				},
				ProvisioningState: to.Ptr(armredhatopenshift.ProvisioningStateSucceeded),
				ServicePrincipalProfile: &armredhatopenshift.ServicePrincipalProfile{
					ClientID: to.Ptr("clientId"),
				},
				WorkerProfiles: []*armredhatopenshift.WorkerProfile{
					{
						Name:       to.Ptr("worker"),
						Count:      to.Ptr[int32](3),
						DiskSizeGB: to.Ptr[int32](128),
						SubnetID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/worker"),
						VMSize:     to.Ptr(armredhatopenshift.VMSizeStandardD2SV3),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OpenShiftCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OpenShiftCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOpenShiftClusters_Delete(t *testing.T) {
	// From example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a OpenShift cluster with the specified subscription, resource group and resource name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredhatopenshift.NewOpenShiftClustersClient("subscriptionId", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroup",
		"resourceName",
		&armredhatopenshift.OpenShiftClustersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_Delete.json: %v", err)
	}
}

func TestOpenShiftClusters_Update(t *testing.T) {
	// From example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a OpenShift cluster with the specified subscription, resource group and resource name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredhatopenshift.NewOpenShiftClustersClient("subscriptionId", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"resourceGroup",
		"resourceName",
		armredhatopenshift.OpenShiftClusterUpdate{
			Properties: &armredhatopenshift.OpenShiftClusterProperties{
				ApiserverProfile: &armredhatopenshift.APIServerProfile{
					Visibility: to.Ptr(armredhatopenshift.VisibilityPublic),
				},
				ClusterProfile: &armredhatopenshift.ClusterProfile{
					Domain:          to.Ptr("cluster.location.aroapp.io"),
					PullSecret:      to.Ptr("{\"auths\":{\"registry.connect.redhat.com\":{\"auth\":\"\"},\"registry.redhat.io\":{\"auth\":\"\"}}}"),
					ResourceGroupID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/clusterResourceGroup"),
				},
				ConsoleProfile: &armredhatopenshift.ConsoleProfile{},
				IngressProfiles: []*armredhatopenshift.IngressProfile{
					{
						Name:       to.Ptr("default"),
						Visibility: to.Ptr(armredhatopenshift.VisibilityPublic),
					}},
				MasterProfile: &armredhatopenshift.MasterProfile{
					SubnetID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/master"),
					VMSize:   to.Ptr(armredhatopenshift.VMSizeStandardD8SV3),
				},
				NetworkProfile: &armredhatopenshift.NetworkProfile{
					PodCidr:     to.Ptr("10.128.0.0/14"),
					ServiceCidr: to.Ptr("172.30.0.0/16"),
				},
				ServicePrincipalProfile: &armredhatopenshift.ServicePrincipalProfile{
					ClientID:     to.Ptr("clientId"),
					ClientSecret: to.Ptr("clientSecret"),
				},
				WorkerProfiles: []*armredhatopenshift.WorkerProfile{
					{
						Name:       to.Ptr("worker"),
						Count:      to.Ptr[int32](3),
						DiskSizeGB: to.Ptr[int32](128),
						SubnetID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/worker"),
						VMSize:     to.Ptr(armredhatopenshift.VMSizeStandardD2SV3),
					}},
			},
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
		},
		&armredhatopenshift.OpenShiftClustersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredhatopenshift.OpenShiftCluster{
			Name:     to.Ptr("resourceName"),
			Type:     to.Ptr("Microsoft.RedHatOpenShift/OpenShiftClusters"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.RedHatOpenShift/OpenShiftClusters/resourceName"),
			Location: to.Ptr("location"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armredhatopenshift.OpenShiftClusterProperties{
				ApiserverProfile: &armredhatopenshift.APIServerProfile{
					IP:         to.Ptr("1.2.3.4"),
					URL:        to.Ptr("https://api.cluster.location.aroapp.io:6443/"),
					Visibility: to.Ptr(armredhatopenshift.VisibilityPublic),
				},
				ClusterProfile: &armredhatopenshift.ClusterProfile{
					Domain:          to.Ptr("cluster.location.aroapp.io"),
					ResourceGroupID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/clusterResourceGroup"),
					Version:         to.Ptr("4.3.0"),
				},
				ConsoleProfile: &armredhatopenshift.ConsoleProfile{
					URL: to.Ptr("https://console-openshift-console.apps.cluster.location.aroapp.io/"),
				},
				IngressProfiles: []*armredhatopenshift.IngressProfile{
					{
						Name:       to.Ptr("default"),
						IP:         to.Ptr("1.2.3.4"),
						Visibility: to.Ptr(armredhatopenshift.VisibilityPublic),
					}},
				MasterProfile: &armredhatopenshift.MasterProfile{
					SubnetID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/master"),
					VMSize:   to.Ptr(armredhatopenshift.VMSizeStandardD8SV3),
				},
				NetworkProfile: &armredhatopenshift.NetworkProfile{
					PodCidr:     to.Ptr("10.128.0.0/14"),
					ServiceCidr: to.Ptr("172.30.0.0/16"),
				},
				ProvisioningState: to.Ptr(armredhatopenshift.ProvisioningStateSucceeded),
				ServicePrincipalProfile: &armredhatopenshift.ServicePrincipalProfile{
					ClientID: to.Ptr("clientId"),
				},
				WorkerProfiles: []*armredhatopenshift.WorkerProfile{
					{
						Name:       to.Ptr("worker"),
						Count:      to.Ptr[int32](3),
						DiskSizeGB: to.Ptr[int32](128),
						SubnetID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/worker"),
						VMSize:     to.Ptr(armredhatopenshift.VMSizeStandardD2SV3),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.OpenShiftCluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OpenShiftCluster)
			t.Fatalf("Mock response is not equal to example response for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOpenShiftClusters_ListCredentials(t *testing.T) {
	// From example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_ListCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists credentials of an OpenShift cluster with the specified subscription, resource group and resource name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredhatopenshift.NewOpenShiftClustersClient("subscriptionId", cred, &options)
	res, err := client.ListCredentials(ctx,
		"resourceGroup",
		"resourceName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_ListCredentials.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredhatopenshift.OpenShiftClusterCredentials{
			KubeadminPassword: to.Ptr("password"),
			KubeadminUsername: to.Ptr("kubeadmin"),
		}
		if !reflect.DeepEqual(exampleRes, res.OpenShiftClusterCredentials) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OpenShiftClusterCredentials)
			t.Fatalf("Mock response is not equal to example response for example specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_ListCredentials.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
