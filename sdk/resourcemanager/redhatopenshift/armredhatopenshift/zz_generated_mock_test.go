//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armredhatopenshift

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example Lists all of the available RP operations.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestOpenShiftClusters_List(t *testing.T) {
	// From example Lists OpenShift clusters in the specified subscription.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOpenShiftClustersClient(con,
		"subscriptionId")
	pager := client.List(&OpenShiftClustersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("OpenShiftCluster.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("OpenShiftCluster.ID should not be nil!")
			}
		}
	}
}

func TestOpenShiftClusters_ListByResourceGroup(t *testing.T) {
	// From example Lists OpenShift clusters in the specified subscription and resource group.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOpenShiftClustersClient(con,
		"subscriptionId")
	pager := client.ListByResourceGroup("resourceGroup",
		&OpenShiftClustersListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("OpenShiftCluster.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("OpenShiftCluster.ID should not be nil!")
			}
		}
	}
}

func TestOpenShiftClusters_Get(t *testing.T) {
	// From example Gets a OpenShift cluster with the specified subscription, resource group and resource name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOpenShiftClustersClient(con,
		"subscriptionId")
	res, err := client.Get(ctx,
		"resourceGroup",
		"resourceName",
		&OpenShiftClustersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OpenShiftCluster.ID == nil {
		t.Fatal("OpenShiftCluster.ID should not be nil!")
	}
}

func TestOpenShiftClusters_CreateOrUpdate(t *testing.T) {
	// From example Creates or updates a OpenShift cluster with the specified subscription, resource group and resource name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOpenShiftClustersClient(con,
		"subscriptionId")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup",
		"resourceName",
		OpenShiftCluster{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("location"),
				Tags: map[string]*string{
					"key": to.StringPtr("value"),
				},
			},
			Properties: &OpenShiftClusterProperties{
				ApiserverProfile: &APIServerProfile{
					Visibility: VisibilityPublic.ToPtr(),
				},
				ClusterProfile: &ClusterProfile{
					Domain:          to.StringPtr("cluster.location.aroapp.io"),
					PullSecret:      to.StringPtr("{\"auths\":{\"registry.connect.redhat.com\":{\"auth\":\"\"},\"registry.redhat.io\":{\"auth\":\"\"}}}"),
					ResourceGroupID: to.StringPtr("/subscriptions/subscriptionId/resourceGroups/clusterResourceGroup"),
				},
				ConsoleProfile: &ConsoleProfile{},
				IngressProfiles: []*IngressProfile{
					{
						Name:       to.StringPtr("default"),
						Visibility: VisibilityPublic.ToPtr(),
					}},
				MasterProfile: &MasterProfile{
					SubnetID: to.StringPtr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/master"),
					VMSize:   VMSizeStandardD8SV3.ToPtr(),
				},
				NetworkProfile: &NetworkProfile{
					PodCidr:     to.StringPtr("10.128.0.0/14"),
					ServiceCidr: to.StringPtr("172.30.0.0/16"),
				},
				ServicePrincipalProfile: &ServicePrincipalProfile{
					ClientID:     to.StringPtr("clientId"),
					ClientSecret: to.StringPtr("clientSecret"),
				},
				WorkerProfiles: []*WorkerProfile{
					{
						Name:       to.StringPtr("worker"),
						Count:      to.Int32Ptr(3),
						DiskSizeGB: to.Int32Ptr(128),
						SubnetID:   to.StringPtr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/worker"),
						VMSize:     VMSizeStandardD2SV3.ToPtr(),
					}},
			},
		},
		&OpenShiftClustersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OpenShiftCluster.ID == nil {
		t.Fatal("OpenShiftCluster.ID should not be nil!")
	}
}

func TestOpenShiftClusters_Delete(t *testing.T) {
	// From example Deletes a OpenShift cluster with the specified subscription, resource group and resource name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOpenShiftClustersClient(con,
		"subscriptionId")
	poller, err := client.BeginDelete(ctx,
		"resourceGroup",
		"resourceName",
		&OpenShiftClustersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestOpenShiftClusters_Update(t *testing.T) {
	// From example Creates or updates a OpenShift cluster with the specified subscription, resource group and resource name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOpenShiftClustersClient(con,
		"subscriptionId")
	poller, err := client.BeginUpdate(ctx,
		"resourceGroup",
		"resourceName",
		OpenShiftClusterUpdate{
			Properties: &OpenShiftClusterProperties{
				ApiserverProfile: &APIServerProfile{
					Visibility: VisibilityPublic.ToPtr(),
				},
				ClusterProfile: &ClusterProfile{
					Domain:          to.StringPtr("cluster.location.aroapp.io"),
					PullSecret:      to.StringPtr("{\"auths\":{\"registry.connect.redhat.com\":{\"auth\":\"\"},\"registry.redhat.io\":{\"auth\":\"\"}}}"),
					ResourceGroupID: to.StringPtr("/subscriptions/subscriptionId/resourceGroups/clusterResourceGroup"),
				},
				ConsoleProfile: &ConsoleProfile{},
				IngressProfiles: []*IngressProfile{
					{
						Name:       to.StringPtr("default"),
						Visibility: VisibilityPublic.ToPtr(),
					}},
				MasterProfile: &MasterProfile{
					SubnetID: to.StringPtr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/master"),
					VMSize:   VMSizeStandardD8SV3.ToPtr(),
				},
				NetworkProfile: &NetworkProfile{
					PodCidr:     to.StringPtr("10.128.0.0/14"),
					ServiceCidr: to.StringPtr("172.30.0.0/16"),
				},
				ServicePrincipalProfile: &ServicePrincipalProfile{
					ClientID:     to.StringPtr("clientId"),
					ClientSecret: to.StringPtr("clientSecret"),
				},
				WorkerProfiles: []*WorkerProfile{
					{
						Name:       to.StringPtr("worker"),
						Count:      to.Int32Ptr(3),
						DiskSizeGB: to.Int32Ptr(128),
						SubnetID:   to.StringPtr("/subscriptions/subscriptionId/resourceGroups/vnetResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet/subnets/worker"),
						VMSize:     VMSizeStandardD2SV3.ToPtr(),
					}},
			},
			Tags: map[string]*string{
				"key": to.StringPtr("value"),
			},
		},
		&OpenShiftClustersBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OpenShiftCluster.ID == nil {
		t.Fatal("OpenShiftCluster.ID should not be nil!")
	}
}

func TestOpenShiftClusters_ListCredentials(t *testing.T) {
	// From example Lists credentials of an OpenShift cluster with the specified subscription, resource group and resource name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOpenShiftClustersClient(con,
		"subscriptionId")
	_, err := client.ListCredentials(ctx,
		"resourceGroup",
		"resourceName",
		&OpenShiftClustersListCredentialsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
