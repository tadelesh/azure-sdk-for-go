//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybridkubernetes

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestConnectedCluster_Create(t *testing.T) {
	// From example CreateClusterExample
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectedClusterClient(con,
		"1bfbb5d0-917e-4346-9026-1d3b344417f5")
	poller, err := client.BeginCreate(ctx,
		"k8sc-rg",
		"testCluster",
		nil,
		&ConnectedClusterBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectedCluster.ID == nil {
		t.Fatal("ConnectedCluster.ID should not be nil!")
	}
}

func TestConnectedCluster_Update(t *testing.T) {
	// From example UpdateClusterExample
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectedClusterClient(con,
		"1bfbb5d0-917e-4346-9026-1d3b344417f5")
	res, err := client.Update(ctx,
		"k8sc-rg",
		"testCluster",
		nil,
		&ConnectedClusterUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectedCluster.ID == nil {
		t.Fatal("ConnectedCluster.ID should not be nil!")
	}
}

func TestConnectedCluster_Get(t *testing.T) {
	// From example GetClusterExample
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectedClusterClient(con,
		"1bfbb5d0-917e-4346-9026-1d3b344417f5")
	res, err := client.Get(ctx,
		"k8sc-rg",
		"testCluster",
		&ConnectedClusterGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectedCluster.ID == nil {
		t.Fatal("ConnectedCluster.ID should not be nil!")
	}
}

func TestConnectedCluster_Delete(t *testing.T) {
	// From example DeleteClusterExample
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectedClusterClient(con,
		"1bfbb5d0-917e-4346-9026-1d3b344417f5")
	poller, err := client.BeginDelete(ctx,
		"k8sc-rg",
		"testCluster",
		&ConnectedClusterBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestConnectedCluster_ListClusterUserCredential(t *testing.T) {
	// From example ListClusterUserCredentialCSPExample
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectedClusterClient(con,
		"1bfbb5d0-917e-4346-9026-1d3b344417f5")
	_, err := client.ListClusterUserCredential(ctx,
		"k8sc-rg",
		"testCluster",
		nil,
		&ConnectedClusterListClusterUserCredentialOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example ListClusterUserCredentialExample
	_, err = client.ListClusterUserCredential(ctx,
		"k8sc-rg",
		"testCluster",
		nil,
		&ConnectedClusterListClusterUserCredentialOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example ListClusterUserCredentialNonAadCSPExample
	_, err = client.ListClusterUserCredential(ctx,
		"k8sc-rg",
		"testCluster",
		nil,
		&ConnectedClusterListClusterUserCredentialOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example ListClusterUserCredentialNonAadExample
	_, err = client.ListClusterUserCredential(ctx,
		"k8sc-rg",
		"testCluster",
		nil,
		&ConnectedClusterListClusterUserCredentialOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestConnectedCluster_ListByResourceGroup(t *testing.T) {
	// From example GetClustersExample
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectedClusterClient(con,
		"1bfbb5d0-917e-4346-9026-1d3b344417f5")
	pager := client.ListByResourceGroup("k8sc-rg",
		&ConnectedClusterListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ConnectedCluster.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ConnectedCluster.ID should not be nil!")
			}
		}
	}
}

func TestConnectedCluster_ListBySubscription(t *testing.T) {
	// From example GetClustersExample
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConnectedClusterClient(con,
		"1bfbb5d0-917e-4346-9026-1d3b344417f5")
	pager := client.ListBySubscription(&ConnectedClusterListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ConnectedCluster.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ConnectedCluster.ID should not be nil!")
			}
		}
	}
}

func TestOperations_Get(t *testing.T) {
	// From example ListConnectedClusterOperationsExample
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.Get(&OperationsGetOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
