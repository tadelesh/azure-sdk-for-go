//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconfidentialledger_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/confidentialledger/armconfidentialledger"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/Operations_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfidentialledger.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/Operations_Get.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconfidentialledger.ResourceProviderOperationList{
			Value: []*armconfidentialledger.ResourceProviderOperationDefinition{
				{
					Name: to.Ptr("Microsoft.ConfidentialLedger/ledgers/read"),
					Display: &armconfidentialledger.ResourceProviderOperationDisplay{
						Description: to.Ptr("View the properties of a Confidential Ledger"),
						Operation:   to.Ptr("Get Confidential Ledger properties"),
						Resource:    to.Ptr("ledger"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceProviderOperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceProviderOperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/Operations_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfidentialLedger_CheckNameAvailability(t *testing.T) {
	// From example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfidentialledger.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armconfidentialledger.CheckNameAvailabilityRequest{
			Name: to.Ptr("sample-name"),
			Type: to.Ptr("Microsoft.ConfidentialLedger/ledgers"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconfidentialledger.CheckNameAvailabilityResponse{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLedger_Get(t *testing.T) {
	// From example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfidentialLedgerGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfidentialledger.NewLedgerClient("0000000-0000-0000-0000-000000000001", cred, &options)
	res, err := client.Get(ctx,
		"DummyResourceGroupName",
		"DummyLedgerName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconfidentialledger.ConfidentialLedger{
			Location: to.Ptr("EastUS"),
			Name:     to.Ptr("DummyLedgerName"),
			Type:     to.Ptr("Microsoft.ConfidentialLedger/ledgers"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/providers/Microsoft.ConfidentialLedger/ledgers/DummyLedgerName"),
			SystemData: &armconfidentialledger.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("ledgerAdmin@contoso.com"),
				CreatedByType:      to.Ptr(armconfidentialledger.CreatedByType("Admin1")),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-02T00:00:00.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("ledgerAdmin2@outlook.com"),
				LastModifiedByType: to.Ptr(armconfidentialledger.CreatedByType("Admin2")),
			},
			Tags: map[string]*string{
				"additionalProps1": to.Ptr("additional properties"),
			},
			Properties: &armconfidentialledger.LedgerProperties{
				AADBasedSecurityPrincipals: []*armconfidentialledger.AADBasedSecurityPrincipal{
					{
						LedgerRoleName: to.Ptr(armconfidentialledger.LedgerRoleNameAdministrator),
						PrincipalID:    to.Ptr("34621747-6fc8-4771-a2eb-72f31c461f2e"),
						TenantID:       to.Ptr("bce123b9-2b7b-4975-8360-5ca0b9b1cd08"),
					}},
				IdentityServiceURI:      to.Ptr("https://dummy.accledger.identity.com/DummyLedgerName"),
				LedgerInternalNamespace: to.Ptr("dummyNamespace"),
				LedgerName:              to.Ptr("DummyLedgerName"),
				LedgerType:              to.Ptr(armconfidentialledger.LedgerTypePublic),
				LedgerURI:               to.Ptr("https://dummy.accledger.domain.com/DummyLedgerName"),
				ProvisioningState:       to.Ptr(armconfidentialledger.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfidentialLedger) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfidentialLedger)
			t.Fatalf("Mock response is not equal to example response for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLedger_Delete(t *testing.T) {
	// From example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfidentialLedgerDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfidentialledger.NewLedgerClient("0000000-0000-0000-0000-000000000001", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"DummyResourceGroupName",
		"DummyLedgerName",
		&armconfidentialledger.LedgerClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_Delete.json: %v", err)
	}
}

func TestLedger_Create(t *testing.T) {
	// From example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfidentialLedgerCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfidentialledger.NewLedgerClient("0000000-0000-0000-0000-000000000001", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"DummyResourceGroupName",
		"DummyLedgerName",
		armconfidentialledger.ConfidentialLedger{
			Location: to.Ptr("EastUS"),
			Tags: map[string]*string{
				"additionalProps1": to.Ptr("additional properties"),
			},
			Properties: &armconfidentialledger.LedgerProperties{
				AADBasedSecurityPrincipals: []*armconfidentialledger.AADBasedSecurityPrincipal{
					{
						LedgerRoleName: to.Ptr(armconfidentialledger.LedgerRoleNameAdministrator),
						PrincipalID:    to.Ptr("34621747-6fc8-4771-a2eb-72f31c461f2e"),
						TenantID:       to.Ptr("bce123b9-2b7b-4975-8360-5ca0b9b1cd08"),
					}},
				CertBasedSecurityPrincipals: []*armconfidentialledger.CertBasedSecurityPrincipal{
					{
						Cert:           to.Ptr("MIIDBTCCAe2gAwIBAgIQXVogj9BAf49IpuOSIvztNDANBgkqhkiG9w0BAQsFADAtMSswKQYDVQQDEyJhY2NvdW50cy5hY2Nlc3Njb250cm9sLndpbmRvd3MubmV0MB4XDTIwMDMxNzAwMDAwMFoXDTI1MDMxNzAwMDAwMFowLTErMCkGA1UEAxMiYWNjb3VudHMuYWNjZXNzY29udHJvbC53aW5kb3dzLm5ldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANfLmdz9yIDskpZzrMXiDeVlCs75ZunrzwzBW5lz7UxdBjHu7Q9iT32otlBp++LOwBcKsVjuQ0GUbulX0FLsfLjEeCe58ZtSn//+6VRFSScg7i+WvDwEUWELR+vMPtCGcXBTpILEnYbSMz0No4+Jpkc1lyMIfDP/KSeqojo74xfW4RKtAgv39uwZ5Yz2hZ/IcWOvaQqMXp1lqhXLFIRWbwjLYYUbmwGwYpQ6++Cml0ucQoMkgYT88HpA/fzXQlLgrHamr3eE/lVp26ZWwfGLAvkdNBabQRSrk8k/c6BmY1mYpUFZo+795PI16mAdp1ioEwH8I5osis+/BR5GhPpwiA8CAwEAAaMhMB8wHQYDVR0OBBYEFF8MDGklOGhGNVJvsHHRCaqtzexcMA0GCSqGSIb3DQEBCwUAA4IBAQCKkegw/mdpCVl1lOpgU4G9RT+1gtcPqZK9kpimuDggSJju6KUQlOCi5/lIH5DCzpjFdmG17TjWVBNve5kowmrhLzovY0Ykk7+6hYTBK8dNNSmd4SK7zY++0aDIuOzHP2Cur+kgFC0gez50tPzotLDtMmp40gknXuzltwJfezNSw3gLgljDsGGcDIXK3qLSYh44qSuRGwulcN2EJUZBI9tIxoODpaWHIN8+z2uZvf8JBYFjA3+n9FRQn51X16CTcjq4QRTbNVpgVuQuyaYnEtx0ZnDvguB3RjGSPIXTRBkLl2x7e8/6uAZ6tchw8rhcOtPsFgJuoJokGjvcUSR/6Eqd"),
						LedgerRoleName: to.Ptr(armconfidentialledger.LedgerRoleNameReader),
					}},
				LedgerType: to.Ptr(armconfidentialledger.LedgerTypePublic),
			},
		},
		&armconfidentialledger.LedgerClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconfidentialledger.ConfidentialLedger{
			Location: to.Ptr("EastUS"),
			Name:     to.Ptr("DummyLedgerName"),
			Type:     to.Ptr("Microsoft.ConfidentialLedger/ledgers"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/providers/Microsoft.ConfidentialLedger/ledgers/DummyLedgerName"),
			SystemData: &armconfidentialledger.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("ledgerAdmin@contoso.com"),
				CreatedByType:      to.Ptr(armconfidentialledger.CreatedByType("Admin1")),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-02T00:00:00.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("ledgerAdmin2@outlook.com"),
				LastModifiedByType: to.Ptr(armconfidentialledger.CreatedByType("Admin2")),
			},
			Tags: map[string]*string{
				"additionalProps1": to.Ptr("additional properties"),
			},
			Properties: &armconfidentialledger.LedgerProperties{
				AADBasedSecurityPrincipals: []*armconfidentialledger.AADBasedSecurityPrincipal{
					{
						LedgerRoleName: to.Ptr(armconfidentialledger.LedgerRoleNameAdministrator),
						PrincipalID:    to.Ptr("34621747-6fc8-4771-a2eb-72f31c461f2e"),
						TenantID:       to.Ptr("bce123b9-2b7b-4975-8360-5ca0b9b1cd08"),
					}},
				CertBasedSecurityPrincipals: []*armconfidentialledger.CertBasedSecurityPrincipal{
					{
						Cert:           to.Ptr("-----BEGIN CERTIFICATE-----\nMIIDUjCCAjqgAwIBAgIQJ2IrDBawSkiAbkBYmiAopDANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDExtTeW50aGV0aWNzIExlZGdlciBVc2VyIENlcnQwHhcNMjAwOTIzMjIxODQ2WhcNMjEwOTIzMjIyODQ2WjAmMSQwIgYDVQQDExtTeW50aGV0aWNzIExlZGdlciBVc2VyIENlcnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCX2s/Eu4q/eQ63N+Ugeg5oAciZua/YCJr41c/696szvSY7Zg1SNJlW88/nbz70+QpO55OmqlEE3QCU+T0Vl/h0Gf//n1PYcoBbTGUnYEmV+fTTHict6rFiEwrGJ62tvcpYgwapInSLyEeUzjki0zhOLJ1OfRnYd1eGnFVMpE5aVjiS8Q5dmTEUyd51EIprGE8RYAW9aeWSwTH7gjHUsRlJnHKcdhaK/v5QKJnNu5bzPFUcpC0ZBcizoMPAtroLAD4B68Jl0z3op18MgZe6lRrVoWuxfqnk5GojuB/Vu8ohAZKoFhQ6NB6r+LL2AUs+Zr7Bt26IkEdR178n9JMEA4gHAgMBAAGjfDB6MA4GA1UdDwEB/wQEAwIFoDAJBgNVHRMEAjAAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAfBgNVHSMEGDAWgBS/a7PU9iOfOKEyZCp11Oen5VSuuDAdBgNVHQ4EFgQUv2uz1PYjnzihMmQqddTnp+VUrrgwDQYJKoZIhvcNAQELBQADggEBAF5q2fDwnse8egXhfaJCqqM969E9gSacqFmASpoDJPRPEX7gqoO7v1ww7nqRtRDoRiBvo/yNk7jlSAkRN3nRRnZLZZ3MYQdmCr4FGyIqRg4Y94+nja+Du9pDD761rxRktMVPSOaAVM/E5DQvscDlPvlPYe9mkcrLCE4DXYpiMmLT8Tm55LJJq5m07dVDgzAIR1L/hmEcbK0pnLgzciMtMLxGO2udnyyW/UW9WxnjvrrD2JluTHH9mVbb+XQP1oFtlRBfH7aui1ZgWfKvxrdP4zdK9QoWSUvRux3TLsGmHRBjBMtqYDY3y5mB+aNjLelvWpeVb0m2aOSVXynrLwNCAVA=\n-----END CERTIFICATE-----"),
						LedgerRoleName: to.Ptr(armconfidentialledger.LedgerRoleNameReader),
					}},
				IdentityServiceURI:      to.Ptr("https://dummy.accledger.identity.com/DummyLedgerName"),
				LedgerInternalNamespace: to.Ptr("dummyNamespace"),
				LedgerName:              to.Ptr("DummyLedgerName"),
				LedgerType:              to.Ptr(armconfidentialledger.LedgerTypePublic),
				LedgerURI:               to.Ptr("https://dummy.accledger.domain.com/DummyLedgerName"),
				ProvisioningState:       to.Ptr(armconfidentialledger.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfidentialLedger) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfidentialLedger)
			t.Fatalf("Mock response is not equal to example response for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLedger_Update(t *testing.T) {
	// From example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfidentialLedgerUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfidentialledger.NewLedgerClient("0000000-0000-0000-0000-000000000001", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"DummyResourceGroupName",
		"DummyLedgerName",
		armconfidentialledger.ConfidentialLedger{
			Location: to.Ptr("EastUS"),
			Tags: map[string]*string{
				"additionProps2":   to.Ptr("additional property value"),
				"additionalProps1": to.Ptr("additional properties"),
			},
			Properties: &armconfidentialledger.LedgerProperties{},
		},
		&armconfidentialledger.LedgerClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconfidentialledger.ConfidentialLedger{
			Location: to.Ptr("EastUS"),
			Name:     to.Ptr("DummyLedgerName"),
			Type:     to.Ptr("Microsoft.ConfidentialLedger/ledgers"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/providers/Microsoft.ConfidentialLedger/ledgers/DummyLedgerName"),
			SystemData: &armconfidentialledger.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("ledgerAdmin@contoso.com"),
				CreatedByType:      to.Ptr(armconfidentialledger.CreatedByType("Admin1")),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-02T00:00:00.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("ledgerAdmin2@outlook.com"),
				LastModifiedByType: to.Ptr(armconfidentialledger.CreatedByType("Admin2")),
			},
			Tags: map[string]*string{
				"additionProps2":   to.Ptr("additional property value"),
				"additionalProps1": to.Ptr("additional properties"),
			},
			Properties: &armconfidentialledger.LedgerProperties{
				AADBasedSecurityPrincipals: []*armconfidentialledger.AADBasedSecurityPrincipal{
					{
						LedgerRoleName: to.Ptr(armconfidentialledger.LedgerRoleNameAdministrator),
						PrincipalID:    to.Ptr("34621747-6fc8-4771-a2eb-72f31c461f2e"),
						TenantID:       to.Ptr("bce123b9-2b7b-4975-8360-5ca0b9b1cd08"),
					}},
				IdentityServiceURI:      to.Ptr("https://dummy.accledger.identity.com/DummyLedgerName"),
				LedgerInternalNamespace: to.Ptr("dummyNamespace"),
				LedgerName:              to.Ptr("DummyLedgerName"),
				LedgerType:              to.Ptr(armconfidentialledger.LedgerTypePublic),
				LedgerURI:               to.Ptr("https://dummy.accledger.domain.com/DummyLedgerName"),
				ProvisioningState:       to.Ptr(armconfidentialledger.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfidentialLedger) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfidentialLedger)
			t.Fatalf("Mock response is not equal to example response for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLedger_ListByResourceGroup(t *testing.T) {
	// From example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfidentialLedgerList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfidentialledger.NewLedgerClient("0000000-0000-0000-0000-000000000001", cred, &options)
	pager := client.ListByResourceGroup("DummyResourceGroupName",
		&armconfidentialledger.LedgerClientListByResourceGroupOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconfidentialledger.List{
			Value: []*armconfidentialledger.ConfidentialLedger{
				{
					Location: to.Ptr("EastUS"),
					Name:     to.Ptr("DummyLedgerName"),
					Type:     to.Ptr("Microsoft.ConfidentialLedger/ledgers"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/providers/Microsoft.ConfidentialLedger/ledgers/DummyLedgerName"),
					SystemData: &armconfidentialledger.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("ledgerAdmin@contoso.com"),
						CreatedByType:      to.Ptr(armconfidentialledger.CreatedByType("Admin1")),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-02T00:00:00.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("ledgerAdmin2@outlook.com"),
						LastModifiedByType: to.Ptr(armconfidentialledger.CreatedByType("Admin2")),
					},
					Tags: map[string]*string{
						"additionalProps1": to.Ptr("additional properties"),
					},
					Properties: &armconfidentialledger.LedgerProperties{
						AADBasedSecurityPrincipals: []*armconfidentialledger.AADBasedSecurityPrincipal{
							{
								LedgerRoleName: to.Ptr(armconfidentialledger.LedgerRoleNameAdministrator),
								PrincipalID:    to.Ptr("34621747-6fc8-4771-a2eb-72f31c461f2e"),
								TenantID:       to.Ptr("bce123b9-2b7b-4975-8360-5ca0b9b1cd08"),
							}},
						IdentityServiceURI:      to.Ptr("https://dummy.accledger.identity.com/DummyLedgerName"),
						LedgerInternalNamespace: to.Ptr("dummyNamespace"),
						LedgerName:              to.Ptr("DummyLedgerName"),
						LedgerType:              to.Ptr(armconfidentialledger.LedgerTypePublic),
						LedgerURI:               to.Ptr("https://dummy.accledger.domain.com/DummyLedgerName"),
						ProvisioningState:       to.Ptr(armconfidentialledger.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.List) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.List)
			t.Fatalf("Mock response is not equal to example response for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLedger_ListBySubscription(t *testing.T) {
	// From example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_ListBySub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfidentialLedgerListBySub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconfidentialledger.NewLedgerClient("0000000-0000-0000-0000-000000000001", cred, &options)
	pager := client.ListBySubscription(&armconfidentialledger.LedgerClientListBySubscriptionOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_ListBySub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconfidentialledger.List{
			Value: []*armconfidentialledger.ConfidentialLedger{
				{
					Location: to.Ptr("EastUS"),
					Name:     to.Ptr("DummyLedgerName"),
					Type:     to.Ptr("Microsoft.ConfidentialLedger/ledgers"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/providers/Microsoft.ConfidentialLedger/ledgers/DummyLedgerName"),
					SystemData: &armconfidentialledger.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-01T00:00:00.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("ledgerAdmin@contoso.com"),
						CreatedByType:      to.Ptr(armconfidentialledger.CreatedByType("Admin1")),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-02T00:00:00.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("ledgerAdmin2@outlook.com"),
						LastModifiedByType: to.Ptr(armconfidentialledger.CreatedByType("Admin2")),
					},
					Tags: map[string]*string{
						"additionalProps1": to.Ptr("additional properties"),
					},
					Properties: &armconfidentialledger.LedgerProperties{
						CertBasedSecurityPrincipals: []*armconfidentialledger.CertBasedSecurityPrincipal{
							{
								Cert:           to.Ptr("-----BEGIN CERTIFICATE-----\nMIIDUjCCAjqgAwIBAgIQJ2IrDBawSkiAbkBYmiAopDANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDExtTeW50aGV0aWNzIExlZGdlciBVc2VyIENlcnQwHhcNMjAwOTIzMjIxODQ2WhcNMjEwOTIzMjIyODQ2WjAmMSQwIgYDVQQDExtTeW50aGV0aWNzIExlZGdlciBVc2VyIENlcnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCX2s/Eu4q/eQ63N+Ugeg5oAciZua/YCJr41c/696szvSY7Zg1SNJlW88/nbz70+QpO55OmqlEE3QCU+T0Vl/h0Gf//n1PYcoBbTGUnYEmV+fTTHict6rFiEwrGJ62tvcpYgwapInSLyEeUzjki0zhOLJ1OfRnYd1eGnFVMpE5aVjiS8Q5dmTEUyd51EIprGE8RYAW9aeWSwTH7gjHUsRlJnHKcdhaK/v5QKJnNu5bzPFUcpC0ZBcizoMPAtroLAD4B68Jl0z3op18MgZe6lRrVoWuxfqnk5GojuB/Vu8ohAZKoFhQ6NB6r+LL2AUs+Zr7Bt26IkEdR178n9JMEA4gHAgMBAAGjfDB6MA4GA1UdDwEB/wQEAwIFoDAJBgNVHRMEAjAAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAfBgNVHSMEGDAWgBS/a7PU9iOfOKEyZCp11Oen5VSuuDAdBgNVHQ4EFgQUv2uz1PYjnzihMmQqddTnp+VUrrgwDQYJKoZIhvcNAQELBQADggEBAF5q2fDwnse8egXhfaJCqqM969E9gSacqFmASpoDJPRPEX7gqoO7v1ww7nqRtRDoRiBvo/yNk7jlSAkRN3nRRnZLZZ3MYQdmCr4FGyIqRg4Y94+nja+Du9pDD761rxRktMVPSOaAVM/E5DQvscDlPvlPYe9mkcrLCE4DXYpiMmLT8Tm55LJJq5m07dVDgzAIR1L/hmEcbK0pnLgzciMtMLxGO2udnyyW/UW9WxnjvrrD2JluTHH9mVbb+XQP1oFtlRBfH7aui1ZgWfKvxrdP4zdK9QoWSUvRux3TLsGmHRBjBMtqYDY3y5mB+aNjLelvWpeVb0m2aOSVXynrLwNCAVA=\n-----END CERTIFICATE-----"),
								LedgerRoleName: to.Ptr(armconfidentialledger.LedgerRoleNameReader),
							}},
						IdentityServiceURI:      to.Ptr("https://dummy.accledger.identity.com/DummyLedgerName"),
						LedgerInternalNamespace: to.Ptr("dummyNamespace"),
						LedgerName:              to.Ptr("DummyLedgerName"),
						LedgerType:              to.Ptr(armconfidentialledger.LedgerTypePublic),
						LedgerURI:               to.Ptr("https://dummy.accledger.domain.com/DummyLedgerName"),
						ProvisioningState:       to.Ptr(armconfidentialledger.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.List) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.List)
			t.Fatalf("Mock response is not equal to example response for example specification/confidentialledger/resource-manager/Microsoft.ConfidentialLedger/preview/2021-05-13-preview/examples/ConfidentialLedger_ListBySub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
