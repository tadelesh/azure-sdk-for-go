//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstoragecache

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example StorageTargets_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestSkus_List(t *testing.T) {
	// From example Skus_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSKUsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List(&SKUsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestUsageModels_List(t *testing.T) {
	// From example UsageModels_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsageModelsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List(&UsageModelsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestAscOperations_Get(t *testing.T) {
	// From example AscOperations_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAscOperationsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"westus",
		"testoperationid",
		&AscOperationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AscOperation.ID == nil {
		t.Fatal("AscOperation.ID should not be nil!")
	}
}

func TestCaches_List(t *testing.T) {
	// From example Caches_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCachesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List(&CachesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Cache.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Cache.ID should not be nil!")
			}
		}
	}
}

func TestCaches_ListByResourceGroup(t *testing.T) {
	// From example Caches_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCachesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListByResourceGroup("scgroup",
		&CachesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Cache.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Cache.ID should not be nil!")
			}
		}
	}
}

func TestCaches_Delete(t *testing.T) {
	// From example Caches_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCachesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"scgroup",
		"sc",
		&CachesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCaches_Get(t *testing.T) {
	// From example Caches_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCachesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"scgroup",
		"sc1",
		&CachesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Cache.ID == nil {
		t.Fatal("Cache.ID should not be nil!")
	}
}

func TestCaches_CreateOrUpdate(t *testing.T) {
	// From example Caches_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCachesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"scgroup",
		"sc1",
		&CachesBeginCreateOrUpdateOptions{Cache: &Cache{
			Identity: &CacheIdentity{
				Type: CacheIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserAssignedIdentitiesValue{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &UserAssignedIdentitiesValue{},
				},
			},
			Location: to.StringPtr("westus"),
			Properties: &CacheProperties{
				CacheSizeGB: to.Int32Ptr(3072),
				DirectoryServicesSettings: &CacheDirectorySettings{
					ActiveDirectory: &CacheActiveDirectorySettings{
						CacheNetBiosName: to.StringPtr("contosoSmb"),
						Credentials: &CacheActiveDirectorySettingsCredentials{
							Password: to.StringPtr("<password>"),
							Username: to.StringPtr("consotoAdmin"),
						},
						DomainName:            to.StringPtr("contosoAd.contoso.local"),
						DomainNetBiosName:     to.StringPtr("contosoAd"),
						PrimaryDNSIPAddress:   to.StringPtr("192.0.2.10"),
						SecondaryDNSIPAddress: to.StringPtr("192.0.2.11"),
					},
					UsernameDownload: &CacheUsernameDownloadSettings{
						Credentials: &CacheUsernameDownloadSettingsCredentials{
							BindDn:       to.StringPtr("cn=ldapadmin,dc=contosoad,dc=contoso,dc=local"),
							BindPassword: to.StringPtr("<bindPassword>"),
						},
						ExtendedGroups: to.BoolPtr(true),
						LdapBaseDN:     to.StringPtr("dc=contosoad,dc=contoso,dc=local"),
						LdapServer:     to.StringPtr("192.0.2.12"),
						UsernameSource: UsernameSourceLDAP.ToPtr(),
					},
				},
				EncryptionSettings: &CacheEncryptionSettings{
					KeyEncryptionKey: &KeyVaultKeyReference{
						KeyURL: to.StringPtr("https://keyvault-cmk.vault.azure.net/keys/key2047/test"),
						SourceVault: &KeyVaultKeyReferenceSourceVault{
							ID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.KeyVault/vaults/keyvault-cmk"),
						},
					},
				},
				SecuritySettings: &CacheSecuritySettings{
					AccessPolicies: []*NfsAccessPolicy{
						{
							Name: to.StringPtr("default"),
							AccessRules: []*NfsAccessRule{
								{
									Access:         NfsAccessRuleAccessRw.ToPtr(),
									RootSquash:     to.BoolPtr(false),
									Scope:          NfsAccessRuleScopeDefault.ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(false),
								}},
						}},
				},
				Subnet: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks/scvnet/subnets/sub1"),
			},
			SKU: &CacheSKU{
				Name: to.StringPtr("Standard_2G"),
			},
			Tags: map[string]*string{
				"Dept": to.StringPtr("Contoso"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Cache.ID == nil {
		t.Fatal("Cache.ID should not be nil!")
	}

	// From example Caches_CreateOrUpdate_ldap_only
	poller, err = client.BeginCreateOrUpdate(ctx,
		"scgroup",
		"sc1",
		&CachesBeginCreateOrUpdateOptions{Cache: &Cache{
			Location: to.StringPtr("westus"),
			Properties: &CacheProperties{
				CacheSizeGB: to.Int32Ptr(3072),
				DirectoryServicesSettings: &CacheDirectorySettings{
					UsernameDownload: &CacheUsernameDownloadSettings{
						Credentials: &CacheUsernameDownloadSettingsCredentials{
							BindDn:       to.StringPtr("cn=ldapadmin,dc=contosoad,dc=contoso,dc=local"),
							BindPassword: to.StringPtr("<bindPassword>"),
						},
						ExtendedGroups: to.BoolPtr(true),
						LdapBaseDN:     to.StringPtr("dc=contosoad,dc=contoso,dc=local"),
						LdapServer:     to.StringPtr("192.0.2.12"),
						UsernameSource: UsernameSourceLDAP.ToPtr(),
					},
				},
				EncryptionSettings: &CacheEncryptionSettings{
					KeyEncryptionKey: &KeyVaultKeyReference{
						KeyURL: to.StringPtr("https://keyvault-cmk.vault.azure.net/keys/key2048/test"),
						SourceVault: &KeyVaultKeyReferenceSourceVault{
							ID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.KeyVault/vaults/keyvault-cmk"),
						},
					},
				},
				SecuritySettings: &CacheSecuritySettings{
					AccessPolicies: []*NfsAccessPolicy{
						{
							Name: to.StringPtr("default"),
							AccessRules: []*NfsAccessRule{
								{
									Access:         NfsAccessRuleAccessRw.ToPtr(),
									RootSquash:     to.BoolPtr(false),
									Scope:          NfsAccessRuleScopeDefault.ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(false),
								}},
						}},
				},
				Subnet: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks/scvnet/subnets/sub1"),
			},
			SKU: &CacheSKU{
				Name: to.StringPtr("Standard_2G"),
			},
			Tags: map[string]*string{
				"Dept": to.StringPtr("Contoso"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Cache.ID == nil {
		t.Fatal("Cache.ID should not be nil!")
	}
}

func TestCaches_Update(t *testing.T) {
	// From example Caches_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCachesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Update(ctx,
		"scgroup",
		"sc1",
		&CachesUpdateOptions{Cache: &Cache{
			Location: to.StringPtr("westus"),
			Properties: &CacheProperties{
				CacheSizeGB: to.Int32Ptr(3072),
				DirectoryServicesSettings: &CacheDirectorySettings{
					ActiveDirectory: &CacheActiveDirectorySettings{
						CacheNetBiosName:      to.StringPtr("contosoSmb"),
						DomainName:            to.StringPtr("contosoAd.contoso.local"),
						DomainNetBiosName:     to.StringPtr("contosoAd"),
						PrimaryDNSIPAddress:   to.StringPtr("192.0.2.10"),
						SecondaryDNSIPAddress: to.StringPtr("192.0.2.11"),
					},
					UsernameDownload: &CacheUsernameDownloadSettings{
						ExtendedGroups: to.BoolPtr(true),
						UsernameSource: UsernameSourceAD.ToPtr(),
					},
				},
				NetworkSettings: &CacheNetworkSettings{
					DNSSearchDomain: to.StringPtr("contoso.com"),
					DNSServers: []*string{
						to.StringPtr("10.1.22.33"),
						to.StringPtr("10.1.12.33")},
					Mtu:       to.Int32Ptr(1500),
					NtpServer: to.StringPtr("time.contoso.com"),
				},
				SecuritySettings: &CacheSecuritySettings{
					AccessPolicies: []*NfsAccessPolicy{
						{
							Name: to.StringPtr("default"),
							AccessRules: []*NfsAccessRule{
								{
									Access:         NfsAccessRuleAccessRw.ToPtr(),
									RootSquash:     to.BoolPtr(false),
									Scope:          NfsAccessRuleScopeDefault.ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(false),
								}},
						},
						{
							Name: to.StringPtr("restrictive"),
							AccessRules: []*NfsAccessRule{
								{
									Access:         NfsAccessRuleAccessRw.ToPtr(),
									Filter:         to.StringPtr("10.99.3.145"),
									RootSquash:     to.BoolPtr(false),
									Scope:          NfsAccessRuleScopeHost.ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(true),
								},
								{
									Access:         NfsAccessRuleAccessRw.ToPtr(),
									Filter:         to.StringPtr("10.99.1.0/24"),
									RootSquash:     to.BoolPtr(false),
									Scope:          NfsAccessRuleScopeNetwork.ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(true),
								},
								{
									Access:         NfsAccessRuleAccessNo.ToPtr(),
									AnonymousGID:   to.StringPtr("65534"),
									AnonymousUID:   to.StringPtr("65534"),
									RootSquash:     to.BoolPtr(true),
									Scope:          NfsAccessRuleScopeDefault.ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(false),
								}},
						}},
				},
				Subnet: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks/scvnet/subnets/sub1"),
			},
			SKU: &CacheSKU{
				Name: to.StringPtr("Standard_2G"),
			},
			Tags: map[string]*string{
				"Dept": to.StringPtr("Contoso"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.Cache.ID == nil {
		t.Fatal("Cache.ID should not be nil!")
	}

	// From example Caches_Update_ldap_only
	res, err = client.Update(ctx,
		"scgroup",
		"sc1",
		&CachesUpdateOptions{Cache: &Cache{
			Location: to.StringPtr("westus"),
			Properties: &CacheProperties{
				CacheSizeGB: to.Int32Ptr(3072),
				DirectoryServicesSettings: &CacheDirectorySettings{
					UsernameDownload: &CacheUsernameDownloadSettings{
						Credentials: &CacheUsernameDownloadSettingsCredentials{
							BindDn:       to.StringPtr("cn=ldapadmin,dc=contosoad,dc=contoso,dc=local"),
							BindPassword: to.StringPtr("<bindPassword>"),
						},
						ExtendedGroups: to.BoolPtr(true),
						LdapBaseDN:     to.StringPtr("dc=contosoad,dc=contoso,dc=local"),
						LdapServer:     to.StringPtr("192.0.2.12"),
						UsernameSource: UsernameSourceLDAP.ToPtr(),
					},
				},
				NetworkSettings: &CacheNetworkSettings{
					DNSSearchDomain: to.StringPtr("contoso.com"),
					DNSServers: []*string{
						to.StringPtr("10.1.22.33"),
						to.StringPtr("10.1.12.33")},
					Mtu:       to.Int32Ptr(1500),
					NtpServer: to.StringPtr("time.contoso.com"),
				},
				SecuritySettings: &CacheSecuritySettings{
					AccessPolicies: []*NfsAccessPolicy{
						{
							Name: to.StringPtr("default"),
							AccessRules: []*NfsAccessRule{
								{
									Access:         NfsAccessRuleAccessRw.ToPtr(),
									RootSquash:     to.BoolPtr(false),
									Scope:          NfsAccessRuleScopeDefault.ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(false),
								}},
						},
						{
							Name: to.StringPtr("restrictive"),
							AccessRules: []*NfsAccessRule{
								{
									Access:         NfsAccessRuleAccessRw.ToPtr(),
									Filter:         to.StringPtr("10.99.3.145"),
									RootSquash:     to.BoolPtr(false),
									Scope:          NfsAccessRuleScopeHost.ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(true),
								},
								{
									Access:         NfsAccessRuleAccessRw.ToPtr(),
									Filter:         to.StringPtr("10.99.1.0/24"),
									RootSquash:     to.BoolPtr(false),
									Scope:          NfsAccessRuleScopeNetwork.ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(true),
								},
								{
									Access:         NfsAccessRuleAccessNo.ToPtr(),
									AnonymousGID:   to.StringPtr("65534"),
									AnonymousUID:   to.StringPtr("65534"),
									RootSquash:     to.BoolPtr(true),
									Scope:          NfsAccessRuleScopeDefault.ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(false),
								}},
						}},
				},
				Subnet: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks/scvnet/subnets/sub1"),
			},
			SKU: &CacheSKU{
				Name: to.StringPtr("Standard_2G"),
			},
			Tags: map[string]*string{
				"Dept": to.StringPtr("Contoso"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.Cache.ID == nil {
		t.Fatal("Cache.ID should not be nil!")
	}
}

func TestCaches_DebugInfo(t *testing.T) {
	// From example Caches_DebugInfo
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCachesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDebugInfo(ctx,
		"scgroup",
		"sc",
		&CachesBeginDebugInfoOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCaches_Flush(t *testing.T) {
	// From example Caches_Flush
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCachesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginFlush(ctx,
		"scgroup",
		"sc",
		&CachesBeginFlushOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCaches_Start(t *testing.T) {
	// From example Caches_Start
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCachesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginStart(ctx,
		"scgroup",
		"sc",
		&CachesBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCaches_Stop(t *testing.T) {
	// From example Caches_Stop
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCachesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginStop(ctx,
		"scgroup",
		"sc",
		&CachesBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCaches_UpgradeFirmware(t *testing.T) {
	// From example Caches_UpgradeFirmware
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCachesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpgradeFirmware(ctx,
		"scgroup",
		"sc1",
		&CachesBeginUpgradeFirmwareOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStorageTargets_DnsRefresh(t *testing.T) {
	// From example Caches_DnsRefresh
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageTargetsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDNSRefresh(ctx,
		"scgroup",
		"sc",
		"st1",
		&StorageTargetsBeginDNSRefreshOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStorageTargets_ListByCache(t *testing.T) {
	// From example StorageTargets_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageTargetsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListByCache("scgroup",
		"sc1",
		&StorageTargetsListByCacheOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StorageTarget.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StorageTarget.ID should not be nil!")
			}
		}
	}
}

func TestStorageTargets_Delete(t *testing.T) {
	// From example StorageTargets_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageTargetsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"scgroup",
		"sc1",
		"st1",
		&StorageTargetsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStorageTargets_Get(t *testing.T) {
	// From example StorageTargets_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageTargetsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"scgroup",
		"sc1",
		"st1",
		&StorageTargetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StorageTarget.ID == nil {
		t.Fatal("StorageTarget.ID should not be nil!")
	}
}

func TestStorageTargets_CreateOrUpdate(t *testing.T) {
	// From example StorageTargets_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageTargetsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"scgroup",
		"sc1",
		"st1",
		&StorageTargetsBeginCreateOrUpdateOptions{Storagetarget: &StorageTarget{
			Properties: &StorageTargetProperties{
				Junctions: []*NamespaceJunction{
					{
						NamespacePath:   to.StringPtr("/path/on/cache"),
						NfsAccessPolicy: to.StringPtr("default"),
						NfsExport:       to.StringPtr("exp1"),
						TargetPath:      to.StringPtr("/path/on/exp1"),
					},
					{
						NamespacePath:   to.StringPtr("/path2/on/cache"),
						NfsAccessPolicy: to.StringPtr("rootSquash"),
						NfsExport:       to.StringPtr("exp2"),
						TargetPath:      to.StringPtr("/path2/on/exp2"),
					}},
				Nfs3: &Nfs3Target{
					Target:     to.StringPtr("10.0.44.44"),
					UsageModel: to.StringPtr("READ_HEAVY_INFREQ"),
				},
				TargetType: StorageTargetTypeNfs3.ToPtr(),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.StorageTarget.ID == nil {
		t.Fatal("StorageTarget.ID should not be nil!")
	}

	// From example StorageTargets_CreateOrUpdate_BlobNfs
	poller, err = client.BeginCreateOrUpdate(ctx,
		"scgroup",
		"sc1",
		"st1",
		&StorageTargetsBeginCreateOrUpdateOptions{Storagetarget: &StorageTarget{
			Properties: &StorageTargetProperties{
				BlobNfs: &BlobNfsTarget{
					Target:     to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Storage/storageAccounts/blofnfs/blobServices/default/containers/blobnfs"),
					UsageModel: to.StringPtr("WRITE_WORKLOAD_15"),
				},
				Junctions: []*NamespaceJunction{
					{
						NamespacePath: to.StringPtr("/blobnfs"),
					}},
				TargetType: StorageTargetTypeBlobNfs.ToPtr(),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.StorageTarget.ID == nil {
		t.Fatal("StorageTarget.ID should not be nil!")
	}

	// From example StorageTargets_CreateOrUpdate_NoJunctions
	poller, err = client.BeginCreateOrUpdate(ctx,
		"scgroup",
		"sc1",
		"st1",
		&StorageTargetsBeginCreateOrUpdateOptions{Storagetarget: &StorageTarget{
			Properties: &StorageTargetProperties{
				Nfs3: &Nfs3Target{
					Target:     to.StringPtr("10.0.44.44"),
					UsageModel: to.StringPtr("READ_HEAVY_INFREQ"),
				},
				TargetType: StorageTargetTypeNfs3.ToPtr(),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.StorageTarget.ID == nil {
		t.Fatal("StorageTarget.ID should not be nil!")
	}
}

func TestStorageTarget_Flush(t *testing.T) {
	// From example StorageTargets_Flush
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageTargetClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginFlush(ctx,
		"scgroup",
		"sc",
		"st1",
		&StorageTargetBeginFlushOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStorageTarget_Suspend(t *testing.T) {
	// From example StorageTargets_Suspend
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageTargetClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginSuspend(ctx,
		"scgroup",
		"sc",
		"st1",
		&StorageTargetBeginSuspendOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStorageTarget_Resume(t *testing.T) {
	// From example StorageTargets_Resume
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageTargetClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginResume(ctx,
		"scgroup",
		"sc",
		"st1",
		&StorageTargetBeginResumeOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
