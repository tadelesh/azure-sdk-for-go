//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresourcemover

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestMoveCollections_Create(t *testing.T) {
	// From example MoveCollections_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveCollectionsClient(con,
		"subid")
	res, err := client.Create(ctx,
		"rg1",
		"movecollection1",
		&MoveCollectionsCreateOptions{Body: &MoveCollection{
			Identity: &Identity{
				Type: ResourceIdentityTypeSystemAssigned.ToPtr(),
			},
			Location: to.StringPtr("eastus2"),
			Properties: &MoveCollectionProperties{
				SourceRegion: to.StringPtr("eastus"),
				TargetRegion: to.StringPtr("westus"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.MoveCollection.ID == nil {
		t.Fatal("MoveCollection.ID should not be nil!")
	}
}

func TestMoveCollections_Update(t *testing.T) {
	// From example MoveCollections_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveCollectionsClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"movecollection1",
		&MoveCollectionsUpdateOptions{Body: &UpdateMoveCollectionRequest{
			Identity: &Identity{
				Type: ResourceIdentityTypeSystemAssigned.ToPtr(),
			},
			Tags: map[string]*string{
				"key1": to.StringPtr("mc1"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.MoveCollection.ID == nil {
		t.Fatal("MoveCollection.ID should not be nil!")
	}
}

func TestMoveCollections_Delete(t *testing.T) {
	// From example MoveCollections_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveCollectionsClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"movecollection1",
		&MoveCollectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationStatus.ID == nil {
		t.Fatal("OperationStatus.ID should not be nil!")
	}
}

func TestMoveCollections_Get(t *testing.T) {
	// From example MoveCollections_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveCollectionsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"movecollection1",
		&MoveCollectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MoveCollection.ID == nil {
		t.Fatal("MoveCollection.ID should not be nil!")
	}
}

func TestMoveCollections_Prepare(t *testing.T) {
	// From example MoveCollections_Prepare
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveCollectionsClient(con,
		"subid")
	poller, err := client.BeginPrepare(ctx,
		"rg1",
		"movecollection1",
		&MoveCollectionsBeginPrepareOptions{Body: &PrepareRequest{
			MoveResources: []*string{
				to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Migrate/MoveCollections/movecollection1/MoveResources/moveresource1")},
			ValidateOnly: to.BoolPtr(false),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationStatus.ID == nil {
		t.Fatal("OperationStatus.ID should not be nil!")
	}
}

func TestMoveCollections_InitiateMove(t *testing.T) {
	// From example MoveCollections_InitiateMove
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveCollectionsClient(con,
		"subid")
	poller, err := client.BeginInitiateMove(ctx,
		"rg1",
		"movecollection1",
		&MoveCollectionsBeginInitiateMoveOptions{Body: &ResourceMoveRequest{
			MoveResources: []*string{
				to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Migrate/MoveCollections/movecollection1/MoveResources/moveresource1")},
			ValidateOnly: to.BoolPtr(false),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationStatus.ID == nil {
		t.Fatal("OperationStatus.ID should not be nil!")
	}
}

func TestMoveCollections_Commit(t *testing.T) {
	// From example MoveCollections_Commit
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveCollectionsClient(con,
		"subid")
	poller, err := client.BeginCommit(ctx,
		"rg1",
		"movecollection1",
		&MoveCollectionsBeginCommitOptions{Body: &CommitRequest{
			MoveResources: []*string{
				to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Migrate/MoveCollections/movecollection1/MoveResources/moveresource1")},
			ValidateOnly: to.BoolPtr(false),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationStatus.ID == nil {
		t.Fatal("OperationStatus.ID should not be nil!")
	}
}

func TestMoveCollections_Discard(t *testing.T) {
	// From example MoveCollections_Discard
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveCollectionsClient(con,
		"subid")
	poller, err := client.BeginDiscard(ctx,
		"rg1",
		"movecollection1",
		&MoveCollectionsBeginDiscardOptions{Body: &DiscardRequest{
			MoveResources: []*string{
				to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Migrate/MoveCollections/movecollection1/MoveResources/moveresource1")},
			ValidateOnly: to.BoolPtr(false),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationStatus.ID == nil {
		t.Fatal("OperationStatus.ID should not be nil!")
	}
}

func TestMoveCollections_ResolveDependencies(t *testing.T) {
	// From example MoveCollections_ResolveDependencies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveCollectionsClient(con,
		"subid")
	poller, err := client.BeginResolveDependencies(ctx,
		"rg1",
		"movecollection1",
		&MoveCollectionsBeginResolveDependenciesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationStatus.ID == nil {
		t.Fatal("OperationStatus.ID should not be nil!")
	}
}

func TestMoveCollections_BulkRemove(t *testing.T) {
	// From example MoveCollections_BulkRemove
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveCollectionsClient(con,
		"subid")
	poller, err := client.BeginBulkRemove(ctx,
		"rg1",
		"movecollection1",
		&MoveCollectionsBeginBulkRemoveOptions{Body: &BulkRemoveRequest{
			MoveResources: []*string{
				to.StringPtr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Migrate/MoveCollections/movecollection1/MoveResources/moveresource1")},
			ValidateOnly: to.BoolPtr(false),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationStatus.ID == nil {
		t.Fatal("OperationStatus.ID should not be nil!")
	}
}

func TestMoveCollections_ListMoveCollectionsBySubscription(t *testing.T) {
	// From example MoveCollections_ListMoveCollectionsBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveCollectionsClient(con,
		"subid")
	pager := client.ListMoveCollectionsBySubscription(&MoveCollectionsListMoveCollectionsBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("MoveCollection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("MoveCollection.ID should not be nil!")
			}
		}
	}
}

func TestMoveCollections_ListMoveCollectionsByResourceGroup(t *testing.T) {
	// From example MoveCollections_ListMoveCollectionsByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveCollectionsClient(con,
		"subid")
	pager := client.ListMoveCollectionsByResourceGroup("rg1",
		&MoveCollectionsListMoveCollectionsByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("MoveCollection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("MoveCollection.ID should not be nil!")
			}
		}
	}
}

func TestMoveCollections_ListRequiredFor(t *testing.T) {
	// From example RequiredFor_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveCollectionsClient(con,
		"subid")
	_, err := client.ListRequiredFor(ctx,
		"rg1",
		"movecollection1",
		"/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/nic1",
		&MoveCollectionsListRequiredForOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMoveResources_List(t *testing.T) {
	// From example MoveResources_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveResourcesClient(con,
		"subid")
	pager := client.List("rg1",
		"movecollection1",
		&MoveResourcesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("MoveResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("MoveResource.ID should not be nil!")
			}
		}
	}
}

func TestMoveResources_Create(t *testing.T) {
	// From example MoveResources_Create
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveResourcesClient(con,
		"subid")
	poller, err := client.BeginCreate(ctx,
		"rg1",
		"movecollection1",
		"moveresourcename1",
		&MoveResourcesBeginCreateOptions{Body: &MoveResource{
			Properties: &MoveResourceProperties{
				DependsOnOverrides: []*MoveResourceDependencyOverride{
					{
						ID:       to.StringPtr("/subscriptions/c4488a3f-a7f7-4ad4-aa72-0e1f4d9c0756/resourceGroups/eastusRG/providers/Microsoft.Network/networkInterfaces/eastusvm140"),
						TargetID: to.StringPtr("/subscriptions/c4488a3f-a7f7-4ad4-aa72-0e1f4d9c0756/resourceGroups/westusRG/providers/Microsoft.Network/networkInterfaces/eastusvm140"),
					}},
				ResourceSettings: &VirtualMachineResourceSettings{
					ResourceSettings: ResourceSettings{
						ResourceType:       to.StringPtr("Microsoft.Compute/virtualMachines"),
						TargetResourceName: to.StringPtr("westusvm1"),
					},
					TargetAvailabilitySetID: to.StringPtr("/subscriptions/subid/resourceGroups/eastusRG/providers/Microsoft.Compute/availabilitySets/avset1"),
					TargetAvailabilityZone:  TargetAvailabilityZoneTwo.ToPtr(),
					TargetVMSize:            to.StringPtr("null"),
				},
				SourceID: to.StringPtr("/subscriptions/subid/resourceGroups/eastusRG/providers/Microsoft.Compute/virtualMachines/eastusvm1"),
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.MoveResource.ID == nil {
		t.Fatal("MoveResource.ID should not be nil!")
	}
}

func TestMoveResources_Delete(t *testing.T) {
	// From example MoveResources_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveResourcesClient(con,
		"subid")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"movecollection1",
		"moveresourcename1",
		&MoveResourcesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationStatus.ID == nil {
		t.Fatal("OperationStatus.ID should not be nil!")
	}
}

func TestMoveResources_Get(t *testing.T) {
	// From example MoveResources_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMoveResourcesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"movecollection1",
		"moveresourcename1",
		&MoveResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MoveResource.ID == nil {
		t.Fatal("MoveResource.ID should not be nil!")
	}
}

func TestUnresolvedDependencies_Get(t *testing.T) {
	// From example UnresolvedDependencies_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUnresolvedDependenciesClient(con,
		"subid")
	pager := client.Get("rg1",
		"movecollection1",
		&UnresolvedDependenciesGetOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UnresolvedDependency.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UnresolvedDependency.ID should not be nil!")
			}
		}
	}
}

func TestOperationsDiscovery_Get(t *testing.T) {
	// From example OperationsDiscovery_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsDiscoveryClient(con)
	_, err := client.Get(ctx,
		&OperationsDiscoveryGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
