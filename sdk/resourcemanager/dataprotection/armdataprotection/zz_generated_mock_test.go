//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdataprotection

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestBackupVaults_GetInSubscription(t *testing.T) {
	// From example Get BackupVaults in Subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupVaultsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	pager := client.GetInSubscription(&BackupVaultsGetInSubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BackupVaultResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BackupVaultResource.ID should not be nil!")
			}
		}
	}
}

func TestBackupVaults_GetInResourceGroup(t *testing.T) {
	// From example Get BackupVaults in ResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupVaultsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	pager := client.GetInResourceGroup("SampleResourceGroup",
		&BackupVaultsGetInResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BackupVaultResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BackupVaultResource.ID should not be nil!")
			}
		}
	}
}

func TestBackupVaults_Get(t *testing.T) {
	// From example Get BackupVault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupVaultsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	res, err := client.Get(ctx,
		"swaggerExample",
		"SampleResourceGroup",
		&BackupVaultsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupVaultResource.ID == nil {
		t.Fatal("BackupVaultResource.ID should not be nil!")
	}

	// From example Get BackupVault With MSI
	res, err = client.Get(ctx,
		"swaggerExample",
		"SampleResourceGroup",
		&BackupVaultsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupVaultResource.ID == nil {
		t.Fatal("BackupVaultResource.ID should not be nil!")
	}
}

func TestBackupVaults_CreateOrUpdate(t *testing.T) {
	// From example Create BackupVault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupVaultsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"swaggerExample",
		"SampleResourceGroup",
		BackupVaultResource{
			DppTrackedResource: DppTrackedResource{
				Identity: &DppIdentityDetails{
					Type: to.StringPtr("None"),
				},
				Location: to.StringPtr("WestUS"),
				Tags: map[string]*string{
					"key1": to.StringPtr("val1"),
				},
			},
			Properties: &BackupVault{
				StorageSettings: []*StorageSetting{
					{
						Type:          StorageSettingTypesLocallyRedundant.ToPtr(),
						DatastoreType: StorageSettingStoreTypesVaultStore.ToPtr(),
					}},
			},
		},
		&BackupVaultsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupVaultResource.ID == nil {
		t.Fatal("BackupVaultResource.ID should not be nil!")
	}

	// From example Create BackupVault With MSI
	poller, err = client.BeginCreateOrUpdate(ctx,
		"swaggerExample",
		"SampleResourceGroup",
		BackupVaultResource{
			DppTrackedResource: DppTrackedResource{
				Identity: &DppIdentityDetails{
					Type: to.StringPtr("systemAssigned"),
				},
				Location: to.StringPtr("WestUS"),
				Tags: map[string]*string{
					"key1": to.StringPtr("val1"),
				},
			},
			Properties: &BackupVault{
				StorageSettings: []*StorageSetting{
					{
						Type:          StorageSettingTypesLocallyRedundant.ToPtr(),
						DatastoreType: StorageSettingStoreTypesVaultStore.ToPtr(),
					}},
			},
		},
		&BackupVaultsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupVaultResource.ID == nil {
		t.Fatal("BackupVaultResource.ID should not be nil!")
	}
}

func TestBackupVaults_Delete(t *testing.T) {
	// From example Delete BackupVault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupVaultsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	_, err := client.Delete(ctx,
		"swaggerExample",
		"SampleResourceGroup",
		&BackupVaultsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackupVaults_Update(t *testing.T) {
	// From example Patch BackupVault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupVaultsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	poller, err := client.BeginUpdate(ctx,
		"swaggerExample",
		"SampleResourceGroup",
		PatchResourceRequestInput{
			Tags: map[string]*string{
				"newKey": to.StringPtr("newVal"),
			},
		},
		&BackupVaultsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupVaultResource.ID == nil {
		t.Fatal("BackupVaultResource.ID should not be nil!")
	}
}

func TestBackupVaults_CheckNameAvailability(t *testing.T) {
	// From example Check BackupVaults name availability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupVaultsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	_, err := client.CheckNameAvailability(ctx,
		"SampleResourceGroup",
		"westus",
		CheckNameAvailabilityRequest{
			Name: to.StringPtr("swaggerExample"),
			Type: to.StringPtr("Microsoft.DataProtection/BackupVaults"),
		},
		&BackupVaultsCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperationResult_Get(t *testing.T) {
	// From example Get OperationResult
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationResultClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	_, err := client.Get(ctx,
		"MjkxOTMyODMtYTE3My00YzJjLTg5NjctN2E4MDIxNDA3NjA2OzdjNGE2ZWRjLWJjMmItNDRkYi1hYzMzLWY1YzEwNzk5Y2EyOA==",
		"WestUS",
		&OperationResultGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperationStatus_Get(t *testing.T) {
	// From example Get OperationStatus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationStatusClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	res, err := client.Get(ctx,
		"WestUS",
		"MjkxOTMyODMtYTE3My00YzJjLTg5NjctN2E4MDIxNDA3NjA2OzdjNGE2ZWRjLWJjMmItNDRkYi1hYzMzLWY1YzEwNzk5Y2EyOA==",
		&OperationStatusGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationResource.ID == nil {
		t.Fatal("OperationResource.ID should not be nil!")
	}
}

func TestBackupVaultOperationResults_Get(t *testing.T) {
	// From example GetOperationResult Patch
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupVaultOperationResultsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	res, err := client.Get(ctx,
		"swaggerExample",
		"SampleResourceGroup",
		"YWUzNDFkMzQtZmM5OS00MmUyLWEzNDMtZGJkMDIxZjlmZjgzOzdmYzBiMzhmLTc2NmItNDM5NS05OWQ1LTVmOGEzNzg4MWQzNA==",
		&BackupVaultOperationResultsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupVaultResource.ID == nil {
		t.Fatal("BackupVaultResource.ID should not be nil!")
	}
}

func TestDataProtection_CheckFeatureSupport(t *testing.T) {
	// From example Check Azure Vm Backup Feature Support
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataProtectionClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	_, err := client.CheckFeatureSupport(ctx,
		"WestUS",
		FeatureValidationRequest{
			FeatureValidationRequestBase: FeatureValidationRequestBase{
				ObjectType: to.StringPtr("FeatureValidationRequest"),
			},
			FeatureType: FeatureTypeDataSourceType.ToPtr(),
		},
		&DataProtectionCheckFeatureSupportOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDataProtectionOperations_List(t *testing.T) {
	// From example Returns the list of supported REST operations.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataProtectionOperationsClient(con)
	pager := client.List(&DataProtectionOperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestBackupPolicies_List(t *testing.T) {
	// From example List BackupPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupPoliciesClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	pager := client.List("PrivatePreviewVault",
		"000pikumar",
		&BackupPoliciesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BaseBackupPolicyResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BaseBackupPolicyResource.ID should not be nil!")
			}
		}
	}
}

func TestBackupPolicies_Get(t *testing.T) {
	// From example Get BackupPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupPoliciesClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	res, err := client.Get(ctx,
		"PrivatePreviewVault",
		"000pikumar",
		"OSSDBPolicy",
		&BackupPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BaseBackupPolicyResource.ID == nil {
		t.Fatal("BaseBackupPolicyResource.ID should not be nil!")
	}
}

func TestBackupPolicies_CreateOrUpdate(t *testing.T) {
	// From example CreateOrUpdate BackupPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupPoliciesClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	res, err := client.CreateOrUpdate(ctx,
		"PrivatePreviewVault",
		"000pikumar",
		"OSSDBPolicy",
		BaseBackupPolicyResource{
			Properties: &BackupPolicy{
				BaseBackupPolicy: BaseBackupPolicy{
					DatasourceTypes: []*string{
						to.StringPtr("OssDB")},
					ObjectType: to.StringPtr("BackupPolicy"),
				},
				PolicyRules: []BasePolicyRule{
					{
						BasePolicyRule: BasePolicyRule{
							Name:       to.StringPtr("BackupWeekly"),
							ObjectType: to.StringPtr("AzureBackupRule"),
						},
						BackupParameters: &AzureBackupParams{
							BackupParameters: BackupParameters{
								ObjectType: to.StringPtr("AzureBackupParams"),
							},
							BackupType: to.StringPtr("Full"),
						},
						DataStore: &DataStoreInfoBase{
							DataStoreType: DataStoreTypesVaultStore.ToPtr(),
							ObjectType:    to.StringPtr("DataStoreInfoBase"),
						},
						Trigger: &ScheduleBasedTriggerContext{
							TriggerContext: TriggerContext{
								ObjectType: to.StringPtr("ScheduleBasedTriggerContext"),
							},
							Schedule: &BackupSchedule{
								RepeatingTimeIntervals: []*string{
									to.StringPtr("R/2019-11-20T08:00:00-08:00/P1W")},
							},
							TaggingCriteria: []*TaggingCriteria{
								{
									IsDefault: to.BoolPtr(true),
									TagInfo: &RetentionTag{
										TagName: to.StringPtr("Default"),
									},
									TaggingPriority: to.Int64Ptr(99),
								},
								{
									Criteria: []BackupCriteria{
										{
											BackupCriteria: BackupCriteria{
												ObjectType: to.StringPtr("ScheduleBasedBackupCriteria"),
											},
											DaysOfTheWeek: []*DayOfWeek{
												DayOfWeekSunday.ToPtr()},
											ScheduleTimes: []*time.Time{
												to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }())},
										}},
									IsDefault: to.BoolPtr(false),
									TagInfo: &RetentionTag{
										TagName: to.StringPtr("Weekly"),
									},
									TaggingPriority: to.Int64Ptr(20),
								}},
						},
					},
					{
						BasePolicyRule: BasePolicyRule{
							Name:       to.StringPtr("Default"),
							ObjectType: to.StringPtr("AzureRetentionRule"),
						},
						IsDefault: to.BoolPtr(true),
						Lifecycles: []*SourceLifeCycle{
							{
								DeleteAfter: &AbsoluteDeleteOption{
									DeleteOption: DeleteOption{
										Duration:   to.StringPtr("P1W"),
										ObjectType: to.StringPtr("AbsoluteDeleteOption"),
									},
								},
								SourceDataStore: &DataStoreInfoBase{
									DataStoreType: DataStoreTypesVaultStore.ToPtr(),
									ObjectType:    to.StringPtr("DataStoreInfoBase"),
								},
							}},
					},
					{
						BasePolicyRule: BasePolicyRule{
							Name:       to.StringPtr("Weekly"),
							ObjectType: to.StringPtr("AzureRetentionRule"),
						},
						IsDefault: to.BoolPtr(false),
						Lifecycles: []*SourceLifeCycle{
							{
								DeleteAfter: &AbsoluteDeleteOption{
									DeleteOption: DeleteOption{
										Duration:   to.StringPtr("P12W"),
										ObjectType: to.StringPtr("AbsoluteDeleteOption"),
									},
								},
								SourceDataStore: &DataStoreInfoBase{
									DataStoreType: DataStoreTypesVaultStore.ToPtr(),
									ObjectType:    to.StringPtr("DataStoreInfoBase"),
								},
							}},
					}},
			},
		},
		&BackupPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BaseBackupPolicyResource.ID == nil {
		t.Fatal("BaseBackupPolicyResource.ID should not be nil!")
	}
}

func TestBackupPolicies_Delete(t *testing.T) {
	// From example Delete BackupPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupPoliciesClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	_, err := client.Delete(ctx,
		"PrivatePreviewVault",
		"000pikumar",
		"OSSDBPolicy",
		&BackupPoliciesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackupInstances_List(t *testing.T) {
	// From example List BackupInstances in a Vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupInstancesClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	pager := client.List("PratikPrivatePreviewVault1",
		"000pikumar",
		&BackupInstancesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BackupInstanceResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BackupInstanceResource.ID should not be nil!")
			}
		}
	}
}

func TestBackupInstances_Get(t *testing.T) {
	// From example Get BackupInstance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupInstancesClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	res, err := client.Get(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		&BackupInstancesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupInstanceResource.ID == nil {
		t.Fatal("BackupInstanceResource.ID should not be nil!")
	}
}

func TestBackupInstances_CreateOrUpdate(t *testing.T) {
	// From example Create BackupInstance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupInstancesClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		BackupInstanceResource{
			Properties: &BackupInstance{
				DataSourceInfo: &Datasource{
					DatasourceType:   to.StringPtr("OssDB"),
					ObjectType:       to.StringPtr("Datasource"),
					ResourceID:       to.StringPtr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest/databases/testdb"),
					ResourceLocation: to.StringPtr(""),
					ResourceName:     to.StringPtr("testdb"),
					ResourceType:     to.StringPtr("Microsoft.DBforPostgreSQL/servers/databases"),
					ResourceURI:      to.StringPtr(""),
				},
				DataSourceSetInfo: &DatasourceSet{
					DatasourceType:   to.StringPtr("OssDB"),
					ObjectType:       to.StringPtr("DatasourceSet"),
					ResourceID:       to.StringPtr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest"),
					ResourceLocation: to.StringPtr(""),
					ResourceName:     to.StringPtr("viveksipgtest"),
					ResourceType:     to.StringPtr("Microsoft.DBforPostgreSQL/servers"),
					ResourceURI:      to.StringPtr(""),
				},
				DatasourceAuthCredentials: &SecretStoreBasedAuthCredentials{
					AuthCredentials: AuthCredentials{
						ObjectType: to.StringPtr("SecretStoreBasedAuthCredentials"),
					},
					SecretStoreResource: &SecretStoreResource{
						SecretStoreType: SecretStoreTypeAzureKeyVault.ToPtr(),
						URI:             to.StringPtr("https://samplevault.vault.azure.net/secrets/credentials"),
					},
				},
				FriendlyName: to.StringPtr("harshitbi2"),
				ObjectType:   to.StringPtr("BackupInstance"),
				PolicyInfo: &PolicyInfo{
					PolicyID: to.StringPtr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/000pikumar/providers/Microsoft.DataProtection/Backupvaults/PratikPrivatePreviewVault1/backupPolicies/PratikPolicy1"),
					PolicyParameters: &PolicyParameters{
						DataStoreParametersList: []DataStoreParameters{
							{
								DataStoreParameters: DataStoreParameters{
									DataStoreType: DataStoreTypesOperationalStore.ToPtr(),
									ObjectType:    to.StringPtr("AzureOperationalStoreParameters"),
								},
								ResourceGroupID: to.StringPtr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest"),
							}},
					},
				},
			},
		},
		&BackupInstancesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BackupInstanceResource.ID == nil {
		t.Fatal("BackupInstanceResource.ID should not be nil!")
	}
}

func TestBackupInstances_Delete(t *testing.T) {
	// From example Delete BackupInstance
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupInstancesClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	poller, err := client.BeginDelete(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		&BackupInstancesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackupInstances_AdhocBackup(t *testing.T) {
	// From example Trigger Adhoc Backup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupInstancesClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	poller, err := client.BeginAdhocBackup(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		TriggerBackupRequest{
			BackupRuleOptions: &AdHocBackupRuleOptions{
				RuleName: to.StringPtr("BackupWeekly"),
				TriggerOption: &AdhocBackupTriggerOption{
					RetentionTagOverride: to.StringPtr("yearly"),
				},
			},
		},
		&BackupInstancesBeginAdhocBackupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackupInstances_ValidateForBackup(t *testing.T) {
	// From example Validate For Backup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupInstancesClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	poller, err := client.BeginValidateForBackup(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		ValidateForBackupRequest{
			BackupInstance: &BackupInstance{
				DataSourceInfo: &Datasource{
					DatasourceType:   to.StringPtr("OssDB"),
					ObjectType:       to.StringPtr("Datasource"),
					ResourceID:       to.StringPtr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest/databases/testdb"),
					ResourceLocation: to.StringPtr(""),
					ResourceName:     to.StringPtr("testdb"),
					ResourceType:     to.StringPtr("Microsoft.DBforPostgreSQL/servers/databases"),
					ResourceURI:      to.StringPtr(""),
				},
				DataSourceSetInfo: &DatasourceSet{
					DatasourceType:   to.StringPtr("OssDB"),
					ObjectType:       to.StringPtr("DatasourceSet"),
					ResourceID:       to.StringPtr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest"),
					ResourceLocation: to.StringPtr(""),
					ResourceName:     to.StringPtr("viveksipgtest"),
					ResourceType:     to.StringPtr("Microsoft.DBforPostgreSQL/servers"),
					ResourceURI:      to.StringPtr(""),
				},
				DatasourceAuthCredentials: &SecretStoreBasedAuthCredentials{
					AuthCredentials: AuthCredentials{
						ObjectType: to.StringPtr("SecretStoreBasedAuthCredentials"),
					},
					SecretStoreResource: &SecretStoreResource{
						SecretStoreType: SecretStoreTypeAzureKeyVault.ToPtr(),
						URI:             to.StringPtr("https://samplevault.vault.azure.net/secrets/credentials"),
					},
				},
				FriendlyName: to.StringPtr("harshitbi2"),
				ObjectType:   to.StringPtr("BackupInstance"),
				PolicyInfo: &PolicyInfo{
					PolicyID: to.StringPtr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/000pikumar/providers/Microsoft.DataProtection/Backupvaults/PratikPrivatePreviewVault1/backupPolicies/PratikPolicy1"),
				},
			},
		},
		&BackupInstancesBeginValidateForBackupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackupInstances_TriggerRehydrate(t *testing.T) {
	// From example Trigger Rehydrate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupInstancesClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	poller, err := client.BeginTriggerRehydrate(ctx,
		"000pikumar",
		"PratikPrivatePreviewVault1",
		"testInstance1",
		AzureBackupRehydrationRequest{
			RecoveryPointID:              to.StringPtr("hardcodedRP"),
			RehydrationPriority:          RehydrationPriorityHigh.ToPtr(),
			RehydrationRetentionDuration: to.StringPtr("7D"),
		},
		&BackupInstancesBeginTriggerRehydrateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackupInstances_TriggerRestore(t *testing.T) {
	// From example Trigger Restore
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupInstancesClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	poller, err := client.BeginTriggerRestore(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		AzureBackupRecoveryPointBasedRestoreRequest{
			AzureBackupRestoreRequest: AzureBackupRestoreRequest{
				ObjectType: to.StringPtr("AzureBackupRecoveryPointBasedRestoreRequest"),
				RestoreTargetInfo: &RestoreTargetInfo{
					RestoreTargetInfoBase: RestoreTargetInfoBase{
						ObjectType:      to.StringPtr("RestoreTargetInfo"),
						RecoveryOption:  RecoveryOptionFailIfExists.ToPtr(),
						RestoreLocation: to.StringPtr("southeastasia"),
					},
					DatasourceAuthCredentials: &SecretStoreBasedAuthCredentials{
						AuthCredentials: AuthCredentials{
							ObjectType: to.StringPtr("SecretStoreBasedAuthCredentials"),
						},
						SecretStoreResource: &SecretStoreResource{
							SecretStoreType: SecretStoreTypeAzureKeyVault.ToPtr(),
							URI:             to.StringPtr("https://samplevault.vault.azure.net/secrets/credentials"),
						},
					},
					DatasourceInfo: &Datasource{
						DatasourceType:   to.StringPtr("OssDB"),
						ObjectType:       to.StringPtr("Datasource"),
						ResourceID:       to.StringPtr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest/databases/testdb"),
						ResourceLocation: to.StringPtr(""),
						ResourceName:     to.StringPtr("testdb"),
						ResourceType:     to.StringPtr("Microsoft.DBforPostgreSQL/servers/databases"),
						ResourceURI:      to.StringPtr(""),
					},
					DatasourceSetInfo: &DatasourceSet{
						DatasourceType:   to.StringPtr("OssDB"),
						ObjectType:       to.StringPtr("DatasourceSet"),
						ResourceID:       to.StringPtr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest"),
						ResourceLocation: to.StringPtr(""),
						ResourceName:     to.StringPtr("viveksipgtest"),
						ResourceType:     to.StringPtr("Microsoft.DBforPostgreSQL/servers"),
						ResourceURI:      to.StringPtr(""),
					},
				},
				SourceDataStoreType: SourceDataStoreTypeVaultStore.ToPtr(),
			},
			RecoveryPointID: to.StringPtr("hardcodedRP"),
		},
		&BackupInstancesBeginTriggerRestoreOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example Trigger Restore As Files
	poller, err = client.BeginTriggerRestore(ctx,
		"PrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		AzureBackupRecoveryPointBasedRestoreRequest{
			AzureBackupRestoreRequest: AzureBackupRestoreRequest{
				ObjectType: to.StringPtr("AzureBackupRecoveryPointBasedRestoreRequest"),
				RestoreTargetInfo: &RestoreFilesTargetInfo{
					RestoreTargetInfoBase: RestoreTargetInfoBase{
						ObjectType:      to.StringPtr("RestoreFilesTargetInfo"),
						RecoveryOption:  RecoveryOptionFailIfExists.ToPtr(),
						RestoreLocation: to.StringPtr("southeastasia"),
					},
					TargetDetails: &TargetDetails{
						FilePrefix:                to.StringPtr("restoredblob"),
						RestoreTargetLocationType: RestoreTargetLocationTypeAzureBlobs.ToPtr(),
						URL:                       to.StringPtr("https://teststorage.blob.core.windows.net/restoretest"),
					},
				},
				SourceDataStoreType: SourceDataStoreTypeVaultStore.ToPtr(),
			},
			RecoveryPointID: to.StringPtr("hardcodedRP"),
		},
		&BackupInstancesBeginTriggerRestoreOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example Trigger Restore With Rehydration
	poller, err = client.BeginTriggerRestore(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		AzureBackupRestoreWithRehydrationRequest{
			AzureBackupRecoveryPointBasedRestoreRequest: AzureBackupRecoveryPointBasedRestoreRequest{
				AzureBackupRestoreRequest: AzureBackupRestoreRequest{
					ObjectType: to.StringPtr("AzureBackupRestoreWithRehydrationRequest"),
					RestoreTargetInfo: &RestoreTargetInfo{
						RestoreTargetInfoBase: RestoreTargetInfoBase{
							ObjectType:      to.StringPtr("RestoreTargetInfo"),
							RecoveryOption:  RecoveryOptionFailIfExists.ToPtr(),
							RestoreLocation: to.StringPtr("southeastasia"),
						},
						DatasourceInfo: &Datasource{
							DatasourceType:   to.StringPtr("OssDB"),
							ObjectType:       to.StringPtr("Datasource"),
							ResourceID:       to.StringPtr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest/databases/testdb"),
							ResourceLocation: to.StringPtr(""),
							ResourceName:     to.StringPtr("testdb"),
							ResourceType:     to.StringPtr("Microsoft.DBforPostgreSQL/servers/databases"),
							ResourceURI:      to.StringPtr(""),
						},
						DatasourceSetInfo: &DatasourceSet{
							DatasourceType:   to.StringPtr("OssDB"),
							ObjectType:       to.StringPtr("DatasourceSet"),
							ResourceID:       to.StringPtr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest"),
							ResourceLocation: to.StringPtr(""),
							ResourceName:     to.StringPtr("viveksipgtest"),
							ResourceType:     to.StringPtr("Microsoft.DBforPostgreSQL/servers"),
							ResourceURI:      to.StringPtr(""),
						},
					},
					SourceDataStoreType: SourceDataStoreTypeVaultStore.ToPtr(),
				},
				RecoveryPointID: to.StringPtr("hardcodedRP"),
			},
			RehydrationPriority:          RehydrationPriorityHigh.ToPtr(),
			RehydrationRetentionDuration: to.StringPtr("7D"),
		},
		&BackupInstancesBeginTriggerRestoreOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBackupInstances_ValidateForRestore(t *testing.T) {
	// From example Validate Restore
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBackupInstancesClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	poller, err := client.BeginValidateForRestore(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		ValidateRestoreRequestObject{
			RestoreRequestObject: &AzureBackupRecoveryPointBasedRestoreRequest{
				AzureBackupRestoreRequest: AzureBackupRestoreRequest{
					ObjectType: to.StringPtr("AzureBackupRecoveryPointBasedRestoreRequest"),
					RestoreTargetInfo: &RestoreTargetInfo{
						RestoreTargetInfoBase: RestoreTargetInfoBase{
							ObjectType:      to.StringPtr("RestoreTargetInfo"),
							RecoveryOption:  RecoveryOptionFailIfExists.ToPtr(),
							RestoreLocation: to.StringPtr("southeastasia"),
						},
						DatasourceAuthCredentials: &SecretStoreBasedAuthCredentials{
							AuthCredentials: AuthCredentials{
								ObjectType: to.StringPtr("SecretStoreBasedAuthCredentials"),
							},
							SecretStoreResource: &SecretStoreResource{
								SecretStoreType: SecretStoreTypeAzureKeyVault.ToPtr(),
								URI:             to.StringPtr("https://samplevault.vault.azure.net/secrets/credentials"),
							},
						},
						DatasourceInfo: &Datasource{
							DatasourceType:   to.StringPtr("OssDB"),
							ObjectType:       to.StringPtr("Datasource"),
							ResourceID:       to.StringPtr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest/databases/testdb"),
							ResourceLocation: to.StringPtr(""),
							ResourceName:     to.StringPtr("testdb"),
							ResourceType:     to.StringPtr("Microsoft.DBforPostgreSQL/servers/databases"),
							ResourceURI:      to.StringPtr(""),
						},
						DatasourceSetInfo: &DatasourceSet{
							DatasourceType:   to.StringPtr("OssDB"),
							ObjectType:       to.StringPtr("DatasourceSet"),
							ResourceID:       to.StringPtr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest"),
							ResourceLocation: to.StringPtr(""),
							ResourceName:     to.StringPtr("viveksipgtest"),
							ResourceType:     to.StringPtr("Microsoft.DBforPostgreSQL/servers"),
							ResourceURI:      to.StringPtr(""),
						},
					},
					SourceDataStoreType: SourceDataStoreTypeVaultStore.ToPtr(),
				},
				RecoveryPointID: to.StringPtr("hardcodedRP"),
			},
		},
		&BackupInstancesBeginValidateForRestoreOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRecoveryPoints_List(t *testing.T) {
	// From example List Recovery Points in a Vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecoveryPointsClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	pager := client.List("PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		&RecoveryPointsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AzureBackupRecoveryPointResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AzureBackupRecoveryPointResource.ID should not be nil!")
			}
		}
	}
}

func TestRecoveryPoints_Get(t *testing.T) {
	// From example Get Recovery Point
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRecoveryPointsClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	res, err := client.Get(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		"7fb2cddd-c5b3-44f6-a0d9-db3c4f9d5f25",
		&RecoveryPointsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureBackupRecoveryPointResource.ID == nil {
		t.Fatal("AzureBackupRecoveryPointResource.ID should not be nil!")
	}
}

func TestJobs_List(t *testing.T) {
	// From example Get Jobs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"62b829ee-7936-40c9-a1c9-47a93f9f3965")
	pager := client.List("BugBash1",
		"BugBashVaultForCCYv11",
		&JobsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AzureBackupJobResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AzureBackupJobResource.ID should not be nil!")
			}
		}
	}
}

func TestJobs_Get(t *testing.T) {
	// From example Get Job
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewJobsClient(con,
		"62b829ee-7936-40c9-a1c9-47a93f9f3965")
	res, err := client.Get(ctx,
		"BugBash1",
		"BugBashVaultForCCYv11",
		"3c60cb49-63e8-4b21-b9bd-26277b3fdfae",
		&JobsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureBackupJobResource.ID == nil {
		t.Fatal("AzureBackupJobResource.ID should not be nil!")
	}
}

func TestRestorableTimeRanges_Find(t *testing.T) {
	// From example Find Restorable Time Ranges
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRestorableTimeRangesClient(con,
		"04cf684a-d41f-4550-9f70-7708a3a2283b")
	res, err := client.Find(ctx,
		"ZBlobBackupVaultBVTD3",
		"Blob-Backup",
		"zblobbackuptestsa58",
		AzureBackupFindRestorableTimeRangesRequest{
			EndTime:             to.StringPtr("2021-02-24T00:35:17.6829685Z"),
			SourceDataStoreType: RestoreSourceDataStoreTypeOperationalStore.ToPtr(),
			StartTime:           to.StringPtr("2020-10-17T23:28:17.6829685Z"),
		},
		&RestorableTimeRangesFindOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureBackupFindRestorableTimeRangesResponseResource.ID == nil {
		t.Fatal("AzureBackupFindRestorableTimeRangesResponseResource.ID should not be nil!")
	}
}

func TestExportJobs_Trigger(t *testing.T) {
	// From example Trigger Export Jobs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExportJobsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginTrigger(ctx,
		"SwaggerTestRg",
		"NetSDKTestRsVault",
		&ExportJobsBeginTriggerOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestExportJobsOperationResult_Get(t *testing.T) {
	// From example Get Export Jobs Operation Result
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExportJobsOperationResultClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.Get(ctx,
		"SwaggerTestRg",
		"NetSDKTestRsVault",
		"00000000-0000-0000-0000-000000000000",
		&ExportJobsOperationResultGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestResourceGuards_GetResourcesInSubscription(t *testing.T) {
	// From example Get ResourceGuards in Subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	pager := client.GetResourcesInSubscription(&ResourceGuardsGetResourcesInSubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ResourceGuardResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ResourceGuardResource.ID should not be nil!")
			}
		}
	}
}

func TestResourceGuards_GetResourcesInResourceGroup(t *testing.T) {
	// From example Get ResourceGuards in ResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	pager := client.GetResourcesInResourceGroup("SampleResourceGroup",
		&ResourceGuardsGetResourcesInResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ResourceGuardResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ResourceGuardResource.ID should not be nil!")
			}
		}
	}
}

func TestResourceGuards_Put(t *testing.T) {
	// From example Create ResourceGuard
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	res, err := client.Put(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		ResourceGuardResource{
			DppTrackedResource: DppTrackedResource{
				Location: to.StringPtr("WestUS"),
				Tags: map[string]*string{
					"key1": to.StringPtr("val1"),
				},
			},
		},
		&ResourceGuardsPutOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ResourceGuardResource.ID == nil {
		t.Fatal("ResourceGuardResource.ID should not be nil!")
	}
}

func TestResourceGuards_Get(t *testing.T) {
	// From example Get ResourceGuard
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		&ResourceGuardsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ResourceGuardResource.ID == nil {
		t.Fatal("ResourceGuardResource.ID should not be nil!")
	}
}

func TestResourceGuards_Delete(t *testing.T) {
	// From example Delete ResourceGuard
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	_, err := client.Delete(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		&ResourceGuardsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestResourceGuards_Patch(t *testing.T) {
	// From example Patch ResourceGuard
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	res, err := client.Patch(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		PatchResourceRequestInput{
			Tags: map[string]*string{
				"newKey": to.StringPtr("newVal"),
			},
		},
		&ResourceGuardsPatchOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ResourceGuardResource.ID == nil {
		t.Fatal("ResourceGuardResource.ID should not be nil!")
	}
}

func TestResourceGuards_GetDisableSoftDeleteRequestsObjects(t *testing.T) {
	// From example List OperationsRequestObject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	pager := client.GetDisableSoftDeleteRequestsObjects("SampleResourceGroup",
		"swaggerExample",
		&ResourceGuardsGetDisableSoftDeleteRequestsObjectsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DppBaseResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DppBaseResource.ID should not be nil!")
			}
		}
	}
}

func TestResourceGuards_GetDeleteResourceGuardProxyRequestsObjects(t *testing.T) {
	// From example List OperationsRequestObject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	pager := client.GetDeleteResourceGuardProxyRequestsObjects("SampleResourceGroup",
		"swaggerExample",
		&ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DppBaseResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DppBaseResource.ID should not be nil!")
			}
		}
	}
}

func TestResourceGuards_GetBackupSecurityPINRequestsObjects(t *testing.T) {
	// From example List OperationsRequestObject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	pager := client.GetBackupSecurityPINRequestsObjects("SampleResourceGroup",
		"swaggerExample",
		&ResourceGuardsGetBackupSecurityPINRequestsObjectsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DppBaseResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DppBaseResource.ID should not be nil!")
			}
		}
	}
}

func TestResourceGuards_GetDeleteProtectedItemRequestsObjects(t *testing.T) {
	// From example List OperationsRequestObject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	pager := client.GetDeleteProtectedItemRequestsObjects("SampleResourceGroup",
		"swaggerExample",
		&ResourceGuardsGetDeleteProtectedItemRequestsObjectsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DppBaseResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DppBaseResource.ID should not be nil!")
			}
		}
	}
}

func TestResourceGuards_GetUpdateProtectionPolicyRequestsObjects(t *testing.T) {
	// From example List OperationsRequestObject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	pager := client.GetUpdateProtectionPolicyRequestsObjects("SampleResourceGroup",
		"swaggerExample",
		&ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DppBaseResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DppBaseResource.ID should not be nil!")
			}
		}
	}
}

func TestResourceGuards_GetUpdateProtectedItemRequestsObjects(t *testing.T) {
	// From example List OperationsRequestObject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	pager := client.GetUpdateProtectedItemRequestsObjects("SampleResourceGroup",
		"swaggerExample",
		&ResourceGuardsGetUpdateProtectedItemRequestsObjectsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DppBaseResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DppBaseResource.ID should not be nil!")
			}
		}
	}
}

func TestResourceGuards_GetDefaultDisableSoftDeleteRequestsObject(t *testing.T) {
	// From example Get DefaultOperationsRequestObject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	res, err := client.GetDefaultDisableSoftDeleteRequestsObject(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		"default",
		&ResourceGuardsGetDefaultDisableSoftDeleteRequestsObjectOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DppBaseResource.ID == nil {
		t.Fatal("DppBaseResource.ID should not be nil!")
	}
}

func TestResourceGuards_GetDefaultDeleteResourceGuardProxyRequestsObject(t *testing.T) {
	// From example Get DefaultOperationsRequestObject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	res, err := client.GetDefaultDeleteResourceGuardProxyRequestsObject(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		"default",
		&ResourceGuardsGetDefaultDeleteResourceGuardProxyRequestsObjectOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DppBaseResource.ID == nil {
		t.Fatal("DppBaseResource.ID should not be nil!")
	}
}

func TestResourceGuards_GetDefaultBackupSecurityPINRequestsObject(t *testing.T) {
	// From example Get DefaultOperationsRequestObject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	res, err := client.GetDefaultBackupSecurityPINRequestsObject(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		"default",
		&ResourceGuardsGetDefaultBackupSecurityPINRequestsObjectOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DppBaseResource.ID == nil {
		t.Fatal("DppBaseResource.ID should not be nil!")
	}
}

func TestResourceGuards_GetDefaultDeleteProtectedItemRequestsObject(t *testing.T) {
	// From example Get DefaultOperationsRequestObject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	res, err := client.GetDefaultDeleteProtectedItemRequestsObject(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		"default",
		&ResourceGuardsGetDefaultDeleteProtectedItemRequestsObjectOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DppBaseResource.ID == nil {
		t.Fatal("DppBaseResource.ID should not be nil!")
	}
}

func TestResourceGuards_GetDefaultUpdateProtectionPolicyRequestsObject(t *testing.T) {
	// From example Get DefaultOperationsRequestObject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	res, err := client.GetDefaultUpdateProtectionPolicyRequestsObject(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		"default",
		&ResourceGuardsGetDefaultUpdateProtectionPolicyRequestsObjectOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DppBaseResource.ID == nil {
		t.Fatal("DppBaseResource.ID should not be nil!")
	}
}

func TestResourceGuards_GetDefaultUpdateProtectedItemRequestsObject(t *testing.T) {
	// From example Get DefaultOperationsRequestObject
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceGuardsClient(con,
		"0b352192-dcac-4cc7-992e-a96190ccc68c")
	res, err := client.GetDefaultUpdateProtectedItemRequestsObject(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		"default",
		&ResourceGuardsGetDefaultUpdateProtectedItemRequestsObjectOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DppBaseResource.ID == nil {
		t.Fatal("DppBaseResource.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
