//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdataprotection

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"time"
)

// BackupInstancesClientAdhocBackupPollerResponse contains the response from method BackupInstancesClient.AdhocBackup.
type BackupInstancesClientAdhocBackupPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupInstancesClientAdhocBackupPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l BackupInstancesClientAdhocBackupPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupInstancesClientAdhocBackupResponse, error) {
	respType := BackupInstancesClientAdhocBackupResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.OperationJobExtendedInfo)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a BackupInstancesClientAdhocBackupPollerResponse from the provided client and resume token.
func (l *BackupInstancesClientAdhocBackupPollerResponse) Resume(ctx context.Context, client *BackupInstancesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupInstancesClient.AdhocBackup", token, client.pl)
	if err != nil {
		return err
	}
	poller := &BackupInstancesClientAdhocBackupPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// BackupInstancesClientAdhocBackupResponse contains the response from method BackupInstancesClient.AdhocBackup.
type BackupInstancesClientAdhocBackupResponse struct {
	OperationJobExtendedInfo
}

// BackupInstancesClientCreateOrUpdatePollerResponse contains the response from method BackupInstancesClient.CreateOrUpdate.
type BackupInstancesClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupInstancesClientCreateOrUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l BackupInstancesClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupInstancesClientCreateOrUpdateResponse, error) {
	respType := BackupInstancesClientCreateOrUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.BackupInstanceResource)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a BackupInstancesClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *BackupInstancesClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *BackupInstancesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupInstancesClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &BackupInstancesClientCreateOrUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// BackupInstancesClientCreateOrUpdateResponse contains the response from method BackupInstancesClient.CreateOrUpdate.
type BackupInstancesClientCreateOrUpdateResponse struct {
	BackupInstanceResource
}

// BackupInstancesClientDeletePollerResponse contains the response from method BackupInstancesClient.Delete.
type BackupInstancesClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupInstancesClientDeletePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l BackupInstancesClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupInstancesClientDeleteResponse, error) {
	respType := BackupInstancesClientDeleteResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a BackupInstancesClientDeletePollerResponse from the provided client and resume token.
func (l *BackupInstancesClientDeletePollerResponse) Resume(ctx context.Context, client *BackupInstancesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupInstancesClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &BackupInstancesClientDeletePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// BackupInstancesClientDeleteResponse contains the response from method BackupInstancesClient.Delete.
type BackupInstancesClientDeleteResponse struct {
	// placeholder for future response values
}

// BackupInstancesClientGetResponse contains the response from method BackupInstancesClient.Get.
type BackupInstancesClientGetResponse struct {
	BackupInstanceResource
}

// BackupInstancesClientListResponse contains the response from method BackupInstancesClient.List.
type BackupInstancesClientListResponse struct {
	BackupInstanceResourceList
}

// BackupInstancesClientTriggerRehydratePollerResponse contains the response from method BackupInstancesClient.TriggerRehydrate.
type BackupInstancesClientTriggerRehydratePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupInstancesClientTriggerRehydratePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l BackupInstancesClientTriggerRehydratePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupInstancesClientTriggerRehydrateResponse, error) {
	respType := BackupInstancesClientTriggerRehydrateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a BackupInstancesClientTriggerRehydratePollerResponse from the provided client and resume token.
func (l *BackupInstancesClientTriggerRehydratePollerResponse) Resume(ctx context.Context, client *BackupInstancesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupInstancesClient.TriggerRehydrate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &BackupInstancesClientTriggerRehydratePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// BackupInstancesClientTriggerRehydrateResponse contains the response from method BackupInstancesClient.TriggerRehydrate.
type BackupInstancesClientTriggerRehydrateResponse struct {
	// placeholder for future response values
}

// BackupInstancesClientTriggerRestorePollerResponse contains the response from method BackupInstancesClient.TriggerRestore.
type BackupInstancesClientTriggerRestorePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupInstancesClientTriggerRestorePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l BackupInstancesClientTriggerRestorePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupInstancesClientTriggerRestoreResponse, error) {
	respType := BackupInstancesClientTriggerRestoreResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.OperationJobExtendedInfo)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a BackupInstancesClientTriggerRestorePollerResponse from the provided client and resume token.
func (l *BackupInstancesClientTriggerRestorePollerResponse) Resume(ctx context.Context, client *BackupInstancesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupInstancesClient.TriggerRestore", token, client.pl)
	if err != nil {
		return err
	}
	poller := &BackupInstancesClientTriggerRestorePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// BackupInstancesClientTriggerRestoreResponse contains the response from method BackupInstancesClient.TriggerRestore.
type BackupInstancesClientTriggerRestoreResponse struct {
	OperationJobExtendedInfo
}

// BackupInstancesClientValidateForBackupPollerResponse contains the response from method BackupInstancesClient.ValidateForBackup.
type BackupInstancesClientValidateForBackupPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupInstancesClientValidateForBackupPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l BackupInstancesClientValidateForBackupPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupInstancesClientValidateForBackupResponse, error) {
	respType := BackupInstancesClientValidateForBackupResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.OperationJobExtendedInfo)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a BackupInstancesClientValidateForBackupPollerResponse from the provided client and resume token.
func (l *BackupInstancesClientValidateForBackupPollerResponse) Resume(ctx context.Context, client *BackupInstancesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupInstancesClient.ValidateForBackup", token, client.pl)
	if err != nil {
		return err
	}
	poller := &BackupInstancesClientValidateForBackupPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// BackupInstancesClientValidateForBackupResponse contains the response from method BackupInstancesClient.ValidateForBackup.
type BackupInstancesClientValidateForBackupResponse struct {
	OperationJobExtendedInfo
}

// BackupInstancesClientValidateForRestorePollerResponse contains the response from method BackupInstancesClient.ValidateForRestore.
type BackupInstancesClientValidateForRestorePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupInstancesClientValidateForRestorePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l BackupInstancesClientValidateForRestorePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupInstancesClientValidateForRestoreResponse, error) {
	respType := BackupInstancesClientValidateForRestoreResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.OperationJobExtendedInfo)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a BackupInstancesClientValidateForRestorePollerResponse from the provided client and resume token.
func (l *BackupInstancesClientValidateForRestorePollerResponse) Resume(ctx context.Context, client *BackupInstancesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupInstancesClient.ValidateForRestore", token, client.pl)
	if err != nil {
		return err
	}
	poller := &BackupInstancesClientValidateForRestorePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// BackupInstancesClientValidateForRestoreResponse contains the response from method BackupInstancesClient.ValidateForRestore.
type BackupInstancesClientValidateForRestoreResponse struct {
	OperationJobExtendedInfo
}

// BackupPoliciesClientCreateOrUpdateResponse contains the response from method BackupPoliciesClient.CreateOrUpdate.
type BackupPoliciesClientCreateOrUpdateResponse struct {
	BaseBackupPolicyResource
}

// BackupPoliciesClientDeleteResponse contains the response from method BackupPoliciesClient.Delete.
type BackupPoliciesClientDeleteResponse struct {
	// placeholder for future response values
}

// BackupPoliciesClientGetResponse contains the response from method BackupPoliciesClient.Get.
type BackupPoliciesClientGetResponse struct {
	BaseBackupPolicyResource
}

// BackupPoliciesClientListResponse contains the response from method BackupPoliciesClient.List.
type BackupPoliciesClientListResponse struct {
	BaseBackupPolicyResourceList
}

// BackupVaultOperationResultsClientGetResponse contains the response from method BackupVaultOperationResultsClient.Get.
type BackupVaultOperationResultsClientGetResponse struct {
	BackupVaultResource
	// AzureAsyncOperation contains the information returned from the Azure-AsyncOperation header response.
	AzureAsyncOperation *string

	// Location contains the information returned from the Location header response.
	Location *string

	// RetryAfter contains the information returned from the Retry-After header response.
	RetryAfter *int32
}

// BackupVaultsClientCheckNameAvailabilityResponse contains the response from method BackupVaultsClient.CheckNameAvailability.
type BackupVaultsClientCheckNameAvailabilityResponse struct {
	CheckNameAvailabilityResult
}

// BackupVaultsClientCreateOrUpdatePollerResponse contains the response from method BackupVaultsClient.CreateOrUpdate.
type BackupVaultsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupVaultsClientCreateOrUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l BackupVaultsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupVaultsClientCreateOrUpdateResponse, error) {
	respType := BackupVaultsClientCreateOrUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.BackupVaultResource)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a BackupVaultsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *BackupVaultsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *BackupVaultsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupVaultsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &BackupVaultsClientCreateOrUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// BackupVaultsClientCreateOrUpdateResponse contains the response from method BackupVaultsClient.CreateOrUpdate.
type BackupVaultsClientCreateOrUpdateResponse struct {
	BackupVaultResource
}

// BackupVaultsClientDeleteResponse contains the response from method BackupVaultsClient.Delete.
type BackupVaultsClientDeleteResponse struct {
	// placeholder for future response values
}

// BackupVaultsClientGetInResourceGroupResponse contains the response from method BackupVaultsClient.GetInResourceGroup.
type BackupVaultsClientGetInResourceGroupResponse struct {
	BackupVaultResourceList
}

// BackupVaultsClientGetInSubscriptionResponse contains the response from method BackupVaultsClient.GetInSubscription.
type BackupVaultsClientGetInSubscriptionResponse struct {
	BackupVaultResourceList
}

// BackupVaultsClientGetResponse contains the response from method BackupVaultsClient.Get.
type BackupVaultsClientGetResponse struct {
	BackupVaultResource
}

// BackupVaultsClientUpdatePollerResponse contains the response from method BackupVaultsClient.Update.
type BackupVaultsClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BackupVaultsClientUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l BackupVaultsClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BackupVaultsClientUpdateResponse, error) {
	respType := BackupVaultsClientUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.BackupVaultResource)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a BackupVaultsClientUpdatePollerResponse from the provided client and resume token.
func (l *BackupVaultsClientUpdatePollerResponse) Resume(ctx context.Context, client *BackupVaultsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BackupVaultsClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &BackupVaultsClientUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// BackupVaultsClientUpdateResponse contains the response from method BackupVaultsClient.Update.
type BackupVaultsClientUpdateResponse struct {
	BackupVaultResource
}

// ClientCheckFeatureSupportResponse contains the response from method Client.CheckFeatureSupport.
type ClientCheckFeatureSupportResponse struct {
	FeatureValidationResponseBaseClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ClientCheckFeatureSupportResponse.
func (c *ClientCheckFeatureSupportResponse) UnmarshalJSON(data []byte) error {
	res, err := unmarshalFeatureValidationResponseBaseClassification(data)
	if err != nil {
		return err
	}
	c.FeatureValidationResponseBaseClassification = res
	return nil
}

// ExportJobsClientTriggerPollerResponse contains the response from method ExportJobsClient.Trigger.
type ExportJobsClientTriggerPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ExportJobsClientTriggerPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ExportJobsClientTriggerPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ExportJobsClientTriggerResponse, error) {
	respType := ExportJobsClientTriggerResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ExportJobsClientTriggerPollerResponse from the provided client and resume token.
func (l *ExportJobsClientTriggerPollerResponse) Resume(ctx context.Context, client *ExportJobsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ExportJobsClient.Trigger", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ExportJobsClientTriggerPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ExportJobsClientTriggerResponse contains the response from method ExportJobsClient.Trigger.
type ExportJobsClientTriggerResponse struct {
	// placeholder for future response values
}

// ExportJobsOperationResultClientGetResponse contains the response from method ExportJobsOperationResultClient.Get.
type ExportJobsOperationResultClientGetResponse struct {
	ExportJobsResult
}

// JobsClientGetResponse contains the response from method JobsClient.Get.
type JobsClientGetResponse struct {
	AzureBackupJobResource
}

// JobsClientListResponse contains the response from method JobsClient.List.
type JobsClientListResponse struct {
	AzureBackupJobResourceList
}

// OperationResultClientGetResponse contains the response from method OperationResultClient.Get.
type OperationResultClientGetResponse struct {
	OperationJobExtendedInfo
	// AzureAsyncOperation contains the information returned from the Azure-AsyncOperation header response.
	AzureAsyncOperation *string

	// Location contains the information returned from the Location header response.
	Location *string

	// RetryAfter contains the information returned from the Retry-After header response.
	RetryAfter *int32
}

// OperationStatusClientGetResponse contains the response from method OperationStatusClient.Get.
type OperationStatusClientGetResponse struct {
	OperationResource
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	ClientDiscoveryResponse
}

// RecoveryPointsClientGetResponse contains the response from method RecoveryPointsClient.Get.
type RecoveryPointsClientGetResponse struct {
	AzureBackupRecoveryPointResource
}

// RecoveryPointsClientListResponse contains the response from method RecoveryPointsClient.List.
type RecoveryPointsClientListResponse struct {
	AzureBackupRecoveryPointResourceList
}

// ResourceGuardsClientDeleteResponse contains the response from method ResourceGuardsClient.Delete.
type ResourceGuardsClientDeleteResponse struct {
	// placeholder for future response values
}

// ResourceGuardsClientGetBackupSecurityPINRequestsObjectsResponse contains the response from method ResourceGuardsClient.GetBackupSecurityPINRequestsObjects.
type ResourceGuardsClientGetBackupSecurityPINRequestsObjectsResponse struct {
	DppBaseResourceList
}

// ResourceGuardsClientGetDefaultBackupSecurityPINRequestsObjectResponse contains the response from method ResourceGuardsClient.GetDefaultBackupSecurityPINRequestsObject.
type ResourceGuardsClientGetDefaultBackupSecurityPINRequestsObjectResponse struct {
	DppBaseResource
}

// ResourceGuardsClientGetDefaultDeleteProtectedItemRequestsObjectResponse contains the response from method ResourceGuardsClient.GetDefaultDeleteProtectedItemRequestsObject.
type ResourceGuardsClientGetDefaultDeleteProtectedItemRequestsObjectResponse struct {
	DppBaseResource
}

// ResourceGuardsClientGetDefaultDeleteResourceGuardProxyRequestsObjectResponse contains the response from method ResourceGuardsClient.GetDefaultDeleteResourceGuardProxyRequestsObject.
type ResourceGuardsClientGetDefaultDeleteResourceGuardProxyRequestsObjectResponse struct {
	DppBaseResource
}

// ResourceGuardsClientGetDefaultDisableSoftDeleteRequestsObjectResponse contains the response from method ResourceGuardsClient.GetDefaultDisableSoftDeleteRequestsObject.
type ResourceGuardsClientGetDefaultDisableSoftDeleteRequestsObjectResponse struct {
	DppBaseResource
}

// ResourceGuardsClientGetDefaultUpdateProtectedItemRequestsObjectResponse contains the response from method ResourceGuardsClient.GetDefaultUpdateProtectedItemRequestsObject.
type ResourceGuardsClientGetDefaultUpdateProtectedItemRequestsObjectResponse struct {
	DppBaseResource
}

// ResourceGuardsClientGetDefaultUpdateProtectionPolicyRequestsObjectResponse contains the response from method ResourceGuardsClient.GetDefaultUpdateProtectionPolicyRequestsObject.
type ResourceGuardsClientGetDefaultUpdateProtectionPolicyRequestsObjectResponse struct {
	DppBaseResource
}

// ResourceGuardsClientGetDeleteProtectedItemRequestsObjectsResponse contains the response from method ResourceGuardsClient.GetDeleteProtectedItemRequestsObjects.
type ResourceGuardsClientGetDeleteProtectedItemRequestsObjectsResponse struct {
	DppBaseResourceList
}

// ResourceGuardsClientGetDeleteResourceGuardProxyRequestsObjectsResponse contains the response from method ResourceGuardsClient.GetDeleteResourceGuardProxyRequestsObjects.
type ResourceGuardsClientGetDeleteResourceGuardProxyRequestsObjectsResponse struct {
	DppBaseResourceList
}

// ResourceGuardsClientGetDisableSoftDeleteRequestsObjectsResponse contains the response from method ResourceGuardsClient.GetDisableSoftDeleteRequestsObjects.
type ResourceGuardsClientGetDisableSoftDeleteRequestsObjectsResponse struct {
	DppBaseResourceList
}

// ResourceGuardsClientGetResourcesInResourceGroupResponse contains the response from method ResourceGuardsClient.GetResourcesInResourceGroup.
type ResourceGuardsClientGetResourcesInResourceGroupResponse struct {
	ResourceGuardResourceList
}

// ResourceGuardsClientGetResourcesInSubscriptionResponse contains the response from method ResourceGuardsClient.GetResourcesInSubscription.
type ResourceGuardsClientGetResourcesInSubscriptionResponse struct {
	ResourceGuardResourceList
}

// ResourceGuardsClientGetResponse contains the response from method ResourceGuardsClient.Get.
type ResourceGuardsClientGetResponse struct {
	ResourceGuardResource
}

// ResourceGuardsClientGetUpdateProtectedItemRequestsObjectsResponse contains the response from method ResourceGuardsClient.GetUpdateProtectedItemRequestsObjects.
type ResourceGuardsClientGetUpdateProtectedItemRequestsObjectsResponse struct {
	DppBaseResourceList
}

// ResourceGuardsClientGetUpdateProtectionPolicyRequestsObjectsResponse contains the response from method ResourceGuardsClient.GetUpdateProtectionPolicyRequestsObjects.
type ResourceGuardsClientGetUpdateProtectionPolicyRequestsObjectsResponse struct {
	DppBaseResourceList
}

// ResourceGuardsClientPatchResponse contains the response from method ResourceGuardsClient.Patch.
type ResourceGuardsClientPatchResponse struct {
	ResourceGuardResource
}

// ResourceGuardsClientPutResponse contains the response from method ResourceGuardsClient.Put.
type ResourceGuardsClientPutResponse struct {
	ResourceGuardResource
}

// RestorableTimeRangesClientFindResponse contains the response from method RestorableTimeRangesClient.Find.
type RestorableTimeRangesClientFindResponse struct {
	AzureBackupFindRestorableTimeRangesResponseResource
}
