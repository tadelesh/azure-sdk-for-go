//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdataprotection_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/dataprotection/armdataprotection"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestBackupVaults_GetInSubscription(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetBackupVaultsInSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get BackupVaults in Subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupVaultsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	pager := client.GetInSubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetBackupVaultsInSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.BackupVaultResourceList{
			Value: []*armdataprotection.BackupVaultResource{
				{
					Name: to.Ptr("ExampleVault1"),
					Type: to.Ptr("Microsoft.DataProtection/BackupVaults"),
					ID:   to.Ptr("/subscriptions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup2/providers/Microsoft.DataProtection/BackupVaults/ExampleVault1"),
					Identity: &armdataprotection.DppIdentityDetails{
						Type: to.Ptr("None"),
					},
					Location: to.Ptr("WestUS"),
					Tags: map[string]*string{
						"key1": to.Ptr("val1"),
					},
					Properties: &armdataprotection.BackupVault{
						ProvisioningState: to.Ptr(armdataprotection.ProvisioningStateSucceeded),
						StorageSettings: []*armdataprotection.StorageSetting{
							{
								Type:          to.Ptr(armdataprotection.StorageSettingTypesLocallyRedundant),
								DatastoreType: to.Ptr(armdataprotection.StorageSettingStoreTypesVaultStore),
							}},
					},
				},
				{
					Name: to.Ptr("ExampleVault2"),
					Type: to.Ptr("Microsoft.DataProtection/BackupVaults"),
					ID:   to.Ptr("/subscriptions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/BackupVaults/ExampleVault2"),
					Identity: &armdataprotection.DppIdentityDetails{
						Type: to.Ptr("None"),
					},
					Location: to.Ptr("WestUS"),
					Tags: map[string]*string{
						"key1": to.Ptr("val1"),
					},
					Properties: &armdataprotection.BackupVault{
						ProvisioningState: to.Ptr(armdataprotection.ProvisioningStateSucceeded),
						StorageSettings: []*armdataprotection.StorageSetting{
							{
								Type:          to.Ptr(armdataprotection.StorageSettingTypesLocallyRedundant),
								DatastoreType: to.Ptr(armdataprotection.StorageSettingStoreTypesVaultStore),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BackupVaultResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BackupVaultResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetBackupVaultsInSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupVaults_GetInResourceGroup(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetBackupVaultsInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get BackupVaults in ResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupVaultsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	pager := client.GetInResourceGroup("SampleResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetBackupVaultsInResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.BackupVaultResourceList{
			Value: []*armdataprotection.BackupVaultResource{
				{
					Name: to.Ptr("ExampleVault1"),
					Type: to.Ptr("Microsoft.DataProtection/BackupVaults"),
					ID:   to.Ptr("/subscriptions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/BackupVaults/ExampleVault1"),
					Identity: &armdataprotection.DppIdentityDetails{
						Type: to.Ptr("None"),
					},
					Location: to.Ptr("WestUS"),
					Tags: map[string]*string{
						"key1": to.Ptr("val1"),
					},
					Properties: &armdataprotection.BackupVault{
						ProvisioningState: to.Ptr(armdataprotection.ProvisioningStateSucceeded),
						StorageSettings: []*armdataprotection.StorageSetting{
							{
								Type:          to.Ptr(armdataprotection.StorageSettingTypesLocallyRedundant),
								DatastoreType: to.Ptr(armdataprotection.StorageSettingStoreTypesVaultStore),
							}},
					},
				},
				{
					Name: to.Ptr("ExampleVault2"),
					Type: to.Ptr("Microsoft.DataProtection/BackupVaults"),
					ID:   to.Ptr("/subscriptions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/BackupVaults/ExampleVault2"),
					Identity: &armdataprotection.DppIdentityDetails{
						Type:        to.Ptr("SystemAssigned"),
						PrincipalID: to.Ptr("c009b9a0-0024-417c-83cd-025d3776045d"),
						TenantID:    to.Ptr("83abe5cd-bcc3-441a-bd86-e6a75360cecc"),
					},
					Location: to.Ptr("WestUS"),
					Tags: map[string]*string{
						"key1": to.Ptr("val1"),
					},
					Properties: &armdataprotection.BackupVault{
						ProvisioningState: to.Ptr(armdataprotection.ProvisioningStateSucceeded),
						StorageSettings: []*armdataprotection.StorageSetting{
							{
								Type:          to.Ptr(armdataprotection.StorageSettingTypesLocallyRedundant),
								DatastoreType: to.Ptr(armdataprotection.StorageSettingStoreTypesVaultStore),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BackupVaultResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BackupVaultResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetBackupVaultsInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupVaults_Get(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetBackupVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get BackupVault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupVaultsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.Get(ctx,
		"swaggerExample",
		"SampleResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetBackupVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.BackupVaultResource{
			Name: to.Ptr("swaggerExample"),
			Type: to.Ptr("Microsoft.DataProtection/Backupvaults"),
			ID:   to.Ptr("/subscriptions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/Backupvaults/swaggerExample"),
			Identity: &armdataprotection.DppIdentityDetails{
				Type: to.Ptr("None"),
			},
			Location: to.Ptr("WestUS"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			Properties: &armdataprotection.BackupVault{
				ProvisioningState: to.Ptr(armdataprotection.ProvisioningStateSucceeded),
				StorageSettings: []*armdataprotection.StorageSetting{
					{
						Type:          to.Ptr(armdataprotection.StorageSettingTypesLocallyRedundant),
						DatastoreType: to.Ptr(armdataprotection.StorageSettingStoreTypesVaultStore),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupVaultResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupVaultResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetBackupVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetBackupVaultWithMSI.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get BackupVault With MSI"},
	})
	client = armdataprotection.NewBackupVaultsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err = client.Get(ctx,
		"swaggerExample",
		"SampleResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetBackupVaultWithMSI.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.BackupVaultResource{
			Name: to.Ptr("swaggerExample"),
			Type: to.Ptr("Microsoft.DataProtection/Backupvaults"),
			ID:   to.Ptr("/subscriptions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/Backupvaults/swaggerExample"),
			Identity: &armdataprotection.DppIdentityDetails{
				Type:        to.Ptr("SystemAssigned"),
				PrincipalID: to.Ptr("c009b9a0-0024-417c-83cd-025d3776045d"),
				TenantID:    to.Ptr("83abe5cd-bcc3-441a-bd86-e6a75360cecc"),
			},
			Location: to.Ptr("WestUS"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			Properties: &armdataprotection.BackupVault{
				ProvisioningState: to.Ptr(armdataprotection.ProvisioningStateSucceeded),
				StorageSettings: []*armdataprotection.StorageSetting{
					{
						Type:          to.Ptr(armdataprotection.StorageSettingTypesLocallyRedundant),
						DatastoreType: to.Ptr(armdataprotection.StorageSettingStoreTypesVaultStore),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupVaultResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupVaultResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetBackupVaultWithMSI.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupVaults_CreateOrUpdate(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/PutBackupVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create BackupVault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupVaultsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"swaggerExample",
		"SampleResourceGroup",
		armdataprotection.BackupVaultResource{
			Identity: &armdataprotection.DppIdentityDetails{
				Type: to.Ptr("None"),
			},
			Location: to.Ptr("WestUS"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			Properties: &armdataprotection.BackupVault{
				StorageSettings: []*armdataprotection.StorageSetting{
					{
						Type:          to.Ptr(armdataprotection.StorageSettingTypesLocallyRedundant),
						DatastoreType: to.Ptr(armdataprotection.StorageSettingStoreTypesVaultStore),
					}},
			},
		},
		&armdataprotection.BackupVaultsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/PutBackupVault.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/PutBackupVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.BackupVaultResource{
			Name: to.Ptr("swaggerExample"),
			Type: to.Ptr("Microsoft.DataProtection/Backupvaults"),
			ID:   to.Ptr("/subscriptions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/Backupvaults/swaggerExample"),
			Identity: &armdataprotection.DppIdentityDetails{
				Type: to.Ptr("None"),
			},
			Location: to.Ptr("WestUS"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			Properties: &armdataprotection.BackupVault{
				ProvisioningState: to.Ptr(armdataprotection.ProvisioningStateSucceeded),
				StorageSettings: []*armdataprotection.StorageSetting{
					{
						Type:          to.Ptr(armdataprotection.StorageSettingTypesLocallyRedundant),
						DatastoreType: to.Ptr(armdataprotection.StorageSettingStoreTypesVaultStore),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupVaultResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupVaultResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/PutBackupVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/PutBackupVaultWithMSI.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create BackupVault With MSI"},
	})
	client = armdataprotection.NewBackupVaultsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"swaggerExample",
		"SampleResourceGroup",
		armdataprotection.BackupVaultResource{
			Identity: &armdataprotection.DppIdentityDetails{
				Type: to.Ptr("systemAssigned"),
			},
			Location: to.Ptr("WestUS"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			Properties: &armdataprotection.BackupVault{
				StorageSettings: []*armdataprotection.StorageSetting{
					{
						Type:          to.Ptr(armdataprotection.StorageSettingTypesLocallyRedundant),
						DatastoreType: to.Ptr(armdataprotection.StorageSettingStoreTypesVaultStore),
					}},
			},
		},
		&armdataprotection.BackupVaultsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/PutBackupVaultWithMSI.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/PutBackupVaultWithMSI.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.BackupVaultResource{
			Name: to.Ptr("swaggerExample"),
			Type: to.Ptr("Microsoft.DataProtection/Backupvaults"),
			ID:   to.Ptr("/subscriptions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/Backupvaults/swaggerExample"),
			Identity: &armdataprotection.DppIdentityDetails{
				Type:        to.Ptr("SystemAssigned"),
				PrincipalID: to.Ptr("c009b9a0-0024-417c-83cd-025d3776045d"),
				TenantID:    to.Ptr("83abe5cd-bcc3-441a-bd86-e6a75360cecc"),
			},
			Location: to.Ptr("WestUS"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			Properties: &armdataprotection.BackupVault{
				ProvisioningState: to.Ptr(armdataprotection.ProvisioningStateSucceeded),
				StorageSettings: []*armdataprotection.StorageSetting{
					{
						Type:          to.Ptr(armdataprotection.StorageSettingTypesLocallyRedundant),
						DatastoreType: to.Ptr(armdataprotection.StorageSettingStoreTypesVaultStore),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupVaultResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupVaultResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/PutBackupVaultWithMSI.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupVaults_Delete(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/DeleteBackupVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete BackupVault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupVaultsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	_, err := client.Delete(ctx,
		"swaggerExample",
		"SampleResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/DeleteBackupVault.json: %v", err)
	}
}

func TestBackupVaults_Update(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/PatchBackupVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch BackupVault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupVaultsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"swaggerExample",
		"SampleResourceGroup",
		armdataprotection.PatchResourceRequestInput{
			Tags: map[string]*string{
				"newKey": to.Ptr("newVal"),
			},
		},
		&armdataprotection.BackupVaultsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/PatchBackupVault.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/PatchBackupVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.BackupVaultResource{
			Name:     to.Ptr("swaggerExample"),
			Type:     to.Ptr("Microsoft.DataProtection/Backupvaults"),
			ID:       to.Ptr("/subscriptions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/Backupvaults/swaggerExample"),
			Location: to.Ptr("WestUS"),
			Tags: map[string]*string{
				"newKey": to.Ptr("newVal"),
			},
			Properties: &armdataprotection.BackupVault{
				ProvisioningState: to.Ptr(armdataprotection.ProvisioningStateSucceeded),
				StorageSettings: []*armdataprotection.StorageSetting{
					{
						Type:          to.Ptr(armdataprotection.StorageSettingTypesLocallyRedundant),
						DatastoreType: to.Ptr(armdataprotection.StorageSettingStoreTypesVaultStore),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupVaultResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupVaultResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/PatchBackupVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupVaults_CheckNameAvailability(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/CheckBackupVaultsNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check BackupVaults name availability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupVaultsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"SampleResourceGroup",
		"westus",
		armdataprotection.CheckNameAvailabilityRequest{
			Name: to.Ptr("swaggerExample"),
			Type: to.Ptr("Microsoft.DataProtection/BackupVaults"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/CheckBackupVaultsNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.CheckNameAvailabilityResult{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/CheckBackupVaultsNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationResult_Get(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/GetOperationResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get OperationResult"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewOperationResultClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.Get(ctx,
		"MjkxOTMyODMtYTE3My00YzJjLTg5NjctN2E4MDIxNDA3NjA2OzdjNGE2ZWRjLWJjMmItNDRkYi1hYzMzLWY1YzEwNzk5Y2EyOA==",
		"WestUS",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/GetOperationResult.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.OperationJobExtendedInfo{
			ObjectType: to.Ptr("OperationJobExtendedInfo"),
			JobID:      to.Ptr("c60cb49-63e8-4b21-b9bd-26277b3fdfae"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationJobExtendedInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationJobExtendedInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/GetOperationResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationStatus_Get(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/GetOperationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get OperationStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewOperationStatusClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.Get(ctx,
		"WestUS",
		"MjkxOTMyODMtYTE3My00YzJjLTg5NjctN2E4MDIxNDA3NjA2OzdjNGE2ZWRjLWJjMmItNDRkYi1hYzMzLWY1YzEwNzk5Y2EyOA==",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/GetOperationStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.OperationResource{
			Name:      to.Ptr("MjkxOTMyODMtYTE3My00YzJjLTg5NjctN2E4MDIxNDA3NjA2OzdjNGE2ZWRjLWJjMmItNDRkYi1hYzMzLWY1YzEwNzk5Y2EyOA=="),
			EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-20T09:49:46Z"); return t }()),
			ID:        to.Ptr("/subscriptions/0b352192-dcac-4cc7-992e-a96190ccc68c/providers/Microsoft.DataProtection/locations/WestUS/operationStatus/MjkxOTMyODMtYTE3My00YzJjLTg5NjctN2E4MDIxNDA3NjA2OzdjNGE2ZWRjLWJjMmItNDRkYi1hYzMzLWY1YzEwNzk5Y2EyOA=="),
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-20T09:49:44.0478496Z"); return t }()),
			Status:    to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/GetOperationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupVaultOperationResults_Get(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetOperationResultPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetOperationResult Patch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupVaultOperationResultsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.Get(ctx,
		"swaggerExample",
		"SampleResourceGroup",
		"YWUzNDFkMzQtZmM5OS00MmUyLWEzNDMtZGJkMDIxZjlmZjgzOzdmYzBiMzhmLTc2NmItNDM5NS05OWQ1LTVmOGEzNzg4MWQzNA==",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetOperationResultPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.BackupVaultResource{
			Name: to.Ptr("swaggerExample"),
			Type: to.Ptr("Microsoft.DataProtection/Backupvaults"),
			ID:   to.Ptr("/subscriptions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/Backupvaults/swaggerExample"),
			Identity: &armdataprotection.DppIdentityDetails{
				Type: to.Ptr("None"),
			},
			Location: to.Ptr("WestUS"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			Properties: &armdataprotection.BackupVault{
				ProvisioningState: to.Ptr(armdataprotection.ProvisioningStateSucceeded),
				StorageSettings: []*armdataprotection.StorageSetting{
					{
						Type:          to.Ptr(armdataprotection.StorageSettingTypesLocallyRedundant),
						DatastoreType: to.Ptr(armdataprotection.StorageSettingStoreTypesVaultStore),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupVaultResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupVaultResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/VaultCRUD/GetOperationResultPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataProtection_CheckFeatureSupport(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/CheckfeatureSupport.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check Azure Vm Backup Feature Support"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.CheckFeatureSupport(ctx,
		"WestUS",
		&armdataprotection.FeatureValidationRequest{
			ObjectType:  to.Ptr("FeatureValidationRequest"),
			FeatureType: to.Ptr(armdataprotection.FeatureTypeDataSourceType),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/CheckfeatureSupport.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.ClientCheckFeatureSupportResponse{
			&armdataprotection.FeatureValidationResponse{
				ObjectType:  to.Ptr("FeatureValidationResponse"),
				FeatureType: to.Ptr(armdataprotection.FeatureTypeDataSourceType),
				Features: []*armdataprotection.SupportedFeature{
					{
						ExposureControlledFeatures: []*string{},
						FeatureName:                to.Ptr("Microsoft.Storage/storageAccounts/blobServices"),
						SupportStatus:              to.Ptr(armdataprotection.FeatureSupportStatusPrivatePreview),
					},
					{
						ExposureControlledFeatures: []*string{},
						FeatureName:                to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
						SupportStatus:              to.Ptr(armdataprotection.FeatureSupportStatusPublicPreview),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/CheckfeatureSupport.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataProtectionOperations_List(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/Operations/List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Returns the list of supported REST operations."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/Operations/List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.ClientDiscoveryResponse{
			Value: []*armdataprotection.ClientDiscoveryValueForSingleAPI{
				{
					Name: to.Ptr("Microsoft.DataProtection/locations/getBackupStatus/action"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Check Backup Status for Recovery Services Vaults"),
						Operation:   to.Ptr("Check Backup Status for Vault"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Status"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/write"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Creates a Backup Instance"),
						Operation:   to.Ptr("Create a Backup Instance"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Instance"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/delete"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Deletes the Backup Instance"),
						Operation:   to.Ptr("Delete Backup Instance"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Instance"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns details of the Backup Instance"),
						Operation:   to.Ptr("Get Backup Instance Details"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Instance"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns all Backup Instances"),
						Operation:   to.Ptr("Get Backup Instances"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Instance"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/backup/action"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Performs Backup on the Backup Instance"),
						Operation:   to.Ptr("Backup Backup Instance"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Instance"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/sync/action"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Sync operation retries last failed operation on backup instance to bring it to a valid state."),
						Operation:   to.Ptr("Sync Backup Instance"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Instance"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/stopProtection/action"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Stop Protection operation stops both backup and retention schedules of backup instance. Existing data will be retained forever."),
						Operation:   to.Ptr("Stop Protection of Backup Instance"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Instance"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/suspendBackups/action"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Suspend Backups operation stops only backups of backup instance. Retention activities will continue and hence data will be ratained as per policy."),
						Operation:   to.Ptr("Suspend Backups of Backup Instance"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Instance"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/resumeProtection/action"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Resume protection of a ProtectionStopped BI."),
						Operation:   to.Ptr("Resume Protection of Backup Instance"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Instance"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/resumeBackups/action"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Resume Backups for a BackupsSuspended BI."),
						Operation:   to.Ptr("Resume Backups of Backup Instance"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Instance"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/validateRestore/action"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Validates for Restore of the Backup Instance"),
						Operation:   to.Ptr("Validate for Restore of Backup Instance"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Instance"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/restore/action"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Triggers restore on the Backup Instance"),
						Operation:   to.Ptr("Restore Backup Instance"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Instance"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupPolicies/write"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Creates Backup Policy"),
						Operation:   to.Ptr("Create Backup Policy"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Policies"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupPolicies/delete"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Deletes the Backup Policy"),
						Operation:   to.Ptr("Delete Backup Policy"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Policies"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupPolicies/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns details of the Backup Policy"),
						Operation:   to.Ptr("Get Backup Policy details"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Policies"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupPolicies/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns all Backup Policies"),
						Operation:   to.Ptr("Get Backup Policies"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Policies"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/recoveryPoints/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns details of the Recovery Point"),
						Operation:   to.Ptr("Get Recovery Point Details"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Recovery Points"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/recoveryPoints/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns all Recovery Points"),
						Operation:   to.Ptr("Get Recovery Points"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Recovery Points"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/findRestorableTimeRanges/action"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Finds Restorable Time Ranges"),
						Operation:   to.Ptr("Find Restorable Time Ranges"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Restorable Time Ranges"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/write"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Create BackupVault operation creates an Azure resource of type 'Backup Vault'"),
						Operation:   to.Ptr("Create Backup Vault"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Create BackupVault operation creates an Azure resource of type 'Backup Vault'"),
						Operation:   to.Ptr("Create Backup Vault"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/delete"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Create BackupVault operation creates an Azure resource of type 'Backup Vault'"),
						Operation:   to.Ptr("Create Backup Vault"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/operationResults/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Gets Operation Result of a Patch Operation for a Backup Vault"),
						Operation:   to.Ptr("Get Operation Result of a Patch Operation for a Backup Vault"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/locations/checkNameAvailability/action"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Checks if the requested BackupVault Name is Available"),
						Operation:   to.Ptr("Check if the requested BackupVault Name is Available"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Gets list of Backup Vaults in a Resource Group"),
						Operation:   to.Ptr("Get Backup Vaults in a Resource Group"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Gets list of Backup Vaults in a Subscription"),
						Operation:   to.Ptr("Get Backup Vaults in a Subscription"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Vaults"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/subscriptions/resourceGroups/providers/resourceGuards/write"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Create ResourceGuard operation creates an Azure resource of type 'ResourceGuard'"),
						Operation:   to.Ptr("Create ResourceGuard"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Resource Guards"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/subscriptions/resourceGroups/providers/resourceGuards/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("The Get ResourceGuard operation gets an object representing the Azure resource of type 'ResourceGuard'"),
						Operation:   to.Ptr("Get ResourceGuard"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Resource Guards"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/subscriptions/resourceGroups/providers/resourceGuards/delete"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("The Delete ResourceGuard operation deletes the specified Azure resource of type 'ResourceGuard'"),
						Operation:   to.Ptr("Delete ResourceGuard"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Resource Guards"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/subscriptions/resourceGroups/providers/resourceGuards/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Gets list of ResourceGuards in a Resource Group"),
						Operation:   to.Ptr("Get ResourceGuards in a Resource Group"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Resource Guards"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/subscriptions/providers/resourceGuards/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Gets list of ResourceGuards in a Subscription"),
						Operation:   to.Ptr("Get ResourceGuards in a Subscription"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Resource Guards"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/subscriptions/resourceGroups/providers/resourceGuards/write"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Update ResouceGuard operation updates an Azure resource of type 'ResourceGuard'"),
						Operation:   to.Ptr("Update ResourceGuard"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Resource Guards"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/subscriptions/resourceGroups/providers/resourceGuards/{operationName}/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Gets ResourceGuard operation request info"),
						Operation:   to.Ptr("Get ResourceGuard operation request info"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Resource Guards"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/subscriptions/resourceGroups/providers/resourceGuards/{operationName}/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Gets ResourceGuard default operation request info"),
						Operation:   to.Ptr("Get ResourceGuard default operation request info"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Resource Guards"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/locations/operationStatus/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns Backup Operation Status for Backup Vault."),
						Operation:   to.Ptr("Get Backup Operation Status"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Operation Status"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/locations/operationResults/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Returns Backup Operation Result for Backup Vault."),
						Operation:   to.Ptr("Get Backup Operation Result"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Backup Operation Results"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/backupVaults/validateForBackup/action"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Validates for backup of Backup Instance"),
						Operation:   to.Ptr("Validate for backup of Backup Instance"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Validate Backup"),
					},
					Origin: to.Ptr("user"),
				},
				{
					Name: to.Ptr("Microsoft.DataProtection/providers/operations/read"),
					Display: &armdataprotection.ClientDiscoveryDisplay{
						Description: to.Ptr("Operation returns the list of Operations for a Resource Provider"),
						Operation:   to.Ptr("List of Operations"),
						Provider:    to.Ptr("Microsoft.DataProtection"),
						Resource:    to.Ptr("Resource Provider Operation"),
					},
					Origin: to.Ptr("user"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClientDiscoveryResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClientDiscoveryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/Operations/List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupPolicies_List(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/ListBackupPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List BackupPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupPoliciesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	pager := client.List("PrivatePreviewVault",
		"000pikumar",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/ListBackupPolicy.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.BaseBackupPolicyResourceList{
			Value: []*armdataprotection.BaseBackupPolicyResource{
				{
					Name: to.Ptr("OSSDBPolicy"),
					Type: to.Ptr("Microsoft.DataProtection/backupVaults/backupPolicies"),
					ID:   to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/000pikumar/providers/Microsoft.DataProtection/backupVaults/PrivatePreviewVault/backupPolicies/OSSDBPolicy"),
					Properties: &armdataprotection.BackupPolicy{
						DatasourceTypes: []*string{
							to.Ptr("OssDB")},
						ObjectType: to.Ptr("BackupPolicy"),
						PolicyRules: []armdataprotection.BasePolicyRuleClassification{
							&armdataprotection.AzureBackupRule{
								Name:       to.Ptr("BackupWeekly"),
								ObjectType: to.Ptr("AzureBackupRule"),
								BackupParameters: &armdataprotection.AzureBackupParams{
									ObjectType: to.Ptr("AzureBackupParams"),
									BackupType: to.Ptr("Full"),
								},
								DataStore: &armdataprotection.DataStoreInfoBase{
									DataStoreType: to.Ptr(armdataprotection.DataStoreTypesVaultStore),
									ObjectType:    to.Ptr("DataStoreInfoBase"),
								},
								Trigger: &armdataprotection.ScheduleBasedTriggerContext{
									ObjectType: to.Ptr("ScheduleBasedTriggerContext"),
									Schedule: &armdataprotection.BackupSchedule{
										RepeatingTimeIntervals: []*string{
											to.Ptr("R/2019-11-20T08:00:00-08:00/P1W")},
									},
									TaggingCriteria: []*armdataprotection.TaggingCriteria{
										{
											IsDefault: to.Ptr(true),
											TagInfo: &armdataprotection.RetentionTag{
												ID:      to.Ptr("Default_"),
												TagName: to.Ptr("Default"),
											},
											TaggingPriority: to.Ptr[int64](99),
										},
										{
											Criteria: []armdataprotection.BackupCriteriaClassification{
												&armdataprotection.ScheduleBasedBackupCriteria{
													ObjectType: to.Ptr("ScheduleBasedBackupCriteria"),
													DaysOfTheWeek: []*armdataprotection.DayOfWeek{
														to.Ptr(armdataprotection.DayOfWeekSunday)},
													ScheduleTimes: []*time.Time{
														to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }())},
												}},
											IsDefault: to.Ptr(false),
											TagInfo: &armdataprotection.RetentionTag{
												ID:      to.Ptr("Weekly_"),
												TagName: to.Ptr("Weekly"),
											},
											TaggingPriority: to.Ptr[int64](20),
										}},
								},
							},
							&armdataprotection.AzureRetentionRule{
								Name:       to.Ptr("Default"),
								ObjectType: to.Ptr("AzureRetentionRule"),
								IsDefault:  to.Ptr(true),
								Lifecycles: []*armdataprotection.SourceLifeCycle{
									{
										DeleteAfter: &armdataprotection.AbsoluteDeleteOption{
											Duration:   to.Ptr("P1W"),
											ObjectType: to.Ptr("AbsoluteDeleteOption"),
										},
										SourceDataStore: &armdataprotection.DataStoreInfoBase{
											DataStoreType: to.Ptr(armdataprotection.DataStoreTypesVaultStore),
											ObjectType:    to.Ptr("DataStoreInfoBase"),
										},
									}},
							},
							&armdataprotection.AzureRetentionRule{
								Name:       to.Ptr("Weekly"),
								ObjectType: to.Ptr("AzureRetentionRule"),
								IsDefault:  to.Ptr(false),
								Lifecycles: []*armdataprotection.SourceLifeCycle{
									{
										DeleteAfter: &armdataprotection.AbsoluteDeleteOption{
											Duration:   to.Ptr("P12W"),
											ObjectType: to.Ptr("AbsoluteDeleteOption"),
										},
										SourceDataStore: &armdataprotection.DataStoreInfoBase{
											DataStoreType: to.Ptr(armdataprotection.DataStoreTypesVaultStore),
											ObjectType:    to.Ptr("DataStoreInfoBase"),
										},
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BaseBackupPolicyResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BaseBackupPolicyResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/ListBackupPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupPolicies_Get(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/GetBackupPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get BackupPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupPoliciesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	res, err := client.Get(ctx,
		"PrivatePreviewVault",
		"000pikumar",
		"OSSDBPolicy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/GetBackupPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.BaseBackupPolicyResource{
			Name: to.Ptr("OSSDBPolicy"),
			Type: to.Ptr("Microsoft.DataProtection/backupVaults/backupPolicies"),
			ID:   to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/000pikumar/providers/Microsoft.DataProtection/backupVaults/PrivatePreviewVault/backupPolicies/OSSDBPolicy"),
			Properties: &armdataprotection.BackupPolicy{
				DatasourceTypes: []*string{
					to.Ptr("OssDB")},
				ObjectType: to.Ptr("BackupPolicy"),
				PolicyRules: []armdataprotection.BasePolicyRuleClassification{
					&armdataprotection.AzureBackupRule{
						Name:       to.Ptr("BackupWeekly"),
						ObjectType: to.Ptr("AzureBackupRule"),
						BackupParameters: &armdataprotection.AzureBackupParams{
							ObjectType: to.Ptr("AzureBackupParams"),
							BackupType: to.Ptr("Full"),
						},
						DataStore: &armdataprotection.DataStoreInfoBase{
							DataStoreType: to.Ptr(armdataprotection.DataStoreTypesVaultStore),
							ObjectType:    to.Ptr("DataStoreInfoBase"),
						},
						Trigger: &armdataprotection.ScheduleBasedTriggerContext{
							ObjectType: to.Ptr("ScheduleBasedTriggerContext"),
							Schedule: &armdataprotection.BackupSchedule{
								RepeatingTimeIntervals: []*string{
									to.Ptr("R/2019-11-20T08:00:00-08:00/P1W")},
							},
							TaggingCriteria: []*armdataprotection.TaggingCriteria{
								{
									IsDefault: to.Ptr(true),
									TagInfo: &armdataprotection.RetentionTag{
										ID:      to.Ptr("Default_"),
										TagName: to.Ptr("Default"),
									},
									TaggingPriority: to.Ptr[int64](99),
								},
								{
									Criteria: []armdataprotection.BackupCriteriaClassification{
										&armdataprotection.ScheduleBasedBackupCriteria{
											ObjectType: to.Ptr("ScheduleBasedBackupCriteria"),
											DaysOfTheWeek: []*armdataprotection.DayOfWeek{
												to.Ptr(armdataprotection.DayOfWeekSunday)},
											ScheduleTimes: []*time.Time{
												to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }())},
										}},
									IsDefault: to.Ptr(false),
									TagInfo: &armdataprotection.RetentionTag{
										ID:      to.Ptr("Weekly_"),
										TagName: to.Ptr("Weekly"),
									},
									TaggingPriority: to.Ptr[int64](20),
								}},
						},
					},
					&armdataprotection.AzureRetentionRule{
						Name:       to.Ptr("Default"),
						ObjectType: to.Ptr("AzureRetentionRule"),
						IsDefault:  to.Ptr(true),
						Lifecycles: []*armdataprotection.SourceLifeCycle{
							{
								DeleteAfter: &armdataprotection.AbsoluteDeleteOption{
									Duration:   to.Ptr("P1W"),
									ObjectType: to.Ptr("AbsoluteDeleteOption"),
								},
								SourceDataStore: &armdataprotection.DataStoreInfoBase{
									DataStoreType: to.Ptr(armdataprotection.DataStoreTypesVaultStore),
									ObjectType:    to.Ptr("DataStoreInfoBase"),
								},
							}},
					},
					&armdataprotection.AzureRetentionRule{
						Name:       to.Ptr("Weekly"),
						ObjectType: to.Ptr("AzureRetentionRule"),
						IsDefault:  to.Ptr(false),
						Lifecycles: []*armdataprotection.SourceLifeCycle{
							{
								DeleteAfter: &armdataprotection.AbsoluteDeleteOption{
									Duration:   to.Ptr("P12W"),
									ObjectType: to.Ptr("AbsoluteDeleteOption"),
								},
								SourceDataStore: &armdataprotection.DataStoreInfoBase{
									DataStoreType: to.Ptr(armdataprotection.DataStoreTypesVaultStore),
									ObjectType:    to.Ptr("DataStoreInfoBase"),
								},
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BaseBackupPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BaseBackupPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/GetBackupPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/CreateOrUpdateBackupPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdate BackupPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupPoliciesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"PrivatePreviewVault",
		"000pikumar",
		"OSSDBPolicy",
		armdataprotection.BaseBackupPolicyResource{
			Properties: &armdataprotection.BackupPolicy{
				DatasourceTypes: []*string{
					to.Ptr("OssDB")},
				ObjectType: to.Ptr("BackupPolicy"),
				PolicyRules: []armdataprotection.BasePolicyRuleClassification{
					&armdataprotection.AzureBackupRule{
						Name:       to.Ptr("BackupWeekly"),
						ObjectType: to.Ptr("AzureBackupRule"),
						BackupParameters: &armdataprotection.AzureBackupParams{
							ObjectType: to.Ptr("AzureBackupParams"),
							BackupType: to.Ptr("Full"),
						},
						DataStore: &armdataprotection.DataStoreInfoBase{
							DataStoreType: to.Ptr(armdataprotection.DataStoreTypesVaultStore),
							ObjectType:    to.Ptr("DataStoreInfoBase"),
						},
						Trigger: &armdataprotection.ScheduleBasedTriggerContext{
							ObjectType: to.Ptr("ScheduleBasedTriggerContext"),
							Schedule: &armdataprotection.BackupSchedule{
								RepeatingTimeIntervals: []*string{
									to.Ptr("R/2019-11-20T08:00:00-08:00/P1W")},
							},
							TaggingCriteria: []*armdataprotection.TaggingCriteria{
								{
									IsDefault: to.Ptr(true),
									TagInfo: &armdataprotection.RetentionTag{
										TagName: to.Ptr("Default"),
									},
									TaggingPriority: to.Ptr[int64](99),
								},
								{
									Criteria: []armdataprotection.BackupCriteriaClassification{
										&armdataprotection.ScheduleBasedBackupCriteria{
											ObjectType: to.Ptr("ScheduleBasedBackupCriteria"),
											DaysOfTheWeek: []*armdataprotection.DayOfWeek{
												to.Ptr(armdataprotection.DayOfWeekSunday)},
											ScheduleTimes: []*time.Time{
												to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }())},
										}},
									IsDefault: to.Ptr(false),
									TagInfo: &armdataprotection.RetentionTag{
										TagName: to.Ptr("Weekly"),
									},
									TaggingPriority: to.Ptr[int64](20),
								}},
						},
					},
					&armdataprotection.AzureRetentionRule{
						Name:       to.Ptr("Default"),
						ObjectType: to.Ptr("AzureRetentionRule"),
						IsDefault:  to.Ptr(true),
						Lifecycles: []*armdataprotection.SourceLifeCycle{
							{
								DeleteAfter: &armdataprotection.AbsoluteDeleteOption{
									Duration:   to.Ptr("P1W"),
									ObjectType: to.Ptr("AbsoluteDeleteOption"),
								},
								SourceDataStore: &armdataprotection.DataStoreInfoBase{
									DataStoreType: to.Ptr(armdataprotection.DataStoreTypesVaultStore),
									ObjectType:    to.Ptr("DataStoreInfoBase"),
								},
							}},
					},
					&armdataprotection.AzureRetentionRule{
						Name:       to.Ptr("Weekly"),
						ObjectType: to.Ptr("AzureRetentionRule"),
						IsDefault:  to.Ptr(false),
						Lifecycles: []*armdataprotection.SourceLifeCycle{
							{
								DeleteAfter: &armdataprotection.AbsoluteDeleteOption{
									Duration:   to.Ptr("P12W"),
									ObjectType: to.Ptr("AbsoluteDeleteOption"),
								},
								SourceDataStore: &armdataprotection.DataStoreInfoBase{
									DataStoreType: to.Ptr(armdataprotection.DataStoreTypesVaultStore),
									ObjectType:    to.Ptr("DataStoreInfoBase"),
								},
							}},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/CreateOrUpdateBackupPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.BaseBackupPolicyResource{
			Name: to.Ptr("OSSDBPolicy"),
			Type: to.Ptr("Microsoft.DataProtection/backupVaults/backupPolicies"),
			ID:   to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/000pikumar/providers/Microsoft.DataProtection/backupVaults/PrivatePreviewVault/backupPolicies/OSSDBPolicy"),
			Properties: &armdataprotection.BackupPolicy{
				DatasourceTypes: []*string{
					to.Ptr("OssDB")},
				ObjectType: to.Ptr("BackupPolicy"),
				PolicyRules: []armdataprotection.BasePolicyRuleClassification{
					&armdataprotection.AzureBackupRule{
						Name:       to.Ptr("BackupWeekly"),
						ObjectType: to.Ptr("AzureBackupRule"),
						BackupParameters: &armdataprotection.AzureBackupParams{
							ObjectType: to.Ptr("AzureBackupParams"),
							BackupType: to.Ptr("Full"),
						},
						DataStore: &armdataprotection.DataStoreInfoBase{
							DataStoreType: to.Ptr(armdataprotection.DataStoreTypesVaultStore),
							ObjectType:    to.Ptr("DataStoreInfoBase"),
						},
						Trigger: &armdataprotection.ScheduleBasedTriggerContext{
							ObjectType: to.Ptr("ScheduleBasedTriggerContext"),
							Schedule: &armdataprotection.BackupSchedule{
								RepeatingTimeIntervals: []*string{
									to.Ptr("R/2019-11-20T08:00:00-08:00/P1W")},
							},
							TaggingCriteria: []*armdataprotection.TaggingCriteria{
								{
									IsDefault: to.Ptr(true),
									TagInfo: &armdataprotection.RetentionTag{
										ID:      to.Ptr("Default_"),
										TagName: to.Ptr("Default"),
									},
									TaggingPriority: to.Ptr[int64](99),
								},
								{
									Criteria: []armdataprotection.BackupCriteriaClassification{
										&armdataprotection.ScheduleBasedBackupCriteria{
											ObjectType: to.Ptr("ScheduleBasedBackupCriteria"),
											DaysOfTheWeek: []*armdataprotection.DayOfWeek{
												to.Ptr(armdataprotection.DayOfWeekSunday)},
											ScheduleTimes: []*time.Time{
												to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }())},
										}},
									IsDefault: to.Ptr(false),
									TagInfo: &armdataprotection.RetentionTag{
										ID:      to.Ptr("Weekly_"),
										TagName: to.Ptr("Weekly"),
									},
									TaggingPriority: to.Ptr[int64](20),
								}},
						},
					},
					&armdataprotection.AzureRetentionRule{
						Name:       to.Ptr("Default"),
						ObjectType: to.Ptr("AzureRetentionRule"),
						IsDefault:  to.Ptr(true),
						Lifecycles: []*armdataprotection.SourceLifeCycle{
							{
								DeleteAfter: &armdataprotection.AbsoluteDeleteOption{
									Duration:   to.Ptr("P1W"),
									ObjectType: to.Ptr("AbsoluteDeleteOption"),
								},
								SourceDataStore: &armdataprotection.DataStoreInfoBase{
									DataStoreType: to.Ptr(armdataprotection.DataStoreTypesVaultStore),
									ObjectType:    to.Ptr("DataStoreInfoBase"),
								},
							}},
					},
					&armdataprotection.AzureRetentionRule{
						Name:       to.Ptr("Weekly"),
						ObjectType: to.Ptr("AzureRetentionRule"),
						IsDefault:  to.Ptr(false),
						Lifecycles: []*armdataprotection.SourceLifeCycle{
							{
								DeleteAfter: &armdataprotection.AbsoluteDeleteOption{
									Duration:   to.Ptr("P12W"),
									ObjectType: to.Ptr("AbsoluteDeleteOption"),
								},
								SourceDataStore: &armdataprotection.DataStoreInfoBase{
									DataStoreType: to.Ptr(armdataprotection.DataStoreTypesVaultStore),
									ObjectType:    to.Ptr("DataStoreInfoBase"),
								},
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BaseBackupPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BaseBackupPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/CreateOrUpdateBackupPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupPolicies_Delete(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/DeleteBackupPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete BackupPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupPoliciesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	_, err := client.Delete(ctx,
		"PrivatePreviewVault",
		"000pikumar",
		"OSSDBPolicy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/DeleteBackupPolicy.json: %v", err)
	}
}

func TestBackupInstances_List(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/ListBackupInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List BackupInstances in a Vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupInstancesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	pager := client.List("PratikPrivatePreviewVault1",
		"000pikumar",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/ListBackupInstances.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.BackupInstanceResourceList{
			Value: []*armdataprotection.BackupInstanceResource{
				{
					Name: to.Ptr("harshitbi2"),
					Type: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances"),
					ID:   to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/000pikumar/providers/Microsoft.DataProtection/backupVaults/PratikPrivatePreviewVault1/backupInstances/harshitbi2"),
					Properties: &armdataprotection.BackupInstance{
						DataSourceInfo: &armdataprotection.Datasource{
							DatasourceType:   to.Ptr("OssDB"),
							ObjectType:       to.Ptr("Datasource"),
							ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest/databases/testdb"),
							ResourceLocation: to.Ptr(""),
							ResourceName:     to.Ptr("testdb"),
							ResourceType:     to.Ptr("OssDB"),
							ResourceURI:      to.Ptr(""),
						},
						DataSourceSetInfo: &armdataprotection.DatasourceSet{
							DatasourceType:   to.Ptr("OssDB"),
							ObjectType:       to.Ptr("DatasourceSet"),
							ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest"),
							ResourceLocation: to.Ptr(""),
							ResourceName:     to.Ptr("viveksipgtest"),
							ResourceType:     to.Ptr("OssDB"),
							ResourceURI:      to.Ptr(""),
						},
						FriendlyName: to.Ptr("harshitbi2"),
						ObjectType:   to.Ptr("BackupInstance"),
						PolicyInfo: &armdataprotection.PolicyInfo{
							PolicyID:      to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/000pikumar/providers/Microsoft.DataProtection/backupVaults/PratikPrivatePreviewVault1/backupPolicies/PratikPolicy1"),
							PolicyVersion: to.Ptr("3.2"),
						},
						ProtectionStatus: &armdataprotection.ProtectionStatusDetails{
							Status: to.Ptr(armdataprotection.Status("NotProtected")),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BackupInstanceResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BackupInstanceResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/ListBackupInstances.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupInstances_Get(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/GetBackupInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get BackupInstance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupInstancesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	res, err := client.Get(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/GetBackupInstance.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.BackupInstanceResource{
			Name: to.Ptr("harshitbi2"),
			Type: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances"),
			ID:   to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/000pikumar/providers/Microsoft.DataProtection/backupVaults/PratikPrivatePreviewVault1/backupInstances/harshitbi2"),
			Properties: &armdataprotection.BackupInstance{
				DataSourceInfo: &armdataprotection.Datasource{
					DatasourceType:   to.Ptr("OssDB"),
					ObjectType:       to.Ptr("Datasource"),
					ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest/databases/testdb"),
					ResourceLocation: to.Ptr(""),
					ResourceName:     to.Ptr("testdb"),
					ResourceType:     to.Ptr("OssDB"),
					ResourceURI:      to.Ptr(""),
				},
				DataSourceSetInfo: &armdataprotection.DatasourceSet{
					DatasourceType:   to.Ptr("OssDB"),
					ObjectType:       to.Ptr("DatasourceSet"),
					ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest"),
					ResourceLocation: to.Ptr(""),
					ResourceName:     to.Ptr("viveksipgtest"),
					ResourceType:     to.Ptr("OssDB"),
					ResourceURI:      to.Ptr(""),
				},
				FriendlyName: to.Ptr("harshitbi2"),
				ObjectType:   to.Ptr("BackupInstance"),
				PolicyInfo: &armdataprotection.PolicyInfo{
					PolicyID:      to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/000pikumar/providers/Microsoft.DataProtection/backupVaults/PratikPrivatePreviewVault1/backupPolicies/PratikPolicy1"),
					PolicyVersion: to.Ptr("3.2"),
				},
				ProtectionStatus: &armdataprotection.ProtectionStatusDetails{
					Status: to.Ptr(armdataprotection.Status("NotProtected")),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupInstanceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupInstanceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/GetBackupInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupInstances_CreateOrUpdate(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/PutBackupInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create BackupInstance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupInstancesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		armdataprotection.BackupInstanceResource{
			Properties: &armdataprotection.BackupInstance{
				DataSourceInfo: &armdataprotection.Datasource{
					DatasourceType:   to.Ptr("OssDB"),
					ObjectType:       to.Ptr("Datasource"),
					ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest/databases/testdb"),
					ResourceLocation: to.Ptr(""),
					ResourceName:     to.Ptr("testdb"),
					ResourceType:     to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
					ResourceURI:      to.Ptr(""),
				},
				DataSourceSetInfo: &armdataprotection.DatasourceSet{
					DatasourceType:   to.Ptr("OssDB"),
					ObjectType:       to.Ptr("DatasourceSet"),
					ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest"),
					ResourceLocation: to.Ptr(""),
					ResourceName:     to.Ptr("viveksipgtest"),
					ResourceType:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ResourceURI:      to.Ptr(""),
				},
				DatasourceAuthCredentials: &armdataprotection.SecretStoreBasedAuthCredentials{
					ObjectType: to.Ptr("SecretStoreBasedAuthCredentials"),
					SecretStoreResource: &armdataprotection.SecretStoreResource{
						SecretStoreType: to.Ptr(armdataprotection.SecretStoreTypeAzureKeyVault),
						URI:             to.Ptr("https://samplevault.vault.azure.net/secrets/credentials"),
					},
				},
				FriendlyName: to.Ptr("harshitbi2"),
				ObjectType:   to.Ptr("BackupInstance"),
				PolicyInfo: &armdataprotection.PolicyInfo{
					PolicyID: to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/000pikumar/providers/Microsoft.DataProtection/Backupvaults/PratikPrivatePreviewVault1/backupPolicies/PratikPolicy1"),
					PolicyParameters: &armdataprotection.PolicyParameters{
						DataStoreParametersList: []armdataprotection.DataStoreParametersClassification{
							&armdataprotection.AzureOperationalStoreParameters{
								DataStoreType:   to.Ptr(armdataprotection.DataStoreTypesOperationalStore),
								ObjectType:      to.Ptr("AzureOperationalStoreParameters"),
								ResourceGroupID: to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest"),
							}},
					},
				},
			},
		},
		&armdataprotection.BackupInstancesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/PutBackupInstance.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/PutBackupInstance.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.BackupInstanceResource{
			Name: to.Ptr("harshitbi2"),
			Type: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances"),
			ID:   to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/000pikumar/providers/Microsoft.DataProtection/backupVaults/PratikPrivatePreviewVault1/backupInstances/harshitbi2"),
			Properties: &armdataprotection.BackupInstance{
				DataSourceInfo: &armdataprotection.Datasource{
					DatasourceType:   to.Ptr("OssDB"),
					ObjectType:       to.Ptr("Datasource"),
					ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest/databases/testdb"),
					ResourceLocation: to.Ptr(""),
					ResourceName:     to.Ptr("testdb"),
					ResourceType:     to.Ptr("OssDB"),
					ResourceURI:      to.Ptr(""),
				},
				DataSourceSetInfo: &armdataprotection.DatasourceSet{
					DatasourceType:   to.Ptr("OssDB"),
					ObjectType:       to.Ptr("DatasourceSet"),
					ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest"),
					ResourceLocation: to.Ptr(""),
					ResourceName:     to.Ptr("viveksipgtest"),
					ResourceType:     to.Ptr("OssDB"),
					ResourceURI:      to.Ptr(""),
				},
				FriendlyName: to.Ptr("harshitbi2"),
				ObjectType:   to.Ptr("BackupInstance"),
				PolicyInfo: &armdataprotection.PolicyInfo{
					PolicyID: to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/000pikumar/providers/Microsoft.DataProtection/backupVaults/PratikPrivatePreviewVault1/backupPolicies/PratikPolicy1"),
					PolicyParameters: &armdataprotection.PolicyParameters{
						DataStoreParametersList: []armdataprotection.DataStoreParametersClassification{
							&armdataprotection.AzureOperationalStoreParameters{
								DataStoreType:   to.Ptr(armdataprotection.DataStoreTypesOperationalStore),
								ObjectType:      to.Ptr("AzureOperationalStoreParameters"),
								ResourceGroupID: to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest"),
							}},
					},
					PolicyVersion: to.Ptr("3.2"),
				},
				ProtectionStatus: &armdataprotection.ProtectionStatusDetails{
					Status: to.Ptr(armdataprotection.Status("NotProtected")),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupInstanceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupInstanceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/PutBackupInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupInstances_Delete(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/DeleteBackupInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete BackupInstance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupInstancesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		&armdataprotection.BackupInstancesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/DeleteBackupInstance.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/DeleteBackupInstance.json: %v", err)
	}
}

func TestBackupInstances_AdhocBackup(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerBackup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Trigger Adhoc Backup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupInstancesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	poller, err := client.BeginAdhocBackup(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		armdataprotection.TriggerBackupRequest{
			BackupRuleOptions: &armdataprotection.AdHocBackupRuleOptions{
				RuleName: to.Ptr("BackupWeekly"),
				TriggerOption: &armdataprotection.AdhocBackupTriggerOption{
					RetentionTagOverride: to.Ptr("yearly"),
				},
			},
		},
		&armdataprotection.BackupInstancesClientBeginAdhocBackupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerBackup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerBackup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.OperationJobExtendedInfo{
			ObjectType: to.Ptr("OperationJobExtendedInfo"),
			JobID:      to.Ptr("c60cb49-63e8-4b21-b9bd-26277b3fdfae"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationJobExtendedInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationJobExtendedInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerBackup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupInstances_ValidateForBackup(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/ValidateForBackup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Validate For Backup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupInstancesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	poller, err := client.BeginValidateForBackup(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		armdataprotection.ValidateForBackupRequest{
			BackupInstance: &armdataprotection.BackupInstance{
				DataSourceInfo: &armdataprotection.Datasource{
					DatasourceType:   to.Ptr("OssDB"),
					ObjectType:       to.Ptr("Datasource"),
					ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest/databases/testdb"),
					ResourceLocation: to.Ptr(""),
					ResourceName:     to.Ptr("testdb"),
					ResourceType:     to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
					ResourceURI:      to.Ptr(""),
				},
				DataSourceSetInfo: &armdataprotection.DatasourceSet{
					DatasourceType:   to.Ptr("OssDB"),
					ObjectType:       to.Ptr("DatasourceSet"),
					ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest"),
					ResourceLocation: to.Ptr(""),
					ResourceName:     to.Ptr("viveksipgtest"),
					ResourceType:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ResourceURI:      to.Ptr(""),
				},
				DatasourceAuthCredentials: &armdataprotection.SecretStoreBasedAuthCredentials{
					ObjectType: to.Ptr("SecretStoreBasedAuthCredentials"),
					SecretStoreResource: &armdataprotection.SecretStoreResource{
						SecretStoreType: to.Ptr(armdataprotection.SecretStoreTypeAzureKeyVault),
						URI:             to.Ptr("https://samplevault.vault.azure.net/secrets/credentials"),
					},
				},
				FriendlyName: to.Ptr("harshitbi2"),
				ObjectType:   to.Ptr("BackupInstance"),
				PolicyInfo: &armdataprotection.PolicyInfo{
					PolicyID: to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/000pikumar/providers/Microsoft.DataProtection/Backupvaults/PratikPrivatePreviewVault1/backupPolicies/PratikPolicy1"),
				},
			},
		},
		&armdataprotection.BackupInstancesClientBeginValidateForBackupOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/ValidateForBackup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/ValidateForBackup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.OperationJobExtendedInfo{
			ObjectType: to.Ptr("OperationJobExtendedInfo"),
			JobID:      to.Ptr("c60cb49-63e8-4b21-b9bd-26277b3fdfae"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationJobExtendedInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationJobExtendedInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/ValidateForBackup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupInstances_TriggerRehydrate(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRehydrate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Trigger Rehydrate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupInstancesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	poller, err := client.BeginTriggerRehydrate(ctx,
		"000pikumar",
		"PratikPrivatePreviewVault1",
		"testInstance1",
		armdataprotection.AzureBackupRehydrationRequest{
			RecoveryPointID:              to.Ptr("hardcodedRP"),
			RehydrationPriority:          to.Ptr(armdataprotection.RehydrationPriorityHigh),
			RehydrationRetentionDuration: to.Ptr("7D"),
		},
		&armdataprotection.BackupInstancesClientBeginTriggerRehydrateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRehydrate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRehydrate.json: %v", err)
	}
}

func TestBackupInstances_TriggerRestore(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRestore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Trigger Restore"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupInstancesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	poller, err := client.BeginTriggerRestore(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		&armdataprotection.AzureBackupRecoveryPointBasedRestoreRequest{
			ObjectType: to.Ptr("AzureBackupRecoveryPointBasedRestoreRequest"),
			RestoreTargetInfo: &armdataprotection.RestoreTargetInfo{
				ObjectType:      to.Ptr("RestoreTargetInfo"),
				RecoveryOption:  to.Ptr(armdataprotection.RecoveryOptionFailIfExists),
				RestoreLocation: to.Ptr("southeastasia"),
				DatasourceAuthCredentials: &armdataprotection.SecretStoreBasedAuthCredentials{
					ObjectType: to.Ptr("SecretStoreBasedAuthCredentials"),
					SecretStoreResource: &armdataprotection.SecretStoreResource{
						SecretStoreType: to.Ptr(armdataprotection.SecretStoreTypeAzureKeyVault),
						URI:             to.Ptr("https://samplevault.vault.azure.net/secrets/credentials"),
					},
				},
				DatasourceInfo: &armdataprotection.Datasource{
					DatasourceType:   to.Ptr("OssDB"),
					ObjectType:       to.Ptr("Datasource"),
					ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest/databases/testdb"),
					ResourceLocation: to.Ptr(""),
					ResourceName:     to.Ptr("testdb"),
					ResourceType:     to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
					ResourceURI:      to.Ptr(""),
				},
				DatasourceSetInfo: &armdataprotection.DatasourceSet{
					DatasourceType:   to.Ptr("OssDB"),
					ObjectType:       to.Ptr("DatasourceSet"),
					ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest"),
					ResourceLocation: to.Ptr(""),
					ResourceName:     to.Ptr("viveksipgtest"),
					ResourceType:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ResourceURI:      to.Ptr(""),
				},
			},
			SourceDataStoreType: to.Ptr(armdataprotection.SourceDataStoreTypeVaultStore),
			RecoveryPointID:     to.Ptr("hardcodedRP"),
		},
		&armdataprotection.BackupInstancesClientBeginTriggerRestoreOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRestore.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRestore.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.OperationJobExtendedInfo{
			ObjectType: to.Ptr("OperationJobExtendedInfo"),
			JobID:      to.Ptr("c60cb49-63e8-4b21-b9bd-26277b3fdfae"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationJobExtendedInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationJobExtendedInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRestore.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRestoreAsFiles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Trigger Restore As Files"},
	})
	client = armdataprotection.NewBackupInstancesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	poller, err = client.BeginTriggerRestore(ctx,
		"PrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		&armdataprotection.AzureBackupRecoveryPointBasedRestoreRequest{
			ObjectType: to.Ptr("AzureBackupRecoveryPointBasedRestoreRequest"),
			RestoreTargetInfo: &armdataprotection.RestoreFilesTargetInfo{
				ObjectType:      to.Ptr("RestoreFilesTargetInfo"),
				RecoveryOption:  to.Ptr(armdataprotection.RecoveryOptionFailIfExists),
				RestoreLocation: to.Ptr("southeastasia"),
				TargetDetails: &armdataprotection.TargetDetails{
					FilePrefix:                to.Ptr("restoredblob"),
					RestoreTargetLocationType: to.Ptr(armdataprotection.RestoreTargetLocationTypeAzureBlobs),
					URL:                       to.Ptr("https://teststorage.blob.core.windows.net/restoretest"),
				},
			},
			SourceDataStoreType: to.Ptr(armdataprotection.SourceDataStoreTypeVaultStore),
			RecoveryPointID:     to.Ptr("hardcodedRP"),
		},
		&armdataprotection.BackupInstancesClientBeginTriggerRestoreOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRestoreAsFiles.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRestoreAsFiles.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.OperationJobExtendedInfo{
			ObjectType: to.Ptr("OperationJobExtendedInfo"),
			JobID:      to.Ptr("c60cb49-63e8-4b21-b9bd-26277b3fdfae"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationJobExtendedInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationJobExtendedInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRestoreAsFiles.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRestoreWithRehydration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Trigger Restore With Rehydration"},
	})
	client = armdataprotection.NewBackupInstancesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	poller, err = client.BeginTriggerRestore(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		&armdataprotection.AzureBackupRestoreWithRehydrationRequest{
			ObjectType: to.Ptr("AzureBackupRestoreWithRehydrationRequest"),
			RestoreTargetInfo: &armdataprotection.RestoreTargetInfo{
				ObjectType:      to.Ptr("RestoreTargetInfo"),
				RecoveryOption:  to.Ptr(armdataprotection.RecoveryOptionFailIfExists),
				RestoreLocation: to.Ptr("southeastasia"),
				DatasourceInfo: &armdataprotection.Datasource{
					DatasourceType:   to.Ptr("OssDB"),
					ObjectType:       to.Ptr("Datasource"),
					ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest/databases/testdb"),
					ResourceLocation: to.Ptr(""),
					ResourceName:     to.Ptr("testdb"),
					ResourceType:     to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
					ResourceURI:      to.Ptr(""),
				},
				DatasourceSetInfo: &armdataprotection.DatasourceSet{
					DatasourceType:   to.Ptr("OssDB"),
					ObjectType:       to.Ptr("DatasourceSet"),
					ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest"),
					ResourceLocation: to.Ptr(""),
					ResourceName:     to.Ptr("viveksipgtest"),
					ResourceType:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ResourceURI:      to.Ptr(""),
				},
			},
			SourceDataStoreType:          to.Ptr(armdataprotection.SourceDataStoreTypeVaultStore),
			RecoveryPointID:              to.Ptr("hardcodedRP"),
			RehydrationPriority:          to.Ptr(armdataprotection.RehydrationPriorityHigh),
			RehydrationRetentionDuration: to.Ptr("7D"),
		},
		&armdataprotection.BackupInstancesClientBeginTriggerRestoreOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRestoreWithRehydration.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRestoreWithRehydration.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.OperationJobExtendedInfo{
			ObjectType: to.Ptr("OperationJobExtendedInfo"),
			JobID:      to.Ptr("c60cb49-63e8-4b21-b9bd-26277b3fdfae"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationJobExtendedInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationJobExtendedInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/TriggerRestoreWithRehydration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBackupInstances_ValidateForRestore(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/ValidateRestore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Validate Restore"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewBackupInstancesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	poller, err := client.BeginValidateForRestore(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		armdataprotection.ValidateRestoreRequestObject{
			RestoreRequestObject: &armdataprotection.AzureBackupRecoveryPointBasedRestoreRequest{
				ObjectType: to.Ptr("AzureBackupRecoveryPointBasedRestoreRequest"),
				RestoreTargetInfo: &armdataprotection.RestoreTargetInfo{
					ObjectType:      to.Ptr("RestoreTargetInfo"),
					RecoveryOption:  to.Ptr(armdataprotection.RecoveryOptionFailIfExists),
					RestoreLocation: to.Ptr("southeastasia"),
					DatasourceAuthCredentials: &armdataprotection.SecretStoreBasedAuthCredentials{
						ObjectType: to.Ptr("SecretStoreBasedAuthCredentials"),
						SecretStoreResource: &armdataprotection.SecretStoreResource{
							SecretStoreType: to.Ptr(armdataprotection.SecretStoreTypeAzureKeyVault),
							URI:             to.Ptr("https://samplevault.vault.azure.net/secrets/credentials"),
						},
					},
					DatasourceInfo: &armdataprotection.Datasource{
						DatasourceType:   to.Ptr("OssDB"),
						ObjectType:       to.Ptr("Datasource"),
						ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest/databases/testdb"),
						ResourceLocation: to.Ptr(""),
						ResourceName:     to.Ptr("testdb"),
						ResourceType:     to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
						ResourceURI:      to.Ptr(""),
					},
					DatasourceSetInfo: &armdataprotection.DatasourceSet{
						DatasourceType:   to.Ptr("OssDB"),
						ObjectType:       to.Ptr("DatasourceSet"),
						ResourceID:       to.Ptr("/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest"),
						ResourceLocation: to.Ptr(""),
						ResourceName:     to.Ptr("viveksipgtest"),
						ResourceType:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
						ResourceURI:      to.Ptr(""),
					},
				},
				SourceDataStoreType: to.Ptr(armdataprotection.SourceDataStoreTypeVaultStore),
				RecoveryPointID:     to.Ptr("hardcodedRP"),
			},
		},
		&armdataprotection.BackupInstancesClientBeginValidateForRestoreOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/ValidateRestore.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/ValidateRestore.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.OperationJobExtendedInfo{
			ObjectType: to.Ptr("OperationJobExtendedInfo"),
			JobID:      to.Ptr("c60cb49-63e8-4b21-b9bd-26277b3fdfae"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationJobExtendedInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationJobExtendedInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/ValidateRestore.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoveryPoints_List(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/ListRecoveryPoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Recovery Points in a Vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewRecoveryPointsClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	pager := client.List("PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		&armdataprotection.RecoveryPointsClientListOptions{Filter: nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/ListRecoveryPoints.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.AzureBackupRecoveryPointResourceList{
			Value: []*armdataprotection.AzureBackupRecoveryPointResource{
				{
					Name: to.Ptr("7fb2cddd-c5b3-44f6-a0d9-db3c4f9d5e35"),
					Type: to.Ptr("microsoft.dataprotection/backupvaults/backupInstances/recoveryPoints"),
					ID:   to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/HelloTest/providers/Microsoft.DataProtection/backupVaults/HelloTestVault/backupInstances/653213d-c5b3-44f6-a0d9-db3c4f9d8e34/recoveryPoints/7fb2cddd-c5b3-44f6-a0d9-db3c4f9d5f25"),
					Properties: &armdataprotection.AzureBackupDiscreteRecoveryPoint{
						ObjectType:   to.Ptr("AzureBackupDiscreteRecoveryPoint"),
						FriendlyName: to.Ptr("panbha4"),
						RecoveryPointDataStoresDetails: []*armdataprotection.RecoveryPointDataStoreDetails{
							{
								Type:         to.Ptr("Snapshot"),
								CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }()),
								ID:           to.Ptr("0ff03512-b333-4509-a6c7-12164c8b1dce"),
								MetaData:     to.Ptr("123456"),
							},
							{
								Type:         to.Ptr("BackupStorage"),
								CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }()),
								ID:           to.Ptr("5d8cfd30-722e-4bab-85f6-4a9d01ffc6f1"),
								MetaData:     to.Ptr("123456"),
							}},
						RecoveryPointTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }()),
						RecoveryPointType: to.Ptr("Full"),
					},
				},
				{
					Name: to.Ptr("7fb2cddd-c5b3-44f6-a0d9-db3c4f9d5f25"),
					Type: to.Ptr("microsoft.dataprotection/backupvaults/backupInstances/recoveryPoints"),
					ID:   to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/HelloTest/providers/Microsoft.DataProtection/backupVaults/HelloTestVault/backupInstances/653213d-c5b3-44f6-a0d9-db3c4f9d8e34/recoveryPoints/7fb2cddd-c5b3-44f6-a0d9-db3c4f9d5f25"),
					Properties: &armdataprotection.AzureBackupDiscreteRecoveryPoint{
						ObjectType:   to.Ptr("AzureBackupDiscreteRecoveryPoint"),
						FriendlyName: to.Ptr("panbha4"),
						RecoveryPointDataStoresDetails: []*armdataprotection.RecoveryPointDataStoreDetails{
							{
								Type:         to.Ptr("Snapshot"),
								CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }()),
								ID:           to.Ptr("808cfd30-722e-4bab-85f6-4a9d01ffc6f2"),
								MetaData:     to.Ptr("123456"),
							},
							{
								Type:         to.Ptr("BackupStorage"),
								CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }()),
								ID:           to.Ptr("798cfd30-722e-4bab-85f6-4a9d01ffc6f3"),
								MetaData:     to.Ptr("123456"),
							}},
						RecoveryPointTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }()),
						RecoveryPointType: to.Ptr("Full"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AzureBackupRecoveryPointResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AzureBackupRecoveryPointResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/ListRecoveryPoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoveryPoints_Get(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/GetRecoveryPoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Recovery Point"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewRecoveryPointsClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	res, err := client.Get(ctx,
		"PratikPrivatePreviewVault1",
		"000pikumar",
		"testInstance1",
		"7fb2cddd-c5b3-44f6-a0d9-db3c4f9d5f25",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/GetRecoveryPoint.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.AzureBackupRecoveryPointResource{
			Name: to.Ptr("7fb2cddd-c5b3-44f6-a0d9-db3c4f9d5f25"),
			Type: to.Ptr("microsoft.dataprotection/backupvaults/backupInstances/recoveryPoints"),
			ID:   to.Ptr("/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/HelloTest/providers/Microsoft.DataProtection/backupVaults/HelloTestVault/backupInstances/653213d-c5b3-44f6-a0d9-db3c4f9d8e34/recoveryPoints/7fb2cddd-c5b3-44f6-a0d9-db3c4f9d5f25"),
			Properties: &armdataprotection.AzureBackupDiscreteRecoveryPoint{
				ObjectType:   to.Ptr("AzureBackupDiscreteRecoveryPoint"),
				FriendlyName: to.Ptr("panbha4"),
				RecoveryPointDataStoresDetails: []*armdataprotection.RecoveryPointDataStoreDetails{
					{
						Type:         to.Ptr("Snapshot"),
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }()),
						ID:           to.Ptr("0ff03512-b333-4509-a6c7-12164c8b1dce"),
						MetaData:     to.Ptr("123456"),
					},
					{
						Type:         to.Ptr("BackupStorage"),
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }()),
						ID:           to.Ptr("5d8cfd30-722e-4bab-85f6-4a9d01ffc6f1"),
						MetaData:     to.Ptr("123456"),
					}},
				RecoveryPointTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }()),
				RecoveryPointType: to.Ptr("Full"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureBackupRecoveryPointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureBackupRecoveryPointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/GetRecoveryPoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_List(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/JobCRUD/ListJobs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Jobs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewJobsClient("62b829ee-7936-40c9-a1c9-47a93f9f3965", cred, &options)
	pager := client.List("BugBash1",
		"BugBashVaultForCCYv11",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/JobCRUD/ListJobs.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.AzureBackupJobResourceList{
			Value: []*armdataprotection.AzureBackupJobResource{
				{
					Name: to.Ptr("8989416e-7573-4836-8cf1-0e90954f1002"),
					Type: to.Ptr("Microsoft.DataProtection/Backupvaults/backupJobs"),
					ID:   to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/Backupvaults/BugBashVaultForCCYv11/backupJobs/8989416e-7573-4836-8cf1-0e90954f1002"),
					Properties: &armdataprotection.AzureBackupJob{
						ActivityID:                 to.Ptr("932925c4-3d81-4550-8105-c7f7b0a934c5"),
						BackupInstanceFriendlyName: to.Ptr("mabtestingccybasicv11\\bugbashdb4"),
						BackupInstanceID:           to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/backupVaults/BugBashVaultForCCYv11/backupInstances/3048870f-b1b7-44c4-b078-368da3fd000e"),
						DataSourceID:               to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/DppPostgresTestingCcy/providers/Microsoft.DBforPostgreSQL/servers/mabtestingccybasicv11/databases/bugbashdb4"),
						DataSourceLocation:         to.Ptr("centraluseuap"),
						DataSourceName:             to.Ptr("bugbashdb4"),
						DataSourceSetName:          to.Ptr("mabtestingccybasicv11"),
						DataSourceType:             to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
						Duration:                   to.Ptr("00:00:00"),
						IsUserTriggered:            to.Ptr(false),
						Operation:                  to.Ptr("Backup"),
						OperationCategory:          to.Ptr("Backup"),
						PolicyID:                   to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/backupVaults/BugBashVaultForCCYv11/backupPolicies/jakavetPolicy2"),
						PolicyName:                 to.Ptr("jakavetPolicy2"),
						ProgressEnabled:            to.Ptr(false),
						SourceResourceGroup:        to.Ptr("DppPostgresTestingCcy"),
						SourceSubscriptionID:       to.Ptr("62b829ee-7936-40c9-a1c9-47a93f9f3965"),
						StartTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-16T05:00:08.1746833Z"); return t }()),
						Status:                     to.Ptr("Started"),
						SubscriptionID:             to.Ptr("62b829ee-7936-40c9-a1c9-47a93f9f3965"),
						SupportedActions:           []*string{},
						VaultName:                  to.Ptr("BugBashVaultForCCYv11"),
					},
				},
				{
					Name: to.Ptr("ad218c05-242a-47c2-b7b7-c16bd0f8870c"),
					Type: to.Ptr("Microsoft.DataProtection/Backupvaults/backupJobs"),
					ID:   to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/Backupvaults/BugBashVaultForCCYv11/backupJobs/ad218c05-242a-47c2-b7b7-c16bd0f8870c"),
					Properties: &armdataprotection.AzureBackupJob{
						ActivityID:                 to.Ptr("b4f32e03-ded0-46fc-9afc-91853878efcd"),
						BackupInstanceFriendlyName: to.Ptr("mabtestingccybasicv11\\bugbashdb5"),
						BackupInstanceID:           to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/backupVaults/BugBashVaultForCCYv11/backupInstances/943c60db-c033-4d93-bb00-66048474e00e"),
						DataSourceID:               to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/DppPostgresTestingCcy/providers/Microsoft.DBforPostgreSQL/servers/mabtestingccybasicv11/databases/bugbashdb5"),
						DataSourceLocation:         to.Ptr("centraluseuap"),
						DataSourceName:             to.Ptr("bugbashdb5"),
						DataSourceSetName:          to.Ptr("mabtestingccybasicv11"),
						DataSourceType:             to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
						Duration:                   to.Ptr("00:00:00"),
						IsUserTriggered:            to.Ptr(false),
						Operation:                  to.Ptr("Backup"),
						OperationCategory:          to.Ptr("Backup"),
						PolicyID:                   to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/backupVaults/BugBashVaultForCCYv11/backupPolicies/jakavetPolicy3"),
						PolicyName:                 to.Ptr("jakavetPolicy3"),
						ProgressEnabled:            to.Ptr(false),
						SourceResourceGroup:        to.Ptr("DppPostgresTestingCcy"),
						SourceSubscriptionID:       to.Ptr("62b829ee-7936-40c9-a1c9-47a93f9f3965"),
						StartTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-16T18:00:03.6660733Z"); return t }()),
						Status:                     to.Ptr("Started"),
						SubscriptionID:             to.Ptr("62b829ee-7936-40c9-a1c9-47a93f9f3965"),
						SupportedActions:           []*string{},
						VaultName:                  to.Ptr("BugBashVaultForCCYv11"),
					},
				},
				{
					Name: to.Ptr("3c60cb49-63e8-4b21-b9bd-26277b3fdfae"),
					Type: to.Ptr("Microsoft.DataProtection/Backupvaults/backupJobs"),
					ID:   to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/Backupvaults/BugBashVaultForCCYv11/backupJobs/3c60cb49-63e8-4b21-b9bd-26277b3fdfae"),
					Properties: &armdataprotection.AzureBackupJob{
						ActivityID:                 to.Ptr("c4344fb4-7c11-43a4-8307-7ae7c7fb09b9"),
						BackupInstanceFriendlyName: to.Ptr("mabtestingccybasicv11\\bugbashdb2"),
						BackupInstanceID:           to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/backupVaults/BugBashVaultForCCYv11/backupInstances/28460a9d-707a-45f3-ace6-b16284c2900e"),
						DataSourceID:               to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/DppPostgresTestingCcy/providers/Microsoft.DBforPostgreSQL/servers/mabtestingccybasicv11/databases/bugbashdb2"),
						DataSourceLocation:         to.Ptr("centraluseuap"),
						DataSourceName:             to.Ptr("bugbashdb2"),
						DataSourceSetName:          to.Ptr("mabtestingccybasicv11"),
						DataSourceType:             to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
						Duration:                   to.Ptr("00:00:00"),
						IsUserTriggered:            to.Ptr(false),
						Operation:                  to.Ptr("Backup"),
						OperationCategory:          to.Ptr("Backup"),
						PolicyID:                   to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/backupVaults/BugBashVaultForCCYv11/backupPolicies/jakavetdailypolicy"),
						PolicyName:                 to.Ptr("jakavetdailypolicy"),
						ProgressEnabled:            to.Ptr(false),
						SourceResourceGroup:        to.Ptr("DppPostgresTestingCcy"),
						SourceSubscriptionID:       to.Ptr("62b829ee-7936-40c9-a1c9-47a93f9f3965"),
						StartTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-17T03:00:03.7604146Z"); return t }()),
						Status:                     to.Ptr("Started"),
						SubscriptionID:             to.Ptr("62b829ee-7936-40c9-a1c9-47a93f9f3965"),
						SupportedActions:           []*string{},
						VaultName:                  to.Ptr("BugBashVaultForCCYv11"),
					},
				},
				{
					Name: to.Ptr("43252662-1b43-44fd-a856-0055665cb097"),
					Type: to.Ptr("Microsoft.DataProtection/Backupvaults/backupJobs"),
					ID:   to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/Backupvaults/BugBashVaultForCCYv11/backupJobs/43252662-1b43-44fd-a856-0055665cb097"),
					Properties: &armdataprotection.AzureBackupJob{
						ActivityID:                 to.Ptr("94052cf1-a47f-4c1b-93e7-79e07b2bd008-Tue Mar 17 2021 11:11:48 GMT+0530 (India Standard Time)-Ibz"),
						BackupInstanceFriendlyName: to.Ptr("mabtestingccybasicv11\\bugbashdb3"),
						BackupInstanceID:           to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/backupVaults/BugBashVaultForCCYv11/backupInstances/0b247869-b8be-4885-b832-8ac4cdf5b00e"),
						DataSourceID:               to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/DppPostgresTestingCcy/providers/Microsoft.DBforPostgreSQL/servers/mabtestingccybasicv11/databases/bugbashdb3"),
						DataSourceLocation:         to.Ptr("centraluseuap"),
						DataSourceName:             to.Ptr("bugbashdb3"),
						DataSourceSetName:          to.Ptr("mabtestingccybasicv11"),
						DataSourceType:             to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
						Duration:                   to.Ptr("00:02:11.9724387"),
						EndTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-17T11:14:02.5319646Z"); return t }()),
						IsUserTriggered:            to.Ptr(true),
						Operation:                  to.Ptr("Backup"),
						OperationCategory:          to.Ptr("Backup"),
						PolicyID:                   to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/backupVaults/BugBashVaultForCCYv11/backupPolicies/jakavetPolicy1"),
						PolicyName:                 to.Ptr("jakavetPolicy1"),
						ProgressEnabled:            to.Ptr(false),
						SourceResourceGroup:        to.Ptr("DppPostgresTestingCcy"),
						SourceSubscriptionID:       to.Ptr("62b829ee-7936-40c9-a1c9-47a93f9f3965"),
						StartTime:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-17T11:11:50.5595259Z"); return t }()),
						Status:                     to.Ptr("Succeeded"),
						SubscriptionID:             to.Ptr("62b829ee-7936-40c9-a1c9-47a93f9f3965"),
						SupportedActions: []*string{
							to.Ptr("")},
						VaultName: to.Ptr("BugBashVaultForCCYv11"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AzureBackupJobResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AzureBackupJobResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/JobCRUD/ListJobs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJobs_Get(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/JobCRUD/GetJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewJobsClient("62b829ee-7936-40c9-a1c9-47a93f9f3965", cred, &options)
	res, err := client.Get(ctx,
		"BugBash1",
		"BugBashVaultForCCYv11",
		"3c60cb49-63e8-4b21-b9bd-26277b3fdfae",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/JobCRUD/GetJob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.AzureBackupJobResource{
			Name: to.Ptr("3c60cb49-63e8-4b21-b9bd-26277b3fdfae"),
			Type: to.Ptr("Microsoft.DataProtection/Backupvaults/backupJobs"),
			ID:   to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/Backupvaults/BugBashVaultForCCYv11/backupJobs/3c60cb49-63e8-4b21-b9bd-26277b3fdfae"),
			Properties: &armdataprotection.AzureBackupJob{
				ActivityID:                 to.Ptr("c4344fb4-7c11-43a4-8307-7ae7c7fb09b9"),
				BackupInstanceFriendlyName: to.Ptr("mabtestingccybasicv11\\bugbashdb2"),
				BackupInstanceID:           to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/backupVaults/BugBashVaultForCCYv11/backupInstances/28460a9d-707a-45f3-ace6-b16284c2900e"),
				DataSourceID:               to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/DppPostgresTestingCcy/providers/Microsoft.DBforPostgreSQL/servers/mabtestingccybasicv11/databases/bugbashdb2"),
				DataSourceLocation:         to.Ptr("centraluseuap"),
				DataSourceName:             to.Ptr("bugbashdb2"),
				DataSourceSetName:          to.Ptr("mabtestingccybasicv11"),
				DataSourceType:             to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
				Duration:                   to.Ptr("00:00:00"),
				ExtendedInfo: &armdataprotection.JobExtendedInfo{
					AdditionalDetails: map[string]*string{
						"PolicyRuleName": to.Ptr("BackupWeekly"),
						"RetentionTag":   to.Ptr("Default"),
						"TaskId":         to.Ptr("c4344fb4-7c11-43a4-8307-7ae7c7fb09b9"),
					},
					SubTasks: []*armdataprotection.JobSubTask{
						{
							TaskID:     to.Ptr[int32](1),
							TaskName:   to.Ptr("Trigger Backup"),
							TaskStatus: to.Ptr("Started"),
						}},
				},
				IsUserTriggered:      to.Ptr(false),
				Operation:            to.Ptr("Backup"),
				OperationCategory:    to.Ptr("Backup"),
				PolicyID:             to.Ptr("/subscriptions/62b829ee-7936-40c9-a1c9-47a93f9f3965/resourceGroups/BugBash1/providers/Microsoft.DataProtection/backupVaults/BugBashVaultForCCYv11/backupPolicies/jakavetdailypolicy"),
				PolicyName:           to.Ptr("jakavetdailypolicy"),
				ProgressEnabled:      to.Ptr(false),
				SourceResourceGroup:  to.Ptr("DppPostgresTestingCcy"),
				SourceSubscriptionID: to.Ptr("62b829ee-7936-40c9-a1c9-47a93f9f3965"),
				StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-17T03:00:03.7604146Z"); return t }()),
				Status:               to.Ptr("Started"),
				SubscriptionID:       to.Ptr("62b829ee-7936-40c9-a1c9-47a93f9f3965"),
				SupportedActions:     []*string{},
				VaultName:            to.Ptr("BugBashVaultForCCYv11"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureBackupJobResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureBackupJobResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/JobCRUD/GetJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableTimeRanges_Find(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/FindRestorableTimeRanges.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Find Restorable Time Ranges"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewRestorableTimeRangesClient("04cf684a-d41f-4550-9f70-7708a3a2283b", cred, &options)
	res, err := client.Find(ctx,
		"ZBlobBackupVaultBVTD3",
		"Blob-Backup",
		"zblobbackuptestsa58",
		armdataprotection.AzureBackupFindRestorableTimeRangesRequest{
			EndTime:             to.Ptr("2021-02-24T00:35:17.6829685Z"),
			SourceDataStoreType: to.Ptr(armdataprotection.RestoreSourceDataStoreTypeOperationalStore),
			StartTime:           to.Ptr("2020-10-17T23:28:17.6829685Z"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/FindRestorableTimeRanges.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.AzureBackupFindRestorableTimeRangesResponseResource{
			Type: to.Ptr("Microsoft.DataProtection/backupVaults/backupInstances/findRestorableTimeRanges"),
			ID:   to.Ptr("zblobbackuptestsa58"),
			Properties: &armdataprotection.AzureBackupFindRestorableTimeRangesResponse{
				ObjectType: to.Ptr("AzureBackupFindRestorableTimeRangesResponse"),
				RestorableTimeRanges: []*armdataprotection.RestorableTimeRange{
					{
						EndTime:    to.Ptr("2021-02-24T00:35:17.0000000Z"),
						ObjectType: to.Ptr("RestorableTimeRange"),
						StartTime:  to.Ptr("2021-02-23T18:33:51.6349708Z"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureBackupFindRestorableTimeRangesResponseResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureBackupFindRestorableTimeRangesResponseResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/BackupInstanceOperations/FindRestorableTimeRanges.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExportJobs_Trigger(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/JobCRUD/TriggerExportJobs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Trigger Export Jobs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewExportJobsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginTrigger(ctx,
		"SwaggerTestRg",
		"NetSDKTestRsVault",
		&armdataprotection.ExportJobsClientBeginTriggerOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/JobCRUD/TriggerExportJobs.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/JobCRUD/TriggerExportJobs.json: %v", err)
	}
}

func TestExportJobsOperationResult_Get(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/JobCRUD/GetExportJobsOperationResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Export Jobs Operation Result"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewExportJobsOperationResultClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"SwaggerTestRg",
		"NetSDKTestRsVault",
		"00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/JobCRUD/GetExportJobsOperationResult.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.ExportJobsResult{
			BlobSasKey:          to.Ptr("someKey"),
			BlobURL:             to.Ptr("https://azureblob.blob.core.windows.net/reportcontainer/exportjobsreport00000000-0000-0000-0000-000000000000"),
			ExcelFileBlobSasKey: to.Ptr("someKey"),
			ExcelFileBlobURL:    to.Ptr("https://azureblob.blob.core.windows.net/reportcontainer/exportjobsreport00000000-0000-0000-0000-000000000000_ExcelFile.xlsx"),
		}
		if !reflect.DeepEqual(exampleRes, res.ExportJobsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportJobsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/JobCRUD/GetExportJobsOperationResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_GetResourcesInSubscription(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetResourceGuardsInSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ResourceGuards in Subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	pager := client.GetResourcesInSubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetResourceGuardsInSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.ResourceGuardResourceList{
			Value: []*armdataprotection.ResourceGuardResource{
				{
					Name:     to.Ptr("VaultGuardTestNew"),
					Type:     to.Ptr("Microsoft.DataProtection/resourceGuards"),
					ID:       to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/vaultguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"TestKey": to.Ptr("TestValue"),
					},
					Properties: &armdataprotection.ResourceGuard{
						Description:        to.Ptr("Please take JIT access before performing any of the critical operation"),
						AllowAutoApprovals: to.Ptr(true),
						ProvisioningState:  to.Ptr(armdataprotection.ProvisioningStateSucceeded),
						ResourceGuardOperations: []*armdataprotection.ResourceGuardOperation{
							{
								RequestResourceType:    to.Ptr("Microsoft.DataProtection/resourceGuards/deleteResourceGuardProxyRequests"),
								VaultCriticalOperation: to.Ptr("Microsoft.RecoveryServices/vaults/backupResourceGuardProxies/delete"),
							},
							{
								RequestResourceType:    to.Ptr("Microsoft.DataProtection/resourceGuards/disableSoftDeleteRequests"),
								VaultCriticalOperation: to.Ptr("Microsoft.RecoveryServices/vaults/backupconfig/write"),
							}},
						VaultCriticalOperationExclusionList: []*string{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceGuardResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceGuardResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetResourceGuardsInSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_GetResourcesInResourceGroup(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetResourceGuardsInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ResourceGuards in ResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	pager := client.GetResourcesInResourceGroup("SampleResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetResourceGuardsInResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.ResourceGuardResourceList{
			Value: []*armdataprotection.ResourceGuardResource{
				{
					Name:     to.Ptr("VaultGuardTestNew"),
					Type:     to.Ptr("Microsoft.DataProtection/resourceGuards"),
					ID:       to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/vaultguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"TestKey": to.Ptr("TestValue"),
					},
					Properties: &armdataprotection.ResourceGuard{
						Description:        to.Ptr("Please take JIT access before performing any of the critical operation"),
						AllowAutoApprovals: to.Ptr(true),
						ProvisioningState:  to.Ptr(armdataprotection.ProvisioningStateSucceeded),
						ResourceGuardOperations: []*armdataprotection.ResourceGuardOperation{
							{
								RequestResourceType:    to.Ptr("Microsoft.DataProtection/resourceGuards/deleteResourceGuardProxyRequests"),
								VaultCriticalOperation: to.Ptr("Microsoft.RecoveryServices/vaults/backupResourceGuardProxies/delete"),
							},
							{
								RequestResourceType:    to.Ptr("Microsoft.DataProtection/resourceGuards/disableSoftDeleteRequests"),
								VaultCriticalOperation: to.Ptr("Microsoft.RecoveryServices/vaults/backupconfig/write"),
							}},
						VaultCriticalOperationExclusionList: []*string{},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceGuardResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceGuardResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetResourceGuardsInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_Put(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/PutResourceGuard.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create ResourceGuard"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.Put(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		armdataprotection.ResourceGuardResource{
			Location: to.Ptr("WestUS"),
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/PutResourceGuard.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.ResourceGuardResource{
			Name:     to.Ptr("VaultGuardTestNew"),
			Type:     to.Ptr("Microsoft.DataProtection/resourceGuards"),
			ID:       to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/vaultguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"TestKey": to.Ptr("TestValue"),
			},
			Properties: &armdataprotection.ResourceGuard{
				Description:        to.Ptr("Please take JIT access before performing any of the critical operation"),
				AllowAutoApprovals: to.Ptr(true),
				ProvisioningState:  to.Ptr(armdataprotection.ProvisioningStateSucceeded),
				ResourceGuardOperations: []*armdataprotection.ResourceGuardOperation{
					{
						RequestResourceType:    to.Ptr("Microsoft.DataProtection/resourceGuards/deleteResourceGuardProxyRequests"),
						VaultCriticalOperation: to.Ptr("Microsoft.RecoveryServices/vaults/backupResourceGuardProxies/delete"),
					},
					{
						RequestResourceType:    to.Ptr("Microsoft.DataProtection/resourceGuards/disableSoftDeleteRequests"),
						VaultCriticalOperation: to.Ptr("Microsoft.RecoveryServices/vaults/backupconfig/write"),
					}},
				VaultCriticalOperationExclusionList: []*string{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceGuardResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceGuardResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/PutResourceGuard.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_Get(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetResourceGuard.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ResourceGuard"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetResourceGuard.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.ResourceGuardResource{
			Name:     to.Ptr("ResourceGuardTestNew"),
			Type:     to.Ptr("Microsoft.DataProtection/resourceGuards"),
			ID:       to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/vaultguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"TestKey": to.Ptr("TestValue"),
			},
			Properties: &armdataprotection.ResourceGuard{
				Description:        to.Ptr("Please take JIT access before performing any of the critical operation"),
				AllowAutoApprovals: to.Ptr(true),
				ProvisioningState:  to.Ptr(armdataprotection.ProvisioningStateSucceeded),
				ResourceGuardOperations: []*armdataprotection.ResourceGuardOperation{
					{
						RequestResourceType:    to.Ptr("Microsoft.DataProtection/resourceGuards/deleteResourceGuardProxyRequests"),
						VaultCriticalOperation: to.Ptr("Microsoft.RecoveryServices/vaults/backupResourceGuardProxies/delete"),
					},
					{
						RequestResourceType:    to.Ptr("Microsoft.DataProtection/resourceGuards/disableSoftDeleteRequests"),
						VaultCriticalOperation: to.Ptr("Microsoft.RecoveryServices/vaults/backupconfig/write"),
					}},
				VaultCriticalOperationExclusionList: []*string{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceGuardResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceGuardResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetResourceGuard.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_Delete(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/DeleteResourceGuard.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete ResourceGuard"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	_, err := client.Delete(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/DeleteResourceGuard.json: %v", err)
	}
}

func TestResourceGuards_Patch(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/PatchResourceGuard.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch ResourceGuard"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.Patch(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		armdataprotection.PatchResourceRequestInput{
			Tags: map[string]*string{
				"newKey": to.Ptr("newVal"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/PatchResourceGuard.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.ResourceGuardResource{
			Name:     to.Ptr("VaultGuardTestNew"),
			Type:     to.Ptr("Microsoft.DataProtection/resourceGuards"),
			ID:       to.Ptr("/subscriptions/c999d45b-944f-418c-a0d8-c3fcfd1802c8/resourceGroups/vaultguardRGNew/providers/Microsoft.DataProtection/resourceGuards/VaultGuardTestNew"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"TestKey": to.Ptr("TestValue"),
			},
			Properties: &armdataprotection.ResourceGuard{
				Description:        to.Ptr("Please take JIT access before performing any of the critical operation"),
				AllowAutoApprovals: to.Ptr(true),
				ProvisioningState:  to.Ptr(armdataprotection.ProvisioningStateSucceeded),
				ResourceGuardOperations: []*armdataprotection.ResourceGuardOperation{
					{
						RequestResourceType:    to.Ptr("Microsoft.DataProtection/resourceGuards/deleteResourceGuardProxyRequests"),
						VaultCriticalOperation: to.Ptr("Microsoft.RecoveryServices/vaults/backupResourceGuardProxies/delete"),
					},
					{
						RequestResourceType:    to.Ptr("Microsoft.DataProtection/resourceGuards/disableSoftDeleteRequests"),
						VaultCriticalOperation: to.Ptr("Microsoft.RecoveryServices/vaults/backupconfig/write"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceGuardResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceGuardResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/PatchResourceGuard.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_GetDisableSoftDeleteRequestsObjects(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListDisableSoftDeleteRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List OperationsRequestObject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	pager := client.GetDisableSoftDeleteRequestsObjects("SampleResourceGroup",
		"swaggerExample",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListDisableSoftDeleteRequests.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.DppBaseResourceList{
			Value: []*armdataprotection.DppBaseResource{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.DataProtection/resourceGuards/disableSoftDeleteRequests"),
					ID:   to.Ptr("subscriotions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/resourceGuards/swaggerExample/disableSoftDeleteRequests/default"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DppBaseResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DppBaseResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListDisableSoftDeleteRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_GetDeleteResourceGuardProxyRequestsObjects(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListDeleteResourceGuardProxyRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List OperationsRequestObject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	pager := client.GetDeleteResourceGuardProxyRequestsObjects("SampleResourceGroup",
		"swaggerExample",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListDeleteResourceGuardProxyRequests.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.DppBaseResourceList{
			Value: []*armdataprotection.DppBaseResource{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.DataProtection/resourceGuards/deleteResourceGuardProxyRequests"),
					ID:   to.Ptr("subscriotions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/resourceGuards/swaggerExample/deleteResourceGuardProxyRequests/default"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DppBaseResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DppBaseResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListDeleteResourceGuardProxyRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_GetBackupSecurityPINRequestsObjects(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListBackupSecurityPINRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List OperationsRequestObject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	pager := client.GetBackupSecurityPINRequestsObjects("SampleResourceGroup",
		"swaggerExample",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListBackupSecurityPINRequests.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.DppBaseResourceList{
			Value: []*armdataprotection.DppBaseResource{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.DataProtection/resourceGuards/getBackupSecurityPINRequests"),
					ID:   to.Ptr("subscriotions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/resourceGuards/swaggerExample/getBackupSecurityPINRequests/default"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DppBaseResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DppBaseResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListBackupSecurityPINRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_GetDeleteProtectedItemRequestsObjects(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListDeleteProtectedItemRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List OperationsRequestObject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	pager := client.GetDeleteProtectedItemRequestsObjects("SampleResourceGroup",
		"swaggerExample",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListDeleteProtectedItemRequests.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.DppBaseResourceList{
			Value: []*armdataprotection.DppBaseResource{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.DataProtection/resourceGuards/deleteProtectedItemRequests"),
					ID:   to.Ptr("subscriotions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/resourceGuards/swaggerExample/deleteProtectedItemRequests/default"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DppBaseResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DppBaseResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListDeleteProtectedItemRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_GetUpdateProtectionPolicyRequestsObjects(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListUpdateProtectionPolicyRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List OperationsRequestObject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	pager := client.GetUpdateProtectionPolicyRequestsObjects("SampleResourceGroup",
		"swaggerExample",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListUpdateProtectionPolicyRequests.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.DppBaseResourceList{
			Value: []*armdataprotection.DppBaseResource{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.DataProtection/resourceGuards/updateProtectionPolicyRequests"),
					ID:   to.Ptr("subscriotions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/resourceGuards/swaggerExample/updateProtectionPolicyRequests/default"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DppBaseResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DppBaseResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListUpdateProtectionPolicyRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_GetUpdateProtectedItemRequestsObjects(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListUpdateProtectedItemRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List OperationsRequestObject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	pager := client.GetUpdateProtectedItemRequestsObjects("SampleResourceGroup",
		"swaggerExample",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListUpdateProtectedItemRequests.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdataprotection.DppBaseResourceList{
			Value: []*armdataprotection.DppBaseResource{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.DataProtection/resourceGuards/updateProtectedItemRequests"),
					ID:   to.Ptr("subscriotions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/resourceGuards/swaggerExample/updateProtectedItemRequests/default"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DppBaseResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DppBaseResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/ListUpdateProtectedItemRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_GetDefaultDisableSoftDeleteRequestsObject(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultDisableSoftDeleteRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DefaultOperationsRequestObject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.GetDefaultDisableSoftDeleteRequestsObject(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultDisableSoftDeleteRequests.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.DppBaseResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.DataProtection/resourceGuards/disableSoftDeleteRequests"),
			ID:   to.Ptr("subscriotions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/resourceGuards/swaggerExample/disableSoftDeleteRequests/default"),
		}
		if !reflect.DeepEqual(exampleRes, res.DppBaseResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DppBaseResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultDisableSoftDeleteRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_GetDefaultDeleteResourceGuardProxyRequestsObject(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultDeleteResourceGuardProxyRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DefaultOperationsRequestObject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.GetDefaultDeleteResourceGuardProxyRequestsObject(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultDeleteResourceGuardProxyRequests.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.DppBaseResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.DataProtection/resourceGuards/deleteResourceGuardProxyRequests"),
			ID:   to.Ptr("subscriotions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/resourceGuards/swaggerExample/deleteResourceGuardProxyRequests/default"),
		}
		if !reflect.DeepEqual(exampleRes, res.DppBaseResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DppBaseResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultDeleteResourceGuardProxyRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_GetDefaultBackupSecurityPINRequestsObject(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultBackupSecurityPINRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DefaultOperationsRequestObject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.GetDefaultBackupSecurityPINRequestsObject(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultBackupSecurityPINRequests.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.DppBaseResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.DataProtection/resourceGuards/getBackupSecurityPINRequests"),
			ID:   to.Ptr("subscriotions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/resourceGuards/swaggerExample/getBackupSecurityPINRequests/default"),
		}
		if !reflect.DeepEqual(exampleRes, res.DppBaseResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DppBaseResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultBackupSecurityPINRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_GetDefaultDeleteProtectedItemRequestsObject(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultDeleteProtectedItemRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DefaultOperationsRequestObject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.GetDefaultDeleteProtectedItemRequestsObject(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultDeleteProtectedItemRequests.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.DppBaseResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.DataProtection/resourceGuards/deleteProtectedItemRequests"),
			ID:   to.Ptr("subscriotions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/resourceGuards/swaggerExample/deleteProtectedItemRequests/default"),
		}
		if !reflect.DeepEqual(exampleRes, res.DppBaseResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DppBaseResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultDeleteProtectedItemRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_GetDefaultUpdateProtectionPolicyRequestsObject(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultUpdateProtectionPolicyRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DefaultOperationsRequestObject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.GetDefaultUpdateProtectionPolicyRequestsObject(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultUpdateProtectionPolicyRequests.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.DppBaseResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.DataProtection/resourceGuards/updateProtectionPolicyRequests"),
			ID:   to.Ptr("subscriotions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/resourceGuards/swaggerExample/updateProtectionPolicyRequests/default"),
		}
		if !reflect.DeepEqual(exampleRes, res.DppBaseResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DppBaseResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultUpdateProtectionPolicyRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGuards_GetDefaultUpdateProtectedItemRequestsObject(t *testing.T) {
	// From example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultUpdateProtectedItemRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DefaultOperationsRequestObject"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdataprotection.NewResourceGuardsClient("0b352192-dcac-4cc7-992e-a96190ccc68c", cred, &options)
	res, err := client.GetDefaultUpdateProtectedItemRequestsObject(ctx,
		"SampleResourceGroup",
		"swaggerExample",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultUpdateProtectedItemRequests.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdataprotection.DppBaseResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.DataProtection/resourceGuards/updateProtectedItemRequests"),
			ID:   to.Ptr("subscriotions/0b352192-dcac-4cc7-992e-a96190ccc68c/resourceGroups/SampleResourceGroup/providers/Microsoft.DataProtection/resourceGuards/swaggerExample/updateProtectedItemRequests/default"),
		}
		if !reflect.DeepEqual(exampleRes, res.DppBaseResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DppBaseResource)
			t.Fatalf("Mock response is not equal to example response for example specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/ResourceGuardCRUD/GetDefaultUpdateProtectedItemRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
