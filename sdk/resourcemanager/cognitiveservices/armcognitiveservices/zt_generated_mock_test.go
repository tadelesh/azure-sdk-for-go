//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcognitiveservices_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cognitiveservices/armcognitiveservices"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAccounts_Create(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/CreateAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"testCreate1",
		armcognitiveservices.Account{
			Identity: &armcognitiveservices.Identity{
				Type: to.Ptr(armcognitiveservices.ResourceIdentityTypeSystemAssigned),
			},
			Kind:     to.Ptr("Emotion"),
			Location: to.Ptr("West US"),
			Properties: &armcognitiveservices.AccountProperties{
				Encryption: &armcognitiveservices.Encryption{
					KeySource: to.Ptr(armcognitiveservices.KeySourceMicrosoftKeyVault),
					KeyVaultProperties: &armcognitiveservices.KeyVaultProperties{
						KeyName:     to.Ptr("KeyName"),
						KeyVaultURI: to.Ptr("https://pltfrmscrts-use-pc-dev.vault.azure.net/"),
						KeyVersion:  to.Ptr("891CF236-D241-4738-9462-D506AF493DFA"),
					},
				},
				UserOwnedStorage: []*armcognitiveservices.UserOwnedStorage{
					{
						ResourceID: to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
					}},
			},
			SKU: &armcognitiveservices.SKU{
				Name: to.Ptr("S0"),
			},
		},
		&armcognitiveservices.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/CreateAccount.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/CreateAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.Account{
			Name: to.Ptr("testCreate1"),
			Type: to.Ptr("Microsoft.CognitiveServices/accounts"),
			ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.CognitiveServices/accounts/testCreate1"),
			Etag: to.Ptr("W/\"datetime'2017-04-10T08%3A00%3A05.445595Z'\""),
			Identity: &armcognitiveservices.Identity{
				Type:        to.Ptr(armcognitiveservices.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("b5cf119e-a5c2-42c7-802f-592e0efb169f"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
			},
			Kind:     to.Ptr("Emotion"),
			Location: to.Ptr("West US"),
			Properties: &armcognitiveservices.AccountProperties{
				Encryption: &armcognitiveservices.Encryption{
					KeySource: to.Ptr(armcognitiveservices.KeySourceMicrosoftKeyVault),
					KeyVaultProperties: &armcognitiveservices.KeyVaultProperties{
						KeyName:     to.Ptr("FakeKeyName"),
						KeyVaultURI: to.Ptr("https://pltfrmscrts-use-pc-dev.vault.azure.net/"),
						KeyVersion:  to.Ptr("891CF236-D241-4738-9462-D506AF493DFA"),
					},
				},
				Endpoint:          to.Ptr("https://westus.api.cognitive.microsoft.com/emotion/v1.0"),
				ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
				UserOwnedStorage: []*armcognitiveservices.UserOwnedStorage{
					{
						ResourceID: to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
					}},
			},
			SKU: &armcognitiveservices.SKU{
				Name: to.Ptr("S0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/CreateAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/CreateAccountMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Account Min"},
	})
	client = armcognitiveservices.NewAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"testCreate1",
		armcognitiveservices.Account{
			Identity: &armcognitiveservices.Identity{
				Type: to.Ptr(armcognitiveservices.ResourceIdentityTypeSystemAssigned),
			},
			Kind:       to.Ptr("CognitiveServices"),
			Location:   to.Ptr("West US"),
			Properties: &armcognitiveservices.AccountProperties{},
			SKU: &armcognitiveservices.SKU{
				Name: to.Ptr("S0"),
			},
		},
		&armcognitiveservices.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/CreateAccountMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/CreateAccountMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.Account{
			Name: to.Ptr("testCreate1"),
			Type: to.Ptr("Microsoft.CognitiveServices/accounts"),
			ID:   to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.CognitiveServices/accounts/testCreate1"),
			Etag: to.Ptr("W/\"datetime'2017-04-10T08%3A00%3A05.445595Z'\""),
			Identity: &armcognitiveservices.Identity{
				Type:        to.Ptr(armcognitiveservices.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("b5cf119e-a5c2-42c7-802f-592e0efb169f"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
			},
			Kind:     to.Ptr("Emotion"),
			Location: to.Ptr("West US"),
			Properties: &armcognitiveservices.AccountProperties{
				Endpoint:          to.Ptr("https://westus.api.cognitive.microsoft.com/emotion/v1.0"),
				ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
			},
			SKU: &armcognitiveservices.SKU{
				Name: to.Ptr("S0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/CreateAccountMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/UpdateAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"bvttest",
		"bingSearch",
		armcognitiveservices.Account{
			Location: to.Ptr("global"),
			SKU: &armcognitiveservices.SKU{
				Name: to.Ptr("S2"),
			},
		},
		&armcognitiveservices.AccountsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/UpdateAccount.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/UpdateAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.Account{
			Name:     to.Ptr("bingSearch"),
			Type:     to.Ptr("Microsoft.CognitiveServices/accounts"),
			ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/bvttest/providers/Microsoft.CognitiveServices/accounts/bingSearch"),
			Etag:     to.Ptr("W/\"datetime'2017-04-10T07%3A46%3A21.5618831Z'\""),
			Kind:     to.Ptr("Bing.Search"),
			Location: to.Ptr("global"),
			Properties: &armcognitiveservices.AccountProperties{
				Endpoint:          to.Ptr("https://api.cognitive.microsoft.com/bing/v5.0"),
				ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
			},
			SKU: &armcognitiveservices.SKU{
				Name: to.Ptr("S2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/UpdateAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/DeleteAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"PropTest01",
		&armcognitiveservices.AccountsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/DeleteAccount.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/DeleteAccount.json: %v", err)
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.Account{
			Name:     to.Ptr("myAccount"),
			Type:     to.Ptr("Microsoft.CognitiveServices/accounts"),
			ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.CognitiveServices/accounts/myAccount"),
			Etag:     to.Ptr("W/\"datetime'2017-04-10T04%3A42%3A19.7067387Z'\""),
			Kind:     to.Ptr("Emotion"),
			Location: to.Ptr("westus"),
			Properties: &armcognitiveservices.AccountProperties{
				Endpoint:          to.Ptr("https://westus.api.cognitive.microsoft.com/emotion/v1.0"),
				ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
			},
			SKU: &armcognitiveservices.SKU{
				Name: to.Ptr("F0"),
			},
			Tags: map[string]*string{
				"ExpiredDate": to.Ptr("2017/09/01"),
				"Owner":       to.Ptr("felixwa"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListAccountsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Accounts by Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListAccountsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcognitiveservices.AccountListResult{
			Value: []*armcognitiveservices.Account{
				{
					Name:     to.Ptr("myAccount"),
					Type:     to.Ptr("Microsoft.CognitiveServices/accounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.CognitiveServices/accounts/myAccount"),
					Etag:     to.Ptr("W/\"datetime'2017-04-10T04%3A42%3A19.7067387Z'\""),
					Kind:     to.Ptr("Emotion"),
					Location: to.Ptr("westus"),
					Properties: &armcognitiveservices.AccountProperties{
						Endpoint:          to.Ptr("https://westus.api.cognitive.microsoft.com/emotion/v1.0"),
						ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
					},
					SKU: &armcognitiveservices.SKU{
						Name: to.Ptr("F0"),
					},
					Tags: map[string]*string{
						"ExpiredDate": to.Ptr("2017/09/01"),
						"Owner":       to.Ptr("felixwa"),
					},
				},
				{
					Name:     to.Ptr("TestPropertyWU2"),
					Type:     to.Ptr("Microsoft.CognitiveServices/accounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.CognitiveServices/accounts/TestPropertyWU2"),
					Etag:     to.Ptr("W/\"datetime'2017-04-07T04%3A32%3A38.9187216Z'\""),
					Kind:     to.Ptr("Face"),
					Location: to.Ptr("westus"),
					Properties: &armcognitiveservices.AccountProperties{
						Endpoint:          to.Ptr("https://westus.api.cognitive.microsoft.com/face/v1.0"),
						ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
					},
					SKU: &armcognitiveservices.SKU{
						Name: to.Ptr("S0"),
					},
					Tags: map[string]*string{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListAccountsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_List(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListAccountsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Accounts by Subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListAccountsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcognitiveservices.AccountListResult{
			Value: []*armcognitiveservices.Account{
				{
					Name:     to.Ptr("bingSearch"),
					Type:     to.Ptr("Microsoft.CognitiveServices/accounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/bvttest/providers/Microsoft.CognitiveServices/accounts/bingSearch"),
					Etag:     to.Ptr("W/\"datetime'2017-03-27T11%3A19%3A08.762494Z'\""),
					Kind:     to.Ptr("Bing.Search"),
					Location: to.Ptr("global"),
					Properties: &armcognitiveservices.AccountProperties{
						Endpoint:          to.Ptr("https://api.cognitive.microsoft.com/bing/v5.0"),
						ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
					},
					SKU: &armcognitiveservices.SKU{
						Name: to.Ptr("S1"),
					},
				},
				{
					Name:     to.Ptr("CrisProd"),
					Type:     to.Ptr("Microsoft.CognitiveServices/accounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/bvttest/providers/Microsoft.CognitiveServices/accounts/CrisProd"),
					Etag:     to.Ptr("W/\"datetime'2017-03-31T08%3A57%3A07.4499566Z'\""),
					Kind:     to.Ptr("CRIS"),
					Location: to.Ptr("westus"),
					Properties: &armcognitiveservices.AccountProperties{
						Endpoint:          to.Ptr("https://westus.api.cognitive.microsoft.com/sts/v1.0"),
						ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
					},
					SKU: &armcognitiveservices.SKU{
						Name: to.Ptr("S0"),
					},
					Tags: map[string]*string{
						"can't delete it successfully": to.Ptr("v-yunjin"),
					},
				},
				{
					Name:     to.Ptr("rayrptest0308"),
					Type:     to.Ptr("Microsoft.CognitiveServices/accounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/bvttest/providers/Microsoft.CognitiveServices/accounts/rayrptest0308"),
					Etag:     to.Ptr("W/\"datetime'2017-03-27T11%3A15%3A23.5232645Z'\""),
					Kind:     to.Ptr("Face"),
					Location: to.Ptr("westus"),
					Properties: &armcognitiveservices.AccountProperties{
						Endpoint:          to.Ptr("https://westus.api.cognitive.microsoft.com/face/v1.0"),
						ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
					},
					SKU: &armcognitiveservices.SKU{
						Name: to.Ptr("S0"),
					},
				},
				{
					Name:     to.Ptr("raytest02"),
					Type:     to.Ptr("Microsoft.CognitiveServices/accounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/bvttest/providers/Microsoft.CognitiveServices/accounts/raytest02"),
					Etag:     to.Ptr("W/\"datetime'2017-04-04T02%3A07%3A07.3957572Z'\""),
					Kind:     to.Ptr("Emotion"),
					Location: to.Ptr("westus"),
					Properties: &armcognitiveservices.AccountProperties{
						Endpoint:          to.Ptr("https://westus.api.cognitive.microsoft.com/emotion/v1.0"),
						ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
					},
					SKU: &armcognitiveservices.SKU{
						Name: to.Ptr("S0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListAccountsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListKeys(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.ListKeys(ctx,
		"myResourceGroup",
		"myAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.APIKeys{
			Key1: to.Ptr("KEY1"),
			Key2: to.Ptr("KEY2"),
		}
		if !reflect.DeepEqual(exampleRes, res.APIKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_RegenerateKey(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/RegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Regenerate Keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.RegenerateKey(ctx,
		"myResourceGroup",
		"myAccount",
		armcognitiveservices.RegenerateKeyParameters{
			KeyName: to.Ptr(armcognitiveservices.KeyNameKey2),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/RegenerateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.APIKeys{
			Key1: to.Ptr("KEY1"),
			Key2: to.Ptr("KEY2"),
		}
		if !reflect.DeepEqual(exampleRes, res.APIKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.APIKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/RegenerateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListUsages(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Usages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewAccountsClient("5a4f5c2e-6983-4ccb-bd34-2196d5b5bbd3", cred, &options)
	res, err := client.ListUsages(ctx,
		"myResourceGroup",
		"TestUsage02",
		&armcognitiveservices.AccountsClientListUsagesOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetUsages.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.UsageListResult{
			Value: []*armcognitiveservices.Usage{
				{
					Name: &armcognitiveservices.MetricName{
						LocalizedValue: to.Ptr("Face.Transactions"),
						Value:          to.Ptr("Face.Transactions"),
					},
					CurrentValue:  to.Ptr[float64](3),
					Limit:         to.Ptr[float64](30000),
					NextResetTime: to.Ptr("2018-03-28T09:33:51Z"),
					QuotaPeriod:   to.Ptr("30.00:00:00"),
					Status:        to.Ptr(armcognitiveservices.QuotaUsageStatusIncluded),
					Unit:          to.Ptr(armcognitiveservices.UnitTypeCount),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.UsageListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.UsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeletedAccounts_Get(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetDeletedAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewDeletedAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.Get(ctx,
		"westus",
		"myResourceGroup",
		"myAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetDeletedAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.Account{
			Name:     to.Ptr("myAccount"),
			Type:     to.Ptr("Microsoft.CognitiveServices/accounts"),
			ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.CognitiveServices/locations/westus/resourceGroups/myResourceGroup/deletedAccounts/myAccount"),
			Etag:     to.Ptr("W/\"datetime'2017-04-10T04%3A42%3A19.7067387Z'\""),
			Kind:     to.Ptr("Emotion"),
			Location: to.Ptr("westus"),
			Properties: &armcognitiveservices.AccountProperties{
				Endpoint:          to.Ptr("https://westus.api.cognitive.microsoft.com/emotion/v1.0"),
				ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
			},
			SKU: &armcognitiveservices.SKU{
				Name: to.Ptr("F0"),
			},
			Tags: map[string]*string{
				"ExpiredDate": to.Ptr("2017/09/01"),
				"Owner":       to.Ptr("felixwa"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetDeletedAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeletedAccounts_Purge(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/PurgeDeletedAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewDeletedAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	poller, err := client.BeginPurge(ctx,
		"westus",
		"myResourceGroup",
		"PropTest01",
		&armcognitiveservices.DeletedAccountsClientBeginPurgeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/PurgeDeletedAccount.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/PurgeDeletedAccount.json: %v", err)
	}
}

func TestDeletedAccounts_List(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListAccountsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Deleted Accounts by Subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewDeletedAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListAccountsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcognitiveservices.AccountListResult{
			Value: []*armcognitiveservices.Account{
				{
					Name:     to.Ptr("bingSearch"),
					Type:     to.Ptr("Microsoft.CognitiveServices/accounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/bvttest/providers/Microsoft.CognitiveServices/accounts/bingSearch"),
					Etag:     to.Ptr("W/\"datetime'2017-03-27T11%3A19%3A08.762494Z'\""),
					Kind:     to.Ptr("Bing.Search"),
					Location: to.Ptr("global"),
					Properties: &armcognitiveservices.AccountProperties{
						Endpoint:          to.Ptr("https://api.cognitive.microsoft.com/bing/v5.0"),
						ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
					},
					SKU: &armcognitiveservices.SKU{
						Name: to.Ptr("S1"),
					},
				},
				{
					Name:     to.Ptr("CrisProd"),
					Type:     to.Ptr("Microsoft.CognitiveServices/accounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/bvttest/providers/Microsoft.CognitiveServices/accounts/CrisProd"),
					Etag:     to.Ptr("W/\"datetime'2017-03-31T08%3A57%3A07.4499566Z'\""),
					Kind:     to.Ptr("CRIS"),
					Location: to.Ptr("westus"),
					Properties: &armcognitiveservices.AccountProperties{
						Endpoint:          to.Ptr("https://westus.api.cognitive.microsoft.com/sts/v1.0"),
						ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
					},
					SKU: &armcognitiveservices.SKU{
						Name: to.Ptr("S0"),
					},
					Tags: map[string]*string{
						"can't delete it successfully": to.Ptr("v-yunjin"),
					},
				},
				{
					Name:     to.Ptr("rayrptest0308"),
					Type:     to.Ptr("Microsoft.CognitiveServices/accounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/bvttest/providers/Microsoft.CognitiveServices/accounts/rayrptest0308"),
					Etag:     to.Ptr("W/\"datetime'2017-03-27T11%3A15%3A23.5232645Z'\""),
					Kind:     to.Ptr("Face"),
					Location: to.Ptr("westus"),
					Properties: &armcognitiveservices.AccountProperties{
						Endpoint:          to.Ptr("https://westus.api.cognitive.microsoft.com/face/v1.0"),
						ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
					},
					SKU: &armcognitiveservices.SKU{
						Name: to.Ptr("S0"),
					},
				},
				{
					Name:     to.Ptr("raytest02"),
					Type:     to.Ptr("Microsoft.CognitiveServices/accounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/bvttest/providers/Microsoft.CognitiveServices/accounts/raytest02"),
					Etag:     to.Ptr("W/\"datetime'2017-04-04T02%3A07%3A07.3957572Z'\""),
					Kind:     to.Ptr("Emotion"),
					Location: to.Ptr("westus"),
					Properties: &armcognitiveservices.AccountProperties{
						Endpoint:          to.Ptr("https://westus.api.cognitive.microsoft.com/emotion/v1.0"),
						ProvisioningState: to.Ptr(armcognitiveservices.ProvisioningStateSucceeded),
					},
					SKU: &armcognitiveservices.SKU{
						Name: to.Ptr("S0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListAccountsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceSKUs_List(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetSkus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Regenerate Keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewResourceSKUsClient("f1c637e4-72ec-4f89-8d2b-0f933c036002", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetSkus.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcognitiveservices.ResourceSKUListResult{
			Value: []*armcognitiveservices.ResourceSKU{
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Bing.Speech"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("Bing.Speech"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("SpeechTranslation"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("SpeechTranslation"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("SpeechTranslation"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("SpeechTranslation"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("SpeechTranslation"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("TextTranslation"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("TextTranslation"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("TextTranslation"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("TextTranslation"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("TextTranslation"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("Bing.Search.v7"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("Bing.Search.v7"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("Bing.Search.v7"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("Bing.Search.v7"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S5"),
					Kind: to.Ptr("Bing.Search.v7"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S6"),
					Kind: to.Ptr("Bing.Search.v7"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S7"),
					Kind: to.Ptr("Bing.Search.v7"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S8"),
					Kind: to.Ptr("Bing.Search.v7"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("Bing.Autosuggest.v7"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("Bing.CustomSearch"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("Bing.SpellCheck.v7"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Bing.EntitySearch"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("Bing.EntitySearch"),
					Locations: []*string{
						to.Ptr("GLOBAL")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("AUSTRALIAEAST")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("AUSTRALIAEAST")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("AUSTRALIAEAST")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("AUSTRALIAEAST")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("AUSTRALIAEAST")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("AUSTRALIAEAST")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("AUSTRALIAEAST")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("AUSTRALIAEAST")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("AUSTRALIAEAST")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("AUSTRALIAEAST")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("AUSTRALIAEAST")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("AUSTRALIAEAST")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("AUSTRALIAEAST")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("AUSTRALIAEAST")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("BRAZILSOUTH")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("BRAZILSOUTH")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("BRAZILSOUTH")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("BRAZILSOUTH")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("BRAZILSOUTH")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("BRAZILSOUTH")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("BRAZILSOUTH")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("BRAZILSOUTH")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("BRAZILSOUTH")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("BRAZILSOUTH")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("BRAZILSOUTH")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("BRAZILSOUTH")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("BRAZILSOUTH")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("BRAZILSOUTH")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("CENTRALUSEUAP")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("CENTRALUSEUAP")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("CENTRALUSEUAP")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("CENTRALUSEUAP")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("CENTRALUSEUAP")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("CENTRALUSEUAP")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("CENTRALUSEUAP")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("CENTRALUSEUAP")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("CENTRALUSEUAP")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("CENTRALUSEUAP")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("CENTRALUSEUAP")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("CENTRALUSEUAP")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("CENTRALUSEUAP")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("CENTRALUSEUAP")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("SpeakerRecognition"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("SpeakerRecognition"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("CustomSpeech"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("CustomSpeech"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("WESTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("WESTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("WESTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("WESTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("WESTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("WESTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("WESTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("WESTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("WESTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("WESTEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("WESTEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("WESTEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("WESTEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("WESTEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("WESTEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("WESTEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("WESTEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("NORTHEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("NORTHEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("NORTHEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("NORTHEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("NORTHEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("NORTHEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("NORTHEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("NORTHEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("NORTHEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("NORTHEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("NORTHEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("NORTHEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("NORTHEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("NORTHEUROPE")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("SOUTHEASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("SOUTHEASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("SOUTHEASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("SOUTHEASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("SOUTHEASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("SOUTHEASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("SOUTHEASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("SOUTHEASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("SOUTHEASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("SOUTHEASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("SOUTHEASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("SOUTHEASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("SOUTHEASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("SOUTHEASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("EASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("EASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("EASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("EASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("EASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("EASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("EASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("EASTASIA")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("WESTCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("WESTCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("WESTCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("WESTCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("WESTCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("WESTCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("WESTCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("WESTCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("WESTCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("CustomVision.Training"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("CustomVision.Training"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("CustomVision.Prediction"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("CustomVision.Prediction"),
					Locations: []*string{
						to.Ptr("SOUTHCENTRALUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("EASTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("EASTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("EASTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("EASTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("EASTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("EASTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("EASTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("EASTUS")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("EASTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("ContentModerator"),
					Locations: []*string{
						to.Ptr("EASTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("EASTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("Face"),
					Locations: []*string{
						to.Ptr("EASTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("EASTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("LUIS"),
					Locations: []*string{
						to.Ptr("EASTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("EASTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("ComputerVision"),
					Locations: []*string{
						to.Ptr("EASTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("F0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Free"),
				},
				{
					Name: to.Ptr("S0"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S1"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S2"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S3"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("S4"),
					Kind: to.Ptr("TextAnalytics"),
					Locations: []*string{
						to.Ptr("EASTUS2")},
					ResourceType: to.Ptr("accounts"),
					Restrictions: []*armcognitiveservices.ResourceSKURestrictions{},
					Tier:         to.Ptr("Standard"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceSKUListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceSKUListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetSkus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcognitiveservices.OperationListResult{
			Value: []*armcognitiveservices.Operation{
				{
					Name: to.Ptr("Microsoft.CognitiveServices/accounts/read"),
					Display: &armcognitiveservices.OperationDisplay{
						Description: to.Ptr("Reads API accounts."),
						Operation:   to.Ptr("Read API Account"),
						Provider:    to.Ptr("Microsoft Cognitive Services"),
						Resource:    to.Ptr("Cognitive Services API Account"),
					},
					Origin: to.Ptr(armcognitiveservices.OriginUserSystem),
				},
				{
					Name: to.Ptr("Microsoft.CognitiveServices/accounts/write"),
					Display: &armcognitiveservices.OperationDisplay{
						Description: to.Ptr("Writes API Accounts."),
						Operation:   to.Ptr("Write API Account"),
						Provider:    to.Ptr("Microsoft Cognitive Services"),
						Resource:    to.Ptr("Cognitive Services API Account"),
					},
					Origin: to.Ptr(armcognitiveservices.OriginUserSystem),
				},
				{
					Name: to.Ptr("Microsoft.CognitiveServices/accounts/delete"),
					Display: &armcognitiveservices.OperationDisplay{
						Description: to.Ptr("Deletes API accounts"),
						Operation:   to.Ptr("Delete API Account"),
						Provider:    to.Ptr("Microsoft Cognitive Services"),
						Resource:    to.Ptr("Cognitive Services API Account"),
					},
					Origin: to.Ptr(armcognitiveservices.OriginUserSystem),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCognitiveServicesManagementClient_CheckDomainAvailability(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/CheckDomainAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check SKU Availability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewManagementClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.CheckDomainAvailability(ctx,
		armcognitiveservices.CheckDomainAvailabilityParameter{
			Type:          to.Ptr("Microsoft.CognitiveServices/accounts"),
			SubdomainName: to.Ptr("contosodemoapp1"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/CheckDomainAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.DomainAvailability{
			Type:                 to.Ptr("Microsoft.CognitiveServices/accounts"),
			IsSubdomainAvailable: to.Ptr(false),
			Reason:               to.Ptr("Sub domain name 'contosodemoapp1' is not valid"),
			SubdomainName:        to.Ptr("contosodemoapp1"),
		}
		if !reflect.DeepEqual(exampleRes, res.DomainAvailability) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DomainAvailability)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/CheckDomainAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommitmentTiers_List(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListCommitmentTiers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListCommitmentTiers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewCommitmentTiersClient("subscriptionId", cred, &options)
	pager := client.List("location",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListCommitmentTiers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcognitiveservices.CommitmentTierListResult{
			Value: []*armcognitiveservices.CommitmentTier{
				{
					Cost:         &armcognitiveservices.CommitmentCost{},
					HostingModel: to.Ptr(armcognitiveservices.HostingModelWeb),
					Kind:         to.Ptr("TextAnalytics"),
					PlanType:     to.Ptr("TA"),
					Quota: &armcognitiveservices.CommitmentQuota{
						Quantity: to.Ptr[int64](1000000),
						Unit:     to.Ptr("Transaction"),
					},
					SKUName: to.Ptr("S"),
					Tier:    to.Ptr("T1"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CommitmentTierListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CommitmentTierListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListCommitmentTiers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	res, err := client.List(ctx,
		"res6977",
		"sto2527",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListPrivateEndpointConnections.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.PrivateEndpointConnectionListResult{
			Value: []*armcognitiveservices.PrivateEndpointConnection{
				{
					Name: to.Ptr("{privateEndpointConnectionName}"),
					Type: to.Ptr("Microsoft.CognitiveServices/accounts/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.CognitiveServices/accounts/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
					Properties: &armcognitiveservices.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armcognitiveservices.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
						},
						PrivateLinkServiceConnectionState: &armcognitiveservices.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armcognitiveservices.PrivateEndpointServiceConnectionStatusApproved),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"res6977",
		"sto2527",
		"{privateEndpointConnectionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.PrivateEndpointConnection{
			Name: to.Ptr("{privateEndpointConnectionName}"),
			Type: to.Ptr("Microsoft.CognitiveServices/accounts/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.CognitiveServices/accounts/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
			Properties: &armcognitiveservices.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armcognitiveservices.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
				},
				PrivateLinkServiceConnectionState: &armcognitiveservices.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armcognitiveservices.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/PutPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"res7687",
		"sto9699",
		"{privateEndpointConnectionName}",
		armcognitiveservices.PrivateEndpointConnection{
			Properties: &armcognitiveservices.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armcognitiveservices.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armcognitiveservices.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		&armcognitiveservices.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/PutPrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/PutPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.PrivateEndpointConnection{
			Name: to.Ptr("{privateEndpointConnectionName}"),
			Type: to.Ptr("Microsoft.CognitiveServices/accounts/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.CognitiveServices/accounts/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
			Properties: &armcognitiveservices.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armcognitiveservices.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
				},
				PrivateLinkServiceConnectionState: &armcognitiveservices.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armcognitiveservices.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/PutPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/DeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeletePrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"res6977",
		"sto2527",
		"{privateEndpointConnectionName}",
		&armcognitiveservices.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/DeletePrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/DeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListPrivateLinkResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewPrivateLinkResourcesClient("{subscription-id}", cred, &options)
	res, err := client.List(ctx,
		"res6977",
		"sto2527",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListPrivateLinkResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.PrivateLinkResourceListResult{
			Value: []*armcognitiveservices.PrivateLinkResource{
				{
					Name: to.Ptr("blob"),
					Type: to.Ptr("Microsoft.CognitiveServices/accounts/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.CognitiveServices/accounts/sto2527/privateLinkResources/account"),
					Properties: &armcognitiveservices.PrivateLinkResourceProperties{
						GroupID: to.Ptr("account"),
						RequiredMembers: []*string{
							to.Ptr("default")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.cognitiveservices.azure.com")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_List(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListDeployments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListDeployments"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewDeploymentsClient("subscriptionId", cred, &options)
	pager := client.List("resourceGroupName",
		"accountName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListDeployments.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcognitiveservices.DeploymentListResult{
			Value: []*armcognitiveservices.Deployment{
				{
					Name: to.Ptr("deploymentName"),
					Type: to.Ptr("Microsoft.CognitiveServices/accounts/deployments"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.CognitiveServices/accounts/accountName/deployments/deploymentName"),
					Properties: &armcognitiveservices.DeploymentProperties{
						Model: &armcognitiveservices.DeploymentModel{
							Name:    to.Ptr("ada"),
							Format:  to.Ptr("OpenAI"),
							Version: to.Ptr("1"),
						},
						ProvisioningState: to.Ptr(armcognitiveservices.DeploymentProvisioningStateSucceeded),
						ScaleSettings: &armcognitiveservices.DeploymentScaleSettings{
							Capacity:  to.Ptr[int32](1),
							ScaleType: to.Ptr(armcognitiveservices.DeploymentScaleTypeManual),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeploymentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeploymentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListDeployments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_Get(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetDeployment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetDeployment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewDeploymentsClient("subscriptionId", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"accountName",
		"deploymentName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetDeployment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.Deployment{
			Name: to.Ptr("deploymentName"),
			Type: to.Ptr("Microsoft.CognitiveServices/accounts/deployments"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.CognitiveServices/accounts/accountName/deployments/deploymentName"),
			Properties: &armcognitiveservices.DeploymentProperties{
				Model: &armcognitiveservices.DeploymentModel{
					Name:    to.Ptr("ada"),
					Format:  to.Ptr("OpenAI"),
					Version: to.Ptr("1"),
				},
				ProvisioningState: to.Ptr(armcognitiveservices.DeploymentProvisioningStateSucceeded),
				ScaleSettings: &armcognitiveservices.DeploymentScaleSettings{
					Capacity:  to.Ptr[int32](1),
					ScaleType: to.Ptr(armcognitiveservices.DeploymentScaleTypeManual),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Deployment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Deployment)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetDeployment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_CreateOrUpdate(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/PutDeployment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutDeployment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewDeploymentsClient("subscriptionId", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroupName",
		"accountName",
		"deploymentName",
		armcognitiveservices.Deployment{
			Properties: &armcognitiveservices.DeploymentProperties{
				Model: &armcognitiveservices.DeploymentModel{
					Name:    to.Ptr("ada"),
					Format:  to.Ptr("OpenAI"),
					Version: to.Ptr("1"),
				},
				ScaleSettings: &armcognitiveservices.DeploymentScaleSettings{
					Capacity:  to.Ptr[int32](1),
					ScaleType: to.Ptr(armcognitiveservices.DeploymentScaleTypeManual),
				},
			},
		},
		&armcognitiveservices.DeploymentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/PutDeployment.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/PutDeployment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.Deployment{
			Name: to.Ptr("deploymentName"),
			Type: to.Ptr("Microsoft.CognitiveServices/accounts/deployments"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.CognitiveServices/accounts/accountName/deployments/deploymentName"),
			Properties: &armcognitiveservices.DeploymentProperties{
				Model: &armcognitiveservices.DeploymentModel{
					Name:    to.Ptr("ada"),
					Format:  to.Ptr("OpenAI"),
					Version: to.Ptr("1"),
				},
				ProvisioningState: to.Ptr(armcognitiveservices.DeploymentProvisioningStateSucceeded),
				ScaleSettings: &armcognitiveservices.DeploymentScaleSettings{
					Capacity:  to.Ptr[int32](1),
					ScaleType: to.Ptr(armcognitiveservices.DeploymentScaleTypeManual),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Deployment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Deployment)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/PutDeployment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_Delete(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/DeleteDeployment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteDeployment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewDeploymentsClient("subscriptionId", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"accountName",
		"deploymentName",
		&armcognitiveservices.DeploymentsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/DeleteDeployment.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/DeleteDeployment.json: %v", err)
	}
}

func TestCommitmentPlans_List(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListCommitmentPlans.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListCommitmentPlans"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewCommitmentPlansClient("subscriptionId", cred, &options)
	pager := client.List("resourceGroupName",
		"accountName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListCommitmentPlans.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcognitiveservices.CommitmentPlanListResult{
			Value: []*armcognitiveservices.CommitmentPlan{
				{
					Name: to.Ptr("commitmentPlanName"),
					Type: to.Ptr("Microsoft.CognitiveServices/accounts/commitmentPlans"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.CognitiveServices/accounts/accountName/commitmentPlans/commitmentPlanName"),
					Properties: &armcognitiveservices.CommitmentPlanProperties{
						AutoRenew: to.Ptr(true),
						Current: &armcognitiveservices.CommitmentPeriod{
							Tier: to.Ptr("T1"),
						},
						HostingModel: to.Ptr(armcognitiveservices.HostingModelWeb),
						PlanType:     to.Ptr("Speech2Text"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CommitmentPlanListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CommitmentPlanListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/ListCommitmentPlans.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommitmentPlans_Get(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetCommitmentPlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetCommitmentPlan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewCommitmentPlansClient("subscriptionId", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroupName",
		"accountName",
		"commitmentPlanName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetCommitmentPlan.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.CommitmentPlan{
			Name: to.Ptr("commitmentPlanName"),
			Type: to.Ptr("Microsoft.CognitiveServices/accounts/commitmentPlans"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.CognitiveServices/accounts/accountName/commitmentPlans/commitmentPlanName"),
			Properties: &armcognitiveservices.CommitmentPlanProperties{
				AutoRenew: to.Ptr(true),
				Current: &armcognitiveservices.CommitmentPeriod{
					Tier: to.Ptr("T1"),
				},
				HostingModel: to.Ptr(armcognitiveservices.HostingModelWeb),
				PlanType:     to.Ptr("Speech2Text"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CommitmentPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CommitmentPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/GetCommitmentPlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommitmentPlans_CreateOrUpdate(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/PutCommitmentPlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PutCommitmentPlan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewCommitmentPlansClient("subscriptionId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroupName",
		"accountName",
		"commitmentPlanName",
		armcognitiveservices.CommitmentPlan{
			Properties: &armcognitiveservices.CommitmentPlanProperties{
				AutoRenew: to.Ptr(true),
				Current: &armcognitiveservices.CommitmentPeriod{
					Tier: to.Ptr("T1"),
				},
				HostingModel: to.Ptr(armcognitiveservices.HostingModelWeb),
				PlanType:     to.Ptr("Speech2Text"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/PutCommitmentPlan.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcognitiveservices.CommitmentPlan{
			Name: to.Ptr("commitmentPlanName"),
			Type: to.Ptr("Microsoft.CognitiveServices/accounts/commitmentPlans"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.CognitiveServices/accounts/accountName/commitmentPlans/commitmentPlanName"),
			Properties: &armcognitiveservices.CommitmentPlanProperties{
				AutoRenew: to.Ptr(true),
				Current: &armcognitiveservices.CommitmentPeriod{
					Tier: to.Ptr("T1"),
				},
				HostingModel: to.Ptr(armcognitiveservices.HostingModelWeb),
				PlanType:     to.Ptr("Speech2Text"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CommitmentPlan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CommitmentPlan)
			t.Fatalf("Mock response is not equal to example response for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/PutCommitmentPlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommitmentPlans_Delete(t *testing.T) {
	// From example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/DeleteCommitmentPlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteCommitmentPlan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcognitiveservices.NewCommitmentPlansClient("subscriptionId", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroupName",
		"accountName",
		"commitmentPlanName",
		&armcognitiveservices.CommitmentPlansClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/DeleteCommitmentPlan.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cognitiveservices/resource-manager/Microsoft.CognitiveServices/stable/2021-10-01/examples/DeleteCommitmentPlan.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
