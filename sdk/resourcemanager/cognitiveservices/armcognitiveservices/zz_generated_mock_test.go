//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcognitiveservices

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestAccounts_Create(t *testing.T) {
	// From example Create Account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"testCreate1",
		Account{
			Identity: &Identity{
				Type: ResourceIdentityTypeSystemAssigned.ToPtr(),
			},
			Kind:     to.StringPtr("Emotion"),
			Location: to.StringPtr("West US"),
			Properties: &AccountProperties{
				Encryption: &Encryption{
					KeySource: KeySourceMicrosoftKeyVault.ToPtr(),
					KeyVaultProperties: &KeyVaultProperties{
						KeyName:     to.StringPtr("KeyName"),
						KeyVaultURI: to.StringPtr("https://pltfrmscrts-use-pc-dev.vault.azure.net/"),
						KeyVersion:  to.StringPtr("891CF236-D241-4738-9462-D506AF493DFA"),
					},
				},
				UserOwnedStorage: []*UserOwnedStorage{
					{
						ResourceID: to.StringPtr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
					}},
			},
			SKU: &SKU{
				Name: to.StringPtr("S0"),
			},
		},
		&AccountsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Account.ID == nil {
		t.Fatal("Account.ID should not be nil!")
	}

	// From example Create Account Min
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"testCreate1",
		Account{
			Identity: &Identity{
				Type: ResourceIdentityTypeSystemAssigned.ToPtr(),
			},
			Kind:       to.StringPtr("CognitiveServices"),
			Location:   to.StringPtr("West US"),
			Properties: &AccountProperties{},
			SKU: &SKU{
				Name: to.StringPtr("S0"),
			},
		},
		&AccountsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Account.ID == nil {
		t.Fatal("Account.ID should not be nil!")
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example Update Account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	poller, err := client.BeginUpdate(ctx,
		"bvttest",
		"bingSearch",
		Account{
			Location: to.StringPtr("global"),
			SKU: &SKU{
				Name: to.StringPtr("S2"),
			},
		},
		&AccountsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Account.ID == nil {
		t.Fatal("Account.ID should not be nil!")
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example Delete Account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"PropTest01",
		&AccountsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example Get Account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myAccount",
		&AccountsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Account.ID == nil {
		t.Fatal("Account.ID should not be nil!")
	}
}

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example List Accounts by Resource Group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	pager := client.ListByResourceGroup("myResourceGroup",
		&AccountsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Account.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Account.ID should not be nil!")
			}
		}
	}
}

func TestAccounts_List(t *testing.T) {
	// From example List Accounts by Subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	pager := client.List(&AccountsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Account.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Account.ID should not be nil!")
			}
		}
	}
}

func TestAccounts_ListKeys(t *testing.T) {
	// From example List Keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.ListKeys(ctx,
		"myResourceGroup",
		"myAccount",
		&AccountsListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccounts_RegenerateKey(t *testing.T) {
	// From example Regenerate Keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.RegenerateKey(ctx,
		"myResourceGroup",
		"myAccount",
		RegenerateKeyParameters{
			KeyName: KeyNameKey2.ToPtr(),
		},
		&AccountsRegenerateKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccounts_ListSkus(t *testing.T) {
	// From example List SKUs
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.ListSKUs(ctx,
		"myResourceGroup",
		"myAccount",
		&AccountsListSKUsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccounts_ListUsages(t *testing.T) {
	// From example Get Usages
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"5a4f5c2e-6983-4ccb-bd34-2196d5b5bbd3")
	_, err := client.ListUsages(ctx,
		"myResourceGroup",
		"TestUsage02",
		&AccountsListUsagesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDeletedAccounts_Get(t *testing.T) {
	// From example Get Account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeletedAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	res, err := client.Get(ctx,
		"westus",
		"myResourceGroup",
		"myAccount",
		&DeletedAccountsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Account.ID == nil {
		t.Fatal("Account.ID should not be nil!")
	}
}

func TestDeletedAccounts_Purge(t *testing.T) {
	// From example Delete Account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeletedAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	poller, err := client.BeginPurge(ctx,
		"westus",
		"myResourceGroup",
		"PropTest01",
		&DeletedAccountsBeginPurgeOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDeletedAccounts_List(t *testing.T) {
	// From example List Deleted Accounts by Subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeletedAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	pager := client.List(&DeletedAccountsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Account.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Account.ID should not be nil!")
			}
		}
	}
}

func TestResourceSkus_List(t *testing.T) {
	// From example Regenerate Keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceSKUsClient(con,
		"f1c637e4-72ec-4f89-8d2b-0f933c036002")
	pager := client.List(&ResourceSKUsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example Get Operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func Test_CheckSkuAvailability(t *testing.T) {
	// From example Check SKU Availability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCognitiveServicesManagementClientClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.CheckSKUAvailability(ctx,
		"westus",
		CheckSKUAvailabilityParameter{
			Type: to.StringPtr("Microsoft.CognitiveServices/accounts"),
			Kind: to.StringPtr("Face"),
			SKUs: []*string{
				to.StringPtr("S0")},
		},
		&CognitiveServicesManagementClientCheckSKUAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func Test_CheckDomainAvailability(t *testing.T) {
	// From example Check SKU Availability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCognitiveServicesManagementClientClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.CheckDomainAvailability(ctx,
		CheckDomainAvailabilityParameter{
			Type:          to.StringPtr("Microsoft.CognitiveServices/accounts"),
			SubdomainName: to.StringPtr("contosodemoapp1"),
		},
		&CognitiveServicesManagementClientCheckDomainAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example GetPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"{subscription-id}")
	_, err := client.List(ctx,
		"res6977",
		"sto2527",
		&PrivateEndpointConnectionsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example GetPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"{subscription-id}")
	res, err := client.Get(ctx,
		"res6977",
		"sto2527",
		"{privateEndpointConnectionName}",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example PutPrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"{subscription-id}")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"res7687",
		"sto9699",
		"{privateEndpointConnectionName}",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Auto-Approved"),
					Status:      PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example DeletePrivateEndpointConnection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"{subscription-id}")
	poller, err := client.BeginDelete(ctx,
		"res6977",
		"sto2527",
		"{privateEndpointConnectionName}",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example ListPrivateLinkResources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"{subscription-id}")
	_, err := client.List(ctx,
		"res6977",
		"sto2527",
		&PrivateLinkResourcesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
