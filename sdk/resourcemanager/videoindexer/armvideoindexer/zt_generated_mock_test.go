//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvideoindexer_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"
	"time"

	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/videoindexer/armvideoindexer"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViOperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvideoindexer.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViOperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvideoindexer.OperationListResult{
			Value: []*armvideoindexer.Operation{
				{
					Name: to.Ptr("Microsoft.VideoIndexer/accounts/read"),
					Display: &armvideoindexer.OperationDisplay{
						Description: to.Ptr("Read accounts"),
						Operation:   to.Ptr("Read accounts"),
						Provider:    to.Ptr("Microsoft Azure Video Analyzer for Media"),
						Resource:    to.Ptr("Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.VideoIndexer/accounts/write"),
					Display: &armvideoindexer.OperationDisplay{
						Description: to.Ptr("Update accounts"),
						Operation:   to.Ptr("Update accounts"),
						Provider:    to.Ptr("Microsoft Azure Video Analyzer for Media"),
						Resource:    to.Ptr("Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.VideoIndexer/accounts/delete"),
					Display: &armvideoindexer.OperationDisplay{
						Description: to.Ptr("Delete accounts"),
						Operation:   to.Ptr("Delete accounts"),
						Provider:    to.Ptr("Microsoft Azure Video Analyzer for Media"),
						Resource:    to.Ptr("Account"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViOperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_CheckNameAvailability(t *testing.T) {
	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountCheckNameAvailabilityFree.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check free account name availability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvideoindexer.NewAccountsClient("586d4f48-8f08-4a4e-96b7-e1892d6dba9e", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armvideoindexer.AccountCheckNameAvailabilityParameters{
			Name: to.Ptr("vi1"),
			Type: to.Ptr(armvideoindexer.TypeMicrosoftVideoIndexerAccounts),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountCheckNameAvailabilityFree.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.CheckNameAvailabilityResult{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountCheckNameAvailabilityFree.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountCheckNameAvailabilityTaken.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check taken account name availability"},
	})
	client = armvideoindexer.NewAccountsClient("586d4f48-8f08-4a4e-96b7-e1892d6dba9e", cred, &options)
	res, err = client.CheckNameAvailability(ctx,
		armvideoindexer.AccountCheckNameAvailabilityParameters{
			Name: to.Ptr("vi1"),
			Type: to.Ptr(armvideoindexer.TypeMicrosoftVideoIndexerAccounts),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountCheckNameAvailabilityTaken.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.CheckNameAvailabilityResult{
			Message:       to.Ptr("Resource name already exists"),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr(armvideoindexer.ReasonAlreadyExists),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountCheckNameAvailabilityTaken.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_List(t *testing.T) {
	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List accounts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvideoindexer.NewAccountsClient("586d4f48-8f08-4a4e-96b7-e1892d6dba9e", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvideoindexer.AccountList{
			Value: []*armvideoindexer.Account{
				{
					Name:     to.Ptr("vi1"),
					Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
					ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contoso-videoanalyzer"),
					Location: to.Ptr("NorthEurope"),
					Tags:     map[string]*string{},
					Identity: &armvideoindexer.ManagedServiceIdentity{
						Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
						UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
							"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
								ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
								PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
							},
						},
					},
					Properties: &armvideoindexer.AccountPropertiesForPutRequest{
						AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
						AccountName: to.Ptr("contosto-videoanalyzer"),
						MediaServices: &armvideoindexer.MediaServicesForPutRequest{
							ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
							UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
						},
						ProvisioningState: to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
						TenantID:          to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountList)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountsListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List accounts by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvideoindexer.NewAccountsClient("586d4f48-8f08-4a4e-96b7-e1892d6dba9e", cred, &options)
	pager := client.ListByResourceGroup("contoso-videoanalyzer-rg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountsListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvideoindexer.AccountList{
			Value: []*armvideoindexer.Account{
				{
					Name:     to.Ptr("vi1"),
					Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
					ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contoso-videoanalyzer-rg"),
					Location: to.Ptr("NorthEurope"),
					Tags:     map[string]*string{},
					Identity: &armvideoindexer.ManagedServiceIdentity{
						Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
						UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
							"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
								ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
								PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
							},
						},
					},
					Properties: &armvideoindexer.AccountPropertiesForPutRequest{
						AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
						AccountName: to.Ptr("contosto-videoanalyzer"),
						MediaServices: &armvideoindexer.MediaServicesForPutRequest{
							ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
							UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
						},
						ProvisioningState: to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
						TenantID:          to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountList)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountsListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvideoindexer.NewAccountsClient("586d4f48-8f08-4a4e-96b7-e1892d6dba9e", cred, &options)
	res, err := client.Get(ctx,
		"contoso-rg",
		"contosto-videoanalyzer",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:     to.Ptr("vi1"),
			Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contoso-videoanalyzer"),
			Location: to.Ptr("NorthEurope"),
			Tags:     map[string]*string{},
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
						ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
						PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
					},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
				AccountName: to.Ptr("contosto-videoanalyzer"),
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
				ProvisioningState: to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
				TenantID:          to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch1.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch example #1"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err := client.Update(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientUpdateOptions{Parameters: &armvideoindexer.AccountPatch{
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPatchRequest{
				MediaServices: &armvideoindexer.MediaServicesForPatchRequest{
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch1.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:     to.Ptr("contosto-videoanalyzer"),
			Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location: to.Ptr("NorthEurope"),
			Tags:     map[string]*string{},
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
						ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
						PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
					},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
				AccountName: to.Ptr("contosto-videoanalyzer"),
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
				ProvisioningState:   to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
				TenantID:            to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
				TotalSecondsIndexed: to.Ptr[int32](1000),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch1.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch example #2"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.Update(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientUpdateOptions{Parameters: &armvideoindexer.AccountPatch{
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPatchRequest{
				MediaServices: &armvideoindexer.MediaServicesForPatchRequest{
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch2.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:     to.Ptr("contosto-videoanalyzer"),
			Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location: to.Ptr("NorthEurope"),
			Tags:     map[string]*string{},
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
						ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
						PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
					},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
				AccountName: to.Ptr("contosto-videoanalyzer"),
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
				ProvisioningState:   to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
				TenantID:            to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
				TotalSecondsIndexed: to.Ptr[int32](1000),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch3.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch example #3"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.Update(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientUpdateOptions{Parameters: &armvideoindexer.AccountPatch{
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPatchRequest{
				MediaServices: &armvideoindexer.MediaServicesForPatchRequest{
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch3.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:     to.Ptr("contosto-videoanalyzer"),
			Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location: to.Ptr("NorthEurope"),
			Tags:     map[string]*string{},
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
						ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
						PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
					},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
				AccountName: to.Ptr("contosto-videoanalyzer"),
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
				ProvisioningState:   to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
				TenantID:            to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
				TotalSecondsIndexed: to.Ptr[int32](1000),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch3.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch4.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch example #4"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.Update(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientUpdateOptions{Parameters: &armvideoindexer.AccountPatch{
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPatchRequest{
				MediaServices: &armvideoindexer.MediaServicesForPatchRequest{
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch4.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:     to.Ptr("contosto-videoanalyzer"),
			Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location: to.Ptr("NorthEurope"),
			Tags:     map[string]*string{},
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
						ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
						PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
					},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
				AccountName: to.Ptr("contosto-videoanalyzer"),
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
				ProvisioningState:   to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
				TenantID:            to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
				TotalSecondsIndexed: to.Ptr[int32](1000),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch4.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch5.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch example #5"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.Update(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientUpdateOptions{Parameters: &armvideoindexer.AccountPatch{
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPatchRequest{
				MediaServices: &armvideoindexer.MediaServicesForPatchRequest{
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch5.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:     to.Ptr("contosto-videoanalyzer"),
			Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location: to.Ptr("NorthEurope"),
			Tags:     map[string]*string{},
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
						ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
						PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
					},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
				AccountName: to.Ptr("contosto-videoanalyzer"),
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
				ProvisioningState:   to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
				TenantID:            to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
				TotalSecondsIndexed: to.Ptr[int32](1000),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch5.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch6.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch example #6"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.Update(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientUpdateOptions{Parameters: &armvideoindexer.AccountPatch{}})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch6.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:       to.Ptr("contosto-videoanalyzer"),
			Type:       to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:         to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location:   to.Ptr("NorthEurope"),
			Tags:       map[string]*string{},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch6.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch7.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch example #7"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.Update(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientUpdateOptions{Parameters: &armvideoindexer.AccountPatch{
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {},
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch7.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:       to.Ptr("contosto-videoanalyzer"),
			Type:       to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:         to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location:   to.Ptr("NorthEurope"),
			Tags:       map[string]*string{},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch7.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch8.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch example #8"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.Update(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientUpdateOptions{Parameters: &armvideoindexer.AccountPatch{
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type:                   to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{},
			},
			Properties: &armvideoindexer.AccountPropertiesForPatchRequest{
				MediaServices: &armvideoindexer.MediaServicesForPatchRequest{
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch8.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:       to.Ptr("contosto-videoanalyzer"),
			Type:       to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:         to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location:   to.Ptr("NorthEurope"),
			Tags:       map[string]*string{},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPatch/ViAccountPatch8.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_CreateOrUpdate(t *testing.T) {
	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut1.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put example #1"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientCreateOrUpdateOptions{Parameters: &armvideoindexer.Account{
			Location: to.Ptr("NorthEurope"),
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut1.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:     to.Ptr("contosto-videoanalyzer"),
			Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location: to.Ptr("NorthEurope"),
			Tags:     map[string]*string{},
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
						ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
						PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
					},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
				AccountName: to.Ptr("contosto-videoanalyzer"),
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
				ProvisioningState:   to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
				TenantID:            to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
				TotalSecondsIndexed: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut1.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut10.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put example #10"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientCreateOrUpdateOptions{Parameters: &armvideoindexer.Account{
			Location: to.Ptr("NorthEurope"),
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type:                   to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut10.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:       to.Ptr("contosto-videoanalyzer"),
			Type:       to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:         to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location:   to.Ptr("NorthEurope"),
			Tags:       map[string]*string{},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut10.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put example #2"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientCreateOrUpdateOptions{Parameters: &armvideoindexer.Account{
			Location: to.Ptr("NorthEurope"),
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut2.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:     to.Ptr("contosto-videoanalyzer"),
			Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location: to.Ptr("NorthEurope"),
			Tags:     map[string]*string{},
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
						ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
						PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
					},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
				AccountName: to.Ptr("contosto-videoanalyzer"),
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
				ProvisioningState:   to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
				TenantID:            to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
				TotalSecondsIndexed: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut3.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put example #3"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientCreateOrUpdateOptions{Parameters: &armvideoindexer.Account{
			Location: to.Ptr("NorthEurope"),
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut3.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:     to.Ptr("contosto-videoanalyzer"),
			Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location: to.Ptr("NorthEurope"),
			Tags:     map[string]*string{},
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
						ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
						PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
					},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
				AccountName: to.Ptr("contosto-videoanalyzer"),
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
				ProvisioningState:   to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
				TenantID:            to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
				TotalSecondsIndexed: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut3.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut4.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put example #4"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientCreateOrUpdateOptions{Parameters: &armvideoindexer.Account{
			Location: to.Ptr("NorthEurope"),
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut4.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:     to.Ptr("contosto-videoanalyzer"),
			Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location: to.Ptr("NorthEurope"),
			Tags:     map[string]*string{},
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
						ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
						PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
					},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
				AccountName: to.Ptr("contosto-videoanalyzer"),
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
				ProvisioningState:   to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
				TenantID:            to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
				TotalSecondsIndexed: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut4.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut5.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put example #5"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientCreateOrUpdateOptions{Parameters: &armvideoindexer.Account{
			Location: to.Ptr("NorthEurope"),
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut5.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:     to.Ptr("contosto-videoanalyzer"),
			Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location: to.Ptr("NorthEurope"),
			Tags:     map[string]*string{},
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
						ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
						PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
					},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
				AccountName: to.Ptr("contosto-videoanalyzer"),
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
				ProvisioningState:   to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
				TenantID:            to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
				TotalSecondsIndexed: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut5.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut6.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put example #6"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientCreateOrUpdateOptions{Parameters: &armvideoindexer.Account{
			Location: to.Ptr("NorthEurope"),
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut6.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:     to.Ptr("contosto-videoanalyzer"),
			Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location: to.Ptr("NorthEurope"),
			Tags:     map[string]*string{},
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
						ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
						PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
					},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
				AccountName: to.Ptr("contosto-videoanalyzer"),
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
				ProvisioningState:   to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
				TenantID:            to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
				TotalSecondsIndexed: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut6.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut7.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put example #7"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientCreateOrUpdateOptions{Parameters: &armvideoindexer.Account{
			Location: to.Ptr("NorthEurope"),
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut7.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:     to.Ptr("contosto-videoanalyzer"),
			Type:     to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:       to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location: to.Ptr("NorthEurope"),
			Tags:     map[string]*string{},
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi": {
						ClientID:    to.Ptr("92e65ecf-0fae-432e-8272-fedb6edb96c7"),
						PrincipalID: to.Ptr("a661c16c-ee39-46e7-93f6-7fb80d17ef13"),
					},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				AccountID:   to.Ptr("462af7c5-d1f6-4b91-86e3-8bc5e8a61574"),
				AccountName: to.Ptr("contosto-videoanalyzer"),
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID:           to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms"),
					UserAssignedIdentity: to.Ptr("/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi"),
				},
				ProvisioningState:   to.Ptr(armvideoindexer.ProvisioningStateSucceeded),
				TenantID:            to.Ptr("8c406f87-77ac-4ebb-a401-e8562450630e"),
				TotalSecondsIndexed: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut7.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut8.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put example #8"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientCreateOrUpdateOptions{Parameters: &armvideoindexer.Account{
			Location: to.Ptr("NorthEurope"),
			Identity: &armvideoindexer.ManagedServiceIdentity{
				Type: to.Ptr(armvideoindexer.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armvideoindexer.UserAssignedIdentity{
					"subscriptions/24237b72-8546-4da5-b204-8c3cb76dd930/resourceGroups/uratzmon-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/talshoham": {},
				},
			},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{
				MediaServices: &armvideoindexer.MediaServicesForPutRequest{
					ResourceID: to.Ptr("/subscriptions/24237b72-8546-4da5-b204-8c3cb76dd930/resourceGroups/uratzmon-rg/providers/Microsoft.Media/mediaservices/talshoham"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut8.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:       to.Ptr("contosto-videoanalyzer"),
			Type:       to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:         to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location:   to.Ptr("NorthEurope"),
			Tags:       map[string]*string{},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut8.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut9.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put example #9"},
	})
	client = armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.AccountsClientCreateOrUpdateOptions{Parameters: &armvideoindexer.Account{}})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut9.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.Account{
			Name:       to.Ptr("contosto-videoanalyzer"),
			Type:       to.Ptr("Microsoft.VideoIndexer/accounts"),
			ID:         to.Ptr("/subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer"),
			Location:   to.Ptr("NorthEurope"),
			Tags:       map[string]*string{},
			Properties: &armvideoindexer.AccountPropertiesForPutRequest{},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountPut/ViAccountPut9.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvideoindexer.NewAccountsClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	_, err := client.Delete(ctx,
		"contoso-rg",
		"contosto-videoanalyzer",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViAccountDelete.json: %v", err)
	}
}

func TestUserClassicAccounts_List(t *testing.T) {
	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViListUserClassicAccounts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List accounts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvideoindexer.NewUserClassicAccountsClient(cred, &options)
	pager := client.List("NorthEurope",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViListUserClassicAccounts.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvideoindexer.UserClassicAccountList{
			Value: []*armvideoindexer.ClassicAccountSlim{
				{
					Name:     to.Ptr("contoso-videoanalyzer"),
					Location: to.Ptr("NorthEurope"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UserClassicAccountList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UserClassicAccountList)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViListUserClassicAccounts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClassicAccounts_GetDetails(t *testing.T) {
	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViClassicAccounts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvideoindexer.NewClassicAccountsClient(cred, &options)
	res, err := client.GetDetails(ctx,
		"NorthEurope",
		"contosto-videoanalyzer",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViClassicAccounts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.ClassicAccount{
			Name:     to.Ptr("contosto-videoanalyzer"),
			Location: to.Ptr("NorthEurope"),
			Properties: &armvideoindexer.ClassicAccountProperties{
				MediaServices: &armvideoindexer.ClassicAccountMediaServices{
					Name:                        to.Ptr("contosoVideoanalyzerMediaServices"),
					AADApplicationID:            to.Ptr("912f96dc-1ed3-4d7d-aa67-0adef4bb68ad"),
					AADTenantID:                 to.Ptr("72f988bf-86f1-41ag-91ab-2d7cd061db47"),
					Connected:                   to.Ptr(true),
					EventGridProviderRegistered: to.Ptr(true),
					ResourceGroup:               to.Ptr("contoso-videoanalyzer-rg"),
					StreamingEndpointStarted:    to.Ptr(false),
					SubscriptionID:              to.Ptr("586d4f48-8f08-4a4e-96b7-e1892d6dba9e"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ClassicAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ClassicAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViClassicAccounts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGenerate_AccessToken(t *testing.T) {
	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateAccountContributerAccessToken.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate accessToken for account contributor"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvideoindexer.NewGenerateClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err := client.AccessToken(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.GenerateClientAccessTokenOptions{Parameters: &armvideoindexer.GenerateAccessTokenParameters{
			PermissionType: to.Ptr(armvideoindexer.PermissionTypeContributor),
			Scope:          to.Ptr(armvideoindexer.ScopeAccount),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateAccountContributerAccessToken.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.AccessToken{
			AccessToken: to.Ptr("<jwt token of 1260 characters length>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessToken) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessToken)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateAccountContributerAccessToken.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateAccountReaderAccessToken.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate accessToken for account reader"},
	})
	client = armvideoindexer.NewGenerateClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.AccessToken(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.GenerateClientAccessTokenOptions{Parameters: &armvideoindexer.GenerateAccessTokenParameters{
			PermissionType: to.Ptr(armvideoindexer.PermissionTypeReader),
			Scope:          to.Ptr(armvideoindexer.ScopeAccount),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateAccountReaderAccessToken.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.AccessToken{
			AccessToken: to.Ptr("<jwt token of 1260 characters length>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessToken) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessToken)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateAccountReaderAccessToken.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateProjectContributerAccessToken1.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate accessToken for project contributor #1"},
	})
	client = armvideoindexer.NewGenerateClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.AccessToken(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.GenerateClientAccessTokenOptions{Parameters: &armvideoindexer.GenerateAccessTokenParameters{
			PermissionType: to.Ptr(armvideoindexer.PermissionTypeContributor),
			ProjectID:      to.Ptr("07ec9e38d4"),
			Scope:          to.Ptr(armvideoindexer.ScopeProject),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateProjectContributerAccessToken1.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.AccessToken{
			AccessToken: to.Ptr("<jwt token of 1260 characters length>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessToken) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessToken)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateProjectContributerAccessToken1.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateProjectContributerAccessToken2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate accessToken for project contributor #2"},
	})
	client = armvideoindexer.NewGenerateClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.AccessToken(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.GenerateClientAccessTokenOptions{Parameters: &armvideoindexer.GenerateAccessTokenParameters{
			PermissionType: to.Ptr(armvideoindexer.PermissionTypeContributor),
			ProjectID:      to.Ptr("07ec9e38d4"),
			Scope:          to.Ptr(armvideoindexer.ScopeProject),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateProjectContributerAccessToken2.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.AccessToken{
			AccessToken: to.Ptr("<jwt token of 1260 characters length>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessToken) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessToken)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateProjectContributerAccessToken2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateProjectReaderAccessToken1.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate accessToken for project reader #1"},
	})
	client = armvideoindexer.NewGenerateClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.AccessToken(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.GenerateClientAccessTokenOptions{Parameters: &armvideoindexer.GenerateAccessTokenParameters{
			PermissionType: to.Ptr(armvideoindexer.PermissionTypeReader),
			ProjectID:      to.Ptr("07ec9e38d4"),
			Scope:          to.Ptr(armvideoindexer.ScopeProject),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateProjectReaderAccessToken1.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.AccessToken{
			AccessToken: to.Ptr("<jwt token of 1260 characters length>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessToken) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessToken)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateProjectReaderAccessToken1.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateProjectReaderAccessToken2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate accessToken for project reader #2"},
	})
	client = armvideoindexer.NewGenerateClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.AccessToken(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.GenerateClientAccessTokenOptions{Parameters: &armvideoindexer.GenerateAccessTokenParameters{
			PermissionType: to.Ptr(armvideoindexer.PermissionTypeReader),
			ProjectID:      to.Ptr("07ec9e38d4"),
			Scope:          to.Ptr(armvideoindexer.ScopeProject),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateProjectReaderAccessToken2.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.AccessToken{
			AccessToken: to.Ptr("<jwt token of 1260 characters length>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessToken) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessToken)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateProjectReaderAccessToken2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateVideoContributerAccessToken1.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate accessToken for video contributor #1"},
	})
	client = armvideoindexer.NewGenerateClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.AccessToken(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.GenerateClientAccessTokenOptions{Parameters: &armvideoindexer.GenerateAccessTokenParameters{
			PermissionType: to.Ptr(armvideoindexer.PermissionTypeContributor),
			Scope:          to.Ptr(armvideoindexer.ScopeVideo),
			VideoID:        to.Ptr("07ec9e38d4"),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateVideoContributerAccessToken1.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.AccessToken{
			AccessToken: to.Ptr("<jwt token of 1260 characters length>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessToken) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessToken)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateVideoContributerAccessToken1.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateVideoContributerAccessToken2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate accessToken for video contributor #2"},
	})
	client = armvideoindexer.NewGenerateClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.AccessToken(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.GenerateClientAccessTokenOptions{Parameters: &armvideoindexer.GenerateAccessTokenParameters{
			PermissionType: to.Ptr(armvideoindexer.PermissionTypeContributor),
			Scope:          to.Ptr(armvideoindexer.ScopeVideo),
			VideoID:        to.Ptr("07ec9e38d4"),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateVideoContributerAccessToken2.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.AccessToken{
			AccessToken: to.Ptr("<jwt token of 1260 characters length>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessToken) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessToken)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateVideoContributerAccessToken2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateVideoReaderAccessToken1.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate accessToken for video reader #1"},
	})
	client = armvideoindexer.NewGenerateClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.AccessToken(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.GenerateClientAccessTokenOptions{Parameters: &armvideoindexer.GenerateAccessTokenParameters{
			PermissionType: to.Ptr(armvideoindexer.PermissionTypeReader),
			Scope:          to.Ptr(armvideoindexer.ScopeVideo),
			VideoID:        to.Ptr("07ec9e38d4"),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateVideoReaderAccessToken1.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.AccessToken{
			AccessToken: to.Ptr("<jwt token of 1260 characters length>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessToken) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessToken)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateVideoReaderAccessToken1.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateVideoReaderAccessToken2.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate accessToken for video reader #2"},
	})
	client = armvideoindexer.NewGenerateClient("b04775c3-63fa-40f3-9430-139d2e5522d3", cred, &options)
	res, err = client.AccessToken(ctx,
		"contosto-videoanalyzer-rg",
		"contosto-videoanalyzer",
		&armvideoindexer.GenerateClientAccessTokenOptions{Parameters: &armvideoindexer.GenerateAccessTokenParameters{
			PermissionType: to.Ptr(armvideoindexer.PermissionTypeReader),
			Scope:          to.Ptr(armvideoindexer.ScopeVideo),
			VideoID:        to.Ptr("07ec9e38d4"),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateVideoReaderAccessToken2.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvideoindexer.AccessToken{
			AccessToken: to.Ptr("<jwt token of 1260 characters length>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessToken) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessToken)
			t.Fatalf("Mock response is not equal to example response for example specification/vi/resource-manager/Microsoft.VideoIndexer/preview/2021-11-10-preview/examples/ViGenerateAccessToken/ViGenerateVideoReaderAccessToken2.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
