//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsqlvirtualmachine_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sqlvirtualmachine/armsqlvirtualmachine"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAvailabilityGroupListeners_Get(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/GetAvailabilityGroupListener.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets an availability group listener."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewAvailabilityGroupListenersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"testvmgroup",
		"agl-test",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/GetAvailabilityGroupListener.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsqlvirtualmachine.AvailabilityGroupListener{
			Name: to.Ptr("agl-test"),
			Type: to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/availabilityGroupListeners"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/testvmgroup/availabilityGroupListeners/agl-test"),
			Properties: &armsqlvirtualmachine.AvailabilityGroupListenerProperties{
				AvailabilityGroupName: to.Ptr("ag-test"),
				LoadBalancerConfigurations: []*armsqlvirtualmachine.LoadBalancerConfiguration{
					{
						LoadBalancerResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb-test"),
						PrivateIPAddress: &armsqlvirtualmachine.PrivateIPAddress{
							IPAddress:        to.Ptr("10.1.0.112"),
							SubnetResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
						},
						ProbePort: to.Ptr[int32](59983),
						SQLVirtualMachineInstances: []*string{
							to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm3"),
							to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm2")},
					}},
				Port:              to.Ptr[int32](1433),
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AvailabilityGroupListener) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailabilityGroupListener)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/GetAvailabilityGroupListener.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailabilityGroupListeners_CreateOrUpdate(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateAvailabilityGroupListener.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates an availability group listener."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewAvailabilityGroupListenersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testvmgroup",
		"agl-test",
		armsqlvirtualmachine.AvailabilityGroupListener{
			Properties: &armsqlvirtualmachine.AvailabilityGroupListenerProperties{
				AvailabilityGroupName: to.Ptr("ag-test"),
				LoadBalancerConfigurations: []*armsqlvirtualmachine.LoadBalancerConfiguration{
					{
						LoadBalancerResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb-test"),
						PrivateIPAddress: &armsqlvirtualmachine.PrivateIPAddress{
							IPAddress:        to.Ptr("10.1.0.112"),
							SubnetResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
						},
						ProbePort: to.Ptr[int32](59983),
						SQLVirtualMachineInstances: []*string{
							to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm2"),
							to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm3")},
					}},
				Port: to.Ptr[int32](1433),
			},
		},
		&armsqlvirtualmachine.AvailabilityGroupListenersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateAvailabilityGroupListener.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateAvailabilityGroupListener.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsqlvirtualmachine.AvailabilityGroupListener{
			Name: to.Ptr("agl-test"),
			Type: to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/availabilityGroupListeners"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/testvmgroup/availabilityGroupListeners/agl-test"),
			Properties: &armsqlvirtualmachine.AvailabilityGroupListenerProperties{
				LoadBalancerConfigurations: []*armsqlvirtualmachine.LoadBalancerConfiguration{
					{
						PrivateIPAddress: &armsqlvirtualmachine.PrivateIPAddress{
							IPAddress:        to.Ptr("10.1.0.113"),
							SubnetResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
						},
						SQLVirtualMachineInstances: []*string{
							to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm2"),
							to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm3")},
					}},
				Port:              to.Ptr[int32](1433),
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AvailabilityGroupListener) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailabilityGroupListener)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateAvailabilityGroupListener.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailabilityGroupListeners_Delete(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/DeleteAvailabilityGroupListener.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes an availability group listener."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewAvailabilityGroupListenersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"testvmgroup",
		"agl-test",
		&armsqlvirtualmachine.AvailabilityGroupListenersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/DeleteAvailabilityGroupListener.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/DeleteAvailabilityGroupListener.json: %v", err)
	}
}

func TestAvailabilityGroupListeners_ListByGroup(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListByGroupAvailabilityGroupListener.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all availability group listeners in a SQL virtual machine group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewAvailabilityGroupListenersClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByGroup("testrg",
		"testvmgroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListByGroupAvailabilityGroupListener.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsqlvirtualmachine.AvailabilityGroupListenerListResult{
			Value: []*armsqlvirtualmachine.AvailabilityGroupListener{
				{
					Name: to.Ptr("agl-test"),
					Type: to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/availabilityGroupListeners"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/testvmgroup/availabilityGroupListeners/agl-test"),
					Properties: &armsqlvirtualmachine.AvailabilityGroupListenerProperties{
						AvailabilityGroupName: to.Ptr("ag-test"),
						LoadBalancerConfigurations: []*armsqlvirtualmachine.LoadBalancerConfiguration{
							{
								LoadBalancerResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb-test"),
								PrivateIPAddress: &armsqlvirtualmachine.PrivateIPAddress{
									IPAddress:        to.Ptr("10.1.0.112"),
									SubnetResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default"),
								},
								ProbePort: to.Ptr[int32](59983),
								SQLVirtualMachineInstances: []*string{
									to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm3"),
									to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm2")},
							}},
						Port:              to.Ptr[int32](1433),
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailabilityGroupListenerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailabilityGroupListenerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListByGroupAvailabilityGroupListener.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all of the available SQL Rest API operations."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListOperation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsqlvirtualmachine.OperationListResult{
			Value: []*armsqlvirtualmachine.Operation{
				{
					Name: to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/read"),
					Display: &armsqlvirtualmachine.OperationDisplay{
						Description: to.Ptr("Retrives details of SQL VirtualMachine Group"),
						Operation:   to.Ptr("Get SQL VirtualMachine Group details"),
						Resource:    to.Ptr("SQL VirtualMachine Group"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/write"),
					Display: &armsqlvirtualmachine.OperationDisplay{
						Description: to.Ptr("Create a new or change properties of existing SQL VirtualMachine Group"),
						Operation:   to.Ptr("Create a new or update existing SQL VirtualMachine Group"),
						Resource:    to.Ptr("SQL VirtualMachine Group"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/delete"),
					Display: &armsqlvirtualmachine.OperationDisplay{
						Description: to.Ptr("Delete existing SQL VirtualMachine Group"),
						Operation:   to.Ptr("Delete existing SQL VirtualMachine Group"),
						Resource:    to.Ptr("SQL VirtualMachine Group"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/availabilityGroupListeners/read"),
					Display: &armsqlvirtualmachine.OperationDisplay{
						Description: to.Ptr("Retrieves details of SQL AvailabilityGroup Listener on a given SQL VirtualMachine Group"),
						Operation:   to.Ptr("Get AvailabilityGroup Listener details"),
						Resource:    to.Ptr("SQL AvailabilityGroup Listener"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/availabilityGroupListeners/write"),
					Display: &armsqlvirtualmachine.OperationDisplay{
						Description: to.Ptr("Create a new or change properties of existing SQL AvailabilityGroup Listener"),
						Operation:   to.Ptr("Create new or update exising AvailabilityGroup Listener"),
						Resource:    to.Ptr("SQL AvailabilityGroup Listener"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/availabilityGroupListeners/delete"),
					Display: &armsqlvirtualmachine.OperationDisplay{
						Description: to.Ptr("Delete existing AvailabilityGroup Listener"),
						Operation:   to.Ptr("Delete existing AvailabilityGroup Listener"),
						Resource:    to.Ptr("SQL AvailabilityGroup Listener"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SqlVirtualMachine/locations/availabilityGroupListenerOperationResults/read"),
					Display: &armsqlvirtualmachine.OperationDisplay{
						Description: to.Ptr("Get result of an AvailabilityGroup Listener operation"),
						Operation:   to.Ptr("Get AvailabilityGroup Listener operation result"),
						Resource:    to.Ptr("SQL AvailabilityGroup Listener"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SqlVirtualMachine/operations/read"),
					Display: &armsqlvirtualmachine.OperationDisplay{
						Resource: to.Ptr("Available REST operations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SqlVirtualMachine/locations/sqlVirtualMachineGroupOperationResults/read"),
					Display: &armsqlvirtualmachine.OperationDisplay{
						Description: to.Ptr("Get result of a SQL VirtualMachine Group operation"),
						Operation:   to.Ptr("Get SQL VirtualMachine Group operation result"),
						Resource:    to.Ptr("SQL VirtualMachine Group"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines/read"),
					Display: &armsqlvirtualmachine.OperationDisplay{
						Description: to.Ptr("Retrieves details of SQL VirtualMachine"),
						Operation:   to.Ptr("Get SQL VirtualMachine Instance details"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines/write"),
					Display: &armsqlvirtualmachine.OperationDisplay{
						Description: to.Ptr("Create a new or change properties of existing SQL VirtualMachine"),
						Operation:   to.Ptr("Create new or update existing SQL VirtualMachine"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines/delete"),
					Display: &armsqlvirtualmachine.OperationDisplay{
						Description: to.Ptr("Delete exisiting SQL VirtualMachine"),
						Operation:   to.Ptr("Delete exisiting SQL VirtualMachine"),
					},
				},
				{
					Name: to.Ptr("Microsoft.SqlVirtualMachine/locations/sqlVirtualMachineOperationResults/read"),
					Display: &armsqlvirtualmachine.OperationDisplay{
						Description: to.Ptr("Get result of SQL VirtualMachine operation"),
						Operation:   to.Ptr("Get SQL VirtualMachine operation result"),
						Resource:    to.Ptr("SQL VirtualMachine"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVirtualMachineGroups_Get(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/GetSqlVirtualMachineGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a SQL virtual machine group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"testvmgroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/GetSqlVirtualMachineGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsqlvirtualmachine.Group{
			Name:     to.Ptr("testvmgroup"),
			Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/testvmgroup"),
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			Properties: &armsqlvirtualmachine.GroupProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				SQLImageOffer:     to.Ptr("SQL2016-WS2016"),
				SQLImageSKU:       to.Ptr(armsqlvirtualmachine.SQLVMGroupImageSKUEnterprise),
				WsfcDomainProfile: &armsqlvirtualmachine.WsfcDomainProfile{
					ClusterBootstrapAccount: to.Ptr("testrpadmin"),
					ClusterOperatorAccount:  to.Ptr("testrp@testdomain.com"),
					DomainFqdn:              to.Ptr("testdomain.com"),
					OuPath:                  to.Ptr("OU=WSCluster,DC=testdomain,DC=com"),
					SQLServiceAccount:       to.Ptr("sqlservice@testdomain.com"),
					StorageAccountURL:       to.Ptr("https://storgact.blob.core.windows.net/"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Group) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Group)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/GetSqlVirtualMachineGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVirtualMachineGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a SQL virtual machine group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testvmgroup",
		armsqlvirtualmachine.Group{
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			Properties: &armsqlvirtualmachine.GroupProperties{
				SQLImageOffer: to.Ptr("SQL2016-WS2016"),
				SQLImageSKU:   to.Ptr(armsqlvirtualmachine.SQLVMGroupImageSKUEnterprise),
				WsfcDomainProfile: &armsqlvirtualmachine.WsfcDomainProfile{
					ClusterBootstrapAccount:  to.Ptr("testrpadmin"),
					ClusterOperatorAccount:   to.Ptr("testrp@testdomain.com"),
					DomainFqdn:               to.Ptr("testdomain.com"),
					OuPath:                   to.Ptr("OU=WSCluster,DC=testdomain,DC=com"),
					SQLServiceAccount:        to.Ptr("sqlservice@testdomain.com"),
					StorageAccountPrimaryKey: to.Ptr("<primary storage access key>"),
					StorageAccountURL:        to.Ptr("https://storgact.blob.core.windows.net/"),
				},
			},
		},
		&armsqlvirtualmachine.GroupsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineGroup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsqlvirtualmachine.Group{
			Name:     to.Ptr("testvmgroup"),
			Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/testvmgroup"),
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			Properties: &armsqlvirtualmachine.GroupProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				SQLImageOffer:     to.Ptr("SQL2016-WS2016"),
				SQLImageSKU:       to.Ptr(armsqlvirtualmachine.SQLVMGroupImageSKUEnterprise),
				WsfcDomainProfile: &armsqlvirtualmachine.WsfcDomainProfile{
					StorageAccountURL: to.Ptr("https://storgact.blob.core.windows.net/"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Group) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Group)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVirtualMachineGroups_Delete(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/DeleteSqlVirtualMachineGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a SQL virtual machine group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"testvmgroup",
		&armsqlvirtualmachine.GroupsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/DeleteSqlVirtualMachineGroup.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/DeleteSqlVirtualMachineGroup.json: %v", err)
	}
}

func TestSQLVirtualMachineGroups_Update(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/UpdateSqlVirtualMachineGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates a SQL virtual machine group tags."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testrg",
		"testvmgroup",
		armsqlvirtualmachine.GroupUpdate{
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
		},
		&armsqlvirtualmachine.GroupsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/UpdateSqlVirtualMachineGroup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/UpdateSqlVirtualMachineGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsqlvirtualmachine.Group{
			Name:     to.Ptr("testvmgroup"),
			Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm"),
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			Properties: &armsqlvirtualmachine.GroupProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				SQLImageOffer:     to.Ptr("SQL2017-WS2016"),
				SQLImageSKU:       to.Ptr(armsqlvirtualmachine.SQLVMGroupImageSKUEnterprise),
				WsfcDomainProfile: &armsqlvirtualmachine.WsfcDomainProfile{
					StorageAccountURL: to.Ptr("https://storgact.blob.core.windows.net/"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Group) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Group)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/UpdateSqlVirtualMachineGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVirtualMachineGroups_ListByResourceGroup(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListByResourceGroupSqlVirtualMachineGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all SQL virtual machine groups in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroup("testrg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListByResourceGroupSqlVirtualMachineGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsqlvirtualmachine.GroupListResult{
			Value: []*armsqlvirtualmachine.Group{
				{
					Name:     to.Ptr("testvmgroup"),
					Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/testvmgroup"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armsqlvirtualmachine.GroupProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						SQLImageOffer:     to.Ptr("SQL2017-WS2016"),
						SQLImageSKU:       to.Ptr(armsqlvirtualmachine.SQLVMGroupImageSKUEnterprise),
						WsfcDomainProfile: &armsqlvirtualmachine.WsfcDomainProfile{
							ClusterBootstrapAccount: to.Ptr("testrpadmin"),
							ClusterOperatorAccount:  to.Ptr("testrp@testdomain.com"),
							DomainFqdn:              to.Ptr("testdomain.com"),
							OuPath:                  to.Ptr("OU=WSCluster,DC=testdomain,DC=com"),
							SQLServiceAccount:       to.Ptr("sqlservice@testdomain.com"),
							StorageAccountURL:       to.Ptr("https://storgact.blob.core.windows.net/"),
						},
					},
				},
				{
					Name:     to.Ptr("testvmgroup1"),
					Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/testvmgroup1"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armsqlvirtualmachine.GroupProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						SQLImageOffer:     to.Ptr("SQL2016-WS2016"),
						SQLImageSKU:       to.Ptr(armsqlvirtualmachine.SQLVMGroupImageSKUEnterprise),
						WsfcDomainProfile: &armsqlvirtualmachine.WsfcDomainProfile{
							ClusterBootstrapAccount: to.Ptr("testrpadmin"),
							ClusterOperatorAccount:  to.Ptr("testrp@testdomain.com"),
							DomainFqdn:              to.Ptr("testdomain.com"),
							OuPath:                  to.Ptr("OU=WSCluster,DC=testdomain,DC=com"),
							SQLServiceAccount:       to.Ptr("sqlservice@testdomain.com"),
							StorageAccountURL:       to.Ptr("https://storgact.blob.core.windows.net/"),
						},
					},
				},
				{
					Name:     to.Ptr("testvmgroup2"),
					Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/testvmgroup2"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armsqlvirtualmachine.GroupProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						SQLImageOffer:     to.Ptr("SQL2016-WS2016"),
						SQLImageSKU:       to.Ptr(armsqlvirtualmachine.SQLVMGroupImageSKUEnterprise),
						WsfcDomainProfile: &armsqlvirtualmachine.WsfcDomainProfile{
							ClusterBootstrapAccount: to.Ptr("testrpadmin"),
							ClusterOperatorAccount:  to.Ptr("testrp@testdomain.com"),
							DomainFqdn:              to.Ptr("testdomain.com"),
							OuPath:                  to.Ptr("OU=WSCluster,DC=testdomain,DC=com"),
							SQLServiceAccount:       to.Ptr("sqlservice@testdomain.com"),
							StorageAccountURL:       to.Ptr("https://storgact.blob.core.windows.net/"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListByResourceGroupSqlVirtualMachineGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVirtualMachineGroups_List(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListSubscriptionSqlVirtualMachineGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all SQL virtual machine groups in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewGroupsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListSubscriptionSqlVirtualMachineGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsqlvirtualmachine.GroupListResult{
			Value: []*armsqlvirtualmachine.Group{
				{
					Name:     to.Ptr("testvmgroup"),
					Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armsqlvirtualmachine.GroupProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						SQLImageOffer:     to.Ptr("SQL2017-WS2016"),
						SQLImageSKU:       to.Ptr(armsqlvirtualmachine.SQLVMGroupImageSKUEnterprise),
						WsfcDomainProfile: &armsqlvirtualmachine.WsfcDomainProfile{
							ClusterBootstrapAccount: to.Ptr("testrpadmin"),
							ClusterOperatorAccount:  to.Ptr("testrp@testdomain.com"),
							DomainFqdn:              to.Ptr("testdomain.com"),
							OuPath:                  to.Ptr("OU=WSCluster,DC=testdomain,DC=com"),
							SQLServiceAccount:       to.Ptr("sqlservice@testdomain.com"),
							StorageAccountURL:       to.Ptr("https://storgact.blob.core.windows.net/"),
						},
					},
				},
				{
					Name:     to.Ptr("testvmgroup1"),
					Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg1/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armsqlvirtualmachine.GroupProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						SQLImageOffer:     to.Ptr("SQL2016-WS2016"),
						SQLImageSKU:       to.Ptr(armsqlvirtualmachine.SQLVMGroupImageSKUEnterprise),
						WsfcDomainProfile: &armsqlvirtualmachine.WsfcDomainProfile{
							ClusterBootstrapAccount: to.Ptr("testrpadmin"),
							ClusterOperatorAccount:  to.Ptr("testrp@testdomain.com"),
							DomainFqdn:              to.Ptr("testdomain.com"),
							OuPath:                  to.Ptr("OU=WSCluster,DC=testdomain,DC=com"),
							SQLServiceAccount:       to.Ptr("sqlservice@testdomain.com"),
							StorageAccountURL:       to.Ptr("https://storgact.blob.core.windows.net/"),
						},
					},
				},
				{
					Name:     to.Ptr("testvmgroup2"),
					Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg2/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/"),
					Location: to.Ptr("northeurope"),
					Tags: map[string]*string{
						"mytag": to.Ptr("myval"),
					},
					Properties: &armsqlvirtualmachine.GroupProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						SQLImageOffer:     to.Ptr("SQL2016-WS2016"),
						SQLImageSKU:       to.Ptr(armsqlvirtualmachine.SQLVMGroupImageSKUEnterprise),
						WsfcDomainProfile: &armsqlvirtualmachine.WsfcDomainProfile{
							ClusterBootstrapAccount: to.Ptr("testrpadmin"),
							ClusterOperatorAccount:  to.Ptr("testrp@testdomain.com"),
							DomainFqdn:              to.Ptr("testdomain.com"),
							OuPath:                  to.Ptr("OU=WSCluster,DC=testdomain,DC=com"),
							SQLServiceAccount:       to.Ptr("sqlservice@testdomain.com"),
							StorageAccountURL:       to.Ptr("https://storgact.blob.core.windows.net/"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListSubscriptionSqlVirtualMachineGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVirtualMachines_List(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListSubscriptionSqlVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all SQL virtual machines in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewSQLVirtualMachinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListSubscriptionSqlVirtualMachine.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsqlvirtualmachine.ListResult{
			Value: []*armsqlvirtualmachine.SQLVirtualMachine{
				{
					Name:     to.Ptr("testvm"),
					Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm"),
					Location: to.Ptr("northeurope"),
					Properties: &armsqlvirtualmachine.Properties{
						ProvisioningState:        to.Ptr("Succeeded"),
						SQLImageOffer:            to.Ptr("SQL2016-WS2016"),
						SQLImageSKU:              to.Ptr(armsqlvirtualmachine.SQLImageSKUEnterprise),
						SQLServerLicenseType:     to.Ptr(armsqlvirtualmachine.SQLServerLicenseTypePAYG),
						VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm"),
					},
				},
				{
					Name:     to.Ptr("testvm1"),
					Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm1"),
					Location: to.Ptr("northeurope"),
					Properties: &armsqlvirtualmachine.Properties{
						ProvisioningState:        to.Ptr("Succeeded"),
						SQLImageOffer:            to.Ptr("SQL2017-WS2016"),
						SQLImageSKU:              to.Ptr(armsqlvirtualmachine.SQLImageSKUEnterprise),
						SQLServerLicenseType:     to.Ptr(armsqlvirtualmachine.SQLServerLicenseTypePAYG),
						VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm1"),
					},
				},
				{
					Name:     to.Ptr("testvm2"),
					Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg1/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm2"),
					Location: to.Ptr("northeurope"),
					Properties: &armsqlvirtualmachine.Properties{
						ProvisioningState:        to.Ptr("Succeeded"),
						SQLImageOffer:            to.Ptr("SQL2016-WS2016"),
						SQLImageSKU:              to.Ptr(armsqlvirtualmachine.SQLImageSKUEnterprise),
						SQLServerLicenseType:     to.Ptr(armsqlvirtualmachine.SQLServerLicenseTypePAYG),
						VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg1/providers/Microsoft.Compute/virtualMachines/testvm2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListSubscriptionSqlVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVirtualMachines_Get(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/GetSqlVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a SQL virtual machine."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewSQLVirtualMachinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"testvm",
		&armsqlvirtualmachine.SQLVirtualMachinesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/GetSqlVirtualMachine.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsqlvirtualmachine.SQLVirtualMachine{
			Name:     to.Ptr("testvm"),
			Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm"),
			Location: to.Ptr("northeurope"),
			Properties: &armsqlvirtualmachine.Properties{
				ProvisioningState:        to.Ptr("Succeeded"),
				SQLImageOffer:            to.Ptr("SQL2016-WS2016"),
				SQLImageSKU:              to.Ptr(armsqlvirtualmachine.SQLImageSKUEnterprise),
				SQLServerLicenseType:     to.Ptr(armsqlvirtualmachine.SQLServerLicenseTypePAYG),
				VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLVirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLVirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/GetSqlVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVirtualMachines_CreateOrUpdate(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateVirtualMachineWithVMGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a SQL virtual machine and joins it to a SQL virtual machine group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewSQLVirtualMachinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testvm",
		armsqlvirtualmachine.SQLVirtualMachine{
			Location: to.Ptr("northeurope"),
			Properties: &armsqlvirtualmachine.Properties{
				SQLVirtualMachineGroupResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/testvmgroup"),
				VirtualMachineResourceID:         to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm2"),
				WsfcDomainCredentials: &armsqlvirtualmachine.WsfcDomainCredentials{
					ClusterBootstrapAccountPassword: to.Ptr("<Password>"),
					ClusterOperatorAccountPassword:  to.Ptr("<Password>"),
					SQLServiceAccountPassword:       to.Ptr("<Password>"),
				},
			},
		},
		&armsqlvirtualmachine.SQLVirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateVirtualMachineWithVMGroup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateVirtualMachineWithVMGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsqlvirtualmachine.SQLVirtualMachine{
			Name:     to.Ptr("testvm2"),
			Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm2"),
			Location: to.Ptr("northeurope"),
			Properties: &armsqlvirtualmachine.Properties{
				ProvisioningState:                to.Ptr("Succeeded"),
				SQLImageSKU:                      to.Ptr(armsqlvirtualmachine.SQLImageSKUEnterprise),
				SQLServerLicenseType:             to.Ptr(armsqlvirtualmachine.SQLServerLicenseTypePAYG),
				SQLVirtualMachineGroupResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/testvmgroup"),
				VirtualMachineResourceID:         to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLVirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLVirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateVirtualMachineWithVMGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineStorageConfigurationEXTEND.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a SQL virtual machine for Storage Configuration Settings to EXTEND Data, Log or TempDB storage pool."},
	})
	client = armsqlvirtualmachine.NewSQLVirtualMachinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testvm",
		armsqlvirtualmachine.SQLVirtualMachine{
			Location: to.Ptr("northeurope"),
			Properties: &armsqlvirtualmachine.Properties{
				StorageConfigurationSettings: &armsqlvirtualmachine.StorageConfigurationSettings{
					DiskConfigurationType: to.Ptr(armsqlvirtualmachine.DiskConfigurationTypeEXTEND),
					SQLDataSettings: &armsqlvirtualmachine.SQLStorageSettings{
						Luns: []*int32{
							to.Ptr[int32](2)},
					},
				},
				VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm"),
			},
		},
		&armsqlvirtualmachine.SQLVirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineStorageConfigurationEXTEND.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineStorageConfigurationEXTEND.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsqlvirtualmachine.SQLVirtualMachine{
			Name:     to.Ptr("testvm"),
			Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm"),
			Location: to.Ptr("northeurope"),
			Properties: &armsqlvirtualmachine.Properties{
				ProvisioningState:        to.Ptr("Succeeded"),
				SQLImageSKU:              to.Ptr(armsqlvirtualmachine.SQLImageSKUEnterprise),
				SQLServerLicenseType:     to.Ptr(armsqlvirtualmachine.SQLServerLicenseTypePAYG),
				VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLVirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLVirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineStorageConfigurationEXTEND.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineStorageConfigurationNEW.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a SQL virtual machine for Storage Configuration Settings to NEW Data, Log and TempDB storage pool."},
	})
	client = armsqlvirtualmachine.NewSQLVirtualMachinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testvm",
		armsqlvirtualmachine.SQLVirtualMachine{
			Location: to.Ptr("northeurope"),
			Properties: &armsqlvirtualmachine.Properties{
				StorageConfigurationSettings: &armsqlvirtualmachine.StorageConfigurationSettings{
					DiskConfigurationType: to.Ptr(armsqlvirtualmachine.DiskConfigurationTypeNEW),
					SQLDataSettings: &armsqlvirtualmachine.SQLStorageSettings{
						DefaultFilePath: to.Ptr("F:\\folderpath\\"),
						Luns: []*int32{
							to.Ptr[int32](0)},
					},
					SQLLogSettings: &armsqlvirtualmachine.SQLStorageSettings{
						DefaultFilePath: to.Ptr("G:\\folderpath\\"),
						Luns: []*int32{
							to.Ptr[int32](1)},
					},
					SQLTempDbSettings: &armsqlvirtualmachine.SQLStorageSettings{
						DefaultFilePath: to.Ptr("D:\\TEMP"),
					},
					StorageWorkloadType: to.Ptr(armsqlvirtualmachine.StorageWorkloadTypeOLTP),
				},
				VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm"),
			},
		},
		&armsqlvirtualmachine.SQLVirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineStorageConfigurationNEW.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineStorageConfigurationNEW.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsqlvirtualmachine.SQLVirtualMachine{
			Name:     to.Ptr("testvm"),
			Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm"),
			Location: to.Ptr("northeurope"),
			Properties: &armsqlvirtualmachine.Properties{
				ProvisioningState:        to.Ptr("Succeeded"),
				SQLImageSKU:              to.Ptr(armsqlvirtualmachine.SQLImageSKUEnterprise),
				SQLServerLicenseType:     to.Ptr(armsqlvirtualmachine.SQLServerLicenseTypePAYG),
				VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLVirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLVirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineStorageConfigurationNEW.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineMAX.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a SQL virtual machine with max parameters."},
	})
	client = armsqlvirtualmachine.NewSQLVirtualMachinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testvm",
		armsqlvirtualmachine.SQLVirtualMachine{
			Location: to.Ptr("northeurope"),
			Properties: &armsqlvirtualmachine.Properties{
				AutoBackupSettings: &armsqlvirtualmachine.AutoBackupSettings{
					BackupScheduleType:    to.Ptr(armsqlvirtualmachine.BackupScheduleTypeManual),
					BackupSystemDbs:       to.Ptr(true),
					Enable:                to.Ptr(true),
					EnableEncryption:      to.Ptr(true),
					FullBackupFrequency:   to.Ptr(armsqlvirtualmachine.FullBackupFrequencyTypeDaily),
					FullBackupStartTime:   to.Ptr[int32](6),
					FullBackupWindowHours: to.Ptr[int32](11),
					LogBackupFrequency:    to.Ptr[int32](10),
					Password:              to.Ptr("<Password>"),
					RetentionPeriod:       to.Ptr[int32](17),
					StorageAccessKey:      to.Ptr("<primary storage access key>"),
					StorageAccountURL:     to.Ptr("https://teststorage.blob.core.windows.net/"),
				},
				AutoPatchingSettings: &armsqlvirtualmachine.AutoPatchingSettings{
					DayOfWeek:                     to.Ptr(armsqlvirtualmachine.DayOfWeekSunday),
					Enable:                        to.Ptr(true),
					MaintenanceWindowDuration:     to.Ptr[int32](60),
					MaintenanceWindowStartingHour: to.Ptr[int32](2),
				},
				KeyVaultCredentialSettings: &armsqlvirtualmachine.KeyVaultCredentialSettings{
					Enable: to.Ptr(false),
				},
				ServerConfigurationsManagementSettings: &armsqlvirtualmachine.ServerConfigurationsManagementSettings{
					AdditionalFeaturesServerConfigurations: &armsqlvirtualmachine.AdditionalFeaturesServerConfigurations{
						IsRServicesEnabled: to.Ptr(false),
					},
					SQLConnectivityUpdateSettings: &armsqlvirtualmachine.SQLConnectivityUpdateSettings{
						ConnectivityType:      to.Ptr(armsqlvirtualmachine.ConnectivityTypePRIVATE),
						Port:                  to.Ptr[int32](1433),
						SQLAuthUpdatePassword: to.Ptr("<password>"),
						SQLAuthUpdateUserName: to.Ptr("sqllogin"),
					},
					SQLStorageUpdateSettings: &armsqlvirtualmachine.SQLStorageUpdateSettings{
						DiskConfigurationType: to.Ptr(armsqlvirtualmachine.DiskConfigurationTypeNEW),
						DiskCount:             to.Ptr[int32](1),
						StartingDeviceID:      to.Ptr[int32](2),
					},
					SQLWorkloadTypeUpdateSettings: &armsqlvirtualmachine.SQLWorkloadTypeUpdateSettings{
						SQLWorkloadType: to.Ptr(armsqlvirtualmachine.SQLWorkloadTypeOLTP),
					},
				},
				SQLImageSKU:              to.Ptr(armsqlvirtualmachine.SQLImageSKUEnterprise),
				SQLManagement:            to.Ptr(armsqlvirtualmachine.SQLManagementModeFull),
				SQLServerLicenseType:     to.Ptr(armsqlvirtualmachine.SQLServerLicenseTypePAYG),
				VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm"),
			},
		},
		&armsqlvirtualmachine.SQLVirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineMAX.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineMAX.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsqlvirtualmachine.SQLVirtualMachine{
			Name:     to.Ptr("testvm"),
			Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm"),
			Location: to.Ptr("northeurope"),
			Properties: &armsqlvirtualmachine.Properties{
				ProvisioningState:        to.Ptr("Succeeded"),
				SQLImageSKU:              to.Ptr(armsqlvirtualmachine.SQLImageSKUEnterprise),
				SQLManagement:            to.Ptr(armsqlvirtualmachine.SQLManagementModeFull),
				SQLServerLicenseType:     to.Ptr(armsqlvirtualmachine.SQLServerLicenseTypePAYG),
				VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLVirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLVirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineMAX.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineMIN.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a SQL virtual machine with min parameters."},
	})
	client = armsqlvirtualmachine.NewSQLVirtualMachinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testvm",
		armsqlvirtualmachine.SQLVirtualMachine{
			Location: to.Ptr("northeurope"),
			Properties: &armsqlvirtualmachine.Properties{
				VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm"),
			},
		},
		&armsqlvirtualmachine.SQLVirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineMIN.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineMIN.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsqlvirtualmachine.SQLVirtualMachine{
			Name:     to.Ptr("testvm"),
			Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm"),
			Location: to.Ptr("northeurope"),
			Properties: &armsqlvirtualmachine.Properties{
				ProvisioningState:        to.Ptr("Succeeded"),
				SQLImageSKU:              to.Ptr(armsqlvirtualmachine.SQLImageSKUEnterprise),
				SQLServerLicenseType:     to.Ptr(armsqlvirtualmachine.SQLServerLicenseTypePAYG),
				VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLVirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLVirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/CreateOrUpdateSqlVirtualMachineMIN.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVirtualMachines_Delete(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/DeleteSqlVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a SQL virtual machine."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewSQLVirtualMachinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"testvm1",
		&armsqlvirtualmachine.SQLVirtualMachinesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/DeleteSqlVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/DeleteSqlVirtualMachine.json: %v", err)
	}
}

func TestSQLVirtualMachines_Update(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/UpdateSqlVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates a SQL virtual machine tags."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewSQLVirtualMachinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testrg",
		"testvm",
		armsqlvirtualmachine.Update{
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
		},
		&armsqlvirtualmachine.SQLVirtualMachinesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/UpdateSqlVirtualMachine.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/UpdateSqlVirtualMachine.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsqlvirtualmachine.SQLVirtualMachine{
			Name:     to.Ptr("testvm"),
			Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm"),
			Location: to.Ptr("northeurope"),
			Tags: map[string]*string{
				"mytag": to.Ptr("myval"),
			},
			Properties: &armsqlvirtualmachine.Properties{
				ProvisioningState:        to.Ptr("Succeeded"),
				SQLImageSKU:              to.Ptr(armsqlvirtualmachine.SQLImageSKUEnterprise),
				SQLServerLicenseType:     to.Ptr(armsqlvirtualmachine.SQLServerLicenseTypePAYG),
				VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLVirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLVirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/UpdateSqlVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVirtualMachines_ListByResourceGroup(t *testing.T) {
	// From example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListByResourceGroupSqlVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets all SQL virtual machines in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsqlvirtualmachine.NewSQLVirtualMachinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroup("testrg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListByResourceGroupSqlVirtualMachine.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsqlvirtualmachine.ListResult{
			Value: []*armsqlvirtualmachine.SQLVirtualMachine{
				{
					Name:     to.Ptr("testvm"),
					Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm"),
					Location: to.Ptr("northeurope"),
					Properties: &armsqlvirtualmachine.Properties{
						ProvisioningState:        to.Ptr("Succeeded"),
						SQLImageOffer:            to.Ptr("SQL2016-WS2016"),
						SQLImageSKU:              to.Ptr(armsqlvirtualmachine.SQLImageSKUEnterprise),
						SQLServerLicenseType:     to.Ptr(armsqlvirtualmachine.SQLServerLicenseTypePAYG),
						VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm"),
					},
				},
				{
					Name:     to.Ptr("testvm1"),
					Type:     to.Ptr("Microsoft.SqlVirtualMachine/sqlVirtualMachines"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm1"),
					Location: to.Ptr("northeurope"),
					Properties: &armsqlvirtualmachine.Properties{
						ProvisioningState:        to.Ptr("Succeeded"),
						SQLImageOffer:            to.Ptr("SQL2017-WS2016"),
						SQLImageSKU:              to.Ptr(armsqlvirtualmachine.SQLImageSKUEnterprise),
						SQLServerLicenseType:     to.Ptr(armsqlvirtualmachine.SQLServerLicenseTypePAYG),
						VirtualMachineResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/sqlvirtualmachine/resource-manager/Microsoft.SqlVirtualMachine/preview/2017-03-01-preview/examples/ListByResourceGroupSqlVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
