//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeventhub

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestClusters_ListAvailableClusterRegion(t *testing.T) {
	// From example ListAvailableClusters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.ListAvailableClusterRegion(ctx,
		&ClustersListAvailableClusterRegionOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestClusters_ListBySubscription(t *testing.T) {
	// From example ClustersListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	pager := client.ListBySubscription(&ClustersListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Cluster.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Cluster.ID should not be nil!")
			}
		}
	}
}

func TestClusters_ListByResourceGroup(t *testing.T) {
	// From example ClustersListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	pager := client.ListByResourceGroup("myResourceGroup",
		&ClustersListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Cluster.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Cluster.ID should not be nil!")
			}
		}
	}
}

func TestClusters_Get(t *testing.T) {
	// From example ClusterGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"testCluster",
		&ClustersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Cluster.ID == nil {
		t.Fatal("Cluster.ID should not be nil!")
	}
}

func TestClusters_CreateOrUpdate(t *testing.T) {
	// From example ClusterPut
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"testCluster",
		Cluster{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("South Central US"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
				},
			},
			SKU: &ClusterSKU{
				Name:     ClusterSKUNameDedicated.ToPtr(),
				Capacity: to.Int32Ptr(1),
			},
		},
		&ClustersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Cluster.ID == nil {
		t.Fatal("Cluster.ID should not be nil!")
	}
}

func TestClusters_Update(t *testing.T) {
	// From example ClusterPatch
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"testCluster",
		Cluster{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("South Central US"),
				Tags: map[string]*string{
					"tag3": to.StringPtr("value3"),
					"tag4": to.StringPtr("value4"),
				},
			},
		},
		&ClustersBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Cluster.ID == nil {
		t.Fatal("Cluster.ID should not be nil!")
	}
}

func TestClusters_Delete(t *testing.T) {
	// From example ClusterDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"testCluster",
		&ClustersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestClusters_ListNamespaces(t *testing.T) {
	// From example ListNamespacesInCluster
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.ListNamespaces(ctx,
		"myResourceGroup",
		"testCluster",
		&ClustersListNamespacesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestConfiguration_Patch(t *testing.T) {
	// From example ClustersQuotasConfigurationPatch
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.Patch(ctx,
		"ArunMonocle",
		"testCluster",
		ClusterQuotaConfigurationProperties{
			Settings: map[string]*string{
				"eventhub-per-namespace-quota": to.StringPtr("20"),
				"namespaces-per-cluster-quota": to.StringPtr("200"),
			},
		},
		&ConfigurationPatchOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestConfiguration_Get(t *testing.T) {
	// From example ClustersQuotasConfigurationGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.Get(ctx,
		"myResourceGroup",
		"testCluster",
		&ConfigurationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_List(t *testing.T) {
	// From example NamespacesListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"SampleSubscription")
	pager := client.List(&NamespacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EHNamespace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EHNamespace.ID should not be nil!")
			}
		}
	}
}

func TestNamespaces_ListByResourceGroup(t *testing.T) {
	// From example NamespaceListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"SampleSubscription")
	pager := client.ListByResourceGroup("ResurceGroupSample",
		&NamespacesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EHNamespace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EHNamespace.ID should not be nil!")
			}
		}
	}
}

func TestNamespaces_CreateOrUpdate(t *testing.T) {
	// From example NamespaceCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"SampleSubscription")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"ResurceGroupSample",
		"NamespaceSample",
		EHNamespace{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("East US"),
			},
			Identity: &Identity{
				Type: ManagedServiceIdentityTypeSystemAssignedUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserAssignedIdentity{
					"/subscriptions/SampleSubscription/resourceGroups/ResurceGroupSample/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ud1": &UserAssignedIdentity{},
					"/subscriptions/SampleSubscription/resourceGroups/ResurceGroupSample/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ud2": &UserAssignedIdentity{},
				},
			},
			Properties: &EHNamespaceProperties{
				ClusterArmID: to.StringPtr("/subscriptions/SampleSubscription/resourceGroups/ResurceGroupSample/providers/Microsoft.EventHub/clusters/enc-test"),
				Encryption: &Encryption{
					KeySource: to.StringPtr("Microsoft.KeyVault"),
					KeyVaultProperties: []*KeyVaultProperties{
						{
							Identity: &UserAssignedIdentityProperties{
								UserAssignedIdentity: to.StringPtr("/subscriptions/SampleSubscription/resourceGroups/ResurceGroupSample/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ud1"),
							},
							KeyName:     to.StringPtr("Samplekey"),
							KeyVaultURI: to.StringPtr("https://aprao-keyvault-user.vault-int.azure-int.net/"),
						}},
				},
			},
		},
		&NamespacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EHNamespace.ID == nil {
		t.Fatal("EHNamespace.ID should not be nil!")
	}
}

func TestNamespaces_Delete(t *testing.T) {
	// From example NameSpaceDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"SampleSubscription")
	poller, err := client.BeginDelete(ctx,
		"ResurceGroupSample",
		"NamespaceSample",
		&NamespacesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_Get(t *testing.T) {
	// From example NameSpaceGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"SampleSubscription")
	res, err := client.Get(ctx,
		"ResurceGroupSample",
		"NamespaceSample",
		&NamespacesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EHNamespace.ID == nil {
		t.Fatal("EHNamespace.ID should not be nil!")
	}
}

func TestNamespaces_Update(t *testing.T) {
	// From example NamespacesUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"SampleSubscription")
	res, err := client.Update(ctx,
		"ResurceGroupSample",
		"NamespaceSample",
		EHNamespace{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("East US"),
			},
			Identity: &Identity{
				Type: ManagedServiceIdentityTypeSystemAssignedUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserAssignedIdentity{
					"/subscriptions/SampleSubscription/resourceGroups/ResurceGroupSample/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ud2": &UserAssignedIdentity{},
				},
			},
		},
		&NamespacesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EHNamespace.ID == nil {
		t.Fatal("EHNamespace.ID should not be nil!")
	}
}

func TestNamespaces_CreateOrUpdateNetworkRuleSet(t *testing.T) {
	// From example NameSpaceNetworkRuleSetCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"Subscription")
	res, err := client.CreateOrUpdateNetworkRuleSet(ctx,
		"ResourceGroup",
		"sdk-Namespace-6019",
		NetworkRuleSet{
			Properties: &NetworkRuleSetProperties{
				DefaultAction: DefaultActionDeny.ToPtr(),
				IPRules: []*NWRuleSetIPRules{
					{
						Action: NetworkRuleIPActionAllow.ToPtr(),
						IPMask: to.StringPtr("1.1.1.1"),
					},
					{
						Action: NetworkRuleIPActionAllow.ToPtr(),
						IPMask: to.StringPtr("1.1.1.2"),
					},
					{
						Action: NetworkRuleIPActionAllow.ToPtr(),
						IPMask: to.StringPtr("1.1.1.3"),
					},
					{
						Action: NetworkRuleIPActionAllow.ToPtr(),
						IPMask: to.StringPtr("1.1.1.4"),
					},
					{
						Action: NetworkRuleIPActionAllow.ToPtr(),
						IPMask: to.StringPtr("1.1.1.5"),
					}},
				VirtualNetworkRules: []*NWRuleSetVirtualNetworkRules{
					{
						IgnoreMissingVnetServiceEndpoint: to.BoolPtr(true),
						Subnet: &Subnet{
							ID: to.StringPtr("/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet2"),
						},
					},
					{
						IgnoreMissingVnetServiceEndpoint: to.BoolPtr(false),
						Subnet: &Subnet{
							ID: to.StringPtr("/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet3"),
						},
					},
					{
						IgnoreMissingVnetServiceEndpoint: to.BoolPtr(false),
						Subnet: &Subnet{
							ID: to.StringPtr("/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet6"),
						},
					}},
			},
		},
		&NamespacesCreateOrUpdateNetworkRuleSetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkRuleSet.ID == nil {
		t.Fatal("NetworkRuleSet.ID should not be nil!")
	}
}

func TestNamespaces_GetNetworkRuleSet(t *testing.T) {
	// From example NameSpaceNetworkRuleSetGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"Subscription")
	res, err := client.GetNetworkRuleSet(ctx,
		"ResourceGroup",
		"sdk-Namespace-6019",
		&NamespacesGetNetworkRuleSetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NetworkRuleSet.ID == nil {
		t.Fatal("NetworkRuleSet.ID should not be nil!")
	}
}

func TestNamespaces_ListAuthorizationRules(t *testing.T) {
	// From example ListAuthorizationRules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	pager := client.ListAuthorizationRules("ArunMonocle",
		"sdk-Namespace-2702",
		&NamespacesListAuthorizationRulesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AuthorizationRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AuthorizationRule.ID should not be nil!")
			}
		}
	}
}

func TestNamespaces_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example NameSpaceAuthorizationRuleCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-Namespace-2702",
		"sdk-Authrules-1746",
		AuthorizationRule{
			Properties: &AuthorizationRuleProperties{
				Rights: []*AccessRights{
					AccessRightsListen.ToPtr(),
					AccessRightsSend.ToPtr()},
			},
		},
		&NamespacesCreateOrUpdateAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AuthorizationRule.ID == nil {
		t.Fatal("AuthorizationRule.ID should not be nil!")
	}
}

func TestNamespaces_DeleteAuthorizationRule(t *testing.T) {
	// From example NameSpaceAuthorizationRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.DeleteAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-Namespace-8980",
		"sdk-Authrules-8929",
		&NamespacesDeleteAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_GetAuthorizationRule(t *testing.T) {
	// From example NameSpaceAuthorizationRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.GetAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-Namespace-2702",
		"sdk-Authrules-1746",
		&NamespacesGetAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AuthorizationRule.ID == nil {
		t.Fatal("AuthorizationRule.ID should not be nil!")
	}
}

func TestNamespaces_ListKeys(t *testing.T) {
	// From example NameSpaceAuthorizationRuleListKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.ListKeys(ctx,
		"ArunMonocle",
		"sdk-Namespace-2702",
		"sdk-Authrules-1746",
		&NamespacesListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_RegenerateKeys(t *testing.T) {
	// From example NameSpaceAuthorizationRuleRegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.RegenerateKeys(ctx,
		"ArunMonocle",
		"sdk-Namespace-8980",
		"sdk-Authrules-8929",
		RegenerateAccessKeyParameters{
			KeyType: KeyTypePrimaryKey.ToPtr(),
		},
		&NamespacesRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_CheckNameAvailability(t *testing.T) {
	// From example NamespacesCheckNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.CheckNameAvailability(ctx,
		CheckNameAvailabilityParameter{
			Name: to.StringPtr("sdk-Namespace-8458"),
		},
		&NamespacesCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example NameSpaceCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"subID")
	pager := client.List("SDK-EventHub-4794",
		"sdk-Namespace-5828",
		&PrivateEndpointConnectionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example NameSpacePrivateEndPointConnectionCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"subID")
	res, err := client.CreateOrUpdate(ctx,
		"ArunMonocle",
		"sdk-Namespace-2924",
		"privateEndpointConnectionName",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateEndpoint: &PrivateEndpoint{
					ID: to.StringPtr("/subscriptions/dbedb4e0-40e6-4145-81f3-f1314c150774/resourceGroups/SDK-EventHub-8396/providers/Microsoft.Network/privateEndpoints/sdk-Namespace-2847"),
				},
				PrivateLinkServiceConnectionState: &ConnectionState{
					Description: to.StringPtr("testing"),
					Status:      PrivateLinkConnectionStatusRejected.ToPtr(),
				},
				ProvisioningState: EndPointProvisioningStateSucceeded.ToPtr(),
			},
		},
		&PrivateEndpointConnectionsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example NameSpacePrivateEndPointConnectionDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	poller, err := client.BeginDelete(ctx,
		"ArunMonocle",
		"sdk-Namespace-3285",
		"928c44d5-b7c6-423b-b6fa-811e0c27b3e0",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example NameSpacePrivateEndPointConnectionGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"subID")
	res, err := client.Get(ctx,
		"SDK-EventHub-4794",
		"sdk-Namespace-5828",
		"privateEndpointConnectionName",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example NameSpacePrivateLinkResourcesGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"subID")
	_, err := client.Get(ctx,
		"ArunMonocle",
		"sdk-Namespace-2924",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example EHOperations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestEventHubs_ListByNamespace(t *testing.T) {
	// From example EventHubsListAll
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventHubsClient(con,
		"e2f361f0-3b27-4503-a9cc-21cfba380093")
	pager := client.ListByNamespace("Default-NotificationHubs-AustraliaEast",
		"sdk-Namespace-5357",
		&EventHubsListByNamespaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Eventhub.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Eventhub.ID should not be nil!")
			}
		}
	}
}

func TestEventHubs_CreateOrUpdate(t *testing.T) {
	// From example EventHubCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventHubsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.CreateOrUpdate(ctx,
		"Default-NotificationHubs-AustraliaEast",
		"sdk-Namespace-5357",
		"sdk-EventHub-6547",
		Eventhub{
			Properties: &EventhubProperties{
				CaptureDescription: &CaptureDescription{
					Destination: &Destination{
						Name: to.StringPtr("EventHubArchive.AzureBlockBlob"),
						Properties: &DestinationProperties{
							ArchiveNameFormat:        to.StringPtr("{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}"),
							BlobContainer:            to.StringPtr("container"),
							StorageAccountResourceID: to.StringPtr("/subscriptions/e2f361f0-3b27-4503-a9cc-21cfba380093/resourceGroups/Default-Storage-SouthCentralUS/providers/Microsoft.ClassicStorage/storageAccounts/arjunteststorage"),
						},
					},
					Enabled:           to.BoolPtr(true),
					Encoding:          EncodingCaptureDescriptionAvro.ToPtr(),
					IntervalInSeconds: to.Int32Ptr(120),
					SizeLimitInBytes:  to.Int32Ptr(10485763),
				},
				MessageRetentionInDays: to.Int64Ptr(4),
				PartitionCount:         to.Int64Ptr(4),
				Status:                 EntityStatusActive.ToPtr(),
			},
		},
		&EventHubsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Eventhub.ID == nil {
		t.Fatal("Eventhub.ID should not be nil!")
	}
}

func TestEventHubs_Delete(t *testing.T) {
	// From example EventHubDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventHubsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.Delete(ctx,
		"ArunMonocle",
		"sdk-Namespace-5357",
		"sdk-EventHub-6547",
		&EventHubsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestEventHubs_Get(t *testing.T) {
	// From example EventHubGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventHubsClient(con,
		"e2f361f0-3b27-4503-a9cc-21cfba380093")
	res, err := client.Get(ctx,
		"Default-NotificationHubs-AustraliaEast",
		"sdk-Namespace-716",
		"sdk-EventHub-10",
		&EventHubsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Eventhub.ID == nil {
		t.Fatal("Eventhub.ID should not be nil!")
	}
}

func TestEventHubs_ListAuthorizationRules(t *testing.T) {
	// From example EventHubAuthorizationRuleListAll
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventHubsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	pager := client.ListAuthorizationRules("ArunMonocle",
		"sdk-Namespace-960",
		"sdk-EventHub-532",
		&EventHubsListAuthorizationRulesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AuthorizationRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AuthorizationRule.ID should not be nil!")
			}
		}
	}
}

func TestEventHubs_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example EventHubAuthorizationRuleCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventHubsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-Namespace-960",
		"sdk-EventHub-532",
		"sdk-Authrules-2513",
		AuthorizationRule{
			Properties: &AuthorizationRuleProperties{
				Rights: []*AccessRights{
					AccessRightsListen.ToPtr(),
					AccessRightsSend.ToPtr()},
			},
		},
		&EventHubsCreateOrUpdateAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AuthorizationRule.ID == nil {
		t.Fatal("AuthorizationRule.ID should not be nil!")
	}
}

func TestEventHubs_GetAuthorizationRule(t *testing.T) {
	// From example EventHubAuthorizationRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventHubsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.GetAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-Namespace-960",
		"sdk-EventHub-532",
		"sdk-Authrules-2513",
		&EventHubsGetAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AuthorizationRule.ID == nil {
		t.Fatal("AuthorizationRule.ID should not be nil!")
	}
}

func TestEventHubs_DeleteAuthorizationRule(t *testing.T) {
	// From example EventHubAuthorizationRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventHubsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.DeleteAuthorizationRule(ctx,
		"ArunMonocle",
		"sdk-Namespace-960",
		"sdk-EventHub-532",
		"sdk-Authrules-2513",
		&EventHubsDeleteAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestEventHubs_ListKeys(t *testing.T) {
	// From example EventHubAuthorizationRuleListKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventHubsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.ListKeys(ctx,
		"ArunMonocle",
		"sdk-namespace-960",
		"sdk-EventHub-532",
		"sdk-Authrules-2513",
		&EventHubsListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestEventHubs_RegenerateKeys(t *testing.T) {
	// From example EventHubAuthorizationRuleRegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventHubsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.RegenerateKeys(ctx,
		"ArunMonocle",
		"sdk-namespace-960",
		"sdk-EventHub-532",
		"sdk-Authrules-1534",
		RegenerateAccessKeyParameters{
			KeyType: KeyTypePrimaryKey.ToPtr(),
		},
		&EventHubsRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDisasterRecoveryConfigs_CheckNameAvailability(t *testing.T) {
	// From example NamespacesCheckNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"exampleSubscriptionId")
	_, err := client.CheckNameAvailability(ctx,
		"exampleResourceGroup",
		"sdk-Namespace-9080",
		CheckNameAvailabilityParameter{
			Name: to.StringPtr("sdk-DisasterRecovery-9474"),
		},
		&DisasterRecoveryConfigsCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDisasterRecoveryConfigs_List(t *testing.T) {
	// From example EHAliasList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"exampleSubscriptionId")
	pager := client.List("exampleResourceGroup",
		"sdk-Namespace-8859",
		&DisasterRecoveryConfigsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ArmDisasterRecovery.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ArmDisasterRecovery.ID should not be nil!")
			}
		}
	}
}

func TestDisasterRecoveryConfigs_CreateOrUpdate(t *testing.T) {
	// From example EHAliasCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"exampleSubscriptionId")
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"sdk-Namespace-8859",
		"sdk-DisasterRecovery-3814",
		ArmDisasterRecovery{
			Properties: &ArmDisasterRecoveryProperties{
				PartnerNamespace: to.StringPtr("sdk-Namespace-37"),
			},
		},
		&DisasterRecoveryConfigsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ArmDisasterRecovery.ID == nil {
		t.Fatal("ArmDisasterRecovery.ID should not be nil!")
	}
}

func TestDisasterRecoveryConfigs_Delete(t *testing.T) {
	// From example EHAliasDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"exampleSubscriptionId")
	_, err := client.Delete(ctx,
		"exampleResourceGroup",
		"sdk-Namespace-5849",
		"sdk-DisasterRecovery-3814",
		&DisasterRecoveryConfigsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDisasterRecoveryConfigs_Get(t *testing.T) {
	// From example EHAliasGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"exampleSubscriptionId")
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"sdk-Namespace-8859",
		"sdk-DisasterRecovery-3814",
		&DisasterRecoveryConfigsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ArmDisasterRecovery.ID == nil {
		t.Fatal("ArmDisasterRecovery.ID should not be nil!")
	}
}

func TestDisasterRecoveryConfigs_BreakPairing(t *testing.T) {
	// From example EHAliasBreakPairing
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"exampleSubscriptionId")
	_, err := client.BreakPairing(ctx,
		"exampleResourceGroup",
		"sdk-Namespace-8859",
		"sdk-DisasterRecovery-3814",
		&DisasterRecoveryConfigsBreakPairingOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDisasterRecoveryConfigs_FailOver(t *testing.T) {
	// From example EHAliasFailOver
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"exampleSubscriptionId")
	_, err := client.FailOver(ctx,
		"exampleResourceGroup",
		"sdk-Namespace-8859",
		"sdk-DisasterRecovery-3814",
		&DisasterRecoveryConfigsFailOverOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDisasterRecoveryConfigs_ListAuthorizationRules(t *testing.T) {
	// From example ListAuthorizationRules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"exampleSubscriptionId")
	pager := client.ListAuthorizationRules("exampleResourceGroup",
		"sdk-Namespace-9080",
		"sdk-DisasterRecovery-4047",
		&DisasterRecoveryConfigsListAuthorizationRulesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AuthorizationRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AuthorizationRule.ID should not be nil!")
			}
		}
	}
}

func TestDisasterRecoveryConfigs_GetAuthorizationRule(t *testing.T) {
	// From example NameSpaceAuthorizationRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"exampleSubscriptionId")
	res, err := client.GetAuthorizationRule(ctx,
		"exampleResourceGroup",
		"sdk-Namespace-9080",
		"sdk-DisasterRecovery-4879",
		"sdk-Authrules-4879",
		&DisasterRecoveryConfigsGetAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AuthorizationRule.ID == nil {
		t.Fatal("AuthorizationRule.ID should not be nil!")
	}
}

func TestDisasterRecoveryConfigs_ListKeys(t *testing.T) {
	// From example NameSpaceAuthorizationRuleListKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDisasterRecoveryConfigsClient(con,
		"exampleSubscriptionId")
	_, err := client.ListKeys(ctx,
		"exampleResourceGroup",
		"sdk-Namespace-2702",
		"sdk-DisasterRecovery-4047",
		"sdk-Authrules-1746",
		&DisasterRecoveryConfigsListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestConsumerGroups_CreateOrUpdate(t *testing.T) {
	// From example ConsumerGroupCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConsumerGroupsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.CreateOrUpdate(ctx,
		"ArunMonocle",
		"sdk-Namespace-2661",
		"sdk-EventHub-6681",
		"sdk-ConsumerGroup-5563",
		ConsumerGroup{
			Properties: &ConsumerGroupProperties{
				UserMetadata: to.StringPtr("New consumergroup"),
			},
		},
		&ConsumerGroupsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConsumerGroup.ID == nil {
		t.Fatal("ConsumerGroup.ID should not be nil!")
	}
}

func TestConsumerGroups_Delete(t *testing.T) {
	// From example ConsumerGroupDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConsumerGroupsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	_, err := client.Delete(ctx,
		"ArunMonocle",
		"sdk-Namespace-2661",
		"sdk-EventHub-6681",
		"sdk-ConsumerGroup-5563",
		&ConsumerGroupsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestConsumerGroups_Get(t *testing.T) {
	// From example ConsumerGroupGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConsumerGroupsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	res, err := client.Get(ctx,
		"ArunMonocle",
		"sdk-Namespace-2661",
		"sdk-EventHub-6681",
		"sdk-ConsumerGroup-5563",
		&ConsumerGroupsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConsumerGroup.ID == nil {
		t.Fatal("ConsumerGroup.ID should not be nil!")
	}
}

func TestConsumerGroups_ListByEventHub(t *testing.T) {
	// From example ConsumerGroupsListAll
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConsumerGroupsClient(con,
		"5f750a97-50d9-4e36-8081-c9ee4c0210d4")
	pager := client.ListByEventHub("ArunMonocle",
		"sdk-Namespace-2661",
		"sdk-EventHub-6681",
		&ConsumerGroupsListByEventHubOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ConsumerGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ConsumerGroup.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
