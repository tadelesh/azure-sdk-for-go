//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeventhub

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ClustersClientListByResourceGroupPager provides operations for iterating over paged responses.
type ClustersClientListByResourceGroupPager struct {
	client    *ClustersClient
	current   ClustersClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClustersClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClustersClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClusterListResult.NextLink == nil || len(*p.current.ClusterListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClustersClientListByResourceGroupPager) NextPage(ctx context.Context) (ClustersClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClustersClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClustersClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClustersClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClustersClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ClustersClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClustersClientListBySubscriptionPager provides operations for iterating over paged responses.
type ClustersClientListBySubscriptionPager struct {
	client    *ClustersClient
	current   ClustersClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClustersClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClustersClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClusterListResult.NextLink == nil || len(*p.current.ClusterListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClustersClientListBySubscriptionPager) NextPage(ctx context.Context) (ClustersClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClustersClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClustersClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClustersClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClustersClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ClustersClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConsumerGroupsClientListByEventHubPager provides operations for iterating over paged responses.
type ConsumerGroupsClientListByEventHubPager struct {
	client    *ConsumerGroupsClient
	current   ConsumerGroupsClientListByEventHubResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ConsumerGroupsClientListByEventHubResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConsumerGroupsClientListByEventHubPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ConsumerGroupListResult.NextLink == nil || len(*p.current.ConsumerGroupListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ConsumerGroupsClientListByEventHubPager) NextPage(ctx context.Context) (ConsumerGroupsClientListByEventHubResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ConsumerGroupsClientListByEventHubResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConsumerGroupsClientListByEventHubResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConsumerGroupsClientListByEventHubResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConsumerGroupsClientListByEventHubResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByEventHubHandleResponse(resp)
	if err != nil {
		return ConsumerGroupsClientListByEventHubResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DisasterRecoveryConfigsClientListAuthorizationRulesPager provides operations for iterating over paged responses.
type DisasterRecoveryConfigsClientListAuthorizationRulesPager struct {
	client    *DisasterRecoveryConfigsClient
	current   DisasterRecoveryConfigsClientListAuthorizationRulesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DisasterRecoveryConfigsClientListAuthorizationRulesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DisasterRecoveryConfigsClientListAuthorizationRulesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AuthorizationRuleListResult.NextLink == nil || len(*p.current.AuthorizationRuleListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DisasterRecoveryConfigsClientListAuthorizationRulesPager) NextPage(ctx context.Context) (DisasterRecoveryConfigsClientListAuthorizationRulesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DisasterRecoveryConfigsClientListAuthorizationRulesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DisasterRecoveryConfigsClientListAuthorizationRulesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DisasterRecoveryConfigsClientListAuthorizationRulesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DisasterRecoveryConfigsClientListAuthorizationRulesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listAuthorizationRulesHandleResponse(resp)
	if err != nil {
		return DisasterRecoveryConfigsClientListAuthorizationRulesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DisasterRecoveryConfigsClientListPager provides operations for iterating over paged responses.
type DisasterRecoveryConfigsClientListPager struct {
	client    *DisasterRecoveryConfigsClient
	current   DisasterRecoveryConfigsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DisasterRecoveryConfigsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DisasterRecoveryConfigsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ArmDisasterRecoveryListResult.NextLink == nil || len(*p.current.ArmDisasterRecoveryListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DisasterRecoveryConfigsClientListPager) NextPage(ctx context.Context) (DisasterRecoveryConfigsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DisasterRecoveryConfigsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DisasterRecoveryConfigsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DisasterRecoveryConfigsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DisasterRecoveryConfigsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return DisasterRecoveryConfigsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// EventHubsClientListAuthorizationRulesPager provides operations for iterating over paged responses.
type EventHubsClientListAuthorizationRulesPager struct {
	client    *EventHubsClient
	current   EventHubsClientListAuthorizationRulesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventHubsClientListAuthorizationRulesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *EventHubsClientListAuthorizationRulesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AuthorizationRuleListResult.NextLink == nil || len(*p.current.AuthorizationRuleListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *EventHubsClientListAuthorizationRulesPager) NextPage(ctx context.Context) (EventHubsClientListAuthorizationRulesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return EventHubsClientListAuthorizationRulesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return EventHubsClientListAuthorizationRulesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return EventHubsClientListAuthorizationRulesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return EventHubsClientListAuthorizationRulesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listAuthorizationRulesHandleResponse(resp)
	if err != nil {
		return EventHubsClientListAuthorizationRulesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// EventHubsClientListByNamespacePager provides operations for iterating over paged responses.
type EventHubsClientListByNamespacePager struct {
	client    *EventHubsClient
	current   EventHubsClientListByNamespaceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventHubsClientListByNamespaceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *EventHubsClientListByNamespacePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListResult.NextLink == nil || len(*p.current.ListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *EventHubsClientListByNamespacePager) NextPage(ctx context.Context) (EventHubsClientListByNamespaceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return EventHubsClientListByNamespaceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return EventHubsClientListByNamespaceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return EventHubsClientListByNamespaceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return EventHubsClientListByNamespaceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByNamespaceHandleResponse(resp)
	if err != nil {
		return EventHubsClientListByNamespaceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// NamespacesClientListAuthorizationRulesPager provides operations for iterating over paged responses.
type NamespacesClientListAuthorizationRulesPager struct {
	client    *NamespacesClient
	current   NamespacesClientListAuthorizationRulesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NamespacesClientListAuthorizationRulesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *NamespacesClientListAuthorizationRulesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AuthorizationRuleListResult.NextLink == nil || len(*p.current.AuthorizationRuleListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *NamespacesClientListAuthorizationRulesPager) NextPage(ctx context.Context) (NamespacesClientListAuthorizationRulesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return NamespacesClientListAuthorizationRulesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return NamespacesClientListAuthorizationRulesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return NamespacesClientListAuthorizationRulesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return NamespacesClientListAuthorizationRulesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listAuthorizationRulesHandleResponse(resp)
	if err != nil {
		return NamespacesClientListAuthorizationRulesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// NamespacesClientListByResourceGroupPager provides operations for iterating over paged responses.
type NamespacesClientListByResourceGroupPager struct {
	client    *NamespacesClient
	current   NamespacesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NamespacesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *NamespacesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EHNamespaceListResult.NextLink == nil || len(*p.current.EHNamespaceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *NamespacesClientListByResourceGroupPager) NextPage(ctx context.Context) (NamespacesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return NamespacesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return NamespacesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return NamespacesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return NamespacesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return NamespacesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// NamespacesClientListPager provides operations for iterating over paged responses.
type NamespacesClientListPager struct {
	client    *NamespacesClient
	current   NamespacesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NamespacesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *NamespacesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EHNamespaceListResult.NextLink == nil || len(*p.current.EHNamespaceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *NamespacesClientListPager) NextPage(ctx context.Context) (NamespacesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return NamespacesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return NamespacesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return NamespacesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return NamespacesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return NamespacesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsClientListPager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsClientListPager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsClientListPager) NextPage(ctx context.Context) (PrivateEndpointConnectionsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateEndpointConnectionsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SchemaRegistryClientListByNamespacePager provides operations for iterating over paged responses.
type SchemaRegistryClientListByNamespacePager struct {
	client    *SchemaRegistryClient
	current   SchemaRegistryClientListByNamespaceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SchemaRegistryClientListByNamespaceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SchemaRegistryClientListByNamespacePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SchemaGroupListResult.NextLink == nil || len(*p.current.SchemaGroupListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SchemaRegistryClientListByNamespacePager) NextPage(ctx context.Context) (SchemaRegistryClientListByNamespaceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SchemaRegistryClientListByNamespaceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SchemaRegistryClientListByNamespaceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SchemaRegistryClientListByNamespaceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SchemaRegistryClientListByNamespaceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByNamespaceHandleResponse(resp)
	if err != nil {
		return SchemaRegistryClientListByNamespaceResponse{}, err
	}
	p.current = result
	return p.current, nil
}
