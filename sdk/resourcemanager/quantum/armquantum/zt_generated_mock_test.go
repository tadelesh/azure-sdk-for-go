//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armquantum_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/quantum/armquantum"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestWorkspaces_Get(t *testing.T) {
	// From example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuantumWorkspacesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquantum.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"quantumResourcegroup",
		"quantumworkspace1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquantum.Workspace{
			Name:     to.Ptr("quantumworkspace1"),
			Type:     to.Ptr("Microsoft.Quantum/Workspaces"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/quantumResourcegroup/providers/Microsoft.Quantum/Workspaces/quantumworkspace1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"company":    to.Ptr("Contoso"),
				"department": to.Ptr("MightyMight"),
			},
			Identity: &armquantum.WorkspaceIdentity{
				Type:        to.Ptr(armquantum.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			},
			Properties: &armquantum.WorkspaceResourceProperties{
				EndpointURI: to.Ptr("https://quantumworkspace1.westus.quantum.azure.com"),
				Providers: []*armquantum.Provider{
					{
						ApplicationName:   to.Ptr("quantumworkspace1-h1"),
						InstanceURI:       to.Ptr("https://h1.endpoint.com"),
						ProviderID:        to.Ptr("Honeywell"),
						ProviderSKU:       to.Ptr("Basic"),
						ProvisioningState: to.Ptr(armquantum.StatusSucceeded),
						ResourceUsageID:   to.Ptr("00000000-1111-2222-3333-444444444444"),
					},
					{
						ApplicationName:   to.Ptr("quantumworkspace1-i1"),
						InstanceURI:       to.Ptr("https://i1.endpoint.com"),
						ProviderID:        to.Ptr("IonQ"),
						ProviderSKU:       to.Ptr("Basic"),
						ProvisioningState: to.Ptr(armquantum.StatusSucceeded),
						ResourceUsageID:   to.Ptr("00000000-1111-2222-3333-444444444444"),
					},
					{
						ApplicationName:   to.Ptr("quantumworkspace1-o1"),
						InstanceURI:       to.Ptr("https://o1.endpoint.com"),
						ProviderID:        to.Ptr("OneQBit"),
						ProviderSKU:       to.Ptr("Basic"),
						ProvisioningState: to.Ptr(armquantum.StatusSucceeded),
						ResourceUsageID:   to.Ptr("00000000-1111-2222-3333-444444444444"),
					}},
				ProvisioningState: to.Ptr(armquantum.ProvisioningStatusSucceeded),
				StorageAccount:    to.Ptr("/subscriptions/1C4B2828-7D49-494F-933D-061373BE28C2/resourceGroups/quantumResourcegroup/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
				Usable:            to.Ptr(armquantum.UsableStatusYes),
			},
			SystemData: &armquantum.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armquantum.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armquantum.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_CreateOrUpdate(t *testing.T) {
	// From example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesPut.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuantumWorkspacesPut"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquantum.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"quantumResourcegroup",
		"quantumworkspace1",
		armquantum.Workspace{
			Location: to.Ptr("West US"),
			Properties: &armquantum.WorkspaceResourceProperties{
				Providers: []*armquantum.Provider{
					{
						ProviderID:  to.Ptr("Honeywell"),
						ProviderSKU: to.Ptr("Basic"),
					},
					{
						ProviderID:  to.Ptr("IonQ"),
						ProviderSKU: to.Ptr("Basic"),
					},
					{
						ProviderID:  to.Ptr("OneQBit"),
						ProviderSKU: to.Ptr("Basic"),
					}},
				StorageAccount: to.Ptr("/subscriptions/1C4B2828-7D49-494F-933D-061373BE28C2/resourceGroups/quantumResourcegroup/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
			},
		},
		&armquantum.WorkspacesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesPut.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesPut.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquantum.Workspace{
			Name:     to.Ptr("quantumworkspace1"),
			Type:     to.Ptr("Microsoft.Quantum/Workspaces"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/quantumResourcegroup/providers/Microsoft.Quantum/Workspaces/quantumworkspace1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"company":    to.Ptr("Contoso"),
				"department": to.Ptr("MightyMight"),
			},
			Identity: &armquantum.WorkspaceIdentity{
				Type:        to.Ptr(armquantum.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			},
			Properties: &armquantum.WorkspaceResourceProperties{
				EndpointURI: to.Ptr("https://quantumworkspace1.westus.quantum.azure.com"),
				Providers: []*armquantum.Provider{
					{
						ApplicationName:   to.Ptr("quantumworkspace1-h1"),
						InstanceURI:       to.Ptr("https://h1.endpoint.com"),
						ProviderID:        to.Ptr("Honeywell"),
						ProviderSKU:       to.Ptr("Basic"),
						ProvisioningState: to.Ptr(armquantum.StatusSucceeded),
						ResourceUsageID:   to.Ptr("00000000-1111-2222-3333-444444444444"),
					},
					{
						ApplicationName:   to.Ptr("quantumworkspace1-i1"),
						InstanceURI:       to.Ptr("https://i1.endpoint.com"),
						ProviderID:        to.Ptr("IonQ"),
						ProviderSKU:       to.Ptr("Basic"),
						ProvisioningState: to.Ptr(armquantum.StatusSucceeded),
						ResourceUsageID:   to.Ptr("00000000-1111-2222-3333-444444444445"),
					},
					{
						ApplicationName:   to.Ptr("quantumworkspace1-o1"),
						InstanceURI:       to.Ptr("https://o1.endpoint.com"),
						ProviderID:        to.Ptr("OneQBit"),
						ProviderSKU:       to.Ptr("Basic"),
						ProvisioningState: to.Ptr(armquantum.StatusSucceeded),
						ResourceUsageID:   to.Ptr("00000000-1111-2222-3333-444444444446"),
					}},
				ProvisioningState: to.Ptr(armquantum.ProvisioningStatusSucceeded),
				StorageAccount:    to.Ptr("/subscriptions/1C4B2828-7D49-494F-933D-061373BE28C2/resourceGroups/quantumResourcegroup/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
				Usable:            to.Ptr(armquantum.UsableStatusYes),
			},
			SystemData: &armquantum.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armquantum.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armquantum.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesPut.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_UpdateTags(t *testing.T) {
	// From example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuantumWorkspacesPatchTags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquantum.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.UpdateTags(ctx,
		"quantumResourcegroup",
		"quantumworkspace1",
		armquantum.TagsObject{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquantum.Workspace{
			Name:     to.Ptr("quantumworkspace1"),
			Type:     to.Ptr("Microsoft.Quantum/Workspaces"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/quantumResourcegroup/providers/Microsoft.Quantum/Workspaces/quantumworkspace1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Identity: &armquantum.WorkspaceIdentity{
				Type:        to.Ptr(armquantum.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
				TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
			},
			Properties: &armquantum.WorkspaceResourceProperties{
				EndpointURI: to.Ptr("https://quantumworkspace1.westus.quantum.azure.com"),
				Providers: []*armquantum.Provider{
					{
						ApplicationName:   to.Ptr("quantumworkspace1-h1"),
						InstanceURI:       to.Ptr("https://h1.endpoint.com"),
						ProviderID:        to.Ptr("Honeywell"),
						ProviderSKU:       to.Ptr("Basic"),
						ProvisioningState: to.Ptr(armquantum.StatusSucceeded),
						ResourceUsageID:   to.Ptr("00000000-1111-2222-3333-444444444444"),
					},
					{
						ApplicationName:   to.Ptr("quantumworkspace1-i1"),
						InstanceURI:       to.Ptr("https://i1.endpoint.com"),
						ProviderID:        to.Ptr("IonQ"),
						ProviderSKU:       to.Ptr("Basic"),
						ProvisioningState: to.Ptr(armquantum.StatusSucceeded),
						ResourceUsageID:   to.Ptr("00000000-1111-2222-3333-444444444445"),
					},
					{
						ApplicationName:   to.Ptr("quantumworkspace1-o1"),
						InstanceURI:       to.Ptr("https://o1.endpoint.com"),
						ProviderID:        to.Ptr("OneQBit"),
						ProviderSKU:       to.Ptr("Basic"),
						ProvisioningState: to.Ptr(armquantum.StatusSucceeded),
						ResourceUsageID:   to.Ptr("00000000-1111-2222-3333-444444444446"),
					}},
				ProvisioningState: to.Ptr(armquantum.ProvisioningStatusSucceeded),
				StorageAccount:    to.Ptr("/subscriptions/1C4B2828-7D49-494F-933D-061373BE28C2/resourceGroups/quantumResourcegroup/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
				Usable:            to.Ptr(armquantum.UsableStatusYes),
			},
			SystemData: &armquantum.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("user1"),
				CreatedByType:      to.Ptr(armquantum.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2"),
				LastModifiedByType: to.Ptr(armquantum.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Delete(t *testing.T) {
	// From example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuantumWorkspacesDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquantum.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"quantumResourcegroup",
		"quantumworkspace1",
		&armquantum.WorkspacesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesDelete.json: %v", err)
	}
}

func TestWorkspaces_ListBySubscription(t *testing.T) {
	// From example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesListSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuantumWorkspacesListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquantum.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesListSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armquantum.WorkspaceListResult{
			Value: []*armquantum.Workspace{
				{
					Name:     to.Ptr("quantumworkspace1"),
					Type:     to.Ptr("Microsoft.Quantum/Workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/quantumResourcegroup/providers/Microsoft.Quantum/Workspaces/quantumworkspace1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"company":    to.Ptr("Contoso"),
						"department": to.Ptr("MightyMight"),
					},
					Identity: &armquantum.WorkspaceIdentity{
						Type:        to.Ptr(armquantum.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					},
					Properties: &armquantum.WorkspaceResourceProperties{
						EndpointURI: to.Ptr("https://quantumworkspace1.westus.quantum.azure.com"),
						Providers: []*armquantum.Provider{
							{
								ApplicationName:   to.Ptr("quantumworkspace1-h1"),
								InstanceURI:       to.Ptr("https://h1.endpoint.com"),
								ProviderID:        to.Ptr("Honeywell"),
								ProviderSKU:       to.Ptr("Basic"),
								ProvisioningState: to.Ptr(armquantum.StatusSucceeded),
								ResourceUsageID:   to.Ptr("00000000-1111-2222-3333-444444444444"),
							}},
						ProvisioningState: to.Ptr(armquantum.ProvisioningStatusSucceeded),
						StorageAccount:    to.Ptr("/subscriptions/1C4B2828-7D49-494F-933D-061373BE28C2/resourceGroups/quantumResourcegroup/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
						Usable:            to.Ptr(armquantum.UsableStatusYes),
					},
					SystemData: &armquantum.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armquantum.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armquantum.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesListSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListByResourceGroup(t *testing.T) {
	// From example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesListResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuantumWorkspacesListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquantum.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroup("quantumResourcegroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesListResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armquantum.WorkspaceListResult{
			Value: []*armquantum.Workspace{
				{
					Name:     to.Ptr("quantumworkspace1"),
					Type:     to.Ptr("Microsoft.Quantum/Workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/quantumResourcegroup/providers/Microsoft.Quantum/Workspaces/quantumworkspace1"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"company":    to.Ptr("Contoso"),
						"department": to.Ptr("MightyMight"),
					},
					Identity: &armquantum.WorkspaceIdentity{
						Type:        to.Ptr(armquantum.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("00000000-1111-2222-3333-444444444444"),
						TenantID:    to.Ptr("00000000-1111-2222-3333-444444444444"),
					},
					Properties: &armquantum.WorkspaceResourceProperties{
						EndpointURI: to.Ptr("https://quantumworkspace1.westus.quantum.azure.com"),
						Providers: []*armquantum.Provider{
							{
								ApplicationName:   to.Ptr("quantumworkspace1-h1"),
								InstanceURI:       to.Ptr("https://h1.endpoint.com"),
								ProviderID:        to.Ptr("Honeywell"),
								ProviderSKU:       to.Ptr("Basic"),
								ProvisioningState: to.Ptr(armquantum.StatusSucceeded),
								ResourceUsageID:   to.Ptr("00000000-1111-2222-3333-444444444444"),
							}},
						ProvisioningState: to.Ptr(armquantum.ProvisioningStatusSucceeded),
						StorageAccount:    to.Ptr("/subscriptions/1C4B2828-7D49-494F-933D-061373BE28C2/resourceGroups/quantumResourcegroup/providers/Microsoft.Storage/storageAccounts/testStorageAccount"),
						Usable:            to.Ptr(armquantum.UsableStatusYes),
					},
					SystemData: &armquantum.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
						CreatedBy:          to.Ptr("user1"),
						CreatedByType:      to.Ptr(armquantum.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2"),
						LastModifiedByType: to.Ptr(armquantum.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesListResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOfferings_List(t *testing.T) {
	// From example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/offeringsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OfferingsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquantum.NewOfferingsClient("1C4B2828-7D49-494F-933D-061373BE28C2", cred, &options)
	pager := client.List("westus2",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/offeringsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armquantum.OfferingsListResult{
			Value: []*armquantum.ProviderDescription{
				{
					Name: to.Ptr("Quantum Inspired Optimization"),
					ID:   to.Ptr("QIO"),
					Properties: &armquantum.ProviderProperties{
						Description: to.Ptr("Provide Quantum Inspired Optimization solvers"),
						PricingDimensions: []*armquantum.PricingDimension{
							{
								Name: to.Ptr("Pricing"),
								ID:   to.Ptr("price"),
							},
							{
								Name: to.Ptr("Minimum monthly rate"),
								ID:   to.Ptr("rate"),
							}},
						QuotaDimensions: []*armquantum.QuotaDimension{
							{
								Name:        to.Ptr("Job count"),
								Description: to.Ptr("The number of jobs you may submit per month"),
								ID:          to.Ptr("job-count"),
								Period:      to.Ptr("Monthly"),
								Quota:       to.Ptr[float32](30),
								Scope:       to.Ptr("Workspace"),
								Unit:        to.Ptr("job"),
								UnitPlural:  to.Ptr("jobs"),
							},
							{
								Name:        to.Ptr("Job hours"),
								Description: to.Ptr("The number of hours of solver time you may use per month"),
								ID:          to.Ptr("job-hour"),
								Period:      to.Ptr("Monthly"),
								Quota:       to.Ptr[float32](1000),
								Scope:       to.Ptr("Subscription"),
								Unit:        to.Ptr("hour"),
								UnitPlural:  to.Ptr("hours"),
							}},
						SKUs: []*armquantum.SKUDescription{
							{
								Name:        to.Ptr("Standard"),
								Description: to.Ptr("Provider CPU and FPGA QIO based solver."),
								ID:          to.Ptr("Standard"),
								PricingDetails: []*armquantum.PricingDetail{
									{
										ID:    to.Ptr("price"),
										Value: to.Ptr("200 dollars"),
									},
									{
										ID:    to.Ptr("rate"),
										Value: to.Ptr("10 hours/month"),
									}},
								QuotaDimensions: []*armquantum.QuotaDimension{
									{
										ID:    to.Ptr("quota1"),
										Scope: to.Ptr("Workspace"),
									}},
								RestrictedAccessURI: to.Ptr("https://endpoint"),
								Targets: []*string{
									to.Ptr("p1")},
								Version: to.Ptr("1.0"),
							}},
						Targets: []*armquantum.TargetDescription{
							{
								Name:        to.Ptr("CPU annealer"),
								Description: to.Ptr("CPU annealer algorithm"),
								ID:          to.Ptr("p1"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OfferingsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OfferingsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/offeringsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWorkspace_CheckNameAvailability(t *testing.T) {
	// From example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuantumWorkspacesCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armquantum.NewWorkspaceClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"westus2",
		armquantum.CheckNameAvailabilityParameters{
			Name: to.Ptr("sample-workspace-name"),
			Type: to.Ptr("Microsoft.Quantum/Workspaces"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armquantum.CheckNameAvailabilityResult{
			Message:       to.Ptr("Resource name already exists"),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("AlreadyExists"),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/quantum/resource-manager/Microsoft.Quantum/preview/2019-11-04-preview/examples/quantumWorkspacesCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
