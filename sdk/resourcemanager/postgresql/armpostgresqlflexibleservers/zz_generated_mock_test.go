//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpostgresqlflexibleservers

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestServers_Create(t *testing.T) {
	// From example Create a database as a point in time restore
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginCreate(ctx,
		"testrg",
		"pgtestsvc5",
		Server{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus"),
			},
			Properties: &ServerProperties{
				CreateMode:             CreateModePointInTimeRestore.ToPtr(),
				PointInTimeUTC:         to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T00:04:59.4078005+00:00"); return t }()),
				SourceServerResourceID: to.StringPtr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/flexibleServers/sourcepgservername"),
			},
		},
		&ServersBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}

	// From example Create a new server
	poller, err = client.BeginCreate(ctx,
		"testrg",
		"pgtestsvc4",
		Server{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("westus"),
				Tags: map[string]*string{
					"ElasticServer": to.StringPtr("1"),
				},
			},
			Properties: &ServerProperties{
				AdministratorLogin:         to.StringPtr("cloudsa"),
				AdministratorLoginPassword: to.StringPtr("password"),
				AvailabilityZone:           to.StringPtr("1"),
				Backup: &Backup{
					BackupRetentionDays: to.Int32Ptr(7),
					GeoRedundantBackup:  GeoRedundantBackupEnumDisabled.ToPtr(),
				},
				CreateMode: CreateModeCreate.ToPtr(),
				HighAvailability: &HighAvailability{
					Mode: HighAvailabilityModeZoneRedundant.ToPtr(),
				},
				Network: &Network{
					DelegatedSubnetResourceID:   to.StringPtr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-vnet-subnet"),
					PrivateDNSZoneArmResourceID: to.StringPtr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourcegroups/testrg/providers/Microsoft.Network/privateDnsZones/test-private-dns-zone.postgres.database.azure.com"),
				},
				Storage: &Storage{
					StorageSizeGB: to.Int32Ptr(512),
				},
				Version: ServerVersionTwelve.ToPtr(),
			},
			SKU: &SKU{
				Name: to.StringPtr("Standard_D4s_v3"),
				Tier: SKUTierGeneralPurpose.ToPtr(),
			},
		},
		&ServersBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}
}

func TestServers_Update(t *testing.T) {
	// From example ServerUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginUpdate(ctx,
		"TestGroup",
		"pgtestsvc4",
		ServerForUpdate{
			Location: to.StringPtr("westus"),
			Properties: &ServerPropertiesForUpdate{
				AdministratorLoginPassword: to.StringPtr("newpassword"),
				Backup: &Backup{
					BackupRetentionDays: to.Int32Ptr(20),
				},
				CreateMode: CreateModeForUpdateUpdate.ToPtr(),
				Storage: &Storage{
					StorageSizeGB: to.Int32Ptr(1024),
				},
			},
			SKU: &SKU{
				Name: to.StringPtr("Standard_D8s_v3"),
				Tier: SKUTierGeneralPurpose.ToPtr(),
			},
		},
		&ServersBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}

	// From example ServerUpdateWithCustomerMaintenanceWindow
	poller, err = client.BeginUpdate(ctx,
		"testrg",
		"pgtestsvc4",
		ServerForUpdate{
			Location: to.StringPtr("westus"),
			Properties: &ServerPropertiesForUpdate{
				CreateMode: CreateModeForUpdateUpdate.ToPtr(),
				MaintenanceWindow: &MaintenanceWindow{
					CustomWindow: to.StringPtr("Enabled"),
					DayOfWeek:    to.Int32Ptr(0),
					StartHour:    to.Int32Ptr(8),
					StartMinute:  to.Int32Ptr(0),
				},
			},
		},
		&ServersBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}
}

func TestServers_Delete(t *testing.T) {
	// From example ServerDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"testserver",
		&ServersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_Get(t *testing.T) {
	// From example ServerGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"testrg",
		"pgtestsvc1",
		&ServersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}

	// From example ServerGetWithVnet
	res, err = client.Get(ctx,
		"testrg",
		"pgtestsvc4",
		&ServersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Server.ID == nil {
		t.Fatal("Server.ID should not be nil!")
	}
}

func TestServers_ListByResourceGroup(t *testing.T) {
	// From example ServerListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListByResourceGroup("testrg",
		&ServersListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Server.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Server.ID should not be nil!")
			}
		}
	}
}

func TestServers_List(t *testing.T) {
	// From example ServerList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.List(&ServersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Server.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Server.ID should not be nil!")
			}
		}
	}
}

func TestServers_Restart(t *testing.T) {
	// From example ServerRestart
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginRestart(ctx,
		"testrg",
		"testserver",
		&ServersBeginRestartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example ServerRestartWithFailover
	poller, err = client.BeginRestart(ctx,
		"testrg",
		"testserver",
		&ServersBeginRestartOptions{Parameters: &RestartParameter{
			FailoverMode:        FailoverModeForcedFailover.ToPtr(),
			RestartWithFailover: to.BoolPtr(true),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_Start(t *testing.T) {
	// From example ServerStart
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginStart(ctx,
		"testrg",
		"testserver",
		&ServersBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestServers_Stop(t *testing.T) {
	// From example ServerStop
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServersClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginStop(ctx,
		"testrg",
		"testserver",
		&ServersBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestFirewallRules_CreateOrUpdate(t *testing.T) {
	// From example FirewallRuleCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"testserver",
		"rule1",
		FirewallRule{
			Properties: &FirewallRuleProperties{
				EndIPAddress:   to.StringPtr("255.255.255.255"),
				StartIPAddress: to.StringPtr("0.0.0.0"),
			},
		},
		&FirewallRulesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallRule.ID == nil {
		t.Fatal("FirewallRule.ID should not be nil!")
	}
}

func TestFirewallRules_Delete(t *testing.T) {
	// From example FirewallRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"testserver",
		"rule1",
		&FirewallRulesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestFirewallRules_Get(t *testing.T) {
	// From example FirewallRuleList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"testrg",
		"testserver",
		"rule1",
		&FirewallRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.FirewallRule.ID == nil {
		t.Fatal("FirewallRule.ID should not be nil!")
	}
}

func TestFirewallRules_ListByServer(t *testing.T) {
	// From example FirewallRuleList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewFirewallRulesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListByServer("testrg",
		"testserver",
		&FirewallRulesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FirewallRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FirewallRule.ID should not be nil!")
			}
		}
	}
}

func TestConfigurations_ListByServer(t *testing.T) {
	// From example ConfigurationList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListByServer("testrg",
		"testserver",
		&ConfigurationsListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Configuration.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Configuration.ID should not be nil!")
			}
		}
	}
}

func TestConfigurations_Get(t *testing.T) {
	// From example ConfigurationGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"testrg",
		"testserver",
		"array_nulls",
		&ConfigurationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Configuration.ID == nil {
		t.Fatal("Configuration.ID should not be nil!")
	}
}

func TestConfigurations_Update(t *testing.T) {
	// From example Update a user configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginUpdate(ctx,
		"testrg",
		"testserver",
		"event_scheduler",
		Configuration{
			Properties: &ConfigurationProperties{
				Source: to.StringPtr("user-override"),
				Value:  to.StringPtr("on"),
			},
		},
		&ConfigurationsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Configuration.ID == nil {
		t.Fatal("Configuration.ID should not be nil!")
	}
}

func TestConfigurations_Put(t *testing.T) {
	// From example Update a user configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewConfigurationsClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginPut(ctx,
		"testrg",
		"testserver",
		"event_scheduler",
		Configuration{
			Properties: &ConfigurationProperties{
				Source: to.StringPtr("user-override"),
				Value:  to.StringPtr("on"),
			},
		},
		&ConfigurationsBeginPutOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Configuration.ID == nil {
		t.Fatal("Configuration.ID should not be nil!")
	}
}

func TestCheckNameAvailability_Execute(t *testing.T) {
	// From example NameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCheckNameAvailabilityClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.Execute(ctx,
		NameAvailabilityRequest{
			Name: to.StringPtr("name1"),
			Type: to.StringPtr("Microsoft.DBforPostgreSQL/flexibleServers"),
		},
		&CheckNameAvailabilityExecuteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLocationBasedCapabilities_Execute(t *testing.T) {
	// From example CapabilitiesList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLocationBasedCapabilitiesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.Execute("westus",
		&LocationBasedCapabilitiesExecuteOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestVirtualNetworkSubnetUsage_Execute(t *testing.T) {
	// From example VirtualNetworkSubnetUsageList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworkSubnetUsageClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	_, err := client.Execute(ctx,
		"westus",
		VirtualNetworkSubnetUsageParameter{
			VirtualNetworkArmResourceID: to.StringPtr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/testvnet"),
		},
		&VirtualNetworkSubnetUsageExecuteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example OperationList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	_, err := client.List(ctx,
		&OperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabases_Create(t *testing.T) {
	// From example Create a database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginCreate(ctx,
		"TestGroup",
		"testserver",
		"db1",
		Database{
			Properties: &DatabaseProperties{
				Charset:   to.StringPtr("utf8"),
				Collation: to.StringPtr("en_US.utf8"),
			},
		},
		&DatabasesBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}
}

func TestDatabases_Delete(t *testing.T) {
	// From example Delete a database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"testserver",
		"db1",
		&DatabasesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDatabases_Get(t *testing.T) {
	// From example Get a database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	res, err := client.Get(ctx,
		"TestGroup",
		"testserver",
		"db1",
		&DatabasesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Database.ID == nil {
		t.Fatal("Database.ID should not be nil!")
	}
}

func TestDatabases_ListByServer(t *testing.T) {
	// From example List databases in a server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDatabasesClient(con,
		"ffffffff-ffff-ffff-ffff-ffffffffffff")
	pager := client.ListByServer("TestGroup",
		"testserver",
		&DatabasesListByServerOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Database.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Database.ID should not be nil!")
			}
		}
	}
}

func TestGetPrivateDnsZoneSuffix_Execute(t *testing.T) {
	// From example GetPrivateDnsZoneSuffix
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGetPrivateDNSZoneSuffixClient(con)
	_, err := client.Execute(ctx,
		&GetPrivateDNSZoneSuffixExecuteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
