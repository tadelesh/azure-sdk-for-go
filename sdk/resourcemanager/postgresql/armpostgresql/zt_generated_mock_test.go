//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpostgresql_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/postgresql/armpostgresql"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestServers_Create(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreatePointInTimeRestore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a database as a point in time restore"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"TargetResourceGroup",
		"targetserver",
		armpostgresql.ServerForCreate{
			Location: to.Ptr("brazilsouth"),
			Properties: &armpostgresql.ServerPropertiesForRestore{
				CreateMode:         to.Ptr(armpostgresql.CreateModePointInTimeRestore),
				RestorePointInTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-14T00:00:37.467Z"); return t }()),
				SourceServerID:     to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/SourceResourceGroup/providers/Microsoft.DBforPostgreSQL/servers/sourceserver"),
			},
			SKU: &armpostgresql.SKU{
				Name:     to.Ptr("B_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr(armpostgresql.SKUTierBasic),
			},
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("1"),
			},
		},
		&armpostgresql.ServersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreatePointInTimeRestore.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreatePointInTimeRestore.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.Server{
			Name:     to.Ptr("targetserver"),
			Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/targetserver"),
			Location: to.Ptr("brazilsouth"),
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("1"),
			},
			Properties: &armpostgresql.ServerProperties{
				AdministratorLogin:       to.Ptr("cloudsa"),
				EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-14T21:08:24.637+00:00"); return t }()),
				FullyQualifiedDomainName: to.Ptr("targetserver.postgres.database.azure.com"),
				SSLEnforcement:           to.Ptr(armpostgresql.SSLEnforcementEnumEnabled),
				StorageProfile: &armpostgresql.StorageProfile{
					BackupRetentionDays: to.Ptr[int32](7),
					GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
					StorageMB:           to.Ptr[int32](128000),
				},
				UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
				Version:          to.Ptr(armpostgresql.ServerVersionNine6),
			},
			SKU: &armpostgresql.SKU{
				Name:     to.Ptr("B_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr(armpostgresql.SKUTierBasic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreatePointInTimeRestore.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new server"},
	})
	client = armpostgresql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"TestGroup",
		"pgtestsvc4",
		armpostgresql.ServerForCreate{
			Location: to.Ptr("westus"),
			Properties: &armpostgresql.ServerPropertiesForDefaultCreate{
				CreateMode:        to.Ptr(armpostgresql.CreateModeDefault),
				MinimalTLSVersion: to.Ptr(armpostgresql.MinimalTLSVersionEnumTLS12),
				SSLEnforcement:    to.Ptr(armpostgresql.SSLEnforcementEnumEnabled),
				StorageProfile: &armpostgresql.StorageProfile{
					BackupRetentionDays: to.Ptr[int32](7),
					GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
					StorageMB:           to.Ptr[int32](128000),
				},
				AdministratorLogin:         to.Ptr("cloudsa"),
				AdministratorLoginPassword: to.Ptr("<administratorLoginPassword>"),
			},
			SKU: &armpostgresql.SKU{
				Name:     to.Ptr("B_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr(armpostgresql.SKUTierBasic),
			},
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("1"),
			},
		},
		&armpostgresql.ServersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.Server{
			Name:     to.Ptr("pgtestsvc4"),
			Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc4"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("1"),
			},
			Properties: &armpostgresql.ServerProperties{
				AdministratorLogin:       to.Ptr("cloudsa"),
				EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T21:08:24.637+00:00"); return t }()),
				FullyQualifiedDomainName: to.Ptr("pgtestsvc4.postgres.database.azure.com"),
				SSLEnforcement:           to.Ptr(armpostgresql.SSLEnforcementEnumEnabled),
				StorageProfile: &armpostgresql.StorageProfile{
					BackupRetentionDays: to.Ptr[int32](7),
					GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
					StorageMB:           to.Ptr[int32](128000),
				},
				UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
				Version:          to.Ptr(armpostgresql.ServerVersionNine6),
			},
			SKU: &armpostgresql.SKU{
				Name:     to.Ptr("B_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr(armpostgresql.SKUTierBasic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreateReplicaMode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a replica server"},
	})
	client = armpostgresql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"TestGroup_WestCentralUS",
		"testserver-replica1",
		armpostgresql.ServerForCreate{
			Location: to.Ptr("westcentralus"),
			Properties: &armpostgresql.ServerPropertiesForReplica{
				CreateMode:     to.Ptr(armpostgresql.CreateModeReplica),
				SourceServerID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup_WestCentralUS/providers/Microsoft.DBforPostgreSQL/servers/testserver-master"),
			},
			SKU: &armpostgresql.SKU{
				Name:     to.Ptr("GP_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr(armpostgresql.SKUTierGeneralPurpose),
			},
		},
		&armpostgresql.ServersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreateReplicaMode.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreateReplicaMode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.Server{
			Name:     to.Ptr("testserver-replica1"),
			Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup_WestCentralUS/providers/Microsoft.DBforPostgreSQL/servers/testserver-replica1"),
			Location: to.Ptr("westcentralus"),
			Properties: &armpostgresql.ServerProperties{
				AdministratorLogin:       to.Ptr("postgres"),
				EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-20T00:17:56.677+00:00"); return t }()),
				FullyQualifiedDomainName: to.Ptr("testserver-replica1.postgres.database.azure.com"),
				MasterServerID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup_WestCentralUS/providers/Microsoft.DBforPostgreSQL/servers/testserver-master"),
				ReplicaCapacity:          to.Ptr[int32](0),
				ReplicationRole:          to.Ptr("Replica"),
				SSLEnforcement:           to.Ptr(armpostgresql.SSLEnforcementEnumDisabled),
				StorageProfile: &armpostgresql.StorageProfile{
					BackupRetentionDays: to.Ptr[int32](7),
					GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
					StorageMB:           to.Ptr[int32](2048000),
				},
				UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
				Version:          to.Ptr(armpostgresql.ServerVersionNine6),
			},
			SKU: &armpostgresql.SKU{
				Name:     to.Ptr("GP_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen4"),
				Tier:     to.Ptr(armpostgresql.SKUTierGeneralPurpose),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreateReplicaMode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreateGeoRestoreMode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a server as a geo restore "},
	})
	client = armpostgresql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"TargetResourceGroup",
		"targetserver",
		armpostgresql.ServerForCreate{
			Location: to.Ptr("westus"),
			Properties: &armpostgresql.ServerPropertiesForGeoRestore{
				CreateMode:     to.Ptr(armpostgresql.CreateModeGeoRestore),
				SourceServerID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/SourceResourceGroup/providers/Microsoft.DBforPostgreSQL/servers/sourceserver"),
			},
			SKU: &armpostgresql.SKU{
				Name:     to.Ptr("GP_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr(armpostgresql.SKUTierGeneralPurpose),
			},
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("1"),
			},
		},
		&armpostgresql.ServersClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreateGeoRestoreMode.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreateGeoRestoreMode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.Server{
			Name:     to.Ptr("targetserver"),
			Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/targetserver"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("1"),
			},
			Properties: &armpostgresql.ServerProperties{
				AdministratorLogin:       to.Ptr("cloudsa"),
				EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T21:08:24.637+00:00"); return t }()),
				FullyQualifiedDomainName: to.Ptr("targetserver.postgres.database.azure.com"),
				SSLEnforcement:           to.Ptr(armpostgresql.SSLEnforcementEnumEnabled),
				StorageProfile: &armpostgresql.StorageProfile{
					BackupRetentionDays: to.Ptr[int32](7),
					GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
					StorageMB:           to.Ptr[int32](128000),
				},
				UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
				Version:          to.Ptr(armpostgresql.ServerVersionNine6),
			},
			SKU: &armpostgresql.SKU{
				Name:     to.Ptr("GP_Gen5_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen5"),
				Tier:     to.Ptr(armpostgresql.SKUTierGeneralPurpose),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreateGeoRestoreMode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_Update(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"testrg",
		"pgtestsvc4",
		armpostgresql.ServerUpdateParameters{
			Properties: &armpostgresql.ServerUpdateParametersProperties{
				AdministratorLoginPassword: to.Ptr("<administratorLoginPassword>"),
				MinimalTLSVersion:          to.Ptr(armpostgresql.MinimalTLSVersionEnumTLS12),
				SSLEnforcement:             to.Ptr(armpostgresql.SSLEnforcementEnumEnabled),
			},
		},
		&armpostgresql.ServersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.Server{
			Name:     to.Ptr("pgtestsvc4"),
			Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc4"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"ElasticServer": to.Ptr("1"),
			},
			Properties: &armpostgresql.ServerProperties{
				AdministratorLogin:       to.Ptr("cloudsa"),
				EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T21:08:24.637+00:00"); return t }()),
				FullyQualifiedDomainName: to.Ptr("pgtestsvc4.postgres.database.azure.com"),
				MinimalTLSVersion:        to.Ptr(armpostgresql.MinimalTLSVersionEnumTLS12),
				SSLEnforcement:           to.Ptr(armpostgresql.SSLEnforcementEnumEnabled),
				StorageProfile: &armpostgresql.StorageProfile{
					BackupRetentionDays: to.Ptr[int32](7),
					GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
					StorageMB:           to.Ptr[int32](128000),
				},
				UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
				Version:          to.Ptr(armpostgresql.ServerVersionNine6),
			},
			SKU: &armpostgresql.SKU{
				Name:     to.Ptr("B_Gen4_2"),
				Capacity: to.Ptr[int32](2),
				Family:   to.Ptr("Gen4"),
				Tier:     to.Ptr(armpostgresql.SKUTierBasic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_Delete(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"testserver",
		&armpostgresql.ServersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerDelete.json: %v", err)
	}
}

func TestServers_Get(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"pgtestsvc1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.Server{
			Name:     to.Ptr("pgtestsvc1"),
			Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
			ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc1"),
			Location: to.Ptr("westus"),
			Properties: &armpostgresql.ServerProperties{
				AdministratorLogin:       to.Ptr("testuser"),
				EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-04T21:00:58.9243541+00:00"); return t }()),
				FullyQualifiedDomainName: to.Ptr("pgtestsvc1.postgres.database.azure.com"),
				MasterServerID:           to.Ptr(""),
				MinimalTLSVersion:        to.Ptr(armpostgresql.MinimalTLSVersionEnumTLS12),
				PrivateEndpointConnections: []*armpostgresql.ServerPrivateEndpointConnection{
					{
						ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc1/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
						Properties: &armpostgresql.ServerPrivateEndpointConnectionProperties{
							PrivateEndpoint: &armpostgresql.PrivateEndpointProperty{
								ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
							},
							PrivateLinkServiceConnectionState: &armpostgresql.ServerPrivateLinkServiceConnectionStateProperty{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr(armpostgresql.PrivateLinkServiceConnectionStateActionsRequireNone),
								Status:          to.Ptr(armpostgresql.PrivateLinkServiceConnectionStateStatusApproved),
							},
							ProvisioningState: to.Ptr(armpostgresql.PrivateEndpointProvisioningState("Succeeded")),
						},
					}},
				PublicNetworkAccess: to.Ptr(armpostgresql.PublicNetworkAccessEnumEnabled),
				ReplicationRole:     to.Ptr(""),
				SSLEnforcement:      to.Ptr(armpostgresql.SSLEnforcementEnumEnabled),
				StorageProfile: &armpostgresql.StorageProfile{
					BackupRetentionDays: to.Ptr[int32](10),
					GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
					StorageMB:           to.Ptr[int32](5120),
				},
				UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
				Version:          to.Ptr(armpostgresql.ServerVersionNine5),
			},
			SKU: &armpostgresql.SKU{
				Name:     to.Ptr("B_Gen4_1"),
				Capacity: to.Ptr[int32](1),
				Family:   to.Ptr("Gen4"),
				Tier:     to.Ptr(armpostgresql.SKUTierBasic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Server) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Server)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_ListByResourceGroup(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByResourceGroup("TestGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.ServerListResult{
			Value: []*armpostgresql.Server{
				{
					Name:     to.Ptr("pgtestsvc1"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc1"),
					Location: to.Ptr("westus"),
					Properties: &armpostgresql.ServerProperties{
						AdministratorLogin:         to.Ptr("testuser"),
						EarliestRestoreDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-04T21:01:55.1498475+00:00"); return t }()),
						FullyQualifiedDomainName:   to.Ptr("pgtestsvc1.postgres.database.azure.com"),
						PrivateEndpointConnections: []*armpostgresql.ServerPrivateEndpointConnection{},
						PublicNetworkAccess:        to.Ptr(armpostgresql.PublicNetworkAccessEnumEnabled),
						SSLEnforcement:             to.Ptr(armpostgresql.SSLEnforcementEnumEnabled),
						StorageProfile: &armpostgresql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](10),
							GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](5120),
						},
						UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
						Version:          to.Ptr(armpostgresql.ServerVersionNine5),
					},
					SKU: &armpostgresql.SKU{
						Name:     to.Ptr("B_Gen4_1"),
						Capacity: to.Ptr[int32](1),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armpostgresql.SKUTierBasic),
					},
				},
				{
					Name:     to.Ptr("pgtestsvc2"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc2"),
					Location: to.Ptr("westus"),
					Properties: &armpostgresql.ServerProperties{
						AdministratorLogin:       to.Ptr("testuser"),
						EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-07T21:01:55.1498475+00:00"); return t }()),
						FullyQualifiedDomainName: to.Ptr("pgtestsvc2.postgres.database.azure.com"),
						PrivateEndpointConnections: []*armpostgresql.ServerPrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc2/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
								Properties: &armpostgresql.ServerPrivateEndpointConnectionProperties{
									PrivateEndpoint: &armpostgresql.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armpostgresql.ServerPrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr(armpostgresql.PrivateLinkServiceConnectionStateActionsRequireNone),
										Status:          to.Ptr(armpostgresql.PrivateLinkServiceConnectionStateStatusApproved),
									},
									ProvisioningState: to.Ptr(armpostgresql.PrivateEndpointProvisioningState("Succeeded")),
								},
							}},
						PublicNetworkAccess: to.Ptr(armpostgresql.PublicNetworkAccessEnumEnabled),
						SSLEnforcement:      to.Ptr(armpostgresql.SSLEnforcementEnumEnabled),
						StorageProfile: &armpostgresql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](7),
							GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](5120),
						},
						UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
						Version:          to.Ptr(armpostgresql.ServerVersionNine6),
					},
					SKU: &armpostgresql.SKU{
						Name:     to.Ptr("GP_Gen4_2"),
						Capacity: to.Ptr[int32](2),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armpostgresql.SKUTierGeneralPurpose),
					},
				},
				{
					Name:     to.Ptr("pgtestsvc4"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc4"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"ElasticServer": to.Ptr("1"),
					},
					Properties: &armpostgresql.ServerProperties{
						AdministratorLogin:         to.Ptr("cloudsa"),
						EarliestRestoreDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T21:08:24.637+00:00"); return t }()),
						FullyQualifiedDomainName:   to.Ptr("pgtestsvc4.postgres.database.azure.com"),
						PrivateEndpointConnections: []*armpostgresql.ServerPrivateEndpointConnection{},
						PublicNetworkAccess:        to.Ptr(armpostgresql.PublicNetworkAccessEnumEnabled),
						SSLEnforcement:             to.Ptr(armpostgresql.SSLEnforcementEnumEnabled),
						StorageProfile: &armpostgresql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](7),
							GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](128000),
						},
						UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
						Version:          to.Ptr(armpostgresql.ServerVersionNine6),
					},
					SKU: &armpostgresql.SKU{
						Name:     to.Ptr("B_Gen4_2"),
						Capacity: to.Ptr[int32](2),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armpostgresql.SKUTierBasic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_List(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.ServerListResult{
			Value: []*armpostgresql.Server{
				{
					Name:     to.Ptr("pgtestsvc1"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc1"),
					Location: to.Ptr("westus"),
					Properties: &armpostgresql.ServerProperties{
						AdministratorLogin:         to.Ptr("testuser"),
						EarliestRestoreDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-04T21:01:55.1498475+00:00"); return t }()),
						FullyQualifiedDomainName:   to.Ptr("pgtestsvc1.postgres.database.azure.com"),
						MinimalTLSVersion:          to.Ptr(armpostgresql.MinimalTLSVersionEnumTLS11),
						PrivateEndpointConnections: []*armpostgresql.ServerPrivateEndpointConnection{},
						PublicNetworkAccess:        to.Ptr(armpostgresql.PublicNetworkAccessEnumEnabled),
						SSLEnforcement:             to.Ptr(armpostgresql.SSLEnforcementEnumEnabled),
						StorageProfile: &armpostgresql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](10),
							GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](5120),
						},
						UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
						Version:          to.Ptr(armpostgresql.ServerVersionNine5),
					},
					SKU: &armpostgresql.SKU{
						Name:     to.Ptr("B_Gen4_1"),
						Capacity: to.Ptr[int32](1),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armpostgresql.SKUTierBasic),
					},
				},
				{
					Name:     to.Ptr("pgtestsvc2"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc2"),
					Location: to.Ptr("westus"),
					Properties: &armpostgresql.ServerProperties{
						AdministratorLogin:       to.Ptr("testuser"),
						EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-07T21:01:55.1498475+00:00"); return t }()),
						FullyQualifiedDomainName: to.Ptr("pgtestsvc2.postgres.database.azure.com"),
						MinimalTLSVersion:        to.Ptr(armpostgresql.MinimalTLSVersionEnumTLS12),
						PrivateEndpointConnections: []*armpostgresql.ServerPrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc2/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
								Properties: &armpostgresql.ServerPrivateEndpointConnectionProperties{
									PrivateEndpoint: &armpostgresql.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armpostgresql.ServerPrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr(armpostgresql.PrivateLinkServiceConnectionStateActionsRequireNone),
										Status:          to.Ptr(armpostgresql.PrivateLinkServiceConnectionStateStatusApproved),
									},
									ProvisioningState: to.Ptr(armpostgresql.PrivateEndpointProvisioningState("Succeeded")),
								},
							}},
						PublicNetworkAccess: to.Ptr(armpostgresql.PublicNetworkAccessEnumEnabled),
						SSLEnforcement:      to.Ptr(armpostgresql.SSLEnforcementEnumEnabled),
						StorageProfile: &armpostgresql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](7),
							GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](5120),
						},
						UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
						Version:          to.Ptr(armpostgresql.ServerVersionNine6),
					},
					SKU: &armpostgresql.SKU{
						Name:     to.Ptr("GP_Gen4_2"),
						Capacity: to.Ptr[int32](2),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armpostgresql.SKUTierGeneralPurpose),
					},
				},
				{
					Name:     to.Ptr("pgtestsvc3"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg1/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc3"),
					Location: to.Ptr("westus"),
					Properties: &armpostgresql.ServerProperties{
						AdministratorLogin:       to.Ptr("testuser"),
						EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-01T00:11:08.55+00:00"); return t }()),
						FullyQualifiedDomainName: to.Ptr("pgtestsvc3.postgres.database.azure.com"),
						MinimalTLSVersion:        to.Ptr(armpostgresql.MinimalTLSVersionEnumTLS10),
						PrivateEndpointConnections: []*armpostgresql.ServerPrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc3/privateEndpointConnections/private-endpoint-name-00000000-1111-2222-3333-444444444444"),
								Properties: &armpostgresql.ServerPrivateEndpointConnectionProperties{
									PrivateEndpoint: &armpostgresql.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armpostgresql.ServerPrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr(armpostgresql.PrivateLinkServiceConnectionStateActionsRequireNone),
										Status:          to.Ptr(armpostgresql.PrivateLinkServiceConnectionStateStatusApproved),
									},
									ProvisioningState: to.Ptr(armpostgresql.PrivateEndpointProvisioningState("Succeeded")),
								},
							}},
						PublicNetworkAccess: to.Ptr(armpostgresql.PublicNetworkAccessEnumEnabled),
						SSLEnforcement:      to.Ptr(armpostgresql.SSLEnforcementEnumEnabled),
						StorageProfile: &armpostgresql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](35),
							GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupEnabled),
							StorageMB:           to.Ptr[int32](204800),
						},
						UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
						Version:          to.Ptr(armpostgresql.ServerVersionNine6),
					},
					SKU: &armpostgresql.SKU{
						Name:     to.Ptr("GP_Gen4_4"),
						Capacity: to.Ptr[int32](4),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armpostgresql.SKUTierGeneralPurpose),
					},
				},
				{
					Name:     to.Ptr("pgtestsvc4"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc4"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"ElasticServer": to.Ptr("1"),
					},
					Properties: &armpostgresql.ServerProperties{
						AdministratorLogin:         to.Ptr("cloudsa"),
						EarliestRestoreDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-14T21:08:24.637+00:00"); return t }()),
						FullyQualifiedDomainName:   to.Ptr("pgtestsvc4.postgres.database.azure.com"),
						MinimalTLSVersion:          to.Ptr(armpostgresql.MinimalTLSVersionEnumTLS10),
						PrivateEndpointConnections: []*armpostgresql.ServerPrivateEndpointConnection{},
						PublicNetworkAccess:        to.Ptr(armpostgresql.PublicNetworkAccessEnumEnabled),
						SSLEnforcement:             to.Ptr(armpostgresql.SSLEnforcementEnumEnabled),
						StorageProfile: &armpostgresql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](7),
							GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](128000),
						},
						UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
						Version:          to.Ptr(armpostgresql.ServerVersionNine6),
					},
					SKU: &armpostgresql.SKU{
						Name:     to.Ptr("B_Gen4_2"),
						Capacity: to.Ptr[int32](2),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armpostgresql.SKUTierBasic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServers_Restart(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerRestart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerRestart"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginRestart(ctx,
		"TestGroup",
		"testserver",
		&armpostgresql.ServersClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerRestart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerRestart.json: %v", err)
	}
}

func TestReplicas_ListByServer(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ReplicasListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicasListByServer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewReplicasClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("TestGroup_WestCentralUS",
		"testserver-master",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ReplicasListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.ServerListResult{
			Value: []*armpostgresql.Server{
				{
					Name:     to.Ptr("testserver-replica1"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup_WestCentralUS/providers/Microsoft.DBforPostgreSQL/servers/testserver-replica1"),
					Location: to.Ptr("westcentralus"),
					Properties: &armpostgresql.ServerProperties{
						AdministratorLogin:       to.Ptr("postgres"),
						EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T00:05:03.2695756+00:00"); return t }()),
						FullyQualifiedDomainName: to.Ptr("testserver-replica1.postgres.database.azure.com"),
						MasterServerID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup_WestCentralUS/providers/Microsoft.DBforPostgreSQL/servers/testserver-master"),
						ReplicaCapacity:          to.Ptr[int32](0),
						ReplicationRole:          to.Ptr("Replica"),
						SSLEnforcement:           to.Ptr(armpostgresql.SSLEnforcementEnumDisabled),
						StorageProfile: &armpostgresql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](7),
							GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](2048000),
						},
						UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
						Version:          to.Ptr(armpostgresql.ServerVersionNine6),
					},
					SKU: &armpostgresql.SKU{
						Name:     to.Ptr("GP_Gen4_16"),
						Capacity: to.Ptr[int32](16),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armpostgresql.SKUTierGeneralPurpose),
					},
				},
				{
					Name:     to.Ptr("testserver-replica2"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup_WestCentralUS/providers/Microsoft.DBforPostgreSQL/servers/testserver-replica2"),
					Location: to.Ptr("westcentralus"),
					Properties: &armpostgresql.ServerProperties{
						AdministratorLogin:       to.Ptr("postgres"),
						EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T00:05:03.2695756+00:00"); return t }()),
						FullyQualifiedDomainName: to.Ptr("testserver-replica2.postgres.database.azure.com"),
						MasterServerID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup_WestCentralUS/providers/Microsoft.DBforPostgreSQL/servers/testserver-master"),
						ReplicaCapacity:          to.Ptr[int32](0),
						ReplicationRole:          to.Ptr("Replica"),
						SSLEnforcement:           to.Ptr(armpostgresql.SSLEnforcementEnumDisabled),
						StorageProfile: &armpostgresql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](7),
							GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](2048000),
						},
						UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
						Version:          to.Ptr(armpostgresql.ServerVersionNine6),
					},
					SKU: &armpostgresql.SKU{
						Name:     to.Ptr("GP_Gen4_16"),
						Capacity: to.Ptr[int32](16),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armpostgresql.SKUTierGeneralPurpose),
					},
				},
				{
					Name:     to.Ptr("testserver-replica3"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup_WestCentralUS/providers/Microsoft.DBforPostgreSQL/servers/testserver-replica3"),
					Location: to.Ptr("westcentralus"),
					Properties: &armpostgresql.ServerProperties{
						AdministratorLogin:       to.Ptr("postgres"),
						EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T00:05:03.2695756+00:00"); return t }()),
						FullyQualifiedDomainName: to.Ptr("testserver-replica3.postgres.database.azure.com"),
						MasterServerID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup_WestCentralUS/providers/Microsoft.DBforPostgreSQL/servers/testserver-master"),
						ReplicaCapacity:          to.Ptr[int32](0),
						ReplicationRole:          to.Ptr("Replica"),
						SSLEnforcement:           to.Ptr(armpostgresql.SSLEnforcementEnumDisabled),
						StorageProfile: &armpostgresql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](7),
							GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](2048000),
						},
						UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
						Version:          to.Ptr(armpostgresql.ServerVersionNine6),
					},
					SKU: &armpostgresql.SKU{
						Name:     to.Ptr("GP_Gen4_16"),
						Capacity: to.Ptr[int32](16),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armpostgresql.SKUTierGeneralPurpose),
					},
				},
				{
					Name:     to.Ptr("testserver-replica4"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup_WestCentralUS/providers/Microsoft.DBforPostgreSQL/servers/testserver-replica4"),
					Location: to.Ptr("westcentralus"),
					Properties: &armpostgresql.ServerProperties{
						AdministratorLogin:       to.Ptr("postgres"),
						EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T00:05:03.2695756+00:00"); return t }()),
						FullyQualifiedDomainName: to.Ptr("testserver-replica4.postgres.database.azure.com"),
						MasterServerID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup_WestCentralUS/providers/Microsoft.DBforPostgreSQL/servers/testserver-master"),
						ReplicaCapacity:          to.Ptr[int32](0),
						ReplicationRole:          to.Ptr("Replica"),
						SSLEnforcement:           to.Ptr(armpostgresql.SSLEnforcementEnumDisabled),
						StorageProfile: &armpostgresql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](7),
							GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](2048000),
						},
						UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
						Version:          to.Ptr(armpostgresql.ServerVersionNine6),
					},
					SKU: &armpostgresql.SKU{
						Name:     to.Ptr("GP_Gen4_16"),
						Capacity: to.Ptr[int32](16),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armpostgresql.SKUTierGeneralPurpose),
					},
				},
				{
					Name:     to.Ptr("testserver-replica5"),
					Type:     to.Ptr("Microsoft.DBforPostgreSQL/servers"),
					ID:       to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup_WestCentralUS/providers/Microsoft.DBforPostgreSQL/servers/testserver-replica5"),
					Location: to.Ptr("westcentralus"),
					Properties: &armpostgresql.ServerProperties{
						AdministratorLogin:       to.Ptr("postgres"),
						EarliestRestoreDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T00:05:03.2695756+00:00"); return t }()),
						FullyQualifiedDomainName: to.Ptr("testserver-replica5.postgres.database.azure.com"),
						MasterServerID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup_WestCentralUS/providers/Microsoft.DBforPostgreSQL/servers/testserver-master"),
						ReplicaCapacity:          to.Ptr[int32](0),
						ReplicationRole:          to.Ptr("Replica"),
						SSLEnforcement:           to.Ptr(armpostgresql.SSLEnforcementEnumDisabled),
						StorageProfile: &armpostgresql.StorageProfile{
							BackupRetentionDays: to.Ptr[int32](7),
							GeoRedundantBackup:  to.Ptr(armpostgresql.GeoRedundantBackupDisabled),
							StorageMB:           to.Ptr[int32](2048000),
						},
						UserVisibleState: to.Ptr(armpostgresql.ServerStateReady),
						Version:          to.Ptr(armpostgresql.ServerVersionNine6),
					},
					SKU: &armpostgresql.SKU{
						Name:     to.Ptr("GP_Gen4_16"),
						Capacity: to.Ptr[int32](16),
						Family:   to.Ptr("Gen4"),
						Tier:     to.Ptr(armpostgresql.SKUTierGeneralPurpose),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ReplicasListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_CreateOrUpdate(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/FirewallRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FirewallRuleCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewFirewallRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"testserver",
		"rule1",
		armpostgresql.FirewallRule{
			Properties: &armpostgresql.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("255.255.255.255"),
				StartIPAddress: to.Ptr("0.0.0.0"),
			},
		},
		&armpostgresql.FirewallRulesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/FirewallRuleCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/FirewallRuleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.FirewallRule{
			Name: to.Ptr("rule1"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/firewallRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/firewallRules/rule1"),
			Properties: &armpostgresql.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("255.255.255.255"),
				StartIPAddress: to.Ptr("0.0.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/FirewallRuleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_Delete(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/FirewallRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FirewallRuleDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewFirewallRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"testserver",
		"rule1",
		&armpostgresql.FirewallRulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/FirewallRuleDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/FirewallRuleDelete.json: %v", err)
	}
}

func TestFirewallRules_Get(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/FirewallRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FirewallRuleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewFirewallRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"TestGroup",
		"testserver",
		"rule1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/FirewallRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.FirewallRule{
			Name: to.Ptr("rule1"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/firewallRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/firewallRules/rule1"),
			Properties: &armpostgresql.FirewallRuleProperties{
				EndIPAddress:   to.Ptr("255.255.255.255"),
				StartIPAddress: to.Ptr("0.0.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.FirewallRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.FirewallRule)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/FirewallRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFirewallRules_ListByServer(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/FirewallRuleListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"FirewallRuleList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewFirewallRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("TestGroup",
		"testserver",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/FirewallRuleListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.FirewallRuleListResult{
			Value: []*armpostgresql.FirewallRule{
				{
					Name: to.Ptr("rule1"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/firewallRules"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/firewallRules/rule1"),
					Properties: &armpostgresql.FirewallRuleProperties{
						EndIPAddress:   to.Ptr("255.255.255.255"),
						StartIPAddress: to.Ptr("0.0.0.0"),
					},
				},
				{
					Name: to.Ptr("rule2"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/firewallRules"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/firewallRules/rule2"),
					Properties: &armpostgresql.FirewallRuleProperties{
						EndIPAddress:   to.Ptr("255.0.0.0"),
						StartIPAddress: to.Ptr("1.0.0.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FirewallRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FirewallRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/FirewallRuleListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkRules_Get(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/VirtualNetworkRulesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a virtual network rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewVirtualNetworkRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"TestGroup",
		"vnet-test-svr",
		"vnet-firewall-rule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/VirtualNetworkRulesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.VirtualNetworkRule{
			Name: to.Ptr("vnet-firewall-rule"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/virtualNetworkRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/vnet-test-svr/virtualNetworkRules/vnet-firewall-rule"),
			Properties: &armpostgresql.VirtualNetworkRuleProperties{
				IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
				State:                            to.Ptr(armpostgresql.VirtualNetworkRuleStateReady),
				VirtualNetworkSubnetID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkRule)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/VirtualNetworkRulesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkRules_CreateOrUpdate(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/VirtualNetworkRulesCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a virtual network rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewVirtualNetworkRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"vnet-test-svr",
		"vnet-firewall-rule",
		armpostgresql.VirtualNetworkRule{
			Properties: &armpostgresql.VirtualNetworkRuleProperties{
				IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
				VirtualNetworkSubnetID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
			},
		},
		&armpostgresql.VirtualNetworkRulesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/VirtualNetworkRulesCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/VirtualNetworkRulesCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.VirtualNetworkRule{
			Name: to.Ptr("vnet-firewall-rule"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/virtualNetworkRules"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/vnet-test-svr/virtualNetworkRules/vnet-firewall-rule"),
			Properties: &armpostgresql.VirtualNetworkRuleProperties{
				IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
				VirtualNetworkSubnetID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetworkRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetworkRule)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/VirtualNetworkRulesCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworkRules_Delete(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/VirtualNetworkRulesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a virtual network rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewVirtualNetworkRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"vnet-test-svr",
		"vnet-firewall-rule",
		&armpostgresql.VirtualNetworkRulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/VirtualNetworkRulesDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/VirtualNetworkRulesDelete.json: %v", err)
	}
}

func TestVirtualNetworkRules_ListByServer(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/VirtualNetworkRulesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List virtual network rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewVirtualNetworkRulesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("TestGroup",
		"vnet-test-svr",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/VirtualNetworkRulesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.VirtualNetworkRuleListResult{
			Value: []*armpostgresql.VirtualNetworkRule{
				{
					Name: to.Ptr("vnet-firewall-rule"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/virtualNetworkRules"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/vnet-test-svr/virtualNetworkRules/vnet-firewall-rule"),
					Properties: &armpostgresql.VirtualNetworkRuleProperties{
						IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
						State:                            to.Ptr(armpostgresql.VirtualNetworkRuleStateReady),
						VirtualNetworkSubnetID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
					},
				},
				{
					Name: to.Ptr("vnet-firewall-rule"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/virtualNetworkRules"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/vnet-test-svr/virtualNetworkRules/vnet-firewall-rule"),
					Properties: &armpostgresql.VirtualNetworkRuleProperties{
						IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
						State:                            to.Ptr(armpostgresql.VirtualNetworkRuleStateReady),
						VirtualNetworkSubnetID:           to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/VirtualNetworkRulesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_CreateOrUpdate(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/DatabaseCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DatabaseCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewDatabasesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"testserver",
		"db1",
		armpostgresql.Database{
			Properties: &armpostgresql.DatabaseProperties{
				Charset:   to.Ptr("UTF8"),
				Collation: to.Ptr("English_United States.1252"),
			},
		},
		&armpostgresql.DatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/DatabaseCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/DatabaseCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.Database{
			Name: to.Ptr("db1"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/databases/db1"),
			Properties: &armpostgresql.DatabaseProperties{
				Charset:   to.Ptr("UTF8"),
				Collation: to.Ptr("English_United States.1252"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/DatabaseCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Delete(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/DatabaseDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DatabaseDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewDatabasesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestGroup",
		"testserver",
		"db1",
		&armpostgresql.DatabasesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/DatabaseDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/DatabaseDelete.json: %v", err)
	}
}

func TestDatabases_Get(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/DatabaseGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DatabaseGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewDatabasesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"TestGroup",
		"testserver",
		"db1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/DatabaseGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.Database{
			Name: to.Ptr("db1"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/databases/db1"),
			Properties: &armpostgresql.DatabaseProperties{
				Charset:   to.Ptr("UTF8"),
				Collation: to.Ptr("English_United States.1252"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/DatabaseGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_ListByServer(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/DatabaseListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DatabaseList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewDatabasesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("TestGroup",
		"testserver",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/DatabaseListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.DatabaseListResult{
			Value: []*armpostgresql.Database{
				{
					Name: to.Ptr("db1"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/databases/db1"),
					Properties: &armpostgresql.DatabaseProperties{
						Charset:   to.Ptr("UTF8"),
						Collation: to.Ptr("English_United States.1252"),
					},
				},
				{
					Name: to.Ptr("db2"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/databases"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/databases/db2"),
					Properties: &armpostgresql.DatabaseProperties{
						Charset:   to.Ptr("UTF8"),
						Collation: to.Ptr("English_United States.1252"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/DatabaseListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_CreateOrUpdate(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ConfigurationCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewConfigurationsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"TestGroup",
		"testserver",
		"array_nulls",
		armpostgresql.Configuration{
			Properties: &armpostgresql.ConfigurationProperties{
				Source: to.Ptr("user-override"),
				Value:  to.Ptr("off"),
			},
		},
		&armpostgresql.ConfigurationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ConfigurationCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ConfigurationCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.Configuration{
			Name: to.Ptr("array_nulls"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/array_nulls"),
			Properties: &armpostgresql.ConfigurationProperties{
				Description:   to.Ptr("Enable input of NULL elements in arrays."),
				AllowedValues: to.Ptr("on,off"),
				DataType:      to.Ptr("Boolean"),
				DefaultValue:  to.Ptr("on"),
				Source:        to.Ptr("user-override"),
				Value:         to.Ptr("off"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Configuration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Configuration)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ConfigurationCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_Get(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ConfigurationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewConfigurationsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"TestGroup",
		"testserver",
		"array_nulls",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ConfigurationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.Configuration{
			Name: to.Ptr("array_nulls"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/array_nulls"),
			Properties: &armpostgresql.ConfigurationProperties{
				Description:   to.Ptr("Enable input of NULL elements in arrays."),
				AllowedValues: to.Ptr("on,off"),
				DataType:      to.Ptr("Boolean"),
				DefaultValue:  to.Ptr("on"),
				Source:        to.Ptr("system-default"),
				Value:         to.Ptr("on"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Configuration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Configuration)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ConfigurationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurations_ListByServer(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ConfigurationListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewConfigurationsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("TestGroup",
		"testserver",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ConfigurationListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.ConfigurationListResult{
			Value: []*armpostgresql.Configuration{
				{
					Name: to.Ptr("array_nulls"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/array_nulls"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enable input of NULL elements in arrays."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("backslash_quote"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/backslash_quote"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets whether \"\\'\" is allowed in string literals."),
						AllowedValues: to.Ptr("safe_encoding,on,off"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("safe_encoding"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("safe_encoding"),
					},
				},
				{
					Name: to.Ptr("bytea_output"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/bytea_output"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the output format for bytea."),
						AllowedValues: to.Ptr("escape,hex"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("hex"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("hex"),
					},
				},
				{
					Name: to.Ptr("check_function_bodies"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/check_function_bodies"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Check function bodies during CREATE FUNCTION."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("client_encoding"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/client_encoding"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the client's character set encoding."),
						AllowedValues: to.Ptr("BIG5,EUC_CN,EUC_JP,EUC_JIS_2004,EUC_KR,EUC_TW,GB18030,GBK,ISO_8859_5,ISO_8859_6,ISO_8859_7,ISO_8859_8,JOHAB,KOI8R,KOI8U,LATIN1,LATIN2,LATIN3,LATIN4,LATIN5,LATIN6,LATIN7,LATIN8,LATIN9,LATIN10,MULE_INTERNAL,SJIS,SHIFT_JIS_2004,SQL_ASCII,UHC,UTF8,WIN866,WIN874,WIN1250,WIN1251,WIN1252,WIN1253,WIN1254,WIN1255,WIN1256,WIN1257,WIN1258"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("sql_ascii"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("sql_ascii"),
					},
				},
				{
					Name: to.Ptr("client_min_messages"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/client_min_messages"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the message levels that are sent to the client."),
						AllowedValues: to.Ptr("debug5,debug4,debug3,debug2,debug1,log,notice,warning,error"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("notice"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("notice"),
					},
				},
				{
					Name: to.Ptr("constraint_exclusion"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/constraint_exclusion"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enables the planner to use constraints to optimize queries."),
						AllowedValues: to.Ptr("partition,on,off"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("partition"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("partition"),
					},
				},
				{
					Name: to.Ptr("cpu_index_tuple_cost"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/cpu_index_tuple_cost"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the planner's estimate of the cost of processing each index entry during an index scan."),
						AllowedValues: to.Ptr("0-1.79769e+308"),
						DataType:      to.Ptr("Numeric"),
						DefaultValue:  to.Ptr("0.005"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0.005"),
					},
				},
				{
					Name: to.Ptr("cpu_operator_cost"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/cpu_operator_cost"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the planner's estimate of the cost of processing each operator or function call."),
						AllowedValues: to.Ptr("0-1.79769e+308"),
						DataType:      to.Ptr("Numeric"),
						DefaultValue:  to.Ptr("0.0025"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0.0025"),
					},
				},
				{
					Name: to.Ptr("cpu_tuple_cost"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/cpu_tuple_cost"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the planner's estimate of the cost of processing each tuple (row)."),
						AllowedValues: to.Ptr("0-1.79769e+308"),
						DataType:      to.Ptr("Numeric"),
						DefaultValue:  to.Ptr("0.01"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0.01"),
					},
				},
				{
					Name: to.Ptr("cursor_tuple_fraction"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/cursor_tuple_fraction"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the planner's estimate of the fraction of a cursor's rows that will be retrieved."),
						AllowedValues: to.Ptr("0-1"),
						DataType:      to.Ptr("Numeric"),
						DefaultValue:  to.Ptr("0.1"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0.1"),
					},
				},
				{
					Name: to.Ptr("datestyle"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/datestyle"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the display format for date and time values."),
						AllowedValues: to.Ptr("(iso|postgres|sql|german)\\,\\s(dmy|mdy|ymd)"),
						DataType:      to.Ptr("String"),
						DefaultValue:  to.Ptr("iso, mdy"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("iso, mdy"),
					},
				},
				{
					Name: to.Ptr("deadlock_timeout"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/deadlock_timeout"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the amount of time, in milliseconds, to wait on a lock before checking for deadlock."),
						AllowedValues: to.Ptr("1-2147483647"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("1000"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("1000"),
					},
				},
				{
					Name: to.Ptr("debug_print_parse"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/debug_print_parse"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Logs each query's parse tree."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("debug_print_plan"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/debug_print_plan"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Logs each query's execution plan."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("debug_print_rewritten"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/debug_print_rewritten"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Logs each query's rewritten parse tree."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("default_statistics_target"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/default_statistics_target"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the default statistics target."),
						AllowedValues: to.Ptr("1-10000"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("100"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("100"),
					},
				},
				{
					Name: to.Ptr("default_text_search_config"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/default_text_search_config"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets default text search configuration."),
						AllowedValues: to.Ptr("[A-Za-z\\._]+"),
						DataType:      to.Ptr("String"),
						DefaultValue:  to.Ptr("pg_catalog.english"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("pg_catalog.english"),
					},
				},
				{
					Name: to.Ptr("default_transaction_deferrable"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/default_transaction_deferrable"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the default deferrable status of new transactions."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("default_transaction_isolation"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/default_transaction_isolation"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the transaction isolation level of each new transaction."),
						AllowedValues: to.Ptr("serializable,repeatable read,read committed,read uncommitted"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("read committed"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("read committed"),
					},
				},
				{
					Name: to.Ptr("default_transaction_read_only"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/default_transaction_read_only"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the default read-only status of new transactions."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("default_with_oids"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/default_with_oids"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Create new tables with OIDs by default."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("enable_bitmapscan"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/enable_bitmapscan"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enables the planner's use of bitmap-scan plans."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("enable_hashagg"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/enable_hashagg"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enables the planner's use of hashed aggregation plans."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("enable_hashjoin"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/enable_hashjoin"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enables the planner's use of hash join plans."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("enable_indexonlyscan"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/enable_indexonlyscan"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enables the planner's use of index-only-scan plans."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("enable_indexscan"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/enable_indexscan"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enables the planner's use of index-scan plans."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("enable_material"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/enable_material"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enables the planner's use of materialization."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("enable_mergejoin"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/enable_mergejoin"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enables the planner's use of merge join plans."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("enable_nestloop"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/enable_nestloop"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enables the planner's use of nested-loop join plans."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("enable_seqscan"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/enable_seqscan"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enables the planner's use of sequential-scan plans."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("enable_sort"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/enable_sort"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enables the planner's use of explicit sort steps."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("enable_tidscan"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/enable_tidscan"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enables the planner's use of TID scan plans."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("escape_string_warning"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/escape_string_warning"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Warn about backslash escapes in ordinary string literals."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("exit_on_error"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/exit_on_error"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Terminate session on any error."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("extra_float_digits"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/extra_float_digits"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the number of digits displayed for floating-point values."),
						AllowedValues: to.Ptr("-15-3"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0"),
					},
				},
				{
					Name: to.Ptr("from_collapse_limit"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/from_collapse_limit"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the FROM-list size beyond which subqueries are not collapsed."),
						AllowedValues: to.Ptr("1-2147483647"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("8"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("8"),
					},
				},
				{
					Name: to.Ptr("geqo"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/geqo"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enables genetic query optimization."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("geqo_effort"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/geqo_effort"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("GEQO: effort is used to set the default for other GEQO parameters."),
						AllowedValues: to.Ptr("1-10"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("5"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("5"),
					},
				},
				{
					Name: to.Ptr("geqo_generations"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/geqo_generations"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("GEQO: number of iterations of the algorithm."),
						AllowedValues: to.Ptr("0-2147483647"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0"),
					},
				},
				{
					Name: to.Ptr("geqo_pool_size"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/geqo_pool_size"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("GEQO: number of individuals in the population."),
						AllowedValues: to.Ptr("0-2147483647"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0"),
					},
				},
				{
					Name: to.Ptr("geqo_seed"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/geqo_seed"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("GEQO: seed for random path selection."),
						AllowedValues: to.Ptr("0-1"),
						DataType:      to.Ptr("Numeric"),
						DefaultValue:  to.Ptr("0.0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0.0"),
					},
				},
				{
					Name: to.Ptr("geqo_selection_bias"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/geqo_selection_bias"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("GEQO: selective pressure within the population."),
						AllowedValues: to.Ptr("1.5-2"),
						DataType:      to.Ptr("Numeric"),
						DefaultValue:  to.Ptr("2.0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("2.0"),
					},
				},
				{
					Name: to.Ptr("geqo_threshold"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/geqo_threshold"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the threshold of FROM items beyond which GEQO is used."),
						AllowedValues: to.Ptr("2-2147483647"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("12"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("12"),
					},
				},
				{
					Name: to.Ptr("gin_fuzzy_search_limit"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/gin_fuzzy_search_limit"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the maximum allowed result for exact search by GIN."),
						AllowedValues: to.Ptr("0-2147483647"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0"),
					},
				},
				{
					Name: to.Ptr("intervalstyle"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/intervalstyle"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the display format for interval values."),
						AllowedValues: to.Ptr("postgres,postgres_verbose,sql_standard,iso_8601"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("postgres"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("postgres"),
					},
				},
				{
					Name: to.Ptr("join_collapse_limit"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/join_collapse_limit"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the FROM-list size beyond which JOIN constructs are not flattened."),
						AllowedValues: to.Ptr("1-2147483647"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("8"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("8"),
					},
				},
				{
					Name: to.Ptr("lock_timeout"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/lock_timeout"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the maximum allowed duration (in milliseconds) of any wait for a lock. 0 turns this off."),
						AllowedValues: to.Ptr("0-2147483647"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0"),
					},
				},
				{
					Name: to.Ptr("log_checkpoints"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/log_checkpoints"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Logs each checkpoint."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("log_connections"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/log_connections"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Logs each successful connection."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("log_disconnections"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/log_disconnections"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Logs end of a session, including duration."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("log_duration"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/log_duration"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Logs the duration of each completed SQL statement."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("log_error_verbosity"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/log_error_verbosity"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the verbosity of logged messages."),
						AllowedValues: to.Ptr("terse,default,verbose"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("default"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("default"),
					},
				},
				{
					Name: to.Ptr("log_lock_waits"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/log_lock_waits"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Logs long lock waits."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("log_min_duration_statement"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/log_min_duration_statement"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the minimum execution time (in milliseconds) above which statements will be logged. -1 disables logging statement durations."),
						AllowedValues: to.Ptr("-1-2147483647"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("-1"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("-1"),
					},
				},
				{
					Name: to.Ptr("log_min_error_statement"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/log_min_error_statement"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Causes all statements generating error at or above this level to be logged."),
						AllowedValues: to.Ptr("debug5,debug4,debug3,debug2,debug1,info,notice,warning,error,log,fatal,panic"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("error"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("error"),
					},
				},
				{
					Name: to.Ptr("log_min_messages"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/log_min_messages"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the message levels that are logged."),
						AllowedValues: to.Ptr("debug5,debug4,debug3,debug2,debug1,info,notice,warning,error,log,fatal,panic"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("warning"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("warning"),
					},
				},
				{
					Name: to.Ptr("log_statement"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/log_statement"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the type of statements logged."),
						AllowedValues: to.Ptr("none,ddl,mod,all"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("none"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("none"),
					},
				},
				{
					Name: to.Ptr("max_locks_per_transaction"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/max_locks_per_transaction"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the maximum number of locks per transaction."),
						AllowedValues: to.Ptr("10-2147483647"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("64"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("64"),
					},
				},
				{
					Name: to.Ptr("max_pred_locks_per_transaction"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/max_pred_locks_per_transaction"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the maximum number of predicate locks per transaction."),
						AllowedValues: to.Ptr("10-2147483647"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("64"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("64"),
					},
				},
				{
					Name: to.Ptr("max_prepared_transactions"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/max_prepared_transactions"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the maximum number of simultaneously prepared transactions."),
						AllowedValues: to.Ptr("0-8388607"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0"),
					},
				},
				{
					Name: to.Ptr("quote_all_identifiers"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/quote_all_identifiers"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("When generating SQL fragments, quote all identifiers."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("random_page_cost"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/random_page_cost"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the planner's estimate of the cost of a nonsequentially fetched disk page."),
						AllowedValues: to.Ptr("0-1.79769e+308"),
						DataType:      to.Ptr("Numeric"),
						DefaultValue:  to.Ptr("4.0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("4.0"),
					},
				},
				{
					Name: to.Ptr("search_path"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/search_path"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the schema search order for names that are not schema-qualified."),
						AllowedValues: to.Ptr("[A-Za-z.\"$, ]+"),
						DataType:      to.Ptr("String"),
						DefaultValue:  to.Ptr("\"$user\", public"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("\"$user\", public"),
					},
				},
				{
					Name: to.Ptr("seq_page_cost"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/seq_page_cost"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the planner's estimate of the cost of a sequentially fetched disk page."),
						AllowedValues: to.Ptr("0-1.79769e+308"),
						DataType:      to.Ptr("Numeric"),
						DefaultValue:  to.Ptr("1.0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("1.0"),
					},
				},
				{
					Name: to.Ptr("sql_inheritance"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/sql_inheritance"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Causes subtables to be included by default in various commands."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("standard_conforming_strings"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/standard_conforming_strings"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Causes '...' strings to treat backslashes literally."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("statement_timeout"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/statement_timeout"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the maximum allowed duration (in milliseconds) of any statement. 0 turns this off."),
						AllowedValues: to.Ptr("0-2147483647"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0"),
					},
				},
				{
					Name: to.Ptr("synchronize_seqscans"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/synchronize_seqscans"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enable synchronized sequential scans."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("synchronous_commit"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/synchronous_commit"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the current transaction's synchronization level."),
						AllowedValues: to.Ptr("local,remote_write,on,off"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("transform_null_equals"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/transform_null_equals"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Treats \"expr=NULL\" as \"expr IS NULL\"."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("xmlbinary"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/xmlbinary"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets how binary values are to be encoded in XML."),
						AllowedValues: to.Ptr("base64,hex"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("base64"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("base64"),
					},
				},
				{
					Name: to.Ptr("xmloption"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/xmloption"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets whether XML data in implicit parsing and serialization operations is to be considered as documents or content fragments."),
						AllowedValues: to.Ptr("content,document"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("content"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("content"),
					},
				},
				{
					Name: to.Ptr("force_parallel_mode"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/force_parallel_mode"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Forces use of parallel query facilities."),
						AllowedValues: to.Ptr("off,on,regress"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("off"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("off"),
					},
				},
				{
					Name: to.Ptr("idle_in_transaction_session_timeout"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/idle_in_transaction_session_timeout"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the maximum allowed duration of any idling transaction."),
						AllowedValues: to.Ptr("0-2147483647"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0"),
					},
				},
				{
					Name: to.Ptr("max_parallel_workers_per_gather"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/max_parallel_workers_per_gather"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the maximum number of parallel processes per executor node."),
						AllowedValues: to.Ptr("0-1024"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("0"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0"),
					},
				},
				{
					Name: to.Ptr("min_parallel_relation_size"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/min_parallel_relation_size"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the minimum size of relations to be considered for parallel scan."),
						AllowedValues: to.Ptr("0-715827882"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("8388608"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("8388608"),
					},
				},
				{
					Name: to.Ptr("parallel_setup_cost"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/parallel_setup_cost"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the planner's estimate of the cost of starting up worker processes for parallel query."),
						AllowedValues: to.Ptr("0-1.79769e+308"),
						DataType:      to.Ptr("Numeric"),
						DefaultValue:  to.Ptr("1000"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("1000"),
					},
				},
				{
					Name: to.Ptr("parallel_tuple_cost"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/parallel_tuple_cost"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets the planner's estimate of the cost of passing each tuple (row) from worker to master backend."),
						AllowedValues: to.Ptr("0-1.79769e+308"),
						DataType:      to.Ptr("Numeric"),
						DefaultValue:  to.Ptr("0.1"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("0.1"),
					},
				},
				{
					Name: to.Ptr("log_retention_days"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/log_retention_days"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets how many days a log file is saved for."),
						AllowedValues: to.Ptr("1-7"),
						DataType:      to.Ptr("Integer"),
						DefaultValue:  to.Ptr("3"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("3"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ConfigurationListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerParameters_ListUpdateConfigurations(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ConfigurationsUpdateByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConfigurationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServerParametersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginListUpdateConfigurations(ctx,
		"TestGroup",
		"testserver",
		armpostgresql.ConfigurationListResult{},
		&armpostgresql.ServerParametersClientBeginListUpdateConfigurationsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ConfigurationsUpdateByServer.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ConfigurationsUpdateByServer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.ConfigurationListResult{
			Value: []*armpostgresql.Configuration{
				{
					Name: to.Ptr("array_nulls"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/array_nulls"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Enable input of NULL elements in arrays."),
						AllowedValues: to.Ptr("on,off"),
						DataType:      to.Ptr("Boolean"),
						DefaultValue:  to.Ptr("on"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("on"),
					},
				},
				{
					Name: to.Ptr("backslash_quote"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/configurations"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/configurations/backslash_quote"),
					Properties: &armpostgresql.ConfigurationProperties{
						Description:   to.Ptr("Sets whether \"\\'\" is allowed in string literals."),
						AllowedValues: to.Ptr("safe_encoding,on,off"),
						DataType:      to.Ptr("Enumeration"),
						DefaultValue:  to.Ptr("safe_encoding"),
						Source:        to.Ptr("system-default"),
						Value:         to.Ptr("safe_encoding"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ConfigurationsUpdateByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLogFiles_ListByServer(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/LogFileListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LogFileList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewLogFilesClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.ListByServer("TestGroup",
		"testserver",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/LogFileListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.LogFileListResult{
			Value: []*armpostgresql.LogFile{
				{
					Name: to.Ptr("postgresql-2017-06-22_010000.log"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/logFiles"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/logFiles/postgresql-2017-06-22_010000.log"),
					Properties: &armpostgresql.LogFileProperties{
						Type:             to.Ptr("text"),
						CreatedTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-22T01:59:36+00:00"); return t }()),
						SizeInKB:         to.Ptr[int64](4),
						URL:              to.Ptr("https://wasd2stageneu1btlm4.file.core.windows.net/42679871f6cc4302b39ab9c2e3044df3/pg_log/postgresql-2017-06-22_010000.log?sv=2015-04-05&sr=f&sig=gqIQsa6VyGyUNpzYYPWLP5gM%2BeF1so9GYbHKu6Zs0DM%3D&se=2017-06-22T03%3A21%3A09Z&sp=r"),
					},
				},
				{
					Name: to.Ptr("postgresql-2017-06-22_020000.log"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/logFiles"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup/providers/Microsoft.DBforPostgreSQL/servers/testserver/logFiles/postgresql-2017-06-22_020000.log"),
					Properties: &armpostgresql.LogFileProperties{
						Type:             to.Ptr("text"),
						CreatedTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00+00:00"); return t }()),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-22T02:19:36+00:00"); return t }()),
						SizeInKB:         to.Ptr[int64](1),
						URL:              to.Ptr("https://wasd2stageneu1btlm4.file.core.windows.net/42679871f6cc4302b39ab9c2e3044df3/pg_log/postgresql-2017-06-22_020000.log?sv=2015-04-05&sr=f&sig=i99UWBlYfR0tKaxix8yHAOnfym4HV9Auto6BbZogyRs%3D&se=2017-06-22T03%3A21%3A09Z&sp=r"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LogFileListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LogFileListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/LogFileListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAdministrators_Get(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerAdminGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerAdministratorGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServerAdministratorsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"pgtestsvc4",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerAdminGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.ServerAdministratorResource{
			Name: to.Ptr("activeDirectory"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/administrators"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc4/administrators/activeDirectory"),
			Properties: &armpostgresql.ServerAdministratorProperties{
				AdministratorType: to.Ptr("ActiveDirectory"),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerAdministratorResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerAdministratorResource)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerAdminGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAdministrators_CreateOrUpdate(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerAdminCreateUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerAdministratorCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServerAdministratorsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg",
		"pgtestsvc4",
		armpostgresql.ServerAdministratorResource{
			Properties: &armpostgresql.ServerAdministratorProperties{
				AdministratorType: to.Ptr("ActiveDirectory"),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		},
		&armpostgresql.ServerAdministratorsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerAdminCreateUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerAdminCreateUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.ServerAdministratorResource{
			Name: to.Ptr("activeDirectory"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/administrators"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc4/administrators/activeDirectory"),
			Properties: &armpostgresql.ServerAdministratorProperties{
				AdministratorType: to.Ptr("ActiveDirectory"),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerAdministratorResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerAdministratorResource)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerAdminCreateUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerAdministrators_Delete(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerAdminDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ServerAdministratorsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServerAdministratorsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testrg",
		"pgtestsvc4",
		&armpostgresql.ServerAdministratorsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerAdminDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerAdminDelete.json: %v", err)
	}
}

func TestServerAdministrators_List(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerAdminList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"get a list of server administrators"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServerAdministratorsClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.List("testrg",
		"pgtestsvc4",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerAdminList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.ServerAdministratorResourceListResult{
			Value: []*armpostgresql.ServerAdministratorResource{
				{
					Name: to.Ptr("ActiveDirectory"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/administrators"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc4/administrators/activeDirectory"),
					Properties: &armpostgresql.ServerAdministratorProperties{
						AdministratorType: to.Ptr("ActiveDirectory"),
						Login:             to.Ptr("bob@contoso.com"),
						Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
						TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerAdministratorResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerAdministratorResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerAdminList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRecoverableServers_Get(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/RecoverableServersGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicasListByServer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewRecoverableServersClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"pgtestsvc4",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/RecoverableServersGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.RecoverableServerResource{
			Name: to.Ptr("recoverableServers"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/recoverableServers"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/pgtestsvc4/recoverableServers"),
			Properties: &armpostgresql.RecoverableServerProperties{
				Edition:                     to.Ptr("GeneralPurpose"),
				HardwareGeneration:          to.Ptr("Gen5"),
				LastAvailableBackupDateTime: to.Ptr("2020-11-20T01:06:29.78Z"),
				ServiceLevelObjective:       to.Ptr("GP_Gen5_2"),
				VCore:                       to.Ptr[int32](2),
				Version:                     to.Ptr("9.6"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoverableServerResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoverableServerResource)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/RecoverableServersGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerBasedPerformanceTier_List(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/PerformanceTiersListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PerformanceTiersList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServerBasedPerformanceTierClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.List("TestGroup",
		"testserver",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/PerformanceTiersListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.PerformanceTierListResult{
			Value: []*armpostgresql.PerformanceTierProperties{
				{
					ID:                     to.Ptr("Basic"),
					MaxBackupRetentionDays: to.Ptr[int32](35),
					MaxLargeStorageMB:      to.Ptr[int32](0),
					MaxStorageMB:           to.Ptr[int32](2097152),
					MinBackupRetentionDays: to.Ptr[int32](7),
					MinLargeStorageMB:      to.Ptr[int32](0),
					MinStorageMB:           to.Ptr[int32](5120),
					ServiceLevelObjectives: []*armpostgresql.PerformanceTierServiceLevelObjectives{
						{
							Edition:                to.Ptr("Basic"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("B_Gen5_1"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](1048576),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](1),
						},
						{
							Edition:                to.Ptr("Basic"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("B_Gen5_2"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](1048576),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](2),
						}},
				},
				{
					ID:                     to.Ptr("GeneralPurpose"),
					MaxBackupRetentionDays: to.Ptr[int32](35),
					MaxLargeStorageMB:      to.Ptr[int32](16777216),
					MaxStorageMB:           to.Ptr[int32](16777216),
					MinBackupRetentionDays: to.Ptr[int32](7),
					MinLargeStorageMB:      to.Ptr[int32](0),
					MinStorageMB:           to.Ptr[int32](5120),
					ServiceLevelObjectives: []*armpostgresql.PerformanceTierServiceLevelObjectives{
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_2"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](2),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_4"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](4),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_8"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](8),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_16"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](16),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_32"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](32),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_64"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](32),
						}},
				},
				{
					ID:                     to.Ptr("MemoryOptimized"),
					MaxBackupRetentionDays: to.Ptr[int32](35),
					MaxLargeStorageMB:      to.Ptr[int32](16777216),
					MaxStorageMB:           to.Ptr[int32](16777216),
					MinBackupRetentionDays: to.Ptr[int32](7),
					MinLargeStorageMB:      to.Ptr[int32](0),
					MinStorageMB:           to.Ptr[int32](5120),
					ServiceLevelObjectives: []*armpostgresql.PerformanceTierServiceLevelObjectives{
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_2"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](2),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_4"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](4),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_8"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](8),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_16"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](16),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_32"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](32),
						}},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PerformanceTierListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PerformanceTierListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/PerformanceTiersListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocationBasedPerformanceTier_List(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/PerformanceTiersListByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PerformanceTiersList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewLocationBasedPerformanceTierClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.List("WestUS",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/PerformanceTiersListByLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.PerformanceTierListResult{
			Value: []*armpostgresql.PerformanceTierProperties{
				{
					ID:                     to.Ptr("Basic"),
					MaxBackupRetentionDays: to.Ptr[int32](35),
					MaxLargeStorageMB:      to.Ptr[int32](0),
					MaxStorageMB:           to.Ptr[int32](2097152),
					MinBackupRetentionDays: to.Ptr[int32](7),
					MinLargeStorageMB:      to.Ptr[int32](0),
					MinStorageMB:           to.Ptr[int32](5120),
					ServiceLevelObjectives: []*armpostgresql.PerformanceTierServiceLevelObjectives{
						{
							Edition:                to.Ptr("Basic"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("B_Gen5_1"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](1048576),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](1),
						},
						{
							Edition:                to.Ptr("Basic"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("B_Gen5_2"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](1048576),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](2),
						}},
				},
				{
					ID:                     to.Ptr("GeneralPurpose"),
					MaxBackupRetentionDays: to.Ptr[int32](35),
					MaxLargeStorageMB:      to.Ptr[int32](16777216),
					MaxStorageMB:           to.Ptr[int32](16777216),
					MinBackupRetentionDays: to.Ptr[int32](7),
					MinLargeStorageMB:      to.Ptr[int32](0),
					MinStorageMB:           to.Ptr[int32](5120),
					ServiceLevelObjectives: []*armpostgresql.PerformanceTierServiceLevelObjectives{
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_2"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](2),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_4"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](4),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_8"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](8),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_16"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](16),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_32"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](32),
						},
						{
							Edition:                to.Ptr("GeneralPurpose"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("GP_Gen5_64"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](32),
						}},
				},
				{
					ID:                     to.Ptr("MemoryOptimized"),
					MaxBackupRetentionDays: to.Ptr[int32](35),
					MaxLargeStorageMB:      to.Ptr[int32](16777216),
					MaxStorageMB:           to.Ptr[int32](16777216),
					MinBackupRetentionDays: to.Ptr[int32](7),
					MinLargeStorageMB:      to.Ptr[int32](0),
					MinStorageMB:           to.Ptr[int32](5120),
					ServiceLevelObjectives: []*armpostgresql.PerformanceTierServiceLevelObjectives{
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_2"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](2),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_4"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](4),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_8"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](8),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_16"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](16),
						},
						{
							Edition:                to.Ptr("MemoryOptimized"),
							HardwareGeneration:     to.Ptr("Gen5"),
							ID:                     to.Ptr("MO_Gen5_32"),
							MaxBackupRetentionDays: to.Ptr[int32](35),
							MaxStorageMB:           to.Ptr[int32](2097152),
							MinBackupRetentionDays: to.Ptr[int32](7),
							MinStorageMB:           to.Ptr[int32](5120),
							VCore:                  to.Ptr[int32](32),
						}},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PerformanceTierListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PerformanceTierListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/PerformanceTiersListByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCheckNameAvailability_Execute(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewCheckNameAvailabilityClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Execute(ctx,
		armpostgresql.NameAvailabilityRequest{
			Name: to.Ptr("name1"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.NameAvailability{
			Message:       to.Ptr(""),
			NameAvailable: to.Ptr(true),
			Reason:        to.Ptr(""),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailability) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailability)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/OperationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewOperationsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/OperationList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.OperationListResult{
			Value: []*armpostgresql.Operation{
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/locations/performanceTiers/read"),
					Display: &armpostgresql.OperationDisplay{
						Description: to.Ptr("Returns the list of Performance Tiers available."),
						Operation:   to.Ptr("List Performance Tiers"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Performance Tiers"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/servers/read"),
					Display: &armpostgresql.OperationDisplay{
						Description: to.Ptr("Return the list of servers or gets the properties for the specified server."),
						Operation:   to.Ptr("List/Get PostgreSQL Servers"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("PostgreSQL Server"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/servers/write"),
					Display: &armpostgresql.OperationDisplay{
						Description: to.Ptr("Creates a server with the specified parameters or update the properties or tags for the specified server."),
						Operation:   to.Ptr("Create/Update PostgreSQL Server"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("PostgreSQL Server"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/servers/delete"),
					Display: &armpostgresql.OperationDisplay{
						Description: to.Ptr("Deletes an existing server."),
						Operation:   to.Ptr("Delete PostgreSQL Server"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("PostgreSQL Server"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/performanceTiers/read"),
					Display: &armpostgresql.OperationDisplay{
						Description: to.Ptr("Returns the list of Performance Tiers available."),
						Operation:   to.Ptr("List Performance Tiers"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Performance Tiers"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/servers/firewallRules/read"),
					Display: &armpostgresql.OperationDisplay{
						Description: to.Ptr("Return the list of firewall rules for a server or gets the properties for the specified firewall rule."),
						Operation:   to.Ptr("List/Get Firewall Rules"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Firewall Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/servers/firewallRules/write"),
					Display: &armpostgresql.OperationDisplay{
						Description: to.Ptr("Creates a firewall rule with the specified parameters or update an existing rule."),
						Operation:   to.Ptr("Create/Update Firewall Rule"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Firewall Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/servers/firewallRules/delete"),
					Display: &armpostgresql.OperationDisplay{
						Description: to.Ptr("Deletes an existing firewall rule."),
						Operation:   to.Ptr("Delete Firewall Rule"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Firewall Rules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/servers/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armpostgresql.OperationDisplay{
						Description: to.Ptr("Return types of metrics that are available for databases"),
						Operation:   to.Ptr("Get database metric definitions"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Database Metric Definition"),
					},
					Properties: map[string]interface{}{
						"serviceSpecification": map[string]interface{}{
							"metricSpecifications": []interface{}{
								map[string]interface{}{
									"name":               "cpu_percent",
									"aggregationType":    "Average",
									"displayDescription": "CPU percent",
									"displayName":        "CPU percent",
									"fillGapWithZero":    true,
									"unit":               "Percent",
								},
								map[string]interface{}{
									"name":               "memory_percent",
									"aggregationType":    "Average",
									"displayDescription": "Memory percent",
									"displayName":        "Memory percent",
									"fillGapWithZero":    true,
									"unit":               "Percent",
								},
								map[string]interface{}{
									"name":               "io_consumption_percent",
									"aggregationType":    "Average",
									"displayDescription": "IO percent",
									"displayName":        "IO percent",
									"fillGapWithZero":    true,
									"unit":               "Percent",
								},
								map[string]interface{}{
									"name":               "storage_percent",
									"aggregationType":    "Average",
									"displayDescription": "Storage percentage",
									"displayName":        "Storage percentage",
									"unit":               "Percent",
								},
								map[string]interface{}{
									"name":               "storage_used",
									"aggregationType":    "Average",
									"displayDescription": "Storage used",
									"displayName":        "Storage used",
									"unit":               "Bytes",
								},
								map[string]interface{}{
									"name":               "storage_limit",
									"aggregationType":    "Average",
									"displayDescription": "Storage limit",
									"displayName":        "Storage limit",
									"unit":               "Bytes",
								},
								map[string]interface{}{
									"name":               "active_connections",
									"aggregationType":    "Average",
									"displayDescription": "Total active connections",
									"displayName":        "Total active connections",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
								map[string]interface{}{
									"name":               "connections_failed",
									"aggregationType":    "Average",
									"displayDescription": "Total failed connections",
									"displayName":        "Total failed connections",
									"fillGapWithZero":    true,
									"unit":               "Count",
								},
							},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/servers/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armpostgresql.OperationDisplay{
						Description: to.Ptr("Gets the disagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Database Metric Definition"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DBforPostgreSQL/servers/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armpostgresql.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Microsoft DB for PostgreSQL"),
						Resource:    to.Ptr("Database Metric Definition"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/OperationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerSecurityAlertPolicies_Get(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerSecurityAlertsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a server's threat detection policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"securityalert-4799",
		"securityalert-6440",
		armpostgresql.SecurityAlertPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerSecurityAlertsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.ServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.DBforPostgreSQL/servers/securityalert-6440/securityAlertPolicies/default"),
			Properties: &armpostgresql.SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("test@microsoft.com;user@microsoft.com")},
				RetentionDays:   to.Ptr[int32](0),
				State:           to.Ptr(armpostgresql.ServerSecurityAlertPolicyStateDisabled),
				StorageEndpoint: to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerSecurityAlertsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerSecurityAlertPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a server's threat detection policy with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		armpostgresql.SecurityAlertPolicyNameDefault,
		armpostgresql.ServerSecurityAlertPolicy{
			Properties: &armpostgresql.SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("testSecurityAlert@microsoft.com")},
				RetentionDays:           to.Ptr[int32](5),
				State:                   to.Ptr(armpostgresql.ServerSecurityAlertPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armpostgresql.ServerSecurityAlertPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.ServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.DBforPostgreSQL/servers/securityalert-6440/securityAlertPolicies/default"),
			Properties: &armpostgresql.SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("testSecurityAlert@microsoft.com")},
				RetentionDays:   to.Ptr[int32](5),
				State:           to.Ptr(armpostgresql.ServerSecurityAlertPolicyStateEnabled),
				StorageEndpoint: to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a server's threat detection policy with minimal parameters"},
	})
	client = armpostgresql.NewServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		armpostgresql.SecurityAlertPolicyNameDefault,
		armpostgresql.ServerSecurityAlertPolicy{
			Properties: &armpostgresql.SecurityAlertPolicyProperties{
				EmailAccountAdmins: to.Ptr(true),
				State:              to.Ptr(armpostgresql.ServerSecurityAlertPolicyStateDisabled),
			},
		},
		&armpostgresql.ServerSecurityAlertPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.ServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.DBforPostgreSQL/servers/securityalert-6440/securityAlertPolicies/default"),
			Properties: &armpostgresql.SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("")},
				RetentionDays:   to.Ptr[int32](0),
				State:           to.Ptr(armpostgresql.ServerSecurityAlertPolicyStateEnabled),
				StorageEndpoint: to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerSecurityAlertPolicies_ListByServer(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerSecurityAlertsListByServer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the server's threat detection policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("securityalert-4799",
		"securityalert-6440",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerSecurityAlertsListByServer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.ServerSecurityAlertPolicyListResult{
			Value: []*armpostgresql.ServerSecurityAlertPolicy{
				{
					Name: to.Ptr("Default"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/securityAlertPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.DBforPostgreSQL/servers/securityalert-6440/securityAlertPolicies"),
					Properties: &armpostgresql.SecurityAlertPolicyProperties{
						DisabledAlerts: []*string{
							to.Ptr("Access_Anomaly")},
						EmailAccountAdmins: to.Ptr(true),
						EmailAddresses: []*string{
							to.Ptr("test@microsoft.com;user@microsoft.com")},
						RetentionDays:   to.Ptr[int32](0),
						State:           to.Ptr(armpostgresql.ServerSecurityAlertPolicyStateDisabled),
						StorageEndpoint: to.Ptr("https://mystorage.blob.core.windows.net"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerSecurityAlertPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerSecurityAlertPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerSecurityAlertsListByServer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.PrivateEndpointConnection{
			Name: to.Ptr("private-endpoint-connection-name"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DBforPostgreSQL/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name"),
			Properties: &armpostgresql.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armpostgresql.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
				},
				PrivateLinkServiceConnectionState: &armpostgresql.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Auto-approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve or reject a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		armpostgresql.PrivateEndpointConnection{
			Properties: &armpostgresql.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armpostgresql.PrivateLinkServiceConnectionStateProperty{
					Description: to.Ptr("Approved by johndoe@contoso.com"),
					Status:      to.Ptr("Approved"),
				},
			},
		},
		&armpostgresql.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.PrivateEndpointConnection{
			Name: to.Ptr("private-endpoint-connection-name"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DBforPostgreSQL/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name"),
			Properties: &armpostgresql.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armpostgresql.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
				},
				PrivateLinkServiceConnectionState: &armpostgresql.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Approved by johndoe@contoso.com"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		&armpostgresql.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
}

func TestPrivateEndpointConnections_UpdateTags(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update private endpoint connection Tags"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdateTags(ctx,
		"Default",
		"test-svr",
		"private-endpoint-connection-name",
		armpostgresql.TagsObject{
			Tags: map[string]*string{
				"key1": to.Ptr("val1"),
				"key2": to.Ptr("val2"),
				"key3": to.Ptr("val3"),
			},
		},
		&armpostgresql.PrivateEndpointConnectionsClientBeginUpdateTagsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdateTags.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.PrivateEndpointConnection{
			Name: to.Ptr("private-endpoint-connection-name"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DBforPostgreSQL/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name"),
			Properties: &armpostgresql.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armpostgresql.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
				},
				PrivateLinkServiceConnectionState: &armpostgresql.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Approved by johndoe@contoso.com"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionUpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_ListByServer(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of private endpoint connections on a server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("Default",
		"test-svr",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.PrivateEndpointConnectionListResult{
			Value: []*armpostgresql.PrivateEndpointConnection{
				{
					Name: to.Ptr("private-endpoint-connection-name"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DBforPostgreSQL/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name-2"),
					Properties: &armpostgresql.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armpostgresql.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
						},
						PrivateLinkServiceConnectionState: &armpostgresql.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name: to.Ptr("private-endpoint-connection-name-2"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DBforPostgreSQL/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name-2"),
					Properties: &armpostgresql.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armpostgresql.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name-2"),
						},
						PrivateLinkServiceConnectionState: &armpostgresql.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateEndpointConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_ListByServer(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateLinkResourcesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private link resources for PostgreSQL."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByServer("Default",
		"test-svr",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateLinkResourcesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.PrivateLinkResourceListResult{
			Value: []*armpostgresql.PrivateLinkResource{
				{
					Name: to.Ptr("plr"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/privateLinkResources"),
					ID:   to.Ptr("subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DBforPostgreSQL/servers/test-svr/privateLinkResources/plr"),
					Properties: &armpostgresql.PrivateLinkResourceProperties{
						GroupID: to.Ptr("postgresqlServer"),
						RequiredMembers: []*string{
							to.Ptr("postgresqlServer")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateLinkResourcesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateLinkResourcesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a private link resource for PostgreSQL."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default",
		"test-svr",
		"plr",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateLinkResourcesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.PrivateLinkResource{
			Name: to.Ptr("plr"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/privateLinkResources"),
			ID:   to.Ptr("subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DBforPostgreSQL/servers/test-svr/privateLinkResources/plr"),
			Properties: &armpostgresql.PrivateLinkResourceProperties{
				GroupID: to.Ptr("postgresqlServer"),
				RequiredMembers: []*string{
					to.Ptr("postgresqlServer")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2018-06-01/examples/PrivateLinkResourcesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerKeys_List(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2020-01-01/examples/ServerKeyList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the keys for a PostgreSQL Server."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServerKeysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	pager := client.List("testrg",
		"testserver",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2020-01-01/examples/ServerKeyList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpostgresql.ServerKeyListResult{
			Value: []*armpostgresql.ServerKey{
				{
					Name: to.Ptr("someVault_someKey_01234567890123456789012345678901"),
					Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/keys"),
					ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/testserver/keys/someVault_someKey_01234567890123456789012345678901"),
					Kind: to.Ptr("azurekeyvault"),
					Properties: &armpostgresql.ServerKeyProperties{
						CreationDate:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T00:00:00.0Z"); return t }()),
						ServerKeyType: to.Ptr(armpostgresql.ServerKeyTypeAzureKeyVault),
						URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerKeyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerKeyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2020-01-01/examples/ServerKeyList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerKeys_Get(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2020-01-01/examples/ServerKeyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the PostgreSQL Server key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServerKeysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	res, err := client.Get(ctx,
		"testrg",
		"testserver",
		"someVault_someKey_01234567890123456789012345678901",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2020-01-01/examples/ServerKeyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.ServerKey{
			Name: to.Ptr("someVault_someKey_01234567890123456789012345678901"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/keys"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/testserver/keys/someVault_someKey_01234567890123456789012345678901"),
			Kind: to.Ptr("azurekeyvault"),
			Properties: &armpostgresql.ServerKeyProperties{
				CreationDate:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T00:00:00.0Z"); return t }()),
				ServerKeyType: to.Ptr(armpostgresql.ServerKeyTypeAzureKeyVault),
				URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerKey)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2020-01-01/examples/ServerKeyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerKeys_CreateOrUpdate(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2020-01-01/examples/ServerKeyCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a PostgreSQL Server key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServerKeysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testserver",
		"someVault_someKey_01234567890123456789012345678901",
		"testrg",
		armpostgresql.ServerKey{
			Properties: &armpostgresql.ServerKeyProperties{
				ServerKeyType: to.Ptr(armpostgresql.ServerKeyTypeAzureKeyVault),
				URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
			},
		},
		&armpostgresql.ServerKeysClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2020-01-01/examples/ServerKeyCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2020-01-01/examples/ServerKeyCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpostgresql.ServerKey{
			Name: to.Ptr("omeVault_someKey_01234567890123456789012345678901"),
			Type: to.Ptr("Microsoft.DBforPostgreSQL/servers/keys"),
			ID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/servers/testserver/keys/someVault_someKey_01234567890123456789012345678901"),
			Kind: to.Ptr("azurekeyvault"),
			Properties: &armpostgresql.ServerKeyProperties{
				CreationDate:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-01T00:00:00.0Z"); return t }()),
				ServerKeyType: to.Ptr(armpostgresql.ServerKeyTypeAzureKeyVault),
				URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerKey)
			t.Fatalf("Mock response is not equal to example response for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2020-01-01/examples/ServerKeyCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerKeys_Delete(t *testing.T) {
	// From example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2020-01-01/examples/ServerKeyDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the PostgreSQL Server key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpostgresql.NewServerKeysClient("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"testserver",
		"someVault_someKey_01234567890123456789012345678901",
		"testrg",
		&armpostgresql.ServerKeysClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2020-01-01/examples/ServerKeyDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2020-01-01/examples/ServerKeyDelete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
