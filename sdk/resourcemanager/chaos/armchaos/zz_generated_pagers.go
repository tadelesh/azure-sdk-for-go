//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armchaos

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// CapabilitiesClientListPager provides operations for iterating over paged responses.
type CapabilitiesClientListPager struct {
	client    *CapabilitiesClient
	current   CapabilitiesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CapabilitiesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *CapabilitiesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CapabilityListResult.NextLink == nil || len(*p.current.CapabilityListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *CapabilitiesClientListPager) NextPage(ctx context.Context) (CapabilitiesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return CapabilitiesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return CapabilitiesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return CapabilitiesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return CapabilitiesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return CapabilitiesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// CapabilityTypesClientListPager provides operations for iterating over paged responses.
type CapabilityTypesClientListPager struct {
	client    *CapabilityTypesClient
	current   CapabilityTypesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CapabilityTypesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *CapabilityTypesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CapabilityTypeListResult.NextLink == nil || len(*p.current.CapabilityTypeListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *CapabilityTypesClientListPager) NextPage(ctx context.Context) (CapabilityTypesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return CapabilityTypesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return CapabilityTypesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return CapabilityTypesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return CapabilityTypesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return CapabilityTypesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ExperimentsClientListAllPager provides operations for iterating over paged responses.
type ExperimentsClientListAllPager struct {
	client    *ExperimentsClient
	current   ExperimentsClientListAllResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ExperimentsClientListAllResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ExperimentsClientListAllPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExperimentListResult.NextLink == nil || len(*p.current.ExperimentListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ExperimentsClientListAllPager) NextPage(ctx context.Context) (ExperimentsClientListAllResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ExperimentsClientListAllResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ExperimentsClientListAllResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ExperimentsClientListAllResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ExperimentsClientListAllResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		return ExperimentsClientListAllResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ExperimentsClientListAllStatusesPager provides operations for iterating over paged responses.
type ExperimentsClientListAllStatusesPager struct {
	client    *ExperimentsClient
	current   ExperimentsClientListAllStatusesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ExperimentsClientListAllStatusesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ExperimentsClientListAllStatusesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExperimentStatusListResult.NextLink == nil || len(*p.current.ExperimentStatusListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ExperimentsClientListAllStatusesPager) NextPage(ctx context.Context) (ExperimentsClientListAllStatusesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ExperimentsClientListAllStatusesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ExperimentsClientListAllStatusesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ExperimentsClientListAllStatusesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ExperimentsClientListAllStatusesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listAllStatusesHandleResponse(resp)
	if err != nil {
		return ExperimentsClientListAllStatusesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ExperimentsClientListExecutionDetailsPager provides operations for iterating over paged responses.
type ExperimentsClientListExecutionDetailsPager struct {
	client    *ExperimentsClient
	current   ExperimentsClientListExecutionDetailsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ExperimentsClientListExecutionDetailsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ExperimentsClientListExecutionDetailsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExperimentExecutionDetailsListResult.NextLink == nil || len(*p.current.ExperimentExecutionDetailsListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ExperimentsClientListExecutionDetailsPager) NextPage(ctx context.Context) (ExperimentsClientListExecutionDetailsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ExperimentsClientListExecutionDetailsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ExperimentsClientListExecutionDetailsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ExperimentsClientListExecutionDetailsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ExperimentsClientListExecutionDetailsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listExecutionDetailsHandleResponse(resp)
	if err != nil {
		return ExperimentsClientListExecutionDetailsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ExperimentsClientListPager provides operations for iterating over paged responses.
type ExperimentsClientListPager struct {
	client    *ExperimentsClient
	current   ExperimentsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ExperimentsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ExperimentsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExperimentListResult.NextLink == nil || len(*p.current.ExperimentListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ExperimentsClientListPager) NextPage(ctx context.Context) (ExperimentsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ExperimentsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ExperimentsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ExperimentsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ExperimentsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ExperimentsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListAllPager provides operations for iterating over paged responses.
type OperationsClientListAllPager struct {
	client    *OperationsClient
	current   OperationsClientListAllResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListAllResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListAllPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListAllPager) NextPage(ctx context.Context) (OperationsClientListAllResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListAllResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListAllResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListAllResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListAllResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		return OperationsClientListAllResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// TargetTypesClientListPager provides operations for iterating over paged responses.
type TargetTypesClientListPager struct {
	client    *TargetTypesClient
	current   TargetTypesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TargetTypesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *TargetTypesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TargetTypeListResult.NextLink == nil || len(*p.current.TargetTypeListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *TargetTypesClientListPager) NextPage(ctx context.Context) (TargetTypesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return TargetTypesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return TargetTypesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return TargetTypesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return TargetTypesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return TargetTypesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// TargetsClientListPager provides operations for iterating over paged responses.
type TargetsClientListPager struct {
	client    *TargetsClient
	current   TargetsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TargetsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *TargetsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TargetListResult.NextLink == nil || len(*p.current.TargetListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *TargetsClientListPager) NextPage(ctx context.Context) (TargetsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return TargetsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return TargetsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return TargetsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return TargetsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return TargetsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
