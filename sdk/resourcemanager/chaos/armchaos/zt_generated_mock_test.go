//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armchaos_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/chaos/armchaos"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestCapabilities_List(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListCapabilities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Capabilities that extend a virtual machine Target resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewCapabilitiesClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	pager := client.List("exampleRG",
		"Microsoft.Compute",
		"virtualMachines",
		"exampleVM",
		"Microsoft-VirtualMachine",
		&armchaos.CapabilitiesClientListOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListCapabilities.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armchaos.CapabilityListResult{
			Value: []*armchaos.Capability{
				{
					Name: to.Ptr("Shutdown-1.0"),
					Type: to.Ptr("Microsoft.Chaos/targets/capabilities"),
					ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/exampleVM/providers/Microsoft.Chaos/targets/Microsoft-VirtualMachine/capabilities/Shutdown-1.0"),
					Properties: &armchaos.CapabilityProperties{
						Description:      to.Ptr("Shutdown an Azure Virtual Machine for a defined period of time."),
						ParametersSchema: to.Ptr("https://schema.centralus.chaos-prod.azure.com/targets/Microsoft-VirtualMachine/capabilities/Shutdown-1.0.json"),
						Publisher:        to.Ptr("Microsoft"),
						TargetType:       to.Ptr("VirtualMachine"),
						Urn:              to.Ptr("urn:csci:microsoft:virtualMachine:shutdown/1.0"),
					},
					SystemData: &armchaos.SystemData{
						CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-14T05:08:38.4662189Z"); return t }()),
						LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-14T05:08:38.4662189Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CapabilityListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CapabilityListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListCapabilities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCapabilities_Get(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetACapability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Capability that extends a virtual machine Target resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewCapabilitiesClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	res, err := client.Get(ctx,
		"exampleRG",
		"Microsoft.Compute",
		"virtualMachines",
		"exampleVM",
		"Microsoft-VirtualMachine",
		"Shutdown-1.0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetACapability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armchaos.Capability{
			Name: to.Ptr("Shutdown-1.0"),
			Type: to.Ptr("Microsoft.Chaos/targets/capabilities"),
			ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/exampleVM/providers/Microsoft.Chaos/targets/Microsoft-VirtualMachine/capabilities/Shutdown-1.0"),
			Properties: &armchaos.CapabilityProperties{
				Description:      to.Ptr("Shutdown an Azure Virtual Machine for a defined period of time."),
				ParametersSchema: to.Ptr("https://schema.centralus.chaos-prod.azure.com/targets/Microsoft-VirtualMachine/capabilities/Shutdown-1.0.json"),
				Publisher:        to.Ptr("Microsoft"),
				TargetType:       to.Ptr("VirtualMachine"),
				Urn:              to.Ptr("urn:csci:microsoft:virtualMachine:shutdown/1.0"),
			},
			SystemData: &armchaos.SystemData{
				CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-14T05:08:38.4662189Z"); return t }()),
				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-14T05:08:38.4662189Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Capability) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Capability)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetACapability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCapabilities_Delete(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/DeleteACapability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Capability that extends a virtual machine Target resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewCapabilitiesClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	_, err := client.Delete(ctx,
		"exampleRG",
		"Microsoft.Compute",
		"virtualMachines",
		"exampleVM",
		"Microsoft-VirtualMachine",
		"Shutdown-1.0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/DeleteACapability.json: %v", err)
	}
}

func TestCapabilities_CreateOrUpdate(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/CreateOrUpdateACapability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/update a Capability that extends a virtual machine Target resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewCapabilitiesClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleRG",
		"Microsoft.Compute",
		"virtualMachines",
		"exampleVM",
		"Microsoft-VirtualMachine",
		"Shutdown-1.0",
		armchaos.Capability{
			Properties: &armchaos.CapabilityProperties{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/CreateOrUpdateACapability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armchaos.Capability{
			Name: to.Ptr("Shutdown-1.0"),
			Type: to.Ptr("Microsoft.Chaos/targets/capabilities"),
			ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/exampleVM/providers/Microsoft.Chaos/targets/Microsoft-VirtualMachine/capabilities/Shutdown-1.0"),
			Properties: &armchaos.CapabilityProperties{
				Description:      to.Ptr("Shutdown an Azure Virtual Machine for a defined period of time."),
				ParametersSchema: to.Ptr("https://schema.centralus.chaos-prod.azure.com/targets/Microsoft-VirtualMachine/capabilities/Shutdown-1.0.json"),
				Publisher:        to.Ptr("Microsoft"),
				TargetType:       to.Ptr("VirtualMachine"),
				Urn:              to.Ptr("urn:csci:microsoft:virtualMachine:shutdown/1.0"),
			},
			SystemData: &armchaos.SystemData{
				CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-14T05:08:38.4662189Z"); return t }()),
				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-14T05:08:38.4662189Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Capability) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Capability)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/CreateOrUpdateACapability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExperiments_ListAll(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListExperimentsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Experiments in a subscription."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewExperimentsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	pager := client.ListAll(&armchaos.ExperimentsClientListAllOptions{Running: nil,
		ContinuationToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListExperimentsInASubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armchaos.ExperimentListResult{
			Value: []*armchaos.Experiment{
				{
					Name:     to.Ptr("exampleExperiment"),
					Type:     to.Ptr("Microsoft.Chaos/experiments"),
					ID:       to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Chaos/experiments/exampleExperiment"),
					Location: to.Ptr("centraluseuap"),
					Identity: &armchaos.ResourceIdentity{
						Type:        to.Ptr(armchaos.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("d04ab567-2c07-43ef-a7f4-4527626b7f56"),
						TenantID:    to.Ptr("8c3e2fb2-fe7a-4bf1-b779-d73990782fe6"),
					},
					Properties: &armchaos.ExperimentProperties{
						Selectors: []*armchaos.Selector{
							{
								Type: to.Ptr(armchaos.SelectorTypeList),
								ID:   to.Ptr("selector1"),
								Targets: []*armchaos.TargetReference{
									{
										Type: to.Ptr("ChaosTarget"),
										ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/exampleVM/providers/Microsoft.Chaos/targets/Microsoft-VirtualMachine"),
									}},
							}},
						Steps: []*armchaos.Step{
							{
								Name: to.Ptr("step1"),
								Branches: []*armchaos.Branch{
									{
										Name: to.Ptr("branch1"),
										Actions: []armchaos.ActionClassification{
											&armchaos.Action{
												Name: to.Ptr("urn:csci:provider:providername:Shutdown/1.0"),
												Type: to.Ptr("Continuous"),
											}},
									}},
							}},
					},
					SystemData: &armchaos.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
						CreatedBy:          to.Ptr("User"),
						CreatedByType:      to.Ptr(armchaos.CreatedByType("b3a41dba-4415-4d36-9ee8-e5eaa86db976")),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
						LastModifiedBy:     to.Ptr("User"),
						LastModifiedByType: to.Ptr(armchaos.CreatedByType("b3a41dba-4415-4d36-9ee8-e5eaa86db976")),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExperimentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExperimentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListExperimentsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExperiments_List(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListExperimentsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Experiments in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewExperimentsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	pager := client.List("exampleRG",
		&armchaos.ExperimentsClientListOptions{Running: nil,
			ContinuationToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListExperimentsInAResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armchaos.ExperimentListResult{
			Value: []*armchaos.Experiment{
				{
					Name:     to.Ptr("exampleExperiment"),
					Type:     to.Ptr("Microsoft.Chaos/experiments"),
					ID:       to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Chaos/experiments/exampleExperiment"),
					Location: to.Ptr("centraluseuap"),
					Identity: &armchaos.ResourceIdentity{
						Type:        to.Ptr(armchaos.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("d04ab567-2c07-43ef-a7f4-4527626b7f56"),
						TenantID:    to.Ptr("8c3e2fb2-fe7a-4bf1-b779-d73990782fe6"),
					},
					Properties: &armchaos.ExperimentProperties{
						Selectors: []*armchaos.Selector{
							{
								Type: to.Ptr(armchaos.SelectorTypeList),
								ID:   to.Ptr("selector1"),
								Targets: []*armchaos.TargetReference{
									{
										Type: to.Ptr("ChaosTarget"),
										ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/exampleVM/providers/Microsoft.Chaos/targets/Microsoft-VirtualMachine"),
									}},
							}},
						Steps: []*armchaos.Step{
							{
								Name: to.Ptr("step1"),
								Branches: []*armchaos.Branch{
									{
										Name: to.Ptr("branch1"),
										Actions: []armchaos.ActionClassification{
											&armchaos.Action{
												Name: to.Ptr("urn:csci:provider:providername:Shutdown/1.0"),
												Type: to.Ptr("Continuous"),
											}},
									}},
							}},
					},
					SystemData: &armchaos.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
						CreatedBy:          to.Ptr("User"),
						CreatedByType:      to.Ptr(armchaos.CreatedByType("b3a41dba-4415-4d36-9ee8-e5eaa86db976")),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
						LastModifiedBy:     to.Ptr("User"),
						LastModifiedByType: to.Ptr(armchaos.CreatedByType("b3a41dba-4415-4d36-9ee8-e5eaa86db976")),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExperimentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExperimentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListExperimentsInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExperiments_Delete(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/DeleteAExperiment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Experiment in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewExperimentsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	_, err := client.Delete(ctx,
		"exampleRG",
		"exampleExperiment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/DeleteAExperiment.json: %v", err)
	}
}

func TestExperiments_Get(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetAExperiment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Experiment in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewExperimentsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	res, err := client.Get(ctx,
		"exampleRG",
		"exampleExperiment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetAExperiment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armchaos.Experiment{
			Name:     to.Ptr("exampleExperiment"),
			Type:     to.Ptr("Microsoft.Chaos/experiments"),
			ID:       to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Chaos/experiments/exampleExperiment"),
			Location: to.Ptr("centraluseuap"),
			Identity: &armchaos.ResourceIdentity{
				Type:        to.Ptr(armchaos.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("d04ab567-2c07-43ef-a7f4-4527626b7f56"),
				TenantID:    to.Ptr("8c3e2fb2-fe7a-4bf1-b779-d73990782fe6"),
			},
			Properties: &armchaos.ExperimentProperties{
				Selectors: []*armchaos.Selector{
					{
						Type: to.Ptr(armchaos.SelectorTypeList),
						ID:   to.Ptr("selector1"),
						Targets: []*armchaos.TargetReference{
							{
								Type: to.Ptr("ChaosTarget"),
								ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/exampleVM/providers/Microsoft.Chaos/targets/Microsoft-VirtualMachine"),
							}},
					}},
				Steps: []*armchaos.Step{
					{
						Name: to.Ptr("step1"),
						Branches: []*armchaos.Branch{
							{
								Name: to.Ptr("branch1"),
								Actions: []armchaos.ActionClassification{
									&armchaos.Action{
										Name: to.Ptr("urn:csci:provider:providername:Shutdown/1.0"),
										Type: to.Ptr("Continuous"),
									}},
							}},
					}},
			},
			SystemData: &armchaos.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
				CreatedBy:          to.Ptr("User"),
				CreatedByType:      to.Ptr(armchaos.CreatedByType("b3a41dba-4415-4d36-9ee8-e5eaa86db976")),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
				LastModifiedBy:     to.Ptr("User"),
				LastModifiedByType: to.Ptr(armchaos.CreatedByType("b3a41dba-4415-4d36-9ee8-e5eaa86db976")),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Experiment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Experiment)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetAExperiment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExperiments_CreateOrUpdate(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/CreateOrUpdateAExperiment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/update a Experiment in a resource group."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewExperimentsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"exampleRG",
		"exampleExperiment",
		armchaos.Experiment{
			Location: to.Ptr("centraluseuap"),
			Identity: &armchaos.ResourceIdentity{
				Type: to.Ptr(armchaos.ResourceIdentityTypeSystemAssigned),
			},
			Properties: &armchaos.ExperimentProperties{
				Selectors: []*armchaos.Selector{
					{
						Type: to.Ptr(armchaos.SelectorTypeList),
						ID:   to.Ptr("selector1"),
						Targets: []*armchaos.TargetReference{
							{
								Type: to.Ptr("ChaosTarget"),
								ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/exampleVM/providers/Microsoft.Chaos/targets/Microsoft-VirtualMachine"),
							}},
					}},
				Steps: []*armchaos.Step{
					{
						Name: to.Ptr("step1"),
						Branches: []*armchaos.Branch{
							{
								Name: to.Ptr("branch1"),
								Actions: []armchaos.ActionClassification{
									&armchaos.Action{
										Name: to.Ptr("urn:csci:provider:providername:Shutdown/1.0"),
										Type: to.Ptr("Continuous"),
									}},
							}},
					}},
			},
		},
		&armchaos.ExperimentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/CreateOrUpdateAExperiment.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/CreateOrUpdateAExperiment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armchaos.Experiment{
			Name:     to.Ptr("exampleExperiment"),
			Type:     to.Ptr("Microsoft.Chaos/experiments"),
			ID:       to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Chaos/experiments/exampleExperiment"),
			Location: to.Ptr("centraluseuap"),
			Identity: &armchaos.ResourceIdentity{
				Type:        to.Ptr(armchaos.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("d04ab567-2c07-43ef-a7f4-4527626b7f56"),
				TenantID:    to.Ptr("8c3e2fb2-fe7a-4bf1-b779-d73990782fe6"),
			},
			Properties: &armchaos.ExperimentProperties{
				Selectors: []*armchaos.Selector{
					{
						Type: to.Ptr(armchaos.SelectorTypeList),
						ID:   to.Ptr("selector1"),
						Targets: []*armchaos.TargetReference{
							{
								Type: to.Ptr("ChaosTarget"),
								ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/exampleVM/providers/Microsoft.Chaos/targets/Microsoft-VirtualMachine"),
							}},
					}},
				Steps: []*armchaos.Step{
					{
						Name: to.Ptr("step1"),
						Branches: []*armchaos.Branch{
							{
								Name: to.Ptr("branch1"),
								Actions: []armchaos.ActionClassification{
									&armchaos.Action{
										Name: to.Ptr("urn:csci:provider:providername:Shutdown/1.0"),
										Type: to.Ptr("Continuous"),
									}},
							}},
					}},
			},
			SystemData: &armchaos.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
				CreatedBy:          to.Ptr("User"),
				CreatedByType:      to.Ptr(armchaos.CreatedByType("b3a41dba-4415-4d36-9ee8-e5eaa86db976")),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
				LastModifiedBy:     to.Ptr("User"),
				LastModifiedByType: to.Ptr(armchaos.CreatedByType("b3a41dba-4415-4d36-9ee8-e5eaa86db976")),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Experiment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Experiment)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/CreateOrUpdateAExperiment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExperiments_Cancel(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/CancelAExperiment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cancel a running Experiment."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewExperimentsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	poller, err := client.BeginCancel(ctx,
		"exampleRG",
		"exampleExperiment",
		&armchaos.ExperimentsClientBeginCancelOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/CancelAExperiment.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/CancelAExperiment.json: %v", err)
	}
}

func TestExperiments_Start(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/StartAExperiment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start a Experiment."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewExperimentsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	_, err := client.Start(ctx,
		"exampleRG",
		"exampleExperiment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/StartAExperiment.json: %v", err)
	}
}

func TestExperiments_ListAllStatuses(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListExperimentStatuses.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all statuses of a Experiment."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewExperimentsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	pager := client.ListAllStatuses("exampleRG",
		"exampleExperiment",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListExperimentStatuses.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armchaos.ExperimentStatusListResult{
			Value: []*armchaos.ExperimentStatus{
				{
					Name: to.Ptr("50734542-2e64-4e08-814c-cc0e7475f7e4"),
					Type: to.Ptr("Microsoft.Chaos/experiments/statuses"),
					ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Chaos/experiments/exampleExperiment/statuses/50734542-2e64-4e08-814c-cc0e7475f7e4"),
					Properties: &armchaos.ExperimentStatusProperties{
						CreatedDateUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
						EndDateUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T01:00:00.0Z"); return t }()),
						Status:         to.Ptr("Successful"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExperimentStatusListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExperimentStatusListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListExperimentStatuses.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExperiments_GetStatus(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetAExperimentStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the status of a Experiment."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewExperimentsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	res, err := client.GetStatus(ctx,
		"exampleRG",
		"exampleExperiment",
		"50734542-2e64-4e08-814c-cc0e7475f7e4",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetAExperimentStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armchaos.ExperimentStatus{
			Name: to.Ptr("50734542-2e64-4e08-814c-cc0e7475f7e4"),
			Type: to.Ptr("Microsoft.Chaos/experiments/statuses"),
			ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Chaos/experiments/exampleExperiment/statuses/50734542-2e64-4e08-814c-cc0e7475f7e4"),
			Properties: &armchaos.ExperimentStatusProperties{
				CreatedDateUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
				EndDateUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T01:00:00.0Z"); return t }()),
				Status:         to.Ptr("Successful"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExperimentStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExperimentStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetAExperimentStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExperiments_ListExecutionDetails(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListExperimentExecutionsDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List experiment executions details"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewExperimentsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	pager := client.ListExecutionDetails("exampleRG",
		"exampleExperiment",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListExperimentExecutionsDetails.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armchaos.ExperimentExecutionDetailsListResult{
			Value: []*armchaos.ExperimentExecutionDetails{
				{
					Name: to.Ptr("f24500ad-744e-4a26-864b-b76199eac333"),
					Type: to.Ptr("Microsoft.Chaos/experiments/executionDetails"),
					ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Chaos/experiments/exampleExperiment/executionDetails/f24500ad-744e-4a26-864b-b76199eac333"),
					Properties: &armchaos.ExperimentExecutionDetailsProperties{
						CreatedDateUTC:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-14T21:52:42.917983Z"); return t }()),
						FailureReason:     to.Ptr("Dependency failure"),
						LastActionDateUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-14T21:52:52.2552574Z"); return t }()),
						RunInformation: &armchaos.ExperimentExecutionDetailsPropertiesRunInformation{
							Steps: []*armchaos.StepStatus{
								{
									Name: to.Ptr("FirstStep"),
									Branches: []*armchaos.BranchStatus{
										{
											Name: to.Ptr("FirstBranch"),
											Actions: []*armchaos.ActionStatus{
												{
													Name:   to.Ptr("urn:provider:agent-v2:Microsoft.Azure.Chaos.Fault.CPUPressureAllProcessors"),
													ID:     to.Ptr("59499d33-6751-4b6e-a1f6-58f4d56a040a"),
													Status: to.Ptr("failed"),
													Targets: []*armchaos.ExperimentExecutionActionTargetDetailsProperties{
														{
															CompletedDateUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T17:30:55+00:00"); return t }()),
															FailedDateUTC:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T16:30:55+00:00"); return t }()),
															Status:           to.Ptr("succeeded"),
															Target:           to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/VM1"),
														}},
												}},
											ID:     to.Ptr("FirstBranch"),
											Status: to.Ptr("failed"),
										}},
									ID:     to.Ptr("FirstStep"),
									Status: to.Ptr("failed"),
								}},
						},
						StartDateUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-14T21:52:52.2552574Z"); return t }()),
						Status:       to.Ptr("failed"),
						StopDateUTC:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-14T21:56:18.9281956Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("14d98367-52ef-4596-be4f-53fc81bbfc33"),
					Type: to.Ptr("Microsoft.Chaos/experiments/executionDetails"),
					ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Chaos/experiments/exampleExperiment/executionDetails/14d98367-52ef-4596-be4f-53fc81bbfc33"),
					Properties: &armchaos.ExperimentExecutionDetailsProperties{
						CreatedDateUTC:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-14T21:52:42.917983Z"); return t }()),
						FailureReason:     to.Ptr(""),
						LastActionDateUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-14T21:52:52.2552574Z"); return t }()),
						RunInformation: &armchaos.ExperimentExecutionDetailsPropertiesRunInformation{
							Steps: []*armchaos.StepStatus{
								{
									Name: to.Ptr("FirstStep"),
									Branches: []*armchaos.BranchStatus{
										{
											Name: to.Ptr("FirstBranch"),
											Actions: []*armchaos.ActionStatus{
												{
													Name:   to.Ptr("urn:provider:agent-v2:Microsoft.Azure.Chaos.Fault.CPUPressureAllProcessors"),
													ID:     to.Ptr("59499d33-6751-4b6e-a1f6-58f4d56a040a"),
													Status: to.Ptr("success"),
													Targets: []*armchaos.ExperimentExecutionActionTargetDetailsProperties{
														{
															CompletedDateUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T17:30:55+00:00"); return t }()),
															FailedDateUTC:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-02T16:30:55+00:00"); return t }()),
															Status:           to.Ptr("succeeded"),
															Target:           to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/VM1"),
														}},
												}},
											ID:     to.Ptr("FirstBranch"),
											Status: to.Ptr("success"),
										}},
									ID:     to.Ptr("FirstStep"),
									Status: to.Ptr("success"),
								}},
						},
						StartDateUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-14T21:52:52.2552574Z"); return t }()),
						Status:       to.Ptr("success"),
						StopDateUTC:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-14T21:56:18.9281956Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExperimentExecutionDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExperimentExecutionDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListExperimentExecutionsDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExperiments_GetExecutionDetails(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetAExperimentExecutionDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get experiment execution details"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewExperimentsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	res, err := client.GetExecutionDetails(ctx,
		"exampleRG",
		"exampleExperiment",
		"f24500ad-744e-4a26-864b-b76199eac333",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetAExperimentExecutionDetails.json: %v", err)
	}
	// Response check
	{
		exampleRes := armchaos.ExperimentExecutionDetails{
			Name: to.Ptr("f24500ad-744e-4a26-864b-b76199eac333"),
			Type: to.Ptr("Microsoft.Chaos/experiments/executionDetails"),
			ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Chaos/experiments/exampleExperiment/executionDetails/f24500ad-744e-4a26-864b-b76199eac333"),
		}
		if !reflect.DeepEqual(exampleRes, res.ExperimentExecutionDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExperimentExecutionDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetAExperimentExecutionDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_ListAll(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestTargets_List(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListTargets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Targets that extend a virtual machine resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewTargetsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	pager := client.List("exampleRG",
		"Microsoft.Compute",
		"virtualMachines",
		"exampleVM",
		&armchaos.TargetsClientListOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListTargets.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armchaos.TargetListResult{
			Value: []*armchaos.Target{
				{
					Name:     to.Ptr("Microsoft-Agent"),
					Type:     to.Ptr("Microsoft.Chaos/targets"),
					ID:       to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/exampleVM/providers/Microsoft.Chaos/targets/Microsoft-Agent"),
					Location: to.Ptr("centraluseuap"),
					Properties: map[string]interface{}{
						"agentProfileId": "ac4e8251-fdc9-4277-8e87-dc57fe5794cf",
						"identities": []interface{}{
							map[string]interface{}{
								"type":    "CertificateSubjectIssuer",
								"subject": "CN=example.subject",
							},
						},
					},
					SystemData: &armchaos.SystemData{
						CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
						LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TargetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TargetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListTargets.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTargets_Get(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetATarget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Target that extends a virtual machine resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewTargetsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	res, err := client.Get(ctx,
		"exampleRG",
		"Microsoft.Compute",
		"virtualMachines",
		"exampleVM",
		"Microsoft-Agent",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetATarget.json: %v", err)
	}
	// Response check
	{
		exampleRes := armchaos.Target{
			Name:     to.Ptr("Microsoft-Agent"),
			Type:     to.Ptr("Microsoft.Chaos/targets"),
			ID:       to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/exampleVM/providers/Microsoft.Chaos/targets/Microsoft-Agent"),
			Location: to.Ptr("centraluseuap"),
			Properties: map[string]interface{}{
				"agentProfileId": "ac4e8251-fdc9-4277-8e87-dc57fe5794cf",
				"identities": []interface{}{
					map[string]interface{}{
						"type":    "CertificateSubjectIssuer",
						"subject": "CN=example.subject",
					},
				},
			},
			SystemData: &armchaos.SystemData{
				CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Target) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Target)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetATarget.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTargets_Delete(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/DeleteATarget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Target that extends a virtual machine resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewTargetsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	_, err := client.Delete(ctx,
		"exampleRG",
		"Microsoft.Compute",
		"virtualMachines",
		"exampleVM",
		"Microsoft-Agent",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/DeleteATarget.json: %v", err)
	}
}

func TestTargets_CreateOrUpdate(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/CreateOrUpdateATarget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/update a Target that extends a virtual machine resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewTargetsClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleRG",
		"Microsoft.Compute",
		"virtualMachines",
		"exampleVM",
		"Microsoft-Agent",
		armchaos.Target{
			Properties: map[string]interface{}{
				"identities": []interface{}{
					map[string]interface{}{
						"type":    "CertificateSubjectIssuer",
						"subject": "CN=example.subject",
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/CreateOrUpdateATarget.json: %v", err)
	}
	// Response check
	{
		exampleRes := armchaos.Target{
			Name:     to.Ptr("Microsoft-Agent"),
			Type:     to.Ptr("Microsoft.Chaos/targets"),
			ID:       to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/exampleVM/providers/Microsoft.Chaos/targets/Microsoft-Agent"),
			Location: to.Ptr("centraluseuap"),
			Properties: map[string]interface{}{
				"agentProfileId": "ac4e8251-fdc9-4277-8e87-dc57fe5794cf",
				"identities": []interface{}{
					map[string]interface{}{
						"type":    "CertificateSubjectIssuer",
						"subject": "CN=example.subject",
					},
				},
			},
			SystemData: &armchaos.SystemData{
				CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-01T00:00:00.0Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Target) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Target)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/CreateOrUpdateATarget.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTargetTypes_List(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListTargetTypes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Target Types for westus2 location."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewTargetTypesClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	pager := client.List("westus2",
		&armchaos.TargetTypesClientListOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListTargetTypes.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armchaos.TargetTypeListResult{
			Value: []*armchaos.TargetType{
				{
					Name:     to.Ptr("Microsoft-Agent"),
					Type:     to.Ptr("Microsoft.Chaos/locations/targetTypes"),
					ID:       to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/providers/Microsoft.Chaos/locations/westus2/targetTypes/Microsoft-Agent"),
					Location: to.Ptr("centraluseuap"),
					Properties: &armchaos.TargetTypeProperties{
						Description:      to.Ptr("A target represents Chaos Agent."),
						DisplayName:      to.Ptr("Chaos Agent"),
						PropertiesSchema: to.Ptr("https://schema.centralus.chaos-prod.azure.com/targets/Microsoft-VirtualMachine.json"),
						ResourceTypes: []*string{
							to.Ptr("Microsoft.Compute/virtualMachines"),
							to.Ptr("Microsoft.Compute/virtualMachineScaleSets")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TargetTypeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TargetTypeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListTargetTypes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTargetTypes_Get(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetATargetType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Target Type for westus2 location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewTargetTypesClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	res, err := client.Get(ctx,
		"westus2",
		"Microsoft-Agent",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetATargetType.json: %v", err)
	}
	// Response check
	{
		exampleRes := armchaos.TargetType{
			Name:     to.Ptr("Microsoft-Agent"),
			Type:     to.Ptr("Microsoft.Chaos/locations/targetTypes"),
			ID:       to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/providers/Microsoft.Chaos/locations/westus2/targetTypes/Microsoft-Agent"),
			Location: to.Ptr("centraluseuap"),
			Properties: &armchaos.TargetTypeProperties{
				Description:      to.Ptr("A target represents Chaos Agent."),
				DisplayName:      to.Ptr("Chaos Agent"),
				PropertiesSchema: to.Ptr("https://schema.centralus.chaos-prod.azure.com/targets/Microsoft-VirtualMachine.json"),
				ResourceTypes: []*string{
					to.Ptr("Microsoft.Compute/virtualMachines"),
					to.Ptr("Microsoft.Compute/virtualMachineScaleSets")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TargetType) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TargetType)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetATargetType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCapabilityTypes_List(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListCapabilityTypes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Capability Types for a virtual machine Target resource on westus2 location."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewCapabilityTypesClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	pager := client.List("westus2",
		"Microsoft-VirtualMachine",
		&armchaos.CapabilityTypesClientListOptions{ContinuationToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListCapabilityTypes.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armchaos.CapabilityTypeListResult{
			Value: []*armchaos.CapabilityType{
				{
					Name: to.Ptr("Shutdown-1.0"),
					Type: to.Ptr("Microsoft.Chaos/locations/targetTypes/capabilityTypes"),
					ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/providers/Microsoft.Chaos/locations/westus2/targetTypes/Microsoft-VirtualMachine/capabilityTypes/Shutdown-1.0"),
					Properties: &armchaos.CapabilityTypeProperties{
						Description:      to.Ptr("Shutdown an Azure Virtual Machine for a defined period of time."),
						DisplayName:      to.Ptr("Shutdown VM"),
						ParametersSchema: to.Ptr("https://schema.centralus.chaos-prod.azure.com/targets/Microsoft-VirtualMachine/capabilities/Shutdown-1.0.json"),
						Publisher:        to.Ptr("Microsoft"),
						TargetType:       to.Ptr("VirtualMachine"),
						Urn:              to.Ptr("urn:csci:microsoft:virtualMachine:shutdown/1.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CapabilityTypeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CapabilityTypeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/ListCapabilityTypes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCapabilityTypes_Get(t *testing.T) {
	// From example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetACapabilityType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Capability Type for a virtual machine Target resource on westus2 location."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armchaos.NewCapabilityTypesClient("6b052e15-03d3-4f17-b2e1-be7f07588291", cred, &options)
	res, err := client.Get(ctx,
		"westus2",
		"Microsoft-VirtualMachine",
		"Shutdown-1.0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetACapabilityType.json: %v", err)
	}
	// Response check
	{
		exampleRes := armchaos.CapabilityType{
			Name: to.Ptr("Shutdown-1.0"),
			Type: to.Ptr("Microsoft.Chaos/locations/targetTypes/capabilityTypes"),
			ID:   to.Ptr("/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/Microsoft.Chaos/locations/westus2/targetTypes/Microsoft-VirtualMachine/capabilityTypes/Shutdown-1.0"),
			Properties: &armchaos.CapabilityTypeProperties{
				Description:      to.Ptr("Shutdown an Azure Virtual Machine for a defined period of time."),
				DisplayName:      to.Ptr("Shutdown VM"),
				ParametersSchema: to.Ptr("https://schema.centralus.chaos-prod.azure.com/targets/Microsoft-VirtualMachine/capabilities/Shutdown-1.0.json"),
				Publisher:        to.Ptr("Microsoft"),
				TargetType:       to.Ptr("VirtualMachine"),
				Urn:              to.Ptr("urn:csci:microsoft:virtualMachine:shutdown/1.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CapabilityType) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CapabilityType)
			t.Fatalf("Mock response is not equal to example response for example specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/GetACapabilityType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
