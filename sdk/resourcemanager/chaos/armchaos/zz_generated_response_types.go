//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armchaos

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"time"
)

// CapabilitiesClientCreateOrUpdateResponse contains the response from method CapabilitiesClient.CreateOrUpdate.
type CapabilitiesClientCreateOrUpdateResponse struct {
	Capability
}

// CapabilitiesClientDeleteResponse contains the response from method CapabilitiesClient.Delete.
type CapabilitiesClientDeleteResponse struct {
	// placeholder for future response values
}

// CapabilitiesClientGetResponse contains the response from method CapabilitiesClient.Get.
type CapabilitiesClientGetResponse struct {
	Capability
}

// CapabilitiesClientListResponse contains the response from method CapabilitiesClient.List.
type CapabilitiesClientListResponse struct {
	CapabilityListResult
}

// CapabilityTypesClientGetResponse contains the response from method CapabilityTypesClient.Get.
type CapabilityTypesClientGetResponse struct {
	CapabilityType
}

// CapabilityTypesClientListResponse contains the response from method CapabilityTypesClient.List.
type CapabilityTypesClientListResponse struct {
	CapabilityTypeListResult
}

// ExperimentsClientCancelPollerResponse contains the response from method ExperimentsClient.Cancel.
type ExperimentsClientCancelPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ExperimentsClientCancelPoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ExperimentsClientCancelPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ExperimentsClientCancelResponse, error) {
	respType := ExperimentsClientCancelResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ExperimentCancelOperationResult)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ExperimentsClientCancelPollerResponse from the provided client and resume token.
func (l *ExperimentsClientCancelPollerResponse) Resume(ctx context.Context, client *ExperimentsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ExperimentsClient.Cancel", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ExperimentsClientCancelPoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ExperimentsClientCancelResponse contains the response from method ExperimentsClient.Cancel.
type ExperimentsClientCancelResponse struct {
	ExperimentCancelOperationResult
}

// ExperimentsClientCreateOrUpdatePollerResponse contains the response from method ExperimentsClient.CreateOrUpdate.
type ExperimentsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ExperimentsClientCreateOrUpdatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ExperimentsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ExperimentsClientCreateOrUpdateResponse, error) {
	respType := ExperimentsClientCreateOrUpdateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Experiment)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a ExperimentsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ExperimentsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ExperimentsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ExperimentsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ExperimentsClientCreateOrUpdatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// ExperimentsClientCreateOrUpdateResponse contains the response from method ExperimentsClient.CreateOrUpdate.
type ExperimentsClientCreateOrUpdateResponse struct {
	Experiment
}

// ExperimentsClientDeleteResponse contains the response from method ExperimentsClient.Delete.
type ExperimentsClientDeleteResponse struct {
	// placeholder for future response values
}

// ExperimentsClientGetExecutionDetailsResponse contains the response from method ExperimentsClient.GetExecutionDetails.
type ExperimentsClientGetExecutionDetailsResponse struct {
	ExperimentExecutionDetails
}

// ExperimentsClientGetResponse contains the response from method ExperimentsClient.Get.
type ExperimentsClientGetResponse struct {
	Experiment
}

// ExperimentsClientGetStatusResponse contains the response from method ExperimentsClient.GetStatus.
type ExperimentsClientGetStatusResponse struct {
	ExperimentStatus
}

// ExperimentsClientListAllResponse contains the response from method ExperimentsClient.ListAll.
type ExperimentsClientListAllResponse struct {
	ExperimentListResult
}

// ExperimentsClientListAllStatusesResponse contains the response from method ExperimentsClient.ListAllStatuses.
type ExperimentsClientListAllStatusesResponse struct {
	ExperimentStatusListResult
}

// ExperimentsClientListExecutionDetailsResponse contains the response from method ExperimentsClient.ListExecutionDetails.
type ExperimentsClientListExecutionDetailsResponse struct {
	ExperimentExecutionDetailsListResult
}

// ExperimentsClientListResponse contains the response from method ExperimentsClient.List.
type ExperimentsClientListResponse struct {
	ExperimentListResult
}

// ExperimentsClientStartResponse contains the response from method ExperimentsClient.Start.
type ExperimentsClientStartResponse struct {
	ExperimentStartOperationResult
}

// OperationsClientListAllResponse contains the response from method OperationsClient.ListAll.
type OperationsClientListAllResponse struct {
	OperationListResult
}

// TargetTypesClientGetResponse contains the response from method TargetTypesClient.Get.
type TargetTypesClientGetResponse struct {
	TargetType
}

// TargetTypesClientListResponse contains the response from method TargetTypesClient.List.
type TargetTypesClientListResponse struct {
	TargetTypeListResult
}

// TargetsClientCreateOrUpdateResponse contains the response from method TargetsClient.CreateOrUpdate.
type TargetsClientCreateOrUpdateResponse struct {
	Target
}

// TargetsClientDeleteResponse contains the response from method TargetsClient.Delete.
type TargetsClientDeleteResponse struct {
	// placeholder for future response values
}

// TargetsClientGetResponse contains the response from method TargetsClient.Get.
type TargetsClientGetResponse struct {
	Target
}

// TargetsClientListResponse contains the response from method TargetsClient.List.
type TargetsClientListResponse struct {
	TargetListResult
}
