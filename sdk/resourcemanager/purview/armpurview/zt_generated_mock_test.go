//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpurview_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/purview/armpurview"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByResourceGroup("SampleResourceGroup",
		&armpurview.AccountsClientListByResourceGroupOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpurview.AccountList{
			Value: []*armpurview.Account{
				{
					Name:     to.Ptr("account1"),
					Type:     to.Ptr("Microsoft.Purview/accounts"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/SampleResourceGroup/providers/Microsoft.Purview/accounts/account1"),
					Location: to.Ptr("West US 2"),
					SystemData: &armpurview.TrackedResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-22T18:39:58.6929344Z"); return t }()),
						CreatedBy:          to.Ptr("client-name"),
						CreatedByType:      to.Ptr(armpurview.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-16T23:24:34.3430059Z"); return t }()),
						LastModifiedBy:     to.Ptr("client-name"),
						LastModifiedByType: to.Ptr(armpurview.LastModifiedByTypeUser),
					},
					Properties: &armpurview.AccountProperties{
						CreatedAt:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-22T18:39:58.6929344Z"); return t }()),
						CreatedBy:         to.Ptr("client-name"),
						CreatedByObjectID: to.Ptr("client-objectId"),
						Endpoints: &armpurview.AccountPropertiesEndpoints{
							Catalog:  to.Ptr("https://account1.catalog.purview.azure-test.com"),
							Guardian: to.Ptr("https://account1.guardian.purview.azure-test.com"),
							Scan:     to.Ptr("https://account1.scan.purview.azure-test.com"),
						},
						FriendlyName:        to.Ptr("friendly-account1"),
						ProvisioningState:   to.Ptr(armpurview.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr(armpurview.PublicNetworkAccessEnabled),
					},
					SKU: &armpurview.AccountSKU{
						Name:     to.Ptr(armpurview.NameStandard),
						Capacity: to.Ptr[int32](1),
					},
				},
				{
					Name:     to.Ptr("account2"),
					Type:     to.Ptr("Microsoft.Purview/accounts"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/SampleResourceGroup/providers/Microsoft.Purview/accounts/account2"),
					Location: to.Ptr("West US 2"),
					SystemData: &armpurview.TrackedResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-22T18:39:58.6929344Z"); return t }()),
						CreatedBy:          to.Ptr("client-name"),
						CreatedByType:      to.Ptr(armpurview.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-16T23:24:34.3430059Z"); return t }()),
						LastModifiedBy:     to.Ptr("client-name"),
						LastModifiedByType: to.Ptr(armpurview.LastModifiedByTypeUser),
					},
					Properties: &armpurview.AccountProperties{
						CreatedAt:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-22T18:39:58.6929344Z"); return t }()),
						CreatedBy:         to.Ptr("client-name"),
						CreatedByObjectID: to.Ptr("client-objectId"),
						Endpoints: &armpurview.AccountPropertiesEndpoints{
							Catalog:  to.Ptr("https://account2.catalog.purview.azure-test.com"),
							Guardian: to.Ptr("https://account1.guardian.purview.azure-test.com"),
							Scan:     to.Ptr("https://account2.scan.purview.azure-test.com"),
						},
						FriendlyName:        to.Ptr("friendly-account1"),
						ProvisioningState:   to.Ptr(armpurview.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr(armpurview.PublicNetworkAccessEnabled),
					},
					SKU: &armpurview.AccountSKU{
						Name:     to.Ptr(armpurview.NameStandard),
						Capacity: to.Ptr[int32](1),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountList)
			t.Fatalf("Mock response is not equal to example response for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListBySubscription(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListBySubscription(&armpurview.AccountsClientListBySubscriptionOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpurview.AccountList{
			Value: []*armpurview.Account{
				{
					Name:     to.Ptr("account1"),
					Type:     to.Ptr("Microsoft.Purview/accounts"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/SampleResourceGroup/providers/Microsoft.Purview/accounts/account1"),
					Location: to.Ptr("West US 2"),
					SystemData: &armpurview.TrackedResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-22T18:39:58.6929344Z"); return t }()),
						CreatedBy:          to.Ptr("client-name"),
						CreatedByType:      to.Ptr(armpurview.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-16T23:24:34.3430059Z"); return t }()),
						LastModifiedBy:     to.Ptr("client-name"),
						LastModifiedByType: to.Ptr(armpurview.LastModifiedByTypeUser),
					},
					Properties: &armpurview.AccountProperties{
						CreatedAt:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-22T18:39:58.6929344Z"); return t }()),
						CreatedBy:         to.Ptr("client-name"),
						CreatedByObjectID: to.Ptr("client-objectId"),
						Endpoints: &armpurview.AccountPropertiesEndpoints{
							Catalog:  to.Ptr("https://account1.catalog.purview.azure-test.com"),
							Guardian: to.Ptr("https://account1.guardian.purview.azure-test.com"),
							Scan:     to.Ptr("https://account1.scan.purview.azure-test.com"),
						},
						FriendlyName:        to.Ptr("friendly-account1"),
						ProvisioningState:   to.Ptr(armpurview.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr(armpurview.PublicNetworkAccessEnabled),
					},
					SKU: &armpurview.AccountSKU{
						Name:     to.Ptr(armpurview.NameStandard),
						Capacity: to.Ptr[int32](1),
					},
				},
				{
					Name:     to.Ptr("account2"),
					Type:     to.Ptr("Microsoft.Purview/accounts"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/SampleResourceGroup/providers/Microsoft.Purview/accounts/account2"),
					Location: to.Ptr("West US 2"),
					SystemData: &armpurview.TrackedResourceSystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-22T18:39:58.6929344Z"); return t }()),
						CreatedBy:          to.Ptr("client-name"),
						CreatedByType:      to.Ptr(armpurview.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-16T23:24:34.3430059Z"); return t }()),
						LastModifiedBy:     to.Ptr("client-name"),
						LastModifiedByType: to.Ptr(armpurview.LastModifiedByTypeUser),
					},
					Properties: &armpurview.AccountProperties{
						CreatedAt:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-22T18:39:58.6929344Z"); return t }()),
						CreatedBy:         to.Ptr("client-name"),
						CreatedByObjectID: to.Ptr("client-objectId"),
						Endpoints: &armpurview.AccountPropertiesEndpoints{
							Catalog:  to.Ptr("https://account2.catalog.purview.azure-test.com"),
							Guardian: to.Ptr("https://account1.guardian.purview.azure-test.com"),
							Scan:     to.Ptr("https://account2.scan.purview.azure-test.com"),
						},
						FriendlyName:        to.Ptr("friendly-account1"),
						ProvisioningState:   to.Ptr(armpurview.ProvisioningStateSucceeded),
						PublicNetworkAccess: to.Ptr(armpurview.PublicNetworkAccessEnabled),
					},
					SKU: &armpurview.AccountSKU{
						Name:     to.Ptr(armpurview.NameStandard),
						Capacity: to.Ptr[int32](1),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountList)
			t.Fatalf("Mock response is not equal to example response for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewAccountsClient("12345678-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"account1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpurview.Account{
			Name:     to.Ptr("account1"),
			Type:     to.Ptr("Microsoft.Purview/accounts"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/SampleResourceGroup/providers/Microsoft.Purview/accounts/account1"),
			Location: to.Ptr("West US 2"),
			SystemData: &armpurview.TrackedResourceSystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-22T18:39:58.6929344Z"); return t }()),
				CreatedBy:          to.Ptr("client-name"),
				CreatedByType:      to.Ptr(armpurview.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-16T23:24:34.3430059Z"); return t }()),
				LastModifiedBy:     to.Ptr("client-name"),
				LastModifiedByType: to.Ptr(armpurview.LastModifiedByTypeUser),
			},
			Properties: &armpurview.AccountProperties{
				CreatedAt:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-22T18:39:58.6929344Z"); return t }()),
				CreatedBy:         to.Ptr("client-name"),
				CreatedByObjectID: to.Ptr("client-objectId"),
				Endpoints: &armpurview.AccountPropertiesEndpoints{
					Catalog:  to.Ptr("https://account1.catalog.purview.azure-test.com"),
					Guardian: to.Ptr("https://account1.guardian.purview.azure-test.com"),
					Scan:     to.Ptr("https://account1.scan.purview.azure-test.com"),
				},
				FriendlyName:             to.Ptr("friendly-account1"),
				ManagedResourceGroupName: to.Ptr("managed-rg-mwjotkl"),
				ManagedResources: &armpurview.AccountPropertiesManagedResources{
					EventHubNamespace: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/managed-rg-mwjotkl/providers/Microsoft.EventHub/namespaces/atlas-westusdddnbtp"),
					ResourceGroup:     to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/managed-rg-mwjotkl"),
					StorageAccount:    to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/managed-rg-mwjotkl/providers/Microsoft.Storage/storageAccounts/scanwestustzaagzr"),
				},
				PrivateEndpointConnections: []*armpurview.PrivateEndpointConnection{
					{
						Name: to.Ptr("peName-8536c337-7b36-4d67-a7ce-081655baf59e"),
						Type: to.Ptr("Microsoft.Purview/accounts/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/SampleResourceGroup/providers/Microsoft.Purview/accounts/account1/privateEndpointConnections/peName-8536c337-7b36-4d67-a7ce-081655baf59e"),
						Properties: &armpurview.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armpurview.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/baca8a88-4527-4c35-a13e-b2775ce0d7fc/resourceGroups/nrpResourceGroupName/providers/Microsoft.Network/privateEndpoints/peName"),
							},
							PrivateLinkServiceConnectionState: &armpurview.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Please approve my connection, thanks."),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr(armpurview.StatusPending),
							},
							ProvisioningState: to.Ptr("Succeeded"),
						},
					}},
				ProvisioningState:   to.Ptr(armpurview.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armpurview.PublicNetworkAccessEnabled),
			},
			SKU: &armpurview.AccountSKU{
				Name:     to.Ptr(armpurview.NameStandard),
				Capacity: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_CreateOrUpdate(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"SampleResourceGroup",
		"account1",
		armpurview.Account{
			Location: to.Ptr("West US 2"),
			Properties: &armpurview.AccountProperties{
				ManagedResourceGroupName: to.Ptr("custom-rgname"),
			},
		},
		&armpurview.AccountsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpurview.Account{
			Name:     to.Ptr("account1"),
			Type:     to.Ptr("Microsoft.Purview/accounts"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/SampleResourceGroup/providers/Microsoft.Purview/accounts/account1"),
			Location: to.Ptr("West US 2"),
			SystemData: &armpurview.TrackedResourceSystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-22T18:39:58.6929344Z"); return t }()),
				CreatedBy:          to.Ptr("client-name"),
				CreatedByType:      to.Ptr(armpurview.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-16T23:24:34.3430059Z"); return t }()),
				LastModifiedBy:     to.Ptr("client-name"),
				LastModifiedByType: to.Ptr(armpurview.LastModifiedByTypeUser),
			},
			Properties: &armpurview.AccountProperties{
				CreatedAt:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-22T18:39:58.6929344Z"); return t }()),
				CreatedBy:         to.Ptr("client-name"),
				CreatedByObjectID: to.Ptr("client-objectId"),
				Endpoints: &armpurview.AccountPropertiesEndpoints{
					Catalog:  to.Ptr("https://account1.catalog.purview.azure-test.com"),
					Guardian: to.Ptr("https://account1.guardian.purview.azure-test.com"),
					Scan:     to.Ptr("https://account1.scan.purview.azure-test.com"),
				},
				FriendlyName:             to.Ptr("friendly-account1"),
				ManagedResourceGroupName: to.Ptr("custom-rgname"),
				ManagedResources: &armpurview.AccountPropertiesManagedResources{
					EventHubNamespace: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/custom-rgname/providers/Microsoft.EventHub/namespaces/atlas-westusdddnbtp"),
					ResourceGroup:     to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/custom-rgname"),
					StorageAccount:    to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/custom-rgname/providers/Microsoft.Storage/storageAccounts/scanwestustzaagzr"),
				},
				ProvisioningState:   to.Ptr(armpurview.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armpurview.PublicNetworkAccessEnabled),
			},
			SKU: &armpurview.AccountSKU{
				Name:     to.Ptr(armpurview.NameStandard),
				Capacity: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"account1",
		&armpurview.AccountsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_Delete.json: %v", err)
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"SampleResourceGroup",
		"account1",
		armpurview.AccountUpdateParameters{
			Tags: map[string]*string{
				"newTag": to.Ptr("New tag value."),
			},
		},
		&armpurview.AccountsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpurview.Account{
			Name:     to.Ptr("account1"),
			Type:     to.Ptr("Microsoft.Purview/accounts"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/SampleResourceGroup/providers/Microsoft.Purview/accounts/account1"),
			Location: to.Ptr("West US 2"),
			SystemData: &armpurview.TrackedResourceSystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-22T18:39:58.6929344Z"); return t }()),
				CreatedBy:          to.Ptr("client-name"),
				CreatedByType:      to.Ptr(armpurview.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-16T23:24:34.3430059Z"); return t }()),
				LastModifiedBy:     to.Ptr("client-name"),
				LastModifiedByType: to.Ptr(armpurview.LastModifiedByTypeUser),
			},
			Tags: map[string]*string{
				"newTag": to.Ptr("New tag value."),
			},
			Properties: &armpurview.AccountProperties{
				CreatedAt:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-22T18:39:58.6929344Z"); return t }()),
				CreatedBy:         to.Ptr("client-name"),
				CreatedByObjectID: to.Ptr("client-objectId"),
				Endpoints: &armpurview.AccountPropertiesEndpoints{
					Catalog:  to.Ptr("https://account2.catalog.purview.azure-test.com"),
					Guardian: to.Ptr("https://account1.guardian.purview.azure-test.com"),
					Scan:     to.Ptr("https://account2.scan.purview.azure-test.com"),
				},
				FriendlyName: to.Ptr("friendly-account1"),
				ManagedResources: &armpurview.AccountPropertiesManagedResources{
					EventHubNamespace: to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/managed-rg-mwjotkl/providers/Microsoft.EventHub/namespaces/atlas-westusdddnbtp"),
					ResourceGroup:     to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/managed-rg-mwjotkl"),
					StorageAccount:    to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/managed-rg-mwjotkl/providers/Microsoft.Storage/storageAccounts/scanwestustzaagzr"),
				},
				ProvisioningState:   to.Ptr(armpurview.ProvisioningStateSucceeded),
				PublicNetworkAccess: to.Ptr(armpurview.PublicNetworkAccessEnabled),
			},
			SKU: &armpurview.AccountSKU{
				Name:     to.Ptr(armpurview.NameStandard),
				Capacity: to.Ptr[int32](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListKeys(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_ListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_ListKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewAccountsClient("12345678-1234-1234-12345678abc", cred, &options)
	res, err := client.ListKeys(ctx,
		"SampleResourceGroup",
		"account1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_ListKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpurview.AccessKeys{
			AtlasKafkaPrimaryEndpoint:   to.Ptr("Endpoint=sb://fake_objectId.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=ASDASasdfmasdf123412341234="),
			AtlasKafkaSecondaryEndpoint: to.Ptr("Endpoint=sb://fake_objectId.servicebus.windows.net/;SharedAccessKeyName=AlternateSharedAccessKey;SharedAccessKey=BSDASasdfmasdf123412341234="),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_ListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_AddRootCollectionAdmin(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_AddRootCollectionAdmin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_AddRootCollectionAdmin"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	_, err := client.AddRootCollectionAdmin(ctx,
		"SampleResourceGroup",
		"account1",
		armpurview.CollectionAdminUpdate{
			ObjectID: to.Ptr("7e8de0e7-2bfc-4e1f-9659-2a5785e4356f"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_AddRootCollectionAdmin.json: %v", err)
	}
}

func TestAccounts_CheckNameAvailability(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Accounts_CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewAccountsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armpurview.CheckNameAvailabilityRequest{
			Name: to.Ptr("account1"),
			Type: to.Ptr("Microsoft.Purview/accounts"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpurview.CheckNameAvailabilityResult{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Accounts_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDefaultAccounts_Get(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/DefaultAccounts_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DefaultAccounts_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewDefaultAccountsClient(cred, &options)
	res, err := client.Get(ctx,
		"11733A4E-BA84-46FF-91D1-AFF1A3215A90",
		armpurview.ScopeTypeTenant,
		&armpurview.DefaultAccountsClientGetOptions{Scope: to.Ptr("11733A4E-BA84-46FF-91D1-AFF1A3215A90")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/DefaultAccounts_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpurview.DefaultAccountPayload{
			AccountName:       to.Ptr("myDefaultAccount"),
			ResourceGroupName: to.Ptr("rg-1"),
			Scope:             to.Ptr("11733A4E-BA84-46FF-91D1-AFF1A3215A90"),
			ScopeTenantID:     to.Ptr("11733A4E-BA84-46FF-91D1-AFF1A3215A90"),
			ScopeType:         to.Ptr(armpurview.ScopeTypeTenant),
			SubscriptionID:    to.Ptr("12345678-1234-1234-12345678aaa"),
		}
		if !reflect.DeepEqual(exampleRes, res.DefaultAccountPayload) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DefaultAccountPayload)
			t.Fatalf("Mock response is not equal to example response for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/DefaultAccounts_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDefaultAccounts_Set(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/DefaultAccounts_Set.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DefaultAccounts_Set"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewDefaultAccountsClient(cred, &options)
	res, err := client.Set(ctx,
		armpurview.DefaultAccountPayload{
			AccountName:       to.Ptr("myDefaultAccount"),
			ResourceGroupName: to.Ptr("rg-1"),
			Scope:             to.Ptr("11733A4E-BA84-46FF-91D1-AFF1A3215A90"),
			ScopeTenantID:     to.Ptr("11733A4E-BA84-46FF-91D1-AFF1A3215A90"),
			ScopeType:         to.Ptr(armpurview.ScopeTypeTenant),
			SubscriptionID:    to.Ptr("12345678-1234-1234-12345678aaa"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/DefaultAccounts_Set.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpurview.DefaultAccountPayload{
			AccountName:       to.Ptr("myDefaultAccount"),
			ResourceGroupName: to.Ptr("rg-1"),
			Scope:             to.Ptr("11733A4E-BA84-46FF-91D1-AFF1A3215A90"),
			ScopeTenantID:     to.Ptr("11733A4E-BA84-46FF-91D1-AFF1A3215A90"),
			ScopeType:         to.Ptr(armpurview.ScopeTypeTenant),
			SubscriptionID:    to.Ptr("12345678-1234-1234-12345678aaa"),
		}
		if !reflect.DeepEqual(exampleRes, res.DefaultAccountPayload) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DefaultAccountPayload)
			t.Fatalf("Mock response is not equal to example response for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/DefaultAccounts_Set.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDefaultAccounts_Remove(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/DefaultAccounts_Remove.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DefaultAccounts_Remove"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewDefaultAccountsClient(cred, &options)
	_, err := client.Remove(ctx,
		"11733A4E-BA84-46FF-91D1-AFF1A3215A90",
		armpurview.ScopeTypeTenant,
		&armpurview.DefaultAccountsClientRemoveOptions{Scope: to.Ptr("11733A4E-BA84-46FF-91D1-AFF1A3215A90")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/DefaultAccounts_Remove.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpurview.OperationList{
			Value: []*armpurview.Operation{
				{
					Name: to.Ptr("Microsoft.Purview/operations/read"),
					Display: &armpurview.OperationDisplay{
						Description: to.Ptr("Reads all available operations in Purview Resource Provider."),
						Operation:   to.Ptr("Read all operations"),
						Provider:    to.Ptr("Microsoft Purview"),
						Resource:    to.Ptr("Operations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Purview/register/action"),
					Display: &armpurview.OperationDisplay{
						Description: to.Ptr("Register the subscription for Purview Resource Provider"),
						Operation:   to.Ptr("Register Purview Resource Provider"),
						Provider:    to.Ptr("Microsoft Purview"),
						Resource:    to.Ptr("Purview Resource Provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Purview/unregister/action"),
					Display: &armpurview.OperationDisplay{
						Description: to.Ptr("Unregister  the subscription for Purview Resource Provider"),
						Operation:   to.Ptr("Unregister Purview Resource Provider"),
						Provider:    to.Ptr("Microsoft Purview"),
						Resource:    to.Ptr("Purview Resource Provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Purview/accounts/read"),
					Display: &armpurview.OperationDisplay{
						Description: to.Ptr("Read account resource for Purview Resource Provider."),
						Operation:   to.Ptr("Read account resource"),
						Provider:    to.Ptr("Microsoft Purview"),
						Resource:    to.Ptr("Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Purview/accounts/write"),
					Display: &armpurview.OperationDisplay{
						Description: to.Ptr("Write account resource for Purview Resource Provider."),
						Operation:   to.Ptr("Write account resource"),
						Provider:    to.Ptr("Microsoft Purview"),
						Resource:    to.Ptr("Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Purview/accounts/delete"),
					Display: &armpurview.OperationDisplay{
						Description: to.Ptr("Delete account resource for Purview Resource Provider."),
						Operation:   to.Ptr("Delete account resource"),
						Provider:    to.Ptr("Microsoft Purview"),
						Resource:    to.Ptr("Account"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_ListByAccount(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateEndpointConnections_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_ListByAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewPrivateEndpointConnectionsClient("12345678-1234-1234-12345678abc", cred, &options)
	pager := client.ListByAccount("SampleResourceGroup",
		"account1",
		&armpurview.PrivateEndpointConnectionsClientListByAccountOptions{SkipToken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateEndpointConnections_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpurview.PrivateEndpointConnectionList{
			Value: []*armpurview.PrivateEndpointConnection{
				{
					Name: to.Ptr("privateEndpointConnection1"),
					Type: to.Ptr("Microsoft.Purview/accounts/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/SampleResourceGroup/providers/Microsoft.Purview/accounts/account1/privateEndpointConnections/privateEndpointConnection1"),
					Properties: &armpurview.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armpurview.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/SampleResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint1"),
						},
						PrivateLinkServiceConnectionState: &armpurview.PrivateLinkServiceConnectionState{
							Description: to.Ptr("Approved by johndoe@company.com"),
							Status:      to.Ptr(armpurview.StatusApproved),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name: to.Ptr("privateEndpointConnection2"),
					Type: to.Ptr("Microsoft.Purview/accounts/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/SampleResourceGroup/providers/Microsoft.Purview/accounts/account1/privateEndpointConnections/privateEndpointConnection2"),
					Properties: &armpurview.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armpurview.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/SampleResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armpurview.PrivateLinkServiceConnectionState{
							Description: to.Ptr("Rejected by johndoe@company.com"),
							Status:      to.Ptr(armpurview.StatusRejected),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionList)
			t.Fatalf("Mock response is not equal to example response for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateEndpointConnections_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateEndpointConnections_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewPrivateEndpointConnectionsClient("12345678-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"account1",
		"privateEndpointConnection1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateEndpointConnections_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpurview.PrivateEndpointConnection{
			Name: to.Ptr("privateEndpointConnection1"),
			Type: to.Ptr("Microsoft.Purview/accounts/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/SampleResourceGroup/providers/Microsoft.Purview/accounts/account1/privateEndpointConnections/privateEndpointConnection1"),
			Properties: &armpurview.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armpurview.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/SampleResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armpurview.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by johndoe@company.com"),
					Status:      to.Ptr(armpurview.StatusApproved),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateEndpointConnections_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateEndpointConnections_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewPrivateEndpointConnectionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"SampleResourceGroup",
		"account1",
		"privateEndpointConnection1",
		armpurview.PrivateEndpointConnection{
			Properties: &armpurview.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armpurview.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by johndoe@company.com"),
					Status:      to.Ptr(armpurview.StatusApproved),
				},
			},
		},
		&armpurview.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateEndpointConnections_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateEndpointConnections_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpurview.PrivateEndpointConnection{
			Name: to.Ptr("privateEndpointConnection1"),
			Type: to.Ptr("Microsoft.Purview/accounts/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/SampleResourceGroup/providers/Microsoft.Purview/accounts/account1/privateEndpointConnections/privateEndpointConnection1"),
			Properties: &armpurview.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armpurview.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/12345678-1234-1234-12345678abc/resourceGroups/SampleResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armpurview.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by johndoe@company.com"),
					Status:      to.Ptr(armpurview.StatusApproved),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateEndpointConnections_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateEndpointConnections_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewPrivateEndpointConnectionsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"account1",
		"privateEndpointConnection1",
		&armpurview.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateEndpointConnections_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateEndpointConnections_Delete.json: %v", err)
	}
}

func TestPrivateLinkResources_ListByAccount(t *testing.T) {
	// From example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateLinkResources_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListByAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpurview.NewPrivateLinkResourcesClient("12345678-1234-1234-12345678abc", cred, &options)
	pager := client.ListByAccount("SampleResourceGroup",
		"account1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateLinkResources_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpurview.PrivateLinkResourceList{
			Value: []*armpurview.PrivateLinkResource{
				{
					Name: to.Ptr("plr1"),
					Type: to.Ptr("Microsoft.Purview/accounts/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/SampleResourceGroup/providers/Microsoft.Purview/accounts/account1/privateLinkResources/plr1"),
					Properties: &armpurview.PrivateLinkResourceProperties{
						GroupID: to.Ptr("account1"),
						RequiredMembers: []*string{
							to.Ptr("account1")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelinkzone1.service.azure.com")},
					},
				},
				{
					Name: to.Ptr("plr2"),
					Type: to.Ptr("Microsoft.Purview/accounts/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/SampleResourceGroup/providers/Microsoft.Purview/accounts/account1/privateLinkResources/plr2"),
					Properties: &armpurview.PrivateLinkResourceProperties{
						GroupID: to.Ptr("account2"),
						RequiredMembers: []*string{
							to.Ptr("account2")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelinkzone2.service.azure.com")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceList)
			t.Fatalf("Mock response is not equal to example response for example specification/purview/resource-manager/Microsoft.Purview/stable/2021-07-01/examples/PrivateLinkResources_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
