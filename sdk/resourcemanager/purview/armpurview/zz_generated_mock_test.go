//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpurview

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example Accounts_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByResourceGroup("SampleResourceGroup",
		&AccountsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Account.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Account.ID should not be nil!")
			}
		}
	}
}

func TestAccounts_ListBySubscription(t *testing.T) {
	// From example Accounts_ListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListBySubscription(&AccountsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Account.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Account.ID should not be nil!")
			}
		}
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example Accounts_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"12345678-1234-1234-12345678abc")
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"account1",
		&AccountsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Account.ID == nil {
		t.Fatal("Account.ID should not be nil!")
	}
}

func TestAccounts_CreateOrUpdate(t *testing.T) {
	// From example Accounts_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"SampleResourceGroup",
		"account1",
		Account{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("West US 2"),
			},
			Properties: &AccountProperties{
				ManagedResourceGroupName: to.StringPtr("custom-rgname"),
			},
		},
		&AccountsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Account.ID == nil {
		t.Fatal("Account.ID should not be nil!")
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example Accounts_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"account1",
		&AccountsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example Accounts_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginUpdate(ctx,
		"SampleResourceGroup",
		"account1",
		AccountUpdateParameters{
			Tags: map[string]*string{
				"newTag": to.StringPtr("New tag value."),
			},
		},
		&AccountsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Account.ID == nil {
		t.Fatal("Account.ID should not be nil!")
	}
}

func TestAccounts_ListKeys(t *testing.T) {
	// From example Accounts_ListKeys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"12345678-1234-1234-12345678abc")
	_, err := client.ListKeys(ctx,
		"SampleResourceGroup",
		"account1",
		&AccountsListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccounts_AddRootCollectionAdmin(t *testing.T) {
	// From example Accounts_AddRootCollectionAdmin
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.AddRootCollectionAdmin(ctx,
		"SampleResourceGroup",
		"account1",
		CollectionAdminUpdate{
			ObjectID: to.StringPtr("7e8de0e7-2bfc-4e1f-9659-2a5785e4356f"),
		},
		&AccountsAddRootCollectionAdminOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccounts_CheckNameAvailability(t *testing.T) {
	// From example Accounts_CheckNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccountsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.CheckNameAvailability(ctx,
		CheckNameAvailabilityRequest{
			Name: to.StringPtr("account1"),
			Type: to.StringPtr("Microsoft.Purview/accounts"),
		},
		&AccountsCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDefaultAccounts_Get(t *testing.T) {
	// From example DefaultAccounts_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDefaultAccountsClient(con)
	_, err := client.Get(ctx,
		"12345678-1234-1234-12345678abc",
		ScopeTypeTenant,
		&DefaultAccountsGetOptions{Scope: to.StringPtr("12345678-1234-1234-12345678abc")})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDefaultAccounts_Set(t *testing.T) {
	// From example DefaultAccounts_Set
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDefaultAccountsClient(con)
	_, err := client.Set(ctx,
		DefaultAccountPayload{
			AccountName:       to.StringPtr("myDefaultAccount"),
			ResourceGroupName: to.StringPtr("rg-1"),
			Scope:             to.StringPtr("12345678-1234-1234-12345678abc"),
			ScopeTenantID:     to.StringPtr("12345678-1234-1234-12345678abc"),
			ScopeType:         ScopeTypeTenant.ToPtr(),
			SubscriptionID:    to.StringPtr("12345678-1234-1234-12345678aaa"),
		},
		&DefaultAccountsSetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDefaultAccounts_Remove(t *testing.T) {
	// From example DefaultAccounts_Remove
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDefaultAccountsClient(con)
	_, err := client.Remove(ctx,
		"12345678-1234-1234-12345678abc",
		ScopeTypeTenant,
		&DefaultAccountsRemoveOptions{Scope: to.StringPtr("12345678-1234-1234-12345678abc")})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example Operations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestPrivateEndpointConnections_ListByAccount(t *testing.T) {
	// From example PrivateEndpointConnections_ListByAccount
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"12345678-1234-1234-12345678abc")
	pager := client.ListByAccount("SampleResourceGroup",
		"account1",
		&PrivateEndpointConnectionsListByAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example PrivateEndpointConnections_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"12345678-1234-1234-12345678abc")
	res, err := client.Get(ctx,
		"SampleResourceGroup",
		"account1",
		"privateEndpointConnection1",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example PrivateEndpointConnections_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"SampleResourceGroup",
		"account1",
		"privateEndpointConnection1",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Approved by johndoe@company.com"),
					Status:      StatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example PrivateEndpointConnections_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDelete(ctx,
		"SampleResourceGroup",
		"account1",
		"privateEndpointConnection1",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_ListByAccount(t *testing.T) {
	// From example PrivateLinkResources_ListByAccount
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"12345678-1234-1234-12345678abc")
	pager := client.ListByAccount("SampleResourceGroup",
		"account1",
		&PrivateLinkResourcesListByAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_GetByGroupId(t *testing.T) {
	// From example PrivateLinkResources_GetByGroupId
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"12345678-1234-1234-12345678abc")
	res, err := client.GetByGroupID(ctx,
		"SampleResourceGroup",
		"account1",
		"group1",
		&PrivateLinkResourcesGetByGroupIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
