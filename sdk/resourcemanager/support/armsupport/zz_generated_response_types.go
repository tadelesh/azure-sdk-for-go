//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsupport

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"time"
)

// CommunicationsClientCheckNameAvailabilityResponse contains the response from method CommunicationsClient.CheckNameAvailability.
type CommunicationsClientCheckNameAvailabilityResponse struct {
	CheckNameAvailabilityOutput
}

// CommunicationsClientCreatePollerResponse contains the response from method CommunicationsClient.Create.
type CommunicationsClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CommunicationsClientCreatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CommunicationsClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CommunicationsClientCreateResponse, error) {
	respType := CommunicationsClientCreateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.CommunicationDetails)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a CommunicationsClientCreatePollerResponse from the provided client and resume token.
func (l *CommunicationsClientCreatePollerResponse) Resume(ctx context.Context, client *CommunicationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CommunicationsClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &CommunicationsClientCreatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// CommunicationsClientCreateResponse contains the response from method CommunicationsClient.Create.
type CommunicationsClientCreateResponse struct {
	CommunicationDetails
}

// CommunicationsClientGetResponse contains the response from method CommunicationsClient.Get.
type CommunicationsClientGetResponse struct {
	CommunicationDetails
}

// CommunicationsClientListResponse contains the response from method CommunicationsClient.List.
type CommunicationsClientListResponse struct {
	CommunicationsListResult
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsListResult
}

// ProblemClassificationsClientGetResponse contains the response from method ProblemClassificationsClient.Get.
type ProblemClassificationsClientGetResponse struct {
	ProblemClassification
}

// ProblemClassificationsClientListResponse contains the response from method ProblemClassificationsClient.List.
type ProblemClassificationsClientListResponse struct {
	ProblemClassificationsListResult
}

// ServicesClientGetResponse contains the response from method ServicesClient.Get.
type ServicesClientGetResponse struct {
	Service
}

// ServicesClientListResponse contains the response from method ServicesClient.List.
type ServicesClientListResponse struct {
	ServicesListResult
}

// TicketsClientCheckNameAvailabilityResponse contains the response from method TicketsClient.CheckNameAvailability.
type TicketsClientCheckNameAvailabilityResponse struct {
	CheckNameAvailabilityOutput
}

// TicketsClientCreatePollerResponse contains the response from method TicketsClient.Create.
type TicketsClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *TicketsClientCreatePoller
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l TicketsClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (TicketsClientCreateResponse, error) {
	respType := TicketsClientCreateResponse{}
	_, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.TicketDetails)
	if err != nil {
		return respType, err
	}
	return respType, nil
}

// Resume rehydrates a TicketsClientCreatePollerResponse from the provided client and resume token.
func (l *TicketsClientCreatePollerResponse) Resume(ctx context.Context, client *TicketsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("TicketsClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &TicketsClientCreatePoller{
		pt: pt,
	}
	_, err = poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	return nil
}

// TicketsClientCreateResponse contains the response from method TicketsClient.Create.
type TicketsClientCreateResponse struct {
	TicketDetails
}

// TicketsClientGetResponse contains the response from method TicketsClient.Get.
type TicketsClientGetResponse struct {
	TicketDetails
}

// TicketsClientListResponse contains the response from method TicketsClient.List.
type TicketsClientListResponse struct {
	TicketsListResult
}

// TicketsClientUpdateResponse contains the response from method TicketsClient.Update.
type TicketsClientUpdateResponse struct {
	TicketDetails
}
