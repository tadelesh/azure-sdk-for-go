//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsupport_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/support/armsupport"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsupport.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsupport.OperationsListResult{
			Value: []*armsupport.Operation{
				{
					Name: to.Ptr("Microsoft.Support/services/read"),
					Display: &armsupport.OperationDisplay{
						Description: to.Ptr("Gets all the Azure services available for support"),
						Operation:   to.Ptr("Reads Services"),
						Provider:    to.Ptr("Microsoft Support"),
						Resource:    to.Ptr("Service"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Support/problemClassifications/read"),
					Display: &armsupport.OperationDisplay{
						Description: to.Ptr("Gets all the problem classifications available for a specific Azure service"),
						Operation:   to.Ptr("Reads Problem Classifications"),
						Provider:    to.Ptr("Microsoft Support"),
						Resource:    to.Ptr("Problem Classification"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Support/supportTickets/read"),
					Display: &armsupport.OperationDisplay{
						Description: to.Ptr("Gets all the support tickets"),
						Operation:   to.Ptr("Reads Support Tickets"),
						Provider:    to.Ptr("Microsoft Support"),
						Resource:    to.Ptr("Support Ticket"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Support/supportTickets/write"),
					Display: &armsupport.OperationDisplay{
						Description: to.Ptr("Updates support ticket"),
						Operation:   to.Ptr("Updates support ticket"),
						Provider:    to.Ptr("Microsoft Support"),
						Resource:    to.Ptr("Support Ticket"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Support/communications/read"),
					Display: &armsupport.OperationDisplay{
						Description: to.Ptr("Gets all the communications"),
						Operation:   to.Ptr("Reads Communications"),
						Provider:    to.Ptr("Microsoft Support"),
						Resource:    to.Ptr("Communication"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Support/communications/write"),
					Display: &armsupport.OperationDisplay{
						Description: to.Ptr("Creates a communication"),
						Operation:   to.Ptr("Creates a communication"),
						Provider:    to.Ptr("Microsoft Support"),
						Resource:    to.Ptr("Communication"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Support/register/action"),
					Display: &armsupport.OperationDisplay{
						Description: to.Ptr("Registers Support Resource Provider"),
						Operation:   to.Ptr("Registers Support Resource Provider"),
						Provider:    to.Ptr("Registers Support Resource Provider"),
						Resource:    to.Ptr("Support Registration"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Support/createSupportTicket/action"),
					Display: &armsupport.OperationDisplay{
						Description: to.Ptr("Creates support ticket"),
						Operation:   to.Ptr("Registers Support Resource Provider"),
						Provider:    to.Ptr("Microsoft Support"),
						Resource:    to.Ptr("SupportTicket"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Support/addCommunication/action"),
					Display: &armsupport.OperationDisplay{
						Description: to.Ptr("Add communication to support ticket"),
						Operation:   to.Ptr("Registers Support Resource Provider"),
						Provider:    to.Ptr("Microsoft Support"),
						Resource:    to.Ptr("Communication"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_List(t *testing.T) {
	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListServices.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of services for which a support ticket can be created"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsupport.NewServicesClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListServices.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsupport.ServicesListResult{
			Value: []*armsupport.Service{
				{
					Name: to.Ptr("service_guid_1"),
					Type: to.Ptr("Microsoft.Support/services"),
					ID:   to.Ptr("/providers/Microsoft.Support/services/service_guid_1"),
					Properties: &armsupport.ServiceProperties{
						DisplayName:   to.Ptr("Billing"),
						ResourceTypes: []*string{},
					},
				},
				{
					Name: to.Ptr("service_guid_2"),
					Type: to.Ptr("Microsoft.Support/services"),
					ID:   to.Ptr("/providers/Microsoft.Support/services/service_guid_2"),
					Properties: &armsupport.ServiceProperties{
						DisplayName:   to.Ptr("Service and subscription limits (quotas)"),
						ResourceTypes: []*string{},
					},
				},
				{
					Name: to.Ptr("service_guid_3"),
					Type: to.Ptr("Microsoft.Support/services"),
					ID:   to.Ptr("/providers/Microsoft.Support/services/service_guid_3"),
					Properties: &armsupport.ServiceProperties{
						DisplayName:   to.Ptr("Subscription management"),
						ResourceTypes: []*string{},
					},
				},
				{
					Name: to.Ptr("service_guid_4"),
					Type: to.Ptr("Microsoft.Support/services"),
					ID:   to.Ptr("/providers/Microsoft.Support/services/service_guid_4"),
					Properties: &armsupport.ServiceProperties{
						DisplayName: to.Ptr("Data Explorer"),
						ResourceTypes: []*string{
							to.Ptr("MICROSOFT.KUSTO/CLUSTERS"),
							to.Ptr("MICROSOFT.KUSTO/DATABASES")},
					},
				},
				{
					Name: to.Ptr("service_guid_5"),
					Type: to.Ptr("Microsoft.Support/services"),
					ID:   to.Ptr("/providers/Microsoft.Support/services/service_guid_5"),
					Properties: &armsupport.ServiceProperties{
						DisplayName: to.Ptr("Virtual Machine running Windows"),
						ResourceTypes: []*string{
							to.Ptr("MICROSOFT.CLASSICCOMPUTE/VIRTUALMACHINES"),
							to.Ptr("MICROSOFT.COMPUTE/VIRTUALMACHINES")},
					},
				},
				{
					Name: to.Ptr("service_guid_6"),
					Type: to.Ptr("Microsoft.Support/services"),
					ID:   to.Ptr("/providers/Microsoft.Support/services/service_guid_6"),
					Properties: &armsupport.ServiceProperties{
						DisplayName: to.Ptr("Virtual Machine running Linux"),
						ResourceTypes: []*string{
							to.Ptr("MICROSOFT.CLASSICCOMPUTE/VIRTUALMACHINES"),
							to.Ptr("MICROSOFT.COMPUTE/VIRTUALMACHINES")},
					},
				},
				{
					Name: to.Ptr("service_guid_7"),
					Type: to.Ptr("Microsoft.Support/services"),
					ID:   to.Ptr("/providers/Microsoft.Support/services/service_guid_7"),
					Properties: &armsupport.ServiceProperties{
						DisplayName: to.Ptr("Virtual Network"),
						ResourceTypes: []*string{
							to.Ptr("MICROSOFT.NETWORK/VIRTUALNETWORKS"),
							to.Ptr("MICROSOFT.CLASSICNETWORK/VIRTUALNETWORKS")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServicesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServicesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListServices.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Get(t *testing.T) {
	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/GetService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets details of the Azure service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsupport.NewServicesClient(cred, &options)
	res, err := client.Get(ctx,
		"service_guid",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/GetService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.Service{
			Name: to.Ptr("service_guid"),
			Type: to.Ptr("Microsoft.Support/services"),
			ID:   to.Ptr("/providers/Microsoft.Support/services/service_guid"),
			Properties: &armsupport.ServiceProperties{
				DisplayName: to.Ptr("Virtual Machine running Windows"),
				ResourceTypes: []*string{
					to.Ptr("MICROSOFT.CLASSICCOMPUTE/VIRTUALMACHINES"),
					to.Ptr("MICROSOFT.COMPUTE/VIRTUALMACHINES")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/GetService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProblemClassifications_List(t *testing.T) {
	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListProblemClassifications.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of problemClassifications for a service for which a support ticket can be created"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsupport.NewProblemClassificationsClient(cred, &options)
	pager := client.List("service_guid",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListProblemClassifications.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsupport.ProblemClassificationsListResult{
			Value: []*armsupport.ProblemClassification{
				{
					Name: to.Ptr("problemClassification_guid_1"),
					Type: to.Ptr("Microsoft.Support/problemClassifications"),
					ID:   to.Ptr("/providers/Microsoft.Support/services/service_guid/problemClassifications/problemClassification_guid_1"),
					Properties: &armsupport.ProblemClassificationProperties{
						DisplayName: to.Ptr("Reservation Management / Exchanges and Refunds"),
					},
				},
				{
					Name: to.Ptr("problemClassification_guid_2"),
					Type: to.Ptr("Microsoft.Support/problemClassifications"),
					ID:   to.Ptr("/providers/Microsoft.Support/services/service_guid/problemClassifications/problemClassification_guid_2"),
					Properties: &armsupport.ProblemClassificationProperties{
						DisplayName: to.Ptr("Reservation Management / Request Invoices"),
					},
				},
				{
					Name: to.Ptr("problemClassification_guid_3"),
					Type: to.Ptr("Microsoft.Support/problemClassifications"),
					ID:   to.Ptr("/providers/Microsoft.Support/services/service_guid/problemClassifications/problemClassification_guid_3"),
					Properties: &armsupport.ProblemClassificationProperties{
						DisplayName: to.Ptr("Reservation Management / Other Iissues or Requests"),
					},
				},
				{
					Name: to.Ptr("problemClassification_guid_4"),
					Type: to.Ptr("Microsoft.Support/problemClassifications"),
					ID:   to.Ptr("/providers/Microsoft.Support/services/service_guid/problemClassifications/problemClassification_guid_4"),
					Properties: &armsupport.ProblemClassificationProperties{
						DisplayName: to.Ptr("Other General Billing Questions"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProblemClassificationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProblemClassificationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListProblemClassifications.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProblemClassifications_Get(t *testing.T) {
	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/GetProblemClassification.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets details of problemClassification for Azure service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsupport.NewProblemClassificationsClient(cred, &options)
	res, err := client.Get(ctx,
		"service_guid",
		"problemClassification_guid",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/GetProblemClassification.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.ProblemClassification{
			Name: to.Ptr("problemClassification_guid"),
			Type: to.Ptr("Microsoft.Support/problemClassifications"),
			ID:   to.Ptr("/providers/Microsoft.Support/services/service_guid/problemClassifications/problemClassification_guid"),
			Properties: &armsupport.ProblemClassificationProperties{
				DisplayName: to.Ptr("Reservation Management / Exchanges and Refunds"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProblemClassification) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProblemClassification)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/GetProblemClassification.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSupportTickets_CheckNameAvailability(t *testing.T) {
	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CheckNameAvailabilityWithSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Checks whether name is available for SupportTicket resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsupport.NewTicketsClient("subid", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armsupport.CheckNameAvailabilityInput{
			Name: to.Ptr("sampleName"),
			Type: to.Ptr(armsupport.TypeMicrosoftSupportSupportTickets),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CheckNameAvailabilityWithSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.CheckNameAvailabilityOutput{
			Message:       to.Ptr("Name not available"),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("Name is already in use"),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CheckNameAvailabilityWithSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSupportTickets_List(t *testing.T) {
	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListSupportTicketsCreatedOnOrAfterAndInOpenStateBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List support tickets created on or after a certain date and in open state for a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsupport.NewTicketsClient("subid", cred, &options)
	pager := client.List(&armsupport.TicketsClientListOptions{Top: nil,
		Filter: to.Ptr("createdDate ge 2020-03-10T22:08:51Z and status eq 'Open'"),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListSupportTicketsCreatedOnOrAfterAndInOpenStateBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsupport.TicketsListResult{
			Value: []*armsupport.TicketDetails{
				{
					Name: to.Ptr("testticket"),
					Type: to.Ptr("Microsoft.Support/supportTickets"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
					Properties: &armsupport.TicketDetailsProperties{
						Description: to.Ptr("my description"),
						ContactDetails: &armsupport.ContactProfile{
							Country:                  to.Ptr("usa"),
							FirstName:                to.Ptr("abc"),
							LastName:                 to.Ptr("xyz"),
							PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
							PreferredSupportLanguage: to.Ptr("en-US"),
							PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
							PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
						},
						CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T21:36:18Z"); return t }()),
						ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T21:36:23Z"); return t }()),
						ProblemClassificationDisplayName: to.Ptr("Connectivity / Cannot connect to virtual machine by using RDP or SSH"),
						ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/virtual_machine_service_guid/problemClassifications/problemClassification_guid"),
						Require24X7Response:              to.Ptr(false),
						ServiceDisplayName:               to.Ptr("Virtual Machine running Linux"),
						ServiceID:                        to.Ptr("/providers/Microsoft.Support/services/virtual_machine_service_guid"),
						ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
							ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T17:36:18Z"); return t }()),
							SLAMinutes:     to.Ptr[int32](240),
							StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T21:36:18Z"); return t }()),
						},
						Severity: to.Ptr(armsupport.SeverityLevelModerate),
						Status:   to.Ptr("Open"),
						SupportEngineer: &armsupport.Engineer{
							EmailAddress: to.Ptr("xyz@contoso.com"),
						},
						SupportPlanType: to.Ptr("Premier"),
						SupportTicketID: to.Ptr("119120321001170"),
						TechnicalTicketDetails: &armsupport.TechnicalTicketDetails{
							ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/test/providers/Microsoft.Compute/virtualMachines/testserver"),
						},
						Title: to.Ptr("my title"),
					},
				},
				{
					Name: to.Ptr("testticket2"),
					Type: to.Ptr("Microsoft.Support/supportTickets"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket2"),
					Properties: &armsupport.TicketDetailsProperties{
						Description: to.Ptr("This is a test - please ignore"),
						ContactDetails: &armsupport.ContactProfile{
							Country:                  to.Ptr("USA"),
							FirstName:                to.Ptr("abc"),
							LastName:                 to.Ptr("xyz"),
							PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
							PreferredSupportLanguage: to.Ptr("en-US"),
							PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
							PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
						},
						CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T21:36:18Z"); return t }()),
						ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T21:36:18Z"); return t }()),
						ProblemClassificationDisplayName: to.Ptr("Add or Edit VAT, TAX ID, or PO Number"),
						ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid/problemClassifications/problemClassification_guid"),
						Require24X7Response:              to.Ptr(false),
						ServiceDisplayName:               to.Ptr("Subscription management"),
						ServiceID:                        to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid"),
						ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
							ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T17:36:18Z"); return t }()),
							SLAMinutes:     to.Ptr[int32](240),
							StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T21:36:18Z"); return t }()),
						},
						Severity: to.Ptr(armsupport.SeverityLevelMinimal),
						Status:   to.Ptr("Open"),
						SupportEngineer: &armsupport.Engineer{
							EmailAddress: to.Ptr("xyz@contoso.com"),
						},
						SupportPlanType: to.Ptr("Premier"),
						SupportTicketID: to.Ptr("118032014183771"),
						Title:           to.Ptr("Test - please ignore"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TicketsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TicketsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListSupportTicketsCreatedOnOrAfterAndInOpenStateBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListSupportTicketsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List support tickets for a subscription"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	pager = client.List(&armsupport.TicketsClientListOptions{Top: nil,
		Filter: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListSupportTicketsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsupport.TicketsListResult{
			Value: []*armsupport.TicketDetails{
				{
					Name: to.Ptr("testticket"),
					Type: to.Ptr("Microsoft.Support/supportTickets"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
					Properties: &armsupport.TicketDetailsProperties{
						Description: to.Ptr("my description"),
						ContactDetails: &armsupport.ContactProfile{
							Country:                  to.Ptr("usa"),
							FirstName:                to.Ptr("abc"),
							LastName:                 to.Ptr("xyz"),
							PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
							PreferredSupportLanguage: to.Ptr("en-US"),
							PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
							PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
						},
						CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
						ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
						ProblemClassificationDisplayName: to.Ptr("Connectivity / Cannot connect to virtual machine by using RDP or SSH"),
						ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/virtual_machine_service_guid/problemClassifications/problemClassification_guid"),
						Require24X7Response:              to.Ptr(false),
						ServiceDisplayName:               to.Ptr("Virtual Machine running Linux"),
						ServiceID:                        to.Ptr("/providers/Microsoft.Support/services/virtual_machine_service_guid"),
						ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
							ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
							SLAMinutes:     to.Ptr[int32](240),
							StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
						},
						Severity: to.Ptr(armsupport.SeverityLevelModerate),
						Status:   to.Ptr("Open"),
						SupportEngineer: &armsupport.Engineer{
							EmailAddress: to.Ptr("xyz@contoso.com"),
						},
						SupportPlanType: to.Ptr("Premier"),
						SupportTicketID: to.Ptr("119120321001170"),
						TechnicalTicketDetails: &armsupport.TechnicalTicketDetails{
							ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/test/providers/Microsoft.Compute/virtualMachines/testserver"),
						},
						Title: to.Ptr("my title"),
					},
				},
				{
					Name: to.Ptr("testticket2"),
					Type: to.Ptr("Microsoft.Support/supportTickets"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket2"),
					Properties: &armsupport.TicketDetailsProperties{
						Description: to.Ptr("This is a test - please ignore"),
						ContactDetails: &armsupport.ContactProfile{
							Country:                  to.Ptr("USA"),
							FirstName:                to.Ptr("abc"),
							LastName:                 to.Ptr("xyz"),
							PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
							PreferredSupportLanguage: to.Ptr("en-US"),
							PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
							PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
						},
						CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
						ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
						ProblemClassificationDisplayName: to.Ptr("Add or Edit VAT, TAX ID, or PO Number"),
						ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid/problemClassifications/problemClassification_guid"),
						Require24X7Response:              to.Ptr(false),
						ServiceDisplayName:               to.Ptr("Subscription management"),
						ServiceID:                        to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid"),
						ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
							ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
							SLAMinutes:     to.Ptr[int32](240),
							StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
						},
						Severity: to.Ptr(armsupport.SeverityLevelMinimal),
						Status:   to.Ptr("Open"),
						SupportEngineer: &armsupport.Engineer{
							EmailAddress: to.Ptr("xyz@contoso.com"),
						},
						SupportPlanType: to.Ptr("Premier"),
						SupportTicketID: to.Ptr("118032014183771"),
						Title:           to.Ptr("Test - please ignore"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TicketsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TicketsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListSupportTicketsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListSupportTicketsInOpenStateBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List support tickets in open state for a subscription"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	pager = client.List(&armsupport.TicketsClientListOptions{Top: nil,
		Filter: to.Ptr("status eq 'Open'"),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListSupportTicketsInOpenStateBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsupport.TicketsListResult{
			Value: []*armsupport.TicketDetails{
				{
					Name: to.Ptr("testticket"),
					Type: to.Ptr("Microsoft.Support/supportTickets"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
					Properties: &armsupport.TicketDetailsProperties{
						Description: to.Ptr("my description"),
						ContactDetails: &armsupport.ContactProfile{
							Country:                  to.Ptr("usa"),
							FirstName:                to.Ptr("abc"),
							LastName:                 to.Ptr("xyz"),
							PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
							PreferredSupportLanguage: to.Ptr("en-US"),
							PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
							PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
						},
						CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
						ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
						ProblemClassificationDisplayName: to.Ptr("Connectivity / Cannot connect to virtual machine by using RDP or SSH"),
						ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/virtual_machine_service_guid/problemClassifications/problemClassification_guid"),
						Require24X7Response:              to.Ptr(false),
						ServiceDisplayName:               to.Ptr("Virtual Machine running Linux"),
						ServiceID:                        to.Ptr("/providers/Microsoft.Support/services/virtual_machine_service_guid"),
						ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
							ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
							SLAMinutes:     to.Ptr[int32](240),
							StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
						},
						Severity: to.Ptr(armsupport.SeverityLevelModerate),
						Status:   to.Ptr("Open"),
						SupportEngineer: &armsupport.Engineer{
							EmailAddress: to.Ptr("xyz@contoso.com"),
						},
						SupportPlanType: to.Ptr("Premier"),
						SupportTicketID: to.Ptr("119120321001170"),
						TechnicalTicketDetails: &armsupport.TechnicalTicketDetails{
							ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/test/providers/Microsoft.Compute/virtualMachines/testserver"),
						},
						Title: to.Ptr("my title"),
					},
				},
				{
					Name: to.Ptr("testticket2"),
					Type: to.Ptr("Microsoft.Support/supportTickets"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket2"),
					Properties: &armsupport.TicketDetailsProperties{
						Description: to.Ptr("This is a test - please ignore"),
						ContactDetails: &armsupport.ContactProfile{
							Country:                  to.Ptr("USA"),
							FirstName:                to.Ptr("abc"),
							LastName:                 to.Ptr("xyz"),
							PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
							PreferredSupportLanguage: to.Ptr("en-US"),
							PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
							PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
						},
						CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
						ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
						ProblemClassificationDisplayName: to.Ptr("Add or Edit VAT, TAX ID, or PO Number"),
						ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid/problemClassifications/problemClassification_guid"),
						Require24X7Response:              to.Ptr(false),
						ServiceDisplayName:               to.Ptr("Subscription management"),
						ServiceID:                        to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid"),
						ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
							ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
							SLAMinutes:     to.Ptr[int32](240),
							StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
						},
						Severity: to.Ptr(armsupport.SeverityLevelMinimal),
						Status:   to.Ptr("Open"),
						SupportEngineer: &armsupport.Engineer{
							EmailAddress: to.Ptr("xyz@contoso.com"),
						},
						SupportPlanType: to.Ptr("Premier"),
						SupportTicketID: to.Ptr("118032014183771"),
						Title:           to.Ptr("Test - please ignore"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TicketsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TicketsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListSupportTicketsInOpenStateBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSupportTickets_Get(t *testing.T) {
	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/GetSubscriptionSupportTicketDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a subscription ticket"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsupport.NewTicketsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testticket",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/GetSubscriptionSupportTicketDetails.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("This is a test - please ignore"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("USA"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Add or Edit VAT, TAX ID, or PO Number"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid/problemClassifications/problemClassification_guid"),
				Require24X7Response:              to.Ptr(false),
				ServiceDisplayName:               to.Ptr("Subscription management"),
				ServiceID:                        to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity: to.Ptr(armsupport.SeverityLevelMinimal),
				Status:   to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{
					EmailAddress: to.Ptr("xyz@contoso.com"),
				},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("118032014183770"),
				Title:           to.Ptr("Test - please ignore"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/GetSubscriptionSupportTicketDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSupportTickets_Update(t *testing.T) {
	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/UpdateContactDetailsOfSupportTicketForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update contact details of a support ticket"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsupport.NewTicketsClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"testticket",
		armsupport.UpdateSupportTicket{
			ContactDetails: &armsupport.UpdateContactProfile{
				AdditionalEmailAddresses: []*string{
					to.Ptr("tname@contoso.com"),
					to.Ptr("teamtest@contoso.com")},
				Country:                  to.Ptr("USA"),
				FirstName:                to.Ptr("first name"),
				LastName:                 to.Ptr("last name"),
				PhoneNumber:              to.Ptr("123-456-7890"),
				PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
				PreferredSupportLanguage: to.Ptr("en-US"),
				PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
				PrimaryEmailAddress:      to.Ptr("test.name@contoso.com"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/UpdateContactDetailsOfSupportTicketForSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("This is a test - please ignore"),
				ContactDetails: &armsupport.ContactProfile{
					AdditionalEmailAddresses: []*string{
						to.Ptr("tname@contoso.com"),
						to.Ptr("teamtest@contoso.com")},
					Country:                  to.Ptr("USA"),
					FirstName:                to.Ptr("first name"),
					LastName:                 to.Ptr("last name"),
					PhoneNumber:              to.Ptr("123-456-7890"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("test.name@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Add or Edit VAT, TAX ID, or PO Number"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid/problemClassifications/problemClassification_guid"),
				Require24X7Response:              to.Ptr(false),
				ServiceDisplayName:               to.Ptr("Subscription management"),
				ServiceID:                        to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity: to.Ptr(armsupport.SeverityLevelCritical),
				Status:   to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{
					EmailAddress: to.Ptr("xyz@contoso.com"),
				},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("118032014183770"),
				Title:           to.Ptr("Test - please ignore"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/UpdateContactDetailsOfSupportTicketForSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/UpdateSeverityOfSupportTicketForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update severity of a support ticket"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"testticket",
		armsupport.UpdateSupportTicket{
			Severity: to.Ptr(armsupport.SeverityLevelCritical),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/UpdateSeverityOfSupportTicketForSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("This is a test - please ignore"),
				ContactDetails: &armsupport.ContactProfile{
					AdditionalEmailAddresses: []*string{
						to.Ptr("tname@contoso.com"),
						to.Ptr("teamtest@contoso.com")},
					Country:                  to.Ptr("USA"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("test.name@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Add or Edit VAT, TAX ID, or PO Number"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid/problemClassifications/problemClassification_guid"),
				Require24X7Response:              to.Ptr(false),
				ServiceDisplayName:               to.Ptr("Subscription management"),
				ServiceID:                        to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity: to.Ptr(armsupport.SeverityLevelCritical),
				Status:   to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{
					EmailAddress: to.Ptr("xyz@contoso.com"),
				},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("118032014183770"),
				Title:           to.Ptr("Test - please ignore"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/UpdateSeverityOfSupportTicketForSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/UpdateStatusOfSupportTicketForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update status of a support ticket"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"testticket",
		armsupport.UpdateSupportTicket{
			Status: to.Ptr(armsupport.StatusClosed),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/UpdateStatusOfSupportTicketForSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("This is a test - please ignore"),
				ContactDetails: &armsupport.ContactProfile{
					AdditionalEmailAddresses: []*string{
						to.Ptr("tname@contoso.com"),
						to.Ptr("teamtest@contoso.com")},
					Country:                  to.Ptr("USA"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("test.name@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Add or Edit VAT, TAX ID, or PO Number"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid/problemClassifications/problemClassification_guid"),
				Require24X7Response:              to.Ptr(false),
				ServiceDisplayName:               to.Ptr("Subscription management"),
				ServiceID:                        to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelCritical),
				Status:          to.Ptr("Closed"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("118032014183770"),
				Title:           to.Ptr("Test - please ignore"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/UpdateStatusOfSupportTicketForSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSupportTickets_Create(t *testing.T) {
	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBillingSupportTicketForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket for Billing related issues"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsupport.NewTicketsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/billing_service_guid/problemClassifications/billing_problemClassification_guid"),
				ServiceID:               to.Ptr("/providers/Microsoft.Support/services/billing_service_guid"),
				Severity:                to.Ptr(armsupport.SeverityLevelModerate),
				Title:                   to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBillingSupportTicketForSubscription.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBillingSupportTicketForSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Refund request"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/billing_service_guid/problemClassifications/billing_problemClassification_guid"),
				Require24X7Response:              to.Ptr(false),
				ServiceDisplayName:               to.Ptr("Billing"),
				ServiceID:                        to.Ptr("/providers/Microsoft.Support/services/billing_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBillingSupportTicketForSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSubMgmtSupportTicketForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket for Subscription Management related issues"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid/problemClassifications/subscription_management_problemClassification_guid"),
				ServiceID:               to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid"),
				Severity:                to.Ptr(armsupport.SeverityLevelModerate),
				Title:                   to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSubMgmtSupportTicketForSubscription.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSubMgmtSupportTicketForSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Transfer ownership of my subscription"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid/problemClassifications/subscription_management_problemClassification_guid"),
				Require24X7Response:              to.Ptr(false),
				ServiceDisplayName:               to.Ptr("Subscription management"),
				ServiceID:                        to.Ptr("/providers/Microsoft.Support/services/subscription_management_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSubMgmtSupportTicketForSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateTechnicalSupportTicketForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket for Technical issue related to a specific resource"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/virtual_machine_running_linux_service_guid/problemClassifications/problemClassification_guid"),
				ServiceID:               to.Ptr("/providers/Microsoft.Support/services/cddd3eb5-1830-b494-44fd-782f691479dc"),
				Severity:                to.Ptr(armsupport.SeverityLevelModerate),
				TechnicalTicketDetails: &armsupport.TechnicalTicketDetails{
					ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/test/providers/Microsoft.Compute/virtualMachines/testserver"),
				},
				Title: to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateTechnicalSupportTicketForSubscription.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateTechnicalSupportTicketForSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Connectivity / Cannot connect to virtual machine by using RDP or SSH"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/virtual_machine_running_linux_service_guid/problemClassifications/problemClassification_guid"),
				Require24X7Response:              to.Ptr(false),
				ServiceDisplayName:               to.Ptr("Virtual Machine running Linux"),
				ServiceID:                        to.Ptr("/providers/Microsoft.Support/services/virtual_machine_running_linux_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				TechnicalTicketDetails: &armsupport.TechnicalTicketDetails{
					ResourceID: to.Ptr("/subscriptions/subid/resourceGroups/test/providers/Microsoft.Compute/virtualMachines/testserver"),
				},
				Title: to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateTechnicalSupportTicketForSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForActiveJobs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket to request Quota increase for Active Jobs and Job Schedules for a Batch account"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Account"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"AccountName\":\"test\",\"NewLimit\":200,\"Type\":\"Jobs\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				ServiceID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  to.Ptr(armsupport.SeverityLevelModerate),
				Title:     to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForActiveJobs.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForActiveJobs.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Batch"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Account"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"AccountName\":\"test\",\"NewLimit\":200,\"Type\":\"Jobs\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				Require24X7Response: to.Ptr(false),
				ServiceDisplayName:  to.Ptr("Service and subscription limits (quotas)"),
				ServiceID:           to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForActiveJobs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlManagedInstanceQuotaTicket.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket to request Quota increase for Azure SQL managed instance"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_managedinstance_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("SQLMI"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"NewLimit\":200, \"Metadata\":null, \"Type\":\"vCore\"}"),
							Region:  to.Ptr("EastUS"),
						},
						{
							Payload: to.Ptr("{\"NewLimit\":200, \"Metadata\":null, \"Type\":\"Subnet\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				ServiceID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  to.Ptr(armsupport.SeverityLevelModerate),
				Title:     to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlManagedInstanceQuotaTicket.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlManagedInstanceQuotaTicket.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("SQL Database Managed Instance"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_datawarehouse_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("SQLMI"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"NewLimit\":200, \"Metadata\":null, \"Type\":\"vCore\"}"),
							Region:  to.Ptr("EastUS"),
						},
						{
							Payload: to.Ptr("{\"NewLimit\":200, \"Metadata\":null, \"Type\":\"Subnet\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				Require24X7Response: to.Ptr(false),
				ServiceDisplayName:  to.Ptr("Service and subscription limits (quotas)"),
				ServiceID:           to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlManagedInstanceQuotaTicket.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket to request Quota increase for Batch accounts for a subscription"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Subscription"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"NewLimit\":200,\"Type\":\"Account\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				ServiceID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  to.Ptr(armsupport.SeverityLevelModerate),
				Title:     to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSubscription.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Batch"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Subscription"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"NewLimit\":200,\"Type\":\"Account\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				Require24X7Response: to.Ptr(false),
				ServiceDisplayName:  to.Ptr("Service and subscription limits (quotas)"),
				ServiceID:           to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateCoresQuotaTicketForSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket to request Quota increase for Compute VM Cores"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/cores_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"SKU\":\"DSv3 Series\",\"NewLimit\":104}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				ServiceID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  to.Ptr(armsupport.SeverityLevelModerate),
				Title:     to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateCoresQuotaTicketForSubscription.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateCoresQuotaTicketForSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Compute-VM (cores-vCPUs) subscription limit increases"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/cores_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"VmFamily\":\"DSv3 Series\",\"NewLimit\":104}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				Require24X7Response: to.Ptr(false),
				ServiceDisplayName:  to.Ptr("Service and subscription limits (quotas)"),
				ServiceID:           to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateCoresQuotaTicketForSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatawarehouseQuotaTicketForDTUs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket to request Quota increase for DTUs for Azure Synapse Analytics"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_datawarehouse_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("DTUs"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"ServerName\":\"testserver\",\"NewLimit\":54000}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				ServiceID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  to.Ptr(armsupport.SeverityLevelModerate),
				Title:     to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatawarehouseQuotaTicketForDTUs.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatawarehouseQuotaTicketForDTUs.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("SQL Data Warehouse"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_datawarehouse_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("DTUs"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"ServerName\":\"testserver\",\"NewLimit\":54000}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				Require24X7Response: to.Ptr(false),
				ServiceDisplayName:  to.Ptr("Service and subscription limits (quotas)"),
				ServiceID:           to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatawarehouseQuotaTicketForDTUs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatabaseQuotaTicketForDTUs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket to request Quota increase for DTUs for SQL Database"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_database_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("DTUs"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"ServerName\":\"testserver\",\"NewLimit\":54000}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				ServiceID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  to.Ptr(armsupport.SeverityLevelModerate),
				Title:     to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatabaseQuotaTicketForDTUs.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatabaseQuotaTicketForDTUs.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("SQL database"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_database_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("DTUs"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"ServerName\":\"testserver\",\"NewLimit\":54000}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				Require24X7Response: to.Ptr(false),
				ServiceDisplayName:  to.Ptr("Service and subscription limits (quotas)"),
				ServiceID:           to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatabaseQuotaTicketForDTUs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateMachineLearningQuotaTicketForLowPriorityCores.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket to request Quota increase for Low-priority cores for Machine Learning service"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/machine_learning_service_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("BatchAml"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"NewLimit\":200,\"Type\":\"LowPriority\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				ServiceID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  to.Ptr(armsupport.SeverityLevelModerate),
				Title:     to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateMachineLearningQuotaTicketForLowPriorityCores.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateMachineLearningQuotaTicketForLowPriorityCores.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Machine Learning service"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/machine_learning_service_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Account"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"NewLimit\":200,\"Type\":\"LowPriority\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				Require24X7Response: to.Ptr(false),
				ServiceDisplayName:  to.Ptr("Service and subscription limits (quotas)"),
				ServiceID:           to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateMachineLearningQuotaTicketForLowPriorityCores.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForLowPriorityCores.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket to request Quota increase for Low-priority cores for a Batch account"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Account"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"AccountName\":\"test\",\"NewLimit\":200,\"Type\":\"LowPriority\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				ServiceID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  to.Ptr(armsupport.SeverityLevelModerate),
				Title:     to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForLowPriorityCores.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForLowPriorityCores.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Batch"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Account"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"AccountName\":\"test\",\"NewLimit\":200,\"Type\":\"LowPriority\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				Require24X7Response: to.Ptr(false),
				ServiceDisplayName:  to.Ptr("Service and subscription limits (quotas)"),
				ServiceID:           to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForLowPriorityCores.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForPools.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket to request Quota increase for Pools for a Batch account"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Account"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"AccountName\":\"test\",\"NewLimit\":200,\"Type\":\"Pools\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				ServiceID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  to.Ptr(armsupport.SeverityLevelModerate),
				Title:     to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForPools.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForPools.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Batch"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Account"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"AccountName\":\"test\",\"NewLimit\":200,\"Type\":\"Pools\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				Require24X7Response: to.Ptr(false),
				ServiceDisplayName:  to.Ptr("Service and subscription limits (quotas)"),
				ServiceID:           to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForPools.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatawarehouseQuotaTicketForServers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket to request Quota increase for Servers for Azure Synapse Analytics"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_datawarehouse_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Servers"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"NewLimit\":200}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				ServiceID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  to.Ptr(armsupport.SeverityLevelModerate),
				Title:     to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatawarehouseQuotaTicketForServers.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatawarehouseQuotaTicketForServers.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("SQL Data Warehouse"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_datawarehouse_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Servers"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"NewLimit\":200}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				Require24X7Response: to.Ptr(false),
				ServiceDisplayName:  to.Ptr("Service and subscription limits (quotas)"),
				ServiceID:           to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatawarehouseQuotaTicketForServers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatabaseQuotaTicketForServers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket to request Quota increase for Servers for SQL Database"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_database_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Servers"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"NewLimit\":200}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				ServiceID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  to.Ptr(armsupport.SeverityLevelModerate),
				Title:     to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatabaseQuotaTicketForServers.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatabaseQuotaTicketForServers.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("SQL database"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_database_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Servers"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"NewLimit\":200}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				Require24X7Response: to.Ptr(false),
				ServiceDisplayName:  to.Ptr("Service and subscription limits (quotas)"),
				ServiceID:           to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSqlDatabaseQuotaTicketForServers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateGenericQuotaTicket.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket to request Quota increase for services that do not require additional details in the quotaTicketDetails object"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("Increase the maximum throughput per container limit to 10000 for account foo bar"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/cosmosdb_problemClassification_guid"),
				ServiceID:               to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:                to.Ptr(armsupport.SeverityLevelModerate),
				Title:                   to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateGenericQuotaTicket.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateGenericQuotaTicket.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("Increase the maximum throughput per container limit to 10000 for account foo bar"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Cosmos DB"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/cosmosdb_problemClassification_guid"),
				Require24X7Response:              to.Ptr(false),
				ServiceDisplayName:               to.Ptr("Service and subscription limits (quotas)"),
				ServiceID:                        to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateGenericQuotaTicket.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateMachineLearningQuotaTicketForDedicatedCores.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket to request Quota increase for specific VM family cores for Machine Learning service"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/machine_learning_service_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("BatchAml"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"VMFamily\":\"standardA0_A7Family\",\"NewLimit\":200,\"Type\":\"Dedicated\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				ServiceID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  to.Ptr(armsupport.SeverityLevelModerate),
				Title:     to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateMachineLearningQuotaTicketForDedicatedCores.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateMachineLearningQuotaTicketForDedicatedCores.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Machine Learning service"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/machine_learning_service_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Account"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"VMFamily\":\"standardA0_A7Family\",\"NewLimit\":200,\"Type\":\"Dedicated\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				Require24X7Response: to.Ptr(false),
				ServiceDisplayName:  to.Ptr("Service and subscription limits (quotas)"),
				ServiceID:           to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateMachineLearningQuotaTicketForDedicatedCores.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForDedicatedCores.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a ticket to request Quota increase for specific VM family cores for a Batch account"},
	})
	client = armsupport.NewTicketsClient("subid", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"testticket",
		armsupport.TicketDetails{
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				ProblemClassificationID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Account"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"AccountName\":\"test\",\"VMFamily\":\"standardA0_A7Family\",\"NewLimit\":200,\"Type\":\"Dedicated\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				ServiceID: to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  to.Ptr(armsupport.SeverityLevelModerate),
				Title:     to.Ptr("my title"),
			},
		},
		&armsupport.TicketsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForDedicatedCores.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForDedicatedCores.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.TicketDetails{
			Name: to.Ptr("testticket"),
			Type: to.Ptr("Microsoft.Support/supportTickets"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket"),
			Properties: &armsupport.TicketDetailsProperties{
				Description: to.Ptr("my description"),
				ContactDetails: &armsupport.ContactProfile{
					Country:                  to.Ptr("usa"),
					FirstName:                to.Ptr("abc"),
					LastName:                 to.Ptr("xyz"),
					PreferredContactMethod:   to.Ptr(armsupport.PreferredContactMethodEmail),
					PreferredSupportLanguage: to.Ptr("en-US"),
					PreferredTimeZone:        to.Ptr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.Ptr("abc@contoso.com"),
				},
				CreatedDate:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				ModifiedDate:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:23Z"); return t }()),
				ProblemClassificationDisplayName: to.Ptr("Batch"),
				ProblemClassificationID:          to.Ptr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &armsupport.QuotaTicketDetails{
					QuotaChangeRequestSubType: to.Ptr("Account"),
					QuotaChangeRequestVersion: to.Ptr("1.0"),
					QuotaChangeRequests: []*armsupport.QuotaChangeRequest{
						{
							Payload: to.Ptr("{\"AccountName\":\"test\",\"VMFamily\":\"standardA0_A7Family\",\"NewLimit\":200,\"Type\":\"Dedicated\"}"),
							Region:  to.Ptr("EastUS"),
						}},
				},
				Require24X7Response: to.Ptr(false),
				ServiceDisplayName:  to.Ptr("Service and subscription limits (quotas)"),
				ServiceID:           to.Ptr("/providers/Microsoft.Support/services/quota_service_guid"),
				ServiceLevelAgreement: &armsupport.ServiceLevelAgreement{
					ExpirationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-21T17:36:18Z"); return t }()),
					SLAMinutes:     to.Ptr[int32](240),
					StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-20T21:36:18Z"); return t }()),
				},
				Severity:        to.Ptr(armsupport.SeverityLevelModerate),
				Status:          to.Ptr("Open"),
				SupportEngineer: &armsupport.Engineer{},
				SupportPlanType: to.Ptr("Premier"),
				SupportTicketID: to.Ptr("119120321001170"),
				Title:           to.Ptr("my title"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TicketDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TicketDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateBatchQuotaTicketForSpecificBatchAccountForDedicatedCores.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommunications_CheckNameAvailability(t *testing.T) {
	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CheckNameAvailabilityForSupportTicketCommunication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Checks whether name is available for Communication resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsupport.NewCommunicationsClient("subid", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"testticket",
		armsupport.CheckNameAvailabilityInput{
			Name: to.Ptr("sampleName"),
			Type: to.Ptr(armsupport.TypeMicrosoftSupportCommunications),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CheckNameAvailabilityForSupportTicketCommunication.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.CheckNameAvailabilityOutput{
			Message:       to.Ptr("Name not available"),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr("Name is already in use"),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CheckNameAvailabilityForSupportTicketCommunication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommunications_List(t *testing.T) {
	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListCommunicationsForSubscriptionSupportTicket.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List communications for a subscription support ticket"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsupport.NewCommunicationsClient("subid", cred, &options)
	pager := client.List("testticket",
		&armsupport.CommunicationsClientListOptions{Top: nil,
			Filter: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListCommunicationsForSubscriptionSupportTicket.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsupport.CommunicationsListResult{
			Value: []*armsupport.CommunicationDetails{
				{
					Name: to.Ptr("testmessage1"),
					Type: to.Ptr("Microsoft.Support/communications"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket/communications/testmessage1"),
					Properties: &armsupport.CommunicationDetailsProperties{
						Body:                   to.Ptr("this is a test message"),
						CommunicationDirection: to.Ptr(armsupport.CommunicationDirectionOutbound),
						CommunicationType:      to.Ptr(armsupport.CommunicationTypeWeb),
						CreatedDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-24T20:18:19Z"); return t }()),
						Sender:                 to.Ptr("user@contoso.com"),
						Subject:                to.Ptr("this is a test message"),
					},
				},
				{
					Name: to.Ptr("testmessage2"),
					Type: to.Ptr("Microsoft.Support/communications"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket/communications/testmessage2"),
					Properties: &armsupport.CommunicationDetailsProperties{
						Body:                   to.Ptr("test"),
						CommunicationDirection: to.Ptr(armsupport.CommunicationDirectionOutbound),
						CommunicationType:      to.Ptr(armsupport.CommunicationTypeWeb),
						CreatedDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-29T10:53:19Z"); return t }()),
						Sender:                 to.Ptr("user@contoso.com"),
						Subject:                to.Ptr("test"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CommunicationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CommunicationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListCommunicationsForSubscriptionSupportTicket.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListWebCommunicationsForSubscriptionSupportTicketCreatedOnOrAfter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List web communication created on or after a specific date for a subscription support ticket"},
	})
	client = armsupport.NewCommunicationsClient("subid", cred, &options)
	pager = client.List("testticket",
		&armsupport.CommunicationsClientListOptions{Top: nil,
			Filter: to.Ptr("communicationType eq 'web' and createdDate ge 2020-03-10T22:08:51Z"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListWebCommunicationsForSubscriptionSupportTicketCreatedOnOrAfter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsupport.CommunicationsListResult{
			Value: []*armsupport.CommunicationDetails{
				{
					Name: to.Ptr("testmessage1"),
					Type: to.Ptr("Microsoft.Support/communications"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket/communications/testmessage1"),
					Properties: &armsupport.CommunicationDetailsProperties{
						Body:                   to.Ptr("this is a test message"),
						CommunicationDirection: to.Ptr(armsupport.CommunicationDirectionOutbound),
						CommunicationType:      to.Ptr(armsupport.CommunicationTypeWeb),
						CreatedDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:18:19Z"); return t }()),
						Sender:                 to.Ptr("user@contoso.com"),
						Subject:                to.Ptr("this is a test message"),
					},
				},
				{
					Name: to.Ptr("testmessage2"),
					Type: to.Ptr("Microsoft.Support/communications"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket/communications/testmessage2"),
					Properties: &armsupport.CommunicationDetailsProperties{
						Body:                   to.Ptr("test"),
						CommunicationDirection: to.Ptr(armsupport.CommunicationDirectionOutbound),
						CommunicationType:      to.Ptr(armsupport.CommunicationTypeWeb),
						CreatedDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T10:53:19Z"); return t }()),
						Sender:                 to.Ptr("user@contoso.com"),
						Subject:                to.Ptr("test"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CommunicationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CommunicationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListWebCommunicationsForSubscriptionSupportTicketCreatedOnOrAfter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListWebCommunicationsForSubscriptionSupportTicket.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List web communications for a subscription support ticket"},
	})
	client = armsupport.NewCommunicationsClient("subid", cred, &options)
	pager = client.List("testticket",
		&armsupport.CommunicationsClientListOptions{Top: nil,
			Filter: to.Ptr("communicationType eq 'web'"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListWebCommunicationsForSubscriptionSupportTicket.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsupport.CommunicationsListResult{
			Value: []*armsupport.CommunicationDetails{
				{
					Name: to.Ptr("testmessage1"),
					Type: to.Ptr("Microsoft.Support/communications"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket/communications/testmessage1"),
					Properties: &armsupport.CommunicationDetailsProperties{
						Body:                   to.Ptr("this is a test message"),
						CommunicationDirection: to.Ptr(armsupport.CommunicationDirectionOutbound),
						CommunicationType:      to.Ptr(armsupport.CommunicationTypeWeb),
						CreatedDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-10T20:18:19Z"); return t }()),
						Sender:                 to.Ptr("user@contoso.com"),
						Subject:                to.Ptr("this is a test message"),
					},
				},
				{
					Name: to.Ptr("testmessage2"),
					Type: to.Ptr("Microsoft.Support/communications"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket/communications/testmessage2"),
					Properties: &armsupport.CommunicationDetailsProperties{
						Body:                   to.Ptr("test"),
						CommunicationDirection: to.Ptr(armsupport.CommunicationDirectionOutbound),
						CommunicationType:      to.Ptr(armsupport.CommunicationTypeWeb),
						CreatedDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T10:53:19Z"); return t }()),
						Sender:                 to.Ptr("user@contoso.com"),
						Subject:                to.Ptr("test"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CommunicationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CommunicationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/ListWebCommunicationsForSubscriptionSupportTicket.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommunications_Get(t *testing.T) {
	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/GetCommunicationDetailsForSubscriptionSupportTicket.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get communication details for a subscription support ticket"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsupport.NewCommunicationsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"testticket",
		"testmessage",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/GetCommunicationDetailsForSubscriptionSupportTicket.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.CommunicationDetails{
			Name: to.Ptr("testmessage"),
			Type: to.Ptr("Microsoft.Support/communications"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket/communications/testmessage"),
			Properties: &armsupport.CommunicationDetailsProperties{
				Body:                   to.Ptr("this is a test message"),
				CommunicationDirection: to.Ptr(armsupport.CommunicationDirectionOutbound),
				CommunicationType:      to.Ptr(armsupport.CommunicationTypeWeb),
				CreatedDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-10T20:18:19Z"); return t }()),
				Sender:                 to.Ptr("user@contoso.com"),
				Subject:                to.Ptr("this is a test message"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CommunicationDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CommunicationDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/GetCommunicationDetailsForSubscriptionSupportTicket.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCommunications_Create(t *testing.T) {
	// From example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSupportTicketCommunication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AddCommunicationToSubscriptionTicket"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsupport.NewCommunicationsClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"testticket",
		"testcommunication",
		armsupport.CommunicationDetails{
			Properties: &armsupport.CommunicationDetailsProperties{
				Body:    to.Ptr("This is a test message from a customer!"),
				Sender:  to.Ptr("user@contoso.com"),
				Subject: to.Ptr("This is a test message from a customer!"),
			},
		},
		&armsupport.CommunicationsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSupportTicketCommunication.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSupportTicketCommunication.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsupport.CommunicationDetails{
			Name: to.Ptr("testcommunication"),
			Type: to.Ptr("Microsoft.Support/communications"),
			ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Support/supportTickets/testticket/communications/testcommunication"),
			Properties: &armsupport.CommunicationDetailsProperties{
				Body:                   to.Ptr("This is a test message from a customer!"),
				CommunicationDirection: to.Ptr(armsupport.CommunicationDirectionOutbound),
				CommunicationType:      to.Ptr(armsupport.CommunicationTypeWeb),
				CreatedDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-10T20:18:19Z"); return t }()),
				Sender:                 to.Ptr("user@contoso.com"),
				Subject:                to.Ptr("This is a test message from a customer!"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CommunicationDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CommunicationDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/support/resource-manager/Microsoft.Support/stable/2020-04-01/examples/CreateSupportTicketCommunication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
