//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsupport

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example Get all operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	_, err := client.List(ctx,
		&OperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServices_List(t *testing.T) {
	// From example Gets list of services for which a support ticket can be created
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con)
	_, err := client.List(ctx,
		&ServicesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestServices_Get(t *testing.T) {
	// From example Gets details of the Azure service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewServicesClient(con)
	res, err := client.Get(ctx,
		"service_guid",
		&ServicesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Service.ID == nil {
		t.Fatal("Service.ID should not be nil!")
	}
}

func TestProblemClassifications_List(t *testing.T) {
	// From example Gets list of problemClassifications for a service for which a support ticket can be created
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProblemClassificationsClient(con)
	_, err := client.List(ctx,
		"service_guid",
		&ProblemClassificationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestProblemClassifications_Get(t *testing.T) {
	// From example Gets details of problemClassification for Azure service
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProblemClassificationsClient(con)
	res, err := client.Get(ctx,
		"service_guid",
		"problemClassification_guid",
		&ProblemClassificationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ProblemClassification.ID == nil {
		t.Fatal("ProblemClassification.ID should not be nil!")
	}
}

func TestSupportTickets_CheckNameAvailability(t *testing.T) {
	// From example Checks whether name is available for SupportTicket resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSupportTicketsClient(con,
		"subid")
	_, err := client.CheckNameAvailability(ctx,
		CheckNameAvailabilityInput{
			Name: to.StringPtr("sampleName"),
			Type: TypeMicrosoftSupportSupportTickets.ToPtr(),
		},
		&SupportTicketsCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSupportTickets_List(t *testing.T) {
	// From example List support tickets created on or after a certain date and in open state for a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSupportTicketsClient(con,
		"subid")
	pager := client.List(&SupportTicketsListOptions{Filter: to.StringPtr("createdDate ge 2020-03-10T22:08:51Z and status eq 'Open'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SupportTicketDetails.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SupportTicketDetails.ID should not be nil!")
			}
		}
	}

	// From example List support tickets for a subscription
	pager = client.List(&SupportTicketsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SupportTicketDetails.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SupportTicketDetails.ID should not be nil!")
			}
		}
	}

	// From example List support tickets in open state for a subscription
	pager = client.List(&SupportTicketsListOptions{Filter: to.StringPtr("status eq 'Open'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SupportTicketDetails.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SupportTicketDetails.ID should not be nil!")
			}
		}
	}
}

func TestSupportTickets_Get(t *testing.T) {
	// From example Get details of a subscription ticket
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSupportTicketsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testticket",
		&SupportTicketsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}
}

func TestSupportTickets_Update(t *testing.T) {
	// From example Update contact details of a support ticket
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSupportTicketsClient(con,
		"subid")
	res, err := client.Update(ctx,
		"testticket",
		UpdateSupportTicket{
			ContactDetails: &UpdateContactProfile{
				AdditionalEmailAddresses: []*string{
					to.StringPtr("tname@contoso.com"),
					to.StringPtr("teamtest@contoso.com")},
				Country:                  to.StringPtr("USA"),
				FirstName:                to.StringPtr("first name"),
				LastName:                 to.StringPtr("last name"),
				PhoneNumber:              to.StringPtr("123-456-7890"),
				PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
				PreferredSupportLanguage: to.StringPtr("en-US"),
				PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
				PrimaryEmailAddress:      to.StringPtr("test.name@contoso.com"),
			},
		},
		&SupportTicketsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Update severity of a support ticket
	res, err = client.Update(ctx,
		"testticket",
		UpdateSupportTicket{
			Severity: SeverityLevelCritical.ToPtr(),
		},
		&SupportTicketsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Update status of a support ticket
	res, err = client.Update(ctx,
		"testticket",
		UpdateSupportTicket{
			Status: StatusClosed.ToPtr(),
		},
		&SupportTicketsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}
}

func TestSupportTickets_Create(t *testing.T) {
	// From example Create a ticket for Billing related issues
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSupportTicketsClient(con,
		"subid")
	poller, err := client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/billing_service_guid/problemClassifications/billing_problemClassification_guid"),
				ServiceID:               to.StringPtr("/providers/Microsoft.Support/services/billing_service_guid"),
				Severity:                SeverityLevelModerate.ToPtr(),
				Title:                   to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket for Subscription Management related issues
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/subscription_management_service_guid/problemClassifications/subscription_management_problemClassification_guid"),
				ServiceID:               to.StringPtr("/providers/Microsoft.Support/services/subscription_management_service_guid"),
				Severity:                SeverityLevelModerate.ToPtr(),
				Title:                   to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket for Technical issue related to a specific resource
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/virtual_machine_running_linux_service_guid/problemClassifications/problemClassification_guid"),
				ServiceID:               to.StringPtr("/providers/Microsoft.Support/services/cddd3eb5-1830-b494-44fd-782f691479dc"),
				Severity:                SeverityLevelModerate.ToPtr(),
				TechnicalTicketDetails: &TechnicalTicketDetails{
					ResourceID: to.StringPtr("/subscriptions/subid/resourceGroups/test/providers/Microsoft.Compute/virtualMachines/testserver"),
				},
				Title: to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket to request Quota increase for Active Jobs and Job Schedules for a Batch account
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &QuotaTicketDetails{
					QuotaChangeRequestSubType: to.StringPtr("Account"),
					QuotaChangeRequestVersion: to.StringPtr("1.0"),
					QuotaChangeRequests: []*QuotaChangeRequest{
						{
							Payload: to.StringPtr("{\"AccountName\":\"test\",\"NewLimit\":200,\"Type\":\"Jobs\"}"),
							Region:  to.StringPtr("EastUS"),
						}},
				},
				ServiceID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  SeverityLevelModerate.ToPtr(),
				Title:     to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket to request Quota increase for Azure SQL managed instance
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_managedinstance_problemClassification_guid"),
				QuotaTicketDetails: &QuotaTicketDetails{
					QuotaChangeRequestSubType: to.StringPtr("SQLMI"),
					QuotaChangeRequestVersion: to.StringPtr("1.0"),
					QuotaChangeRequests: []*QuotaChangeRequest{
						{
							Payload: to.StringPtr("{\"NewLimit\":200, \"Metadata\":null, \"Type\":\"vCore\"}"),
							Region:  to.StringPtr("EastUS"),
						},
						{
							Payload: to.StringPtr("{\"NewLimit\":200, \"Metadata\":null, \"Type\":\"Subnet\"}"),
							Region:  to.StringPtr("EastUS"),
						}},
				},
				ServiceID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  SeverityLevelModerate.ToPtr(),
				Title:     to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket to request Quota increase for Batch accounts for a subscription
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &QuotaTicketDetails{
					QuotaChangeRequestSubType: to.StringPtr("Subscription"),
					QuotaChangeRequestVersion: to.StringPtr("1.0"),
					QuotaChangeRequests: []*QuotaChangeRequest{
						{
							Payload: to.StringPtr("{\"NewLimit\":200,\"Type\":\"Account\"}"),
							Region:  to.StringPtr("EastUS"),
						}},
				},
				ServiceID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  SeverityLevelModerate.ToPtr(),
				Title:     to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket to request Quota increase for Compute VM Cores
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/cores_problemClassification_guid"),
				QuotaTicketDetails: &QuotaTicketDetails{
					QuotaChangeRequestVersion: to.StringPtr("1.0"),
					QuotaChangeRequests: []*QuotaChangeRequest{
						{
							Payload: to.StringPtr("{\"SKU\":\"DSv3 Series\",\"NewLimit\":104}"),
							Region:  to.StringPtr("EastUS"),
						}},
				},
				ServiceID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  SeverityLevelModerate.ToPtr(),
				Title:     to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket to request Quota increase for DTUs for Azure Synapse Analytics
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_datawarehouse_problemClassification_guid"),
				QuotaTicketDetails: &QuotaTicketDetails{
					QuotaChangeRequestSubType: to.StringPtr("DTUs"),
					QuotaChangeRequestVersion: to.StringPtr("1.0"),
					QuotaChangeRequests: []*QuotaChangeRequest{
						{
							Payload: to.StringPtr("{\"ServerName\":\"testserver\",\"NewLimit\":54000}"),
							Region:  to.StringPtr("EastUS"),
						}},
				},
				ServiceID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  SeverityLevelModerate.ToPtr(),
				Title:     to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket to request Quota increase for DTUs for SQL Database
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_database_problemClassification_guid"),
				QuotaTicketDetails: &QuotaTicketDetails{
					QuotaChangeRequestSubType: to.StringPtr("DTUs"),
					QuotaChangeRequestVersion: to.StringPtr("1.0"),
					QuotaChangeRequests: []*QuotaChangeRequest{
						{
							Payload: to.StringPtr("{\"ServerName\":\"testserver\",\"NewLimit\":54000}"),
							Region:  to.StringPtr("EastUS"),
						}},
				},
				ServiceID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  SeverityLevelModerate.ToPtr(),
				Title:     to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket to request Quota increase for Low-priority cores for Machine Learning service
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/machine_learning_service_problemClassification_guid"),
				QuotaTicketDetails: &QuotaTicketDetails{
					QuotaChangeRequestSubType: to.StringPtr("BatchAml"),
					QuotaChangeRequestVersion: to.StringPtr("1.0"),
					QuotaChangeRequests: []*QuotaChangeRequest{
						{
							Payload: to.StringPtr("{\"NewLimit\":200,\"Type\":\"LowPriority\"}"),
							Region:  to.StringPtr("EastUS"),
						}},
				},
				ServiceID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  SeverityLevelModerate.ToPtr(),
				Title:     to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket to request Quota increase for Low-priority cores for a Batch account
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &QuotaTicketDetails{
					QuotaChangeRequestSubType: to.StringPtr("Account"),
					QuotaChangeRequestVersion: to.StringPtr("1.0"),
					QuotaChangeRequests: []*QuotaChangeRequest{
						{
							Payload: to.StringPtr("{\"AccountName\":\"test\",\"NewLimit\":200,\"Type\":\"LowPriority\"}"),
							Region:  to.StringPtr("EastUS"),
						}},
				},
				ServiceID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  SeverityLevelModerate.ToPtr(),
				Title:     to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket to request Quota increase for Pools for a Batch account
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &QuotaTicketDetails{
					QuotaChangeRequestSubType: to.StringPtr("Account"),
					QuotaChangeRequestVersion: to.StringPtr("1.0"),
					QuotaChangeRequests: []*QuotaChangeRequest{
						{
							Payload: to.StringPtr("{\"AccountName\":\"test\",\"NewLimit\":200,\"Type\":\"Pools\"}"),
							Region:  to.StringPtr("EastUS"),
						}},
				},
				ServiceID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  SeverityLevelModerate.ToPtr(),
				Title:     to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket to request Quota increase for Servers for Azure Synapse Analytics
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_datawarehouse_problemClassification_guid"),
				QuotaTicketDetails: &QuotaTicketDetails{
					QuotaChangeRequestSubType: to.StringPtr("Servers"),
					QuotaChangeRequestVersion: to.StringPtr("1.0"),
					QuotaChangeRequests: []*QuotaChangeRequest{
						{
							Payload: to.StringPtr("{\"NewLimit\":200}"),
							Region:  to.StringPtr("EastUS"),
						}},
				},
				ServiceID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  SeverityLevelModerate.ToPtr(),
				Title:     to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket to request Quota increase for Servers for SQL Database
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_database_problemClassification_guid"),
				QuotaTicketDetails: &QuotaTicketDetails{
					QuotaChangeRequestSubType: to.StringPtr("Servers"),
					QuotaChangeRequestVersion: to.StringPtr("1.0"),
					QuotaChangeRequests: []*QuotaChangeRequest{
						{
							Payload: to.StringPtr("{\"NewLimit\":200}"),
							Region:  to.StringPtr("EastUS"),
						}},
				},
				ServiceID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  SeverityLevelModerate.ToPtr(),
				Title:     to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket to request Quota increase for services that do not require additional details in the quotaTicketDetails object
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("Increase the maximum throughput per container limit to 10000 for account foo bar"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/cosmosdb_problemClassification_guid"),
				ServiceID:               to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:                SeverityLevelModerate.ToPtr(),
				Title:                   to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket to request Quota increase for specific VM family cores for Machine Learning service
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/machine_learning_service_problemClassification_guid"),
				QuotaTicketDetails: &QuotaTicketDetails{
					QuotaChangeRequestSubType: to.StringPtr("BatchAml"),
					QuotaChangeRequestVersion: to.StringPtr("1.0"),
					QuotaChangeRequests: []*QuotaChangeRequest{
						{
							Payload: to.StringPtr("{\"VMFamily\":\"standardA0_A7Family\",\"NewLimit\":200,\"Type\":\"Dedicated\"}"),
							Region:  to.StringPtr("EastUS"),
						}},
				},
				ServiceID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  SeverityLevelModerate.ToPtr(),
				Title:     to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}

	// From example Create a ticket to request Quota increase for specific VM family cores for a Batch account
	poller, err = client.BeginCreate(ctx,
		"testticket",
		SupportTicketDetails{
			Properties: &SupportTicketDetailsProperties{
				Description: to.StringPtr("my description"),
				ContactDetails: &ContactProfile{
					Country:                  to.StringPtr("usa"),
					FirstName:                to.StringPtr("abc"),
					LastName:                 to.StringPtr("xyz"),
					PreferredContactMethod:   PreferredContactMethodEmail.ToPtr(),
					PreferredSupportLanguage: to.StringPtr("en-US"),
					PreferredTimeZone:        to.StringPtr("Pacific Standard Time"),
					PrimaryEmailAddress:      to.StringPtr("abc@contoso.com"),
				},
				ProblemClassificationID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"),
				QuotaTicketDetails: &QuotaTicketDetails{
					QuotaChangeRequestSubType: to.StringPtr("Account"),
					QuotaChangeRequestVersion: to.StringPtr("1.0"),
					QuotaChangeRequests: []*QuotaChangeRequest{
						{
							Payload: to.StringPtr("{\"AccountName\":\"test\",\"VMFamily\":\"standardA0_A7Family\",\"NewLimit\":200,\"Type\":\"Dedicated\"}"),
							Region:  to.StringPtr("EastUS"),
						}},
				},
				ServiceID: to.StringPtr("/providers/Microsoft.Support/services/quota_service_guid"),
				Severity:  SeverityLevelModerate.ToPtr(),
				Title:     to.StringPtr("my title"),
			},
		},
		&SupportTicketsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SupportTicketDetails.ID == nil {
		t.Fatal("SupportTicketDetails.ID should not be nil!")
	}
}

func TestCommunications_CheckNameAvailability(t *testing.T) {
	// From example Checks whether name is available for Communication resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCommunicationsClient(con,
		"subid")
	_, err := client.CheckNameAvailability(ctx,
		"testticket",
		CheckNameAvailabilityInput{
			Name: to.StringPtr("sampleName"),
			Type: TypeMicrosoftSupportCommunications.ToPtr(),
		},
		&CommunicationsCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCommunications_List(t *testing.T) {
	// From example List communications for a subscription support ticket
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCommunicationsClient(con,
		"subid")
	pager := client.List("testticket",
		&CommunicationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CommunicationDetails.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CommunicationDetails.ID should not be nil!")
			}
		}
	}

	// From example List web communication created on or after a specific date for a subscription support ticket
	pager = client.List("testticket",
		&CommunicationsListOptions{Filter: to.StringPtr("communicationType eq 'web' and createdDate ge 2020-03-10T22:08:51Z")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CommunicationDetails.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CommunicationDetails.ID should not be nil!")
			}
		}
	}

	// From example List web communications for a subscription support ticket
	pager = client.List("testticket",
		&CommunicationsListOptions{Filter: to.StringPtr("communicationType eq 'web'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CommunicationDetails.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CommunicationDetails.ID should not be nil!")
			}
		}
	}
}

func TestCommunications_Get(t *testing.T) {
	// From example Get communication details for a subscription support ticket
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCommunicationsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"testticket",
		"testmessage",
		&CommunicationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CommunicationDetails.ID == nil {
		t.Fatal("CommunicationDetails.ID should not be nil!")
	}
}

func TestCommunications_Create(t *testing.T) {
	// From example AddCommunicationToSubscriptionTicket
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCommunicationsClient(con,
		"subid")
	poller, err := client.BeginCreate(ctx,
		"testticket",
		"testcommunication",
		CommunicationDetails{
			Properties: &CommunicationDetailsProperties{
				Body:    to.StringPtr("This is a test message from a customer!"),
				Sender:  to.StringPtr("user@contoso.com"),
				Subject: to.StringPtr("This is a test message from a customer!"),
			},
		},
		&CommunicationsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.CommunicationDetails.ID == nil {
		t.Fatal("CommunicationDetails.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
