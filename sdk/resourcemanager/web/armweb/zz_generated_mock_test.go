//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armweb

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestAppServiceCertificateOrders_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_ValidatePurchaseInformation(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_ListByResourceGroup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_CreateOrUpdate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_ListCertificates(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_GetCertificate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_CreateOrUpdateCertificate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_DeleteCertificate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_UpdateCertificate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_Reissue(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_Renew(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_ResendEmail(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_ResendRequestEmails(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_RetrieveSiteSeal(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_VerifyDomainOwnership(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_RetrieveCertificateActions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceCertificateOrders_RetrieveCertificateEmailHistory(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestCertificateOrdersDiagnostics_ListAppServiceCertificateOrderDetectorResponse(t *testing.T) {
	// From example List app service certificate detector response
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateOrdersDiagnosticsClient(con,
		"5700fc96-77b4-4f8d-afce-c353d8c443bd")
	pager := client.ListAppServiceCertificateOrderDetectorResponse("Sample-WestUSResourceGroup",
		"SampleCertificateOrderName",
		&CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DetectorResponse.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DetectorResponse.ID should not be nil!")
			}
		}
	}
}

func TestCertificateOrdersDiagnostics_GetAppServiceCertificateOrderDetectorResponse(t *testing.T) {
	// From example Get app service certificate order detector response
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateOrdersDiagnosticsClient(con,
		"5700fc96-77b4-4f8d-afce-c353d8c443bd")
	res, err := client.GetAppServiceCertificateOrderDetectorResponse(ctx,
		"Sample-WestUSResourceGroup",
		"SampleCertificateOrderName",
		"AutoRenewStatus",
		&CertificateOrdersDiagnosticsGetAppServiceCertificateOrderDetectorResponseOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DetectorResponse.ID == nil {
		t.Fatal("DetectorResponse.ID should not be nil!")
	}
}

func TestCertificateRegistrationProvider_ListOperations(t *testing.T) {
	// From example List operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificateRegistrationProviderClient(con)
	pager := client.ListOperations(&CertificateRegistrationProviderListOperationsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestDomains_CheckAvailability(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_GetControlCenterSsoRequest(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_ListRecommendations(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_ListByResourceGroup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_CreateOrUpdate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_ListOwnershipIdentifiers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_GetOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_CreateOrUpdateOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_DeleteOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_UpdateOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDomains_Renew(t *testing.T) {
	// From example Renew an existing domain
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainsClient(con,
		"3dddfa4f-cedf-4dc0-ba29-b6d1a69ab545")
	_, err := client.Renew(ctx,
		"RG",
		"example.com",
		&DomainsRenewOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTopLevelDomains_List(t *testing.T) {
	// From example List Top Level Domains
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopLevelDomainsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List(&TopLevelDomainsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("TopLevelDomain.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("TopLevelDomain.ID should not be nil!")
			}
		}
	}
}

func TestTopLevelDomains_Get(t *testing.T) {
	// From example Get Top Level Domain
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopLevelDomainsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"com",
		&TopLevelDomainsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TopLevelDomain.ID == nil {
		t.Fatal("TopLevelDomain.ID should not be nil!")
	}
}

func TestTopLevelDomains_ListAgreements(t *testing.T) {
	// From example List Top Level Domain Agreements
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTopLevelDomainsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListAgreements("in",
		TopLevelDomainAgreementOption{
			ForTransfer:    to.BoolPtr(false),
			IncludePrivacy: to.BoolPtr(true),
		},
		&TopLevelDomainsListAgreementsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestDomainRegistrationProvider_ListOperations(t *testing.T) {
	// From example List operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDomainRegistrationProviderClient(con)
	pager := client.ListOperations(&DomainRegistrationProviderListOperationsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestAppServiceEnvironments_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListByResourceGroup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_CreateOrUpdate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListCapacities(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetVipInfo(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ChangeVnet(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetAseV3NetworkingConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_UpdateAseNetworkingConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListDiagnostics(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetDiagnosticsItem(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetInboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example Get Inbound Network Dependencies Endpoints
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppServiceEnvironmentsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.GetInboundNetworkDependenciesEndpoints("Sample-WestUSResourceGroup",
		"SampleAse",
		&AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestAppServiceEnvironments_ListMultiRolePools(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetMultiRolePool(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_CreateOrUpdateMultiRolePool(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_UpdateMultiRolePool(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListMultiRoleMetricDefinitions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListMultiRolePoolSkus(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListMultiRoleUsages(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListOperations(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetOutboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example Get Outbound Network Dependencies Endpoints
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppServiceEnvironmentsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.GetOutboundNetworkDependenciesEndpoints("Sample-WestUSResourceGroup",
		"SampleAse",
		&AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestAppServiceEnvironments_GetPrivateEndpointConnectionList(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetPrivateEndpointConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ApproveOrRejectPrivateEndpointConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_DeletePrivateEndpointConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetPrivateLinkResources(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_Reboot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_Resume(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListAppServicePlans(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListWebApps(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_Suspend(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListUsages(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListWorkerPools(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_GetWorkerPool(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_CreateOrUpdateWorkerPool(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_UpdateWorkerPool(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListWorkerPoolInstanceMetricDefinitions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListWebWorkerMetricDefinitions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListWorkerPoolSkus(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServiceEnvironments_ListWebWorkerUsages(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_List(t *testing.T) {
	// From example List App Service plans
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppServicePlansClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List(&AppServicePlansListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AppServicePlan.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AppServicePlan.ID should not be nil!")
			}
		}
	}
}

func TestAppServicePlans_ListByResourceGroup(t *testing.T) {
	// From example List App Service plans by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppServicePlansClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByResourceGroup("testrg123",
		&AppServicePlansListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AppServicePlan.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AppServicePlan.ID should not be nil!")
			}
		}
	}
}

func TestAppServicePlans_Get(t *testing.T) {
	// From example Get App Service plan
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppServicePlansClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testrg123",
		"testsf6141",
		&AppServicePlansGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AppServicePlan.ID == nil {
		t.Fatal("AppServicePlan.ID should not be nil!")
	}
}

func TestAppServicePlans_CreateOrUpdate(t *testing.T) {
	// From example Create Or Update App Service plan
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppServicePlansClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"testrg123",
		"testsf6141",
		AppServicePlan{
			Resource: Resource{
				Kind:     to.StringPtr("app"),
				Location: to.StringPtr("East US"),
			},
			Properties: &AppServicePlanProperties{},
			SKU: &SKUDescription{
				Name:     to.StringPtr("P1"),
				Capacity: to.Int32Ptr(1),
				Family:   to.StringPtr("P"),
				Size:     to.StringPtr("P1"),
				Tier:     to.StringPtr("Premium"),
			},
		},
		&AppServicePlansBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AppServicePlan.ID == nil {
		t.Fatal("AppServicePlan.ID should not be nil!")
	}
}

func TestAppServicePlans_Delete(t *testing.T) {
	// From example Delete App Service plan
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppServicePlansClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"testrg123",
		"testsf6141",
		&AppServicePlansDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAppServicePlans_Update(t *testing.T) {
	// From example Patch Service plan
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAppServicePlansClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Update(ctx,
		"testrg123",
		"testsf6141",
		AppServicePlanPatchResource{
			ProxyOnlyResource: ProxyOnlyResource{
				Kind: to.StringPtr("app"),
			},
			Properties: &AppServicePlanPatchResourceProperties{},
		},
		&AppServicePlansUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AppServicePlan.ID == nil {
		t.Fatal("AppServicePlan.ID should not be nil!")
	}
}

func TestAppServicePlans_ListCapabilities(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_GetHybridConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_DeleteHybridConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_ListHybridConnectionKeys(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_ListWebAppsByHybridConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_GetHybridConnectionPlanLimit(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_ListHybridConnections(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_RestartWebApps(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_ListWebApps(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_GetServerFarmSkus(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_ListUsages(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_ListVnets(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_GetVnetFromServerFarm(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_GetVnetGateway(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_UpdateVnetGateway(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_ListRoutesForVnet(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_GetRouteForVnet(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_CreateOrUpdateVnetRoute(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_DeleteVnetRoute(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_UpdateVnetRoute(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAppServicePlans_RebootWorker(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestCertificates_List(t *testing.T) {
	// From example List Certificates for subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List(&CertificatesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Certificate.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Certificate.ID should not be nil!")
			}
		}
	}
}

func TestCertificates_ListByResourceGroup(t *testing.T) {
	// From example List Certificates by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByResourceGroup("testrg123",
		&CertificatesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Certificate.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Certificate.ID should not be nil!")
			}
		}
	}
}

func TestCertificates_Get(t *testing.T) {
	// From example Get Certificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Get(ctx,
		"testrg123",
		"testc6282",
		&CertificatesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Certificate.ID == nil {
		t.Fatal("Certificate.ID should not be nil!")
	}
}

func TestCertificates_CreateOrUpdate(t *testing.T) {
	// From example Create Or Update Certificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdate(ctx,
		"testrg123",
		"testc6282",
		Certificate{
			Resource: Resource{
				Location: to.StringPtr("East US"),
			},
			Properties: &CertificateProperties{
				HostNames: []*string{
					to.StringPtr("ServerCert")},
				Password: to.StringPtr("<password>"),
			},
		},
		&CertificatesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Certificate.ID == nil {
		t.Fatal("Certificate.ID should not be nil!")
	}
}

func TestCertificates_Delete(t *testing.T) {
	// From example Delete Certificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.Delete(ctx,
		"testrg123",
		"testc6282",
		&CertificatesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestCertificates_Update(t *testing.T) {
	// From example Patch Certificate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCertificatesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Update(ctx,
		"testrg123",
		"testc6282",
		CertificatePatchResource{
			Properties: &CertificatePatchResourceProperties{
				Password: to.StringPtr("<password>"),
			},
		},
		&CertificatesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Certificate.ID == nil {
		t.Fatal("Certificate.ID should not be nil!")
	}
}

func TestDeletedWebApps_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeletedWebApps_ListByLocation(t *testing.T) {
	// From example List Deleted Web App by Location
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeletedWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListByLocation("West US 2",
		&DeletedWebAppsListByLocationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DeletedSite.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DeletedSite.ID should not be nil!")
			}
		}
	}
}

func TestDeletedWebApps_GetDeletedWebAppByLocation(t *testing.T) {
	// From example Get Deleted Web App by Location
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeletedWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetDeletedWebAppByLocation(ctx,
		"West US 2",
		"9",
		&DeletedWebAppsGetDeletedWebAppByLocationOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DeletedSite.ID == nil {
		t.Fatal("DeletedSite.ID should not be nil!")
	}
}

func TestDiagnostics_ListHostingEnvironmentDetectorResponses(t *testing.T) {
	// From example Get App Service Environment Detector Responses
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListHostingEnvironmentDetectorResponses("Sample-WestUSResourceGroup",
		"SampleAppServiceEnvironment",
		&DiagnosticsListHostingEnvironmentDetectorResponsesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DetectorResponse.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DetectorResponse.ID should not be nil!")
			}
		}
	}
}

func TestDiagnostics_GetHostingEnvironmentDetectorResponse(t *testing.T) {
	// From example Get App Service Environment Detector Responses
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetHostingEnvironmentDetectorResponse(ctx,
		"Sample-WestUSResourceGroup",
		"SampleAppServiceEnvironment",
		"runtimeavailability",
		&DiagnosticsGetHostingEnvironmentDetectorResponseOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DetectorResponse.ID == nil {
		t.Fatal("DetectorResponse.ID should not be nil!")
	}
}

func TestDiagnostics_ListSiteDetectorResponses(t *testing.T) {
	// From example Get App Detector Responses
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListSiteDetectorResponses("Sample-WestUSResourceGroup",
		"SampleApp",
		&DiagnosticsListSiteDetectorResponsesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DetectorResponse.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DetectorResponse.ID should not be nil!")
			}
		}
	}

	// From example Get App Slot Detector Responses
	pager = client.ListSiteDetectorResponses("Sample-WestUSResourceGroup",
		"SampleApp",
		&DiagnosticsListSiteDetectorResponsesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DetectorResponse.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DetectorResponse.ID should not be nil!")
			}
		}
	}
}

func TestDiagnostics_GetSiteDetectorResponse(t *testing.T) {
	// From example Get App Detector Response
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetSiteDetectorResponse(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"runtimeavailability",
		&DiagnosticsGetSiteDetectorResponseOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DetectorResponse.ID == nil {
		t.Fatal("DetectorResponse.ID should not be nil!")
	}

	// From example Get App Slot Detector Response
	res, err = client.GetSiteDetectorResponse(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"runtimeavailability",
		&DiagnosticsGetSiteDetectorResponseOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DetectorResponse.ID == nil {
		t.Fatal("DetectorResponse.ID should not be nil!")
	}
}

func TestDiagnostics_ListSiteDiagnosticCategories(t *testing.T) {
	// From example List App Diagnostic Categories
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListSiteDiagnosticCategories("Sample-WestUSResourceGroup",
		"SampleApp",
		&DiagnosticsListSiteDiagnosticCategoriesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DiagnosticCategory.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DiagnosticCategory.ID should not be nil!")
			}
		}
	}

	// From example List App Slot Diagnostic Categories
	pager = client.ListSiteDiagnosticCategories("Sample-WestUSResourceGroup",
		"SampleApp",
		&DiagnosticsListSiteDiagnosticCategoriesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DiagnosticCategory.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DiagnosticCategory.ID should not be nil!")
			}
		}
	}
}

func TestDiagnostics_GetSiteDiagnosticCategory(t *testing.T) {
	// From example Get App Diagnostic Category
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetSiteDiagnosticCategory(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		&DiagnosticsGetSiteDiagnosticCategoryOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticCategory.ID == nil {
		t.Fatal("DiagnosticCategory.ID should not be nil!")
	}

	// From example Get App Slot Diagnostic Category
	res, err = client.GetSiteDiagnosticCategory(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		&DiagnosticsGetSiteDiagnosticCategoryOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticCategory.ID == nil {
		t.Fatal("DiagnosticCategory.ID should not be nil!")
	}
}

func TestDiagnostics_ListSiteAnalyses(t *testing.T) {
	// From example List App Analyses
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListSiteAnalyses("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		&DiagnosticsListSiteAnalysesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AnalysisDefinition.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AnalysisDefinition.ID should not be nil!")
			}
		}
	}

	// From example List App Slot Analyses
	pager = client.ListSiteAnalyses("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		&DiagnosticsListSiteAnalysesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AnalysisDefinition.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AnalysisDefinition.ID should not be nil!")
			}
		}
	}
}

func TestDiagnostics_GetSiteAnalysis(t *testing.T) {
	// From example Get App Analysis
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetSiteAnalysis(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"appanalysis",
		&DiagnosticsGetSiteAnalysisOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AnalysisDefinition.ID == nil {
		t.Fatal("AnalysisDefinition.ID should not be nil!")
	}

	// From example Get App Slot Analysis
	res, err = client.GetSiteAnalysis(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"appanalysis",
		&DiagnosticsGetSiteAnalysisOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AnalysisDefinition.ID == nil {
		t.Fatal("AnalysisDefinition.ID should not be nil!")
	}
}

func TestDiagnostics_ExecuteSiteAnalysis(t *testing.T) {
	// From example Execute site analysis
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.ExecuteSiteAnalysis(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"apprestartanalyses",
		&DiagnosticsExecuteSiteAnalysisOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticAnalysis.ID == nil {
		t.Fatal("DiagnosticAnalysis.ID should not be nil!")
	}

	// From example Execute site slot analysis
	res, err = client.ExecuteSiteAnalysis(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"apprestartanalyses",
		&DiagnosticsExecuteSiteAnalysisOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticAnalysis.ID == nil {
		t.Fatal("DiagnosticAnalysis.ID should not be nil!")
	}
}

func TestDiagnostics_ListSiteDetectors(t *testing.T) {
	// From example List App Detectors
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListSiteDetectors("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		&DiagnosticsListSiteDetectorsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DetectorDefinitionResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DetectorDefinitionResource.ID should not be nil!")
			}
		}
	}

	// From example List App Slot Detectors
	pager = client.ListSiteDetectors("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		&DiagnosticsListSiteDetectorsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DetectorDefinitionResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DetectorDefinitionResource.ID should not be nil!")
			}
		}
	}
}

func TestDiagnostics_GetSiteDetector(t *testing.T) {
	// From example Get App Detector
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetSiteDetector(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"sitecrashes",
		&DiagnosticsGetSiteDetectorOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DetectorDefinitionResource.ID == nil {
		t.Fatal("DetectorDefinitionResource.ID should not be nil!")
	}

	// From example Get App Slot Detector
	res, err = client.GetSiteDetector(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"sitecrashes",
		&DiagnosticsGetSiteDetectorOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DetectorDefinitionResource.ID == nil {
		t.Fatal("DetectorDefinitionResource.ID should not be nil!")
	}
}

func TestDiagnostics_ExecuteSiteDetector(t *testing.T) {
	// From example Execute site detector
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.ExecuteSiteDetector(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"sitecrashes",
		"availability",
		&DiagnosticsExecuteSiteDetectorOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticDetectorResponse.ID == nil {
		t.Fatal("DiagnosticDetectorResponse.ID should not be nil!")
	}

	// From example Execute site slot detector
	res, err = client.ExecuteSiteDetector(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"sitecrashes",
		"availability",
		&DiagnosticsExecuteSiteDetectorOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticDetectorResponse.ID == nil {
		t.Fatal("DiagnosticDetectorResponse.ID should not be nil!")
	}
}

func TestDiagnostics_ListSiteDetectorResponsesSlot(t *testing.T) {
	// From example Get App Detector Responses
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListSiteDetectorResponsesSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"staging",
		&DiagnosticsListSiteDetectorResponsesSlotOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DetectorResponse.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DetectorResponse.ID should not be nil!")
			}
		}
	}

	// From example Get App Slot Detector Responses
	pager = client.ListSiteDetectorResponsesSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"staging",
		&DiagnosticsListSiteDetectorResponsesSlotOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DetectorResponse.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DetectorResponse.ID should not be nil!")
			}
		}
	}
}

func TestDiagnostics_GetSiteDetectorResponseSlot(t *testing.T) {
	// From example Get App Detector Response
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetSiteDetectorResponseSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"runtimeavailability",
		"staging",
		&DiagnosticsGetSiteDetectorResponseSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DetectorResponse.ID == nil {
		t.Fatal("DetectorResponse.ID should not be nil!")
	}

	// From example Get App Slot Detector Response
	res, err = client.GetSiteDetectorResponseSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"runtimeavailability",
		"staging",
		&DiagnosticsGetSiteDetectorResponseSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DetectorResponse.ID == nil {
		t.Fatal("DetectorResponse.ID should not be nil!")
	}
}

func TestDiagnostics_ListSiteDiagnosticCategoriesSlot(t *testing.T) {
	// From example List App Diagnostic Categories
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListSiteDiagnosticCategoriesSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"Production",
		&DiagnosticsListSiteDiagnosticCategoriesSlotOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DiagnosticCategory.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DiagnosticCategory.ID should not be nil!")
			}
		}
	}

	// From example List App Slot Diagnostic Categories
	pager = client.ListSiteDiagnosticCategoriesSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"staging",
		&DiagnosticsListSiteDiagnosticCategoriesSlotOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DiagnosticCategory.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DiagnosticCategory.ID should not be nil!")
			}
		}
	}
}

func TestDiagnostics_GetSiteDiagnosticCategorySlot(t *testing.T) {
	// From example Get App Diagnostic Category
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetSiteDiagnosticCategorySlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"Production",
		&DiagnosticsGetSiteDiagnosticCategorySlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticCategory.ID == nil {
		t.Fatal("DiagnosticCategory.ID should not be nil!")
	}

	// From example Get App Slot Diagnostic Category
	res, err = client.GetSiteDiagnosticCategorySlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"staging",
		&DiagnosticsGetSiteDiagnosticCategorySlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticCategory.ID == nil {
		t.Fatal("DiagnosticCategory.ID should not be nil!")
	}
}

func TestDiagnostics_ListSiteAnalysesSlot(t *testing.T) {
	// From example List App Analyses
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListSiteAnalysesSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"Production",
		&DiagnosticsListSiteAnalysesSlotOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AnalysisDefinition.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AnalysisDefinition.ID should not be nil!")
			}
		}
	}

	// From example List App Slot Analyses
	pager = client.ListSiteAnalysesSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"staging",
		&DiagnosticsListSiteAnalysesSlotOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AnalysisDefinition.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AnalysisDefinition.ID should not be nil!")
			}
		}
	}
}

func TestDiagnostics_GetSiteAnalysisSlot(t *testing.T) {
	// From example Get App Analysis
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetSiteAnalysisSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"appanalysis",
		"Production",
		&DiagnosticsGetSiteAnalysisSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AnalysisDefinition.ID == nil {
		t.Fatal("AnalysisDefinition.ID should not be nil!")
	}

	// From example Get App Slot Analysis
	res, err = client.GetSiteAnalysisSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"appanalysis",
		"staging",
		&DiagnosticsGetSiteAnalysisSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AnalysisDefinition.ID == nil {
		t.Fatal("AnalysisDefinition.ID should not be nil!")
	}
}

func TestDiagnostics_ExecuteSiteAnalysisSlot(t *testing.T) {
	// From example Execute site analysis
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.ExecuteSiteAnalysisSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"apprestartanalyses",
		"Production",
		&DiagnosticsExecuteSiteAnalysisSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticAnalysis.ID == nil {
		t.Fatal("DiagnosticAnalysis.ID should not be nil!")
	}

	// From example Execute site slot analysis
	res, err = client.ExecuteSiteAnalysisSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"apprestartanalyses",
		"staging",
		&DiagnosticsExecuteSiteAnalysisSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticAnalysis.ID == nil {
		t.Fatal("DiagnosticAnalysis.ID should not be nil!")
	}
}

func TestDiagnostics_ListSiteDetectorsSlot(t *testing.T) {
	// From example List App Detectors
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListSiteDetectorsSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"Production",
		&DiagnosticsListSiteDetectorsSlotOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DetectorDefinitionResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DetectorDefinitionResource.ID should not be nil!")
			}
		}
	}

	// From example List App Slot Detectors
	pager = client.ListSiteDetectorsSlot("Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"staging",
		&DiagnosticsListSiteDetectorsSlotOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DetectorDefinitionResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DetectorDefinitionResource.ID should not be nil!")
			}
		}
	}
}

func TestDiagnostics_GetSiteDetectorSlot(t *testing.T) {
	// From example Get App Detector
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetSiteDetectorSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"sitecrashes",
		"Production",
		&DiagnosticsGetSiteDetectorSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DetectorDefinitionResource.ID == nil {
		t.Fatal("DetectorDefinitionResource.ID should not be nil!")
	}

	// From example Get App Slot Detector
	res, err = client.GetSiteDetectorSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"availability",
		"sitecrashes",
		"staging",
		&DiagnosticsGetSiteDetectorSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DetectorDefinitionResource.ID == nil {
		t.Fatal("DetectorDefinitionResource.ID should not be nil!")
	}
}

func TestDiagnostics_ExecuteSiteDetectorSlot(t *testing.T) {
	// From example Execute site detector
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDiagnosticsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.ExecuteSiteDetectorSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"sitecrashes",
		"availability",
		"Production",
		&DiagnosticsExecuteSiteDetectorSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticDetectorResponse.ID == nil {
		t.Fatal("DiagnosticDetectorResponse.ID should not be nil!")
	}

	// From example Execute site slot detector
	res, err = client.ExecuteSiteDetectorSlot(ctx,
		"Sample-WestUSResourceGroup",
		"SampleApp",
		"sitecrashes",
		"availability",
		"staging",
		&DiagnosticsExecuteSiteDetectorSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DiagnosticDetectorResponse.ID == nil {
		t.Fatal("DiagnosticDetectorResponse.ID should not be nil!")
	}
}

func TestGlobal_GetDeletedWebApp(t *testing.T) {
	// From example Get Deleted Web App
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGlobalClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetDeletedWebApp(ctx,
		"9",
		&GlobalGetDeletedWebAppOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DeletedSite.ID == nil {
		t.Fatal("DeletedSite.ID should not be nil!")
	}
}

func TestGlobal_GetDeletedWebAppSnapshots(t *testing.T) {
	// From example Get Deleted Web App Snapshots
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGlobalClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetDeletedWebAppSnapshots(ctx,
		"9",
		&GlobalGetDeletedWebAppSnapshotsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGlobal_GetSubscriptionOperationWithAsyncResponse(t *testing.T) {
	// From example Gets an operation in a subscription and given region
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGlobalClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetSubscriptionOperationWithAsyncResponse(ctx,
		"West US",
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab5d5",
		&GlobalGetSubscriptionOperationWithAsyncResponseOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestKubeEnvironments_ListBySubscription(t *testing.T) {
	// From example List kube environments by subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKubeEnvironmentsClient(con,
		"8efdecc5-919e-44eb-b179-915dca89ebf9")
	pager := client.ListBySubscription(&KubeEnvironmentsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("KubeEnvironment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("KubeEnvironment.ID should not be nil!")
			}
		}
	}
}

func TestKubeEnvironments_ListByResourceGroup(t *testing.T) {
	// From example List kube environments by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKubeEnvironmentsClient(con,
		"8efdecc5-919e-44eb-b179-915dca89ebf9")
	pager := client.ListByResourceGroup("examplerg",
		&KubeEnvironmentsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("KubeEnvironment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("KubeEnvironment.ID should not be nil!")
			}
		}
	}
}

func TestKubeEnvironments_Get(t *testing.T) {
	// From example Get kube environments by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKubeEnvironmentsClient(con,
		"8efdecc5-919e-44eb-b179-915dca89ebf9")
	res, err := client.Get(ctx,
		"examplerg",
		"jlaw-demo1",
		&KubeEnvironmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.KubeEnvironment.ID == nil {
		t.Fatal("KubeEnvironment.ID should not be nil!")
	}
}

func TestKubeEnvironments_CreateOrUpdate(t *testing.T) {
	// From example Create kube environments
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKubeEnvironmentsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"examplerg",
		"testkubeenv",
		KubeEnvironment{
			Resource: Resource{
				Location: to.StringPtr("East US"),
			},
			Properties: &KubeEnvironmentProperties{
				StaticIP: to.StringPtr("1.2.3.4"),
			},
		},
		&KubeEnvironmentsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.KubeEnvironment.ID == nil {
		t.Fatal("KubeEnvironment.ID should not be nil!")
	}
}

func TestKubeEnvironments_Delete(t *testing.T) {
	// From example Delete kube environment by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKubeEnvironmentsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDelete(ctx,
		"examplerg",
		"examplekenv",
		&KubeEnvironmentsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestKubeEnvironments_Update(t *testing.T) {
	// From example Update kube environments
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKubeEnvironmentsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.Update(ctx,
		"examplerg",
		"testkubeenv",
		KubeEnvironmentPatchResource{
			Properties: &KubeEnvironmentPatchResourceProperties{
				StaticIP: to.StringPtr("1.2.3.4"),
			},
		},
		&KubeEnvironmentsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.KubeEnvironment.ID == nil {
		t.Fatal("KubeEnvironment.ID should not be nil!")
	}
}

func TestProvider_GetAvailableStacks(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestProvider_GetFunctionAppStacks(t *testing.T) {
	// From example Get Function App Stacks
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProviderClient(con,
		nil)
	pager := client.GetFunctionAppStacks(&ProviderGetFunctionAppStacksOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FunctionAppStack.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FunctionAppStack.ID should not be nil!")
			}
		}
	}
}

func TestProvider_GetFunctionAppStacksForLocation(t *testing.T) {
	// From example Get Locations Function App Stacks
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProviderClient(con,
		nil)
	pager := client.GetFunctionAppStacksForLocation("westus",
		&ProviderGetFunctionAppStacksForLocationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("FunctionAppStack.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("FunctionAppStack.ID should not be nil!")
			}
		}
	}
}

func TestProvider_GetWebAppStacksForLocation(t *testing.T) {
	// From example Get Locations Web App Stacks
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProviderClient(con,
		nil)
	pager := client.GetWebAppStacksForLocation("westus",
		&ProviderGetWebAppStacksForLocationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WebAppStack.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WebAppStack.ID should not be nil!")
			}
		}
	}
}

func TestProvider_ListOperations(t *testing.T) {
	// From example List operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProviderClient(con,
		nil)
	pager := client.ListOperations(&ProviderListOperationsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestProvider_GetWebAppStacks(t *testing.T) {
	// From example Get Web App Stacks
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewProviderClient(con,
		nil)
	pager := client.GetWebAppStacks(&ProviderGetWebAppStacksOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WebAppStack.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WebAppStack.ID should not be nil!")
			}
		}
	}
}

func TestProvider_GetAvailableStacksOnPrem(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_ResetAllFilters(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_DisableRecommendationForSubscription(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_ListHistoryForHostingEnvironment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_ListRecommendedRulesForHostingEnvironment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_DisableAllForHostingEnvironment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_ResetAllFiltersForHostingEnvironment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_GetRuleDetailsByHostingEnvironment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_DisableRecommendationForHostingEnvironment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_ListHistoryForWebApp(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_ListRecommendedRulesForWebApp(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_DisableAllForWebApp(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_ResetAllFiltersForWebApp(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_GetRuleDetailsByWebApp(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRecommendations_DisableRecommendationForSite(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestResourceHealthMetadata_List(t *testing.T) {
	// From example List ResourceHealthMetadata for a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceHealthMetadataClient(con,
		"4adb32ad-8327-4cbb-b775-b84b4465bb38")
	pager := client.List(&ResourceHealthMetadataListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ResourceHealthMetadata.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ResourceHealthMetadata.ID should not be nil!")
			}
		}
	}
}

func TestResourceHealthMetadata_ListByResourceGroup(t *testing.T) {
	// From example List ResourceHealthMetadata for a resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceHealthMetadataClient(con,
		"4adb32ad-8327-4cbb-b775-b84b4465bb38")
	pager := client.ListByResourceGroup("Default-Web-NorthCentralUS",
		&ResourceHealthMetadataListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ResourceHealthMetadata.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ResourceHealthMetadata.ID should not be nil!")
			}
		}
	}
}

func TestResourceHealthMetadata_ListBySite(t *testing.T) {
	// From example List ResourceHealthMetadata for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceHealthMetadataClient(con,
		"4adb32ad-8327-4cbb-b775-b84b4465bb38")
	pager := client.ListBySite("Default-Web-NorthCentralUS",
		"newsiteinnewASE-NCUS",
		&ResourceHealthMetadataListBySiteOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ResourceHealthMetadata.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ResourceHealthMetadata.ID should not be nil!")
			}
		}
	}
}

func TestResourceHealthMetadata_GetBySite(t *testing.T) {
	// From example Get ResourceHealthMetadata
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceHealthMetadataClient(con,
		"4adb32ad-8327-4cbb-b775-b84b4465bb38")
	res, err := client.GetBySite(ctx,
		"Default-Web-NorthCentralUS",
		"newsiteinnewASE-NCUS",
		&ResourceHealthMetadataGetBySiteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ResourceHealthMetadata.ID == nil {
		t.Fatal("ResourceHealthMetadata.ID should not be nil!")
	}
}

func TestResourceHealthMetadata_ListBySiteSlot(t *testing.T) {
	// From example List ResourceHealthMetadata for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceHealthMetadataClient(con,
		"4adb32ad-8327-4cbb-b775-b84b4465bb38")
	pager := client.ListBySiteSlot("Default-Web-NorthCentralUS",
		"newsiteinnewASE-NCUS",
		"Production",
		&ResourceHealthMetadataListBySiteSlotOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ResourceHealthMetadata.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ResourceHealthMetadata.ID should not be nil!")
			}
		}
	}
}

func TestResourceHealthMetadata_GetBySiteSlot(t *testing.T) {
	// From example Get ResourceHealthMetadata
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourceHealthMetadataClient(con,
		"4adb32ad-8327-4cbb-b775-b84b4465bb38")
	res, err := client.GetBySiteSlot(ctx,
		"Default-Web-NorthCentralUS",
		"newsiteinnewASE-NCUS",
		"Production",
		&ResourceHealthMetadataGetBySiteSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ResourceHealthMetadata.ID == nil {
		t.Fatal("ResourceHealthMetadata.ID should not be nil!")
	}
}

func Test_GenerateGithubAccessTokenForAppserviceCLIAsync(t *testing.T) {
	// From example Generate Github Access Token For AppService CLI
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebSiteManagementClientClient(con,
		nil)
	_, err := client.GenerateGithubAccessTokenForAppserviceCLIAsync(ctx,
		AppserviceGithubTokenRequest{
			Code:  to.StringPtr("somecode"),
			State: to.StringPtr("somestate"),
		},
		&WebSiteManagementClientGenerateGithubAccessTokenForAppserviceCLIAsyncOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func Test_GetPublishingUser(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_UpdatePublishingUser(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_ListSourceControls(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_GetSourceControl(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_UpdateSourceControl(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_ListBillingMeters(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_CheckNameAvailability(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_GetSubscriptionDeploymentLocations(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_ListGeoRegions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_ListSiteIdentifiersAssignedToHostName(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_ListPremierAddOnOffers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_ListSkus(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_VerifyHostingEnvironmentVnet(t *testing.T) {
	// From example VerifyHostingEnvironmentVnet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebSiteManagementClientClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.VerifyHostingEnvironmentVnet(ctx,
		VnetParameters{
			Properties: &VnetParametersProperties{
				VnetName:          to.StringPtr("vNet123"),
				VnetResourceGroup: to.StringPtr("vNet123rg"),
				VnetSubnetName:    to.StringPtr("vNet123SubNet"),
			},
		},
		&WebSiteManagementClientVerifyHostingEnvironmentVnetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VnetValidationFailureDetails.ID == nil {
		t.Fatal("VnetValidationFailureDetails.ID should not be nil!")
	}
}

func Test_Move(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_Validate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func Test_ValidateMove(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestStaticSites_PreviewWorkflow(t *testing.T) {
	// From example Generates a preview workflow file for the static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.PreviewWorkflow(ctx,
		"West US 2",
		StaticSitesWorkflowPreviewRequest{
			Properties: &StaticSitesWorkflowPreviewRequestProperties{
				Branch: to.StringPtr("master"),
				BuildProperties: &StaticSiteBuildProperties{
					APILocation:         to.StringPtr("api"),
					AppArtifactLocation: to.StringPtr("build"),
					AppLocation:         to.StringPtr("app"),
				},
				RepositoryURL: to.StringPtr("https://github.com/username/RepoName"),
			},
		},
		&StaticSitesPreviewWorkflowOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StaticSitesWorkflowPreview.ID == nil {
		t.Fatal("StaticSitesWorkflowPreview.ID should not be nil!")
	}
}

func TestStaticSites_List(t *testing.T) {
	// From example Get all static sites in a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.List(&StaticSitesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StaticSiteARMResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StaticSiteARMResource.ID should not be nil!")
			}
		}
	}
}

func TestStaticSites_GetStaticSitesByResourceGroup(t *testing.T) {
	// From example Get static sites for a resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.GetStaticSitesByResourceGroup("rg",
		&StaticSitesGetStaticSitesByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StaticSiteARMResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StaticSiteARMResource.ID should not be nil!")
			}
		}
	}
}

func TestStaticSites_GetStaticSite(t *testing.T) {
	// From example Get details for a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetStaticSite(ctx,
		"rg",
		"testStaticSite0",
		&StaticSitesGetStaticSiteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StaticSiteARMResource.ID == nil {
		t.Fatal("StaticSiteARMResource.ID should not be nil!")
	}
}

func TestStaticSites_CreateOrUpdateStaticSite(t *testing.T) {
	// From example Create or update a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginCreateOrUpdateStaticSite(ctx,
		"rg",
		"testStaticSite0",
		StaticSiteARMResource{
			Resource: Resource{
				Location: to.StringPtr("West US 2"),
			},
			Properties: &StaticSite{
				Branch: to.StringPtr("master"),
				BuildProperties: &StaticSiteBuildProperties{
					APILocation:         to.StringPtr("api"),
					AppArtifactLocation: to.StringPtr("build"),
					AppLocation:         to.StringPtr("app"),
				},
				RepositoryToken: to.StringPtr("repoToken123"),
				RepositoryURL:   to.StringPtr("https://github.com/username/RepoName"),
			},
			SKU: &SKUDescription{
				Name: to.StringPtr("Basic"),
				Tier: to.StringPtr("Basic"),
			},
		},
		&StaticSitesBeginCreateOrUpdateStaticSiteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.StaticSiteARMResource.ID == nil {
		t.Fatal("StaticSiteARMResource.ID should not be nil!")
	}
}

func TestStaticSites_DeleteStaticSite(t *testing.T) {
	// From example Delete a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDeleteStaticSite(ctx,
		"rg",
		"testStaticSite0",
		&StaticSitesBeginDeleteStaticSiteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStaticSites_UpdateStaticSite(t *testing.T) {
	// From example Patch a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.UpdateStaticSite(ctx,
		"rg",
		"testStaticSite0",
		StaticSitePatchResource{
			Properties: &StaticSite{},
		},
		&StaticSitesUpdateStaticSiteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StaticSiteARMResource.ID == nil {
		t.Fatal("StaticSiteARMResource.ID should not be nil!")
	}
}

func TestStaticSites_ListStaticSiteUsers(t *testing.T) {
	// From example List users for a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListStaticSiteUsers("rg",
		"testStaticSite0",
		"all",
		&StaticSitesListStaticSiteUsersOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StaticSiteUserARMResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StaticSiteUserARMResource.ID should not be nil!")
			}
		}
	}
}

func TestStaticSites_DeleteStaticSiteUser(t *testing.T) {
	// From example Delete a user for a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.DeleteStaticSiteUser(ctx,
		"rg",
		"testStaticSite0",
		"aad",
		"1234",
		&StaticSitesDeleteStaticSiteUserOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestStaticSites_UpdateStaticSiteUser(t *testing.T) {
	// From example Create or update a user for a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.UpdateStaticSiteUser(ctx,
		"rg",
		"testStaticSite0",
		"aad",
		"1234",
		StaticSiteUserARMResource{
			Properties: &StaticSiteUserARMResourceProperties{
				Roles: to.StringPtr("contributor"),
			},
		},
		&StaticSitesUpdateStaticSiteUserOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StaticSiteUserARMResource.ID == nil {
		t.Fatal("StaticSiteUserARMResource.ID should not be nil!")
	}
}

func TestStaticSites_GetStaticSiteBuilds(t *testing.T) {
	// From example Get all builds for a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.GetStaticSiteBuilds("rg",
		"testStaticSite0",
		&StaticSitesGetStaticSiteBuildsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StaticSiteBuildARMResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StaticSiteBuildARMResource.ID should not be nil!")
			}
		}
	}
}

func TestStaticSites_GetStaticSiteBuild(t *testing.T) {
	// From example Get a static site build
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetStaticSiteBuild(ctx,
		"rg",
		"testStaticSite0",
		"12",
		&StaticSitesGetStaticSiteBuildOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StaticSiteBuildARMResource.ID == nil {
		t.Fatal("StaticSiteBuildARMResource.ID should not be nil!")
	}
}

func TestStaticSites_DeleteStaticSiteBuild(t *testing.T) {
	// From example Delete a static site build
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDeleteStaticSiteBuild(ctx,
		"rg",
		"testStaticSite0",
		"12",
		&StaticSitesBeginDeleteStaticSiteBuildOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStaticSites_CreateOrUpdateStaticSiteBuildAppSettings(t *testing.T) {
	// From example Creates or updates the function app settings of a static site build.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdateStaticSiteBuildAppSettings(ctx,
		"rg",
		"testStaticSite0",
		"12",
		StringDictionary{
			Properties: map[string]*string{
				"setting1": to.StringPtr("someval"),
				"setting2": to.StringPtr("someval2"),
			},
		},
		&StaticSitesCreateOrUpdateStaticSiteBuildAppSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StringDictionary.ID == nil {
		t.Fatal("StringDictionary.ID should not be nil!")
	}
}

func TestStaticSites_CreateOrUpdateStaticSiteBuildFunctionAppSettings(t *testing.T) {
	// From example Creates or updates the function app settings of a static site build.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdateStaticSiteBuildFunctionAppSettings(ctx,
		"rg",
		"testStaticSite0",
		"12",
		StringDictionary{
			Properties: map[string]*string{
				"setting1": to.StringPtr("someval"),
				"setting2": to.StringPtr("someval2"),
			},
		},
		&StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StringDictionary.ID == nil {
		t.Fatal("StringDictionary.ID should not be nil!")
	}
}

func TestStaticSites_ListStaticSiteBuildFunctions(t *testing.T) {
	// From example Gets the functions of a particular static site build
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListStaticSiteBuildFunctions("rg",
		"testStaticSite0",
		"default",
		&StaticSitesListStaticSiteBuildFunctionsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StaticSiteFunctionOverviewARMResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StaticSiteFunctionOverviewARMResource.ID should not be nil!")
			}
		}
	}
}

func TestStaticSites_ListStaticSiteBuildAppSettings(t *testing.T) {
	// From example Get app settings of a static site build
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.ListStaticSiteBuildAppSettings(ctx,
		"rg",
		"testStaticSite0",
		"12",
		&StaticSitesListStaticSiteBuildAppSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StringDictionary.ID == nil {
		t.Fatal("StringDictionary.ID should not be nil!")
	}
}

func TestStaticSites_ListStaticSiteBuildFunctionAppSettings(t *testing.T) {
	// From example Get function app settings of a static site build
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.ListStaticSiteBuildFunctionAppSettings(ctx,
		"rg",
		"testStaticSite0",
		"12",
		&StaticSitesListStaticSiteBuildFunctionAppSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StringDictionary.ID == nil {
		t.Fatal("StringDictionary.ID should not be nil!")
	}
}

func TestStaticSites_GetUserProvidedFunctionAppsForStaticSiteBuild(t *testing.T) {
	// From example Get details of the user provided function apps registered with a static site build.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.GetUserProvidedFunctionAppsForStaticSiteBuild("rg",
		"testStaticSite0",
		"default",
		&StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StaticSiteUserProvidedFunctionAppARMResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StaticSiteUserProvidedFunctionAppARMResource.ID should not be nil!")
			}
		}
	}
}

func TestStaticSites_GetUserProvidedFunctionAppForStaticSiteBuild(t *testing.T) {
	// From example Get details of the user provided function app registered with a static site build.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetUserProvidedFunctionAppForStaticSiteBuild(ctx,
		"rg",
		"testStaticSite0",
		"default",
		"testFunctionApp",
		&StaticSitesGetUserProvidedFunctionAppForStaticSiteBuildOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StaticSiteUserProvidedFunctionAppARMResource.ID == nil {
		t.Fatal("StaticSiteUserProvidedFunctionAppARMResource.ID should not be nil!")
	}
}

func TestStaticSites_RegisterUserProvidedFunctionAppWithStaticSiteBuild(t *testing.T) {
	// From example Register a user provided function app with a static site build
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginRegisterUserProvidedFunctionAppWithStaticSiteBuild(ctx,
		"rg",
		"testStaticSite0",
		"default",
		"testFunctionApp",
		StaticSiteUserProvidedFunctionAppARMResource{
			Properties: &StaticSiteUserProvidedFunctionAppARMResourceProperties{
				FunctionAppRegion:     to.StringPtr("West US 2"),
				FunctionAppResourceID: to.StringPtr("/subscription/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/functionRG/providers/Microsoft.Web/sites/testFunctionApp"),
			},
		},
		&StaticSitesBeginRegisterUserProvidedFunctionAppWithStaticSiteBuildOptions{IsForced: to.BoolPtr(true)})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.StaticSiteUserProvidedFunctionAppARMResource.ID == nil {
		t.Fatal("StaticSiteUserProvidedFunctionAppARMResource.ID should not be nil!")
	}
}

func TestStaticSites_DetachUserProvidedFunctionAppFromStaticSiteBuild(t *testing.T) {
	// From example Detach the user provided function app from the static site build.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.DetachUserProvidedFunctionAppFromStaticSiteBuild(ctx,
		"rg",
		"testStaticSite0",
		"12",
		"testFunctionApp",
		&StaticSitesDetachUserProvidedFunctionAppFromStaticSiteBuildOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestStaticSites_CreateZipDeploymentForStaticSiteBuild(t *testing.T) {
	// From example Deploy a site from a zipped package to a particular static site build
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginCreateZipDeploymentForStaticSiteBuild(ctx,
		"rg",
		"testStaticSite0",
		"12",
		StaticSiteZipDeploymentARMResource{
			Properties: &StaticSiteZipDeployment{
				APIZipURL:        to.StringPtr("https://teststorageaccount.net/happy-sea-15afae3e-master-81828877/api-zipdeploy.zip"),
				AppZipURL:        to.StringPtr("https://teststorageaccount.net/happy-sea-15afae3e-master-81828877/app-zipdeploy.zip"),
				DeploymentTitle:  to.StringPtr("Update index.html"),
				FunctionLanguage: to.StringPtr("testFunctionLanguage"),
				Provider:         to.StringPtr("testProvider"),
			},
		},
		&StaticSitesBeginCreateZipDeploymentForStaticSiteBuildOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStaticSites_CreateOrUpdateStaticSiteAppSettings(t *testing.T) {
	// From example Creates or updates the app settings of a static site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdateStaticSiteAppSettings(ctx,
		"rg",
		"testStaticSite0",
		StringDictionary{
			Properties: map[string]*string{
				"setting1": to.StringPtr("someval"),
				"setting2": to.StringPtr("someval2"),
			},
		},
		&StaticSitesCreateOrUpdateStaticSiteAppSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StringDictionary.ID == nil {
		t.Fatal("StringDictionary.ID should not be nil!")
	}
}

func TestStaticSites_CreateOrUpdateStaticSiteFunctionAppSettings(t *testing.T) {
	// From example Creates or updates the function app settings of a static site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateOrUpdateStaticSiteFunctionAppSettings(ctx,
		"rg",
		"testStaticSite0",
		StringDictionary{
			Properties: map[string]*string{
				"setting1": to.StringPtr("someval"),
				"setting2": to.StringPtr("someval2"),
			},
		},
		&StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StringDictionary.ID == nil {
		t.Fatal("StringDictionary.ID should not be nil!")
	}
}

func TestStaticSites_CreateUserRolesInvitationLink(t *testing.T) {
	// From example Create an invitation link for a user for a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.CreateUserRolesInvitationLink(ctx,
		"rg",
		"testStaticSite0",
		StaticSiteUserInvitationRequestResource{
			Properties: &StaticSiteUserInvitationRequestResourceProperties{
				Domain:               to.StringPtr("happy-sea-15afae3e.azurestaticwebsites.net"),
				NumHoursToExpiration: to.Int32Ptr(1),
				Provider:             to.StringPtr("aad"),
				Roles:                to.StringPtr("admin,contributor"),
				UserDetails:          to.StringPtr("username"),
			},
		},
		&StaticSitesCreateUserRolesInvitationLinkOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StaticSiteUserInvitationResponseResource.ID == nil {
		t.Fatal("StaticSiteUserInvitationResponseResource.ID should not be nil!")
	}
}

func TestStaticSites_ListStaticSiteCustomDomains(t *testing.T) {
	// From example List custom domains for a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListStaticSiteCustomDomains("rg",
		"testStaticSite0",
		&StaticSitesListStaticSiteCustomDomainsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StaticSiteCustomDomainOverviewARMResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StaticSiteCustomDomainOverviewARMResource.ID should not be nil!")
			}
		}
	}
}

func TestStaticSites_GetStaticSiteCustomDomain(t *testing.T) {
	// From example Get custom domain for a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetStaticSiteCustomDomain(ctx,
		"rg",
		"testStaticSite0",
		"custom.domain.net",
		&StaticSitesGetStaticSiteCustomDomainOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StaticSiteCustomDomainOverviewARMResource.ID == nil {
		t.Fatal("StaticSiteCustomDomainOverviewARMResource.ID should not be nil!")
	}
}

func TestStaticSites_CreateOrUpdateStaticSiteCustomDomain(t *testing.T) {
	// From example Create or update a custom domain for a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginCreateOrUpdateStaticSiteCustomDomain(ctx,
		"rg",
		"testStaticSite0",
		"custom.domain.net",
		StaticSiteCustomDomainRequestPropertiesARMResource{
			Properties: &StaticSiteCustomDomainRequestPropertiesARMResourceProperties{},
		},
		&StaticSitesBeginCreateOrUpdateStaticSiteCustomDomainOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.StaticSiteCustomDomainOverviewARMResource.ID == nil {
		t.Fatal("StaticSiteCustomDomainOverviewARMResource.ID should not be nil!")
	}
}

func TestStaticSites_DeleteStaticSiteCustomDomain(t *testing.T) {
	// From example Delete a custom domain for a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDeleteStaticSiteCustomDomain(ctx,
		"rg",
		"testStaticSite0",
		"custom.domain.net",
		&StaticSitesBeginDeleteStaticSiteCustomDomainOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStaticSites_ValidateCustomDomainCanBeAddedToStaticSite(t *testing.T) {
	// From example Validate a custom domain for a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginValidateCustomDomainCanBeAddedToStaticSite(ctx,
		"rg",
		"testStaticSite0",
		"custom.domain.net",
		StaticSiteCustomDomainRequestPropertiesARMResource{
			Properties: &StaticSiteCustomDomainRequestPropertiesARMResourceProperties{},
		},
		&StaticSitesBeginValidateCustomDomainCanBeAddedToStaticSiteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStaticSites_DetachStaticSite(t *testing.T) {
	// From example Detach a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDetachStaticSite(ctx,
		"rg",
		"testStaticSite0",
		&StaticSitesBeginDetachStaticSiteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStaticSites_ListStaticSiteFunctions(t *testing.T) {
	// From example Gets the functions of a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListStaticSiteFunctions("rg",
		"testStaticSite0",
		&StaticSitesListStaticSiteFunctionsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StaticSiteFunctionOverviewARMResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StaticSiteFunctionOverviewARMResource.ID should not be nil!")
			}
		}
	}
}

func TestStaticSites_ListStaticSiteAppSettings(t *testing.T) {
	// From example Get app settings of a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.ListStaticSiteAppSettings(ctx,
		"rg",
		"testStaticSite0",
		&StaticSitesListStaticSiteAppSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StringDictionary.ID == nil {
		t.Fatal("StringDictionary.ID should not be nil!")
	}
}

func TestStaticSites_ListStaticSiteConfiguredRoles(t *testing.T) {
	// From example Lists the configured roles for a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.ListStaticSiteConfiguredRoles(ctx,
		"rg",
		"testStaticSite0",
		&StaticSitesListStaticSiteConfiguredRolesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StringList.ID == nil {
		t.Fatal("StringList.ID should not be nil!")
	}
}

func TestStaticSites_ListStaticSiteFunctionAppSettings(t *testing.T) {
	// From example Get function app settings of a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.ListStaticSiteFunctionAppSettings(ctx,
		"rg",
		"testStaticSite0",
		&StaticSitesListStaticSiteFunctionAppSettingsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StringDictionary.ID == nil {
		t.Fatal("StringDictionary.ID should not be nil!")
	}
}

func TestStaticSites_ListStaticSiteSecrets(t *testing.T) {
	// From example List secrets for a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.ListStaticSiteSecrets(ctx,
		"rg",
		"testStaticSite0",
		&StaticSitesListStaticSiteSecretsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StringDictionary.ID == nil {
		t.Fatal("StringDictionary.ID should not be nil!")
	}
}

func TestStaticSites_GetPrivateEndpointConnectionList(t *testing.T) {
	// From example Get a list of private endpoint connections associated with a site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.GetPrivateEndpointConnectionList("rg",
		"testStaticSite0",
		&StaticSitesGetPrivateEndpointConnectionListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RemotePrivateEndpointConnectionARMResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RemotePrivateEndpointConnectionARMResource.ID should not be nil!")
			}
		}
	}
}

func TestStaticSites_GetPrivateEndpointConnection(t *testing.T) {
	// From example Get a private endpoint connection for a site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetPrivateEndpointConnection(ctx,
		"rg",
		"testSite",
		"connection",
		&StaticSitesGetPrivateEndpointConnectionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RemotePrivateEndpointConnectionARMResource.ID == nil {
		t.Fatal("RemotePrivateEndpointConnectionARMResource.ID should not be nil!")
	}
}

func TestStaticSites_ApproveOrRejectPrivateEndpointConnection(t *testing.T) {
	// From example Approves or rejects a private endpoint connection for a site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginApproveOrRejectPrivateEndpointConnection(ctx,
		"rg",
		"testSite",
		"connection",
		PrivateLinkConnectionApprovalRequestResource{
			Properties: &PrivateLinkConnectionApprovalRequest{
				PrivateLinkServiceConnectionState: &PrivateLinkConnectionState{
					Description:     to.StringPtr("Approved by admin."),
					ActionsRequired: to.StringPtr(""),
					Status:          to.StringPtr("Approved"),
				},
			},
		},
		&StaticSitesBeginApproveOrRejectPrivateEndpointConnectionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.RemotePrivateEndpointConnectionARMResource.ID == nil {
		t.Fatal("RemotePrivateEndpointConnectionARMResource.ID should not be nil!")
	}
}

func TestStaticSites_DeletePrivateEndpointConnection(t *testing.T) {
	// From example Delete a private endpoint connection for a site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDeletePrivateEndpointConnection(ctx,
		"rg",
		"testSite",
		"connection",
		&StaticSitesBeginDeletePrivateEndpointConnectionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestStaticSites_GetPrivateLinkResources(t *testing.T) {
	// From example Get private link resources of a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetPrivateLinkResources(ctx,
		"rg",
		"testSite",
		&StaticSitesGetPrivateLinkResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestStaticSites_ResetStaticSiteApiKey(t *testing.T) {
	// From example Reset the api key for a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.ResetStaticSiteAPIKey(ctx,
		"rg",
		"testStaticSite0",
		StaticSiteResetPropertiesARMResource{
			Properties: &StaticSiteResetPropertiesARMResourceProperties{
				RepositoryToken:        to.StringPtr("repoToken123"),
				ShouldUpdateRepository: to.BoolPtr(true),
			},
		},
		&StaticSitesResetStaticSiteAPIKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestStaticSites_GetUserProvidedFunctionAppsForStaticSite(t *testing.T) {
	// From example Get details of the user provided function apps registered with a static site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.GetUserProvidedFunctionAppsForStaticSite("rg",
		"testStaticSite0",
		&StaticSitesGetUserProvidedFunctionAppsForStaticSiteOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StaticSiteUserProvidedFunctionAppARMResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StaticSiteUserProvidedFunctionAppARMResource.ID should not be nil!")
			}
		}
	}
}

func TestStaticSites_GetUserProvidedFunctionAppForStaticSite(t *testing.T) {
	// From example Get details of the user provided function app registered with a static site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetUserProvidedFunctionAppForStaticSite(ctx,
		"rg",
		"testStaticSite0",
		"testFunctionApp",
		&StaticSitesGetUserProvidedFunctionAppForStaticSiteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StaticSiteUserProvidedFunctionAppARMResource.ID == nil {
		t.Fatal("StaticSiteUserProvidedFunctionAppARMResource.ID should not be nil!")
	}
}

func TestStaticSites_RegisterUserProvidedFunctionAppWithStaticSite(t *testing.T) {
	// From example Register a user provided function app with a static site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginRegisterUserProvidedFunctionAppWithStaticSite(ctx,
		"rg",
		"testStaticSite0",
		"testFunctionApp",
		StaticSiteUserProvidedFunctionAppARMResource{
			Properties: &StaticSiteUserProvidedFunctionAppARMResourceProperties{
				FunctionAppRegion:     to.StringPtr("West US 2"),
				FunctionAppResourceID: to.StringPtr("/subscription/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/functionRG/providers/Microsoft.Web/sites/testFunctionApp"),
			},
		},
		&StaticSitesBeginRegisterUserProvidedFunctionAppWithStaticSiteOptions{IsForced: to.BoolPtr(true)})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.StaticSiteUserProvidedFunctionAppARMResource.ID == nil {
		t.Fatal("StaticSiteUserProvidedFunctionAppARMResource.ID should not be nil!")
	}
}

func TestStaticSites_DetachUserProvidedFunctionAppFromStaticSite(t *testing.T) {
	// From example Detach the user provided function app from the static site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.DetachUserProvidedFunctionAppFromStaticSite(ctx,
		"rg",
		"testStaticSite0",
		"testFunctionApp",
		&StaticSitesDetachUserProvidedFunctionAppFromStaticSiteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestStaticSites_CreateZipDeploymentForStaticSite(t *testing.T) {
	// From example Deploy a site from a zipped package
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStaticSitesClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginCreateZipDeploymentForStaticSite(ctx,
		"rg",
		"testStaticSite0",
		StaticSiteZipDeploymentARMResource{
			Properties: &StaticSiteZipDeployment{
				APIZipURL:        to.StringPtr("https://teststorageaccount.net/happy-sea-15afae3e-master-81828877/api-zipdeploy.zip"),
				AppZipURL:        to.StringPtr("https://teststorageaccount.net/happy-sea-15afae3e-master-81828877/app-zipdeploy.zip"),
				DeploymentTitle:  to.StringPtr("Update index.html"),
				FunctionLanguage: to.StringPtr("testFunctionLanguage"),
				Provider:         to.StringPtr("testProvider"),
			},
		},
		&StaticSitesBeginCreateZipDeploymentForStaticSiteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListByResourceGroup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_AnalyzeCustomHostname(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ApplySlotConfigToProduction(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_Backup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListBackups(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetBackupStatus(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteBackup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListBackupStatusSecrets(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_Restore(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListBasicPublishingCredentialsPolicies(t *testing.T) {
	// From example List Publishing Credentials Policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"3fb8d758-2e2c-42e9-a528-a8acdfe87237")
	pager := client.ListBasicPublishingCredentialsPolicies("testrg123",
		"testsite",
		&WebAppsListBasicPublishingCredentialsPoliciesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CsmPublishingCredentialsPoliciesEntity.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CsmPublishingCredentialsPoliciesEntity.ID should not be nil!")
			}
		}
	}
}

func TestWebApps_GetFtpAllowed(t *testing.T) {
	// From example Get FTP Allowed
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetFtpAllowed(ctx,
		"rg",
		"testSite",
		&WebAppsGetFtpAllowedOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CsmPublishingCredentialsPoliciesEntity.ID == nil {
		t.Fatal("CsmPublishingCredentialsPoliciesEntity.ID should not be nil!")
	}
}

func TestWebApps_UpdateFtpAllowed(t *testing.T) {
	// From example Update FTP Allowed
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.UpdateFtpAllowed(ctx,
		"rg",
		"testSite",
		CsmPublishingCredentialsPoliciesEntity{
			Properties: &CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.BoolPtr(true),
			},
		},
		&WebAppsUpdateFtpAllowedOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CsmPublishingCredentialsPoliciesEntity.ID == nil {
		t.Fatal("CsmPublishingCredentialsPoliciesEntity.ID should not be nil!")
	}
}

func TestWebApps_GetScmAllowed(t *testing.T) {
	// From example Get SCM Allowed
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetScmAllowed(ctx,
		"rg",
		"testSite",
		&WebAppsGetScmAllowedOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CsmPublishingCredentialsPoliciesEntity.ID == nil {
		t.Fatal("CsmPublishingCredentialsPoliciesEntity.ID should not be nil!")
	}
}

func TestWebApps_UpdateScmAllowed(t *testing.T) {
	// From example Update SCM Allowed
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.UpdateScmAllowed(ctx,
		"rg",
		"testSite",
		CsmPublishingCredentialsPoliciesEntity{
			Properties: &CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.BoolPtr(true),
			},
		},
		&WebAppsUpdateScmAllowedOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CsmPublishingCredentialsPoliciesEntity.ID == nil {
		t.Fatal("CsmPublishingCredentialsPoliciesEntity.ID should not be nil!")
	}
}

func TestWebApps_ListConfigurations(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateApplicationSettings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListApplicationSettings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateAuthSettings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetAuthSettings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateAuthSettingsV2(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetAuthSettingsV2(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateAzureStorageAccounts(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListAzureStorageAccounts(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateBackupConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteBackupConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetBackupConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetAppSettingsKeyVaultReferences(t *testing.T) {
	// From example Get Azure Key Vault references for app settings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.GetAppSettingsKeyVaultReferences("testrg123",
		"testc6282",
		&WebAppsGetAppSettingsKeyVaultReferencesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("APIKVReference.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("APIKVReference.ID should not be nil!")
			}
		}
	}
}

func TestWebApps_GetAppSettingKeyVaultReference(t *testing.T) {
	// From example Get Azure Key Vault app setting reference
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetAppSettingKeyVaultReference(ctx,
		"testrg123",
		"testc6282",
		"setting",
		&WebAppsGetAppSettingKeyVaultReferenceOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIKVReference.ID == nil {
		t.Fatal("APIKVReference.ID should not be nil!")
	}
}

func TestWebApps_GetSiteConnectionStringKeyVaultReferences(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSiteConnectionStringKeyVaultReference(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateConnectionStrings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListConnectionStrings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetDiagnosticLogsConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateDiagnosticLogsConfig(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateMetadata(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListMetadata(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPublishingCredentials(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSitePushSettings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSitePushSettings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSlotConfigurationNames(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSlotConfigurationNames(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateConfiguration(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListConfigurationSnapshotInfo(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetConfigurationSnapshot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RecoverSiteConfigurationSnapshot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetWebSiteContainerLogs(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetContainerLogsZip(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListContinuousWebJobs(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetContinuousWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteContinuousWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StartContinuousWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StopContinuousWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListDeployments(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetDeployment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateDeployment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteDeployment(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListDeploymentLog(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DiscoverBackup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListDomainOwnershipIdentifiers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetDomainOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateDomainOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteDomainOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateDomainOwnershipIdentifier(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetMSDeployStatus(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateMSDeployOperation(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetMSDeployLog(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListFunctions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetFunctionsAdminToken(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetFunction(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateFunction(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteFunction(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateFunctionSecret(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteFunctionSecret(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListFunctionKeys(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListFunctionSecrets(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListHostKeys(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSyncStatus(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_SyncFunctions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateHostSecret(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteHostSecret(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListHostNameBindings(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetHostNameBinding(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateHostNameBinding(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteHostNameBinding(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetHybridConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateHybridConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteHybridConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateHybridConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListHybridConnections(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListRelayServiceConnections(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetRelayServiceConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateRelayServiceConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteRelayServiceConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateRelayServiceConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceIdentifiers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceInfo(t *testing.T) {
	// From example Get site instance info
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetInstanceInfo(ctx,
		"testrg123",
		"tests346",
		"134987120",
		&WebAppsGetInstanceInfoOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WebSiteInstanceStatus.ID == nil {
		t.Fatal("WebSiteInstanceStatus.ID should not be nil!")
	}
}

func TestWebApps_GetInstanceMsDeployStatus(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateInstanceMSDeployOperation(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceMSDeployLog(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceProcesses(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceProcess(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteInstanceProcess(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceProcessDump(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceProcessModules(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceProcessModule(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceProcessThreads(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_IsCloneable(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSiteBackups(t *testing.T) {
	// From example List backups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListSiteBackups("testrg123",
		"tests346",
		&WebAppsListSiteBackupsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BackupItem.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BackupItem.ID should not be nil!")
			}
		}
	}
}

func TestWebApps_ListSyncFunctionTriggers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_MigrateStorage(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_MigrateMySql(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetMigrateMySqlStatus(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSwiftVirtualNetworkConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateSwiftVirtualNetworkConnectionWithCheck(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteSwiftVirtualNetwork(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSwiftVirtualNetworkConnectionWithCheck(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListNetworkFeatures(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetNetworkTraceOperation(t *testing.T) {
	// From example Get the current status of a network trace operation for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetNetworkTraceOperation(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		&WebAppsGetNetworkTraceOperationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_StartWebSiteNetworkTrace(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StartWebSiteNetworkTraceOperation(t *testing.T) {
	// From example Start a new network trace operation for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginStartWebSiteNetworkTraceOperation(ctx,
		"testrg123",
		"SampleApp",
		&WebAppsBeginStartWebSiteNetworkTraceOperationOptions{DurationInSeconds: to.Int32Ptr(60)})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_StopWebSiteNetworkTrace(t *testing.T) {
	// From example Stop a currently running network trace operation for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.StopWebSiteNetworkTrace(ctx,
		"testrg123",
		"SampleApp",
		&WebAppsStopWebSiteNetworkTraceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_GetNetworkTraces(t *testing.T) {
	// From example Get NetworkTraces for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetNetworkTraces(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		&WebAppsGetNetworkTracesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_GetNetworkTraceOperationV2(t *testing.T) {
	// From example Get the current status of a network trace operation for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetNetworkTraceOperationV2(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		&WebAppsGetNetworkTraceOperationV2Options{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_GetNetworkTracesV2(t *testing.T) {
	// From example Get NetworkTraces for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetNetworkTracesV2(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		&WebAppsGetNetworkTracesV2Options{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_GenerateNewSitePublishingPassword(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPerfMonCounters(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSitePhpErrorLogFlag(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPremierAddOns(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPremierAddOn(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_AddPremierAddOn(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeletePremierAddOn(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdatePremierAddOn(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPrivateAccess(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_PutPrivateAccessVnet(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPrivateEndpointConnectionList(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPrivateEndpointConnection(t *testing.T) {
	// From example Get a private endpoint connection for a site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetPrivateEndpointConnection(ctx,
		"rg",
		"testSite",
		"connection",
		&WebAppsGetPrivateEndpointConnectionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RemotePrivateEndpointConnectionARMResource.ID == nil {
		t.Fatal("RemotePrivateEndpointConnectionARMResource.ID should not be nil!")
	}
}

func TestWebApps_ApproveOrRejectPrivateEndpointConnection(t *testing.T) {
	// From example Approves or rejects a private endpoint connection for a site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginApproveOrRejectPrivateEndpointConnection(ctx,
		"rg",
		"testSite",
		"connection",
		PrivateLinkConnectionApprovalRequestResource{
			Properties: &PrivateLinkConnectionApprovalRequest{
				PrivateLinkServiceConnectionState: &PrivateLinkConnectionState{
					Description:     to.StringPtr("Approved by admin."),
					ActionsRequired: to.StringPtr(""),
					Status:          to.StringPtr("Approved"),
				},
			},
		},
		&WebAppsBeginApproveOrRejectPrivateEndpointConnectionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.RemotePrivateEndpointConnectionARMResource.ID == nil {
		t.Fatal("RemotePrivateEndpointConnectionARMResource.ID should not be nil!")
	}
}

func TestWebApps_DeletePrivateEndpointConnection(t *testing.T) {
	// From example Delete a private endpoint connection for a site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDeletePrivateEndpointConnection(ctx,
		"rg",
		"testSite",
		"connection",
		&WebAppsBeginDeletePrivateEndpointConnectionOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_GetPrivateLinkResources(t *testing.T) {
	// From example Get private link resources of a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetPrivateLinkResources(ctx,
		"rg",
		"testSite",
		&WebAppsGetPrivateLinkResourcesOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_ListProcesses(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetProcess(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteProcess(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetProcessDump(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListProcessModules(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetProcessModule(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListProcessThreads(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPublicCertificates(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPublicCertificate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdatePublicCertificate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeletePublicCertificate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPublishingProfileXmlWithSecrets(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ResetProductionSlotConfig(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_Restart(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestoreFromBackupBlob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestoreFromDeletedApp(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestoreSnapshot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSiteExtensions(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSiteExtension(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_InstallSiteExtension(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteSiteExtension(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSlots(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_AnalyzeCustomHostnameSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ApplySlotConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_BackupSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListBackupsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetBackupStatusSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteBackupSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListBackupStatusSecretsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestoreSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListBasicPublishingCredentialsPoliciesSlot(t *testing.T) {
	// From example List Publishing Credentials Policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"3fb8d758-2e2c-42e9-a528-a8acdfe87237")
	pager := client.ListBasicPublishingCredentialsPoliciesSlot("testrg123",
		"testsite",
		"staging",
		&WebAppsListBasicPublishingCredentialsPoliciesSlotOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CsmPublishingCredentialsPoliciesEntity.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CsmPublishingCredentialsPoliciesEntity.ID should not be nil!")
			}
		}
	}
}

func TestWebApps_GetFtpAllowedSlot(t *testing.T) {
	// From example Get FTP Allowed
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetFtpAllowedSlot(ctx,
		"rg",
		"testSite",
		"stage",
		&WebAppsGetFtpAllowedSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CsmPublishingCredentialsPoliciesEntity.ID == nil {
		t.Fatal("CsmPublishingCredentialsPoliciesEntity.ID should not be nil!")
	}
}

func TestWebApps_UpdateFtpAllowedSlot(t *testing.T) {
	// From example Update FTP Allowed
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.UpdateFtpAllowedSlot(ctx,
		"rg",
		"testSite",
		"stage",
		CsmPublishingCredentialsPoliciesEntity{
			Properties: &CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.BoolPtr(true),
			},
		},
		&WebAppsUpdateFtpAllowedSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CsmPublishingCredentialsPoliciesEntity.ID == nil {
		t.Fatal("CsmPublishingCredentialsPoliciesEntity.ID should not be nil!")
	}
}

func TestWebApps_GetScmAllowedSlot(t *testing.T) {
	// From example Get SCM Allowed
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetScmAllowedSlot(ctx,
		"rg",
		"testSite",
		"stage",
		&WebAppsGetScmAllowedSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CsmPublishingCredentialsPoliciesEntity.ID == nil {
		t.Fatal("CsmPublishingCredentialsPoliciesEntity.ID should not be nil!")
	}
}

func TestWebApps_UpdateScmAllowedSlot(t *testing.T) {
	// From example Update SCM Allowed
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.UpdateScmAllowedSlot(ctx,
		"rg",
		"testSite",
		"stage",
		CsmPublishingCredentialsPoliciesEntity{
			Properties: &CsmPublishingCredentialsPoliciesEntityProperties{
				Allow: to.BoolPtr(true),
			},
		},
		&WebAppsUpdateScmAllowedSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CsmPublishingCredentialsPoliciesEntity.ID == nil {
		t.Fatal("CsmPublishingCredentialsPoliciesEntity.ID should not be nil!")
	}
}

func TestWebApps_ListConfigurationsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateApplicationSettingsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListApplicationSettingsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateAuthSettingsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetAuthSettingsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateAuthSettingsV2Slot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetAuthSettingsV2Slot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateAzureStorageAccountsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListAzureStorageAccountsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateBackupConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteBackupConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetBackupConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetAppSettingsKeyVaultReferencesSlot(t *testing.T) {
	// From example Get Azure Key Vault references for app settings for slot
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.GetAppSettingsKeyVaultReferencesSlot("testrg123",
		"testc6282",
		"stage",
		&WebAppsGetAppSettingsKeyVaultReferencesSlotOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("APIKVReference.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("APIKVReference.ID should not be nil!")
			}
		}
	}
}

func TestWebApps_GetAppSettingKeyVaultReferenceSlot(t *testing.T) {
	// From example Get Azure Key Vault slot app setting reference
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetAppSettingKeyVaultReferenceSlot(ctx,
		"testrg123",
		"testc6282",
		"setting",
		"stage",
		&WebAppsGetAppSettingKeyVaultReferenceSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.APIKVReference.ID == nil {
		t.Fatal("APIKVReference.ID should not be nil!")
	}
}

func TestWebApps_GetSiteConnectionStringKeyVaultReferencesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSiteConnectionStringKeyVaultReferenceSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateConnectionStringsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListConnectionStringsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetDiagnosticLogsConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateDiagnosticLogsConfigSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateMetadataSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListMetadataSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPublishingCredentialsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSitePushSettingsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSitePushSettingsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListConfigurationSnapshotInfoSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetConfigurationSnapshotSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RecoverSiteConfigurationSnapshotSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetWebSiteContainerLogsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetContainerLogsZipSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListContinuousWebJobsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetContinuousWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteContinuousWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StartContinuousWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StopContinuousWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListDeploymentsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetDeploymentSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateDeploymentSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteDeploymentSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListDeploymentLogSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DiscoverBackupSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListDomainOwnershipIdentifiersSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetDomainOwnershipIdentifierSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateDomainOwnershipIdentifierSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteDomainOwnershipIdentifierSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateDomainOwnershipIdentifierSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetMSDeployStatusSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateMSDeployOperationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetMSDeployLogSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceFunctionsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetFunctionsAdminTokenSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceFunctionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateInstanceFunctionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteInstanceFunctionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateFunctionSecretSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteFunctionSecretSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListFunctionKeysSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListFunctionSecretsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListHostKeysSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSyncStatusSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_SyncFunctionsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateHostSecretSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteHostSecretSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListHostNameBindingsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetHostNameBindingSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateHostNameBindingSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteHostNameBindingSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetHybridConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateHybridConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteHybridConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateHybridConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListHybridConnectionsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListRelayServiceConnectionsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetRelayServiceConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateRelayServiceConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteRelayServiceConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateRelayServiceConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceIdentifiersSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceInfoSlot(t *testing.T) {
	// From example Get site instance info
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetInstanceInfoSlot(ctx,
		"testrg123",
		"tests346",
		"134987120",
		"staging",
		&WebAppsGetInstanceInfoSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WebSiteInstanceStatus.ID == nil {
		t.Fatal("WebSiteInstanceStatus.ID should not be nil!")
	}
}

func TestWebApps_GetInstanceMsDeployStatusSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateInstanceMSDeployOperationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceMSDeployLogSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceProcessesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceProcessSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteInstanceProcessSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceProcessDumpSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceProcessModulesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetInstanceProcessModuleSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListInstanceProcessThreadsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_IsCloneableSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSiteBackupsSlot(t *testing.T) {
	// From example List backups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	pager := client.ListSiteBackupsSlot("testrg123",
		"tests346",
		"staging",
		&WebAppsListSiteBackupsSlotOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BackupItem.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BackupItem.ID should not be nil!")
			}
		}
	}
}

func TestWebApps_ListSyncFunctionTriggersSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetMigrateMySqlStatusSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSwiftVirtualNetworkConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateSwiftVirtualNetworkConnectionWithCheckSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteSwiftVirtualNetworkSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSwiftVirtualNetworkConnectionWithCheckSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListNetworkFeaturesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetNetworkTraceOperationSlot(t *testing.T) {
	// From example Get the current status of a network trace operation for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetNetworkTraceOperationSlot(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		"Production",
		&WebAppsGetNetworkTraceOperationSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_StartWebSiteNetworkTraceSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StartWebSiteNetworkTraceOperationSlot(t *testing.T) {
	// From example Start a new network trace operation for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginStartWebSiteNetworkTraceOperationSlot(ctx,
		"testrg123",
		"SampleApp",
		"Production",
		&WebAppsBeginStartWebSiteNetworkTraceOperationSlotOptions{DurationInSeconds: to.Int32Ptr(60)})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_StopWebSiteNetworkTraceSlot(t *testing.T) {
	// From example Stop a currently running network trace operation for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.StopWebSiteNetworkTraceSlot(ctx,
		"testrg123",
		"SampleApp",
		"Production",
		&WebAppsStopWebSiteNetworkTraceSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_GetNetworkTracesSlot(t *testing.T) {
	// From example Get NetworkTraces for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetNetworkTracesSlot(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		"Production",
		&WebAppsGetNetworkTracesSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_GetNetworkTraceOperationSlotV2(t *testing.T) {
	// From example Get the current status of a network trace operation for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetNetworkTraceOperationSlotV2(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		"Production",
		&WebAppsGetNetworkTraceOperationSlotV2Options{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_GetNetworkTracesSlotV2(t *testing.T) {
	// From example Get NetworkTraces for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetNetworkTracesSlotV2(ctx,
		"testrg123",
		"SampleApp",
		"c291433b-53ad-4c49-8cae-0a293eae1c6d",
		"Production",
		&WebAppsGetNetworkTracesSlotV2Options{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_GenerateNewSitePublishingPasswordSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPerfMonCountersSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSitePhpErrorLogFlagSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPremierAddOnsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPremierAddOnSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_AddPremierAddOnSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeletePremierAddOnSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdatePremierAddOnSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPrivateAccessSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_PutPrivateAccessVnetSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPrivateEndpointConnectionListSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPrivateEndpointConnectionSlot(t *testing.T) {
	// From example Get a private endpoint connection for a site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	res, err := client.GetPrivateEndpointConnectionSlot(ctx,
		"rg",
		"testSite",
		"connection",
		"stage",
		&WebAppsGetPrivateEndpointConnectionSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RemotePrivateEndpointConnectionARMResource.ID == nil {
		t.Fatal("RemotePrivateEndpointConnectionARMResource.ID should not be nil!")
	}
}

func TestWebApps_ApproveOrRejectPrivateEndpointConnectionSlot(t *testing.T) {
	// From example Approves or rejects a private endpoint connection for a site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginApproveOrRejectPrivateEndpointConnectionSlot(ctx,
		"rg",
		"testSite",
		"connection",
		"stage",
		PrivateLinkConnectionApprovalRequestResource{
			Properties: &PrivateLinkConnectionApprovalRequest{
				PrivateLinkServiceConnectionState: &PrivateLinkConnectionState{
					Description:     to.StringPtr("Approved by admin."),
					ActionsRequired: to.StringPtr(""),
					Status:          to.StringPtr("Approved"),
				},
			},
		},
		&WebAppsBeginApproveOrRejectPrivateEndpointConnectionSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.RemotePrivateEndpointConnectionARMResource.ID == nil {
		t.Fatal("RemotePrivateEndpointConnectionARMResource.ID should not be nil!")
	}
}

func TestWebApps_DeletePrivateEndpointConnectionSlot(t *testing.T) {
	// From example Delete a private endpoint connection for a site.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginDeletePrivateEndpointConnectionSlot(ctx,
		"rg",
		"testSite",
		"connection",
		"stage",
		&WebAppsBeginDeletePrivateEndpointConnectionSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_GetPrivateLinkResourcesSlot(t *testing.T) {
	// From example Get private link resources of a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.GetPrivateLinkResourcesSlot(ctx,
		"rg",
		"testSite",
		"stage",
		&WebAppsGetPrivateLinkResourcesSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_ListProcessesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetProcessSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteProcessSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetProcessDumpSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListProcessModulesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetProcessModuleSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListProcessThreadsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPublicCertificatesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetPublicCertificateSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdatePublicCertificateSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeletePublicCertificateSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListPublishingProfileXmlWithSecretsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ResetSlotConfigurationSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestartSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestoreFromBackupBlobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestoreFromDeletedAppSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RestoreSnapshotSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSiteExtensionsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSiteExtensionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_InstallSiteExtensionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteSiteExtensionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSlotDifferencesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_SwapSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSnapshotsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSnapshotsFromDRSecondarySlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSourceControlSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateSourceControlSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteSourceControlSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSourceControlSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StartSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StartNetworkTraceSlot(t *testing.T) {
	// From example Start a new network trace operation for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginStartNetworkTraceSlot(ctx,
		"testrg123",
		"SampleApp",
		"Production",
		&WebAppsBeginStartNetworkTraceSlotOptions{DurationInSeconds: to.Int32Ptr(60)})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_StopSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StopNetworkTraceSlot(t *testing.T) {
	// From example Stop a currently running network trace operation for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.StopNetworkTraceSlot(ctx,
		"testrg123",
		"SampleApp",
		"Production",
		&WebAppsStopNetworkTraceSlotOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_SyncRepositorySlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_SyncFunctionTriggersSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListTriggeredWebJobsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetTriggeredWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteTriggeredWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListTriggeredWebJobHistorySlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetTriggeredWebJobHistorySlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RunTriggeredWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListUsagesSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListVnetConnectionsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetVnetConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateVnetConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteVnetConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateVnetConnectionSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetVnetConnectionGatewaySlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateVnetConnectionGatewaySlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateVnetConnectionGatewaySlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListWebJobsSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetWebJobSlot(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSlotDifferencesFromProduction(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_SwapSlotWithProduction(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSnapshots(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListSnapshotsFromDRSecondary(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetSourceControl(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateSourceControl(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteSourceControl(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateSourceControl(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_Start(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StartNetworkTrace(t *testing.T) {
	// From example Start a new network trace operation for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	poller, err := client.BeginStartNetworkTrace(ctx,
		"testrg123",
		"SampleApp",
		&WebAppsBeginStartNetworkTraceOptions{DurationInSeconds: to.Int32Ptr(60)})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_Stop(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_StopNetworkTrace(t *testing.T) {
	// From example Stop a currently running network trace operation for a site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWebAppsClient(con,
		"34adfa4f-cedf-4dc0-ba29-b6d1a69ab345")
	_, err := client.StopNetworkTrace(ctx,
		"testrg123",
		"SampleApp",
		&WebAppsStopNetworkTraceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWebApps_SyncRepository(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_SyncFunctionTriggers(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListTriggeredWebJobs(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetTriggeredWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteTriggeredWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListTriggeredWebJobHistory(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetTriggeredWebJobHistory(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_RunTriggeredWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListUsages(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListVnetConnections(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetVnetConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateVnetConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_DeleteVnetConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateVnetConnection(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetVnetConnectionGateway(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_CreateOrUpdateVnetConnectionGateway(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_UpdateVnetConnectionGateway(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_ListWebJobs(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestWebApps_GetWebJob(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
